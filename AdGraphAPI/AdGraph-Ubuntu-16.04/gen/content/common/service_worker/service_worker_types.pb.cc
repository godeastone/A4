// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_worker_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_worker_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace content {
namespace proto {
namespace internal {
class ServiceWorkerFetchRequest_ReferrerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceWorkerFetchRequest_Referrer> {
} _ServiceWorkerFetchRequest_Referrer_default_instance_;
class ServiceWorkerFetchRequest_HeadersEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceWorkerFetchRequest::ServiceWorkerFetchRequest_HeadersEntry> {
} _ServiceWorkerFetchRequest_HeadersEntry_default_instance_;
class ServiceWorkerFetchRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceWorkerFetchRequest> {
} _ServiceWorkerFetchRequest_default_instance_;

namespace protobuf_service_5fworker_5ftypes_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ServiceWorkerFetchRequest_Referrer_default_instance_.Shutdown();
  _ServiceWorkerFetchRequest_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ServiceWorkerFetchRequest_Referrer_default_instance_.DefaultConstruct();
  _ServiceWorkerFetchRequest_HeadersEntry_default_instance_.DefaultConstruct();
  _ServiceWorkerFetchRequest_default_instance_.DefaultConstruct();
  _ServiceWorkerFetchRequest_HeadersEntry_default_instance_.get_mutable()->set_default_instance(_ServiceWorkerFetchRequest_HeadersEntry_default_instance_.get_mutable());
  _ServiceWorkerFetchRequest_HeadersEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _ServiceWorkerFetchRequest_default_instance_.get_mutable()->referrer_ = const_cast< ::content::proto::internal::ServiceWorkerFetchRequest_Referrer*>(
      ::content::proto::internal::ServiceWorkerFetchRequest_Referrer::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_service_5fworker_5ftypes_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerFetchRequest_Referrer::kUrlFieldNumber;
const int ServiceWorkerFetchRequest_Referrer::kPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerFetchRequest_Referrer::ServiceWorkerFetchRequest_Referrer()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_5fworker_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
}
ServiceWorkerFetchRequest_Referrer::ServiceWorkerFetchRequest_Referrer(const ServiceWorkerFetchRequest_Referrer& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  policy_ = from.policy_;
  // @@protoc_insertion_point(copy_constructor:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
}

void ServiceWorkerFetchRequest_Referrer::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_ = 0;
}

ServiceWorkerFetchRequest_Referrer::~ServiceWorkerFetchRequest_Referrer() {
  // @@protoc_insertion_point(destructor:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
  SharedDtor();
}

void ServiceWorkerFetchRequest_Referrer::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServiceWorkerFetchRequest_Referrer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerFetchRequest_Referrer& ServiceWorkerFetchRequest_Referrer::default_instance() {
  protobuf_service_5fworker_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceWorkerFetchRequest_Referrer* ServiceWorkerFetchRequest_Referrer::New(::google::protobuf::Arena* arena) const {
  ServiceWorkerFetchRequest_Referrer* n = new ServiceWorkerFetchRequest_Referrer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceWorkerFetchRequest_Referrer::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  policy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServiceWorkerFetchRequest_Referrer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_policy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &policy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
  return false;
#undef DO_
}

void ServiceWorkerFetchRequest_Referrer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int32 policy = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->policy(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
}

size_t ServiceWorkerFetchRequest_Referrer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 policy = 2;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->policy());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWorkerFetchRequest_Referrer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerFetchRequest_Referrer*>(&from));
}

void ServiceWorkerFetchRequest_Referrer::MergeFrom(const ServiceWorkerFetchRequest_Referrer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      policy_ = from.policy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceWorkerFetchRequest_Referrer::CopyFrom(const ServiceWorkerFetchRequest_Referrer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerFetchRequest_Referrer::IsInitialized() const {
  return true;
}

void ServiceWorkerFetchRequest_Referrer::Swap(ServiceWorkerFetchRequest_Referrer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceWorkerFetchRequest_Referrer::InternalSwap(ServiceWorkerFetchRequest_Referrer* other) {
  url_.Swap(&other->url_);
  std::swap(policy_, other->policy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerFetchRequest_Referrer::GetTypeName() const {
  return "content.proto.internal.ServiceWorkerFetchRequest.Referrer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerFetchRequest_Referrer

// optional string url = 1;
bool ServiceWorkerFetchRequest_Referrer::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceWorkerFetchRequest_Referrer::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ServiceWorkerFetchRequest_Referrer::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServiceWorkerFetchRequest_Referrer::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ServiceWorkerFetchRequest_Referrer::url() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
  return url_.GetNoArena();
}
void ServiceWorkerFetchRequest_Referrer::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
}
#if LANG_CXX11
void ServiceWorkerFetchRequest_Referrer::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
}
#endif
void ServiceWorkerFetchRequest_Referrer::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
}
void ServiceWorkerFetchRequest_Referrer::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
}
::std::string* ServiceWorkerFetchRequest_Referrer::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerFetchRequest_Referrer::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerFetchRequest_Referrer::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
}

// optional int32 policy = 2;
bool ServiceWorkerFetchRequest_Referrer::has_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServiceWorkerFetchRequest_Referrer::set_has_policy() {
  _has_bits_[0] |= 0x00000002u;
}
void ServiceWorkerFetchRequest_Referrer::clear_has_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServiceWorkerFetchRequest_Referrer::clear_policy() {
  policy_ = 0;
  clear_has_policy();
}
::google::protobuf::int32 ServiceWorkerFetchRequest_Referrer::policy() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.Referrer.policy)
  return policy_;
}
void ServiceWorkerFetchRequest_Referrer::set_policy(::google::protobuf::int32 value) {
  set_has_policy();
  policy_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.Referrer.policy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerFetchRequest::kUrlFieldNumber;
const int ServiceWorkerFetchRequest::kMethodFieldNumber;
const int ServiceWorkerFetchRequest::kHeadersFieldNumber;
const int ServiceWorkerFetchRequest::kReferrerFieldNumber;
const int ServiceWorkerFetchRequest::kIsReloadFieldNumber;
const int ServiceWorkerFetchRequest::kModeFieldNumber;
const int ServiceWorkerFetchRequest::kIsMainResourceLoadFieldNumber;
const int ServiceWorkerFetchRequest::kRequestContextTypeFieldNumber;
const int ServiceWorkerFetchRequest::kCredentialsModeFieldNumber;
const int ServiceWorkerFetchRequest::kCacheModeFieldNumber;
const int ServiceWorkerFetchRequest::kRedirectModeFieldNumber;
const int ServiceWorkerFetchRequest::kIntegrityFieldNumber;
const int ServiceWorkerFetchRequest::kKeepaliveFieldNumber;
const int ServiceWorkerFetchRequest::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerFetchRequest::ServiceWorkerFetchRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_5fworker_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.internal.ServiceWorkerFetchRequest)
}
ServiceWorkerFetchRequest::ServiceWorkerFetchRequest(const ServiceWorkerFetchRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method()) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  integrity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_integrity()) {
    integrity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.integrity_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.has_referrer()) {
    referrer_ = new ::content::proto::internal::ServiceWorkerFetchRequest_Referrer(*from.referrer_);
  } else {
    referrer_ = NULL;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&redirect_mode_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(redirect_mode_));
  // @@protoc_insertion_point(copy_constructor:content.proto.internal.ServiceWorkerFetchRequest)
}

void ServiceWorkerFetchRequest::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  integrity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&referrer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redirect_mode_) -
      reinterpret_cast<char*>(&referrer_)) + sizeof(redirect_mode_));
}

ServiceWorkerFetchRequest::~ServiceWorkerFetchRequest() {
  // @@protoc_insertion_point(destructor:content.proto.internal.ServiceWorkerFetchRequest)
  SharedDtor();
}

void ServiceWorkerFetchRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  integrity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete referrer_;
  }
}

void ServiceWorkerFetchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerFetchRequest& ServiceWorkerFetchRequest::default_instance() {
  protobuf_service_5fworker_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceWorkerFetchRequest* ServiceWorkerFetchRequest::New(::google::protobuf::Arena* arena) const {
  ServiceWorkerFetchRequest* n = new ServiceWorkerFetchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceWorkerFetchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.internal.ServiceWorkerFetchRequest)
  headers_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_method()) {
      GOOGLE_DCHECK(!method_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*method_.UnsafeRawStringPointer())->clear();
    }
    if (has_integrity()) {
      GOOGLE_DCHECK(!integrity_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*integrity_.UnsafeRawStringPointer())->clear();
    }
    if (has_client_id()) {
      GOOGLE_DCHECK(!client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_referrer()) {
      GOOGLE_DCHECK(referrer_ != NULL);
      referrer_->::content::proto::internal::ServiceWorkerFetchRequest_Referrer::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_reload_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(is_reload_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&is_main_resource_load_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redirect_mode_) -
        reinterpret_cast<char*>(&is_main_resource_load_)) + sizeof(redirect_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServiceWorkerFetchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:content.proto.internal.ServiceWorkerFetchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          ServiceWorkerFetchRequest_HeadersEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              ServiceWorkerFetchRequest_HeadersEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.proto.internal.ServiceWorkerFetchRequest.Referrer referrer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_referrer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_reload = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_reload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_main_resource_load = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_main_resource_load();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_main_resource_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 request_context_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_request_context_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_context_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 credentials_mode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_credentials_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credentials_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cache_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_cache_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 redirect_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_redirect_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redirect_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string integrity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_integrity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool keepalive = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_keepalive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepalive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.internal.ServiceWorkerFetchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.internal.ServiceWorkerFetchRequest)
  return false;
#undef DO_
}

void ServiceWorkerFetchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.internal.ServiceWorkerFetchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string method = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method(), output);
  }

  // map<string, string> headers = 3;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ServiceWorkerFetchRequest_HeadersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServiceWorkerFetchRequest_HeadersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .content.proto.internal.ServiceWorkerFetchRequest.Referrer referrer = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->referrer_, output);
  }

  // optional bool is_reload = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_reload(), output);
  }

  // optional int32 mode = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mode(), output);
  }

  // optional bool is_main_resource_load = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_main_resource_load(), output);
  }

  // optional int32 request_context_type = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->request_context_type(), output);
  }

  // optional int32 credentials_mode = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->credentials_mode(), output);
  }

  // optional int32 cache_mode = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cache_mode(), output);
  }

  // optional int32 redirect_mode = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->redirect_mode(), output);
  }

  // optional string integrity = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->integrity(), output);
  }

  // optional bool keepalive = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->keepalive(), output);
  }

  // optional string client_id = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->client_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.internal.ServiceWorkerFetchRequest)
}

size_t ServiceWorkerFetchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.internal.ServiceWorkerFetchRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // map<string, string> headers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->headers_size());
  {
    ::google::protobuf::scoped_ptr<ServiceWorkerFetchRequest_HeadersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->headers().begin();
        it != this->headers().end(); ++it) {
      entry.reset(headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string method = 2;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional string integrity = 12;
    if (has_integrity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->integrity());
    }

    // optional string client_id = 14;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id());
    }

    // optional .content.proto.internal.ServiceWorkerFetchRequest.Referrer referrer = 4;
    if (has_referrer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->referrer_);
    }

    // optional int32 mode = 6;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 request_context_type = 8;
    if (has_request_context_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_context_type());
    }

    // optional bool is_reload = 5;
    if (has_is_reload()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool is_main_resource_load = 7;
    if (has_is_main_resource_load()) {
      total_size += 1 + 1;
    }

    // optional bool keepalive = 13;
    if (has_keepalive()) {
      total_size += 1 + 1;
    }

    // optional int32 credentials_mode = 9;
    if (has_credentials_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credentials_mode());
    }

    // optional int32 cache_mode = 10;
    if (has_cache_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_mode());
    }

    // optional int32 redirect_mode = 11;
    if (has_redirect_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redirect_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWorkerFetchRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerFetchRequest*>(&from));
}

void ServiceWorkerFetchRequest::MergeFrom(const ServiceWorkerFetchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.internal.ServiceWorkerFetchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_method();
      method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_integrity();
      integrity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.integrity_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_referrer()->::content::proto::internal::ServiceWorkerFetchRequest_Referrer::MergeFrom(from.referrer());
    }
    if (cached_has_bits & 0x00000020u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      request_context_type_ = from.request_context_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_reload_ = from.is_reload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      is_main_resource_load_ = from.is_main_resource_load_;
    }
    if (cached_has_bits & 0x00000200u) {
      keepalive_ = from.keepalive_;
    }
    if (cached_has_bits & 0x00000400u) {
      credentials_mode_ = from.credentials_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      cache_mode_ = from.cache_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      redirect_mode_ = from.redirect_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceWorkerFetchRequest::CopyFrom(const ServiceWorkerFetchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.internal.ServiceWorkerFetchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerFetchRequest::IsInitialized() const {
  return true;
}

void ServiceWorkerFetchRequest::Swap(ServiceWorkerFetchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceWorkerFetchRequest::InternalSwap(ServiceWorkerFetchRequest* other) {
  headers_.Swap(&other->headers_);
  url_.Swap(&other->url_);
  method_.Swap(&other->method_);
  integrity_.Swap(&other->integrity_);
  client_id_.Swap(&other->client_id_);
  std::swap(referrer_, other->referrer_);
  std::swap(mode_, other->mode_);
  std::swap(request_context_type_, other->request_context_type_);
  std::swap(is_reload_, other->is_reload_);
  std::swap(is_main_resource_load_, other->is_main_resource_load_);
  std::swap(keepalive_, other->keepalive_);
  std::swap(credentials_mode_, other->credentials_mode_);
  std::swap(cache_mode_, other->cache_mode_);
  std::swap(redirect_mode_, other->redirect_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerFetchRequest::GetTypeName() const {
  return "content.proto.internal.ServiceWorkerFetchRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerFetchRequest

// optional string url = 1;
bool ServiceWorkerFetchRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceWorkerFetchRequest::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ServiceWorkerFetchRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServiceWorkerFetchRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ServiceWorkerFetchRequest::url() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.url)
  return url_.GetNoArena();
}
void ServiceWorkerFetchRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.url)
}
#if LANG_CXX11
void ServiceWorkerFetchRequest::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.internal.ServiceWorkerFetchRequest.url)
}
#endif
void ServiceWorkerFetchRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.internal.ServiceWorkerFetchRequest.url)
}
void ServiceWorkerFetchRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.internal.ServiceWorkerFetchRequest.url)
}
::std::string* ServiceWorkerFetchRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerFetchRequest::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerFetchRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.url)
}

// optional string method = 2;
bool ServiceWorkerFetchRequest::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServiceWorkerFetchRequest::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
void ServiceWorkerFetchRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServiceWorkerFetchRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
const ::std::string& ServiceWorkerFetchRequest::method() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.method)
  return method_.GetNoArena();
}
void ServiceWorkerFetchRequest::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.method)
}
#if LANG_CXX11
void ServiceWorkerFetchRequest::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.internal.ServiceWorkerFetchRequest.method)
}
#endif
void ServiceWorkerFetchRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.internal.ServiceWorkerFetchRequest.method)
}
void ServiceWorkerFetchRequest::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.internal.ServiceWorkerFetchRequest.method)
}
::std::string* ServiceWorkerFetchRequest::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerFetchRequest::release_method() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerFetchRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.method)
}

// map<string, string> headers = 3;
int ServiceWorkerFetchRequest::headers_size() const {
  return headers_.size();
}
void ServiceWorkerFetchRequest::clear_headers() {
  headers_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ServiceWorkerFetchRequest::headers() const {
  // @@protoc_insertion_point(field_map:content.proto.internal.ServiceWorkerFetchRequest.headers)
  return headers_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ServiceWorkerFetchRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:content.proto.internal.ServiceWorkerFetchRequest.headers)
  return headers_.MutableMap();
}

// optional .content.proto.internal.ServiceWorkerFetchRequest.Referrer referrer = 4;
bool ServiceWorkerFetchRequest::has_referrer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServiceWorkerFetchRequest::set_has_referrer() {
  _has_bits_[0] |= 0x00000010u;
}
void ServiceWorkerFetchRequest::clear_has_referrer() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServiceWorkerFetchRequest::clear_referrer() {
  if (referrer_ != NULL) referrer_->::content::proto::internal::ServiceWorkerFetchRequest_Referrer::Clear();
  clear_has_referrer();
}
const ::content::proto::internal::ServiceWorkerFetchRequest_Referrer& ServiceWorkerFetchRequest::referrer() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.referrer)
  return referrer_ != NULL ? *referrer_
                         : *::content::proto::internal::ServiceWorkerFetchRequest_Referrer::internal_default_instance();
}
::content::proto::internal::ServiceWorkerFetchRequest_Referrer* ServiceWorkerFetchRequest::mutable_referrer() {
  set_has_referrer();
  if (referrer_ == NULL) {
    referrer_ = new ::content::proto::internal::ServiceWorkerFetchRequest_Referrer;
  }
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.referrer)
  return referrer_;
}
::content::proto::internal::ServiceWorkerFetchRequest_Referrer* ServiceWorkerFetchRequest::release_referrer() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.referrer)
  clear_has_referrer();
  ::content::proto::internal::ServiceWorkerFetchRequest_Referrer* temp = referrer_;
  referrer_ = NULL;
  return temp;
}
void ServiceWorkerFetchRequest::set_allocated_referrer(::content::proto::internal::ServiceWorkerFetchRequest_Referrer* referrer) {
  delete referrer_;
  referrer_ = referrer;
  if (referrer) {
    set_has_referrer();
  } else {
    clear_has_referrer();
  }
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.referrer)
}

// optional bool is_reload = 5;
bool ServiceWorkerFetchRequest::has_is_reload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ServiceWorkerFetchRequest::set_has_is_reload() {
  _has_bits_[0] |= 0x00000080u;
}
void ServiceWorkerFetchRequest::clear_has_is_reload() {
  _has_bits_[0] &= ~0x00000080u;
}
void ServiceWorkerFetchRequest::clear_is_reload() {
  is_reload_ = false;
  clear_has_is_reload();
}
bool ServiceWorkerFetchRequest::is_reload() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.is_reload)
  return is_reload_;
}
void ServiceWorkerFetchRequest::set_is_reload(bool value) {
  set_has_is_reload();
  is_reload_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.is_reload)
}

// optional int32 mode = 6;
bool ServiceWorkerFetchRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServiceWorkerFetchRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void ServiceWorkerFetchRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServiceWorkerFetchRequest::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
::google::protobuf::int32 ServiceWorkerFetchRequest::mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.mode)
  return mode_;
}
void ServiceWorkerFetchRequest::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.mode)
}

// optional bool is_main_resource_load = 7;
bool ServiceWorkerFetchRequest::has_is_main_resource_load() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ServiceWorkerFetchRequest::set_has_is_main_resource_load() {
  _has_bits_[0] |= 0x00000100u;
}
void ServiceWorkerFetchRequest::clear_has_is_main_resource_load() {
  _has_bits_[0] &= ~0x00000100u;
}
void ServiceWorkerFetchRequest::clear_is_main_resource_load() {
  is_main_resource_load_ = false;
  clear_has_is_main_resource_load();
}
bool ServiceWorkerFetchRequest::is_main_resource_load() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.is_main_resource_load)
  return is_main_resource_load_;
}
void ServiceWorkerFetchRequest::set_is_main_resource_load(bool value) {
  set_has_is_main_resource_load();
  is_main_resource_load_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.is_main_resource_load)
}

// optional int32 request_context_type = 8;
bool ServiceWorkerFetchRequest::has_request_context_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServiceWorkerFetchRequest::set_has_request_context_type() {
  _has_bits_[0] |= 0x00000040u;
}
void ServiceWorkerFetchRequest::clear_has_request_context_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void ServiceWorkerFetchRequest::clear_request_context_type() {
  request_context_type_ = 0;
  clear_has_request_context_type();
}
::google::protobuf::int32 ServiceWorkerFetchRequest::request_context_type() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.request_context_type)
  return request_context_type_;
}
void ServiceWorkerFetchRequest::set_request_context_type(::google::protobuf::int32 value) {
  set_has_request_context_type();
  request_context_type_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.request_context_type)
}

// optional int32 credentials_mode = 9;
bool ServiceWorkerFetchRequest::has_credentials_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ServiceWorkerFetchRequest::set_has_credentials_mode() {
  _has_bits_[0] |= 0x00000400u;
}
void ServiceWorkerFetchRequest::clear_has_credentials_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
void ServiceWorkerFetchRequest::clear_credentials_mode() {
  credentials_mode_ = 0;
  clear_has_credentials_mode();
}
::google::protobuf::int32 ServiceWorkerFetchRequest::credentials_mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.credentials_mode)
  return credentials_mode_;
}
void ServiceWorkerFetchRequest::set_credentials_mode(::google::protobuf::int32 value) {
  set_has_credentials_mode();
  credentials_mode_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.credentials_mode)
}

// optional int32 cache_mode = 10;
bool ServiceWorkerFetchRequest::has_cache_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ServiceWorkerFetchRequest::set_has_cache_mode() {
  _has_bits_[0] |= 0x00000800u;
}
void ServiceWorkerFetchRequest::clear_has_cache_mode() {
  _has_bits_[0] &= ~0x00000800u;
}
void ServiceWorkerFetchRequest::clear_cache_mode() {
  cache_mode_ = 0;
  clear_has_cache_mode();
}
::google::protobuf::int32 ServiceWorkerFetchRequest::cache_mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.cache_mode)
  return cache_mode_;
}
void ServiceWorkerFetchRequest::set_cache_mode(::google::protobuf::int32 value) {
  set_has_cache_mode();
  cache_mode_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.cache_mode)
}

// optional int32 redirect_mode = 11;
bool ServiceWorkerFetchRequest::has_redirect_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ServiceWorkerFetchRequest::set_has_redirect_mode() {
  _has_bits_[0] |= 0x00001000u;
}
void ServiceWorkerFetchRequest::clear_has_redirect_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
void ServiceWorkerFetchRequest::clear_redirect_mode() {
  redirect_mode_ = 0;
  clear_has_redirect_mode();
}
::google::protobuf::int32 ServiceWorkerFetchRequest::redirect_mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.redirect_mode)
  return redirect_mode_;
}
void ServiceWorkerFetchRequest::set_redirect_mode(::google::protobuf::int32 value) {
  set_has_redirect_mode();
  redirect_mode_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.redirect_mode)
}

// optional string integrity = 12;
bool ServiceWorkerFetchRequest::has_integrity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServiceWorkerFetchRequest::set_has_integrity() {
  _has_bits_[0] |= 0x00000004u;
}
void ServiceWorkerFetchRequest::clear_has_integrity() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServiceWorkerFetchRequest::clear_integrity() {
  integrity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_integrity();
}
const ::std::string& ServiceWorkerFetchRequest::integrity() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.integrity)
  return integrity_.GetNoArena();
}
void ServiceWorkerFetchRequest::set_integrity(const ::std::string& value) {
  set_has_integrity();
  integrity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.integrity)
}
#if LANG_CXX11
void ServiceWorkerFetchRequest::set_integrity(::std::string&& value) {
  set_has_integrity();
  integrity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.internal.ServiceWorkerFetchRequest.integrity)
}
#endif
void ServiceWorkerFetchRequest::set_integrity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_integrity();
  integrity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.internal.ServiceWorkerFetchRequest.integrity)
}
void ServiceWorkerFetchRequest::set_integrity(const char* value, size_t size) {
  set_has_integrity();
  integrity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.internal.ServiceWorkerFetchRequest.integrity)
}
::std::string* ServiceWorkerFetchRequest::mutable_integrity() {
  set_has_integrity();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.integrity)
  return integrity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerFetchRequest::release_integrity() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.integrity)
  clear_has_integrity();
  return integrity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerFetchRequest::set_allocated_integrity(::std::string* integrity) {
  if (integrity != NULL) {
    set_has_integrity();
  } else {
    clear_has_integrity();
  }
  integrity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), integrity);
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.integrity)
}

// optional bool keepalive = 13;
bool ServiceWorkerFetchRequest::has_keepalive() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ServiceWorkerFetchRequest::set_has_keepalive() {
  _has_bits_[0] |= 0x00000200u;
}
void ServiceWorkerFetchRequest::clear_has_keepalive() {
  _has_bits_[0] &= ~0x00000200u;
}
void ServiceWorkerFetchRequest::clear_keepalive() {
  keepalive_ = false;
  clear_has_keepalive();
}
bool ServiceWorkerFetchRequest::keepalive() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.keepalive)
  return keepalive_;
}
void ServiceWorkerFetchRequest::set_keepalive(bool value) {
  set_has_keepalive();
  keepalive_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.keepalive)
}

// optional string client_id = 14;
bool ServiceWorkerFetchRequest::has_client_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServiceWorkerFetchRequest::set_has_client_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ServiceWorkerFetchRequest::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServiceWorkerFetchRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
const ::std::string& ServiceWorkerFetchRequest::client_id() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.client_id)
  return client_id_.GetNoArena();
}
void ServiceWorkerFetchRequest::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.client_id)
}
#if LANG_CXX11
void ServiceWorkerFetchRequest::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.internal.ServiceWorkerFetchRequest.client_id)
}
#endif
void ServiceWorkerFetchRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.internal.ServiceWorkerFetchRequest.client_id)
}
void ServiceWorkerFetchRequest::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.internal.ServiceWorkerFetchRequest.client_id)
}
::std::string* ServiceWorkerFetchRequest::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerFetchRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerFetchRequest::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace proto
}  // namespace content

// @@protoc_insertion_point(global_scope)
