// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_worker_types.proto

#ifndef PROTOBUF_service_5fworker_5ftypes_2eproto__INCLUDED
#define PROTOBUF_service_5fworker_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
namespace content {
namespace proto {
namespace internal {
class ServiceWorkerFetchRequest;
class ServiceWorkerFetchRequestDefaultTypeInternal;
extern ServiceWorkerFetchRequestDefaultTypeInternal _ServiceWorkerFetchRequest_default_instance_;
class ServiceWorkerFetchRequest_HeadersEntry;
class ServiceWorkerFetchRequest_HeadersEntryDefaultTypeInternal;
extern ServiceWorkerFetchRequest_HeadersEntryDefaultTypeInternal _ServiceWorkerFetchRequest_HeadersEntry_default_instance_;
class ServiceWorkerFetchRequest_Referrer;
class ServiceWorkerFetchRequest_ReferrerDefaultTypeInternal;
extern ServiceWorkerFetchRequest_ReferrerDefaultTypeInternal _ServiceWorkerFetchRequest_Referrer_default_instance_;
}  // namespace internal
}  // namespace proto
}  // namespace content

namespace content {
namespace proto {
namespace internal {

namespace protobuf_service_5fworker_5ftypes_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_service_5fworker_5ftypes_2eproto

// ===================================================================

class ServiceWorkerFetchRequest_Referrer : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.internal.ServiceWorkerFetchRequest.Referrer) */ {
 public:
  ServiceWorkerFetchRequest_Referrer();
  virtual ~ServiceWorkerFetchRequest_Referrer();

  ServiceWorkerFetchRequest_Referrer(const ServiceWorkerFetchRequest_Referrer& from);

  inline ServiceWorkerFetchRequest_Referrer& operator=(const ServiceWorkerFetchRequest_Referrer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerFetchRequest_Referrer& default_instance();

  static inline const ServiceWorkerFetchRequest_Referrer* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerFetchRequest_Referrer*>(
               &_ServiceWorkerFetchRequest_Referrer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ServiceWorkerFetchRequest_Referrer* other);

  // implements Message ----------------------------------------------

  inline ServiceWorkerFetchRequest_Referrer* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceWorkerFetchRequest_Referrer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServiceWorkerFetchRequest_Referrer& from);
  void MergeFrom(const ServiceWorkerFetchRequest_Referrer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerFetchRequest_Referrer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional int32 policy = 2;
  bool has_policy() const;
  void clear_policy();
  static const int kPolicyFieldNumber = 2;
  ::google::protobuf::int32 policy() const;
  void set_policy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.internal.ServiceWorkerFetchRequest.Referrer)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_policy();
  void clear_has_policy();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 policy_;
  friend struct protobuf_service_5fworker_5ftypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class ServiceWorkerFetchRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.internal.ServiceWorkerFetchRequest) */ {
 public:
  ServiceWorkerFetchRequest();
  virtual ~ServiceWorkerFetchRequest();

  ServiceWorkerFetchRequest(const ServiceWorkerFetchRequest& from);

  inline ServiceWorkerFetchRequest& operator=(const ServiceWorkerFetchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerFetchRequest& default_instance();

  static inline const ServiceWorkerFetchRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerFetchRequest*>(
               &_ServiceWorkerFetchRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ServiceWorkerFetchRequest* other);

  // implements Message ----------------------------------------------

  inline ServiceWorkerFetchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceWorkerFetchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServiceWorkerFetchRequest& from);
  void MergeFrom(const ServiceWorkerFetchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerFetchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ServiceWorkerFetchRequest_Referrer Referrer;

  // accessors -------------------------------------------------------

  // map<string, string> headers = 3;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      headers() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_headers();

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string method = 2;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 2;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional string integrity = 12;
  bool has_integrity() const;
  void clear_integrity();
  static const int kIntegrityFieldNumber = 12;
  const ::std::string& integrity() const;
  void set_integrity(const ::std::string& value);
  #if LANG_CXX11
  void set_integrity(::std::string&& value);
  #endif
  void set_integrity(const char* value);
  void set_integrity(const char* value, size_t size);
  ::std::string* mutable_integrity();
  ::std::string* release_integrity();
  void set_allocated_integrity(::std::string* integrity);

  // optional string client_id = 14;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 14;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // optional .content.proto.internal.ServiceWorkerFetchRequest.Referrer referrer = 4;
  bool has_referrer() const;
  void clear_referrer();
  static const int kReferrerFieldNumber = 4;
  const ::content::proto::internal::ServiceWorkerFetchRequest_Referrer& referrer() const;
  ::content::proto::internal::ServiceWorkerFetchRequest_Referrer* mutable_referrer();
  ::content::proto::internal::ServiceWorkerFetchRequest_Referrer* release_referrer();
  void set_allocated_referrer(::content::proto::internal::ServiceWorkerFetchRequest_Referrer* referrer);

  // optional int32 mode = 6;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 6;
  ::google::protobuf::int32 mode() const;
  void set_mode(::google::protobuf::int32 value);

  // optional int32 request_context_type = 8;
  bool has_request_context_type() const;
  void clear_request_context_type();
  static const int kRequestContextTypeFieldNumber = 8;
  ::google::protobuf::int32 request_context_type() const;
  void set_request_context_type(::google::protobuf::int32 value);

  // optional bool is_reload = 5;
  bool has_is_reload() const;
  void clear_is_reload();
  static const int kIsReloadFieldNumber = 5;
  bool is_reload() const;
  void set_is_reload(bool value);

  // optional bool is_main_resource_load = 7;
  bool has_is_main_resource_load() const;
  void clear_is_main_resource_load();
  static const int kIsMainResourceLoadFieldNumber = 7;
  bool is_main_resource_load() const;
  void set_is_main_resource_load(bool value);

  // optional bool keepalive = 13;
  bool has_keepalive() const;
  void clear_keepalive();
  static const int kKeepaliveFieldNumber = 13;
  bool keepalive() const;
  void set_keepalive(bool value);

  // optional int32 credentials_mode = 9;
  bool has_credentials_mode() const;
  void clear_credentials_mode();
  static const int kCredentialsModeFieldNumber = 9;
  ::google::protobuf::int32 credentials_mode() const;
  void set_credentials_mode(::google::protobuf::int32 value);

  // optional int32 cache_mode = 10;
  bool has_cache_mode() const;
  void clear_cache_mode();
  static const int kCacheModeFieldNumber = 10;
  ::google::protobuf::int32 cache_mode() const;
  void set_cache_mode(::google::protobuf::int32 value);

  // optional int32 redirect_mode = 11;
  bool has_redirect_mode() const;
  void clear_redirect_mode();
  static const int kRedirectModeFieldNumber = 11;
  ::google::protobuf::int32 redirect_mode() const;
  void set_redirect_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.internal.ServiceWorkerFetchRequest)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_method();
  void clear_has_method();
  void set_has_referrer();
  void clear_has_referrer();
  void set_has_is_reload();
  void clear_has_is_reload();
  void set_has_mode();
  void clear_has_mode();
  void set_has_is_main_resource_load();
  void clear_has_is_main_resource_load();
  void set_has_request_context_type();
  void clear_has_request_context_type();
  void set_has_credentials_mode();
  void clear_has_credentials_mode();
  void set_has_cache_mode();
  void clear_has_cache_mode();
  void set_has_redirect_mode();
  void clear_has_redirect_mode();
  void set_has_integrity();
  void clear_has_integrity();
  void set_has_keepalive();
  void clear_has_keepalive();
  void set_has_client_id();
  void clear_has_client_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  public:
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      ServiceWorkerFetchRequest_HeadersEntry;
  ::google::protobuf::internal::MapFieldLite<
      ServiceWorkerFetchRequest_HeadersEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  private:
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr integrity_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::content::proto::internal::ServiceWorkerFetchRequest_Referrer* referrer_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 request_context_type_;
  bool is_reload_;
  bool is_main_resource_load_;
  bool keepalive_;
  ::google::protobuf::int32 credentials_mode_;
  ::google::protobuf::int32 cache_mode_;
  ::google::protobuf::int32 redirect_mode_;
  friend struct protobuf_service_5fworker_5ftypes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerFetchRequest_Referrer

// optional string url = 1;
inline bool ServiceWorkerFetchRequest_Referrer::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerFetchRequest_Referrer::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceWorkerFetchRequest_Referrer::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceWorkerFetchRequest_Referrer::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ServiceWorkerFetchRequest_Referrer::url() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
  return url_.GetNoArena();
}
inline void ServiceWorkerFetchRequest_Referrer::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
}
#if LANG_CXX11
inline void ServiceWorkerFetchRequest_Referrer::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
}
#endif
inline void ServiceWorkerFetchRequest_Referrer::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
}
inline void ServiceWorkerFetchRequest_Referrer::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
}
inline ::std::string* ServiceWorkerFetchRequest_Referrer::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceWorkerFetchRequest_Referrer::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerFetchRequest_Referrer::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.Referrer.url)
}

// optional int32 policy = 2;
inline bool ServiceWorkerFetchRequest_Referrer::has_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWorkerFetchRequest_Referrer::set_has_policy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceWorkerFetchRequest_Referrer::clear_has_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceWorkerFetchRequest_Referrer::clear_policy() {
  policy_ = 0;
  clear_has_policy();
}
inline ::google::protobuf::int32 ServiceWorkerFetchRequest_Referrer::policy() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.Referrer.policy)
  return policy_;
}
inline void ServiceWorkerFetchRequest_Referrer::set_policy(::google::protobuf::int32 value) {
  set_has_policy();
  policy_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.Referrer.policy)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServiceWorkerFetchRequest

// optional string url = 1;
inline bool ServiceWorkerFetchRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceWorkerFetchRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceWorkerFetchRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ServiceWorkerFetchRequest::url() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.url)
  return url_.GetNoArena();
}
inline void ServiceWorkerFetchRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.url)
}
#if LANG_CXX11
inline void ServiceWorkerFetchRequest::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.internal.ServiceWorkerFetchRequest.url)
}
#endif
inline void ServiceWorkerFetchRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.internal.ServiceWorkerFetchRequest.url)
}
inline void ServiceWorkerFetchRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.internal.ServiceWorkerFetchRequest.url)
}
inline ::std::string* ServiceWorkerFetchRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceWorkerFetchRequest::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerFetchRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.url)
}

// optional string method = 2;
inline bool ServiceWorkerFetchRequest::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceWorkerFetchRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceWorkerFetchRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& ServiceWorkerFetchRequest::method() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.method)
  return method_.GetNoArena();
}
inline void ServiceWorkerFetchRequest::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.method)
}
#if LANG_CXX11
inline void ServiceWorkerFetchRequest::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.internal.ServiceWorkerFetchRequest.method)
}
#endif
inline void ServiceWorkerFetchRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.internal.ServiceWorkerFetchRequest.method)
}
inline void ServiceWorkerFetchRequest::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.internal.ServiceWorkerFetchRequest.method)
}
inline ::std::string* ServiceWorkerFetchRequest::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceWorkerFetchRequest::release_method() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerFetchRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.method)
}

// map<string, string> headers = 3;
inline int ServiceWorkerFetchRequest::headers_size() const {
  return headers_.size();
}
inline void ServiceWorkerFetchRequest::clear_headers() {
  headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ServiceWorkerFetchRequest::headers() const {
  // @@protoc_insertion_point(field_map:content.proto.internal.ServiceWorkerFetchRequest.headers)
  return headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ServiceWorkerFetchRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:content.proto.internal.ServiceWorkerFetchRequest.headers)
  return headers_.MutableMap();
}

// optional .content.proto.internal.ServiceWorkerFetchRequest.Referrer referrer = 4;
inline bool ServiceWorkerFetchRequest::has_referrer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_referrer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceWorkerFetchRequest::clear_has_referrer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceWorkerFetchRequest::clear_referrer() {
  if (referrer_ != NULL) referrer_->::content::proto::internal::ServiceWorkerFetchRequest_Referrer::Clear();
  clear_has_referrer();
}
inline const ::content::proto::internal::ServiceWorkerFetchRequest_Referrer& ServiceWorkerFetchRequest::referrer() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.referrer)
  return referrer_ != NULL ? *referrer_
                         : *::content::proto::internal::ServiceWorkerFetchRequest_Referrer::internal_default_instance();
}
inline ::content::proto::internal::ServiceWorkerFetchRequest_Referrer* ServiceWorkerFetchRequest::mutable_referrer() {
  set_has_referrer();
  if (referrer_ == NULL) {
    referrer_ = new ::content::proto::internal::ServiceWorkerFetchRequest_Referrer;
  }
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.referrer)
  return referrer_;
}
inline ::content::proto::internal::ServiceWorkerFetchRequest_Referrer* ServiceWorkerFetchRequest::release_referrer() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.referrer)
  clear_has_referrer();
  ::content::proto::internal::ServiceWorkerFetchRequest_Referrer* temp = referrer_;
  referrer_ = NULL;
  return temp;
}
inline void ServiceWorkerFetchRequest::set_allocated_referrer(::content::proto::internal::ServiceWorkerFetchRequest_Referrer* referrer) {
  delete referrer_;
  referrer_ = referrer;
  if (referrer) {
    set_has_referrer();
  } else {
    clear_has_referrer();
  }
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.referrer)
}

// optional bool is_reload = 5;
inline bool ServiceWorkerFetchRequest::has_is_reload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_is_reload() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServiceWorkerFetchRequest::clear_has_is_reload() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServiceWorkerFetchRequest::clear_is_reload() {
  is_reload_ = false;
  clear_has_is_reload();
}
inline bool ServiceWorkerFetchRequest::is_reload() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.is_reload)
  return is_reload_;
}
inline void ServiceWorkerFetchRequest::set_is_reload(bool value) {
  set_has_is_reload();
  is_reload_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.is_reload)
}

// optional int32 mode = 6;
inline bool ServiceWorkerFetchRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServiceWorkerFetchRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServiceWorkerFetchRequest::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 ServiceWorkerFetchRequest::mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.mode)
  return mode_;
}
inline void ServiceWorkerFetchRequest::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.mode)
}

// optional bool is_main_resource_load = 7;
inline bool ServiceWorkerFetchRequest::has_is_main_resource_load() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_is_main_resource_load() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServiceWorkerFetchRequest::clear_has_is_main_resource_load() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServiceWorkerFetchRequest::clear_is_main_resource_load() {
  is_main_resource_load_ = false;
  clear_has_is_main_resource_load();
}
inline bool ServiceWorkerFetchRequest::is_main_resource_load() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.is_main_resource_load)
  return is_main_resource_load_;
}
inline void ServiceWorkerFetchRequest::set_is_main_resource_load(bool value) {
  set_has_is_main_resource_load();
  is_main_resource_load_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.is_main_resource_load)
}

// optional int32 request_context_type = 8;
inline bool ServiceWorkerFetchRequest::has_request_context_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_request_context_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServiceWorkerFetchRequest::clear_has_request_context_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServiceWorkerFetchRequest::clear_request_context_type() {
  request_context_type_ = 0;
  clear_has_request_context_type();
}
inline ::google::protobuf::int32 ServiceWorkerFetchRequest::request_context_type() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.request_context_type)
  return request_context_type_;
}
inline void ServiceWorkerFetchRequest::set_request_context_type(::google::protobuf::int32 value) {
  set_has_request_context_type();
  request_context_type_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.request_context_type)
}

// optional int32 credentials_mode = 9;
inline bool ServiceWorkerFetchRequest::has_credentials_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_credentials_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServiceWorkerFetchRequest::clear_has_credentials_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServiceWorkerFetchRequest::clear_credentials_mode() {
  credentials_mode_ = 0;
  clear_has_credentials_mode();
}
inline ::google::protobuf::int32 ServiceWorkerFetchRequest::credentials_mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.credentials_mode)
  return credentials_mode_;
}
inline void ServiceWorkerFetchRequest::set_credentials_mode(::google::protobuf::int32 value) {
  set_has_credentials_mode();
  credentials_mode_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.credentials_mode)
}

// optional int32 cache_mode = 10;
inline bool ServiceWorkerFetchRequest::has_cache_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_cache_mode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ServiceWorkerFetchRequest::clear_has_cache_mode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ServiceWorkerFetchRequest::clear_cache_mode() {
  cache_mode_ = 0;
  clear_has_cache_mode();
}
inline ::google::protobuf::int32 ServiceWorkerFetchRequest::cache_mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.cache_mode)
  return cache_mode_;
}
inline void ServiceWorkerFetchRequest::set_cache_mode(::google::protobuf::int32 value) {
  set_has_cache_mode();
  cache_mode_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.cache_mode)
}

// optional int32 redirect_mode = 11;
inline bool ServiceWorkerFetchRequest::has_redirect_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_redirect_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ServiceWorkerFetchRequest::clear_has_redirect_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ServiceWorkerFetchRequest::clear_redirect_mode() {
  redirect_mode_ = 0;
  clear_has_redirect_mode();
}
inline ::google::protobuf::int32 ServiceWorkerFetchRequest::redirect_mode() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.redirect_mode)
  return redirect_mode_;
}
inline void ServiceWorkerFetchRequest::set_redirect_mode(::google::protobuf::int32 value) {
  set_has_redirect_mode();
  redirect_mode_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.redirect_mode)
}

// optional string integrity = 12;
inline bool ServiceWorkerFetchRequest::has_integrity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_integrity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceWorkerFetchRequest::clear_has_integrity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceWorkerFetchRequest::clear_integrity() {
  integrity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_integrity();
}
inline const ::std::string& ServiceWorkerFetchRequest::integrity() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.integrity)
  return integrity_.GetNoArena();
}
inline void ServiceWorkerFetchRequest::set_integrity(const ::std::string& value) {
  set_has_integrity();
  integrity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.integrity)
}
#if LANG_CXX11
inline void ServiceWorkerFetchRequest::set_integrity(::std::string&& value) {
  set_has_integrity();
  integrity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.internal.ServiceWorkerFetchRequest.integrity)
}
#endif
inline void ServiceWorkerFetchRequest::set_integrity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_integrity();
  integrity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.internal.ServiceWorkerFetchRequest.integrity)
}
inline void ServiceWorkerFetchRequest::set_integrity(const char* value, size_t size) {
  set_has_integrity();
  integrity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.internal.ServiceWorkerFetchRequest.integrity)
}
inline ::std::string* ServiceWorkerFetchRequest::mutable_integrity() {
  set_has_integrity();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.integrity)
  return integrity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceWorkerFetchRequest::release_integrity() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.integrity)
  clear_has_integrity();
  return integrity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerFetchRequest::set_allocated_integrity(::std::string* integrity) {
  if (integrity != NULL) {
    set_has_integrity();
  } else {
    clear_has_integrity();
  }
  integrity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), integrity);
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.integrity)
}

// optional bool keepalive = 13;
inline bool ServiceWorkerFetchRequest::has_keepalive() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_keepalive() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServiceWorkerFetchRequest::clear_has_keepalive() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServiceWorkerFetchRequest::clear_keepalive() {
  keepalive_ = false;
  clear_has_keepalive();
}
inline bool ServiceWorkerFetchRequest::keepalive() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.keepalive)
  return keepalive_;
}
inline void ServiceWorkerFetchRequest::set_keepalive(bool value) {
  set_has_keepalive();
  keepalive_ = value;
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.keepalive)
}

// optional string client_id = 14;
inline bool ServiceWorkerFetchRequest::has_client_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceWorkerFetchRequest::set_has_client_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceWorkerFetchRequest::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceWorkerFetchRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
inline const ::std::string& ServiceWorkerFetchRequest::client_id() const {
  // @@protoc_insertion_point(field_get:content.proto.internal.ServiceWorkerFetchRequest.client_id)
  return client_id_.GetNoArena();
}
inline void ServiceWorkerFetchRequest::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.internal.ServiceWorkerFetchRequest.client_id)
}
#if LANG_CXX11
inline void ServiceWorkerFetchRequest::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.internal.ServiceWorkerFetchRequest.client_id)
}
#endif
inline void ServiceWorkerFetchRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.internal.ServiceWorkerFetchRequest.client_id)
}
inline void ServiceWorkerFetchRequest::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.internal.ServiceWorkerFetchRequest.client_id)
}
inline ::std::string* ServiceWorkerFetchRequest::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:content.proto.internal.ServiceWorkerFetchRequest.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceWorkerFetchRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:content.proto.internal.ServiceWorkerFetchRequest.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerFetchRequest::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.internal.ServiceWorkerFetchRequest.client_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace internal
}  // namespace proto
}  // namespace content

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fworker_5ftypes_2eproto__INCLUDED
