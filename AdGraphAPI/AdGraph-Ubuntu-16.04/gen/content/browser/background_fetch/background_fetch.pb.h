// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: background_fetch.proto

#ifndef PROTOBUF_background_5ffetch_2eproto__INCLUDED
#define PROTOBUF_background_5ffetch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace content {
namespace proto {
class BackgroundFetchActiveRequest;
class BackgroundFetchActiveRequestDefaultTypeInternal;
extern BackgroundFetchActiveRequestDefaultTypeInternal _BackgroundFetchActiveRequest_default_instance_;
class BackgroundFetchCompletedRequest;
class BackgroundFetchCompletedRequestDefaultTypeInternal;
extern BackgroundFetchCompletedRequestDefaultTypeInternal _BackgroundFetchCompletedRequest_default_instance_;
class BackgroundFetchMetadata;
class BackgroundFetchMetadataDefaultTypeInternal;
extern BackgroundFetchMetadataDefaultTypeInternal _BackgroundFetchMetadata_default_instance_;
class BackgroundFetchOptions;
class BackgroundFetchOptionsDefaultTypeInternal;
extern BackgroundFetchOptionsDefaultTypeInternal _BackgroundFetchOptions_default_instance_;
class BackgroundFetchOptions_IconDefinition;
class BackgroundFetchOptions_IconDefinitionDefaultTypeInternal;
extern BackgroundFetchOptions_IconDefinitionDefaultTypeInternal _BackgroundFetchOptions_IconDefinition_default_instance_;
class BackgroundFetchPendingRequest;
class BackgroundFetchPendingRequestDefaultTypeInternal;
extern BackgroundFetchPendingRequestDefaultTypeInternal _BackgroundFetchPendingRequest_default_instance_;
class BackgroundFetchRegistration;
class BackgroundFetchRegistrationDefaultTypeInternal;
extern BackgroundFetchRegistrationDefaultTypeInternal _BackgroundFetchRegistration_default_instance_;
}  // namespace proto
}  // namespace content

namespace content {
namespace proto {

namespace protobuf_background_5ffetch_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_background_5ffetch_2eproto

// ===================================================================

class BackgroundFetchRegistration : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchRegistration) */ {
 public:
  BackgroundFetchRegistration();
  virtual ~BackgroundFetchRegistration();

  BackgroundFetchRegistration(const BackgroundFetchRegistration& from);

  inline BackgroundFetchRegistration& operator=(const BackgroundFetchRegistration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchRegistration& default_instance();

  static inline const BackgroundFetchRegistration* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchRegistration*>(
               &_BackgroundFetchRegistration_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BackgroundFetchRegistration* other);

  // implements Message ----------------------------------------------

  inline BackgroundFetchRegistration* New() const PROTOBUF_FINAL { return New(NULL); }

  BackgroundFetchRegistration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BackgroundFetchRegistration& from);
  void MergeFrom(const BackgroundFetchRegistration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchRegistration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unique_id = 1;
  bool has_unique_id() const;
  void clear_unique_id();
  static const int kUniqueIdFieldNumber = 1;
  const ::std::string& unique_id() const;
  void set_unique_id(const ::std::string& value);
  #if LANG_CXX11
  void set_unique_id(::std::string&& value);
  #endif
  void set_unique_id(const char* value);
  void set_unique_id(const char* value, size_t size);
  ::std::string* mutable_unique_id();
  ::std::string* release_unique_id();
  void set_allocated_unique_id(::std::string* unique_id);

  // optional bytes developer_id = 2;
  bool has_developer_id() const;
  void clear_developer_id();
  static const int kDeveloperIdFieldNumber = 2;
  const ::std::string& developer_id() const;
  void set_developer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_developer_id(::std::string&& value);
  #endif
  void set_developer_id(const char* value);
  void set_developer_id(const void* value, size_t size);
  ::std::string* mutable_developer_id();
  ::std::string* release_developer_id();
  void set_allocated_developer_id(::std::string* developer_id);

  // optional uint64 upload_total = 3;
  bool has_upload_total() const;
  void clear_upload_total();
  static const int kUploadTotalFieldNumber = 3;
  ::google::protobuf::uint64 upload_total() const;
  void set_upload_total(::google::protobuf::uint64 value);

  // optional uint64 uploaded = 4;
  bool has_uploaded() const;
  void clear_uploaded();
  static const int kUploadedFieldNumber = 4;
  ::google::protobuf::uint64 uploaded() const;
  void set_uploaded(::google::protobuf::uint64 value);

  // optional uint64 download_total = 5;
  bool has_download_total() const;
  void clear_download_total();
  static const int kDownloadTotalFieldNumber = 5;
  ::google::protobuf::uint64 download_total() const;
  void set_download_total(::google::protobuf::uint64 value);

  // optional uint64 downloaded = 6;
  bool has_downloaded() const;
  void clear_downloaded();
  static const int kDownloadedFieldNumber = 6;
  ::google::protobuf::uint64 downloaded() const;
  void set_downloaded(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchRegistration)
 private:
  void set_has_unique_id();
  void clear_has_unique_id();
  void set_has_developer_id();
  void clear_has_developer_id();
  void set_has_upload_total();
  void clear_has_upload_total();
  void set_has_uploaded();
  void clear_has_uploaded();
  void set_has_download_total();
  void clear_has_download_total();
  void set_has_downloaded();
  void clear_has_downloaded();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr unique_id_;
  ::google::protobuf::internal::ArenaStringPtr developer_id_;
  ::google::protobuf::uint64 upload_total_;
  ::google::protobuf::uint64 uploaded_;
  ::google::protobuf::uint64 download_total_;
  ::google::protobuf::uint64 downloaded_;
  friend struct protobuf_background_5ffetch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackgroundFetchOptions_IconDefinition : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchOptions.IconDefinition) */ {
 public:
  BackgroundFetchOptions_IconDefinition();
  virtual ~BackgroundFetchOptions_IconDefinition();

  BackgroundFetchOptions_IconDefinition(const BackgroundFetchOptions_IconDefinition& from);

  inline BackgroundFetchOptions_IconDefinition& operator=(const BackgroundFetchOptions_IconDefinition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchOptions_IconDefinition& default_instance();

  static inline const BackgroundFetchOptions_IconDefinition* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchOptions_IconDefinition*>(
               &_BackgroundFetchOptions_IconDefinition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BackgroundFetchOptions_IconDefinition* other);

  // implements Message ----------------------------------------------

  inline BackgroundFetchOptions_IconDefinition* New() const PROTOBUF_FINAL { return New(NULL); }

  BackgroundFetchOptions_IconDefinition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BackgroundFetchOptions_IconDefinition& from);
  void MergeFrom(const BackgroundFetchOptions_IconDefinition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchOptions_IconDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string src = 1;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  const ::std::string& src() const;
  void set_src(const ::std::string& value);
  #if LANG_CXX11
  void set_src(::std::string&& value);
  #endif
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  ::std::string* mutable_src();
  ::std::string* release_src();
  void set_allocated_src(::std::string* src);

  // optional string sizes = 2;
  bool has_sizes() const;
  void clear_sizes();
  static const int kSizesFieldNumber = 2;
  const ::std::string& sizes() const;
  void set_sizes(const ::std::string& value);
  #if LANG_CXX11
  void set_sizes(::std::string&& value);
  #endif
  void set_sizes(const char* value);
  void set_sizes(const char* value, size_t size);
  ::std::string* mutable_sizes();
  ::std::string* release_sizes();
  void set_allocated_sizes(::std::string* sizes);

  // optional string type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchOptions.IconDefinition)
 private:
  void set_has_src();
  void clear_has_src();
  void set_has_sizes();
  void clear_has_sizes();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr src_;
  ::google::protobuf::internal::ArenaStringPtr sizes_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  friend struct protobuf_background_5ffetch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackgroundFetchOptions : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchOptions) */ {
 public:
  BackgroundFetchOptions();
  virtual ~BackgroundFetchOptions();

  BackgroundFetchOptions(const BackgroundFetchOptions& from);

  inline BackgroundFetchOptions& operator=(const BackgroundFetchOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchOptions& default_instance();

  static inline const BackgroundFetchOptions* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchOptions*>(
               &_BackgroundFetchOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BackgroundFetchOptions* other);

  // implements Message ----------------------------------------------

  inline BackgroundFetchOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  BackgroundFetchOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BackgroundFetchOptions& from);
  void MergeFrom(const BackgroundFetchOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BackgroundFetchOptions_IconDefinition IconDefinition;

  // accessors -------------------------------------------------------

  // repeated .content.proto.BackgroundFetchOptions.IconDefinition icons = 2;
  int icons_size() const;
  void clear_icons();
  static const int kIconsFieldNumber = 2;
  const ::content::proto::BackgroundFetchOptions_IconDefinition& icons(int index) const;
  ::content::proto::BackgroundFetchOptions_IconDefinition* mutable_icons(int index);
  ::content::proto::BackgroundFetchOptions_IconDefinition* add_icons();
  ::google::protobuf::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_IconDefinition >*
      mutable_icons();
  const ::google::protobuf::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_IconDefinition >&
      icons() const;

  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional uint64 download_total = 3;
  bool has_download_total() const;
  void clear_download_total();
  static const int kDownloadTotalFieldNumber = 3;
  ::google::protobuf::uint64 download_total() const;
  void set_download_total(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchOptions)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_download_total();
  void clear_has_download_total();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_IconDefinition > icons_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::uint64 download_total_;
  friend struct protobuf_background_5ffetch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackgroundFetchMetadata : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchMetadata) */ {
 public:
  BackgroundFetchMetadata();
  virtual ~BackgroundFetchMetadata();

  BackgroundFetchMetadata(const BackgroundFetchMetadata& from);

  inline BackgroundFetchMetadata& operator=(const BackgroundFetchMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchMetadata& default_instance();

  static inline const BackgroundFetchMetadata* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchMetadata*>(
               &_BackgroundFetchMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BackgroundFetchMetadata* other);

  // implements Message ----------------------------------------------

  inline BackgroundFetchMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  BackgroundFetchMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BackgroundFetchMetadata& from);
  void MergeFrom(const BackgroundFetchMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string origin = 2;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 2;
  const ::std::string& origin() const;
  void set_origin(const ::std::string& value);
  #if LANG_CXX11
  void set_origin(::std::string&& value);
  #endif
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  ::std::string* mutable_origin();
  ::std::string* release_origin();
  void set_allocated_origin(::std::string* origin);

  // optional .content.proto.BackgroundFetchRegistration registration = 3;
  bool has_registration() const;
  void clear_registration();
  static const int kRegistrationFieldNumber = 3;
  const ::content::proto::BackgroundFetchRegistration& registration() const;
  ::content::proto::BackgroundFetchRegistration* mutable_registration();
  ::content::proto::BackgroundFetchRegistration* release_registration();
  void set_allocated_registration(::content::proto::BackgroundFetchRegistration* registration);

  // optional .content.proto.BackgroundFetchOptions options = 4;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 4;
  const ::content::proto::BackgroundFetchOptions& options() const;
  ::content::proto::BackgroundFetchOptions* mutable_options();
  ::content::proto::BackgroundFetchOptions* release_options();
  void set_allocated_options(::content::proto::BackgroundFetchOptions* options);

  // optional int64 creation_microseconds_since_unix_epoch = 1;
  bool has_creation_microseconds_since_unix_epoch() const;
  void clear_creation_microseconds_since_unix_epoch();
  static const int kCreationMicrosecondsSinceUnixEpochFieldNumber = 1;
  ::google::protobuf::int64 creation_microseconds_since_unix_epoch() const;
  void set_creation_microseconds_since_unix_epoch(::google::protobuf::int64 value);

  // optional int32 num_fetches = 5;
  bool has_num_fetches() const;
  void clear_num_fetches();
  static const int kNumFetchesFieldNumber = 5;
  ::google::protobuf::int32 num_fetches() const;
  void set_num_fetches(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchMetadata)
 private:
  void set_has_creation_microseconds_since_unix_epoch();
  void clear_has_creation_microseconds_since_unix_epoch();
  void set_has_origin();
  void clear_has_origin();
  void set_has_registration();
  void clear_has_registration();
  void set_has_options();
  void clear_has_options();
  void set_has_num_fetches();
  void clear_has_num_fetches();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr origin_;
  ::content::proto::BackgroundFetchRegistration* registration_;
  ::content::proto::BackgroundFetchOptions* options_;
  ::google::protobuf::int64 creation_microseconds_since_unix_epoch_;
  ::google::protobuf::int32 num_fetches_;
  friend struct protobuf_background_5ffetch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackgroundFetchPendingRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchPendingRequest) */ {
 public:
  BackgroundFetchPendingRequest();
  virtual ~BackgroundFetchPendingRequest();

  BackgroundFetchPendingRequest(const BackgroundFetchPendingRequest& from);

  inline BackgroundFetchPendingRequest& operator=(const BackgroundFetchPendingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchPendingRequest& default_instance();

  static inline const BackgroundFetchPendingRequest* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchPendingRequest*>(
               &_BackgroundFetchPendingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BackgroundFetchPendingRequest* other);

  // implements Message ----------------------------------------------

  inline BackgroundFetchPendingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BackgroundFetchPendingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BackgroundFetchPendingRequest& from);
  void MergeFrom(const BackgroundFetchPendingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchPendingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unique_id = 1;
  bool has_unique_id() const;
  void clear_unique_id();
  static const int kUniqueIdFieldNumber = 1;
  const ::std::string& unique_id() const;
  void set_unique_id(const ::std::string& value);
  #if LANG_CXX11
  void set_unique_id(::std::string&& value);
  #endif
  void set_unique_id(const char* value);
  void set_unique_id(const char* value, size_t size);
  ::std::string* mutable_unique_id();
  ::std::string* release_unique_id();
  void set_allocated_unique_id(::std::string* unique_id);

  // optional string serialized_request = 3;
  bool has_serialized_request() const;
  void clear_serialized_request();
  static const int kSerializedRequestFieldNumber = 3;
  const ::std::string& serialized_request() const;
  void set_serialized_request(const ::std::string& value);
  #if LANG_CXX11
  void set_serialized_request(::std::string&& value);
  #endif
  void set_serialized_request(const char* value);
  void set_serialized_request(const char* value, size_t size);
  ::std::string* mutable_serialized_request();
  ::std::string* release_serialized_request();
  void set_allocated_serialized_request(::std::string* serialized_request);

  // optional int32 request_index = 2;
  bool has_request_index() const;
  void clear_request_index();
  static const int kRequestIndexFieldNumber = 2;
  ::google::protobuf::int32 request_index() const;
  void set_request_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchPendingRequest)
 private:
  void set_has_unique_id();
  void clear_has_unique_id();
  void set_has_request_index();
  void clear_has_request_index();
  void set_has_serialized_request();
  void clear_has_serialized_request();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr unique_id_;
  ::google::protobuf::internal::ArenaStringPtr serialized_request_;
  ::google::protobuf::int32 request_index_;
  friend struct protobuf_background_5ffetch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackgroundFetchActiveRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchActiveRequest) */ {
 public:
  BackgroundFetchActiveRequest();
  virtual ~BackgroundFetchActiveRequest();

  BackgroundFetchActiveRequest(const BackgroundFetchActiveRequest& from);

  inline BackgroundFetchActiveRequest& operator=(const BackgroundFetchActiveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchActiveRequest& default_instance();

  static inline const BackgroundFetchActiveRequest* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchActiveRequest*>(
               &_BackgroundFetchActiveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BackgroundFetchActiveRequest* other);

  // implements Message ----------------------------------------------

  inline BackgroundFetchActiveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BackgroundFetchActiveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BackgroundFetchActiveRequest& from);
  void MergeFrom(const BackgroundFetchActiveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchActiveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unique_id = 1;
  bool has_unique_id() const;
  void clear_unique_id();
  static const int kUniqueIdFieldNumber = 1;
  const ::std::string& unique_id() const;
  void set_unique_id(const ::std::string& value);
  #if LANG_CXX11
  void set_unique_id(::std::string&& value);
  #endif
  void set_unique_id(const char* value);
  void set_unique_id(const char* value, size_t size);
  ::std::string* mutable_unique_id();
  ::std::string* release_unique_id();
  void set_allocated_unique_id(::std::string* unique_id);

  // optional string serialized_request = 3;
  bool has_serialized_request() const;
  void clear_serialized_request();
  static const int kSerializedRequestFieldNumber = 3;
  const ::std::string& serialized_request() const;
  void set_serialized_request(const ::std::string& value);
  #if LANG_CXX11
  void set_serialized_request(::std::string&& value);
  #endif
  void set_serialized_request(const char* value);
  void set_serialized_request(const char* value, size_t size);
  ::std::string* mutable_serialized_request();
  ::std::string* release_serialized_request();
  void set_allocated_serialized_request(::std::string* serialized_request);

  // optional string download_guid = 4;
  bool has_download_guid() const;
  void clear_download_guid();
  static const int kDownloadGuidFieldNumber = 4;
  const ::std::string& download_guid() const;
  void set_download_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_download_guid(::std::string&& value);
  #endif
  void set_download_guid(const char* value);
  void set_download_guid(const char* value, size_t size);
  ::std::string* mutable_download_guid();
  ::std::string* release_download_guid();
  void set_allocated_download_guid(::std::string* download_guid);

  // optional int32 request_index = 2;
  bool has_request_index() const;
  void clear_request_index();
  static const int kRequestIndexFieldNumber = 2;
  ::google::protobuf::int32 request_index() const;
  void set_request_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchActiveRequest)
 private:
  void set_has_unique_id();
  void clear_has_unique_id();
  void set_has_request_index();
  void clear_has_request_index();
  void set_has_serialized_request();
  void clear_has_serialized_request();
  void set_has_download_guid();
  void clear_has_download_guid();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr unique_id_;
  ::google::protobuf::internal::ArenaStringPtr serialized_request_;
  ::google::protobuf::internal::ArenaStringPtr download_guid_;
  ::google::protobuf::int32 request_index_;
  friend struct protobuf_background_5ffetch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackgroundFetchCompletedRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchCompletedRequest) */ {
 public:
  BackgroundFetchCompletedRequest();
  virtual ~BackgroundFetchCompletedRequest();

  BackgroundFetchCompletedRequest(const BackgroundFetchCompletedRequest& from);

  inline BackgroundFetchCompletedRequest& operator=(const BackgroundFetchCompletedRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchCompletedRequest& default_instance();

  static inline const BackgroundFetchCompletedRequest* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchCompletedRequest*>(
               &_BackgroundFetchCompletedRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BackgroundFetchCompletedRequest* other);

  // implements Message ----------------------------------------------

  inline BackgroundFetchCompletedRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BackgroundFetchCompletedRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BackgroundFetchCompletedRequest& from);
  void MergeFrom(const BackgroundFetchCompletedRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchCompletedRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unique_id = 1;
  bool has_unique_id() const;
  void clear_unique_id();
  static const int kUniqueIdFieldNumber = 1;
  const ::std::string& unique_id() const;
  void set_unique_id(const ::std::string& value);
  #if LANG_CXX11
  void set_unique_id(::std::string&& value);
  #endif
  void set_unique_id(const char* value);
  void set_unique_id(const char* value, size_t size);
  ::std::string* mutable_unique_id();
  ::std::string* release_unique_id();
  void set_allocated_unique_id(::std::string* unique_id);

  // optional string serialized_request = 3;
  bool has_serialized_request() const;
  void clear_serialized_request();
  static const int kSerializedRequestFieldNumber = 3;
  const ::std::string& serialized_request() const;
  void set_serialized_request(const ::std::string& value);
  #if LANG_CXX11
  void set_serialized_request(::std::string&& value);
  #endif
  void set_serialized_request(const char* value);
  void set_serialized_request(const char* value, size_t size);
  ::std::string* mutable_serialized_request();
  ::std::string* release_serialized_request();
  void set_allocated_serialized_request(::std::string* serialized_request);

  // optional string download_guid = 4;
  bool has_download_guid() const;
  void clear_download_guid();
  static const int kDownloadGuidFieldNumber = 4;
  const ::std::string& download_guid() const;
  void set_download_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_download_guid(::std::string&& value);
  #endif
  void set_download_guid(const char* value);
  void set_download_guid(const char* value, size_t size);
  ::std::string* mutable_download_guid();
  ::std::string* release_download_guid();
  void set_allocated_download_guid(::std::string* download_guid);

  // optional int32 request_index = 2;
  bool has_request_index() const;
  void clear_request_index();
  static const int kRequestIndexFieldNumber = 2;
  ::google::protobuf::int32 request_index() const;
  void set_request_index(::google::protobuf::int32 value);

  // optional bool succeeded = 5;
  bool has_succeeded() const;
  void clear_succeeded();
  static const int kSucceededFieldNumber = 5;
  bool succeeded() const;
  void set_succeeded(bool value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchCompletedRequest)
 private:
  void set_has_unique_id();
  void clear_has_unique_id();
  void set_has_request_index();
  void clear_has_request_index();
  void set_has_serialized_request();
  void clear_has_serialized_request();
  void set_has_download_guid();
  void clear_has_download_guid();
  void set_has_succeeded();
  void clear_has_succeeded();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr unique_id_;
  ::google::protobuf::internal::ArenaStringPtr serialized_request_;
  ::google::protobuf::internal::ArenaStringPtr download_guid_;
  ::google::protobuf::int32 request_index_;
  bool succeeded_;
  friend struct protobuf_background_5ffetch_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BackgroundFetchRegistration

// optional string unique_id = 1;
inline bool BackgroundFetchRegistration::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchRegistration::set_has_unique_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackgroundFetchRegistration::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackgroundFetchRegistration::clear_unique_id() {
  unique_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unique_id();
}
inline const ::std::string& BackgroundFetchRegistration::unique_id() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.unique_id)
  return unique_id_.GetNoArena();
}
inline void BackgroundFetchRegistration::set_unique_id(const ::std::string& value) {
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.unique_id)
}
#if LANG_CXX11
inline void BackgroundFetchRegistration::set_unique_id(::std::string&& value) {
  set_has_unique_id();
  unique_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchRegistration.unique_id)
}
#endif
inline void BackgroundFetchRegistration::set_unique_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchRegistration.unique_id)
}
inline void BackgroundFetchRegistration::set_unique_id(const char* value, size_t size) {
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchRegistration.unique_id)
}
inline ::std::string* BackgroundFetchRegistration::mutable_unique_id() {
  set_has_unique_id();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchRegistration.unique_id)
  return unique_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchRegistration::release_unique_id() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchRegistration.unique_id)
  clear_has_unique_id();
  return unique_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchRegistration::set_allocated_unique_id(::std::string* unique_id) {
  if (unique_id != NULL) {
    set_has_unique_id();
  } else {
    clear_has_unique_id();
  }
  unique_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchRegistration.unique_id)
}

// optional bytes developer_id = 2;
inline bool BackgroundFetchRegistration::has_developer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchRegistration::set_has_developer_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackgroundFetchRegistration::clear_has_developer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackgroundFetchRegistration::clear_developer_id() {
  developer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_developer_id();
}
inline const ::std::string& BackgroundFetchRegistration::developer_id() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.developer_id)
  return developer_id_.GetNoArena();
}
inline void BackgroundFetchRegistration::set_developer_id(const ::std::string& value) {
  set_has_developer_id();
  developer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.developer_id)
}
#if LANG_CXX11
inline void BackgroundFetchRegistration::set_developer_id(::std::string&& value) {
  set_has_developer_id();
  developer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchRegistration.developer_id)
}
#endif
inline void BackgroundFetchRegistration::set_developer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_developer_id();
  developer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchRegistration.developer_id)
}
inline void BackgroundFetchRegistration::set_developer_id(const void* value, size_t size) {
  set_has_developer_id();
  developer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchRegistration.developer_id)
}
inline ::std::string* BackgroundFetchRegistration::mutable_developer_id() {
  set_has_developer_id();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchRegistration.developer_id)
  return developer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchRegistration::release_developer_id() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchRegistration.developer_id)
  clear_has_developer_id();
  return developer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchRegistration::set_allocated_developer_id(::std::string* developer_id) {
  if (developer_id != NULL) {
    set_has_developer_id();
  } else {
    clear_has_developer_id();
  }
  developer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), developer_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchRegistration.developer_id)
}

// optional uint64 upload_total = 3;
inline bool BackgroundFetchRegistration::has_upload_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchRegistration::set_has_upload_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackgroundFetchRegistration::clear_has_upload_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackgroundFetchRegistration::clear_upload_total() {
  upload_total_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_total();
}
inline ::google::protobuf::uint64 BackgroundFetchRegistration::upload_total() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.upload_total)
  return upload_total_;
}
inline void BackgroundFetchRegistration::set_upload_total(::google::protobuf::uint64 value) {
  set_has_upload_total();
  upload_total_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.upload_total)
}

// optional uint64 uploaded = 4;
inline bool BackgroundFetchRegistration::has_uploaded() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundFetchRegistration::set_has_uploaded() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackgroundFetchRegistration::clear_has_uploaded() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackgroundFetchRegistration::clear_uploaded() {
  uploaded_ = GOOGLE_ULONGLONG(0);
  clear_has_uploaded();
}
inline ::google::protobuf::uint64 BackgroundFetchRegistration::uploaded() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.uploaded)
  return uploaded_;
}
inline void BackgroundFetchRegistration::set_uploaded(::google::protobuf::uint64 value) {
  set_has_uploaded();
  uploaded_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.uploaded)
}

// optional uint64 download_total = 5;
inline bool BackgroundFetchRegistration::has_download_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackgroundFetchRegistration::set_has_download_total() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackgroundFetchRegistration::clear_has_download_total() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackgroundFetchRegistration::clear_download_total() {
  download_total_ = GOOGLE_ULONGLONG(0);
  clear_has_download_total();
}
inline ::google::protobuf::uint64 BackgroundFetchRegistration::download_total() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.download_total)
  return download_total_;
}
inline void BackgroundFetchRegistration::set_download_total(::google::protobuf::uint64 value) {
  set_has_download_total();
  download_total_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.download_total)
}

// optional uint64 downloaded = 6;
inline bool BackgroundFetchRegistration::has_downloaded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BackgroundFetchRegistration::set_has_downloaded() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BackgroundFetchRegistration::clear_has_downloaded() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BackgroundFetchRegistration::clear_downloaded() {
  downloaded_ = GOOGLE_ULONGLONG(0);
  clear_has_downloaded();
}
inline ::google::protobuf::uint64 BackgroundFetchRegistration::downloaded() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.downloaded)
  return downloaded_;
}
inline void BackgroundFetchRegistration::set_downloaded(::google::protobuf::uint64 value) {
  set_has_downloaded();
  downloaded_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.downloaded)
}

// -------------------------------------------------------------------

// BackgroundFetchOptions_IconDefinition

// optional string src = 1;
inline bool BackgroundFetchOptions_IconDefinition::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchOptions_IconDefinition::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackgroundFetchOptions_IconDefinition::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackgroundFetchOptions_IconDefinition::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src();
}
inline const ::std::string& BackgroundFetchOptions_IconDefinition::src() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.IconDefinition.src)
  return src_.GetNoArena();
}
inline void BackgroundFetchOptions_IconDefinition::set_src(const ::std::string& value) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.IconDefinition.src)
}
#if LANG_CXX11
inline void BackgroundFetchOptions_IconDefinition::set_src(::std::string&& value) {
  set_has_src();
  src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchOptions.IconDefinition.src)
}
#endif
inline void BackgroundFetchOptions_IconDefinition::set_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchOptions.IconDefinition.src)
}
inline void BackgroundFetchOptions_IconDefinition::set_src(const char* value, size_t size) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchOptions.IconDefinition.src)
}
inline ::std::string* BackgroundFetchOptions_IconDefinition::mutable_src() {
  set_has_src();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchOptions.IconDefinition.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchOptions_IconDefinition::release_src() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchOptions.IconDefinition.src)
  clear_has_src();
  return src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchOptions_IconDefinition::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    set_has_src();
  } else {
    clear_has_src();
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchOptions.IconDefinition.src)
}

// optional string sizes = 2;
inline bool BackgroundFetchOptions_IconDefinition::has_sizes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchOptions_IconDefinition::set_has_sizes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackgroundFetchOptions_IconDefinition::clear_has_sizes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackgroundFetchOptions_IconDefinition::clear_sizes() {
  sizes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sizes();
}
inline const ::std::string& BackgroundFetchOptions_IconDefinition::sizes() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.IconDefinition.sizes)
  return sizes_.GetNoArena();
}
inline void BackgroundFetchOptions_IconDefinition::set_sizes(const ::std::string& value) {
  set_has_sizes();
  sizes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.IconDefinition.sizes)
}
#if LANG_CXX11
inline void BackgroundFetchOptions_IconDefinition::set_sizes(::std::string&& value) {
  set_has_sizes();
  sizes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchOptions.IconDefinition.sizes)
}
#endif
inline void BackgroundFetchOptions_IconDefinition::set_sizes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sizes();
  sizes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchOptions.IconDefinition.sizes)
}
inline void BackgroundFetchOptions_IconDefinition::set_sizes(const char* value, size_t size) {
  set_has_sizes();
  sizes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchOptions.IconDefinition.sizes)
}
inline ::std::string* BackgroundFetchOptions_IconDefinition::mutable_sizes() {
  set_has_sizes();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchOptions.IconDefinition.sizes)
  return sizes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchOptions_IconDefinition::release_sizes() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchOptions.IconDefinition.sizes)
  clear_has_sizes();
  return sizes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchOptions_IconDefinition::set_allocated_sizes(::std::string* sizes) {
  if (sizes != NULL) {
    set_has_sizes();
  } else {
    clear_has_sizes();
  }
  sizes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sizes);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchOptions.IconDefinition.sizes)
}

// optional string type = 3;
inline bool BackgroundFetchOptions_IconDefinition::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchOptions_IconDefinition::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackgroundFetchOptions_IconDefinition::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackgroundFetchOptions_IconDefinition::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& BackgroundFetchOptions_IconDefinition::type() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.IconDefinition.type)
  return type_.GetNoArena();
}
inline void BackgroundFetchOptions_IconDefinition::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.IconDefinition.type)
}
#if LANG_CXX11
inline void BackgroundFetchOptions_IconDefinition::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchOptions.IconDefinition.type)
}
#endif
inline void BackgroundFetchOptions_IconDefinition::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchOptions.IconDefinition.type)
}
inline void BackgroundFetchOptions_IconDefinition::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchOptions.IconDefinition.type)
}
inline ::std::string* BackgroundFetchOptions_IconDefinition::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchOptions.IconDefinition.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchOptions_IconDefinition::release_type() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchOptions.IconDefinition.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchOptions_IconDefinition::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchOptions.IconDefinition.type)
}

// -------------------------------------------------------------------

// BackgroundFetchOptions

// optional string title = 1;
inline bool BackgroundFetchOptions::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchOptions::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackgroundFetchOptions::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackgroundFetchOptions::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& BackgroundFetchOptions::title() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.title)
  return title_.GetNoArena();
}
inline void BackgroundFetchOptions::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.title)
}
#if LANG_CXX11
inline void BackgroundFetchOptions::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchOptions.title)
}
#endif
inline void BackgroundFetchOptions::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchOptions.title)
}
inline void BackgroundFetchOptions::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchOptions.title)
}
inline ::std::string* BackgroundFetchOptions::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchOptions.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchOptions::release_title() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchOptions.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchOptions::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchOptions.title)
}

// repeated .content.proto.BackgroundFetchOptions.IconDefinition icons = 2;
inline int BackgroundFetchOptions::icons_size() const {
  return icons_.size();
}
inline void BackgroundFetchOptions::clear_icons() {
  icons_.Clear();
}
inline const ::content::proto::BackgroundFetchOptions_IconDefinition& BackgroundFetchOptions::icons(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.icons)
  return icons_.Get(index);
}
inline ::content::proto::BackgroundFetchOptions_IconDefinition* BackgroundFetchOptions::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchOptions.icons)
  return icons_.Mutable(index);
}
inline ::content::proto::BackgroundFetchOptions_IconDefinition* BackgroundFetchOptions::add_icons() {
  // @@protoc_insertion_point(field_add:content.proto.BackgroundFetchOptions.icons)
  return icons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_IconDefinition >*
BackgroundFetchOptions::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.BackgroundFetchOptions.icons)
  return &icons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_IconDefinition >&
BackgroundFetchOptions::icons() const {
  // @@protoc_insertion_point(field_list:content.proto.BackgroundFetchOptions.icons)
  return icons_;
}

// optional uint64 download_total = 3;
inline bool BackgroundFetchOptions::has_download_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchOptions::set_has_download_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackgroundFetchOptions::clear_has_download_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackgroundFetchOptions::clear_download_total() {
  download_total_ = GOOGLE_ULONGLONG(0);
  clear_has_download_total();
}
inline ::google::protobuf::uint64 BackgroundFetchOptions::download_total() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.download_total)
  return download_total_;
}
inline void BackgroundFetchOptions::set_download_total(::google::protobuf::uint64 value) {
  set_has_download_total();
  download_total_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.download_total)
}

// -------------------------------------------------------------------

// BackgroundFetchMetadata

// optional int64 creation_microseconds_since_unix_epoch = 1;
inline bool BackgroundFetchMetadata::has_creation_microseconds_since_unix_epoch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundFetchMetadata::set_has_creation_microseconds_since_unix_epoch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackgroundFetchMetadata::clear_has_creation_microseconds_since_unix_epoch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackgroundFetchMetadata::clear_creation_microseconds_since_unix_epoch() {
  creation_microseconds_since_unix_epoch_ = GOOGLE_LONGLONG(0);
  clear_has_creation_microseconds_since_unix_epoch();
}
inline ::google::protobuf::int64 BackgroundFetchMetadata::creation_microseconds_since_unix_epoch() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchMetadata.creation_microseconds_since_unix_epoch)
  return creation_microseconds_since_unix_epoch_;
}
inline void BackgroundFetchMetadata::set_creation_microseconds_since_unix_epoch(::google::protobuf::int64 value) {
  set_has_creation_microseconds_since_unix_epoch();
  creation_microseconds_since_unix_epoch_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchMetadata.creation_microseconds_since_unix_epoch)
}

// optional string origin = 2;
inline bool BackgroundFetchMetadata::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchMetadata::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackgroundFetchMetadata::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackgroundFetchMetadata::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin();
}
inline const ::std::string& BackgroundFetchMetadata::origin() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchMetadata.origin)
  return origin_.GetNoArena();
}
inline void BackgroundFetchMetadata::set_origin(const ::std::string& value) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchMetadata.origin)
}
#if LANG_CXX11
inline void BackgroundFetchMetadata::set_origin(::std::string&& value) {
  set_has_origin();
  origin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchMetadata.origin)
}
#endif
inline void BackgroundFetchMetadata::set_origin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchMetadata.origin)
}
inline void BackgroundFetchMetadata::set_origin(const char* value, size_t size) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchMetadata.origin)
}
inline ::std::string* BackgroundFetchMetadata::mutable_origin() {
  set_has_origin();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchMetadata.origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchMetadata::release_origin() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchMetadata.origin)
  clear_has_origin();
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchMetadata::set_allocated_origin(::std::string* origin) {
  if (origin != NULL) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchMetadata.origin)
}

// optional .content.proto.BackgroundFetchRegistration registration = 3;
inline bool BackgroundFetchMetadata::has_registration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchMetadata::set_has_registration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackgroundFetchMetadata::clear_has_registration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackgroundFetchMetadata::clear_registration() {
  if (registration_ != NULL) registration_->::content::proto::BackgroundFetchRegistration::Clear();
  clear_has_registration();
}
inline const ::content::proto::BackgroundFetchRegistration& BackgroundFetchMetadata::registration() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchMetadata.registration)
  return registration_ != NULL ? *registration_
                         : *::content::proto::BackgroundFetchRegistration::internal_default_instance();
}
inline ::content::proto::BackgroundFetchRegistration* BackgroundFetchMetadata::mutable_registration() {
  set_has_registration();
  if (registration_ == NULL) {
    registration_ = new ::content::proto::BackgroundFetchRegistration;
  }
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchMetadata.registration)
  return registration_;
}
inline ::content::proto::BackgroundFetchRegistration* BackgroundFetchMetadata::release_registration() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchMetadata.registration)
  clear_has_registration();
  ::content::proto::BackgroundFetchRegistration* temp = registration_;
  registration_ = NULL;
  return temp;
}
inline void BackgroundFetchMetadata::set_allocated_registration(::content::proto::BackgroundFetchRegistration* registration) {
  delete registration_;
  registration_ = registration;
  if (registration) {
    set_has_registration();
  } else {
    clear_has_registration();
  }
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchMetadata.registration)
}

// optional .content.proto.BackgroundFetchOptions options = 4;
inline bool BackgroundFetchMetadata::has_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchMetadata::set_has_options() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackgroundFetchMetadata::clear_has_options() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackgroundFetchMetadata::clear_options() {
  if (options_ != NULL) options_->::content::proto::BackgroundFetchOptions::Clear();
  clear_has_options();
}
inline const ::content::proto::BackgroundFetchOptions& BackgroundFetchMetadata::options() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchMetadata.options)
  return options_ != NULL ? *options_
                         : *::content::proto::BackgroundFetchOptions::internal_default_instance();
}
inline ::content::proto::BackgroundFetchOptions* BackgroundFetchMetadata::mutable_options() {
  set_has_options();
  if (options_ == NULL) {
    options_ = new ::content::proto::BackgroundFetchOptions;
  }
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchMetadata.options)
  return options_;
}
inline ::content::proto::BackgroundFetchOptions* BackgroundFetchMetadata::release_options() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchMetadata.options)
  clear_has_options();
  ::content::proto::BackgroundFetchOptions* temp = options_;
  options_ = NULL;
  return temp;
}
inline void BackgroundFetchMetadata::set_allocated_options(::content::proto::BackgroundFetchOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchMetadata.options)
}

// optional int32 num_fetches = 5;
inline bool BackgroundFetchMetadata::has_num_fetches() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackgroundFetchMetadata::set_has_num_fetches() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackgroundFetchMetadata::clear_has_num_fetches() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackgroundFetchMetadata::clear_num_fetches() {
  num_fetches_ = 0;
  clear_has_num_fetches();
}
inline ::google::protobuf::int32 BackgroundFetchMetadata::num_fetches() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchMetadata.num_fetches)
  return num_fetches_;
}
inline void BackgroundFetchMetadata::set_num_fetches(::google::protobuf::int32 value) {
  set_has_num_fetches();
  num_fetches_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchMetadata.num_fetches)
}

// -------------------------------------------------------------------

// BackgroundFetchPendingRequest

// optional string unique_id = 1;
inline bool BackgroundFetchPendingRequest::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchPendingRequest::set_has_unique_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackgroundFetchPendingRequest::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackgroundFetchPendingRequest::clear_unique_id() {
  unique_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unique_id();
}
inline const ::std::string& BackgroundFetchPendingRequest::unique_id() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchPendingRequest.unique_id)
  return unique_id_.GetNoArena();
}
inline void BackgroundFetchPendingRequest::set_unique_id(const ::std::string& value) {
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchPendingRequest.unique_id)
}
#if LANG_CXX11
inline void BackgroundFetchPendingRequest::set_unique_id(::std::string&& value) {
  set_has_unique_id();
  unique_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchPendingRequest.unique_id)
}
#endif
inline void BackgroundFetchPendingRequest::set_unique_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchPendingRequest.unique_id)
}
inline void BackgroundFetchPendingRequest::set_unique_id(const char* value, size_t size) {
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchPendingRequest.unique_id)
}
inline ::std::string* BackgroundFetchPendingRequest::mutable_unique_id() {
  set_has_unique_id();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchPendingRequest.unique_id)
  return unique_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchPendingRequest::release_unique_id() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchPendingRequest.unique_id)
  clear_has_unique_id();
  return unique_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchPendingRequest::set_allocated_unique_id(::std::string* unique_id) {
  if (unique_id != NULL) {
    set_has_unique_id();
  } else {
    clear_has_unique_id();
  }
  unique_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchPendingRequest.unique_id)
}

// optional int32 request_index = 2;
inline bool BackgroundFetchPendingRequest::has_request_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchPendingRequest::set_has_request_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackgroundFetchPendingRequest::clear_has_request_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackgroundFetchPendingRequest::clear_request_index() {
  request_index_ = 0;
  clear_has_request_index();
}
inline ::google::protobuf::int32 BackgroundFetchPendingRequest::request_index() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchPendingRequest.request_index)
  return request_index_;
}
inline void BackgroundFetchPendingRequest::set_request_index(::google::protobuf::int32 value) {
  set_has_request_index();
  request_index_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchPendingRequest.request_index)
}

// optional string serialized_request = 3;
inline bool BackgroundFetchPendingRequest::has_serialized_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchPendingRequest::set_has_serialized_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackgroundFetchPendingRequest::clear_has_serialized_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackgroundFetchPendingRequest::clear_serialized_request() {
  serialized_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_request();
}
inline const ::std::string& BackgroundFetchPendingRequest::serialized_request() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchPendingRequest.serialized_request)
  return serialized_request_.GetNoArena();
}
inline void BackgroundFetchPendingRequest::set_serialized_request(const ::std::string& value) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchPendingRequest.serialized_request)
}
#if LANG_CXX11
inline void BackgroundFetchPendingRequest::set_serialized_request(::std::string&& value) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchPendingRequest.serialized_request)
}
#endif
inline void BackgroundFetchPendingRequest::set_serialized_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchPendingRequest.serialized_request)
}
inline void BackgroundFetchPendingRequest::set_serialized_request(const char* value, size_t size) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchPendingRequest.serialized_request)
}
inline ::std::string* BackgroundFetchPendingRequest::mutable_serialized_request() {
  set_has_serialized_request();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchPendingRequest.serialized_request)
  return serialized_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchPendingRequest::release_serialized_request() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchPendingRequest.serialized_request)
  clear_has_serialized_request();
  return serialized_request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchPendingRequest::set_allocated_serialized_request(::std::string* serialized_request) {
  if (serialized_request != NULL) {
    set_has_serialized_request();
  } else {
    clear_has_serialized_request();
  }
  serialized_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_request);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchPendingRequest.serialized_request)
}

// -------------------------------------------------------------------

// BackgroundFetchActiveRequest

// optional string unique_id = 1;
inline bool BackgroundFetchActiveRequest::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchActiveRequest::set_has_unique_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackgroundFetchActiveRequest::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackgroundFetchActiveRequest::clear_unique_id() {
  unique_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unique_id();
}
inline const ::std::string& BackgroundFetchActiveRequest::unique_id() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchActiveRequest.unique_id)
  return unique_id_.GetNoArena();
}
inline void BackgroundFetchActiveRequest::set_unique_id(const ::std::string& value) {
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchActiveRequest.unique_id)
}
#if LANG_CXX11
inline void BackgroundFetchActiveRequest::set_unique_id(::std::string&& value) {
  set_has_unique_id();
  unique_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchActiveRequest.unique_id)
}
#endif
inline void BackgroundFetchActiveRequest::set_unique_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchActiveRequest.unique_id)
}
inline void BackgroundFetchActiveRequest::set_unique_id(const char* value, size_t size) {
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchActiveRequest.unique_id)
}
inline ::std::string* BackgroundFetchActiveRequest::mutable_unique_id() {
  set_has_unique_id();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchActiveRequest.unique_id)
  return unique_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchActiveRequest::release_unique_id() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchActiveRequest.unique_id)
  clear_has_unique_id();
  return unique_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchActiveRequest::set_allocated_unique_id(::std::string* unique_id) {
  if (unique_id != NULL) {
    set_has_unique_id();
  } else {
    clear_has_unique_id();
  }
  unique_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchActiveRequest.unique_id)
}

// optional int32 request_index = 2;
inline bool BackgroundFetchActiveRequest::has_request_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundFetchActiveRequest::set_has_request_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackgroundFetchActiveRequest::clear_has_request_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackgroundFetchActiveRequest::clear_request_index() {
  request_index_ = 0;
  clear_has_request_index();
}
inline ::google::protobuf::int32 BackgroundFetchActiveRequest::request_index() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchActiveRequest.request_index)
  return request_index_;
}
inline void BackgroundFetchActiveRequest::set_request_index(::google::protobuf::int32 value) {
  set_has_request_index();
  request_index_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchActiveRequest.request_index)
}

// optional string serialized_request = 3;
inline bool BackgroundFetchActiveRequest::has_serialized_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchActiveRequest::set_has_serialized_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackgroundFetchActiveRequest::clear_has_serialized_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackgroundFetchActiveRequest::clear_serialized_request() {
  serialized_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_request();
}
inline const ::std::string& BackgroundFetchActiveRequest::serialized_request() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchActiveRequest.serialized_request)
  return serialized_request_.GetNoArena();
}
inline void BackgroundFetchActiveRequest::set_serialized_request(const ::std::string& value) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchActiveRequest.serialized_request)
}
#if LANG_CXX11
inline void BackgroundFetchActiveRequest::set_serialized_request(::std::string&& value) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchActiveRequest.serialized_request)
}
#endif
inline void BackgroundFetchActiveRequest::set_serialized_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchActiveRequest.serialized_request)
}
inline void BackgroundFetchActiveRequest::set_serialized_request(const char* value, size_t size) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchActiveRequest.serialized_request)
}
inline ::std::string* BackgroundFetchActiveRequest::mutable_serialized_request() {
  set_has_serialized_request();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchActiveRequest.serialized_request)
  return serialized_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchActiveRequest::release_serialized_request() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchActiveRequest.serialized_request)
  clear_has_serialized_request();
  return serialized_request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchActiveRequest::set_allocated_serialized_request(::std::string* serialized_request) {
  if (serialized_request != NULL) {
    set_has_serialized_request();
  } else {
    clear_has_serialized_request();
  }
  serialized_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_request);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchActiveRequest.serialized_request)
}

// optional string download_guid = 4;
inline bool BackgroundFetchActiveRequest::has_download_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchActiveRequest::set_has_download_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackgroundFetchActiveRequest::clear_has_download_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackgroundFetchActiveRequest::clear_download_guid() {
  download_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_download_guid();
}
inline const ::std::string& BackgroundFetchActiveRequest::download_guid() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchActiveRequest.download_guid)
  return download_guid_.GetNoArena();
}
inline void BackgroundFetchActiveRequest::set_download_guid(const ::std::string& value) {
  set_has_download_guid();
  download_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchActiveRequest.download_guid)
}
#if LANG_CXX11
inline void BackgroundFetchActiveRequest::set_download_guid(::std::string&& value) {
  set_has_download_guid();
  download_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchActiveRequest.download_guid)
}
#endif
inline void BackgroundFetchActiveRequest::set_download_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_download_guid();
  download_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchActiveRequest.download_guid)
}
inline void BackgroundFetchActiveRequest::set_download_guid(const char* value, size_t size) {
  set_has_download_guid();
  download_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchActiveRequest.download_guid)
}
inline ::std::string* BackgroundFetchActiveRequest::mutable_download_guid() {
  set_has_download_guid();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchActiveRequest.download_guid)
  return download_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchActiveRequest::release_download_guid() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchActiveRequest.download_guid)
  clear_has_download_guid();
  return download_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchActiveRequest::set_allocated_download_guid(::std::string* download_guid) {
  if (download_guid != NULL) {
    set_has_download_guid();
  } else {
    clear_has_download_guid();
  }
  download_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_guid);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchActiveRequest.download_guid)
}

// -------------------------------------------------------------------

// BackgroundFetchCompletedRequest

// optional string unique_id = 1;
inline bool BackgroundFetchCompletedRequest::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchCompletedRequest::set_has_unique_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackgroundFetchCompletedRequest::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackgroundFetchCompletedRequest::clear_unique_id() {
  unique_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unique_id();
}
inline const ::std::string& BackgroundFetchCompletedRequest::unique_id() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchCompletedRequest.unique_id)
  return unique_id_.GetNoArena();
}
inline void BackgroundFetchCompletedRequest::set_unique_id(const ::std::string& value) {
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchCompletedRequest.unique_id)
}
#if LANG_CXX11
inline void BackgroundFetchCompletedRequest::set_unique_id(::std::string&& value) {
  set_has_unique_id();
  unique_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchCompletedRequest.unique_id)
}
#endif
inline void BackgroundFetchCompletedRequest::set_unique_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchCompletedRequest.unique_id)
}
inline void BackgroundFetchCompletedRequest::set_unique_id(const char* value, size_t size) {
  set_has_unique_id();
  unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchCompletedRequest.unique_id)
}
inline ::std::string* BackgroundFetchCompletedRequest::mutable_unique_id() {
  set_has_unique_id();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchCompletedRequest.unique_id)
  return unique_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchCompletedRequest::release_unique_id() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchCompletedRequest.unique_id)
  clear_has_unique_id();
  return unique_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchCompletedRequest::set_allocated_unique_id(::std::string* unique_id) {
  if (unique_id != NULL) {
    set_has_unique_id();
  } else {
    clear_has_unique_id();
  }
  unique_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchCompletedRequest.unique_id)
}

// optional int32 request_index = 2;
inline bool BackgroundFetchCompletedRequest::has_request_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundFetchCompletedRequest::set_has_request_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackgroundFetchCompletedRequest::clear_has_request_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackgroundFetchCompletedRequest::clear_request_index() {
  request_index_ = 0;
  clear_has_request_index();
}
inline ::google::protobuf::int32 BackgroundFetchCompletedRequest::request_index() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchCompletedRequest.request_index)
  return request_index_;
}
inline void BackgroundFetchCompletedRequest::set_request_index(::google::protobuf::int32 value) {
  set_has_request_index();
  request_index_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchCompletedRequest.request_index)
}

// optional string serialized_request = 3;
inline bool BackgroundFetchCompletedRequest::has_serialized_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchCompletedRequest::set_has_serialized_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackgroundFetchCompletedRequest::clear_has_serialized_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackgroundFetchCompletedRequest::clear_serialized_request() {
  serialized_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_request();
}
inline const ::std::string& BackgroundFetchCompletedRequest::serialized_request() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchCompletedRequest.serialized_request)
  return serialized_request_.GetNoArena();
}
inline void BackgroundFetchCompletedRequest::set_serialized_request(const ::std::string& value) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchCompletedRequest.serialized_request)
}
#if LANG_CXX11
inline void BackgroundFetchCompletedRequest::set_serialized_request(::std::string&& value) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchCompletedRequest.serialized_request)
}
#endif
inline void BackgroundFetchCompletedRequest::set_serialized_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchCompletedRequest.serialized_request)
}
inline void BackgroundFetchCompletedRequest::set_serialized_request(const char* value, size_t size) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchCompletedRequest.serialized_request)
}
inline ::std::string* BackgroundFetchCompletedRequest::mutable_serialized_request() {
  set_has_serialized_request();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchCompletedRequest.serialized_request)
  return serialized_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchCompletedRequest::release_serialized_request() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchCompletedRequest.serialized_request)
  clear_has_serialized_request();
  return serialized_request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchCompletedRequest::set_allocated_serialized_request(::std::string* serialized_request) {
  if (serialized_request != NULL) {
    set_has_serialized_request();
  } else {
    clear_has_serialized_request();
  }
  serialized_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_request);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchCompletedRequest.serialized_request)
}

// optional string download_guid = 4;
inline bool BackgroundFetchCompletedRequest::has_download_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchCompletedRequest::set_has_download_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackgroundFetchCompletedRequest::clear_has_download_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackgroundFetchCompletedRequest::clear_download_guid() {
  download_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_download_guid();
}
inline const ::std::string& BackgroundFetchCompletedRequest::download_guid() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchCompletedRequest.download_guid)
  return download_guid_.GetNoArena();
}
inline void BackgroundFetchCompletedRequest::set_download_guid(const ::std::string& value) {
  set_has_download_guid();
  download_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchCompletedRequest.download_guid)
}
#if LANG_CXX11
inline void BackgroundFetchCompletedRequest::set_download_guid(::std::string&& value) {
  set_has_download_guid();
  download_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchCompletedRequest.download_guid)
}
#endif
inline void BackgroundFetchCompletedRequest::set_download_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_download_guid();
  download_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchCompletedRequest.download_guid)
}
inline void BackgroundFetchCompletedRequest::set_download_guid(const char* value, size_t size) {
  set_has_download_guid();
  download_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchCompletedRequest.download_guid)
}
inline ::std::string* BackgroundFetchCompletedRequest::mutable_download_guid() {
  set_has_download_guid();
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchCompletedRequest.download_guid)
  return download_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackgroundFetchCompletedRequest::release_download_guid() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchCompletedRequest.download_guid)
  clear_has_download_guid();
  return download_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchCompletedRequest::set_allocated_download_guid(::std::string* download_guid) {
  if (download_guid != NULL) {
    set_has_download_guid();
  } else {
    clear_has_download_guid();
  }
  download_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_guid);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchCompletedRequest.download_guid)
}

// optional bool succeeded = 5;
inline bool BackgroundFetchCompletedRequest::has_succeeded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackgroundFetchCompletedRequest::set_has_succeeded() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackgroundFetchCompletedRequest::clear_has_succeeded() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackgroundFetchCompletedRequest::clear_succeeded() {
  succeeded_ = false;
  clear_has_succeeded();
}
inline bool BackgroundFetchCompletedRequest::succeeded() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchCompletedRequest.succeeded)
  return succeeded_;
}
inline void BackgroundFetchCompletedRequest::set_succeeded(bool value) {
  set_has_succeeded();
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchCompletedRequest.succeeded)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace content

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_background_5ffetch_2eproto__INCLUDED
