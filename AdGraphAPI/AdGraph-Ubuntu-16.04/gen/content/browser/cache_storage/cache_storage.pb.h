// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache_storage.proto

#ifndef PROTOBUF_cache_5fstorage_2eproto__INCLUDED
#define PROTOBUF_cache_5fstorage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace content {
namespace proto {
class CacheHeaderMap;
class CacheHeaderMapDefaultTypeInternal;
extern CacheHeaderMapDefaultTypeInternal _CacheHeaderMap_default_instance_;
class CacheMetadata;
class CacheMetadataDefaultTypeInternal;
extern CacheMetadataDefaultTypeInternal _CacheMetadata_default_instance_;
class CacheRequest;
class CacheRequestDefaultTypeInternal;
extern CacheRequestDefaultTypeInternal _CacheRequest_default_instance_;
class CacheResponse;
class CacheResponseDefaultTypeInternal;
extern CacheResponseDefaultTypeInternal _CacheResponse_default_instance_;
class CacheStorageIndex;
class CacheStorageIndexDefaultTypeInternal;
extern CacheStorageIndexDefaultTypeInternal _CacheStorageIndex_default_instance_;
class CacheStorageIndex_Cache;
class CacheStorageIndex_CacheDefaultTypeInternal;
extern CacheStorageIndex_CacheDefaultTypeInternal _CacheStorageIndex_Cache_default_instance_;
}  // namespace proto
}  // namespace content

namespace content {
namespace proto {

namespace protobuf_cache_5fstorage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cache_5fstorage_2eproto

enum CacheResponse_ResponseType {
  CacheResponse_ResponseType_BASIC_TYPE = 0,
  CacheResponse_ResponseType_CORS_TYPE = 1,
  CacheResponse_ResponseType_DEFAULT_TYPE = 2,
  CacheResponse_ResponseType_ERROR_TYPE = 3,
  CacheResponse_ResponseType_OPAQUE_TYPE = 4,
  CacheResponse_ResponseType_OPAQUE_REDIRECT_TYPE = 5
};
bool CacheResponse_ResponseType_IsValid(int value);
const CacheResponse_ResponseType CacheResponse_ResponseType_ResponseType_MIN = CacheResponse_ResponseType_BASIC_TYPE;
const CacheResponse_ResponseType CacheResponse_ResponseType_ResponseType_MAX = CacheResponse_ResponseType_OPAQUE_REDIRECT_TYPE;
const int CacheResponse_ResponseType_ResponseType_ARRAYSIZE = CacheResponse_ResponseType_ResponseType_MAX + 1;

// ===================================================================

class CacheStorageIndex_Cache : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheStorageIndex.Cache) */ {
 public:
  CacheStorageIndex_Cache();
  virtual ~CacheStorageIndex_Cache();

  CacheStorageIndex_Cache(const CacheStorageIndex_Cache& from);

  inline CacheStorageIndex_Cache& operator=(const CacheStorageIndex_Cache& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CacheStorageIndex_Cache& default_instance();

  static inline const CacheStorageIndex_Cache* internal_default_instance() {
    return reinterpret_cast<const CacheStorageIndex_Cache*>(
               &_CacheStorageIndex_Cache_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CacheStorageIndex_Cache* other);

  // implements Message ----------------------------------------------

  inline CacheStorageIndex_Cache* New() const PROTOBUF_FINAL { return New(NULL); }

  CacheStorageIndex_Cache* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CacheStorageIndex_Cache& from);
  void MergeFrom(const CacheStorageIndex_Cache& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheStorageIndex_Cache* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string cache_dir = 2;
  bool has_cache_dir() const;
  void clear_cache_dir();
  static const int kCacheDirFieldNumber = 2;
  const ::std::string& cache_dir() const;
  void set_cache_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_cache_dir(::std::string&& value);
  #endif
  void set_cache_dir(const char* value);
  void set_cache_dir(const char* value, size_t size);
  ::std::string* mutable_cache_dir();
  ::std::string* release_cache_dir();
  void set_allocated_cache_dir(::std::string* cache_dir);

  // optional string padding_key = 4;
  bool has_padding_key() const;
  void clear_padding_key();
  static const int kPaddingKeyFieldNumber = 4;
  const ::std::string& padding_key() const;
  void set_padding_key(const ::std::string& value);
  #if LANG_CXX11
  void set_padding_key(::std::string&& value);
  #endif
  void set_padding_key(const char* value);
  void set_padding_key(const char* value, size_t size);
  ::std::string* mutable_padding_key();
  ::std::string* release_padding_key();
  void set_allocated_padding_key(::std::string* padding_key);

  // optional int64 size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // optional int64 padding = 5;
  bool has_padding() const;
  void clear_padding();
  static const int kPaddingFieldNumber = 5;
  ::google::protobuf::int64 padding() const;
  void set_padding(::google::protobuf::int64 value);

  // optional int32 padding_version = 6;
  bool has_padding_version() const;
  void clear_padding_version();
  static const int kPaddingVersionFieldNumber = 6;
  ::google::protobuf::int32 padding_version() const;
  void set_padding_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.CacheStorageIndex.Cache)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_cache_dir();
  void clear_has_cache_dir();
  void set_has_size();
  void clear_has_size();
  void set_has_padding_key();
  void clear_has_padding_key();
  void set_has_padding();
  void clear_has_padding();
  void set_has_padding_version();
  void clear_has_padding_version();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr cache_dir_;
  ::google::protobuf::internal::ArenaStringPtr padding_key_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 padding_;
  ::google::protobuf::int32 padding_version_;
  friend struct protobuf_cache_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CacheStorageIndex : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheStorageIndex) */ {
 public:
  CacheStorageIndex();
  virtual ~CacheStorageIndex();

  CacheStorageIndex(const CacheStorageIndex& from);

  inline CacheStorageIndex& operator=(const CacheStorageIndex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CacheStorageIndex& default_instance();

  static inline const CacheStorageIndex* internal_default_instance() {
    return reinterpret_cast<const CacheStorageIndex*>(
               &_CacheStorageIndex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CacheStorageIndex* other);

  // implements Message ----------------------------------------------

  inline CacheStorageIndex* New() const PROTOBUF_FINAL { return New(NULL); }

  CacheStorageIndex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CacheStorageIndex& from);
  void MergeFrom(const CacheStorageIndex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheStorageIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CacheStorageIndex_Cache Cache;

  // accessors -------------------------------------------------------

  // repeated .content.proto.CacheStorageIndex.Cache cache = 1;
  int cache_size() const;
  void clear_cache();
  static const int kCacheFieldNumber = 1;
  const ::content::proto::CacheStorageIndex_Cache& cache(int index) const;
  ::content::proto::CacheStorageIndex_Cache* mutable_cache(int index);
  ::content::proto::CacheStorageIndex_Cache* add_cache();
  ::google::protobuf::RepeatedPtrField< ::content::proto::CacheStorageIndex_Cache >*
      mutable_cache();
  const ::google::protobuf::RepeatedPtrField< ::content::proto::CacheStorageIndex_Cache >&
      cache() const;

  // optional string origin = 2;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 2;
  const ::std::string& origin() const;
  void set_origin(const ::std::string& value);
  #if LANG_CXX11
  void set_origin(::std::string&& value);
  #endif
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  ::std::string* mutable_origin();
  ::std::string* release_origin();
  void set_allocated_origin(::std::string* origin);

  // @@protoc_insertion_point(class_scope:content.proto.CacheStorageIndex)
 private:
  void set_has_origin();
  void clear_has_origin();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::content::proto::CacheStorageIndex_Cache > cache_;
  ::google::protobuf::internal::ArenaStringPtr origin_;
  friend struct protobuf_cache_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CacheHeaderMap : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheHeaderMap) */ {
 public:
  CacheHeaderMap();
  virtual ~CacheHeaderMap();

  CacheHeaderMap(const CacheHeaderMap& from);

  inline CacheHeaderMap& operator=(const CacheHeaderMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CacheHeaderMap& default_instance();

  static inline const CacheHeaderMap* internal_default_instance() {
    return reinterpret_cast<const CacheHeaderMap*>(
               &_CacheHeaderMap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CacheHeaderMap* other);

  // implements Message ----------------------------------------------

  inline CacheHeaderMap* New() const PROTOBUF_FINAL { return New(NULL); }

  CacheHeaderMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CacheHeaderMap& from);
  void MergeFrom(const CacheHeaderMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheHeaderMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:content.proto.CacheHeaderMap)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_cache_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CacheRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheRequest) */ {
 public:
  CacheRequest();
  virtual ~CacheRequest();

  CacheRequest(const CacheRequest& from);

  inline CacheRequest& operator=(const CacheRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CacheRequest& default_instance();

  static inline const CacheRequest* internal_default_instance() {
    return reinterpret_cast<const CacheRequest*>(
               &_CacheRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CacheRequest* other);

  // implements Message ----------------------------------------------

  inline CacheRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CacheRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CacheRequest& from);
  void MergeFrom(const CacheRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .content.proto.CacheHeaderMap headers = 2;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 2;
  const ::content::proto::CacheHeaderMap& headers(int index) const;
  ::content::proto::CacheHeaderMap* mutable_headers(int index);
  ::content::proto::CacheHeaderMap* add_headers();
  ::google::protobuf::RepeatedPtrField< ::content::proto::CacheHeaderMap >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::content::proto::CacheHeaderMap >&
      headers() const;

  // required string method = 1;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // @@protoc_insertion_point(class_scope:content.proto.CacheRequest)
 private:
  void set_has_method();
  void clear_has_method();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::content::proto::CacheHeaderMap > headers_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  friend struct protobuf_cache_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CacheResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheResponse) */ {
 public:
  CacheResponse();
  virtual ~CacheResponse();

  CacheResponse(const CacheResponse& from);

  inline CacheResponse& operator=(const CacheResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CacheResponse& default_instance();

  static inline const CacheResponse* internal_default_instance() {
    return reinterpret_cast<const CacheResponse*>(
               &_CacheResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CacheResponse* other);

  // implements Message ----------------------------------------------

  inline CacheResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CacheResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CacheResponse& from);
  void MergeFrom(const CacheResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CacheResponse_ResponseType ResponseType;
  static const ResponseType BASIC_TYPE =
    CacheResponse_ResponseType_BASIC_TYPE;
  static const ResponseType CORS_TYPE =
    CacheResponse_ResponseType_CORS_TYPE;
  static const ResponseType DEFAULT_TYPE =
    CacheResponse_ResponseType_DEFAULT_TYPE;
  static const ResponseType ERROR_TYPE =
    CacheResponse_ResponseType_ERROR_TYPE;
  static const ResponseType OPAQUE_TYPE =
    CacheResponse_ResponseType_OPAQUE_TYPE;
  static const ResponseType OPAQUE_REDIRECT_TYPE =
    CacheResponse_ResponseType_OPAQUE_REDIRECT_TYPE;
  static inline bool ResponseType_IsValid(int value) {
    return CacheResponse_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    CacheResponse_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    CacheResponse_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    CacheResponse_ResponseType_ResponseType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .content.proto.CacheHeaderMap headers = 4;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 4;
  const ::content::proto::CacheHeaderMap& headers(int index) const;
  ::content::proto::CacheHeaderMap* mutable_headers(int index);
  ::content::proto::CacheHeaderMap* add_headers();
  ::google::protobuf::RepeatedPtrField< ::content::proto::CacheHeaderMap >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::content::proto::CacheHeaderMap >&
      headers() const;

  // repeated string cors_exposed_header_names = 7;
  int cors_exposed_header_names_size() const;
  void clear_cors_exposed_header_names();
  static const int kCorsExposedHeaderNamesFieldNumber = 7;
  const ::std::string& cors_exposed_header_names(int index) const;
  ::std::string* mutable_cors_exposed_header_names(int index);
  void set_cors_exposed_header_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_cors_exposed_header_names(int index, ::std::string&& value);
  #endif
  void set_cors_exposed_header_names(int index, const char* value);
  void set_cors_exposed_header_names(int index, const char* value, size_t size);
  ::std::string* add_cors_exposed_header_names();
  void add_cors_exposed_header_names(const ::std::string& value);
  #if LANG_CXX11
  void add_cors_exposed_header_names(::std::string&& value);
  #endif
  void add_cors_exposed_header_names(const char* value);
  void add_cors_exposed_header_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cors_exposed_header_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cors_exposed_header_names();

  // repeated string url_list = 8;
  int url_list_size() const;
  void clear_url_list();
  static const int kUrlListFieldNumber = 8;
  const ::std::string& url_list(int index) const;
  ::std::string* mutable_url_list(int index);
  void set_url_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_url_list(int index, ::std::string&& value);
  #endif
  void set_url_list(int index, const char* value);
  void set_url_list(int index, const char* value, size_t size);
  ::std::string* add_url_list();
  void add_url_list(const ::std::string& value);
  #if LANG_CXX11
  void add_url_list(::std::string&& value);
  #endif
  void add_url_list(const char* value);
  void add_url_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& url_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_url_list();

  // required string status_text = 2;
  bool has_status_text() const;
  void clear_status_text();
  static const int kStatusTextFieldNumber = 2;
  const ::std::string& status_text() const;
  void set_status_text(const ::std::string& value);
  #if LANG_CXX11
  void set_status_text(::std::string&& value);
  #endif
  void set_status_text(const char* value);
  void set_status_text(const char* value, size_t size);
  ::std::string* mutable_status_text();
  ::std::string* release_status_text();
  void set_allocated_status_text(::std::string* status_text);

  // optional string url = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_url() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_url();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kUrlFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& url() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_url(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_url(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_url(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_url(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_url();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_url();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_url(::std::string* url);

  // required int32 status_code = 1;
  bool has_status_code() const;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  ::google::protobuf::int32 status_code() const;
  void set_status_code(::google::protobuf::int32 value);

  // required .content.proto.CacheResponse.ResponseType response_type = 3;
  bool has_response_type() const;
  void clear_response_type();
  static const int kResponseTypeFieldNumber = 3;
  ::content::proto::CacheResponse_ResponseType response_type() const;
  void set_response_type(::content::proto::CacheResponse_ResponseType value);

  // optional int64 response_time = 6;
  bool has_response_time() const;
  void clear_response_time();
  static const int kResponseTimeFieldNumber = 6;
  ::google::protobuf::int64 response_time() const;
  void set_response_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:content.proto.CacheResponse)
 private:
  void set_has_status_code();
  void clear_has_status_code();
  void set_has_status_text();
  void clear_has_status_text();
  void set_has_response_type();
  void clear_has_response_type();
  void set_has_url();
  void clear_has_url();
  void set_has_response_time();
  void clear_has_response_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::content::proto::CacheHeaderMap > headers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cors_exposed_header_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> url_list_;
  ::google::protobuf::internal::ArenaStringPtr status_text_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 status_code_;
  int response_type_;
  ::google::protobuf::int64 response_time_;
  friend struct protobuf_cache_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CacheMetadata : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheMetadata) */ {
 public:
  CacheMetadata();
  virtual ~CacheMetadata();

  CacheMetadata(const CacheMetadata& from);

  inline CacheMetadata& operator=(const CacheMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CacheMetadata& default_instance();

  static inline const CacheMetadata* internal_default_instance() {
    return reinterpret_cast<const CacheMetadata*>(
               &_CacheMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CacheMetadata* other);

  // implements Message ----------------------------------------------

  inline CacheMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  CacheMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CacheMetadata& from);
  void MergeFrom(const CacheMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .content.proto.CacheRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::content::proto::CacheRequest& request() const;
  ::content::proto::CacheRequest* mutable_request();
  ::content::proto::CacheRequest* release_request();
  void set_allocated_request(::content::proto::CacheRequest* request);

  // required .content.proto.CacheResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::content::proto::CacheResponse& response() const;
  ::content::proto::CacheResponse* mutable_response();
  ::content::proto::CacheResponse* release_response();
  void set_allocated_response(::content::proto::CacheResponse* response);

  // optional int64 entry_time = 3;
  bool has_entry_time() const;
  void clear_entry_time();
  static const int kEntryTimeFieldNumber = 3;
  ::google::protobuf::int64 entry_time() const;
  void set_entry_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:content.proto.CacheMetadata)
 private:
  void set_has_request();
  void clear_has_request();
  void set_has_response();
  void clear_has_response();
  void set_has_entry_time();
  void clear_has_entry_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::content::proto::CacheRequest* request_;
  ::content::proto::CacheResponse* response_;
  ::google::protobuf::int64 entry_time_;
  friend struct protobuf_cache_5fstorage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CacheStorageIndex_Cache

// required string name = 1;
inline bool CacheStorageIndex_Cache::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheStorageIndex_Cache::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheStorageIndex_Cache::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheStorageIndex_Cache::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CacheStorageIndex_Cache::name() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.name)
  return name_.GetNoArena();
}
inline void CacheStorageIndex_Cache::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.name)
}
#if LANG_CXX11
inline void CacheStorageIndex_Cache::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CacheStorageIndex.Cache.name)
}
#endif
inline void CacheStorageIndex_Cache::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CacheStorageIndex.Cache.name)
}
inline void CacheStorageIndex_Cache::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheStorageIndex.Cache.name)
}
inline ::std::string* CacheStorageIndex_Cache::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.Cache.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheStorageIndex_Cache::release_name() {
  // @@protoc_insertion_point(field_release:content.proto.CacheStorageIndex.Cache.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheStorageIndex_Cache::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheStorageIndex.Cache.name)
}

// optional string cache_dir = 2;
inline bool CacheStorageIndex_Cache::has_cache_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheStorageIndex_Cache::set_has_cache_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheStorageIndex_Cache::clear_has_cache_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheStorageIndex_Cache::clear_cache_dir() {
  cache_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cache_dir();
}
inline const ::std::string& CacheStorageIndex_Cache::cache_dir() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.cache_dir)
  return cache_dir_.GetNoArena();
}
inline void CacheStorageIndex_Cache::set_cache_dir(const ::std::string& value) {
  set_has_cache_dir();
  cache_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.cache_dir)
}
#if LANG_CXX11
inline void CacheStorageIndex_Cache::set_cache_dir(::std::string&& value) {
  set_has_cache_dir();
  cache_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CacheStorageIndex.Cache.cache_dir)
}
#endif
inline void CacheStorageIndex_Cache::set_cache_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cache_dir();
  cache_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CacheStorageIndex.Cache.cache_dir)
}
inline void CacheStorageIndex_Cache::set_cache_dir(const char* value, size_t size) {
  set_has_cache_dir();
  cache_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheStorageIndex.Cache.cache_dir)
}
inline ::std::string* CacheStorageIndex_Cache::mutable_cache_dir() {
  set_has_cache_dir();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.Cache.cache_dir)
  return cache_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheStorageIndex_Cache::release_cache_dir() {
  // @@protoc_insertion_point(field_release:content.proto.CacheStorageIndex.Cache.cache_dir)
  clear_has_cache_dir();
  return cache_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheStorageIndex_Cache::set_allocated_cache_dir(::std::string* cache_dir) {
  if (cache_dir != NULL) {
    set_has_cache_dir();
  } else {
    clear_has_cache_dir();
  }
  cache_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cache_dir);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheStorageIndex.Cache.cache_dir)
}

// optional int64 size = 3;
inline bool CacheStorageIndex_Cache::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheStorageIndex_Cache::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheStorageIndex_Cache::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheStorageIndex_Cache::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 CacheStorageIndex_Cache::size() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.size)
  return size_;
}
inline void CacheStorageIndex_Cache::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.size)
}

// optional string padding_key = 4;
inline bool CacheStorageIndex_Cache::has_padding_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheStorageIndex_Cache::set_has_padding_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheStorageIndex_Cache::clear_has_padding_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheStorageIndex_Cache::clear_padding_key() {
  padding_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_padding_key();
}
inline const ::std::string& CacheStorageIndex_Cache::padding_key() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.padding_key)
  return padding_key_.GetNoArena();
}
inline void CacheStorageIndex_Cache::set_padding_key(const ::std::string& value) {
  set_has_padding_key();
  padding_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.padding_key)
}
#if LANG_CXX11
inline void CacheStorageIndex_Cache::set_padding_key(::std::string&& value) {
  set_has_padding_key();
  padding_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CacheStorageIndex.Cache.padding_key)
}
#endif
inline void CacheStorageIndex_Cache::set_padding_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_padding_key();
  padding_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CacheStorageIndex.Cache.padding_key)
}
inline void CacheStorageIndex_Cache::set_padding_key(const char* value, size_t size) {
  set_has_padding_key();
  padding_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheStorageIndex.Cache.padding_key)
}
inline ::std::string* CacheStorageIndex_Cache::mutable_padding_key() {
  set_has_padding_key();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.Cache.padding_key)
  return padding_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheStorageIndex_Cache::release_padding_key() {
  // @@protoc_insertion_point(field_release:content.proto.CacheStorageIndex.Cache.padding_key)
  clear_has_padding_key();
  return padding_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheStorageIndex_Cache::set_allocated_padding_key(::std::string* padding_key) {
  if (padding_key != NULL) {
    set_has_padding_key();
  } else {
    clear_has_padding_key();
  }
  padding_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), padding_key);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheStorageIndex.Cache.padding_key)
}

// optional int64 padding = 5;
inline bool CacheStorageIndex_Cache::has_padding() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CacheStorageIndex_Cache::set_has_padding() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CacheStorageIndex_Cache::clear_has_padding() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CacheStorageIndex_Cache::clear_padding() {
  padding_ = GOOGLE_LONGLONG(0);
  clear_has_padding();
}
inline ::google::protobuf::int64 CacheStorageIndex_Cache::padding() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.padding)
  return padding_;
}
inline void CacheStorageIndex_Cache::set_padding(::google::protobuf::int64 value) {
  set_has_padding();
  padding_ = value;
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.padding)
}

// optional int32 padding_version = 6;
inline bool CacheStorageIndex_Cache::has_padding_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CacheStorageIndex_Cache::set_has_padding_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CacheStorageIndex_Cache::clear_has_padding_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CacheStorageIndex_Cache::clear_padding_version() {
  padding_version_ = 0;
  clear_has_padding_version();
}
inline ::google::protobuf::int32 CacheStorageIndex_Cache::padding_version() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.padding_version)
  return padding_version_;
}
inline void CacheStorageIndex_Cache::set_padding_version(::google::protobuf::int32 value) {
  set_has_padding_version();
  padding_version_ = value;
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.padding_version)
}

// -------------------------------------------------------------------

// CacheStorageIndex

// repeated .content.proto.CacheStorageIndex.Cache cache = 1;
inline int CacheStorageIndex::cache_size() const {
  return cache_.size();
}
inline void CacheStorageIndex::clear_cache() {
  cache_.Clear();
}
inline const ::content::proto::CacheStorageIndex_Cache& CacheStorageIndex::cache(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.cache)
  return cache_.Get(index);
}
inline ::content::proto::CacheStorageIndex_Cache* CacheStorageIndex::mutable_cache(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.cache)
  return cache_.Mutable(index);
}
inline ::content::proto::CacheStorageIndex_Cache* CacheStorageIndex::add_cache() {
  // @@protoc_insertion_point(field_add:content.proto.CacheStorageIndex.cache)
  return cache_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::content::proto::CacheStorageIndex_Cache >*
CacheStorageIndex::mutable_cache() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CacheStorageIndex.cache)
  return &cache_;
}
inline const ::google::protobuf::RepeatedPtrField< ::content::proto::CacheStorageIndex_Cache >&
CacheStorageIndex::cache() const {
  // @@protoc_insertion_point(field_list:content.proto.CacheStorageIndex.cache)
  return cache_;
}

// optional string origin = 2;
inline bool CacheStorageIndex::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheStorageIndex::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheStorageIndex::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheStorageIndex::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin();
}
inline const ::std::string& CacheStorageIndex::origin() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.origin)
  return origin_.GetNoArena();
}
inline void CacheStorageIndex::set_origin(const ::std::string& value) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.origin)
}
#if LANG_CXX11
inline void CacheStorageIndex::set_origin(::std::string&& value) {
  set_has_origin();
  origin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CacheStorageIndex.origin)
}
#endif
inline void CacheStorageIndex::set_origin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CacheStorageIndex.origin)
}
inline void CacheStorageIndex::set_origin(const char* value, size_t size) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheStorageIndex.origin)
}
inline ::std::string* CacheStorageIndex::mutable_origin() {
  set_has_origin();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheStorageIndex::release_origin() {
  // @@protoc_insertion_point(field_release:content.proto.CacheStorageIndex.origin)
  clear_has_origin();
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheStorageIndex::set_allocated_origin(::std::string* origin) {
  if (origin != NULL) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheStorageIndex.origin)
}

// -------------------------------------------------------------------

// CacheHeaderMap

// required string name = 1;
inline bool CacheHeaderMap::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheHeaderMap::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheHeaderMap::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheHeaderMap::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CacheHeaderMap::name() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheHeaderMap.name)
  return name_.GetNoArena();
}
inline void CacheHeaderMap::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CacheHeaderMap.name)
}
#if LANG_CXX11
inline void CacheHeaderMap::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CacheHeaderMap.name)
}
#endif
inline void CacheHeaderMap::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CacheHeaderMap.name)
}
inline void CacheHeaderMap::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheHeaderMap.name)
}
inline ::std::string* CacheHeaderMap::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheHeaderMap.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheHeaderMap::release_name() {
  // @@protoc_insertion_point(field_release:content.proto.CacheHeaderMap.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheHeaderMap::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheHeaderMap.name)
}

// required string value = 2;
inline bool CacheHeaderMap::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheHeaderMap::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheHeaderMap::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheHeaderMap::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& CacheHeaderMap::value() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheHeaderMap.value)
  return value_.GetNoArena();
}
inline void CacheHeaderMap::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CacheHeaderMap.value)
}
#if LANG_CXX11
inline void CacheHeaderMap::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CacheHeaderMap.value)
}
#endif
inline void CacheHeaderMap::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CacheHeaderMap.value)
}
inline void CacheHeaderMap::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheHeaderMap.value)
}
inline ::std::string* CacheHeaderMap::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheHeaderMap.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheHeaderMap::release_value() {
  // @@protoc_insertion_point(field_release:content.proto.CacheHeaderMap.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheHeaderMap::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheHeaderMap.value)
}

// -------------------------------------------------------------------

// CacheRequest

// required string method = 1;
inline bool CacheRequest::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheRequest::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& CacheRequest::method() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheRequest.method)
  return method_.GetNoArena();
}
inline void CacheRequest::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CacheRequest.method)
}
#if LANG_CXX11
inline void CacheRequest::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CacheRequest.method)
}
#endif
inline void CacheRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CacheRequest.method)
}
inline void CacheRequest::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheRequest.method)
}
inline ::std::string* CacheRequest::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheRequest::release_method() {
  // @@protoc_insertion_point(field_release:content.proto.CacheRequest.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheRequest.method)
}

// repeated .content.proto.CacheHeaderMap headers = 2;
inline int CacheRequest::headers_size() const {
  return headers_.size();
}
inline void CacheRequest::clear_headers() {
  headers_.Clear();
}
inline const ::content::proto::CacheHeaderMap& CacheRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CacheRequest.headers)
  return headers_.Get(index);
}
inline ::content::proto::CacheHeaderMap* CacheRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CacheRequest.headers)
  return headers_.Mutable(index);
}
inline ::content::proto::CacheHeaderMap* CacheRequest::add_headers() {
  // @@protoc_insertion_point(field_add:content.proto.CacheRequest.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::content::proto::CacheHeaderMap >*
CacheRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CacheRequest.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::content::proto::CacheHeaderMap >&
CacheRequest::headers() const {
  // @@protoc_insertion_point(field_list:content.proto.CacheRequest.headers)
  return headers_;
}

// -------------------------------------------------------------------

// CacheResponse

// required int32 status_code = 1;
inline bool CacheResponse::has_status_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheResponse::set_has_status_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheResponse::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheResponse::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
inline ::google::protobuf::int32 CacheResponse::status_code() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.status_code)
  return status_code_;
}
inline void CacheResponse::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.status_code)
}

// required string status_text = 2;
inline bool CacheResponse::has_status_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheResponse::set_has_status_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheResponse::clear_has_status_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheResponse::clear_status_text() {
  status_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status_text();
}
inline const ::std::string& CacheResponse::status_text() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.status_text)
  return status_text_.GetNoArena();
}
inline void CacheResponse::set_status_text(const ::std::string& value) {
  set_has_status_text();
  status_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.status_text)
}
#if LANG_CXX11
inline void CacheResponse::set_status_text(::std::string&& value) {
  set_has_status_text();
  status_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CacheResponse.status_text)
}
#endif
inline void CacheResponse::set_status_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_status_text();
  status_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CacheResponse.status_text)
}
inline void CacheResponse::set_status_text(const char* value, size_t size) {
  set_has_status_text();
  status_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheResponse.status_text)
}
inline ::std::string* CacheResponse::mutable_status_text() {
  set_has_status_text();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.status_text)
  return status_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheResponse::release_status_text() {
  // @@protoc_insertion_point(field_release:content.proto.CacheResponse.status_text)
  clear_has_status_text();
  return status_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheResponse::set_allocated_status_text(::std::string* status_text) {
  if (status_text != NULL) {
    set_has_status_text();
  } else {
    clear_has_status_text();
  }
  status_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_text);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheResponse.status_text)
}

// required .content.proto.CacheResponse.ResponseType response_type = 3;
inline bool CacheResponse::has_response_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheResponse::set_has_response_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheResponse::clear_has_response_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheResponse::clear_response_type() {
  response_type_ = 0;
  clear_has_response_type();
}
inline ::content::proto::CacheResponse_ResponseType CacheResponse::response_type() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.response_type)
  return static_cast< ::content::proto::CacheResponse_ResponseType >(response_type_);
}
inline void CacheResponse::set_response_type(::content::proto::CacheResponse_ResponseType value) {
  assert(::content::proto::CacheResponse_ResponseType_IsValid(value));
  set_has_response_type();
  response_type_ = value;
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.response_type)
}

// repeated .content.proto.CacheHeaderMap headers = 4;
inline int CacheResponse::headers_size() const {
  return headers_.size();
}
inline void CacheResponse::clear_headers() {
  headers_.Clear();
}
inline const ::content::proto::CacheHeaderMap& CacheResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.headers)
  return headers_.Get(index);
}
inline ::content::proto::CacheHeaderMap* CacheResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.headers)
  return headers_.Mutable(index);
}
inline ::content::proto::CacheHeaderMap* CacheResponse::add_headers() {
  // @@protoc_insertion_point(field_add:content.proto.CacheResponse.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::content::proto::CacheHeaderMap >*
CacheResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CacheResponse.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::content::proto::CacheHeaderMap >&
CacheResponse::headers() const {
  // @@protoc_insertion_point(field_list:content.proto.CacheResponse.headers)
  return headers_;
}

// optional string url = 5 [deprecated = true];
inline bool CacheResponse::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheResponse::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheResponse::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CacheResponse::url() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.url)
  return url_.GetNoArena();
}
inline void CacheResponse::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.url)
}
#if LANG_CXX11
inline void CacheResponse::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CacheResponse.url)
}
#endif
inline void CacheResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CacheResponse.url)
}
inline void CacheResponse::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheResponse.url)
}
inline ::std::string* CacheResponse::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheResponse::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.CacheResponse.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheResponse::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheResponse.url)
}

// optional int64 response_time = 6;
inline bool CacheResponse::has_response_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CacheResponse::set_has_response_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CacheResponse::clear_has_response_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CacheResponse::clear_response_time() {
  response_time_ = GOOGLE_LONGLONG(0);
  clear_has_response_time();
}
inline ::google::protobuf::int64 CacheResponse::response_time() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.response_time)
  return response_time_;
}
inline void CacheResponse::set_response_time(::google::protobuf::int64 value) {
  set_has_response_time();
  response_time_ = value;
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.response_time)
}

// repeated string cors_exposed_header_names = 7;
inline int CacheResponse::cors_exposed_header_names_size() const {
  return cors_exposed_header_names_.size();
}
inline void CacheResponse::clear_cors_exposed_header_names() {
  cors_exposed_header_names_.Clear();
}
inline const ::std::string& CacheResponse::cors_exposed_header_names(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.cors_exposed_header_names)
  return cors_exposed_header_names_.Get(index);
}
inline ::std::string* CacheResponse::mutable_cors_exposed_header_names(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.cors_exposed_header_names)
  return cors_exposed_header_names_.Mutable(index);
}
inline void CacheResponse::set_cors_exposed_header_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.cors_exposed_header_names)
  cors_exposed_header_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CacheResponse::set_cors_exposed_header_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.cors_exposed_header_names)
  cors_exposed_header_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CacheResponse::set_cors_exposed_header_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cors_exposed_header_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:content.proto.CacheResponse.cors_exposed_header_names)
}
inline void CacheResponse::set_cors_exposed_header_names(int index, const char* value, size_t size) {
  cors_exposed_header_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheResponse.cors_exposed_header_names)
}
inline ::std::string* CacheResponse::add_cors_exposed_header_names() {
  // @@protoc_insertion_point(field_add_mutable:content.proto.CacheResponse.cors_exposed_header_names)
  return cors_exposed_header_names_.Add();
}
inline void CacheResponse::add_cors_exposed_header_names(const ::std::string& value) {
  cors_exposed_header_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:content.proto.CacheResponse.cors_exposed_header_names)
}
#if LANG_CXX11
inline void CacheResponse::add_cors_exposed_header_names(::std::string&& value) {
  cors_exposed_header_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:content.proto.CacheResponse.cors_exposed_header_names)
}
#endif
inline void CacheResponse::add_cors_exposed_header_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cors_exposed_header_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:content.proto.CacheResponse.cors_exposed_header_names)
}
inline void CacheResponse::add_cors_exposed_header_names(const char* value, size_t size) {
  cors_exposed_header_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:content.proto.CacheResponse.cors_exposed_header_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CacheResponse::cors_exposed_header_names() const {
  // @@protoc_insertion_point(field_list:content.proto.CacheResponse.cors_exposed_header_names)
  return cors_exposed_header_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CacheResponse::mutable_cors_exposed_header_names() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CacheResponse.cors_exposed_header_names)
  return &cors_exposed_header_names_;
}

// repeated string url_list = 8;
inline int CacheResponse::url_list_size() const {
  return url_list_.size();
}
inline void CacheResponse::clear_url_list() {
  url_list_.Clear();
}
inline const ::std::string& CacheResponse::url_list(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.url_list)
  return url_list_.Get(index);
}
inline ::std::string* CacheResponse::mutable_url_list(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.url_list)
  return url_list_.Mutable(index);
}
inline void CacheResponse::set_url_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.url_list)
  url_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CacheResponse::set_url_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.url_list)
  url_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CacheResponse::set_url_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:content.proto.CacheResponse.url_list)
}
inline void CacheResponse::set_url_list(int index, const char* value, size_t size) {
  url_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheResponse.url_list)
}
inline ::std::string* CacheResponse::add_url_list() {
  // @@protoc_insertion_point(field_add_mutable:content.proto.CacheResponse.url_list)
  return url_list_.Add();
}
inline void CacheResponse::add_url_list(const ::std::string& value) {
  url_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:content.proto.CacheResponse.url_list)
}
#if LANG_CXX11
inline void CacheResponse::add_url_list(::std::string&& value) {
  url_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:content.proto.CacheResponse.url_list)
}
#endif
inline void CacheResponse::add_url_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:content.proto.CacheResponse.url_list)
}
inline void CacheResponse::add_url_list(const char* value, size_t size) {
  url_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:content.proto.CacheResponse.url_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CacheResponse::url_list() const {
  // @@protoc_insertion_point(field_list:content.proto.CacheResponse.url_list)
  return url_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CacheResponse::mutable_url_list() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CacheResponse.url_list)
  return &url_list_;
}

// -------------------------------------------------------------------

// CacheMetadata

// required .content.proto.CacheRequest request = 1;
inline bool CacheMetadata::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheMetadata::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheMetadata::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheMetadata::clear_request() {
  if (request_ != NULL) request_->::content::proto::CacheRequest::Clear();
  clear_has_request();
}
inline const ::content::proto::CacheRequest& CacheMetadata::request() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheMetadata.request)
  return request_ != NULL ? *request_
                         : *::content::proto::CacheRequest::internal_default_instance();
}
inline ::content::proto::CacheRequest* CacheMetadata::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::content::proto::CacheRequest;
  }
  // @@protoc_insertion_point(field_mutable:content.proto.CacheMetadata.request)
  return request_;
}
inline ::content::proto::CacheRequest* CacheMetadata::release_request() {
  // @@protoc_insertion_point(field_release:content.proto.CacheMetadata.request)
  clear_has_request();
  ::content::proto::CacheRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void CacheMetadata::set_allocated_request(::content::proto::CacheRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheMetadata.request)
}

// required .content.proto.CacheResponse response = 2;
inline bool CacheMetadata::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheMetadata::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheMetadata::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheMetadata::clear_response() {
  if (response_ != NULL) response_->::content::proto::CacheResponse::Clear();
  clear_has_response();
}
inline const ::content::proto::CacheResponse& CacheMetadata::response() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheMetadata.response)
  return response_ != NULL ? *response_
                         : *::content::proto::CacheResponse::internal_default_instance();
}
inline ::content::proto::CacheResponse* CacheMetadata::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::content::proto::CacheResponse;
  }
  // @@protoc_insertion_point(field_mutable:content.proto.CacheMetadata.response)
  return response_;
}
inline ::content::proto::CacheResponse* CacheMetadata::release_response() {
  // @@protoc_insertion_point(field_release:content.proto.CacheMetadata.response)
  clear_has_response();
  ::content::proto::CacheResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline void CacheMetadata::set_allocated_response(::content::proto::CacheResponse* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheMetadata.response)
}

// optional int64 entry_time = 3;
inline bool CacheMetadata::has_entry_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheMetadata::set_has_entry_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheMetadata::clear_has_entry_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheMetadata::clear_entry_time() {
  entry_time_ = GOOGLE_LONGLONG(0);
  clear_has_entry_time();
}
inline ::google::protobuf::int64 CacheMetadata::entry_time() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheMetadata.entry_time)
  return entry_time_;
}
inline void CacheMetadata::set_entry_time(::google::protobuf::int64 value) {
  set_has_entry_time();
  entry_time_ = value;
  // @@protoc_insertion_point(field_set:content.proto.CacheMetadata.entry_time)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace content

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::content::proto::CacheResponse_ResponseType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cache_5fstorage_2eproto__INCLUDED
