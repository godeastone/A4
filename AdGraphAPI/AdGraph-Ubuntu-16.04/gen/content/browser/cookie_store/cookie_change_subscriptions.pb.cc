// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cookie_change_subscriptions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cookie_change_subscriptions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace content {
namespace proto {
class CookieChangeSubscriptionProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CookieChangeSubscriptionProto> {
} _CookieChangeSubscriptionProto_default_instance_;
class CookieChangeSubscriptionsProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CookieChangeSubscriptionsProto> {
} _CookieChangeSubscriptionsProto_default_instance_;

namespace protobuf_cookie_5fchange_5fsubscriptions_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _CookieChangeSubscriptionProto_default_instance_.Shutdown();
  _CookieChangeSubscriptionsProto_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CookieChangeSubscriptionProto_default_instance_.DefaultConstruct();
  _CookieChangeSubscriptionsProto_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_cookie_5fchange_5fsubscriptions_2eproto

bool CookieMatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CookieChangeSubscriptionProto::kUrlFieldNumber;
const int CookieChangeSubscriptionProto::kNameFieldNumber;
const int CookieChangeSubscriptionProto::kMatchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CookieChangeSubscriptionProto::CookieChangeSubscriptionProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cookie_5fchange_5fsubscriptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.CookieChangeSubscriptionProto)
}
CookieChangeSubscriptionProto::CookieChangeSubscriptionProto(const CookieChangeSubscriptionProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  match_type_ = from.match_type_;
  // @@protoc_insertion_point(copy_constructor:content.proto.CookieChangeSubscriptionProto)
}

void CookieChangeSubscriptionProto::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_type_ = 0;
}

CookieChangeSubscriptionProto::~CookieChangeSubscriptionProto() {
  // @@protoc_insertion_point(destructor:content.proto.CookieChangeSubscriptionProto)
  SharedDtor();
}

void CookieChangeSubscriptionProto::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CookieChangeSubscriptionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CookieChangeSubscriptionProto& CookieChangeSubscriptionProto::default_instance() {
  protobuf_cookie_5fchange_5fsubscriptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

CookieChangeSubscriptionProto* CookieChangeSubscriptionProto::New(::google::protobuf::Arena* arena) const {
  CookieChangeSubscriptionProto* n = new CookieChangeSubscriptionProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CookieChangeSubscriptionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CookieChangeSubscriptionProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  match_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CookieChangeSubscriptionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:content.proto.CookieChangeSubscriptionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.proto.CookieMatchType match_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::proto::CookieMatchType_IsValid(value)) {
            set_match_type(static_cast< ::content::proto::CookieMatchType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.CookieChangeSubscriptionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.CookieChangeSubscriptionProto)
  return false;
#undef DO_
}

void CookieChangeSubscriptionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.CookieChangeSubscriptionProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .content.proto.CookieMatchType match_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->match_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.CookieChangeSubscriptionProto)
}

size_t CookieChangeSubscriptionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CookieChangeSubscriptionProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .content.proto.CookieMatchType match_type = 3;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CookieChangeSubscriptionProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CookieChangeSubscriptionProto*>(&from));
}

void CookieChangeSubscriptionProto::MergeFrom(const CookieChangeSubscriptionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CookieChangeSubscriptionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      match_type_ = from.match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CookieChangeSubscriptionProto::CopyFrom(const CookieChangeSubscriptionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CookieChangeSubscriptionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CookieChangeSubscriptionProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CookieChangeSubscriptionProto::Swap(CookieChangeSubscriptionProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CookieChangeSubscriptionProto::InternalSwap(CookieChangeSubscriptionProto* other) {
  url_.Swap(&other->url_);
  name_.Swap(&other->name_);
  std::swap(match_type_, other->match_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CookieChangeSubscriptionProto::GetTypeName() const {
  return "content.proto.CookieChangeSubscriptionProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CookieChangeSubscriptionProto

// required string url = 1;
bool CookieChangeSubscriptionProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CookieChangeSubscriptionProto::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CookieChangeSubscriptionProto::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CookieChangeSubscriptionProto::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CookieChangeSubscriptionProto::url() const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionProto.url)
  return url_.GetNoArena();
}
void CookieChangeSubscriptionProto::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CookieChangeSubscriptionProto.url)
}
#if LANG_CXX11
void CookieChangeSubscriptionProto::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CookieChangeSubscriptionProto.url)
}
#endif
void CookieChangeSubscriptionProto::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CookieChangeSubscriptionProto.url)
}
void CookieChangeSubscriptionProto::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CookieChangeSubscriptionProto.url)
}
::std::string* CookieChangeSubscriptionProto::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:content.proto.CookieChangeSubscriptionProto.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CookieChangeSubscriptionProto::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.CookieChangeSubscriptionProto.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieChangeSubscriptionProto::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CookieChangeSubscriptionProto.url)
}

// optional string name = 2;
bool CookieChangeSubscriptionProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CookieChangeSubscriptionProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CookieChangeSubscriptionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CookieChangeSubscriptionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CookieChangeSubscriptionProto::name() const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionProto.name)
  return name_.GetNoArena();
}
void CookieChangeSubscriptionProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CookieChangeSubscriptionProto.name)
}
#if LANG_CXX11
void CookieChangeSubscriptionProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CookieChangeSubscriptionProto.name)
}
#endif
void CookieChangeSubscriptionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CookieChangeSubscriptionProto.name)
}
void CookieChangeSubscriptionProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CookieChangeSubscriptionProto.name)
}
::std::string* CookieChangeSubscriptionProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:content.proto.CookieChangeSubscriptionProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CookieChangeSubscriptionProto::release_name() {
  // @@protoc_insertion_point(field_release:content.proto.CookieChangeSubscriptionProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieChangeSubscriptionProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CookieChangeSubscriptionProto.name)
}

// optional .content.proto.CookieMatchType match_type = 3;
bool CookieChangeSubscriptionProto::has_match_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CookieChangeSubscriptionProto::set_has_match_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CookieChangeSubscriptionProto::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CookieChangeSubscriptionProto::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
::content::proto::CookieMatchType CookieChangeSubscriptionProto::match_type() const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionProto.match_type)
  return static_cast< ::content::proto::CookieMatchType >(match_type_);
}
void CookieChangeSubscriptionProto::set_match_type(::content::proto::CookieMatchType value) {
  assert(::content::proto::CookieMatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:content.proto.CookieChangeSubscriptionProto.match_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CookieChangeSubscriptionsProto::kSubscriptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CookieChangeSubscriptionsProto::CookieChangeSubscriptionsProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cookie_5fchange_5fsubscriptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.CookieChangeSubscriptionsProto)
}
CookieChangeSubscriptionsProto::CookieChangeSubscriptionsProto(const CookieChangeSubscriptionsProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      subscriptions_(from.subscriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:content.proto.CookieChangeSubscriptionsProto)
}

void CookieChangeSubscriptionsProto::SharedCtor() {
  _cached_size_ = 0;
}

CookieChangeSubscriptionsProto::~CookieChangeSubscriptionsProto() {
  // @@protoc_insertion_point(destructor:content.proto.CookieChangeSubscriptionsProto)
  SharedDtor();
}

void CookieChangeSubscriptionsProto::SharedDtor() {
}

void CookieChangeSubscriptionsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CookieChangeSubscriptionsProto& CookieChangeSubscriptionsProto::default_instance() {
  protobuf_cookie_5fchange_5fsubscriptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

CookieChangeSubscriptionsProto* CookieChangeSubscriptionsProto::New(::google::protobuf::Arena* arena) const {
  CookieChangeSubscriptionsProto* n = new CookieChangeSubscriptionsProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CookieChangeSubscriptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CookieChangeSubscriptionsProto)
  subscriptions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CookieChangeSubscriptionsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:content.proto.CookieChangeSubscriptionsProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.CookieChangeSubscriptionsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.CookieChangeSubscriptionsProto)
  return false;
#undef DO_
}

void CookieChangeSubscriptionsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.CookieChangeSubscriptionsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscriptions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->subscriptions(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.CookieChangeSubscriptionsProto)
}

size_t CookieChangeSubscriptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CookieChangeSubscriptionsProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->subscriptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscriptions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CookieChangeSubscriptionsProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CookieChangeSubscriptionsProto*>(&from));
}

void CookieChangeSubscriptionsProto::MergeFrom(const CookieChangeSubscriptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CookieChangeSubscriptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
}

void CookieChangeSubscriptionsProto::CopyFrom(const CookieChangeSubscriptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CookieChangeSubscriptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CookieChangeSubscriptionsProto::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->subscriptions())) return false;
  return true;
}

void CookieChangeSubscriptionsProto::Swap(CookieChangeSubscriptionsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CookieChangeSubscriptionsProto::InternalSwap(CookieChangeSubscriptionsProto* other) {
  subscriptions_.InternalSwap(&other->subscriptions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CookieChangeSubscriptionsProto::GetTypeName() const {
  return "content.proto.CookieChangeSubscriptionsProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CookieChangeSubscriptionsProto

// repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
int CookieChangeSubscriptionsProto::subscriptions_size() const {
  return subscriptions_.size();
}
void CookieChangeSubscriptionsProto::clear_subscriptions() {
  subscriptions_.Clear();
}
const ::content::proto::CookieChangeSubscriptionProto& CookieChangeSubscriptionsProto::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_.Get(index);
}
::content::proto::CookieChangeSubscriptionProto* CookieChangeSubscriptionsProto::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_.Mutable(index);
}
::content::proto::CookieChangeSubscriptionProto* CookieChangeSubscriptionsProto::add_subscriptions() {
  // @@protoc_insertion_point(field_add:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_.Add();
}
::google::protobuf::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto >*
CookieChangeSubscriptionsProto::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return &subscriptions_;
}
const ::google::protobuf::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto >&
CookieChangeSubscriptionsProto::subscriptions() const {
  // @@protoc_insertion_point(field_list:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace content

// @@protoc_insertion_point(global_scope)
