// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cookie_change_subscriptions.proto

#ifndef PROTOBUF_cookie_5fchange_5fsubscriptions_2eproto__INCLUDED
#define PROTOBUF_cookie_5fchange_5fsubscriptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace content {
namespace proto {
class CookieChangeSubscriptionProto;
class CookieChangeSubscriptionProtoDefaultTypeInternal;
extern CookieChangeSubscriptionProtoDefaultTypeInternal _CookieChangeSubscriptionProto_default_instance_;
class CookieChangeSubscriptionsProto;
class CookieChangeSubscriptionsProtoDefaultTypeInternal;
extern CookieChangeSubscriptionsProtoDefaultTypeInternal _CookieChangeSubscriptionsProto_default_instance_;
}  // namespace proto
}  // namespace content

namespace content {
namespace proto {

namespace protobuf_cookie_5fchange_5fsubscriptions_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cookie_5fchange_5fsubscriptions_2eproto

enum CookieMatchType {
  EQUALS = 0,
  STARTS_WITH = 1
};
bool CookieMatchType_IsValid(int value);
const CookieMatchType CookieMatchType_MIN = EQUALS;
const CookieMatchType CookieMatchType_MAX = STARTS_WITH;
const int CookieMatchType_ARRAYSIZE = CookieMatchType_MAX + 1;

// ===================================================================

class CookieChangeSubscriptionProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CookieChangeSubscriptionProto) */ {
 public:
  CookieChangeSubscriptionProto();
  virtual ~CookieChangeSubscriptionProto();

  CookieChangeSubscriptionProto(const CookieChangeSubscriptionProto& from);

  inline CookieChangeSubscriptionProto& operator=(const CookieChangeSubscriptionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CookieChangeSubscriptionProto& default_instance();

  static inline const CookieChangeSubscriptionProto* internal_default_instance() {
    return reinterpret_cast<const CookieChangeSubscriptionProto*>(
               &_CookieChangeSubscriptionProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CookieChangeSubscriptionProto* other);

  // implements Message ----------------------------------------------

  inline CookieChangeSubscriptionProto* New() const PROTOBUF_FINAL { return New(NULL); }

  CookieChangeSubscriptionProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CookieChangeSubscriptionProto& from);
  void MergeFrom(const CookieChangeSubscriptionProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CookieChangeSubscriptionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .content.proto.CookieMatchType match_type = 3;
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 3;
  ::content::proto::CookieMatchType match_type() const;
  void set_match_type(::content::proto::CookieMatchType value);

  // @@protoc_insertion_point(class_scope:content.proto.CookieChangeSubscriptionProto)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_name();
  void clear_has_name();
  void set_has_match_type();
  void clear_has_match_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int match_type_;
  friend struct protobuf_cookie_5fchange_5fsubscriptions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CookieChangeSubscriptionsProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CookieChangeSubscriptionsProto) */ {
 public:
  CookieChangeSubscriptionsProto();
  virtual ~CookieChangeSubscriptionsProto();

  CookieChangeSubscriptionsProto(const CookieChangeSubscriptionsProto& from);

  inline CookieChangeSubscriptionsProto& operator=(const CookieChangeSubscriptionsProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CookieChangeSubscriptionsProto& default_instance();

  static inline const CookieChangeSubscriptionsProto* internal_default_instance() {
    return reinterpret_cast<const CookieChangeSubscriptionsProto*>(
               &_CookieChangeSubscriptionsProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CookieChangeSubscriptionsProto* other);

  // implements Message ----------------------------------------------

  inline CookieChangeSubscriptionsProto* New() const PROTOBUF_FINAL { return New(NULL); }

  CookieChangeSubscriptionsProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CookieChangeSubscriptionsProto& from);
  void MergeFrom(const CookieChangeSubscriptionsProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CookieChangeSubscriptionsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
  int subscriptions_size() const;
  void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  const ::content::proto::CookieChangeSubscriptionProto& subscriptions(int index) const;
  ::content::proto::CookieChangeSubscriptionProto* mutable_subscriptions(int index);
  ::content::proto::CookieChangeSubscriptionProto* add_subscriptions();
  ::google::protobuf::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto >*
      mutable_subscriptions();
  const ::google::protobuf::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto >&
      subscriptions() const;

  // @@protoc_insertion_point(class_scope:content.proto.CookieChangeSubscriptionsProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto > subscriptions_;
  friend struct protobuf_cookie_5fchange_5fsubscriptions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CookieChangeSubscriptionProto

// required string url = 1;
inline bool CookieChangeSubscriptionProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CookieChangeSubscriptionProto::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CookieChangeSubscriptionProto::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CookieChangeSubscriptionProto::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CookieChangeSubscriptionProto::url() const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionProto.url)
  return url_.GetNoArena();
}
inline void CookieChangeSubscriptionProto::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CookieChangeSubscriptionProto.url)
}
#if LANG_CXX11
inline void CookieChangeSubscriptionProto::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CookieChangeSubscriptionProto.url)
}
#endif
inline void CookieChangeSubscriptionProto::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CookieChangeSubscriptionProto.url)
}
inline void CookieChangeSubscriptionProto::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CookieChangeSubscriptionProto.url)
}
inline ::std::string* CookieChangeSubscriptionProto::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:content.proto.CookieChangeSubscriptionProto.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookieChangeSubscriptionProto::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.CookieChangeSubscriptionProto.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieChangeSubscriptionProto::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CookieChangeSubscriptionProto.url)
}

// optional string name = 2;
inline bool CookieChangeSubscriptionProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CookieChangeSubscriptionProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CookieChangeSubscriptionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CookieChangeSubscriptionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CookieChangeSubscriptionProto::name() const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionProto.name)
  return name_.GetNoArena();
}
inline void CookieChangeSubscriptionProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CookieChangeSubscriptionProto.name)
}
#if LANG_CXX11
inline void CookieChangeSubscriptionProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CookieChangeSubscriptionProto.name)
}
#endif
inline void CookieChangeSubscriptionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CookieChangeSubscriptionProto.name)
}
inline void CookieChangeSubscriptionProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CookieChangeSubscriptionProto.name)
}
inline ::std::string* CookieChangeSubscriptionProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:content.proto.CookieChangeSubscriptionProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookieChangeSubscriptionProto::release_name() {
  // @@protoc_insertion_point(field_release:content.proto.CookieChangeSubscriptionProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieChangeSubscriptionProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CookieChangeSubscriptionProto.name)
}

// optional .content.proto.CookieMatchType match_type = 3;
inline bool CookieChangeSubscriptionProto::has_match_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CookieChangeSubscriptionProto::set_has_match_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CookieChangeSubscriptionProto::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CookieChangeSubscriptionProto::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::content::proto::CookieMatchType CookieChangeSubscriptionProto::match_type() const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionProto.match_type)
  return static_cast< ::content::proto::CookieMatchType >(match_type_);
}
inline void CookieChangeSubscriptionProto::set_match_type(::content::proto::CookieMatchType value) {
  assert(::content::proto::CookieMatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:content.proto.CookieChangeSubscriptionProto.match_type)
}

// -------------------------------------------------------------------

// CookieChangeSubscriptionsProto

// repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
inline int CookieChangeSubscriptionsProto::subscriptions_size() const {
  return subscriptions_.size();
}
inline void CookieChangeSubscriptionsProto::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::content::proto::CookieChangeSubscriptionProto& CookieChangeSubscriptionsProto::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_.Get(index);
}
inline ::content::proto::CookieChangeSubscriptionProto* CookieChangeSubscriptionsProto::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::content::proto::CookieChangeSubscriptionProto* CookieChangeSubscriptionsProto::add_subscriptions() {
  // @@protoc_insertion_point(field_add:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto >*
CookieChangeSubscriptionsProto::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return &subscriptions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto >&
CookieChangeSubscriptionsProto::subscriptions() const {
  // @@protoc_insertion_point(field_list:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace content

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::content::proto::CookieMatchType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cookie_5fchange_5fsubscriptions_2eproto__INCLUDED
