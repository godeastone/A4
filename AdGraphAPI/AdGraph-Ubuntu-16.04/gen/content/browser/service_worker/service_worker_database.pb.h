// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_worker_database.proto

#ifndef PROTOBUF_service_5fworker_5fdatabase_2eproto__INCLUDED
#define PROTOBUF_service_5fworker_5fdatabase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace content {
class ServiceWorkerNavigationPreloadState;
class ServiceWorkerNavigationPreloadStateDefaultTypeInternal;
extern ServiceWorkerNavigationPreloadStateDefaultTypeInternal _ServiceWorkerNavigationPreloadState_default_instance_;
class ServiceWorkerOriginTrialFeature;
class ServiceWorkerOriginTrialFeatureDefaultTypeInternal;
extern ServiceWorkerOriginTrialFeatureDefaultTypeInternal _ServiceWorkerOriginTrialFeature_default_instance_;
class ServiceWorkerOriginTrialInfo;
class ServiceWorkerOriginTrialInfoDefaultTypeInternal;
extern ServiceWorkerOriginTrialInfoDefaultTypeInternal _ServiceWorkerOriginTrialInfo_default_instance_;
class ServiceWorkerRegistrationData;
class ServiceWorkerRegistrationDataDefaultTypeInternal;
extern ServiceWorkerRegistrationDataDefaultTypeInternal _ServiceWorkerRegistrationData_default_instance_;
class ServiceWorkerResourceRecord;
class ServiceWorkerResourceRecordDefaultTypeInternal;
extern ServiceWorkerResourceRecordDefaultTypeInternal _ServiceWorkerResourceRecord_default_instance_;
}  // namespace content

namespace content {

namespace protobuf_service_5fworker_5fdatabase_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_service_5fworker_5fdatabase_2eproto

enum ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType {
  ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IMPORTS = 0,
  ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ALL = 1,
  ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_NONE = 2
};
bool ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(int value);
const ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MIN = ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IMPORTS;
const ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MAX = ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_NONE;
const int ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_ARRAYSIZE = ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MAX + 1;

// ===================================================================

class ServiceWorkerOriginTrialFeature : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.ServiceWorkerOriginTrialFeature) */ {
 public:
  ServiceWorkerOriginTrialFeature();
  virtual ~ServiceWorkerOriginTrialFeature();

  ServiceWorkerOriginTrialFeature(const ServiceWorkerOriginTrialFeature& from);

  inline ServiceWorkerOriginTrialFeature& operator=(const ServiceWorkerOriginTrialFeature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerOriginTrialFeature& default_instance();

  static inline const ServiceWorkerOriginTrialFeature* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerOriginTrialFeature*>(
               &_ServiceWorkerOriginTrialFeature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ServiceWorkerOriginTrialFeature* other);

  // implements Message ----------------------------------------------

  inline ServiceWorkerOriginTrialFeature* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceWorkerOriginTrialFeature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServiceWorkerOriginTrialFeature& from);
  void MergeFrom(const ServiceWorkerOriginTrialFeature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerOriginTrialFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tokens = 2;
  int tokens_size() const;
  void clear_tokens();
  static const int kTokensFieldNumber = 2;
  const ::std::string& tokens(int index) const;
  ::std::string* mutable_tokens(int index);
  void set_tokens(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tokens(int index, ::std::string&& value);
  #endif
  void set_tokens(int index, const char* value);
  void set_tokens(int index, const char* value, size_t size);
  ::std::string* add_tokens();
  void add_tokens(const ::std::string& value);
  #if LANG_CXX11
  void add_tokens(::std::string&& value);
  #endif
  void add_tokens(const char* value);
  void add_tokens(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tokens() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tokens();

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerOriginTrialFeature)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tokens_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct protobuf_service_5fworker_5fdatabase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceWorkerOriginTrialInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.ServiceWorkerOriginTrialInfo) */ {
 public:
  ServiceWorkerOriginTrialInfo();
  virtual ~ServiceWorkerOriginTrialInfo();

  ServiceWorkerOriginTrialInfo(const ServiceWorkerOriginTrialInfo& from);

  inline ServiceWorkerOriginTrialInfo& operator=(const ServiceWorkerOriginTrialInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerOriginTrialInfo& default_instance();

  static inline const ServiceWorkerOriginTrialInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerOriginTrialInfo*>(
               &_ServiceWorkerOriginTrialInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ServiceWorkerOriginTrialInfo* other);

  // implements Message ----------------------------------------------

  inline ServiceWorkerOriginTrialInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceWorkerOriginTrialInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServiceWorkerOriginTrialInfo& from);
  void MergeFrom(const ServiceWorkerOriginTrialInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerOriginTrialInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 1;
  const ::content::ServiceWorkerOriginTrialFeature& features(int index) const;
  ::content::ServiceWorkerOriginTrialFeature* mutable_features(int index);
  ::content::ServiceWorkerOriginTrialFeature* add_features();
  ::google::protobuf::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature >&
      features() const;

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerOriginTrialInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature > features_;
  friend struct protobuf_service_5fworker_5fdatabase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceWorkerNavigationPreloadState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.ServiceWorkerNavigationPreloadState) */ {
 public:
  ServiceWorkerNavigationPreloadState();
  virtual ~ServiceWorkerNavigationPreloadState();

  ServiceWorkerNavigationPreloadState(const ServiceWorkerNavigationPreloadState& from);

  inline ServiceWorkerNavigationPreloadState& operator=(const ServiceWorkerNavigationPreloadState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerNavigationPreloadState& default_instance();

  static inline const ServiceWorkerNavigationPreloadState* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerNavigationPreloadState*>(
               &_ServiceWorkerNavigationPreloadState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ServiceWorkerNavigationPreloadState* other);

  // implements Message ----------------------------------------------

  inline ServiceWorkerNavigationPreloadState* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceWorkerNavigationPreloadState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServiceWorkerNavigationPreloadState& from);
  void MergeFrom(const ServiceWorkerNavigationPreloadState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerNavigationPreloadState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  const ::std::string& header() const;
  void set_header(const ::std::string& value);
  #if LANG_CXX11
  void set_header(::std::string&& value);
  #endif
  void set_header(const char* value);
  void set_header(const char* value, size_t size);
  ::std::string* mutable_header();
  ::std::string* release_header();
  void set_allocated_header(::std::string* header);

  // required bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerNavigationPreloadState)
 private:
  void set_has_enabled();
  void clear_has_enabled();
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr header_;
  bool enabled_;
  friend struct protobuf_service_5fworker_5fdatabase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceWorkerRegistrationData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.ServiceWorkerRegistrationData) */ {
 public:
  ServiceWorkerRegistrationData();
  virtual ~ServiceWorkerRegistrationData();

  ServiceWorkerRegistrationData(const ServiceWorkerRegistrationData& from);

  inline ServiceWorkerRegistrationData& operator=(const ServiceWorkerRegistrationData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerRegistrationData& default_instance();

  static inline const ServiceWorkerRegistrationData* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerRegistrationData*>(
               &_ServiceWorkerRegistrationData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ServiceWorkerRegistrationData* other);

  // implements Message ----------------------------------------------

  inline ServiceWorkerRegistrationData* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceWorkerRegistrationData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServiceWorkerRegistrationData& from);
  void MergeFrom(const ServiceWorkerRegistrationData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerRegistrationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerUpdateViaCacheType;
  static const ServiceWorkerUpdateViaCacheType IMPORTS =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IMPORTS;
  static const ServiceWorkerUpdateViaCacheType ALL =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ALL;
  static const ServiceWorkerUpdateViaCacheType NONE =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_NONE;
  static inline bool ServiceWorkerUpdateViaCacheType_IsValid(int value) {
    return ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(value);
  }
  static const ServiceWorkerUpdateViaCacheType ServiceWorkerUpdateViaCacheType_MIN =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MIN;
  static const ServiceWorkerUpdateViaCacheType ServiceWorkerUpdateViaCacheType_MAX =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MAX;
  static const int ServiceWorkerUpdateViaCacheType_ARRAYSIZE =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated uint32 used_features = 13;
  int used_features_size() const;
  void clear_used_features();
  static const int kUsedFeaturesFieldNumber = 13;
  ::google::protobuf::uint32 used_features(int index) const;
  void set_used_features(int index, ::google::protobuf::uint32 value);
  void add_used_features(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      used_features() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_used_features();

  // required string scope_url = 2;
  bool has_scope_url() const;
  void clear_scope_url();
  static const int kScopeUrlFieldNumber = 2;
  const ::std::string& scope_url() const;
  void set_scope_url(const ::std::string& value);
  #if LANG_CXX11
  void set_scope_url(::std::string&& value);
  #endif
  void set_scope_url(const char* value);
  void set_scope_url(const char* value, size_t size);
  ::std::string* mutable_scope_url();
  ::std::string* release_scope_url();
  void set_allocated_scope_url(::std::string* scope_url);

  // required string script_url = 3;
  bool has_script_url() const;
  void clear_script_url();
  static const int kScriptUrlFieldNumber = 3;
  const ::std::string& script_url() const;
  void set_script_url(const ::std::string& value);
  #if LANG_CXX11
  void set_script_url(::std::string&& value);
  #endif
  void set_script_url(const char* value);
  void set_script_url(const char* value, size_t size);
  ::std::string* mutable_script_url();
  ::std::string* release_script_url();
  void set_allocated_script_url(::std::string* script_url);

  // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
  bool has_origin_trial_tokens() const;
  void clear_origin_trial_tokens();
  static const int kOriginTrialTokensFieldNumber = 11;
  const ::content::ServiceWorkerOriginTrialInfo& origin_trial_tokens() const;
  ::content::ServiceWorkerOriginTrialInfo* mutable_origin_trial_tokens();
  ::content::ServiceWorkerOriginTrialInfo* release_origin_trial_tokens();
  void set_allocated_origin_trial_tokens(::content::ServiceWorkerOriginTrialInfo* origin_trial_tokens);

  // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
  bool has_navigation_preload_state() const;
  void clear_navigation_preload_state();
  static const int kNavigationPreloadStateFieldNumber = 12;
  const ::content::ServiceWorkerNavigationPreloadState& navigation_preload_state() const;
  ::content::ServiceWorkerNavigationPreloadState* mutable_navigation_preload_state();
  ::content::ServiceWorkerNavigationPreloadState* release_navigation_preload_state();
  void set_allocated_navigation_preload_state(::content::ServiceWorkerNavigationPreloadState* navigation_preload_state);

  // required int64 registration_id = 1;
  bool has_registration_id() const;
  void clear_registration_id();
  static const int kRegistrationIdFieldNumber = 1;
  ::google::protobuf::int64 registration_id() const;
  void set_registration_id(::google::protobuf::int64 value);

  // required int64 version_id = 4;
  bool has_version_id() const;
  void clear_version_id();
  static const int kVersionIdFieldNumber = 4;
  ::google::protobuf::int64 version_id() const;
  void set_version_id(::google::protobuf::int64 value);

  // required int64 last_update_check_time = 7;
  bool has_last_update_check_time() const;
  void clear_last_update_check_time();
  static const int kLastUpdateCheckTimeFieldNumber = 7;
  ::google::protobuf::int64 last_update_check_time() const;
  void set_last_update_check_time(::google::protobuf::int64 value);

  // optional uint64 resources_total_size_bytes = 8;
  bool has_resources_total_size_bytes() const;
  void clear_resources_total_size_bytes();
  static const int kResourcesTotalSizeBytesFieldNumber = 8;
  ::google::protobuf::uint64 resources_total_size_bytes() const;
  void set_resources_total_size_bytes(::google::protobuf::uint64 value);

  // required bool is_active = 5;
  bool has_is_active() const;
  void clear_is_active();
  static const int kIsActiveFieldNumber = 5;
  bool is_active() const;
  void set_is_active(bool value);

  // required bool has_fetch_handler = 6;
  bool has_has_fetch_handler() const;
  void clear_has_fetch_handler();
  static const int kHasFetchHandlerFieldNumber = 6;
  bool has_fetch_handler() const;
  void set_has_fetch_handler(bool value);

  // optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
  bool has_update_via_cache() const;
  void clear_update_via_cache();
  static const int kUpdateViaCacheFieldNumber = 14;
  ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType update_via_cache() const;
  void set_update_via_cache(::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value);

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerRegistrationData)
 private:
  void set_has_registration_id();
  void clear_has_registration_id();
  void set_has_scope_url();
  void clear_has_scope_url();
  void set_has_script_url();
  void clear_has_script_url();
  void set_has_version_id();
  void clear_has_version_id();
  void set_has_is_active();
  void clear_has_is_active();
  void set_has_has_fetch_handler();
  void clear_has_has_fetch_handler();
  void set_has_last_update_check_time();
  void clear_has_last_update_check_time();
  void set_has_resources_total_size_bytes();
  void clear_has_resources_total_size_bytes();
  void set_has_origin_trial_tokens();
  void clear_has_origin_trial_tokens();
  void set_has_navigation_preload_state();
  void clear_has_navigation_preload_state();
  void set_has_update_via_cache();
  void clear_has_update_via_cache();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > used_features_;
  ::google::protobuf::internal::ArenaStringPtr scope_url_;
  ::google::protobuf::internal::ArenaStringPtr script_url_;
  ::content::ServiceWorkerOriginTrialInfo* origin_trial_tokens_;
  ::content::ServiceWorkerNavigationPreloadState* navigation_preload_state_;
  ::google::protobuf::int64 registration_id_;
  ::google::protobuf::int64 version_id_;
  ::google::protobuf::int64 last_update_check_time_;
  ::google::protobuf::uint64 resources_total_size_bytes_;
  bool is_active_;
  bool has_fetch_handler_;
  int update_via_cache_;
  friend struct protobuf_service_5fworker_5fdatabase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceWorkerResourceRecord : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:content.ServiceWorkerResourceRecord) */ {
 public:
  ServiceWorkerResourceRecord();
  virtual ~ServiceWorkerResourceRecord();

  ServiceWorkerResourceRecord(const ServiceWorkerResourceRecord& from);

  inline ServiceWorkerResourceRecord& operator=(const ServiceWorkerResourceRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerResourceRecord& default_instance();

  static inline const ServiceWorkerResourceRecord* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerResourceRecord*>(
               &_ServiceWorkerResourceRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ServiceWorkerResourceRecord* other);

  // implements Message ----------------------------------------------

  inline ServiceWorkerResourceRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceWorkerResourceRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServiceWorkerResourceRecord& from);
  void MergeFrom(const ServiceWorkerResourceRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerResourceRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required int64 resource_id = 1;
  bool has_resource_id() const;
  void clear_resource_id();
  static const int kResourceIdFieldNumber = 1;
  ::google::protobuf::int64 resource_id() const;
  void set_resource_id(::google::protobuf::int64 value);

  // optional uint64 size_bytes = 3;
  bool has_size_bytes() const;
  void clear_size_bytes();
  static const int kSizeBytesFieldNumber = 3;
  ::google::protobuf::uint64 size_bytes() const;
  void set_size_bytes(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerResourceRecord)
 private:
  void set_has_resource_id();
  void clear_has_resource_id();
  void set_has_url();
  void clear_has_url();
  void set_has_size_bytes();
  void clear_has_size_bytes();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int64 resource_id_;
  ::google::protobuf::uint64 size_bytes_;
  friend struct protobuf_service_5fworker_5fdatabase_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerOriginTrialFeature

// required string name = 1;
inline bool ServiceWorkerOriginTrialFeature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerOriginTrialFeature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceWorkerOriginTrialFeature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceWorkerOriginTrialFeature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ServiceWorkerOriginTrialFeature::name() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialFeature.name)
  return name_.GetNoArena();
}
inline void ServiceWorkerOriginTrialFeature::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.name)
}
#if LANG_CXX11
inline void ServiceWorkerOriginTrialFeature::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerOriginTrialFeature.name)
}
#endif
inline void ServiceWorkerOriginTrialFeature::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerOriginTrialFeature.name)
}
inline void ServiceWorkerOriginTrialFeature::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerOriginTrialFeature.name)
}
inline ::std::string* ServiceWorkerOriginTrialFeature::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialFeature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceWorkerOriginTrialFeature::release_name() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerOriginTrialFeature.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerOriginTrialFeature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerOriginTrialFeature.name)
}

// repeated string tokens = 2;
inline int ServiceWorkerOriginTrialFeature::tokens_size() const {
  return tokens_.size();
}
inline void ServiceWorkerOriginTrialFeature::clear_tokens() {
  tokens_.Clear();
}
inline const ::std::string& ServiceWorkerOriginTrialFeature::tokens(int index) const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_.Get(index);
}
inline ::std::string* ServiceWorkerOriginTrialFeature::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_.Mutable(index);
}
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.tokens)
  tokens_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.tokens)
  tokens_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, const char* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerOriginTrialFeature.tokens)
}
inline ::std::string* ServiceWorkerOriginTrialFeature::add_tokens() {
  // @@protoc_insertion_point(field_add_mutable:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_.Add();
}
inline void ServiceWorkerOriginTrialFeature::add_tokens(const ::std::string& value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialFeature.tokens)
}
#if LANG_CXX11
inline void ServiceWorkerOriginTrialFeature::add_tokens(::std::string&& value) {
  tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialFeature.tokens)
}
#endif
inline void ServiceWorkerOriginTrialFeature::add_tokens(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:content.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::add_tokens(const char* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:content.ServiceWorkerOriginTrialFeature.tokens)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceWorkerOriginTrialFeature::tokens() const {
  // @@protoc_insertion_point(field_list:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceWorkerOriginTrialFeature::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerOriginTrialFeature.tokens)
  return &tokens_;
}

// -------------------------------------------------------------------

// ServiceWorkerOriginTrialInfo

// repeated .content.ServiceWorkerOriginTrialFeature features = 1;
inline int ServiceWorkerOriginTrialInfo::features_size() const {
  return features_.size();
}
inline void ServiceWorkerOriginTrialInfo::clear_features() {
  features_.Clear();
}
inline const ::content::ServiceWorkerOriginTrialFeature& ServiceWorkerOriginTrialInfo::features(int index) const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialInfo.features)
  return features_.Get(index);
}
inline ::content::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialInfo.features)
  return features_.Mutable(index);
}
inline ::content::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::add_features() {
  // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialInfo.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature >*
ServiceWorkerOriginTrialInfo::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerOriginTrialInfo.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature >&
ServiceWorkerOriginTrialInfo::features() const {
  // @@protoc_insertion_point(field_list:content.ServiceWorkerOriginTrialInfo.features)
  return features_;
}

// -------------------------------------------------------------------

// ServiceWorkerNavigationPreloadState

// required bool enabled = 1;
inline bool ServiceWorkerNavigationPreloadState::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWorkerNavigationPreloadState::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceWorkerNavigationPreloadState::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceWorkerNavigationPreloadState::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool ServiceWorkerNavigationPreloadState::enabled() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerNavigationPreloadState.enabled)
  return enabled_;
}
inline void ServiceWorkerNavigationPreloadState::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerNavigationPreloadState.enabled)
}

// optional string header = 2;
inline bool ServiceWorkerNavigationPreloadState::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerNavigationPreloadState::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceWorkerNavigationPreloadState::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceWorkerNavigationPreloadState::clear_header() {
  header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header();
}
inline const ::std::string& ServiceWorkerNavigationPreloadState::header() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerNavigationPreloadState.header)
  return header_.GetNoArena();
}
inline void ServiceWorkerNavigationPreloadState::set_header(const ::std::string& value) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerNavigationPreloadState.header)
}
#if LANG_CXX11
inline void ServiceWorkerNavigationPreloadState::set_header(::std::string&& value) {
  set_has_header();
  header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerNavigationPreloadState.header)
}
#endif
inline void ServiceWorkerNavigationPreloadState::set_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerNavigationPreloadState.header)
}
inline void ServiceWorkerNavigationPreloadState::set_header(const char* value, size_t size) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerNavigationPreloadState.header)
}
inline ::std::string* ServiceWorkerNavigationPreloadState::mutable_header() {
  set_has_header();
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerNavigationPreloadState.header)
  return header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceWorkerNavigationPreloadState::release_header() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerNavigationPreloadState.header)
  clear_has_header();
  return header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerNavigationPreloadState::set_allocated_header(::std::string* header) {
  if (header != NULL) {
    set_has_header();
  } else {
    clear_has_header();
  }
  header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerNavigationPreloadState.header)
}

// -------------------------------------------------------------------

// ServiceWorkerRegistrationData

// required int64 registration_id = 1;
inline bool ServiceWorkerRegistrationData::has_registration_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_registration_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceWorkerRegistrationData::clear_has_registration_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceWorkerRegistrationData::clear_registration_id() {
  registration_id_ = GOOGLE_LONGLONG(0);
  clear_has_registration_id();
}
inline ::google::protobuf::int64 ServiceWorkerRegistrationData::registration_id() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.registration_id)
  return registration_id_;
}
inline void ServiceWorkerRegistrationData::set_registration_id(::google::protobuf::int64 value) {
  set_has_registration_id();
  registration_id_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.registration_id)
}

// required string scope_url = 2;
inline bool ServiceWorkerRegistrationData::has_scope_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_scope_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceWorkerRegistrationData::clear_has_scope_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceWorkerRegistrationData::clear_scope_url() {
  scope_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scope_url();
}
inline const ::std::string& ServiceWorkerRegistrationData::scope_url() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.scope_url)
  return scope_url_.GetNoArena();
}
inline void ServiceWorkerRegistrationData::set_scope_url(const ::std::string& value) {
  set_has_scope_url();
  scope_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.scope_url)
}
#if LANG_CXX11
inline void ServiceWorkerRegistrationData::set_scope_url(::std::string&& value) {
  set_has_scope_url();
  scope_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerRegistrationData.scope_url)
}
#endif
inline void ServiceWorkerRegistrationData::set_scope_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scope_url();
  scope_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerRegistrationData.scope_url)
}
inline void ServiceWorkerRegistrationData::set_scope_url(const char* value, size_t size) {
  set_has_scope_url();
  scope_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerRegistrationData.scope_url)
}
inline ::std::string* ServiceWorkerRegistrationData::mutable_scope_url() {
  set_has_scope_url();
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.scope_url)
  return scope_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceWorkerRegistrationData::release_scope_url() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.scope_url)
  clear_has_scope_url();
  return scope_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerRegistrationData::set_allocated_scope_url(::std::string* scope_url) {
  if (scope_url != NULL) {
    set_has_scope_url();
  } else {
    clear_has_scope_url();
  }
  scope_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope_url);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.scope_url)
}

// required string script_url = 3;
inline bool ServiceWorkerRegistrationData::has_script_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_script_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceWorkerRegistrationData::clear_has_script_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceWorkerRegistrationData::clear_script_url() {
  script_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_script_url();
}
inline const ::std::string& ServiceWorkerRegistrationData::script_url() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.script_url)
  return script_url_.GetNoArena();
}
inline void ServiceWorkerRegistrationData::set_script_url(const ::std::string& value) {
  set_has_script_url();
  script_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.script_url)
}
#if LANG_CXX11
inline void ServiceWorkerRegistrationData::set_script_url(::std::string&& value) {
  set_has_script_url();
  script_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerRegistrationData.script_url)
}
#endif
inline void ServiceWorkerRegistrationData::set_script_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_script_url();
  script_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerRegistrationData.script_url)
}
inline void ServiceWorkerRegistrationData::set_script_url(const char* value, size_t size) {
  set_has_script_url();
  script_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerRegistrationData.script_url)
}
inline ::std::string* ServiceWorkerRegistrationData::mutable_script_url() {
  set_has_script_url();
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.script_url)
  return script_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceWorkerRegistrationData::release_script_url() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.script_url)
  clear_has_script_url();
  return script_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerRegistrationData::set_allocated_script_url(::std::string* script_url) {
  if (script_url != NULL) {
    set_has_script_url();
  } else {
    clear_has_script_url();
  }
  script_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_url);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.script_url)
}

// required int64 version_id = 4;
inline bool ServiceWorkerRegistrationData::has_version_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_version_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServiceWorkerRegistrationData::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServiceWorkerRegistrationData::clear_version_id() {
  version_id_ = GOOGLE_LONGLONG(0);
  clear_has_version_id();
}
inline ::google::protobuf::int64 ServiceWorkerRegistrationData::version_id() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.version_id)
  return version_id_;
}
inline void ServiceWorkerRegistrationData::set_version_id(::google::protobuf::int64 value) {
  set_has_version_id();
  version_id_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.version_id)
}

// required bool is_active = 5;
inline bool ServiceWorkerRegistrationData::has_is_active() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_is_active() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServiceWorkerRegistrationData::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServiceWorkerRegistrationData::clear_is_active() {
  is_active_ = false;
  clear_has_is_active();
}
inline bool ServiceWorkerRegistrationData::is_active() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.is_active)
  return is_active_;
}
inline void ServiceWorkerRegistrationData::set_is_active(bool value) {
  set_has_is_active();
  is_active_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.is_active)
}

// required bool has_fetch_handler = 6;
inline bool ServiceWorkerRegistrationData::has_has_fetch_handler() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_has_fetch_handler() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServiceWorkerRegistrationData::clear_has_has_fetch_handler() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServiceWorkerRegistrationData::clear_has_fetch_handler() {
  has_fetch_handler_ = false;
  clear_has_has_fetch_handler();
}
inline bool ServiceWorkerRegistrationData::has_fetch_handler() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.has_fetch_handler)
  return has_fetch_handler_;
}
inline void ServiceWorkerRegistrationData::set_has_fetch_handler(bool value) {
  set_has_has_fetch_handler();
  has_fetch_handler_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.has_fetch_handler)
}

// required int64 last_update_check_time = 7;
inline bool ServiceWorkerRegistrationData::has_last_update_check_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_last_update_check_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServiceWorkerRegistrationData::clear_has_last_update_check_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServiceWorkerRegistrationData::clear_last_update_check_time() {
  last_update_check_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_update_check_time();
}
inline ::google::protobuf::int64 ServiceWorkerRegistrationData::last_update_check_time() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.last_update_check_time)
  return last_update_check_time_;
}
inline void ServiceWorkerRegistrationData::set_last_update_check_time(::google::protobuf::int64 value) {
  set_has_last_update_check_time();
  last_update_check_time_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.last_update_check_time)
}

// optional uint64 resources_total_size_bytes = 8;
inline bool ServiceWorkerRegistrationData::has_resources_total_size_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_resources_total_size_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServiceWorkerRegistrationData::clear_has_resources_total_size_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServiceWorkerRegistrationData::clear_resources_total_size_bytes() {
  resources_total_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_resources_total_size_bytes();
}
inline ::google::protobuf::uint64 ServiceWorkerRegistrationData::resources_total_size_bytes() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.resources_total_size_bytes)
  return resources_total_size_bytes_;
}
inline void ServiceWorkerRegistrationData::set_resources_total_size_bytes(::google::protobuf::uint64 value) {
  set_has_resources_total_size_bytes();
  resources_total_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.resources_total_size_bytes)
}

// optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
inline bool ServiceWorkerRegistrationData::has_origin_trial_tokens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_origin_trial_tokens() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceWorkerRegistrationData::clear_has_origin_trial_tokens() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceWorkerRegistrationData::clear_origin_trial_tokens() {
  if (origin_trial_tokens_ != NULL) origin_trial_tokens_->::content::ServiceWorkerOriginTrialInfo::Clear();
  clear_has_origin_trial_tokens();
}
inline const ::content::ServiceWorkerOriginTrialInfo& ServiceWorkerRegistrationData::origin_trial_tokens() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.origin_trial_tokens)
  return origin_trial_tokens_ != NULL ? *origin_trial_tokens_
                         : *::content::ServiceWorkerOriginTrialInfo::internal_default_instance();
}
inline ::content::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::mutable_origin_trial_tokens() {
  set_has_origin_trial_tokens();
  if (origin_trial_tokens_ == NULL) {
    origin_trial_tokens_ = new ::content::ServiceWorkerOriginTrialInfo;
  }
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.origin_trial_tokens)
  return origin_trial_tokens_;
}
inline ::content::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::release_origin_trial_tokens() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.origin_trial_tokens)
  clear_has_origin_trial_tokens();
  ::content::ServiceWorkerOriginTrialInfo* temp = origin_trial_tokens_;
  origin_trial_tokens_ = NULL;
  return temp;
}
inline void ServiceWorkerRegistrationData::set_allocated_origin_trial_tokens(::content::ServiceWorkerOriginTrialInfo* origin_trial_tokens) {
  delete origin_trial_tokens_;
  origin_trial_tokens_ = origin_trial_tokens;
  if (origin_trial_tokens) {
    set_has_origin_trial_tokens();
  } else {
    clear_has_origin_trial_tokens();
  }
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.origin_trial_tokens)
}

// optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
inline bool ServiceWorkerRegistrationData::has_navigation_preload_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_navigation_preload_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceWorkerRegistrationData::clear_has_navigation_preload_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceWorkerRegistrationData::clear_navigation_preload_state() {
  if (navigation_preload_state_ != NULL) navigation_preload_state_->::content::ServiceWorkerNavigationPreloadState::Clear();
  clear_has_navigation_preload_state();
}
inline const ::content::ServiceWorkerNavigationPreloadState& ServiceWorkerRegistrationData::navigation_preload_state() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.navigation_preload_state)
  return navigation_preload_state_ != NULL ? *navigation_preload_state_
                         : *::content::ServiceWorkerNavigationPreloadState::internal_default_instance();
}
inline ::content::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::mutable_navigation_preload_state() {
  set_has_navigation_preload_state();
  if (navigation_preload_state_ == NULL) {
    navigation_preload_state_ = new ::content::ServiceWorkerNavigationPreloadState;
  }
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.navigation_preload_state)
  return navigation_preload_state_;
}
inline ::content::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::release_navigation_preload_state() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.navigation_preload_state)
  clear_has_navigation_preload_state();
  ::content::ServiceWorkerNavigationPreloadState* temp = navigation_preload_state_;
  navigation_preload_state_ = NULL;
  return temp;
}
inline void ServiceWorkerRegistrationData::set_allocated_navigation_preload_state(::content::ServiceWorkerNavigationPreloadState* navigation_preload_state) {
  delete navigation_preload_state_;
  navigation_preload_state_ = navigation_preload_state;
  if (navigation_preload_state) {
    set_has_navigation_preload_state();
  } else {
    clear_has_navigation_preload_state();
  }
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.navigation_preload_state)
}

// repeated uint32 used_features = 13;
inline int ServiceWorkerRegistrationData::used_features_size() const {
  return used_features_.size();
}
inline void ServiceWorkerRegistrationData::clear_used_features() {
  used_features_.Clear();
}
inline ::google::protobuf::uint32 ServiceWorkerRegistrationData::used_features(int index) const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.used_features)
  return used_features_.Get(index);
}
inline void ServiceWorkerRegistrationData::set_used_features(int index, ::google::protobuf::uint32 value) {
  used_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.used_features)
}
inline void ServiceWorkerRegistrationData::add_used_features(::google::protobuf::uint32 value) {
  used_features_.Add(value);
  // @@protoc_insertion_point(field_add:content.ServiceWorkerRegistrationData.used_features)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ServiceWorkerRegistrationData::used_features() const {
  // @@protoc_insertion_point(field_list:content.ServiceWorkerRegistrationData.used_features)
  return used_features_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ServiceWorkerRegistrationData::mutable_used_features() {
  // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerRegistrationData.used_features)
  return &used_features_;
}

// optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
inline bool ServiceWorkerRegistrationData::has_update_via_cache() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServiceWorkerRegistrationData::set_has_update_via_cache() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServiceWorkerRegistrationData::clear_has_update_via_cache() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServiceWorkerRegistrationData::clear_update_via_cache() {
  update_via_cache_ = 0;
  clear_has_update_via_cache();
}
inline ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::update_via_cache() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.update_via_cache)
  return static_cast< ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType >(update_via_cache_);
}
inline void ServiceWorkerRegistrationData::set_update_via_cache(::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value) {
  assert(::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(value));
  set_has_update_via_cache();
  update_via_cache_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.update_via_cache)
}

// -------------------------------------------------------------------

// ServiceWorkerResourceRecord

// required int64 resource_id = 1;
inline bool ServiceWorkerResourceRecord::has_resource_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWorkerResourceRecord::set_has_resource_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceWorkerResourceRecord::clear_has_resource_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceWorkerResourceRecord::clear_resource_id() {
  resource_id_ = GOOGLE_LONGLONG(0);
  clear_has_resource_id();
}
inline ::google::protobuf::int64 ServiceWorkerResourceRecord::resource_id() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.resource_id)
  return resource_id_;
}
inline void ServiceWorkerResourceRecord::set_resource_id(::google::protobuf::int64 value) {
  set_has_resource_id();
  resource_id_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.resource_id)
}

// required string url = 2;
inline bool ServiceWorkerResourceRecord::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerResourceRecord::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceWorkerResourceRecord::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceWorkerResourceRecord::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ServiceWorkerResourceRecord::url() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.url)
  return url_.GetNoArena();
}
inline void ServiceWorkerResourceRecord::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.url)
}
#if LANG_CXX11
inline void ServiceWorkerResourceRecord::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerResourceRecord.url)
}
#endif
inline void ServiceWorkerResourceRecord::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerResourceRecord.url)
}
inline void ServiceWorkerResourceRecord::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerResourceRecord.url)
}
inline ::std::string* ServiceWorkerResourceRecord::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerResourceRecord.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceWorkerResourceRecord::release_url() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerResourceRecord.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerResourceRecord::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerResourceRecord.url)
}

// optional uint64 size_bytes = 3;
inline bool ServiceWorkerResourceRecord::has_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceWorkerResourceRecord::set_has_size_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceWorkerResourceRecord::clear_has_size_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceWorkerResourceRecord::clear_size_bytes() {
  size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_size_bytes();
}
inline ::google::protobuf::uint64 ServiceWorkerResourceRecord::size_bytes() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.size_bytes)
  return size_bytes_;
}
inline void ServiceWorkerResourceRecord::set_size_bytes(::google::protobuf::uint64 value) {
  set_has_size_bytes();
  size_bytes_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.size_bytes)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace content

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fworker_5fdatabase_2eproto__INCLUDED
