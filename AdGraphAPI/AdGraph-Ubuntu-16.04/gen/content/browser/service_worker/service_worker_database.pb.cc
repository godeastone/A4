// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_worker_database.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_worker_database.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace content {
class ServiceWorkerOriginTrialFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceWorkerOriginTrialFeature> {
} _ServiceWorkerOriginTrialFeature_default_instance_;
class ServiceWorkerOriginTrialInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceWorkerOriginTrialInfo> {
} _ServiceWorkerOriginTrialInfo_default_instance_;
class ServiceWorkerNavigationPreloadStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceWorkerNavigationPreloadState> {
} _ServiceWorkerNavigationPreloadState_default_instance_;
class ServiceWorkerRegistrationDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceWorkerRegistrationData> {
} _ServiceWorkerRegistrationData_default_instance_;
class ServiceWorkerResourceRecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceWorkerResourceRecord> {
} _ServiceWorkerResourceRecord_default_instance_;

namespace protobuf_service_5fworker_5fdatabase_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ServiceWorkerOriginTrialFeature_default_instance_.Shutdown();
  _ServiceWorkerOriginTrialInfo_default_instance_.Shutdown();
  _ServiceWorkerNavigationPreloadState_default_instance_.Shutdown();
  _ServiceWorkerRegistrationData_default_instance_.Shutdown();
  _ServiceWorkerResourceRecord_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ServiceWorkerOriginTrialFeature_default_instance_.DefaultConstruct();
  _ServiceWorkerOriginTrialInfo_default_instance_.DefaultConstruct();
  _ServiceWorkerNavigationPreloadState_default_instance_.DefaultConstruct();
  _ServiceWorkerRegistrationData_default_instance_.DefaultConstruct();
  _ServiceWorkerResourceRecord_default_instance_.DefaultConstruct();
  _ServiceWorkerRegistrationData_default_instance_.get_mutable()->origin_trial_tokens_ = const_cast< ::content::ServiceWorkerOriginTrialInfo*>(
      ::content::ServiceWorkerOriginTrialInfo::internal_default_instance());
  _ServiceWorkerRegistrationData_default_instance_.get_mutable()->navigation_preload_state_ = const_cast< ::content::ServiceWorkerNavigationPreloadState*>(
      ::content::ServiceWorkerNavigationPreloadState::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_service_5fworker_5fdatabase_2eproto

bool ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::IMPORTS;
const ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::ALL;
const ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::NONE;
const ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::ServiceWorkerUpdateViaCacheType_MIN;
const ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::ServiceWorkerUpdateViaCacheType_MAX;
const int ServiceWorkerRegistrationData::ServiceWorkerUpdateViaCacheType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerOriginTrialFeature::kNameFieldNumber;
const int ServiceWorkerOriginTrialFeature::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerOriginTrialFeature::ServiceWorkerOriginTrialFeature()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_5fworker_5fdatabase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ServiceWorkerOriginTrialFeature)
}
ServiceWorkerOriginTrialFeature::ServiceWorkerOriginTrialFeature(const ServiceWorkerOriginTrialFeature& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerOriginTrialFeature)
}

void ServiceWorkerOriginTrialFeature::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ServiceWorkerOriginTrialFeature::~ServiceWorkerOriginTrialFeature() {
  // @@protoc_insertion_point(destructor:content.ServiceWorkerOriginTrialFeature)
  SharedDtor();
}

void ServiceWorkerOriginTrialFeature::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServiceWorkerOriginTrialFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerOriginTrialFeature& ServiceWorkerOriginTrialFeature::default_instance() {
  protobuf_service_5fworker_5fdatabase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialFeature::New(::google::protobuf::Arena* arena) const {
  ServiceWorkerOriginTrialFeature* n = new ServiceWorkerOriginTrialFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceWorkerOriginTrialFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerOriginTrialFeature)
  tokens_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServiceWorkerOriginTrialFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:content.ServiceWorkerOriginTrialFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ServiceWorkerOriginTrialFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ServiceWorkerOriginTrialFeature)
  return false;
#undef DO_
}

void ServiceWorkerOriginTrialFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ServiceWorkerOriginTrialFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string tokens = 2;
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tokens(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.ServiceWorkerOriginTrialFeature)
}

size_t ServiceWorkerOriginTrialFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerOriginTrialFeature)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated string tokens = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tokens_size());
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tokens(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWorkerOriginTrialFeature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerOriginTrialFeature*>(&from));
}

void ServiceWorkerOriginTrialFeature::MergeFrom(const ServiceWorkerOriginTrialFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerOriginTrialFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ServiceWorkerOriginTrialFeature::CopyFrom(const ServiceWorkerOriginTrialFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerOriginTrialFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerOriginTrialFeature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ServiceWorkerOriginTrialFeature::Swap(ServiceWorkerOriginTrialFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceWorkerOriginTrialFeature::InternalSwap(ServiceWorkerOriginTrialFeature* other) {
  tokens_.InternalSwap(&other->tokens_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerOriginTrialFeature::GetTypeName() const {
  return "content.ServiceWorkerOriginTrialFeature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerOriginTrialFeature

// required string name = 1;
bool ServiceWorkerOriginTrialFeature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceWorkerOriginTrialFeature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ServiceWorkerOriginTrialFeature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServiceWorkerOriginTrialFeature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ServiceWorkerOriginTrialFeature::name() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialFeature.name)
  return name_.GetNoArena();
}
void ServiceWorkerOriginTrialFeature::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.name)
}
#if LANG_CXX11
void ServiceWorkerOriginTrialFeature::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerOriginTrialFeature.name)
}
#endif
void ServiceWorkerOriginTrialFeature::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerOriginTrialFeature.name)
}
void ServiceWorkerOriginTrialFeature::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerOriginTrialFeature.name)
}
::std::string* ServiceWorkerOriginTrialFeature::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialFeature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerOriginTrialFeature::release_name() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerOriginTrialFeature.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerOriginTrialFeature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerOriginTrialFeature.name)
}

// repeated string tokens = 2;
int ServiceWorkerOriginTrialFeature::tokens_size() const {
  return tokens_.size();
}
void ServiceWorkerOriginTrialFeature::clear_tokens() {
  tokens_.Clear();
}
const ::std::string& ServiceWorkerOriginTrialFeature::tokens(int index) const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_.Get(index);
}
::std::string* ServiceWorkerOriginTrialFeature::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_.Mutable(index);
}
void ServiceWorkerOriginTrialFeature::set_tokens(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.tokens)
  tokens_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ServiceWorkerOriginTrialFeature::set_tokens(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.tokens)
  tokens_.Mutable(index)->assign(std::move(value));
}
#endif
void ServiceWorkerOriginTrialFeature::set_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerOriginTrialFeature.tokens)
}
void ServiceWorkerOriginTrialFeature::set_tokens(int index, const char* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerOriginTrialFeature.tokens)
}
::std::string* ServiceWorkerOriginTrialFeature::add_tokens() {
  // @@protoc_insertion_point(field_add_mutable:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_.Add();
}
void ServiceWorkerOriginTrialFeature::add_tokens(const ::std::string& value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialFeature.tokens)
}
#if LANG_CXX11
void ServiceWorkerOriginTrialFeature::add_tokens(::std::string&& value) {
  tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialFeature.tokens)
}
#endif
void ServiceWorkerOriginTrialFeature::add_tokens(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:content.ServiceWorkerOriginTrialFeature.tokens)
}
void ServiceWorkerOriginTrialFeature::add_tokens(const char* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:content.ServiceWorkerOriginTrialFeature.tokens)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceWorkerOriginTrialFeature::tokens() const {
  // @@protoc_insertion_point(field_list:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceWorkerOriginTrialFeature::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerOriginTrialFeature.tokens)
  return &tokens_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerOriginTrialInfo::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerOriginTrialInfo::ServiceWorkerOriginTrialInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_5fworker_5fdatabase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ServiceWorkerOriginTrialInfo)
}
ServiceWorkerOriginTrialInfo::ServiceWorkerOriginTrialInfo(const ServiceWorkerOriginTrialInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerOriginTrialInfo)
}

void ServiceWorkerOriginTrialInfo::SharedCtor() {
  _cached_size_ = 0;
}

ServiceWorkerOriginTrialInfo::~ServiceWorkerOriginTrialInfo() {
  // @@protoc_insertion_point(destructor:content.ServiceWorkerOriginTrialInfo)
  SharedDtor();
}

void ServiceWorkerOriginTrialInfo::SharedDtor() {
}

void ServiceWorkerOriginTrialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerOriginTrialInfo& ServiceWorkerOriginTrialInfo::default_instance() {
  protobuf_service_5fworker_5fdatabase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceWorkerOriginTrialInfo* ServiceWorkerOriginTrialInfo::New(::google::protobuf::Arena* arena) const {
  ServiceWorkerOriginTrialInfo* n = new ServiceWorkerOriginTrialInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceWorkerOriginTrialInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerOriginTrialInfo)
  features_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServiceWorkerOriginTrialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:content.ServiceWorkerOriginTrialInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ServiceWorkerOriginTrialInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ServiceWorkerOriginTrialInfo)
  return false;
#undef DO_
}

void ServiceWorkerOriginTrialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ServiceWorkerOriginTrialInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->features(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.ServiceWorkerOriginTrialInfo)
}

size_t ServiceWorkerOriginTrialInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerOriginTrialInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWorkerOriginTrialInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerOriginTrialInfo*>(&from));
}

void ServiceWorkerOriginTrialInfo::MergeFrom(const ServiceWorkerOriginTrialInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerOriginTrialInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
}

void ServiceWorkerOriginTrialInfo::CopyFrom(const ServiceWorkerOriginTrialInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerOriginTrialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerOriginTrialInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->features())) return false;
  return true;
}

void ServiceWorkerOriginTrialInfo::Swap(ServiceWorkerOriginTrialInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceWorkerOriginTrialInfo::InternalSwap(ServiceWorkerOriginTrialInfo* other) {
  features_.InternalSwap(&other->features_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerOriginTrialInfo::GetTypeName() const {
  return "content.ServiceWorkerOriginTrialInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerOriginTrialInfo

// repeated .content.ServiceWorkerOriginTrialFeature features = 1;
int ServiceWorkerOriginTrialInfo::features_size() const {
  return features_.size();
}
void ServiceWorkerOriginTrialInfo::clear_features() {
  features_.Clear();
}
const ::content::ServiceWorkerOriginTrialFeature& ServiceWorkerOriginTrialInfo::features(int index) const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialInfo.features)
  return features_.Get(index);
}
::content::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialInfo.features)
  return features_.Mutable(index);
}
::content::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::add_features() {
  // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialInfo.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature >*
ServiceWorkerOriginTrialInfo::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerOriginTrialInfo.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature >&
ServiceWorkerOriginTrialInfo::features() const {
  // @@protoc_insertion_point(field_list:content.ServiceWorkerOriginTrialInfo.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerNavigationPreloadState::kEnabledFieldNumber;
const int ServiceWorkerNavigationPreloadState::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerNavigationPreloadState::ServiceWorkerNavigationPreloadState()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_5fworker_5fdatabase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ServiceWorkerNavigationPreloadState)
}
ServiceWorkerNavigationPreloadState::ServiceWorkerNavigationPreloadState(const ServiceWorkerNavigationPreloadState& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header()) {
    header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerNavigationPreloadState)
}

void ServiceWorkerNavigationPreloadState::SharedCtor() {
  _cached_size_ = 0;
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
}

ServiceWorkerNavigationPreloadState::~ServiceWorkerNavigationPreloadState() {
  // @@protoc_insertion_point(destructor:content.ServiceWorkerNavigationPreloadState)
  SharedDtor();
}

void ServiceWorkerNavigationPreloadState::SharedDtor() {
  header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServiceWorkerNavigationPreloadState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerNavigationPreloadState& ServiceWorkerNavigationPreloadState::default_instance() {
  protobuf_service_5fworker_5fdatabase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceWorkerNavigationPreloadState* ServiceWorkerNavigationPreloadState::New(::google::protobuf::Arena* arena) const {
  ServiceWorkerNavigationPreloadState* n = new ServiceWorkerNavigationPreloadState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceWorkerNavigationPreloadState::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerNavigationPreloadState)
  if (has_header()) {
    GOOGLE_DCHECK(!header_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*header_.UnsafeRawStringPointer())->clear();
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServiceWorkerNavigationPreloadState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:content.ServiceWorkerNavigationPreloadState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ServiceWorkerNavigationPreloadState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ServiceWorkerNavigationPreloadState)
  return false;
#undef DO_
}

void ServiceWorkerNavigationPreloadState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ServiceWorkerNavigationPreloadState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional string header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->header(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.ServiceWorkerNavigationPreloadState)
}

size_t ServiceWorkerNavigationPreloadState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerNavigationPreloadState)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }
  // optional string header = 2;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWorkerNavigationPreloadState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerNavigationPreloadState*>(&from));
}

void ServiceWorkerNavigationPreloadState::MergeFrom(const ServiceWorkerNavigationPreloadState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerNavigationPreloadState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_header();
      header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceWorkerNavigationPreloadState::CopyFrom(const ServiceWorkerNavigationPreloadState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerNavigationPreloadState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerNavigationPreloadState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ServiceWorkerNavigationPreloadState::Swap(ServiceWorkerNavigationPreloadState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceWorkerNavigationPreloadState::InternalSwap(ServiceWorkerNavigationPreloadState* other) {
  header_.Swap(&other->header_);
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerNavigationPreloadState::GetTypeName() const {
  return "content.ServiceWorkerNavigationPreloadState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerNavigationPreloadState

// required bool enabled = 1;
bool ServiceWorkerNavigationPreloadState::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServiceWorkerNavigationPreloadState::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void ServiceWorkerNavigationPreloadState::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServiceWorkerNavigationPreloadState::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool ServiceWorkerNavigationPreloadState::enabled() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerNavigationPreloadState.enabled)
  return enabled_;
}
void ServiceWorkerNavigationPreloadState::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerNavigationPreloadState.enabled)
}

// optional string header = 2;
bool ServiceWorkerNavigationPreloadState::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceWorkerNavigationPreloadState::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void ServiceWorkerNavigationPreloadState::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServiceWorkerNavigationPreloadState::clear_header() {
  header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header();
}
const ::std::string& ServiceWorkerNavigationPreloadState::header() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerNavigationPreloadState.header)
  return header_.GetNoArena();
}
void ServiceWorkerNavigationPreloadState::set_header(const ::std::string& value) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerNavigationPreloadState.header)
}
#if LANG_CXX11
void ServiceWorkerNavigationPreloadState::set_header(::std::string&& value) {
  set_has_header();
  header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerNavigationPreloadState.header)
}
#endif
void ServiceWorkerNavigationPreloadState::set_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerNavigationPreloadState.header)
}
void ServiceWorkerNavigationPreloadState::set_header(const char* value, size_t size) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerNavigationPreloadState.header)
}
::std::string* ServiceWorkerNavigationPreloadState::mutable_header() {
  set_has_header();
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerNavigationPreloadState.header)
  return header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerNavigationPreloadState::release_header() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerNavigationPreloadState.header)
  clear_has_header();
  return header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerNavigationPreloadState::set_allocated_header(::std::string* header) {
  if (header != NULL) {
    set_has_header();
  } else {
    clear_has_header();
  }
  header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerNavigationPreloadState.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerRegistrationData::kRegistrationIdFieldNumber;
const int ServiceWorkerRegistrationData::kScopeUrlFieldNumber;
const int ServiceWorkerRegistrationData::kScriptUrlFieldNumber;
const int ServiceWorkerRegistrationData::kVersionIdFieldNumber;
const int ServiceWorkerRegistrationData::kIsActiveFieldNumber;
const int ServiceWorkerRegistrationData::kHasFetchHandlerFieldNumber;
const int ServiceWorkerRegistrationData::kLastUpdateCheckTimeFieldNumber;
const int ServiceWorkerRegistrationData::kResourcesTotalSizeBytesFieldNumber;
const int ServiceWorkerRegistrationData::kOriginTrialTokensFieldNumber;
const int ServiceWorkerRegistrationData::kNavigationPreloadStateFieldNumber;
const int ServiceWorkerRegistrationData::kUsedFeaturesFieldNumber;
const int ServiceWorkerRegistrationData::kUpdateViaCacheFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerRegistrationData::ServiceWorkerRegistrationData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_5fworker_5fdatabase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ServiceWorkerRegistrationData)
}
ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(const ServiceWorkerRegistrationData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      used_features_(from.used_features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scope_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scope_url()) {
    scope_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scope_url_);
  }
  script_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_script_url()) {
    script_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_url_);
  }
  if (from.has_origin_trial_tokens()) {
    origin_trial_tokens_ = new ::content::ServiceWorkerOriginTrialInfo(*from.origin_trial_tokens_);
  } else {
    origin_trial_tokens_ = NULL;
  }
  if (from.has_navigation_preload_state()) {
    navigation_preload_state_ = new ::content::ServiceWorkerNavigationPreloadState(*from.navigation_preload_state_);
  } else {
    navigation_preload_state_ = NULL;
  }
  ::memcpy(&registration_id_, &from.registration_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_via_cache_) -
    reinterpret_cast<char*>(&registration_id_)) + sizeof(update_via_cache_));
  // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerRegistrationData)
}

void ServiceWorkerRegistrationData::SharedCtor() {
  _cached_size_ = 0;
  scope_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&origin_trial_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_via_cache_) -
      reinterpret_cast<char*>(&origin_trial_tokens_)) + sizeof(update_via_cache_));
}

ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData() {
  // @@protoc_insertion_point(destructor:content.ServiceWorkerRegistrationData)
  SharedDtor();
}

void ServiceWorkerRegistrationData::SharedDtor() {
  scope_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete origin_trial_tokens_;
  }
  if (this != internal_default_instance()) {
    delete navigation_preload_state_;
  }
}

void ServiceWorkerRegistrationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerRegistrationData& ServiceWorkerRegistrationData::default_instance() {
  protobuf_service_5fworker_5fdatabase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceWorkerRegistrationData* ServiceWorkerRegistrationData::New(::google::protobuf::Arena* arena) const {
  ServiceWorkerRegistrationData* n = new ServiceWorkerRegistrationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceWorkerRegistrationData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerRegistrationData)
  used_features_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_scope_url()) {
      GOOGLE_DCHECK(!scope_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*scope_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_script_url()) {
      GOOGLE_DCHECK(!script_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*script_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_origin_trial_tokens()) {
      GOOGLE_DCHECK(origin_trial_tokens_ != NULL);
      origin_trial_tokens_->::content::ServiceWorkerOriginTrialInfo::Clear();
    }
    if (has_navigation_preload_state()) {
      GOOGLE_DCHECK(navigation_preload_state_ != NULL);
      navigation_preload_state_->::content::ServiceWorkerNavigationPreloadState::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&registration_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resources_total_size_bytes_) -
        reinterpret_cast<char*>(&registration_id_)) + sizeof(resources_total_size_bytes_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&is_active_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_via_cache_) -
        reinterpret_cast<char*>(&is_active_)) + sizeof(update_via_cache_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServiceWorkerRegistrationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:content.ServiceWorkerRegistrationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 registration_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_registration_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &registration_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string scope_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scope_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string script_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_version_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_active = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool has_fetch_handler = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_has_fetch_handler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_fetch_handler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_update_check_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_last_update_check_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_check_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 resources_total_size_bytes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_resources_total_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resources_total_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_trial_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navigation_preload_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 used_features = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104u, input, this->mutable_used_features())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(106u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_used_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(value)) {
            set_update_via_cache(static_cast< ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(112u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ServiceWorkerRegistrationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ServiceWorkerRegistrationData)
  return false;
#undef DO_
}

void ServiceWorkerRegistrationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ServiceWorkerRegistrationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 registration_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->registration_id(), output);
  }

  // required string scope_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scope_url(), output);
  }

  // required string script_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->script_url(), output);
  }

  // required int64 version_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->version_id(), output);
  }

  // required bool is_active = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_active(), output);
  }

  // required bool has_fetch_handler = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_fetch_handler(), output);
  }

  // required int64 last_update_check_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->last_update_check_time(), output);
  }

  // optional uint64 resources_total_size_bytes = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->resources_total_size_bytes(), output);
  }

  // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->origin_trial_tokens_, output);
  }

  // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->navigation_preload_state_, output);
  }

  // repeated uint32 used_features = 13;
  for (int i = 0, n = this->used_features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->used_features(i), output);
  }

  // optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->update_via_cache(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.ServiceWorkerRegistrationData)
}

size_t ServiceWorkerRegistrationData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.ServiceWorkerRegistrationData)
  size_t total_size = 0;

  if (has_scope_url()) {
    // required string scope_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scope_url());
  }

  if (has_script_url()) {
    // required string script_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->script_url());
  }

  if (has_registration_id()) {
    // required int64 registration_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->registration_id());
  }

  if (has_version_id()) {
    // required int64 version_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version_id());
  }

  if (has_last_update_check_time()) {
    // required int64 last_update_check_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_update_check_time());
  }

  if (has_is_active()) {
    // required bool is_active = 5;
    total_size += 1 + 1;
  }

  if (has_has_fetch_handler()) {
    // required bool has_fetch_handler = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ServiceWorkerRegistrationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerRegistrationData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000373) ^ 0x00000373) == 0) {  // All required fields are present.
    // required string scope_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scope_url());

    // required string script_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->script_url());

    // required int64 registration_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->registration_id());

    // required int64 version_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version_id());

    // required int64 last_update_check_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_update_check_time());

    // required bool is_active = 5;
    total_size += 1 + 1;

    // required bool has_fetch_handler = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 used_features = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->used_features_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->used_features_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
    if (has_origin_trial_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_trial_tokens_);
    }

    // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
    if (has_navigation_preload_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->navigation_preload_state_);
    }

  }
  // optional uint64 resources_total_size_bytes = 8;
  if (has_resources_total_size_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->resources_total_size_bytes());
  }

  // optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
  if (has_update_via_cache()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_via_cache());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWorkerRegistrationData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerRegistrationData*>(&from));
}

void ServiceWorkerRegistrationData::MergeFrom(const ServiceWorkerRegistrationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerRegistrationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  used_features_.MergeFrom(from.used_features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_scope_url();
      scope_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scope_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_script_url();
      script_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_origin_trial_tokens()->::content::ServiceWorkerOriginTrialInfo::MergeFrom(from.origin_trial_tokens());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_navigation_preload_state()->::content::ServiceWorkerNavigationPreloadState::MergeFrom(from.navigation_preload_state());
    }
    if (cached_has_bits & 0x00000010u) {
      registration_id_ = from.registration_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      version_id_ = from.version_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_update_check_time_ = from.last_update_check_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      resources_total_size_bytes_ = from.resources_total_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      is_active_ = from.is_active_;
    }
    if (cached_has_bits & 0x00000200u) {
      has_fetch_handler_ = from.has_fetch_handler_;
    }
    if (cached_has_bits & 0x00000400u) {
      update_via_cache_ = from.update_via_cache_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceWorkerRegistrationData::CopyFrom(const ServiceWorkerRegistrationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerRegistrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerRegistrationData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000373) != 0x00000373) return false;
  if (has_origin_trial_tokens()) {
    if (!this->origin_trial_tokens_->IsInitialized()) return false;
  }
  if (has_navigation_preload_state()) {
    if (!this->navigation_preload_state_->IsInitialized()) return false;
  }
  return true;
}

void ServiceWorkerRegistrationData::Swap(ServiceWorkerRegistrationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceWorkerRegistrationData::InternalSwap(ServiceWorkerRegistrationData* other) {
  used_features_.InternalSwap(&other->used_features_);
  scope_url_.Swap(&other->scope_url_);
  script_url_.Swap(&other->script_url_);
  std::swap(origin_trial_tokens_, other->origin_trial_tokens_);
  std::swap(navigation_preload_state_, other->navigation_preload_state_);
  std::swap(registration_id_, other->registration_id_);
  std::swap(version_id_, other->version_id_);
  std::swap(last_update_check_time_, other->last_update_check_time_);
  std::swap(resources_total_size_bytes_, other->resources_total_size_bytes_);
  std::swap(is_active_, other->is_active_);
  std::swap(has_fetch_handler_, other->has_fetch_handler_);
  std::swap(update_via_cache_, other->update_via_cache_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerRegistrationData::GetTypeName() const {
  return "content.ServiceWorkerRegistrationData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerRegistrationData

// required int64 registration_id = 1;
bool ServiceWorkerRegistrationData::has_registration_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServiceWorkerRegistrationData::set_has_registration_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ServiceWorkerRegistrationData::clear_has_registration_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServiceWorkerRegistrationData::clear_registration_id() {
  registration_id_ = GOOGLE_LONGLONG(0);
  clear_has_registration_id();
}
::google::protobuf::int64 ServiceWorkerRegistrationData::registration_id() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.registration_id)
  return registration_id_;
}
void ServiceWorkerRegistrationData::set_registration_id(::google::protobuf::int64 value) {
  set_has_registration_id();
  registration_id_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.registration_id)
}

// required string scope_url = 2;
bool ServiceWorkerRegistrationData::has_scope_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceWorkerRegistrationData::set_has_scope_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ServiceWorkerRegistrationData::clear_has_scope_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServiceWorkerRegistrationData::clear_scope_url() {
  scope_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scope_url();
}
const ::std::string& ServiceWorkerRegistrationData::scope_url() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.scope_url)
  return scope_url_.GetNoArena();
}
void ServiceWorkerRegistrationData::set_scope_url(const ::std::string& value) {
  set_has_scope_url();
  scope_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.scope_url)
}
#if LANG_CXX11
void ServiceWorkerRegistrationData::set_scope_url(::std::string&& value) {
  set_has_scope_url();
  scope_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerRegistrationData.scope_url)
}
#endif
void ServiceWorkerRegistrationData::set_scope_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scope_url();
  scope_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerRegistrationData.scope_url)
}
void ServiceWorkerRegistrationData::set_scope_url(const char* value, size_t size) {
  set_has_scope_url();
  scope_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerRegistrationData.scope_url)
}
::std::string* ServiceWorkerRegistrationData::mutable_scope_url() {
  set_has_scope_url();
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.scope_url)
  return scope_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerRegistrationData::release_scope_url() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.scope_url)
  clear_has_scope_url();
  return scope_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerRegistrationData::set_allocated_scope_url(::std::string* scope_url) {
  if (scope_url != NULL) {
    set_has_scope_url();
  } else {
    clear_has_scope_url();
  }
  scope_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope_url);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.scope_url)
}

// required string script_url = 3;
bool ServiceWorkerRegistrationData::has_script_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServiceWorkerRegistrationData::set_has_script_url() {
  _has_bits_[0] |= 0x00000002u;
}
void ServiceWorkerRegistrationData::clear_has_script_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServiceWorkerRegistrationData::clear_script_url() {
  script_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_script_url();
}
const ::std::string& ServiceWorkerRegistrationData::script_url() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.script_url)
  return script_url_.GetNoArena();
}
void ServiceWorkerRegistrationData::set_script_url(const ::std::string& value) {
  set_has_script_url();
  script_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.script_url)
}
#if LANG_CXX11
void ServiceWorkerRegistrationData::set_script_url(::std::string&& value) {
  set_has_script_url();
  script_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerRegistrationData.script_url)
}
#endif
void ServiceWorkerRegistrationData::set_script_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_script_url();
  script_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerRegistrationData.script_url)
}
void ServiceWorkerRegistrationData::set_script_url(const char* value, size_t size) {
  set_has_script_url();
  script_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerRegistrationData.script_url)
}
::std::string* ServiceWorkerRegistrationData::mutable_script_url() {
  set_has_script_url();
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.script_url)
  return script_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerRegistrationData::release_script_url() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.script_url)
  clear_has_script_url();
  return script_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerRegistrationData::set_allocated_script_url(::std::string* script_url) {
  if (script_url != NULL) {
    set_has_script_url();
  } else {
    clear_has_script_url();
  }
  script_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_url);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.script_url)
}

// required int64 version_id = 4;
bool ServiceWorkerRegistrationData::has_version_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServiceWorkerRegistrationData::set_has_version_id() {
  _has_bits_[0] |= 0x00000020u;
}
void ServiceWorkerRegistrationData::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServiceWorkerRegistrationData::clear_version_id() {
  version_id_ = GOOGLE_LONGLONG(0);
  clear_has_version_id();
}
::google::protobuf::int64 ServiceWorkerRegistrationData::version_id() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.version_id)
  return version_id_;
}
void ServiceWorkerRegistrationData::set_version_id(::google::protobuf::int64 value) {
  set_has_version_id();
  version_id_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.version_id)
}

// required bool is_active = 5;
bool ServiceWorkerRegistrationData::has_is_active() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ServiceWorkerRegistrationData::set_has_is_active() {
  _has_bits_[0] |= 0x00000100u;
}
void ServiceWorkerRegistrationData::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000100u;
}
void ServiceWorkerRegistrationData::clear_is_active() {
  is_active_ = false;
  clear_has_is_active();
}
bool ServiceWorkerRegistrationData::is_active() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.is_active)
  return is_active_;
}
void ServiceWorkerRegistrationData::set_is_active(bool value) {
  set_has_is_active();
  is_active_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.is_active)
}

// required bool has_fetch_handler = 6;
bool ServiceWorkerRegistrationData::has_has_fetch_handler() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ServiceWorkerRegistrationData::set_has_has_fetch_handler() {
  _has_bits_[0] |= 0x00000200u;
}
void ServiceWorkerRegistrationData::clear_has_has_fetch_handler() {
  _has_bits_[0] &= ~0x00000200u;
}
void ServiceWorkerRegistrationData::clear_has_fetch_handler() {
  has_fetch_handler_ = false;
  clear_has_has_fetch_handler();
}
bool ServiceWorkerRegistrationData::has_fetch_handler() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.has_fetch_handler)
  return has_fetch_handler_;
}
void ServiceWorkerRegistrationData::set_has_fetch_handler(bool value) {
  set_has_has_fetch_handler();
  has_fetch_handler_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.has_fetch_handler)
}

// required int64 last_update_check_time = 7;
bool ServiceWorkerRegistrationData::has_last_update_check_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServiceWorkerRegistrationData::set_has_last_update_check_time() {
  _has_bits_[0] |= 0x00000040u;
}
void ServiceWorkerRegistrationData::clear_has_last_update_check_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void ServiceWorkerRegistrationData::clear_last_update_check_time() {
  last_update_check_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_update_check_time();
}
::google::protobuf::int64 ServiceWorkerRegistrationData::last_update_check_time() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.last_update_check_time)
  return last_update_check_time_;
}
void ServiceWorkerRegistrationData::set_last_update_check_time(::google::protobuf::int64 value) {
  set_has_last_update_check_time();
  last_update_check_time_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.last_update_check_time)
}

// optional uint64 resources_total_size_bytes = 8;
bool ServiceWorkerRegistrationData::has_resources_total_size_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ServiceWorkerRegistrationData::set_has_resources_total_size_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
void ServiceWorkerRegistrationData::clear_has_resources_total_size_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
void ServiceWorkerRegistrationData::clear_resources_total_size_bytes() {
  resources_total_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_resources_total_size_bytes();
}
::google::protobuf::uint64 ServiceWorkerRegistrationData::resources_total_size_bytes() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.resources_total_size_bytes)
  return resources_total_size_bytes_;
}
void ServiceWorkerRegistrationData::set_resources_total_size_bytes(::google::protobuf::uint64 value) {
  set_has_resources_total_size_bytes();
  resources_total_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.resources_total_size_bytes)
}

// optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
bool ServiceWorkerRegistrationData::has_origin_trial_tokens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServiceWorkerRegistrationData::set_has_origin_trial_tokens() {
  _has_bits_[0] |= 0x00000004u;
}
void ServiceWorkerRegistrationData::clear_has_origin_trial_tokens() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServiceWorkerRegistrationData::clear_origin_trial_tokens() {
  if (origin_trial_tokens_ != NULL) origin_trial_tokens_->::content::ServiceWorkerOriginTrialInfo::Clear();
  clear_has_origin_trial_tokens();
}
const ::content::ServiceWorkerOriginTrialInfo& ServiceWorkerRegistrationData::origin_trial_tokens() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.origin_trial_tokens)
  return origin_trial_tokens_ != NULL ? *origin_trial_tokens_
                         : *::content::ServiceWorkerOriginTrialInfo::internal_default_instance();
}
::content::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::mutable_origin_trial_tokens() {
  set_has_origin_trial_tokens();
  if (origin_trial_tokens_ == NULL) {
    origin_trial_tokens_ = new ::content::ServiceWorkerOriginTrialInfo;
  }
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.origin_trial_tokens)
  return origin_trial_tokens_;
}
::content::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::release_origin_trial_tokens() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.origin_trial_tokens)
  clear_has_origin_trial_tokens();
  ::content::ServiceWorkerOriginTrialInfo* temp = origin_trial_tokens_;
  origin_trial_tokens_ = NULL;
  return temp;
}
void ServiceWorkerRegistrationData::set_allocated_origin_trial_tokens(::content::ServiceWorkerOriginTrialInfo* origin_trial_tokens) {
  delete origin_trial_tokens_;
  origin_trial_tokens_ = origin_trial_tokens;
  if (origin_trial_tokens) {
    set_has_origin_trial_tokens();
  } else {
    clear_has_origin_trial_tokens();
  }
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.origin_trial_tokens)
}

// optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
bool ServiceWorkerRegistrationData::has_navigation_preload_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServiceWorkerRegistrationData::set_has_navigation_preload_state() {
  _has_bits_[0] |= 0x00000008u;
}
void ServiceWorkerRegistrationData::clear_has_navigation_preload_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServiceWorkerRegistrationData::clear_navigation_preload_state() {
  if (navigation_preload_state_ != NULL) navigation_preload_state_->::content::ServiceWorkerNavigationPreloadState::Clear();
  clear_has_navigation_preload_state();
}
const ::content::ServiceWorkerNavigationPreloadState& ServiceWorkerRegistrationData::navigation_preload_state() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.navigation_preload_state)
  return navigation_preload_state_ != NULL ? *navigation_preload_state_
                         : *::content::ServiceWorkerNavigationPreloadState::internal_default_instance();
}
::content::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::mutable_navigation_preload_state() {
  set_has_navigation_preload_state();
  if (navigation_preload_state_ == NULL) {
    navigation_preload_state_ = new ::content::ServiceWorkerNavigationPreloadState;
  }
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.navigation_preload_state)
  return navigation_preload_state_;
}
::content::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::release_navigation_preload_state() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.navigation_preload_state)
  clear_has_navigation_preload_state();
  ::content::ServiceWorkerNavigationPreloadState* temp = navigation_preload_state_;
  navigation_preload_state_ = NULL;
  return temp;
}
void ServiceWorkerRegistrationData::set_allocated_navigation_preload_state(::content::ServiceWorkerNavigationPreloadState* navigation_preload_state) {
  delete navigation_preload_state_;
  navigation_preload_state_ = navigation_preload_state;
  if (navigation_preload_state) {
    set_has_navigation_preload_state();
  } else {
    clear_has_navigation_preload_state();
  }
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.navigation_preload_state)
}

// repeated uint32 used_features = 13;
int ServiceWorkerRegistrationData::used_features_size() const {
  return used_features_.size();
}
void ServiceWorkerRegistrationData::clear_used_features() {
  used_features_.Clear();
}
::google::protobuf::uint32 ServiceWorkerRegistrationData::used_features(int index) const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.used_features)
  return used_features_.Get(index);
}
void ServiceWorkerRegistrationData::set_used_features(int index, ::google::protobuf::uint32 value) {
  used_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.used_features)
}
void ServiceWorkerRegistrationData::add_used_features(::google::protobuf::uint32 value) {
  used_features_.Add(value);
  // @@protoc_insertion_point(field_add:content.ServiceWorkerRegistrationData.used_features)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ServiceWorkerRegistrationData::used_features() const {
  // @@protoc_insertion_point(field_list:content.ServiceWorkerRegistrationData.used_features)
  return used_features_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ServiceWorkerRegistrationData::mutable_used_features() {
  // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerRegistrationData.used_features)
  return &used_features_;
}

// optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
bool ServiceWorkerRegistrationData::has_update_via_cache() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ServiceWorkerRegistrationData::set_has_update_via_cache() {
  _has_bits_[0] |= 0x00000400u;
}
void ServiceWorkerRegistrationData::clear_has_update_via_cache() {
  _has_bits_[0] &= ~0x00000400u;
}
void ServiceWorkerRegistrationData::clear_update_via_cache() {
  update_via_cache_ = 0;
  clear_has_update_via_cache();
}
::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::update_via_cache() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.update_via_cache)
  return static_cast< ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType >(update_via_cache_);
}
void ServiceWorkerRegistrationData::set_update_via_cache(::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value) {
  assert(::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(value));
  set_has_update_via_cache();
  update_via_cache_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.update_via_cache)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerResourceRecord::kResourceIdFieldNumber;
const int ServiceWorkerResourceRecord::kUrlFieldNumber;
const int ServiceWorkerResourceRecord::kSizeBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerResourceRecord::ServiceWorkerResourceRecord()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_5fworker_5fdatabase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ServiceWorkerResourceRecord)
}
ServiceWorkerResourceRecord::ServiceWorkerResourceRecord(const ServiceWorkerResourceRecord& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&resource_id_, &from.resource_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_bytes_) -
    reinterpret_cast<char*>(&resource_id_)) + sizeof(size_bytes_));
  // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerResourceRecord)
}

void ServiceWorkerResourceRecord::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resource_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_bytes_) -
      reinterpret_cast<char*>(&resource_id_)) + sizeof(size_bytes_));
}

ServiceWorkerResourceRecord::~ServiceWorkerResourceRecord() {
  // @@protoc_insertion_point(destructor:content.ServiceWorkerResourceRecord)
  SharedDtor();
}

void ServiceWorkerResourceRecord::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServiceWorkerResourceRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerResourceRecord& ServiceWorkerResourceRecord::default_instance() {
  protobuf_service_5fworker_5fdatabase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceWorkerResourceRecord* ServiceWorkerResourceRecord::New(::google::protobuf::Arena* arena) const {
  ServiceWorkerResourceRecord* n = new ServiceWorkerResourceRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceWorkerResourceRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerResourceRecord)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&resource_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_bytes_) -
        reinterpret_cast<char*>(&resource_id_)) + sizeof(size_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServiceWorkerResourceRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:content.ServiceWorkerResourceRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 resource_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_resource_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resource_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 size_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ServiceWorkerResourceRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ServiceWorkerResourceRecord)
  return false;
#undef DO_
}

void ServiceWorkerResourceRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ServiceWorkerResourceRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 resource_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->resource_id(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional uint64 size_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size_bytes(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.ServiceWorkerResourceRecord)
}

size_t ServiceWorkerResourceRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.ServiceWorkerResourceRecord)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_resource_id()) {
    // required int64 resource_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->resource_id());
  }

  return total_size;
}
size_t ServiceWorkerResourceRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerResourceRecord)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required int64 resource_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->resource_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 size_bytes = 3;
  if (has_size_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWorkerResourceRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerResourceRecord*>(&from));
}

void ServiceWorkerResourceRecord::MergeFrom(const ServiceWorkerResourceRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerResourceRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      resource_id_ = from.resource_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_bytes_ = from.size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceWorkerResourceRecord::CopyFrom(const ServiceWorkerResourceRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerResourceRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerResourceRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ServiceWorkerResourceRecord::Swap(ServiceWorkerResourceRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceWorkerResourceRecord::InternalSwap(ServiceWorkerResourceRecord* other) {
  url_.Swap(&other->url_);
  std::swap(resource_id_, other->resource_id_);
  std::swap(size_bytes_, other->size_bytes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerResourceRecord::GetTypeName() const {
  return "content.ServiceWorkerResourceRecord";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerResourceRecord

// required int64 resource_id = 1;
bool ServiceWorkerResourceRecord::has_resource_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServiceWorkerResourceRecord::set_has_resource_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ServiceWorkerResourceRecord::clear_has_resource_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServiceWorkerResourceRecord::clear_resource_id() {
  resource_id_ = GOOGLE_LONGLONG(0);
  clear_has_resource_id();
}
::google::protobuf::int64 ServiceWorkerResourceRecord::resource_id() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.resource_id)
  return resource_id_;
}
void ServiceWorkerResourceRecord::set_resource_id(::google::protobuf::int64 value) {
  set_has_resource_id();
  resource_id_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.resource_id)
}

// required string url = 2;
bool ServiceWorkerResourceRecord::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceWorkerResourceRecord::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ServiceWorkerResourceRecord::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServiceWorkerResourceRecord::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ServiceWorkerResourceRecord::url() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.url)
  return url_.GetNoArena();
}
void ServiceWorkerResourceRecord::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.url)
}
#if LANG_CXX11
void ServiceWorkerResourceRecord::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerResourceRecord.url)
}
#endif
void ServiceWorkerResourceRecord::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerResourceRecord.url)
}
void ServiceWorkerResourceRecord::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerResourceRecord.url)
}
::std::string* ServiceWorkerResourceRecord::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerResourceRecord.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerResourceRecord::release_url() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerResourceRecord.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerResourceRecord::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerResourceRecord.url)
}

// optional uint64 size_bytes = 3;
bool ServiceWorkerResourceRecord::has_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServiceWorkerResourceRecord::set_has_size_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
void ServiceWorkerResourceRecord::clear_has_size_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServiceWorkerResourceRecord::clear_size_bytes() {
  size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_size_bytes();
}
::google::protobuf::uint64 ServiceWorkerResourceRecord::size_bytes() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.size_bytes)
  return size_bytes_;
}
void ServiceWorkerResourceRecord::set_size_bytes(::google::protobuf::uint64 value) {
  set_has_size_bytes();
  size_bytes_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.size_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)
