// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memory_leak_report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "memory_leak_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace metrics {
class MemoryLeakReportProto_ParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryLeakReportProto_Params> {
} _MemoryLeakReportProto_Params_default_instance_;
class MemoryLeakReportProto_AllocationBreakdownDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryLeakReportProto_AllocationBreakdown> {
} _MemoryLeakReportProto_AllocationBreakdown_default_instance_;
class MemoryLeakReportProto_MemoryUsageInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryLeakReportProto_MemoryUsageInfo> {
} _MemoryLeakReportProto_MemoryUsageInfo_default_instance_;
class MemoryLeakReportProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryLeakReportProto> {
} _MemoryLeakReportProto_default_instance_;

namespace protobuf_memory_5fleak_5freport_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _MemoryLeakReportProto_Params_default_instance_.Shutdown();
  _MemoryLeakReportProto_AllocationBreakdown_default_instance_.Shutdown();
  _MemoryLeakReportProto_MemoryUsageInfo_default_instance_.Shutdown();
  _MemoryLeakReportProto_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MemoryLeakReportProto_Params_default_instance_.DefaultConstruct();
  _MemoryLeakReportProto_AllocationBreakdown_default_instance_.DefaultConstruct();
  _MemoryLeakReportProto_MemoryUsageInfo_default_instance_.DefaultConstruct();
  _MemoryLeakReportProto_default_instance_.DefaultConstruct();
  _MemoryLeakReportProto_default_instance_.get_mutable()->params_ = const_cast< ::metrics::MemoryLeakReportProto_Params*>(
      ::metrics::MemoryLeakReportProto_Params::internal_default_instance());
  _MemoryLeakReportProto_default_instance_.get_mutable()->memory_usage_info_ = const_cast< ::metrics::MemoryLeakReportProto_MemoryUsageInfo*>(
      ::metrics::MemoryLeakReportProto_MemoryUsageInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_memory_5fleak_5freport_2eproto

bool MemoryLeakReportProto_ProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::UNKNOWN_PROCESS;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::BROWSER_PROCESS;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::RENDERER_PROCESS;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::ProcessType_MIN;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::ProcessType_MAX;
const int MemoryLeakReportProto::ProcessType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto_Params::kSamplingRateFieldNumber;
const int MemoryLeakReportProto_Params::kMaxStackDepthFieldNumber;
const int MemoryLeakReportProto_Params::kAnalysisIntervalBytesFieldNumber;
const int MemoryLeakReportProto_Params::kSizeSuspicionThresholdFieldNumber;
const int MemoryLeakReportProto_Params::kCallStackSuspicionThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto_Params::MemoryLeakReportProto_Params()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_memory_5fleak_5freport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.Params)
}
MemoryLeakReportProto_Params::MemoryLeakReportProto_Params(const MemoryLeakReportProto_Params& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sampling_rate_, &from.sampling_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
    reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.Params)
}

void MemoryLeakReportProto_Params::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sampling_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
      reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
}

MemoryLeakReportProto_Params::~MemoryLeakReportProto_Params() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.Params)
  SharedDtor();
}

void MemoryLeakReportProto_Params::SharedDtor() {
}

void MemoryLeakReportProto_Params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemoryLeakReportProto_Params& MemoryLeakReportProto_Params::default_instance() {
  protobuf_memory_5fleak_5freport_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryLeakReportProto_Params* MemoryLeakReportProto_Params::New(::google::protobuf::Arena* arena) const {
  MemoryLeakReportProto_Params* n = new MemoryLeakReportProto_Params;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryLeakReportProto_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.Params)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&sampling_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
        reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryLeakReportProto_Params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.Params)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float sampling_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_sampling_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sampling_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_stack_depth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_max_stack_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_stack_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 analysis_interval_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_analysis_interval_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &analysis_interval_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size_suspicion_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_size_suspicion_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_suspicion_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 call_stack_suspicion_threshold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_call_stack_suspicion_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_stack_suspicion_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.Params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.Params)
  return false;
#undef DO_
}

void MemoryLeakReportProto_Params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.Params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float sampling_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sampling_rate(), output);
  }

  // optional uint32 max_stack_depth = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_stack_depth(), output);
  }

  // optional uint64 analysis_interval_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->analysis_interval_bytes(), output);
  }

  // optional uint32 size_suspicion_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size_suspicion_threshold(), output);
  }

  // optional uint32 call_stack_suspicion_threshold = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->call_stack_suspicion_threshold(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.Params)
}

size_t MemoryLeakReportProto_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.Params)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional float sampling_rate = 1;
    if (has_sampling_rate()) {
      total_size += 1 + 4;
    }

    // optional uint32 max_stack_depth = 2;
    if (has_max_stack_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_stack_depth());
    }

    // optional uint64 analysis_interval_bytes = 3;
    if (has_analysis_interval_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->analysis_interval_bytes());
    }

    // optional uint32 size_suspicion_threshold = 4;
    if (has_size_suspicion_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_suspicion_threshold());
    }

    // optional uint32 call_stack_suspicion_threshold = 5;
    if (has_call_stack_suspicion_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_stack_suspicion_threshold());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLeakReportProto_Params::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto_Params*>(&from));
}

void MemoryLeakReportProto_Params::MergeFrom(const MemoryLeakReportProto_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      sampling_rate_ = from.sampling_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_stack_depth_ = from.max_stack_depth_;
    }
    if (cached_has_bits & 0x00000004u) {
      analysis_interval_bytes_ = from.analysis_interval_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_suspicion_threshold_ = from.size_suspicion_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      call_stack_suspicion_threshold_ = from.call_stack_suspicion_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryLeakReportProto_Params::CopyFrom(const MemoryLeakReportProto_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_Params::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_Params::Swap(MemoryLeakReportProto_Params* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryLeakReportProto_Params::InternalSwap(MemoryLeakReportProto_Params* other) {
  std::swap(sampling_rate_, other->sampling_rate_);
  std::swap(max_stack_depth_, other->max_stack_depth_);
  std::swap(analysis_interval_bytes_, other->analysis_interval_bytes_);
  std::swap(size_suspicion_threshold_, other->size_suspicion_threshold_);
  std::swap(call_stack_suspicion_threshold_, other->call_stack_suspicion_threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MemoryLeakReportProto_Params::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.Params";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLeakReportProto_Params

// optional float sampling_rate = 1;
bool MemoryLeakReportProto_Params::has_sampling_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryLeakReportProto_Params::set_has_sampling_rate() {
  _has_bits_[0] |= 0x00000001u;
}
void MemoryLeakReportProto_Params::clear_has_sampling_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemoryLeakReportProto_Params::clear_sampling_rate() {
  sampling_rate_ = 0;
  clear_has_sampling_rate();
}
float MemoryLeakReportProto_Params::sampling_rate() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.sampling_rate)
  return sampling_rate_;
}
void MemoryLeakReportProto_Params::set_sampling_rate(float value) {
  set_has_sampling_rate();
  sampling_rate_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.sampling_rate)
}

// optional uint32 max_stack_depth = 2;
bool MemoryLeakReportProto_Params::has_max_stack_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryLeakReportProto_Params::set_has_max_stack_depth() {
  _has_bits_[0] |= 0x00000002u;
}
void MemoryLeakReportProto_Params::clear_has_max_stack_depth() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemoryLeakReportProto_Params::clear_max_stack_depth() {
  max_stack_depth_ = 0u;
  clear_has_max_stack_depth();
}
::google::protobuf::uint32 MemoryLeakReportProto_Params::max_stack_depth() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.max_stack_depth)
  return max_stack_depth_;
}
void MemoryLeakReportProto_Params::set_max_stack_depth(::google::protobuf::uint32 value) {
  set_has_max_stack_depth();
  max_stack_depth_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.max_stack_depth)
}

// optional uint64 analysis_interval_bytes = 3;
bool MemoryLeakReportProto_Params::has_analysis_interval_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemoryLeakReportProto_Params::set_has_analysis_interval_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
void MemoryLeakReportProto_Params::clear_has_analysis_interval_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
void MemoryLeakReportProto_Params::clear_analysis_interval_bytes() {
  analysis_interval_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_analysis_interval_bytes();
}
::google::protobuf::uint64 MemoryLeakReportProto_Params::analysis_interval_bytes() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.analysis_interval_bytes)
  return analysis_interval_bytes_;
}
void MemoryLeakReportProto_Params::set_analysis_interval_bytes(::google::protobuf::uint64 value) {
  set_has_analysis_interval_bytes();
  analysis_interval_bytes_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.analysis_interval_bytes)
}

// optional uint32 size_suspicion_threshold = 4;
bool MemoryLeakReportProto_Params::has_size_suspicion_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MemoryLeakReportProto_Params::set_has_size_suspicion_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void MemoryLeakReportProto_Params::clear_has_size_suspicion_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void MemoryLeakReportProto_Params::clear_size_suspicion_threshold() {
  size_suspicion_threshold_ = 0u;
  clear_has_size_suspicion_threshold();
}
::google::protobuf::uint32 MemoryLeakReportProto_Params::size_suspicion_threshold() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.size_suspicion_threshold)
  return size_suspicion_threshold_;
}
void MemoryLeakReportProto_Params::set_size_suspicion_threshold(::google::protobuf::uint32 value) {
  set_has_size_suspicion_threshold();
  size_suspicion_threshold_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.size_suspicion_threshold)
}

// optional uint32 call_stack_suspicion_threshold = 5;
bool MemoryLeakReportProto_Params::has_call_stack_suspicion_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MemoryLeakReportProto_Params::set_has_call_stack_suspicion_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
void MemoryLeakReportProto_Params::clear_has_call_stack_suspicion_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
void MemoryLeakReportProto_Params::clear_call_stack_suspicion_threshold() {
  call_stack_suspicion_threshold_ = 0u;
  clear_has_call_stack_suspicion_threshold();
}
::google::protobuf::uint32 MemoryLeakReportProto_Params::call_stack_suspicion_threshold() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.call_stack_suspicion_threshold)
  return call_stack_suspicion_threshold_;
}
void MemoryLeakReportProto_Params::set_call_stack_suspicion_threshold(::google::protobuf::uint32 value) {
  set_has_call_stack_suspicion_threshold();
  call_stack_suspicion_threshold_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.call_stack_suspicion_threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto_AllocationBreakdown::kCountsBySizeFieldNumber;
const int MemoryLeakReportProto_AllocationBreakdown::kCountForCallStackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_memory_5fleak_5freport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
}
MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown(const MemoryLeakReportProto_AllocationBreakdown& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      counts_by_size_(from.counts_by_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_for_call_stack_ = from.count_for_call_stack_;
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
}

void MemoryLeakReportProto_AllocationBreakdown::SharedCtor() {
  _cached_size_ = 0;
  count_for_call_stack_ = 0u;
}

MemoryLeakReportProto_AllocationBreakdown::~MemoryLeakReportProto_AllocationBreakdown() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
  SharedDtor();
}

void MemoryLeakReportProto_AllocationBreakdown::SharedDtor() {
}

void MemoryLeakReportProto_AllocationBreakdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemoryLeakReportProto_AllocationBreakdown& MemoryLeakReportProto_AllocationBreakdown::default_instance() {
  protobuf_memory_5fleak_5freport_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryLeakReportProto_AllocationBreakdown* MemoryLeakReportProto_AllocationBreakdown::New(::google::protobuf::Arena* arena) const {
  MemoryLeakReportProto_AllocationBreakdown* n = new MemoryLeakReportProto_AllocationBreakdown;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryLeakReportProto_AllocationBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  counts_by_size_.Clear();
  count_for_call_stack_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryLeakReportProto_AllocationBreakdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 counts_by_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_counts_by_size())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_counts_by_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count_for_call_stack = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count_for_call_stack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_for_call_stack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.AllocationBreakdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.AllocationBreakdown)
  return false;
#undef DO_
}

void MemoryLeakReportProto_AllocationBreakdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 counts_by_size = 1;
  for (int i = 0, n = this->counts_by_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->counts_by_size(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 count_for_call_stack = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_for_call_stack(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.AllocationBreakdown)
}

size_t MemoryLeakReportProto_AllocationBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated uint32 counts_by_size = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->counts_by_size_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->counts_by_size_size());
    total_size += data_size;
  }

  // optional uint32 count_for_call_stack = 2;
  if (has_count_for_call_stack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_for_call_stack());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLeakReportProto_AllocationBreakdown::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto_AllocationBreakdown*>(&from));
}

void MemoryLeakReportProto_AllocationBreakdown::MergeFrom(const MemoryLeakReportProto_AllocationBreakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counts_by_size_.MergeFrom(from.counts_by_size_);
  if (from.has_count_for_call_stack()) {
    set_count_for_call_stack(from.count_for_call_stack());
  }
}

void MemoryLeakReportProto_AllocationBreakdown::CopyFrom(const MemoryLeakReportProto_AllocationBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_AllocationBreakdown::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_AllocationBreakdown::Swap(MemoryLeakReportProto_AllocationBreakdown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryLeakReportProto_AllocationBreakdown::InternalSwap(MemoryLeakReportProto_AllocationBreakdown* other) {
  counts_by_size_.InternalSwap(&other->counts_by_size_);
  std::swap(count_for_call_stack_, other->count_for_call_stack_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MemoryLeakReportProto_AllocationBreakdown::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.AllocationBreakdown";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLeakReportProto_AllocationBreakdown

// repeated uint32 counts_by_size = 1;
int MemoryLeakReportProto_AllocationBreakdown::counts_by_size_size() const {
  return counts_by_size_.size();
}
void MemoryLeakReportProto_AllocationBreakdown::clear_counts_by_size() {
  counts_by_size_.Clear();
}
::google::protobuf::uint32 MemoryLeakReportProto_AllocationBreakdown::counts_by_size(int index) const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
  return counts_by_size_.Get(index);
}
void MemoryLeakReportProto_AllocationBreakdown::set_counts_by_size(int index, ::google::protobuf::uint32 value) {
  counts_by_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
}
void MemoryLeakReportProto_AllocationBreakdown::add_counts_by_size(::google::protobuf::uint32 value) {
  counts_by_size_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MemoryLeakReportProto_AllocationBreakdown::counts_by_size() const {
  // @@protoc_insertion_point(field_list:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
  return counts_by_size_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MemoryLeakReportProto_AllocationBreakdown::mutable_counts_by_size() {
  // @@protoc_insertion_point(field_mutable_list:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
  return &counts_by_size_;
}

// optional uint32 count_for_call_stack = 2;
bool MemoryLeakReportProto_AllocationBreakdown::has_count_for_call_stack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryLeakReportProto_AllocationBreakdown::set_has_count_for_call_stack() {
  _has_bits_[0] |= 0x00000001u;
}
void MemoryLeakReportProto_AllocationBreakdown::clear_has_count_for_call_stack() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemoryLeakReportProto_AllocationBreakdown::clear_count_for_call_stack() {
  count_for_call_stack_ = 0u;
  clear_has_count_for_call_stack();
}
::google::protobuf::uint32 MemoryLeakReportProto_AllocationBreakdown::count_for_call_stack() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.AllocationBreakdown.count_for_call_stack)
  return count_for_call_stack_;
}
void MemoryLeakReportProto_AllocationBreakdown::set_count_for_call_stack(::google::protobuf::uint32 value) {
  set_has_count_for_call_stack();
  count_for_call_stack_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.AllocationBreakdown.count_for_call_stack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto_MemoryUsageInfo::kAvailableRamMbFieldNumber;
const int MemoryLeakReportProto_MemoryUsageInfo::kChromeRamUsageMbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_memory_5fleak_5freport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}
MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo(const MemoryLeakReportProto_MemoryUsageInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&available_ram_mb_, &from.available_ram_mb_,
    static_cast<size_t>(reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
    reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}

void MemoryLeakReportProto_MemoryUsageInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&available_ram_mb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
      reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
}

MemoryLeakReportProto_MemoryUsageInfo::~MemoryLeakReportProto_MemoryUsageInfo() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  SharedDtor();
}

void MemoryLeakReportProto_MemoryUsageInfo::SharedDtor() {
}

void MemoryLeakReportProto_MemoryUsageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemoryLeakReportProto_MemoryUsageInfo& MemoryLeakReportProto_MemoryUsageInfo::default_instance() {
  protobuf_memory_5fleak_5freport_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryLeakReportProto_MemoryUsageInfo* MemoryLeakReportProto_MemoryUsageInfo::New(::google::protobuf::Arena* arena) const {
  MemoryLeakReportProto_MemoryUsageInfo* n = new MemoryLeakReportProto_MemoryUsageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryLeakReportProto_MemoryUsageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&available_ram_mb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
        reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryLeakReportProto_MemoryUsageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 available_ram_mb = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_available_ram_mb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_ram_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chrome_ram_usage_mb = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chrome_ram_usage_mb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chrome_ram_usage_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  return false;
#undef DO_
}

void MemoryLeakReportProto_MemoryUsageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 available_ram_mb = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->available_ram_mb(), output);
  }

  // optional uint64 chrome_ram_usage_mb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chrome_ram_usage_mb(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}

size_t MemoryLeakReportProto_MemoryUsageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 available_ram_mb = 1;
    if (has_available_ram_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->available_ram_mb());
    }

    // optional uint64 chrome_ram_usage_mb = 2;
    if (has_chrome_ram_usage_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chrome_ram_usage_mb());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLeakReportProto_MemoryUsageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto_MemoryUsageInfo*>(&from));
}

void MemoryLeakReportProto_MemoryUsageInfo::MergeFrom(const MemoryLeakReportProto_MemoryUsageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      available_ram_mb_ = from.available_ram_mb_;
    }
    if (cached_has_bits & 0x00000002u) {
      chrome_ram_usage_mb_ = from.chrome_ram_usage_mb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryLeakReportProto_MemoryUsageInfo::CopyFrom(const MemoryLeakReportProto_MemoryUsageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_MemoryUsageInfo::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_MemoryUsageInfo::Swap(MemoryLeakReportProto_MemoryUsageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryLeakReportProto_MemoryUsageInfo::InternalSwap(MemoryLeakReportProto_MemoryUsageInfo* other) {
  std::swap(available_ram_mb_, other->available_ram_mb_);
  std::swap(chrome_ram_usage_mb_, other->chrome_ram_usage_mb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MemoryLeakReportProto_MemoryUsageInfo::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.MemoryUsageInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLeakReportProto_MemoryUsageInfo

// optional uint64 available_ram_mb = 1;
bool MemoryLeakReportProto_MemoryUsageInfo::has_available_ram_mb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryLeakReportProto_MemoryUsageInfo::set_has_available_ram_mb() {
  _has_bits_[0] |= 0x00000001u;
}
void MemoryLeakReportProto_MemoryUsageInfo::clear_has_available_ram_mb() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemoryLeakReportProto_MemoryUsageInfo::clear_available_ram_mb() {
  available_ram_mb_ = GOOGLE_ULONGLONG(0);
  clear_has_available_ram_mb();
}
::google::protobuf::uint64 MemoryLeakReportProto_MemoryUsageInfo::available_ram_mb() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.MemoryUsageInfo.available_ram_mb)
  return available_ram_mb_;
}
void MemoryLeakReportProto_MemoryUsageInfo::set_available_ram_mb(::google::protobuf::uint64 value) {
  set_has_available_ram_mb();
  available_ram_mb_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.MemoryUsageInfo.available_ram_mb)
}

// optional uint64 chrome_ram_usage_mb = 2;
bool MemoryLeakReportProto_MemoryUsageInfo::has_chrome_ram_usage_mb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryLeakReportProto_MemoryUsageInfo::set_has_chrome_ram_usage_mb() {
  _has_bits_[0] |= 0x00000002u;
}
void MemoryLeakReportProto_MemoryUsageInfo::clear_has_chrome_ram_usage_mb() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemoryLeakReportProto_MemoryUsageInfo::clear_chrome_ram_usage_mb() {
  chrome_ram_usage_mb_ = GOOGLE_ULONGLONG(0);
  clear_has_chrome_ram_usage_mb();
}
::google::protobuf::uint64 MemoryLeakReportProto_MemoryUsageInfo::chrome_ram_usage_mb() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.MemoryUsageInfo.chrome_ram_usage_mb)
  return chrome_ram_usage_mb_;
}
void MemoryLeakReportProto_MemoryUsageInfo::set_chrome_ram_usage_mb(::google::protobuf::uint64 value) {
  set_has_chrome_ram_usage_mb();
  chrome_ram_usage_mb_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.MemoryUsageInfo.chrome_ram_usage_mb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto::kCallStackFieldNumber;
const int MemoryLeakReportProto::kSizeBytesFieldNumber;
const int MemoryLeakReportProto::kParamsFieldNumber;
const int MemoryLeakReportProto::kSourceProcessFieldNumber;
const int MemoryLeakReportProto::kBuildIdFieldNumber;
const int MemoryLeakReportProto::kAllocBreakdownHistoryFieldNumber;
const int MemoryLeakReportProto::kNumRisingIntervalsFieldNumber;
const int MemoryLeakReportProto::kNumAllocsIncreaseFieldNumber;
const int MemoryLeakReportProto::kMemoryUsageInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto::MemoryLeakReportProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_memory_5fleak_5freport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto)
}
MemoryLeakReportProto::MemoryLeakReportProto(const MemoryLeakReportProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      call_stack_(from.call_stack_),
      alloc_breakdown_history_(from.alloc_breakdown_history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  build_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_id()) {
    build_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_id_);
  }
  if (from.has_params()) {
    params_ = new ::metrics::MemoryLeakReportProto_Params(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_memory_usage_info()) {
    memory_usage_info_ = new ::metrics::MemoryLeakReportProto_MemoryUsageInfo(*from.memory_usage_info_);
  } else {
    memory_usage_info_ = NULL;
  }
  ::memcpy(&size_bytes_, &from.size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_allocs_increase_) -
    reinterpret_cast<char*>(&size_bytes_)) + sizeof(num_allocs_increase_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto)
}

void MemoryLeakReportProto::SharedCtor() {
  _cached_size_ = 0;
  build_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_allocs_increase_) -
      reinterpret_cast<char*>(&params_)) + sizeof(num_allocs_increase_));
}

MemoryLeakReportProto::~MemoryLeakReportProto() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto)
  SharedDtor();
}

void MemoryLeakReportProto::SharedDtor() {
  build_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete params_;
  }
  if (this != internal_default_instance()) {
    delete memory_usage_info_;
  }
}

void MemoryLeakReportProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemoryLeakReportProto& MemoryLeakReportProto::default_instance() {
  protobuf_memory_5fleak_5freport_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryLeakReportProto* MemoryLeakReportProto::New(::google::protobuf::Arena* arena) const {
  MemoryLeakReportProto* n = new MemoryLeakReportProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryLeakReportProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto)
  call_stack_.Clear();
  alloc_breakdown_history_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_build_id()) {
      GOOGLE_DCHECK(!build_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*build_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_params()) {
      GOOGLE_DCHECK(params_ != NULL);
      params_->::metrics::MemoryLeakReportProto_Params::Clear();
    }
    if (has_memory_usage_info()) {
      GOOGLE_DCHECK(memory_usage_info_ != NULL);
      memory_usage_info_->::metrics::MemoryLeakReportProto_MemoryUsageInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_allocs_increase_) -
        reinterpret_cast<char*>(&size_bytes_)) + sizeof(num_allocs_increase_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryLeakReportProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 call_stack = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_call_stack())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_call_stack())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.MemoryLeakReportProto.Params params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alloc_breakdown_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::MemoryLeakReportProto_ProcessType_IsValid(value)) {
            set_source_process(static_cast< ::metrics::MemoryLeakReportProto_ProcessType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes build_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_build_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_rising_intervals = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_num_rising_intervals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rising_intervals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_allocs_increase = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_num_allocs_increase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_allocs_increase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_usage_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto)
  return false;
#undef DO_
}

void MemoryLeakReportProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 call_stack = 1;
  for (int i = 0, n = this->call_stack_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->call_stack(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 size_bytes = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size_bytes(), output);
  }

  // optional .metrics.MemoryLeakReportProto.Params params = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->params_, output);
  }

  // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alloc_breakdown_history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->alloc_breakdown_history(static_cast<int>(i)), output);
  }

  // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->source_process(), output);
  }

  // optional bytes build_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->build_id(), output);
  }

  // optional uint32 num_rising_intervals = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_rising_intervals(), output);
  }

  // optional uint32 num_allocs_increase = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_allocs_increase(), output);
  }

  // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->memory_usage_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto)
}

size_t MemoryLeakReportProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated uint64 call_stack = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->call_stack_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->call_stack_size());
    total_size += data_size;
  }

  // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->alloc_breakdown_history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alloc_breakdown_history(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes build_id = 6;
    if (has_build_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->build_id());
    }

    // optional .metrics.MemoryLeakReportProto.Params params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->params_);
    }

    // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
    if (has_memory_usage_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memory_usage_info_);
    }

    // optional uint32 size_bytes = 2;
    if (has_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_bytes());
    }

    // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
    if (has_source_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_process());
    }

    // optional uint32 num_rising_intervals = 7;
    if (has_num_rising_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_rising_intervals());
    }

    // optional uint32 num_allocs_increase = 8;
    if (has_num_allocs_increase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_allocs_increase());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLeakReportProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto*>(&from));
}

void MemoryLeakReportProto::MergeFrom(const MemoryLeakReportProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  call_stack_.MergeFrom(from.call_stack_);
  alloc_breakdown_history_.MergeFrom(from.alloc_breakdown_history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_build_id();
      build_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_params()->::metrics::MemoryLeakReportProto_Params::MergeFrom(from.params());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_memory_usage_info()->::metrics::MemoryLeakReportProto_MemoryUsageInfo::MergeFrom(from.memory_usage_info());
    }
    if (cached_has_bits & 0x00000008u) {
      size_bytes_ = from.size_bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_process_ = from.source_process_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_rising_intervals_ = from.num_rising_intervals_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_allocs_increase_ = from.num_allocs_increase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryLeakReportProto::CopyFrom(const MemoryLeakReportProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto::Swap(MemoryLeakReportProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryLeakReportProto::InternalSwap(MemoryLeakReportProto* other) {
  call_stack_.InternalSwap(&other->call_stack_);
  alloc_breakdown_history_.InternalSwap(&other->alloc_breakdown_history_);
  build_id_.Swap(&other->build_id_);
  std::swap(params_, other->params_);
  std::swap(memory_usage_info_, other->memory_usage_info_);
  std::swap(size_bytes_, other->size_bytes_);
  std::swap(source_process_, other->source_process_);
  std::swap(num_rising_intervals_, other->num_rising_intervals_);
  std::swap(num_allocs_increase_, other->num_allocs_increase_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MemoryLeakReportProto::GetTypeName() const {
  return "metrics.MemoryLeakReportProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLeakReportProto

// repeated uint64 call_stack = 1;
int MemoryLeakReportProto::call_stack_size() const {
  return call_stack_.size();
}
void MemoryLeakReportProto::clear_call_stack() {
  call_stack_.Clear();
}
::google::protobuf::uint64 MemoryLeakReportProto::call_stack(int index) const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.call_stack)
  return call_stack_.Get(index);
}
void MemoryLeakReportProto::set_call_stack(int index, ::google::protobuf::uint64 value) {
  call_stack_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.call_stack)
}
void MemoryLeakReportProto::add_call_stack(::google::protobuf::uint64 value) {
  call_stack_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.MemoryLeakReportProto.call_stack)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MemoryLeakReportProto::call_stack() const {
  // @@protoc_insertion_point(field_list:metrics.MemoryLeakReportProto.call_stack)
  return call_stack_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MemoryLeakReportProto::mutable_call_stack() {
  // @@protoc_insertion_point(field_mutable_list:metrics.MemoryLeakReportProto.call_stack)
  return &call_stack_;
}

// optional uint32 size_bytes = 2;
bool MemoryLeakReportProto::has_size_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MemoryLeakReportProto::set_has_size_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
void MemoryLeakReportProto::clear_has_size_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
void MemoryLeakReportProto::clear_size_bytes() {
  size_bytes_ = 0u;
  clear_has_size_bytes();
}
::google::protobuf::uint32 MemoryLeakReportProto::size_bytes() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.size_bytes)
  return size_bytes_;
}
void MemoryLeakReportProto::set_size_bytes(::google::protobuf::uint32 value) {
  set_has_size_bytes();
  size_bytes_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.size_bytes)
}

// optional .metrics.MemoryLeakReportProto.Params params = 3;
bool MemoryLeakReportProto::has_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryLeakReportProto::set_has_params() {
  _has_bits_[0] |= 0x00000002u;
}
void MemoryLeakReportProto::clear_has_params() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemoryLeakReportProto::clear_params() {
  if (params_ != NULL) params_->::metrics::MemoryLeakReportProto_Params::Clear();
  clear_has_params();
}
const ::metrics::MemoryLeakReportProto_Params& MemoryLeakReportProto::params() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.params)
  return params_ != NULL ? *params_
                         : *::metrics::MemoryLeakReportProto_Params::internal_default_instance();
}
::metrics::MemoryLeakReportProto_Params* MemoryLeakReportProto::mutable_params() {
  set_has_params();
  if (params_ == NULL) {
    params_ = new ::metrics::MemoryLeakReportProto_Params;
  }
  // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.params)
  return params_;
}
::metrics::MemoryLeakReportProto_Params* MemoryLeakReportProto::release_params() {
  // @@protoc_insertion_point(field_release:metrics.MemoryLeakReportProto.params)
  clear_has_params();
  ::metrics::MemoryLeakReportProto_Params* temp = params_;
  params_ = NULL;
  return temp;
}
void MemoryLeakReportProto::set_allocated_params(::metrics::MemoryLeakReportProto_Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    set_has_params();
  } else {
    clear_has_params();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.MemoryLeakReportProto.params)
}

// optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
bool MemoryLeakReportProto::has_source_process() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MemoryLeakReportProto::set_has_source_process() {
  _has_bits_[0] |= 0x00000010u;
}
void MemoryLeakReportProto::clear_has_source_process() {
  _has_bits_[0] &= ~0x00000010u;
}
void MemoryLeakReportProto::clear_source_process() {
  source_process_ = 0;
  clear_has_source_process();
}
::metrics::MemoryLeakReportProto_ProcessType MemoryLeakReportProto::source_process() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.source_process)
  return static_cast< ::metrics::MemoryLeakReportProto_ProcessType >(source_process_);
}
void MemoryLeakReportProto::set_source_process(::metrics::MemoryLeakReportProto_ProcessType value) {
  assert(::metrics::MemoryLeakReportProto_ProcessType_IsValid(value));
  set_has_source_process();
  source_process_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.source_process)
}

// optional bytes build_id = 6;
bool MemoryLeakReportProto::has_build_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryLeakReportProto::set_has_build_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MemoryLeakReportProto::clear_has_build_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemoryLeakReportProto::clear_build_id() {
  build_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_build_id();
}
const ::std::string& MemoryLeakReportProto::build_id() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.build_id)
  return build_id_.GetNoArena();
}
void MemoryLeakReportProto::set_build_id(const ::std::string& value) {
  set_has_build_id();
  build_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.build_id)
}
#if LANG_CXX11
void MemoryLeakReportProto::set_build_id(::std::string&& value) {
  set_has_build_id();
  build_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.MemoryLeakReportProto.build_id)
}
#endif
void MemoryLeakReportProto::set_build_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_build_id();
  build_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.MemoryLeakReportProto.build_id)
}
void MemoryLeakReportProto::set_build_id(const void* value, size_t size) {
  set_has_build_id();
  build_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.MemoryLeakReportProto.build_id)
}
::std::string* MemoryLeakReportProto::mutable_build_id() {
  set_has_build_id();
  // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.build_id)
  return build_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MemoryLeakReportProto::release_build_id() {
  // @@protoc_insertion_point(field_release:metrics.MemoryLeakReportProto.build_id)
  clear_has_build_id();
  return build_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemoryLeakReportProto::set_allocated_build_id(::std::string* build_id) {
  if (build_id != NULL) {
    set_has_build_id();
  } else {
    clear_has_build_id();
  }
  build_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.MemoryLeakReportProto.build_id)
}

// repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
int MemoryLeakReportProto::alloc_breakdown_history_size() const {
  return alloc_breakdown_history_.size();
}
void MemoryLeakReportProto::clear_alloc_breakdown_history() {
  alloc_breakdown_history_.Clear();
}
const ::metrics::MemoryLeakReportProto_AllocationBreakdown& MemoryLeakReportProto::alloc_breakdown_history(int index) const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.alloc_breakdown_history)
  return alloc_breakdown_history_.Get(index);
}
::metrics::MemoryLeakReportProto_AllocationBreakdown* MemoryLeakReportProto::mutable_alloc_breakdown_history(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.alloc_breakdown_history)
  return alloc_breakdown_history_.Mutable(index);
}
::metrics::MemoryLeakReportProto_AllocationBreakdown* MemoryLeakReportProto::add_alloc_breakdown_history() {
  // @@protoc_insertion_point(field_add:metrics.MemoryLeakReportProto.alloc_breakdown_history)
  return alloc_breakdown_history_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::MemoryLeakReportProto_AllocationBreakdown >*
MemoryLeakReportProto::mutable_alloc_breakdown_history() {
  // @@protoc_insertion_point(field_mutable_list:metrics.MemoryLeakReportProto.alloc_breakdown_history)
  return &alloc_breakdown_history_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::MemoryLeakReportProto_AllocationBreakdown >&
MemoryLeakReportProto::alloc_breakdown_history() const {
  // @@protoc_insertion_point(field_list:metrics.MemoryLeakReportProto.alloc_breakdown_history)
  return alloc_breakdown_history_;
}

// optional uint32 num_rising_intervals = 7;
bool MemoryLeakReportProto::has_num_rising_intervals() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MemoryLeakReportProto::set_has_num_rising_intervals() {
  _has_bits_[0] |= 0x00000020u;
}
void MemoryLeakReportProto::clear_has_num_rising_intervals() {
  _has_bits_[0] &= ~0x00000020u;
}
void MemoryLeakReportProto::clear_num_rising_intervals() {
  num_rising_intervals_ = 0u;
  clear_has_num_rising_intervals();
}
::google::protobuf::uint32 MemoryLeakReportProto::num_rising_intervals() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.num_rising_intervals)
  return num_rising_intervals_;
}
void MemoryLeakReportProto::set_num_rising_intervals(::google::protobuf::uint32 value) {
  set_has_num_rising_intervals();
  num_rising_intervals_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.num_rising_intervals)
}

// optional uint32 num_allocs_increase = 8;
bool MemoryLeakReportProto::has_num_allocs_increase() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MemoryLeakReportProto::set_has_num_allocs_increase() {
  _has_bits_[0] |= 0x00000040u;
}
void MemoryLeakReportProto::clear_has_num_allocs_increase() {
  _has_bits_[0] &= ~0x00000040u;
}
void MemoryLeakReportProto::clear_num_allocs_increase() {
  num_allocs_increase_ = 0u;
  clear_has_num_allocs_increase();
}
::google::protobuf::uint32 MemoryLeakReportProto::num_allocs_increase() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.num_allocs_increase)
  return num_allocs_increase_;
}
void MemoryLeakReportProto::set_num_allocs_increase(::google::protobuf::uint32 value) {
  set_has_num_allocs_increase();
  num_allocs_increase_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.num_allocs_increase)
}

// optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
bool MemoryLeakReportProto::has_memory_usage_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemoryLeakReportProto::set_has_memory_usage_info() {
  _has_bits_[0] |= 0x00000004u;
}
void MemoryLeakReportProto::clear_has_memory_usage_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void MemoryLeakReportProto::clear_memory_usage_info() {
  if (memory_usage_info_ != NULL) memory_usage_info_->::metrics::MemoryLeakReportProto_MemoryUsageInfo::Clear();
  clear_has_memory_usage_info();
}
const ::metrics::MemoryLeakReportProto_MemoryUsageInfo& MemoryLeakReportProto::memory_usage_info() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.memory_usage_info)
  return memory_usage_info_ != NULL ? *memory_usage_info_
                         : *::metrics::MemoryLeakReportProto_MemoryUsageInfo::internal_default_instance();
}
::metrics::MemoryLeakReportProto_MemoryUsageInfo* MemoryLeakReportProto::mutable_memory_usage_info() {
  set_has_memory_usage_info();
  if (memory_usage_info_ == NULL) {
    memory_usage_info_ = new ::metrics::MemoryLeakReportProto_MemoryUsageInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.memory_usage_info)
  return memory_usage_info_;
}
::metrics::MemoryLeakReportProto_MemoryUsageInfo* MemoryLeakReportProto::release_memory_usage_info() {
  // @@protoc_insertion_point(field_release:metrics.MemoryLeakReportProto.memory_usage_info)
  clear_has_memory_usage_info();
  ::metrics::MemoryLeakReportProto_MemoryUsageInfo* temp = memory_usage_info_;
  memory_usage_info_ = NULL;
  return temp;
}
void MemoryLeakReportProto::set_allocated_memory_usage_info(::metrics::MemoryLeakReportProto_MemoryUsageInfo* memory_usage_info) {
  delete memory_usage_info_;
  memory_usage_info_ = memory_usage_info;
  if (memory_usage_info) {
    set_has_memory_usage_info();
  } else {
    clear_has_memory_usage_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.MemoryLeakReportProto.memory_usage_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
