// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sampled_profile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sampled_profile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace metrics {
class SampledProfileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SampledProfile> {
} _SampledProfile_default_instance_;

namespace protobuf_sampled_5fprofile_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SampledProfile_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metrics::protobuf_execution_5fcontext_2eproto::InitDefaults();
  ::metrics::protobuf_perf_5fdata_2eproto::InitDefaults();
  ::metrics::protobuf_perf_5fstat_2eproto::InitDefaults();
  ::metrics::protobuf_call_5fstack_5fprofile_2eproto::InitDefaults();
  _SampledProfile_default_instance_.DefaultConstruct();
  _SampledProfile_default_instance_.get_mutable()->perf_data_ = const_cast< ::metrics::PerfDataProto*>(
      ::metrics::PerfDataProto::internal_default_instance());
  _SampledProfile_default_instance_.get_mutable()->call_stack_profile_ = const_cast< ::metrics::CallStackProfile*>(
      ::metrics::CallStackProfile::internal_default_instance());
  _SampledProfile_default_instance_.get_mutable()->perf_stat_ = const_cast< ::metrics::PerfStatProto*>(
      ::metrics::PerfStatProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::metrics::protobuf_execution_5fcontext_2eproto::AddDescriptors();
  ::metrics::protobuf_perf_5fdata_2eproto::AddDescriptors();
  ::metrics::protobuf_perf_5fstat_2eproto::AddDescriptors();
  ::metrics::protobuf_call_5fstack_5fprofile_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_sampled_5fprofile_2eproto

bool SampledProfile_TriggerEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SampledProfile_TriggerEvent SampledProfile::UNKNOWN_TRIGGER_EVENT;
const SampledProfile_TriggerEvent SampledProfile::PERIODIC_COLLECTION;
const SampledProfile_TriggerEvent SampledProfile::RESUME_FROM_SUSPEND;
const SampledProfile_TriggerEvent SampledProfile::RESTORE_SESSION;
const SampledProfile_TriggerEvent SampledProfile::PROCESS_STARTUP;
const SampledProfile_TriggerEvent SampledProfile::JANKY_TASK;
const SampledProfile_TriggerEvent SampledProfile::THREAD_HUNG;
const SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MIN;
const SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MAX;
const int SampledProfile::TriggerEvent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampledProfile::kTriggerEventFieldNumber;
const int SampledProfile::kProcessFieldNumber;
const int SampledProfile::kThreadFieldNumber;
const int SampledProfile::kMsAfterBootFieldNumber;
const int SampledProfile::kMsAfterLoginFieldNumber;
const int SampledProfile::kSuspendDurationMsFieldNumber;
const int SampledProfile::kMsAfterResumeFieldNumber;
const int SampledProfile::kNumTabsRestoredFieldNumber;
const int SampledProfile::kMsAfterRestoreFieldNumber;
const int SampledProfile::kPerfDataFieldNumber;
const int SampledProfile::kCallStackProfileFieldNumber;
const int SampledProfile::kPerfStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampledProfile::SampledProfile()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sampled_5fprofile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SampledProfile)
}
SampledProfile::SampledProfile(const SampledProfile& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_perf_data()) {
    perf_data_ = new ::metrics::PerfDataProto(*from.perf_data_);
  } else {
    perf_data_ = NULL;
  }
  if (from.has_call_stack_profile()) {
    call_stack_profile_ = new ::metrics::CallStackProfile(*from.call_stack_profile_);
  } else {
    call_stack_profile_ = NULL;
  }
  if (from.has_perf_stat()) {
    perf_stat_ = new ::metrics::PerfStatProto(*from.perf_stat_);
  } else {
    perf_stat_ = NULL;
  }
  ::memcpy(&ms_after_boot_, &from.ms_after_boot_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_) -
    reinterpret_cast<char*>(&ms_after_boot_)) + sizeof(thread_));
  // @@protoc_insertion_point(copy_constructor:metrics.SampledProfile)
}

void SampledProfile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&perf_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_) -
      reinterpret_cast<char*>(&perf_data_)) + sizeof(thread_));
}

SampledProfile::~SampledProfile() {
  // @@protoc_insertion_point(destructor:metrics.SampledProfile)
  SharedDtor();
}

void SampledProfile::SharedDtor() {
  if (this != internal_default_instance()) {
    delete perf_data_;
  }
  if (this != internal_default_instance()) {
    delete call_stack_profile_;
  }
  if (this != internal_default_instance()) {
    delete perf_stat_;
  }
}

void SampledProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SampledProfile& SampledProfile::default_instance() {
  protobuf_sampled_5fprofile_2eproto::InitDefaults();
  return *internal_default_instance();
}

SampledProfile* SampledProfile::New(::google::protobuf::Arena* arena) const {
  SampledProfile* n = new SampledProfile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampledProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SampledProfile)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_perf_data()) {
      GOOGLE_DCHECK(perf_data_ != NULL);
      perf_data_->::metrics::PerfDataProto::Clear();
    }
    if (has_call_stack_profile()) {
      GOOGLE_DCHECK(call_stack_profile_ != NULL);
      call_stack_profile_->::metrics::CallStackProfile::Clear();
    }
    if (has_perf_stat()) {
      GOOGLE_DCHECK(perf_stat_ != NULL);
      perf_stat_->::metrics::PerfStatProto::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&ms_after_boot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suspend_duration_ms_) -
        reinterpret_cast<char*>(&ms_after_boot_)) + sizeof(suspend_duration_ms_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&ms_after_resume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thread_) -
        reinterpret_cast<char*>(&ms_after_resume_)) + sizeof(thread_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SampledProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.SampledProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SampledProfile_TriggerEvent_IsValid(value)) {
            set_trigger_event(static_cast< ::metrics::SampledProfile_TriggerEvent >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_boot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ms_after_boot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_boot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_login = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ms_after_login();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_login_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto perf_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_perf_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 suspend_duration_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_suspend_duration_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &suspend_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_resume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ms_after_resume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_resume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_tabs_restored = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_num_tabs_restored();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tabs_restored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_restore = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_ms_after_restore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_restore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CallStackProfile call_stack_profile = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_stack_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfStatProto perf_stat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_perf_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.Process process = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::Process_IsValid(value)) {
            set_process(static_cast< ::metrics::Process >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.Thread thread = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::Thread_IsValid(value)) {
            set_thread(static_cast< ::metrics::Thread >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SampledProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SampledProfile)
  return false;
#undef DO_
}

void SampledProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SampledProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trigger_event(), output);
  }

  // optional int64 ms_after_boot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ms_after_boot(), output);
  }

  // optional int64 ms_after_login = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ms_after_login(), output);
  }

  // optional .metrics.PerfDataProto perf_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->perf_data_, output);
  }

  // optional int64 suspend_duration_ms = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->suspend_duration_ms(), output);
  }

  // optional int64 ms_after_resume = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ms_after_resume(), output);
  }

  // optional int32 num_tabs_restored = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_tabs_restored(), output);
  }

  // optional int64 ms_after_restore = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->ms_after_restore(), output);
  }

  // optional .metrics.CallStackProfile call_stack_profile = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->call_stack_profile_, output);
  }

  // optional .metrics.PerfStatProto perf_stat = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->perf_stat_, output);
  }

  // optional .metrics.Process process = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->process(), output);
  }

  // optional .metrics.Thread thread = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->thread(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SampledProfile)
}

size_t SampledProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SampledProfile)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .metrics.PerfDataProto perf_data = 4;
    if (has_perf_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->perf_data_);
    }

    // optional .metrics.CallStackProfile call_stack_profile = 9;
    if (has_call_stack_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->call_stack_profile_);
    }

    // optional .metrics.PerfStatProto perf_stat = 10;
    if (has_perf_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->perf_stat_);
    }

    // optional int64 ms_after_boot = 2;
    if (has_ms_after_boot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_boot());
    }

    // optional int64 ms_after_login = 3;
    if (has_ms_after_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_login());
    }

    // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
    if (has_trigger_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_event());
    }

    // optional int32 num_tabs_restored = 7;
    if (has_num_tabs_restored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_tabs_restored());
    }

    // optional int64 suspend_duration_ms = 5;
    if (has_suspend_duration_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->suspend_duration_ms());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int64 ms_after_resume = 6;
    if (has_ms_after_resume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_resume());
    }

    // optional int64 ms_after_restore = 8;
    if (has_ms_after_restore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_restore());
    }

    // optional .metrics.Process process = 11;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->process());
    }

    // optional .metrics.Thread thread = 12;
    if (has_thread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->thread());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampledProfile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SampledProfile*>(&from));
}

void SampledProfile::MergeFrom(const SampledProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SampledProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_perf_data()->::metrics::PerfDataProto::MergeFrom(from.perf_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_call_stack_profile()->::metrics::CallStackProfile::MergeFrom(from.call_stack_profile());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_perf_stat()->::metrics::PerfStatProto::MergeFrom(from.perf_stat());
    }
    if (cached_has_bits & 0x00000008u) {
      ms_after_boot_ = from.ms_after_boot_;
    }
    if (cached_has_bits & 0x00000010u) {
      ms_after_login_ = from.ms_after_login_;
    }
    if (cached_has_bits & 0x00000020u) {
      trigger_event_ = from.trigger_event_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_tabs_restored_ = from.num_tabs_restored_;
    }
    if (cached_has_bits & 0x00000080u) {
      suspend_duration_ms_ = from.suspend_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      ms_after_resume_ = from.ms_after_resume_;
    }
    if (cached_has_bits & 0x00000200u) {
      ms_after_restore_ = from.ms_after_restore_;
    }
    if (cached_has_bits & 0x00000400u) {
      process_ = from.process_;
    }
    if (cached_has_bits & 0x00000800u) {
      thread_ = from.thread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SampledProfile::CopyFrom(const SampledProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SampledProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampledProfile::IsInitialized() const {
  return true;
}

void SampledProfile::Swap(SampledProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampledProfile::InternalSwap(SampledProfile* other) {
  std::swap(perf_data_, other->perf_data_);
  std::swap(call_stack_profile_, other->call_stack_profile_);
  std::swap(perf_stat_, other->perf_stat_);
  std::swap(ms_after_boot_, other->ms_after_boot_);
  std::swap(ms_after_login_, other->ms_after_login_);
  std::swap(trigger_event_, other->trigger_event_);
  std::swap(num_tabs_restored_, other->num_tabs_restored_);
  std::swap(suspend_duration_ms_, other->suspend_duration_ms_);
  std::swap(ms_after_resume_, other->ms_after_resume_);
  std::swap(ms_after_restore_, other->ms_after_restore_);
  std::swap(process_, other->process_);
  std::swap(thread_, other->thread_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SampledProfile::GetTypeName() const {
  return "metrics.SampledProfile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampledProfile

// optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
bool SampledProfile::has_trigger_event() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SampledProfile::set_has_trigger_event() {
  _has_bits_[0] |= 0x00000020u;
}
void SampledProfile::clear_has_trigger_event() {
  _has_bits_[0] &= ~0x00000020u;
}
void SampledProfile::clear_trigger_event() {
  trigger_event_ = 0;
  clear_has_trigger_event();
}
::metrics::SampledProfile_TriggerEvent SampledProfile::trigger_event() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.trigger_event)
  return static_cast< ::metrics::SampledProfile_TriggerEvent >(trigger_event_);
}
void SampledProfile::set_trigger_event(::metrics::SampledProfile_TriggerEvent value) {
  assert(::metrics::SampledProfile_TriggerEvent_IsValid(value));
  set_has_trigger_event();
  trigger_event_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.trigger_event)
}

// optional .metrics.Process process = 11;
bool SampledProfile::has_process() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SampledProfile::set_has_process() {
  _has_bits_[0] |= 0x00000400u;
}
void SampledProfile::clear_has_process() {
  _has_bits_[0] &= ~0x00000400u;
}
void SampledProfile::clear_process() {
  process_ = 0;
  clear_has_process();
}
::metrics::Process SampledProfile::process() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.process)
  return static_cast< ::metrics::Process >(process_);
}
void SampledProfile::set_process(::metrics::Process value) {
  assert(::metrics::Process_IsValid(value));
  set_has_process();
  process_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.process)
}

// optional .metrics.Thread thread = 12;
bool SampledProfile::has_thread() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SampledProfile::set_has_thread() {
  _has_bits_[0] |= 0x00000800u;
}
void SampledProfile::clear_has_thread() {
  _has_bits_[0] &= ~0x00000800u;
}
void SampledProfile::clear_thread() {
  thread_ = 0;
  clear_has_thread();
}
::metrics::Thread SampledProfile::thread() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.thread)
  return static_cast< ::metrics::Thread >(thread_);
}
void SampledProfile::set_thread(::metrics::Thread value) {
  assert(::metrics::Thread_IsValid(value));
  set_has_thread();
  thread_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.thread)
}

// optional int64 ms_after_boot = 2;
bool SampledProfile::has_ms_after_boot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SampledProfile::set_has_ms_after_boot() {
  _has_bits_[0] |= 0x00000008u;
}
void SampledProfile::clear_has_ms_after_boot() {
  _has_bits_[0] &= ~0x00000008u;
}
void SampledProfile::clear_ms_after_boot() {
  ms_after_boot_ = GOOGLE_LONGLONG(0);
  clear_has_ms_after_boot();
}
::google::protobuf::int64 SampledProfile::ms_after_boot() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_boot)
  return ms_after_boot_;
}
void SampledProfile::set_ms_after_boot(::google::protobuf::int64 value) {
  set_has_ms_after_boot();
  ms_after_boot_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_boot)
}

// optional int64 ms_after_login = 3;
bool SampledProfile::has_ms_after_login() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SampledProfile::set_has_ms_after_login() {
  _has_bits_[0] |= 0x00000010u;
}
void SampledProfile::clear_has_ms_after_login() {
  _has_bits_[0] &= ~0x00000010u;
}
void SampledProfile::clear_ms_after_login() {
  ms_after_login_ = GOOGLE_LONGLONG(0);
  clear_has_ms_after_login();
}
::google::protobuf::int64 SampledProfile::ms_after_login() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_login)
  return ms_after_login_;
}
void SampledProfile::set_ms_after_login(::google::protobuf::int64 value) {
  set_has_ms_after_login();
  ms_after_login_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_login)
}

// optional int64 suspend_duration_ms = 5;
bool SampledProfile::has_suspend_duration_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SampledProfile::set_has_suspend_duration_ms() {
  _has_bits_[0] |= 0x00000080u;
}
void SampledProfile::clear_has_suspend_duration_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
void SampledProfile::clear_suspend_duration_ms() {
  suspend_duration_ms_ = GOOGLE_LONGLONG(0);
  clear_has_suspend_duration_ms();
}
::google::protobuf::int64 SampledProfile::suspend_duration_ms() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.suspend_duration_ms)
  return suspend_duration_ms_;
}
void SampledProfile::set_suspend_duration_ms(::google::protobuf::int64 value) {
  set_has_suspend_duration_ms();
  suspend_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.suspend_duration_ms)
}

// optional int64 ms_after_resume = 6;
bool SampledProfile::has_ms_after_resume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SampledProfile::set_has_ms_after_resume() {
  _has_bits_[0] |= 0x00000100u;
}
void SampledProfile::clear_has_ms_after_resume() {
  _has_bits_[0] &= ~0x00000100u;
}
void SampledProfile::clear_ms_after_resume() {
  ms_after_resume_ = GOOGLE_LONGLONG(0);
  clear_has_ms_after_resume();
}
::google::protobuf::int64 SampledProfile::ms_after_resume() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_resume)
  return ms_after_resume_;
}
void SampledProfile::set_ms_after_resume(::google::protobuf::int64 value) {
  set_has_ms_after_resume();
  ms_after_resume_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_resume)
}

// optional int32 num_tabs_restored = 7;
bool SampledProfile::has_num_tabs_restored() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SampledProfile::set_has_num_tabs_restored() {
  _has_bits_[0] |= 0x00000040u;
}
void SampledProfile::clear_has_num_tabs_restored() {
  _has_bits_[0] &= ~0x00000040u;
}
void SampledProfile::clear_num_tabs_restored() {
  num_tabs_restored_ = 0;
  clear_has_num_tabs_restored();
}
::google::protobuf::int32 SampledProfile::num_tabs_restored() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.num_tabs_restored)
  return num_tabs_restored_;
}
void SampledProfile::set_num_tabs_restored(::google::protobuf::int32 value) {
  set_has_num_tabs_restored();
  num_tabs_restored_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.num_tabs_restored)
}

// optional int64 ms_after_restore = 8;
bool SampledProfile::has_ms_after_restore() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SampledProfile::set_has_ms_after_restore() {
  _has_bits_[0] |= 0x00000200u;
}
void SampledProfile::clear_has_ms_after_restore() {
  _has_bits_[0] &= ~0x00000200u;
}
void SampledProfile::clear_ms_after_restore() {
  ms_after_restore_ = GOOGLE_LONGLONG(0);
  clear_has_ms_after_restore();
}
::google::protobuf::int64 SampledProfile::ms_after_restore() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_restore)
  return ms_after_restore_;
}
void SampledProfile::set_ms_after_restore(::google::protobuf::int64 value) {
  set_has_ms_after_restore();
  ms_after_restore_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_restore)
}

// optional .metrics.PerfDataProto perf_data = 4;
bool SampledProfile::has_perf_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SampledProfile::set_has_perf_data() {
  _has_bits_[0] |= 0x00000001u;
}
void SampledProfile::clear_has_perf_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void SampledProfile::clear_perf_data() {
  if (perf_data_ != NULL) perf_data_->::metrics::PerfDataProto::Clear();
  clear_has_perf_data();
}
const ::metrics::PerfDataProto& SampledProfile::perf_data() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.perf_data)
  return perf_data_ != NULL ? *perf_data_
                         : *::metrics::PerfDataProto::internal_default_instance();
}
::metrics::PerfDataProto* SampledProfile::mutable_perf_data() {
  set_has_perf_data();
  if (perf_data_ == NULL) {
    perf_data_ = new ::metrics::PerfDataProto;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.perf_data)
  return perf_data_;
}
::metrics::PerfDataProto* SampledProfile::release_perf_data() {
  // @@protoc_insertion_point(field_release:metrics.SampledProfile.perf_data)
  clear_has_perf_data();
  ::metrics::PerfDataProto* temp = perf_data_;
  perf_data_ = NULL;
  return temp;
}
void SampledProfile::set_allocated_perf_data(::metrics::PerfDataProto* perf_data) {
  delete perf_data_;
  perf_data_ = perf_data;
  if (perf_data) {
    set_has_perf_data();
  } else {
    clear_has_perf_data();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.perf_data)
}

// optional .metrics.CallStackProfile call_stack_profile = 9;
bool SampledProfile::has_call_stack_profile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SampledProfile::set_has_call_stack_profile() {
  _has_bits_[0] |= 0x00000002u;
}
void SampledProfile::clear_has_call_stack_profile() {
  _has_bits_[0] &= ~0x00000002u;
}
void SampledProfile::clear_call_stack_profile() {
  if (call_stack_profile_ != NULL) call_stack_profile_->::metrics::CallStackProfile::Clear();
  clear_has_call_stack_profile();
}
const ::metrics::CallStackProfile& SampledProfile::call_stack_profile() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.call_stack_profile)
  return call_stack_profile_ != NULL ? *call_stack_profile_
                         : *::metrics::CallStackProfile::internal_default_instance();
}
::metrics::CallStackProfile* SampledProfile::mutable_call_stack_profile() {
  set_has_call_stack_profile();
  if (call_stack_profile_ == NULL) {
    call_stack_profile_ = new ::metrics::CallStackProfile;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.call_stack_profile)
  return call_stack_profile_;
}
::metrics::CallStackProfile* SampledProfile::release_call_stack_profile() {
  // @@protoc_insertion_point(field_release:metrics.SampledProfile.call_stack_profile)
  clear_has_call_stack_profile();
  ::metrics::CallStackProfile* temp = call_stack_profile_;
  call_stack_profile_ = NULL;
  return temp;
}
void SampledProfile::set_allocated_call_stack_profile(::metrics::CallStackProfile* call_stack_profile) {
  delete call_stack_profile_;
  call_stack_profile_ = call_stack_profile;
  if (call_stack_profile) {
    set_has_call_stack_profile();
  } else {
    clear_has_call_stack_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.call_stack_profile)
}

// optional .metrics.PerfStatProto perf_stat = 10;
bool SampledProfile::has_perf_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SampledProfile::set_has_perf_stat() {
  _has_bits_[0] |= 0x00000004u;
}
void SampledProfile::clear_has_perf_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
void SampledProfile::clear_perf_stat() {
  if (perf_stat_ != NULL) perf_stat_->::metrics::PerfStatProto::Clear();
  clear_has_perf_stat();
}
const ::metrics::PerfStatProto& SampledProfile::perf_stat() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.perf_stat)
  return perf_stat_ != NULL ? *perf_stat_
                         : *::metrics::PerfStatProto::internal_default_instance();
}
::metrics::PerfStatProto* SampledProfile::mutable_perf_stat() {
  set_has_perf_stat();
  if (perf_stat_ == NULL) {
    perf_stat_ = new ::metrics::PerfStatProto;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.perf_stat)
  return perf_stat_;
}
::metrics::PerfStatProto* SampledProfile::release_perf_stat() {
  // @@protoc_insertion_point(field_release:metrics.SampledProfile.perf_stat)
  clear_has_perf_stat();
  ::metrics::PerfStatProto* temp = perf_stat_;
  perf_stat_ = NULL;
  return temp;
}
void SampledProfile::set_allocated_perf_stat(::metrics::PerfStatProto* perf_stat) {
  delete perf_stat_;
  perf_stat_ = perf_stat;
  if (perf_stat) {
    set_has_perf_stat();
  } else {
    clear_has_perf_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.perf_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
