// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_user_metrics_extension.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chrome_user_metrics_extension.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace metrics {
class ChromeUserMetricsExtensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeUserMetricsExtension> {
} _ChromeUserMetricsExtension_default_instance_;

namespace protobuf_chrome_5fuser_5fmetrics_5fextension_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ChromeUserMetricsExtension_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metrics::protobuf_cast_5flogs_2eproto::InitDefaults();
  ::metrics::protobuf_histogram_5fevent_2eproto::InitDefaults();
  ::metrics::protobuf_memory_5fleak_5freport_2eproto::InitDefaults();
  ::metrics::protobuf_omnibox_5fevent_2eproto::InitDefaults();
  ::metrics::protobuf_perf_5fdata_2eproto::InitDefaults();
  ::metrics::protobuf_printer_5fevent_2eproto::InitDefaults();
  ::metrics::protobuf_reporting_5finfo_2eproto::InitDefaults();
  ::metrics::protobuf_sampled_5fprofile_2eproto::InitDefaults();
  ::metrics::protobuf_system_5fprofile_2eproto::InitDefaults();
  ::metrics::protobuf_translate_5fevent_2eproto::InitDefaults();
  ::metrics::protobuf_user_5faction_5fevent_2eproto::InitDefaults();
  _ChromeUserMetricsExtension_default_instance_.DefaultConstruct();
  _ChromeUserMetricsExtension_default_instance_.get_mutable()->system_profile_ = const_cast< ::metrics::SystemProfileProto*>(
      ::metrics::SystemProfileProto::internal_default_instance());
  _ChromeUserMetricsExtension_default_instance_.get_mutable()->cast_logs_ = const_cast< ::metrics::CastLogsProto*>(
      ::metrics::CastLogsProto::internal_default_instance());
  _ChromeUserMetricsExtension_default_instance_.get_mutable()->reporting_info_ = const_cast< ::metrics::ReportingInfo*>(
      ::metrics::ReportingInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::metrics::protobuf_cast_5flogs_2eproto::AddDescriptors();
  ::metrics::protobuf_histogram_5fevent_2eproto::AddDescriptors();
  ::metrics::protobuf_memory_5fleak_5freport_2eproto::AddDescriptors();
  ::metrics::protobuf_omnibox_5fevent_2eproto::AddDescriptors();
  ::metrics::protobuf_perf_5fdata_2eproto::AddDescriptors();
  ::metrics::protobuf_printer_5fevent_2eproto::AddDescriptors();
  ::metrics::protobuf_reporting_5finfo_2eproto::AddDescriptors();
  ::metrics::protobuf_sampled_5fprofile_2eproto::AddDescriptors();
  ::metrics::protobuf_system_5fprofile_2eproto::AddDescriptors();
  ::metrics::protobuf_translate_5fevent_2eproto::AddDescriptors();
  ::metrics::protobuf_user_5faction_5fevent_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_chrome_5fuser_5fmetrics_5fextension_2eproto

bool ChromeUserMetricsExtension_Product_IsValid(int value) {
  switch (value) {
    case 0:
    case 20:
    case 35:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::CHROME;
const ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::ANDROID_WEBVIEW;
const ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::CAST;
const ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::Product_MIN;
const ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::Product_MAX;
const int ChromeUserMetricsExtension::Product_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeUserMetricsExtension::kProductFieldNumber;
const int ChromeUserMetricsExtension::kClientIdFieldNumber;
const int ChromeUserMetricsExtension::kSessionIdFieldNumber;
const int ChromeUserMetricsExtension::kSystemProfileFieldNumber;
const int ChromeUserMetricsExtension::kUserActionEventFieldNumber;
const int ChromeUserMetricsExtension::kOmniboxEventFieldNumber;
const int ChromeUserMetricsExtension::kHistogramEventFieldNumber;
const int ChromeUserMetricsExtension::kTranslateEventFieldNumber;
const int ChromeUserMetricsExtension::kPrinterEventFieldNumber;
const int ChromeUserMetricsExtension::kPerfDataFieldNumber;
const int ChromeUserMetricsExtension::kSampledProfileFieldNumber;
const int ChromeUserMetricsExtension::kCastLogsFieldNumber;
const int ChromeUserMetricsExtension::kMemoryLeakReportFieldNumber;
const int ChromeUserMetricsExtension::kReportingInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeUserMetricsExtension::ChromeUserMetricsExtension()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chrome_5fuser_5fmetrics_5fextension_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.ChromeUserMetricsExtension)
}
ChromeUserMetricsExtension::ChromeUserMetricsExtension(const ChromeUserMetricsExtension& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_action_event_(from.user_action_event_),
      omnibox_event_(from.omnibox_event_),
      histogram_event_(from.histogram_event_),
      perf_data_(from.perf_data_),
      sampled_profile_(from.sampled_profile_),
      memory_leak_report_(from.memory_leak_report_),
      translate_event_(from.translate_event_),
      printer_event_(from.printer_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_system_profile()) {
    system_profile_ = new ::metrics::SystemProfileProto(*from.system_profile_);
  } else {
    system_profile_ = NULL;
  }
  if (from.has_cast_logs()) {
    cast_logs_ = new ::metrics::CastLogsProto(*from.cast_logs_);
  } else {
    cast_logs_ = NULL;
  }
  if (from.has_reporting_info()) {
    reporting_info_ = new ::metrics::ReportingInfo(*from.reporting_info_);
  } else {
    reporting_info_ = NULL;
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&product_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(product_));
  // @@protoc_insertion_point(copy_constructor:metrics.ChromeUserMetricsExtension)
}

void ChromeUserMetricsExtension::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&system_profile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_) -
      reinterpret_cast<char*>(&system_profile_)) + sizeof(product_));
}

ChromeUserMetricsExtension::~ChromeUserMetricsExtension() {
  // @@protoc_insertion_point(destructor:metrics.ChromeUserMetricsExtension)
  SharedDtor();
}

void ChromeUserMetricsExtension::SharedDtor() {
  if (this != internal_default_instance()) {
    delete system_profile_;
  }
  if (this != internal_default_instance()) {
    delete cast_logs_;
  }
  if (this != internal_default_instance()) {
    delete reporting_info_;
  }
}

void ChromeUserMetricsExtension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeUserMetricsExtension& ChromeUserMetricsExtension::default_instance() {
  protobuf_chrome_5fuser_5fmetrics_5fextension_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeUserMetricsExtension* ChromeUserMetricsExtension::New(::google::protobuf::Arena* arena) const {
  ChromeUserMetricsExtension* n = new ChromeUserMetricsExtension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeUserMetricsExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ChromeUserMetricsExtension)
  user_action_event_.Clear();
  omnibox_event_.Clear();
  histogram_event_.Clear();
  perf_data_.Clear();
  sampled_profile_.Clear();
  memory_leak_report_.Clear();
  translate_event_.Clear();
  printer_event_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_system_profile()) {
      GOOGLE_DCHECK(system_profile_ != NULL);
      system_profile_->::metrics::SystemProfileProto::Clear();
    }
    if (has_cast_logs()) {
      GOOGLE_DCHECK(cast_logs_ != NULL);
      cast_logs_->::metrics::CastLogsProto::Clear();
    }
    if (has_reporting_info()) {
      GOOGLE_DCHECK(reporting_info_ != NULL);
      reporting_info_->::metrics::ReportingInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&product_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(product_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeUserMetricsExtension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.ChromeUserMetricsExtension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_client_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto system_profile = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.UserActionEventProto user_action_event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_action_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.OmniboxEventProto omnibox_event = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_omnibox_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.HistogramEventProto histogram_event = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_histogram_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.PerfDataProto perf_data = 8 [deprecated = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perf_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 product = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_product();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SampledProfile sampled_profile = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sampled_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto cast_logs = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cast_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.MemoryLeakReportProto memory_leak_report = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memory_leak_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.TranslateEventProto translate_event = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_translate_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.PrinterEventProto printer_event = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_printer_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.ReportingInfo reporting_info = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reporting_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.ChromeUserMetricsExtension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.ChromeUserMetricsExtension)
  return false;
#undef DO_
}

void ChromeUserMetricsExtension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.ChromeUserMetricsExtension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->client_id(), output);
  }

  // optional int32 session_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // optional .metrics.SystemProfileProto system_profile = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->system_profile_, output);
  }

  // repeated .metrics.UserActionEventProto user_action_event = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_action_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->user_action_event(static_cast<int>(i)), output);
  }

  // repeated .metrics.OmniboxEventProto omnibox_event = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->omnibox_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->omnibox_event(static_cast<int>(i)), output);
  }

  // repeated .metrics.HistogramEventProto histogram_event = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->histogram_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->histogram_event(static_cast<int>(i)), output);
  }

  // repeated .metrics.PerfDataProto perf_data = 8 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perf_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->perf_data(static_cast<int>(i)), output);
  }

  // optional int32 product = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->product(), output);
  }

  // repeated .metrics.SampledProfile sampled_profile = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sampled_profile_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->sampled_profile(static_cast<int>(i)), output);
  }

  // optional .metrics.CastLogsProto cast_logs = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->cast_logs_, output);
  }

  // repeated .metrics.MemoryLeakReportProto memory_leak_report = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memory_leak_report_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->memory_leak_report(static_cast<int>(i)), output);
  }

  // repeated .metrics.TranslateEventProto translate_event = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->translate_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->translate_event(static_cast<int>(i)), output);
  }

  // repeated .metrics.PrinterEventProto printer_event = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->printer_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->printer_event(static_cast<int>(i)), output);
  }

  // optional .metrics.ReportingInfo reporting_info = 17;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->reporting_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.ChromeUserMetricsExtension)
}

size_t ChromeUserMetricsExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ChromeUserMetricsExtension)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .metrics.UserActionEventProto user_action_event = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->user_action_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_action_event(static_cast<int>(i)));
    }
  }

  // repeated .metrics.OmniboxEventProto omnibox_event = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->omnibox_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->omnibox_event(static_cast<int>(i)));
    }
  }

  // repeated .metrics.HistogramEventProto histogram_event = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->histogram_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->histogram_event(static_cast<int>(i)));
    }
  }

  // repeated .metrics.PerfDataProto perf_data = 8 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->perf_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perf_data(static_cast<int>(i)));
    }
  }

  // repeated .metrics.SampledProfile sampled_profile = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->sampled_profile_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sampled_profile(static_cast<int>(i)));
    }
  }

  // repeated .metrics.MemoryLeakReportProto memory_leak_report = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->memory_leak_report_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory_leak_report(static_cast<int>(i)));
    }
  }

  // repeated .metrics.TranslateEventProto translate_event = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->translate_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translate_event(static_cast<int>(i)));
    }
  }

  // repeated .metrics.PrinterEventProto printer_event = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->printer_event_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->printer_event(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .metrics.SystemProfileProto system_profile = 3;
    if (has_system_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->system_profile_);
    }

    // optional .metrics.CastLogsProto cast_logs = 12;
    if (has_cast_logs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cast_logs_);
    }

    // optional .metrics.ReportingInfo reporting_info = 17;
    if (has_reporting_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reporting_info_);
    }

    // optional fixed64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 + 8;
    }

    // optional int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 product = 10 [default = 0];
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeUserMetricsExtension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeUserMetricsExtension*>(&from));
}

void ChromeUserMetricsExtension::MergeFrom(const ChromeUserMetricsExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.ChromeUserMetricsExtension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_action_event_.MergeFrom(from.user_action_event_);
  omnibox_event_.MergeFrom(from.omnibox_event_);
  histogram_event_.MergeFrom(from.histogram_event_);
  perf_data_.MergeFrom(from.perf_data_);
  sampled_profile_.MergeFrom(from.sampled_profile_);
  memory_leak_report_.MergeFrom(from.memory_leak_report_);
  translate_event_.MergeFrom(from.translate_event_);
  printer_event_.MergeFrom(from.printer_event_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_system_profile()->::metrics::SystemProfileProto::MergeFrom(from.system_profile());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cast_logs()->::metrics::CastLogsProto::MergeFrom(from.cast_logs());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reporting_info()->::metrics::ReportingInfo::MergeFrom(from.reporting_info());
    }
    if (cached_has_bits & 0x00000008u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      product_ = from.product_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeUserMetricsExtension::CopyFrom(const ChromeUserMetricsExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ChromeUserMetricsExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeUserMetricsExtension::IsInitialized() const {
  return true;
}

void ChromeUserMetricsExtension::Swap(ChromeUserMetricsExtension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeUserMetricsExtension::InternalSwap(ChromeUserMetricsExtension* other) {
  user_action_event_.InternalSwap(&other->user_action_event_);
  omnibox_event_.InternalSwap(&other->omnibox_event_);
  histogram_event_.InternalSwap(&other->histogram_event_);
  perf_data_.InternalSwap(&other->perf_data_);
  sampled_profile_.InternalSwap(&other->sampled_profile_);
  memory_leak_report_.InternalSwap(&other->memory_leak_report_);
  translate_event_.InternalSwap(&other->translate_event_);
  printer_event_.InternalSwap(&other->printer_event_);
  std::swap(system_profile_, other->system_profile_);
  std::swap(cast_logs_, other->cast_logs_);
  std::swap(reporting_info_, other->reporting_info_);
  std::swap(client_id_, other->client_id_);
  std::swap(session_id_, other->session_id_);
  std::swap(product_, other->product_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeUserMetricsExtension::GetTypeName() const {
  return "metrics.ChromeUserMetricsExtension";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeUserMetricsExtension

// optional int32 product = 10 [default = 0];
bool ChromeUserMetricsExtension::has_product() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChromeUserMetricsExtension::set_has_product() {
  _has_bits_[0] |= 0x00000020u;
}
void ChromeUserMetricsExtension::clear_has_product() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChromeUserMetricsExtension::clear_product() {
  product_ = 0;
  clear_has_product();
}
::google::protobuf::int32 ChromeUserMetricsExtension::product() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.product)
  return product_;
}
void ChromeUserMetricsExtension::set_product(::google::protobuf::int32 value) {
  set_has_product();
  product_ = value;
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.product)
}

// optional fixed64 client_id = 1;
bool ChromeUserMetricsExtension::has_client_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChromeUserMetricsExtension::set_has_client_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ChromeUserMetricsExtension::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChromeUserMetricsExtension::clear_client_id() {
  client_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_id();
}
::google::protobuf::uint64 ChromeUserMetricsExtension::client_id() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.client_id)
  return client_id_;
}
void ChromeUserMetricsExtension::set_client_id(::google::protobuf::uint64 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.client_id)
}

// optional int32 session_id = 2;
bool ChromeUserMetricsExtension::has_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChromeUserMetricsExtension::set_has_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ChromeUserMetricsExtension::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChromeUserMetricsExtension::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
::google::protobuf::int32 ChromeUserMetricsExtension::session_id() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.session_id)
  return session_id_;
}
void ChromeUserMetricsExtension::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.session_id)
}

// optional .metrics.SystemProfileProto system_profile = 3;
bool ChromeUserMetricsExtension::has_system_profile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeUserMetricsExtension::set_has_system_profile() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeUserMetricsExtension::clear_has_system_profile() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeUserMetricsExtension::clear_system_profile() {
  if (system_profile_ != NULL) system_profile_->::metrics::SystemProfileProto::Clear();
  clear_has_system_profile();
}
const ::metrics::SystemProfileProto& ChromeUserMetricsExtension::system_profile() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.system_profile)
  return system_profile_ != NULL ? *system_profile_
                         : *::metrics::SystemProfileProto::internal_default_instance();
}
::metrics::SystemProfileProto* ChromeUserMetricsExtension::mutable_system_profile() {
  set_has_system_profile();
  if (system_profile_ == NULL) {
    system_profile_ = new ::metrics::SystemProfileProto;
  }
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.system_profile)
  return system_profile_;
}
::metrics::SystemProfileProto* ChromeUserMetricsExtension::release_system_profile() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.system_profile)
  clear_has_system_profile();
  ::metrics::SystemProfileProto* temp = system_profile_;
  system_profile_ = NULL;
  return temp;
}
void ChromeUserMetricsExtension::set_allocated_system_profile(::metrics::SystemProfileProto* system_profile) {
  delete system_profile_;
  system_profile_ = system_profile;
  if (system_profile) {
    set_has_system_profile();
  } else {
    clear_has_system_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.system_profile)
}

// repeated .metrics.UserActionEventProto user_action_event = 4;
int ChromeUserMetricsExtension::user_action_event_size() const {
  return user_action_event_.size();
}
void ChromeUserMetricsExtension::clear_user_action_event() {
  user_action_event_.Clear();
}
const ::metrics::UserActionEventProto& ChromeUserMetricsExtension::user_action_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.user_action_event)
  return user_action_event_.Get(index);
}
::metrics::UserActionEventProto* ChromeUserMetricsExtension::mutable_user_action_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.user_action_event)
  return user_action_event_.Mutable(index);
}
::metrics::UserActionEventProto* ChromeUserMetricsExtension::add_user_action_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.user_action_event)
  return user_action_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::UserActionEventProto >*
ChromeUserMetricsExtension::mutable_user_action_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.user_action_event)
  return &user_action_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::UserActionEventProto >&
ChromeUserMetricsExtension::user_action_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.user_action_event)
  return user_action_event_;
}

// repeated .metrics.OmniboxEventProto omnibox_event = 5;
int ChromeUserMetricsExtension::omnibox_event_size() const {
  return omnibox_event_.size();
}
void ChromeUserMetricsExtension::clear_omnibox_event() {
  omnibox_event_.Clear();
}
const ::metrics::OmniboxEventProto& ChromeUserMetricsExtension::omnibox_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.omnibox_event)
  return omnibox_event_.Get(index);
}
::metrics::OmniboxEventProto* ChromeUserMetricsExtension::mutable_omnibox_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.omnibox_event)
  return omnibox_event_.Mutable(index);
}
::metrics::OmniboxEventProto* ChromeUserMetricsExtension::add_omnibox_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.omnibox_event)
  return omnibox_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::OmniboxEventProto >*
ChromeUserMetricsExtension::mutable_omnibox_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.omnibox_event)
  return &omnibox_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::OmniboxEventProto >&
ChromeUserMetricsExtension::omnibox_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.omnibox_event)
  return omnibox_event_;
}

// repeated .metrics.HistogramEventProto histogram_event = 6;
int ChromeUserMetricsExtension::histogram_event_size() const {
  return histogram_event_.size();
}
void ChromeUserMetricsExtension::clear_histogram_event() {
  histogram_event_.Clear();
}
const ::metrics::HistogramEventProto& ChromeUserMetricsExtension::histogram_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.histogram_event)
  return histogram_event_.Get(index);
}
::metrics::HistogramEventProto* ChromeUserMetricsExtension::mutable_histogram_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.histogram_event)
  return histogram_event_.Mutable(index);
}
::metrics::HistogramEventProto* ChromeUserMetricsExtension::add_histogram_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.histogram_event)
  return histogram_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::HistogramEventProto >*
ChromeUserMetricsExtension::mutable_histogram_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.histogram_event)
  return &histogram_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::HistogramEventProto >&
ChromeUserMetricsExtension::histogram_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.histogram_event)
  return histogram_event_;
}

// repeated .metrics.TranslateEventProto translate_event = 15;
int ChromeUserMetricsExtension::translate_event_size() const {
  return translate_event_.size();
}
void ChromeUserMetricsExtension::clear_translate_event() {
  translate_event_.Clear();
}
const ::metrics::TranslateEventProto& ChromeUserMetricsExtension::translate_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.translate_event)
  return translate_event_.Get(index);
}
::metrics::TranslateEventProto* ChromeUserMetricsExtension::mutable_translate_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.translate_event)
  return translate_event_.Mutable(index);
}
::metrics::TranslateEventProto* ChromeUserMetricsExtension::add_translate_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.translate_event)
  return translate_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::TranslateEventProto >*
ChromeUserMetricsExtension::mutable_translate_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.translate_event)
  return &translate_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::TranslateEventProto >&
ChromeUserMetricsExtension::translate_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.translate_event)
  return translate_event_;
}

// repeated .metrics.PrinterEventProto printer_event = 16;
int ChromeUserMetricsExtension::printer_event_size() const {
  return printer_event_.size();
}
void ChromeUserMetricsExtension::clear_printer_event() {
  printer_event_.Clear();
}
const ::metrics::PrinterEventProto& ChromeUserMetricsExtension::printer_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.printer_event)
  return printer_event_.Get(index);
}
::metrics::PrinterEventProto* ChromeUserMetricsExtension::mutable_printer_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.printer_event)
  return printer_event_.Mutable(index);
}
::metrics::PrinterEventProto* ChromeUserMetricsExtension::add_printer_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.printer_event)
  return printer_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::PrinterEventProto >*
ChromeUserMetricsExtension::mutable_printer_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.printer_event)
  return &printer_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::PrinterEventProto >&
ChromeUserMetricsExtension::printer_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.printer_event)
  return printer_event_;
}

// repeated .metrics.PerfDataProto perf_data = 8 [deprecated = true];
int ChromeUserMetricsExtension::perf_data_size() const {
  return perf_data_.size();
}
void ChromeUserMetricsExtension::clear_perf_data() {
  perf_data_.Clear();
}
const ::metrics::PerfDataProto& ChromeUserMetricsExtension::perf_data(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.perf_data)
  return perf_data_.Get(index);
}
::metrics::PerfDataProto* ChromeUserMetricsExtension::mutable_perf_data(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.perf_data)
  return perf_data_.Mutable(index);
}
::metrics::PerfDataProto* ChromeUserMetricsExtension::add_perf_data() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.perf_data)
  return perf_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::PerfDataProto >*
ChromeUserMetricsExtension::mutable_perf_data() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.perf_data)
  return &perf_data_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::PerfDataProto >&
ChromeUserMetricsExtension::perf_data() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.perf_data)
  return perf_data_;
}

// repeated .metrics.SampledProfile sampled_profile = 11;
int ChromeUserMetricsExtension::sampled_profile_size() const {
  return sampled_profile_.size();
}
void ChromeUserMetricsExtension::clear_sampled_profile() {
  sampled_profile_.Clear();
}
const ::metrics::SampledProfile& ChromeUserMetricsExtension::sampled_profile(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.sampled_profile)
  return sampled_profile_.Get(index);
}
::metrics::SampledProfile* ChromeUserMetricsExtension::mutable_sampled_profile(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.sampled_profile)
  return sampled_profile_.Mutable(index);
}
::metrics::SampledProfile* ChromeUserMetricsExtension::add_sampled_profile() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.sampled_profile)
  return sampled_profile_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::SampledProfile >*
ChromeUserMetricsExtension::mutable_sampled_profile() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.sampled_profile)
  return &sampled_profile_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::SampledProfile >&
ChromeUserMetricsExtension::sampled_profile() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.sampled_profile)
  return sampled_profile_;
}

// optional .metrics.CastLogsProto cast_logs = 12;
bool ChromeUserMetricsExtension::has_cast_logs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeUserMetricsExtension::set_has_cast_logs() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromeUserMetricsExtension::clear_has_cast_logs() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromeUserMetricsExtension::clear_cast_logs() {
  if (cast_logs_ != NULL) cast_logs_->::metrics::CastLogsProto::Clear();
  clear_has_cast_logs();
}
const ::metrics::CastLogsProto& ChromeUserMetricsExtension::cast_logs() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.cast_logs)
  return cast_logs_ != NULL ? *cast_logs_
                         : *::metrics::CastLogsProto::internal_default_instance();
}
::metrics::CastLogsProto* ChromeUserMetricsExtension::mutable_cast_logs() {
  set_has_cast_logs();
  if (cast_logs_ == NULL) {
    cast_logs_ = new ::metrics::CastLogsProto;
  }
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.cast_logs)
  return cast_logs_;
}
::metrics::CastLogsProto* ChromeUserMetricsExtension::release_cast_logs() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.cast_logs)
  clear_has_cast_logs();
  ::metrics::CastLogsProto* temp = cast_logs_;
  cast_logs_ = NULL;
  return temp;
}
void ChromeUserMetricsExtension::set_allocated_cast_logs(::metrics::CastLogsProto* cast_logs) {
  delete cast_logs_;
  cast_logs_ = cast_logs;
  if (cast_logs) {
    set_has_cast_logs();
  } else {
    clear_has_cast_logs();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.cast_logs)
}

// repeated .metrics.MemoryLeakReportProto memory_leak_report = 13;
int ChromeUserMetricsExtension::memory_leak_report_size() const {
  return memory_leak_report_.size();
}
void ChromeUserMetricsExtension::clear_memory_leak_report() {
  memory_leak_report_.Clear();
}
const ::metrics::MemoryLeakReportProto& ChromeUserMetricsExtension::memory_leak_report(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.memory_leak_report)
  return memory_leak_report_.Get(index);
}
::metrics::MemoryLeakReportProto* ChromeUserMetricsExtension::mutable_memory_leak_report(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.memory_leak_report)
  return memory_leak_report_.Mutable(index);
}
::metrics::MemoryLeakReportProto* ChromeUserMetricsExtension::add_memory_leak_report() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.memory_leak_report)
  return memory_leak_report_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::MemoryLeakReportProto >*
ChromeUserMetricsExtension::mutable_memory_leak_report() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.memory_leak_report)
  return &memory_leak_report_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::MemoryLeakReportProto >&
ChromeUserMetricsExtension::memory_leak_report() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.memory_leak_report)
  return memory_leak_report_;
}

// optional .metrics.ReportingInfo reporting_info = 17;
bool ChromeUserMetricsExtension::has_reporting_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChromeUserMetricsExtension::set_has_reporting_info() {
  _has_bits_[0] |= 0x00000004u;
}
void ChromeUserMetricsExtension::clear_has_reporting_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChromeUserMetricsExtension::clear_reporting_info() {
  if (reporting_info_ != NULL) reporting_info_->::metrics::ReportingInfo::Clear();
  clear_has_reporting_info();
}
const ::metrics::ReportingInfo& ChromeUserMetricsExtension::reporting_info() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.reporting_info)
  return reporting_info_ != NULL ? *reporting_info_
                         : *::metrics::ReportingInfo::internal_default_instance();
}
::metrics::ReportingInfo* ChromeUserMetricsExtension::mutable_reporting_info() {
  set_has_reporting_info();
  if (reporting_info_ == NULL) {
    reporting_info_ = new ::metrics::ReportingInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.reporting_info)
  return reporting_info_;
}
::metrics::ReportingInfo* ChromeUserMetricsExtension::release_reporting_info() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.reporting_info)
  clear_has_reporting_info();
  ::metrics::ReportingInfo* temp = reporting_info_;
  reporting_info_ = NULL;
  return temp;
}
void ChromeUserMetricsExtension::set_allocated_reporting_info(::metrics::ReportingInfo* reporting_info) {
  delete reporting_info_;
  reporting_info_ = reporting_info;
  if (reporting_info) {
    set_has_reporting_info();
  } else {
    clear_has_reporting_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.reporting_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
