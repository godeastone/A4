// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: omnibox_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "omnibox_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace metrics {
class OmniboxEventProto_SuggestionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OmniboxEventProto_Suggestion> {
} _OmniboxEventProto_Suggestion_default_instance_;
class OmniboxEventProto_ProviderInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OmniboxEventProto_ProviderInfo> {
} _OmniboxEventProto_ProviderInfo_default_instance_;
class OmniboxEventProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OmniboxEventProto> {
} _OmniboxEventProto_default_instance_;

namespace protobuf_omnibox_5fevent_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _OmniboxEventProto_Suggestion_default_instance_.Shutdown();
  _OmniboxEventProto_ProviderInfo_default_instance_.Shutdown();
  _OmniboxEventProto_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metrics::protobuf_omnibox_5finput_5ftype_2eproto::InitDefaults();
  _OmniboxEventProto_Suggestion_default_instance_.DefaultConstruct();
  _OmniboxEventProto_ProviderInfo_default_instance_.DefaultConstruct();
  _OmniboxEventProto_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::metrics::protobuf_omnibox_5finput_5ftype_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_omnibox_5fevent_2eproto

bool OmniboxEventProto_Suggestion_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::UNKNOWN_RESULT_TYPE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::URL_WHAT_YOU_TYPED;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_URL;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_TITLE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_BODY;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_KEYWORD;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::NAVSUGGEST;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_WHAT_YOU_TYPED;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_HISTORY;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_OTHER_ENGINE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::EXTENSION_APP;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CONTACT;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::BOOKMARK_TITLE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_ENTITY;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_TAIL;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_PERSONALIZED;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_PROFILE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::APP_RESULT;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::APP;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::LEGACY_ON_DEVICE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::NAVSUGGEST_PERSONALIZED;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_ANSWER;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CALCULATOR;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CLIPBOARD;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::PHYSICAL_WEB;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::PHYSICAL_WEB_OVERFLOW;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::ResultType_MIN;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::ResultType_MAX;
const int OmniboxEventProto_Suggestion::ResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool OmniboxEventProto_PageClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OmniboxEventProto_PageClassification OmniboxEventProto::INVALID_SPEC;
const OmniboxEventProto_PageClassification OmniboxEventProto::NTP;
const OmniboxEventProto_PageClassification OmniboxEventProto::BLANK;
const OmniboxEventProto_PageClassification OmniboxEventProto::HOME_PAGE;
const OmniboxEventProto_PageClassification OmniboxEventProto::OTHER;
const OmniboxEventProto_PageClassification OmniboxEventProto::OBSOLETE_INSTANT_NTP;
const OmniboxEventProto_PageClassification OmniboxEventProto::OBSOLETE_SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT;
const OmniboxEventProto_PageClassification OmniboxEventProto::INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS;
const OmniboxEventProto_PageClassification OmniboxEventProto::INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS;
const OmniboxEventProto_PageClassification OmniboxEventProto::SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT;
const OmniboxEventProto_PageClassification OmniboxEventProto::APP_HOME;
const OmniboxEventProto_PageClassification OmniboxEventProto::APP_SEARCH;
const OmniboxEventProto_PageClassification OmniboxEventProto::APP_MAPS;
const OmniboxEventProto_PageClassification OmniboxEventProto::SEARCH_BUTTON_AS_STARTING_FOCUS;
const OmniboxEventProto_PageClassification OmniboxEventProto::PageClassification_MIN;
const OmniboxEventProto_PageClassification OmniboxEventProto::PageClassification_MAX;
const int OmniboxEventProto::PageClassification_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool OmniboxEventProto_ProviderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OmniboxEventProto_ProviderType OmniboxEventProto::UNKNOWN_PROVIDER;
const OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_URL;
const OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_CONTENTS;
const OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_QUICK;
const OmniboxEventProto_ProviderType OmniboxEventProto::SEARCH;
const OmniboxEventProto_ProviderType OmniboxEventProto::KEYWORD;
const OmniboxEventProto_ProviderType OmniboxEventProto::BUILTIN;
const OmniboxEventProto_ProviderType OmniboxEventProto::SHORTCUTS;
const OmniboxEventProto_ProviderType OmniboxEventProto::EXTENSION_APPS;
const OmniboxEventProto_ProviderType OmniboxEventProto::CONTACT;
const OmniboxEventProto_ProviderType OmniboxEventProto::BOOKMARK;
const OmniboxEventProto_ProviderType OmniboxEventProto::ZERO_SUGGEST;
const OmniboxEventProto_ProviderType OmniboxEventProto::ON_DEVICE;
const OmniboxEventProto_ProviderType OmniboxEventProto::ON_DEVICE_CHROME;
const OmniboxEventProto_ProviderType OmniboxEventProto::CLIPBOARD_URL;
const OmniboxEventProto_ProviderType OmniboxEventProto::PHYSICAL_WEB;
const OmniboxEventProto_ProviderType OmniboxEventProto::ProviderType_MIN;
const OmniboxEventProto_ProviderType OmniboxEventProto::ProviderType_MAX;
const int OmniboxEventProto::ProviderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OmniboxEventProto_Suggestion::kProviderFieldNumber;
const int OmniboxEventProto_Suggestion::kResultTypeFieldNumber;
const int OmniboxEventProto_Suggestion::kRelevanceFieldNumber;
const int OmniboxEventProto_Suggestion::kTypedCountFieldNumber;
const int OmniboxEventProto_Suggestion::kIsStarredFieldNumber;
const int OmniboxEventProto_Suggestion::kIsDisabledFieldNumber;
const int OmniboxEventProto_Suggestion::kResultSubtypeIdentifierFieldNumber;
const int OmniboxEventProto_Suggestion::kHasTabMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OmniboxEventProto_Suggestion::OmniboxEventProto_Suggestion()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_omnibox_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.OmniboxEventProto.Suggestion)
}
OmniboxEventProto_Suggestion::OmniboxEventProto_Suggestion(const OmniboxEventProto_Suggestion& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&provider_, &from.provider_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_subtype_identifier_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(result_subtype_identifier_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto.Suggestion)
}

void OmniboxEventProto_Suggestion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&provider_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_subtype_identifier_) -
      reinterpret_cast<char*>(&provider_)) + sizeof(result_subtype_identifier_));
}

OmniboxEventProto_Suggestion::~OmniboxEventProto_Suggestion() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto.Suggestion)
  SharedDtor();
}

void OmniboxEventProto_Suggestion::SharedDtor() {
}

void OmniboxEventProto_Suggestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OmniboxEventProto_Suggestion& OmniboxEventProto_Suggestion::default_instance() {
  protobuf_omnibox_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

OmniboxEventProto_Suggestion* OmniboxEventProto_Suggestion::New(::google::protobuf::Arena* arena) const {
  OmniboxEventProto_Suggestion* n = new OmniboxEventProto_Suggestion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OmniboxEventProto_Suggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto.Suggestion)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&provider_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_subtype_identifier_) -
        reinterpret_cast<char*>(&provider_)) + sizeof(result_subtype_identifier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OmniboxEventProto_Suggestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.OmniboxEventProto.Suggestion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxEventProto_ProviderType_IsValid(value)) {
            set_provider(static_cast< ::metrics::OmniboxEventProto_ProviderType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxEventProto_Suggestion_ResultType_IsValid(value)) {
            set_result_type(static_cast< ::metrics::OmniboxEventProto_Suggestion_ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 relevance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_relevance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relevance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_starred = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_starred();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_starred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 typed_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_typed_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_disabled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_disabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result_subtype_identifier = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_result_subtype_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_subtype_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_tab_match = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_has_tab_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_tab_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.OmniboxEventProto.Suggestion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.OmniboxEventProto.Suggestion)
  return false;
#undef DO_
}

void OmniboxEventProto_Suggestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.OmniboxEventProto.Suggestion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->provider(), output);
  }

  // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result_type(), output);
  }

  // optional int32 relevance = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->relevance(), output);
  }

  // optional bool is_starred = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_starred(), output);
  }

  // optional int32 typed_count = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->typed_count(), output);
  }

  // optional bool is_disabled = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_disabled(), output);
  }

  // optional int32 result_subtype_identifier = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->result_subtype_identifier(), output);
  }

  // optional bool has_tab_match = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->has_tab_match(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.OmniboxEventProto.Suggestion)
}

size_t OmniboxEventProto_Suggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto.Suggestion)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());
    }

    // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }

    // optional int32 relevance = 3;
    if (has_relevance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relevance());
    }

    // optional int32 typed_count = 5;
    if (has_typed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typed_count());
    }

    // optional bool is_starred = 4 [deprecated = true];
    if (has_is_starred()) {
      total_size += 1 + 1;
    }

    // optional bool is_disabled = 6;
    if (has_is_disabled()) {
      total_size += 1 + 1;
    }

    // optional bool has_tab_match = 8;
    if (has_has_tab_match()) {
      total_size += 1 + 1;
    }

    // optional int32 result_subtype_identifier = 7;
    if (has_result_subtype_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_subtype_identifier());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OmniboxEventProto_Suggestion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OmniboxEventProto_Suggestion*>(&from));
}

void OmniboxEventProto_Suggestion::MergeFrom(const OmniboxEventProto_Suggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto.Suggestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      provider_ = from.provider_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_type_ = from.result_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      relevance_ = from.relevance_;
    }
    if (cached_has_bits & 0x00000008u) {
      typed_count_ = from.typed_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_starred_ = from.is_starred_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_disabled_ = from.is_disabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      has_tab_match_ = from.has_tab_match_;
    }
    if (cached_has_bits & 0x00000080u) {
      result_subtype_identifier_ = from.result_subtype_identifier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OmniboxEventProto_Suggestion::CopyFrom(const OmniboxEventProto_Suggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto.Suggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto_Suggestion::IsInitialized() const {
  return true;
}

void OmniboxEventProto_Suggestion::Swap(OmniboxEventProto_Suggestion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OmniboxEventProto_Suggestion::InternalSwap(OmniboxEventProto_Suggestion* other) {
  std::swap(provider_, other->provider_);
  std::swap(result_type_, other->result_type_);
  std::swap(relevance_, other->relevance_);
  std::swap(typed_count_, other->typed_count_);
  std::swap(is_starred_, other->is_starred_);
  std::swap(is_disabled_, other->is_disabled_);
  std::swap(has_tab_match_, other->has_tab_match_);
  std::swap(result_subtype_identifier_, other->result_subtype_identifier_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OmniboxEventProto_Suggestion::GetTypeName() const {
  return "metrics.OmniboxEventProto.Suggestion";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OmniboxEventProto_Suggestion

// optional .metrics.OmniboxEventProto.ProviderType provider = 1;
bool OmniboxEventProto_Suggestion::has_provider() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_provider() {
  _has_bits_[0] |= 0x00000001u;
}
void OmniboxEventProto_Suggestion::clear_has_provider() {
  _has_bits_[0] &= ~0x00000001u;
}
void OmniboxEventProto_Suggestion::clear_provider() {
  provider_ = 0;
  clear_has_provider();
}
::metrics::OmniboxEventProto_ProviderType OmniboxEventProto_Suggestion::provider() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.provider)
  return static_cast< ::metrics::OmniboxEventProto_ProviderType >(provider_);
}
void OmniboxEventProto_Suggestion::set_provider(::metrics::OmniboxEventProto_ProviderType value) {
  assert(::metrics::OmniboxEventProto_ProviderType_IsValid(value));
  set_has_provider();
  provider_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.provider)
}

// optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
bool OmniboxEventProto_Suggestion::has_result_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_result_type() {
  _has_bits_[0] |= 0x00000002u;
}
void OmniboxEventProto_Suggestion::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void OmniboxEventProto_Suggestion::clear_result_type() {
  result_type_ = 0;
  clear_has_result_type();
}
::metrics::OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::result_type() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.result_type)
  return static_cast< ::metrics::OmniboxEventProto_Suggestion_ResultType >(result_type_);
}
void OmniboxEventProto_Suggestion::set_result_type(::metrics::OmniboxEventProto_Suggestion_ResultType value) {
  assert(::metrics::OmniboxEventProto_Suggestion_ResultType_IsValid(value));
  set_has_result_type();
  result_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.result_type)
}

// optional int32 relevance = 3;
bool OmniboxEventProto_Suggestion::has_relevance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_relevance() {
  _has_bits_[0] |= 0x00000004u;
}
void OmniboxEventProto_Suggestion::clear_has_relevance() {
  _has_bits_[0] &= ~0x00000004u;
}
void OmniboxEventProto_Suggestion::clear_relevance() {
  relevance_ = 0;
  clear_has_relevance();
}
::google::protobuf::int32 OmniboxEventProto_Suggestion::relevance() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.relevance)
  return relevance_;
}
void OmniboxEventProto_Suggestion::set_relevance(::google::protobuf::int32 value) {
  set_has_relevance();
  relevance_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.relevance)
}

// optional int32 typed_count = 5;
bool OmniboxEventProto_Suggestion::has_typed_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_typed_count() {
  _has_bits_[0] |= 0x00000008u;
}
void OmniboxEventProto_Suggestion::clear_has_typed_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void OmniboxEventProto_Suggestion::clear_typed_count() {
  typed_count_ = 0;
  clear_has_typed_count();
}
::google::protobuf::int32 OmniboxEventProto_Suggestion::typed_count() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.typed_count)
  return typed_count_;
}
void OmniboxEventProto_Suggestion::set_typed_count(::google::protobuf::int32 value) {
  set_has_typed_count();
  typed_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.typed_count)
}

// optional bool is_starred = 4 [deprecated = true];
bool OmniboxEventProto_Suggestion::has_is_starred() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_is_starred() {
  _has_bits_[0] |= 0x00000010u;
}
void OmniboxEventProto_Suggestion::clear_has_is_starred() {
  _has_bits_[0] &= ~0x00000010u;
}
void OmniboxEventProto_Suggestion::clear_is_starred() {
  is_starred_ = false;
  clear_has_is_starred();
}
bool OmniboxEventProto_Suggestion::is_starred() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.is_starred)
  return is_starred_;
}
void OmniboxEventProto_Suggestion::set_is_starred(bool value) {
  set_has_is_starred();
  is_starred_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.is_starred)
}

// optional bool is_disabled = 6;
bool OmniboxEventProto_Suggestion::has_is_disabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_is_disabled() {
  _has_bits_[0] |= 0x00000020u;
}
void OmniboxEventProto_Suggestion::clear_has_is_disabled() {
  _has_bits_[0] &= ~0x00000020u;
}
void OmniboxEventProto_Suggestion::clear_is_disabled() {
  is_disabled_ = false;
  clear_has_is_disabled();
}
bool OmniboxEventProto_Suggestion::is_disabled() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.is_disabled)
  return is_disabled_;
}
void OmniboxEventProto_Suggestion::set_is_disabled(bool value) {
  set_has_is_disabled();
  is_disabled_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.is_disabled)
}

// optional int32 result_subtype_identifier = 7;
bool OmniboxEventProto_Suggestion::has_result_subtype_identifier() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_result_subtype_identifier() {
  _has_bits_[0] |= 0x00000080u;
}
void OmniboxEventProto_Suggestion::clear_has_result_subtype_identifier() {
  _has_bits_[0] &= ~0x00000080u;
}
void OmniboxEventProto_Suggestion::clear_result_subtype_identifier() {
  result_subtype_identifier_ = 0;
  clear_has_result_subtype_identifier();
}
::google::protobuf::int32 OmniboxEventProto_Suggestion::result_subtype_identifier() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.result_subtype_identifier)
  return result_subtype_identifier_;
}
void OmniboxEventProto_Suggestion::set_result_subtype_identifier(::google::protobuf::int32 value) {
  set_has_result_subtype_identifier();
  result_subtype_identifier_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.result_subtype_identifier)
}

// optional bool has_tab_match = 8;
bool OmniboxEventProto_Suggestion::has_has_tab_match() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_has_tab_match() {
  _has_bits_[0] |= 0x00000040u;
}
void OmniboxEventProto_Suggestion::clear_has_has_tab_match() {
  _has_bits_[0] &= ~0x00000040u;
}
void OmniboxEventProto_Suggestion::clear_has_tab_match() {
  has_tab_match_ = false;
  clear_has_has_tab_match();
}
bool OmniboxEventProto_Suggestion::has_tab_match() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.has_tab_match)
  return has_tab_match_;
}
void OmniboxEventProto_Suggestion::set_has_tab_match(bool value) {
  set_has_has_tab_match();
  has_tab_match_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.has_tab_match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OmniboxEventProto_ProviderInfo::kProviderFieldNumber;
const int OmniboxEventProto_ProviderInfo::kProviderDoneFieldNumber;
const int OmniboxEventProto_ProviderInfo::kFieldTrialTriggeredFieldNumber;
const int OmniboxEventProto_ProviderInfo::kFieldTrialTriggeredInSessionFieldNumber;
const int OmniboxEventProto_ProviderInfo::kTimesReturnedResultsInSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OmniboxEventProto_ProviderInfo::OmniboxEventProto_ProviderInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_omnibox_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.OmniboxEventProto.ProviderInfo)
}
OmniboxEventProto_ProviderInfo::OmniboxEventProto_ProviderInfo(const OmniboxEventProto_ProviderInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_trial_triggered_(from.field_trial_triggered_),
      field_trial_triggered_in_session_(from.field_trial_triggered_in_session_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&provider_, &from.provider_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_returned_results_in_session_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(times_returned_results_in_session_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto.ProviderInfo)
}

void OmniboxEventProto_ProviderInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&provider_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_returned_results_in_session_) -
      reinterpret_cast<char*>(&provider_)) + sizeof(times_returned_results_in_session_));
}

OmniboxEventProto_ProviderInfo::~OmniboxEventProto_ProviderInfo() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto.ProviderInfo)
  SharedDtor();
}

void OmniboxEventProto_ProviderInfo::SharedDtor() {
}

void OmniboxEventProto_ProviderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OmniboxEventProto_ProviderInfo& OmniboxEventProto_ProviderInfo::default_instance() {
  protobuf_omnibox_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

OmniboxEventProto_ProviderInfo* OmniboxEventProto_ProviderInfo::New(::google::protobuf::Arena* arena) const {
  OmniboxEventProto_ProviderInfo* n = new OmniboxEventProto_ProviderInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OmniboxEventProto_ProviderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto.ProviderInfo)
  field_trial_triggered_.Clear();
  field_trial_triggered_in_session_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&provider_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_returned_results_in_session_) -
        reinterpret_cast<char*>(&provider_)) + sizeof(times_returned_results_in_session_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OmniboxEventProto_ProviderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.OmniboxEventProto.ProviderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxEventProto_ProviderType_IsValid(value)) {
            set_provider(static_cast< ::metrics::OmniboxEventProto_ProviderType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool provider_done = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_provider_done();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provider_done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 field_trial_triggered = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29u, input, this->mutable_field_trial_triggered())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_field_trial_triggered())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 field_trial_triggered_in_session = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37u, input, this->mutable_field_trial_triggered_in_session())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_field_trial_triggered_in_session())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 times_returned_results_in_session = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_times_returned_results_in_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_returned_results_in_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.OmniboxEventProto.ProviderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.OmniboxEventProto.ProviderInfo)
  return false;
#undef DO_
}

void OmniboxEventProto_ProviderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.OmniboxEventProto.ProviderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->provider(), output);
  }

  // optional bool provider_done = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->provider_done(), output);
  }

  // repeated fixed32 field_trial_triggered = 3;
  for (int i = 0, n = this->field_trial_triggered_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->field_trial_triggered(i), output);
  }

  // repeated fixed32 field_trial_triggered_in_session = 4;
  for (int i = 0, n = this->field_trial_triggered_in_session_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->field_trial_triggered_in_session(i), output);
  }

  // optional int32 times_returned_results_in_session = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->times_returned_results_in_session(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.OmniboxEventProto.ProviderInfo)
}

size_t OmniboxEventProto_ProviderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto.ProviderInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated fixed32 field_trial_triggered = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->field_trial_triggered_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->field_trial_triggered_size());
    total_size += data_size;
  }

  // repeated fixed32 field_trial_triggered_in_session = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->field_trial_triggered_in_session_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->field_trial_triggered_in_session_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());
    }

    // optional bool provider_done = 2;
    if (has_provider_done()) {
      total_size += 1 + 1;
    }

    // optional int32 times_returned_results_in_session = 5;
    if (has_times_returned_results_in_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times_returned_results_in_session());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OmniboxEventProto_ProviderInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OmniboxEventProto_ProviderInfo*>(&from));
}

void OmniboxEventProto_ProviderInfo::MergeFrom(const OmniboxEventProto_ProviderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto.ProviderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_trial_triggered_.MergeFrom(from.field_trial_triggered_);
  field_trial_triggered_in_session_.MergeFrom(from.field_trial_triggered_in_session_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      provider_ = from.provider_;
    }
    if (cached_has_bits & 0x00000002u) {
      provider_done_ = from.provider_done_;
    }
    if (cached_has_bits & 0x00000004u) {
      times_returned_results_in_session_ = from.times_returned_results_in_session_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OmniboxEventProto_ProviderInfo::CopyFrom(const OmniboxEventProto_ProviderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto.ProviderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto_ProviderInfo::IsInitialized() const {
  return true;
}

void OmniboxEventProto_ProviderInfo::Swap(OmniboxEventProto_ProviderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OmniboxEventProto_ProviderInfo::InternalSwap(OmniboxEventProto_ProviderInfo* other) {
  field_trial_triggered_.InternalSwap(&other->field_trial_triggered_);
  field_trial_triggered_in_session_.InternalSwap(&other->field_trial_triggered_in_session_);
  std::swap(provider_, other->provider_);
  std::swap(provider_done_, other->provider_done_);
  std::swap(times_returned_results_in_session_, other->times_returned_results_in_session_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OmniboxEventProto_ProviderInfo::GetTypeName() const {
  return "metrics.OmniboxEventProto.ProviderInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OmniboxEventProto_ProviderInfo

// optional .metrics.OmniboxEventProto.ProviderType provider = 1;
bool OmniboxEventProto_ProviderInfo::has_provider() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OmniboxEventProto_ProviderInfo::set_has_provider() {
  _has_bits_[0] |= 0x00000001u;
}
void OmniboxEventProto_ProviderInfo::clear_has_provider() {
  _has_bits_[0] &= ~0x00000001u;
}
void OmniboxEventProto_ProviderInfo::clear_provider() {
  provider_ = 0;
  clear_has_provider();
}
::metrics::OmniboxEventProto_ProviderType OmniboxEventProto_ProviderInfo::provider() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.provider)
  return static_cast< ::metrics::OmniboxEventProto_ProviderType >(provider_);
}
void OmniboxEventProto_ProviderInfo::set_provider(::metrics::OmniboxEventProto_ProviderType value) {
  assert(::metrics::OmniboxEventProto_ProviderType_IsValid(value));
  set_has_provider();
  provider_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.provider)
}

// optional bool provider_done = 2;
bool OmniboxEventProto_ProviderInfo::has_provider_done() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OmniboxEventProto_ProviderInfo::set_has_provider_done() {
  _has_bits_[0] |= 0x00000002u;
}
void OmniboxEventProto_ProviderInfo::clear_has_provider_done() {
  _has_bits_[0] &= ~0x00000002u;
}
void OmniboxEventProto_ProviderInfo::clear_provider_done() {
  provider_done_ = false;
  clear_has_provider_done();
}
bool OmniboxEventProto_ProviderInfo::provider_done() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.provider_done)
  return provider_done_;
}
void OmniboxEventProto_ProviderInfo::set_provider_done(bool value) {
  set_has_provider_done();
  provider_done_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.provider_done)
}

// repeated fixed32 field_trial_triggered = 3;
int OmniboxEventProto_ProviderInfo::field_trial_triggered_size() const {
  return field_trial_triggered_.size();
}
void OmniboxEventProto_ProviderInfo::clear_field_trial_triggered() {
  field_trial_triggered_.Clear();
}
::google::protobuf::uint32 OmniboxEventProto_ProviderInfo::field_trial_triggered(int index) const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
  return field_trial_triggered_.Get(index);
}
void OmniboxEventProto_ProviderInfo::set_field_trial_triggered(int index, ::google::protobuf::uint32 value) {
  field_trial_triggered_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
}
void OmniboxEventProto_ProviderInfo::add_field_trial_triggered(::google::protobuf::uint32 value) {
  field_trial_triggered_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
OmniboxEventProto_ProviderInfo::field_trial_triggered() const {
  // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
  return field_trial_triggered_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
OmniboxEventProto_ProviderInfo::mutable_field_trial_triggered() {
  // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
  return &field_trial_triggered_;
}

// repeated fixed32 field_trial_triggered_in_session = 4;
int OmniboxEventProto_ProviderInfo::field_trial_triggered_in_session_size() const {
  return field_trial_triggered_in_session_.size();
}
void OmniboxEventProto_ProviderInfo::clear_field_trial_triggered_in_session() {
  field_trial_triggered_in_session_.Clear();
}
::google::protobuf::uint32 OmniboxEventProto_ProviderInfo::field_trial_triggered_in_session(int index) const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
  return field_trial_triggered_in_session_.Get(index);
}
void OmniboxEventProto_ProviderInfo::set_field_trial_triggered_in_session(int index, ::google::protobuf::uint32 value) {
  field_trial_triggered_in_session_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
}
void OmniboxEventProto_ProviderInfo::add_field_trial_triggered_in_session(::google::protobuf::uint32 value) {
  field_trial_triggered_in_session_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
OmniboxEventProto_ProviderInfo::field_trial_triggered_in_session() const {
  // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
  return field_trial_triggered_in_session_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
OmniboxEventProto_ProviderInfo::mutable_field_trial_triggered_in_session() {
  // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
  return &field_trial_triggered_in_session_;
}

// optional int32 times_returned_results_in_session = 5;
bool OmniboxEventProto_ProviderInfo::has_times_returned_results_in_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OmniboxEventProto_ProviderInfo::set_has_times_returned_results_in_session() {
  _has_bits_[0] |= 0x00000004u;
}
void OmniboxEventProto_ProviderInfo::clear_has_times_returned_results_in_session() {
  _has_bits_[0] &= ~0x00000004u;
}
void OmniboxEventProto_ProviderInfo::clear_times_returned_results_in_session() {
  times_returned_results_in_session_ = 0;
  clear_has_times_returned_results_in_session();
}
::google::protobuf::int32 OmniboxEventProto_ProviderInfo::times_returned_results_in_session() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.times_returned_results_in_session)
  return times_returned_results_in_session_;
}
void OmniboxEventProto_ProviderInfo::set_times_returned_results_in_session(::google::protobuf::int32 value) {
  set_has_times_returned_results_in_session();
  times_returned_results_in_session_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.times_returned_results_in_session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OmniboxEventProto::kTimeSecFieldNumber;
const int OmniboxEventProto::kTabIdFieldNumber;
const int OmniboxEventProto::kTypedLengthFieldNumber;
const int OmniboxEventProto::kJustDeletedTextFieldNumber;
const int OmniboxEventProto::kNumTypedTermsFieldNumber;
const int OmniboxEventProto::kSelectedIndexFieldNumber;
const int OmniboxEventProto::kSelectedTabMatchFieldNumber;
const int OmniboxEventProto::kDEPRECATEDIsTopResultHiddenInDropdownFieldNumber;
const int OmniboxEventProto::kIsPopupOpenFieldNumber;
const int OmniboxEventProto::kIsPasteAndGoFieldNumber;
const int OmniboxEventProto::kCompletedLengthFieldNumber;
const int OmniboxEventProto::kTypingDurationMsFieldNumber;
const int OmniboxEventProto::kDurationSinceLastDefaultMatchUpdateMsFieldNumber;
const int OmniboxEventProto::kCurrentPageClassificationFieldNumber;
const int OmniboxEventProto::kInputTypeFieldNumber;
const int OmniboxEventProto::kSuggestionFieldNumber;
const int OmniboxEventProto::kProviderInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OmniboxEventProto::OmniboxEventProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_omnibox_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.OmniboxEventProto)
}
OmniboxEventProto::OmniboxEventProto(const OmniboxEventProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      suggestion_(from.suggestion_),
      provider_info_(from.provider_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_sec_, &from.time_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_paste_and_go_) -
    reinterpret_cast<char*>(&time_sec_)) + sizeof(is_paste_and_go_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto)
}

void OmniboxEventProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_paste_and_go_) -
      reinterpret_cast<char*>(&time_sec_)) + sizeof(is_paste_and_go_));
}

OmniboxEventProto::~OmniboxEventProto() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto)
  SharedDtor();
}

void OmniboxEventProto::SharedDtor() {
}

void OmniboxEventProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OmniboxEventProto& OmniboxEventProto::default_instance() {
  protobuf_omnibox_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

OmniboxEventProto* OmniboxEventProto::New(::google::protobuf::Arena* arena) const {
  OmniboxEventProto* n = new OmniboxEventProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OmniboxEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto)
  suggestion_.Clear();
  provider_info_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&time_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_type_) -
        reinterpret_cast<char*>(&time_sec_)) + sizeof(input_type_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&duration_since_last_default_match_update_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_paste_and_go_) -
        reinterpret_cast<char*>(&duration_since_last_default_match_update_ms_)) + sizeof(is_paste_and_go_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OmniboxEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.OmniboxEventProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_time_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tab_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tab_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 typed_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_typed_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typed_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_typed_terms = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_num_typed_terms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_typed_terms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 selected_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_selected_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selected_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 completed_length = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_completed_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completed_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 typing_duration_ms = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_typing_duration_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &typing_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.OmniboxInputType input_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxInputType_IsValid(value)) {
            set_input_type(static_cast< ::metrics::OmniboxInputType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suggestion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxEventProto_PageClassification_IsValid(value)) {
            set_current_page_classification(static_cast< ::metrics::OmniboxEventProto_PageClassification >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool just_deleted_text = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_just_deleted_text();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &just_deleted_text_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_provider_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_since_last_default_match_update_ms = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_duration_since_last_default_match_update_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_since_last_default_match_update_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_deprecated_is_top_result_hidden_in_dropdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_is_top_result_hidden_in_dropdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_popup_open = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_is_popup_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_popup_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_paste_and_go = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_is_paste_and_go();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_paste_and_go_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool selected_tab_match = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_selected_tab_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_tab_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.OmniboxEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.OmniboxEventProto)
  return false;
#undef DO_
}

void OmniboxEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.OmniboxEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_sec(), output);
  }

  // optional int32 tab_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tab_id(), output);
  }

  // optional int32 typed_length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typed_length(), output);
  }

  // optional int32 num_typed_terms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_typed_terms(), output);
  }

  // optional int32 selected_index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->selected_index(), output);
  }

  // optional int32 completed_length = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->completed_length(), output);
  }

  // optional int64 typing_duration_ms = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->typing_duration_ms(), output);
  }

  // optional .metrics.OmniboxInputType input_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->input_type(), output);
  }

  // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->suggestion_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->suggestion(static_cast<int>(i)), output);
  }

  // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->current_page_classification(), output);
  }

  // optional bool just_deleted_text = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->just_deleted_text(), output);
  }

  // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->provider_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->provider_info(static_cast<int>(i)), output);
  }

  // optional int64 duration_since_last_default_match_update_ms = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->duration_since_last_default_match_update_ms(), output);
  }

  // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->deprecated_is_top_result_hidden_in_dropdown(), output);
  }

  // optional bool is_popup_open = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_popup_open(), output);
  }

  // optional bool is_paste_and_go = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_paste_and_go(), output);
  }

  // optional bool selected_tab_match = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->selected_tab_match(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.OmniboxEventProto)
}

size_t OmniboxEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->suggestion_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suggestion(static_cast<int>(i)));
    }
  }

  // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->provider_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->provider_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 time_sec = 1;
    if (has_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_sec());
    }

    // optional int32 tab_id = 2;
    if (has_tab_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_id());
    }

    // optional int32 typed_length = 3;
    if (has_typed_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typed_length());
    }

    // optional int32 num_typed_terms = 4;
    if (has_num_typed_terms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_typed_terms());
    }

    // optional int32 selected_index = 5;
    if (has_selected_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selected_index());
    }

    // optional int64 typing_duration_ms = 7;
    if (has_typing_duration_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->typing_duration_ms());
    }

    // optional int32 completed_length = 6;
    if (has_completed_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completed_length());
    }

    // optional .metrics.OmniboxInputType input_type = 8;
    if (has_input_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_type());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int64 duration_since_last_default_match_update_ms = 13;
    if (has_duration_since_last_default_match_update_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration_since_last_default_match_update_ms());
    }

    // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
    if (has_current_page_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_page_classification());
    }

    // optional bool just_deleted_text = 11;
    if (has_just_deleted_text()) {
      total_size += 1 + 1;
    }

    // optional bool selected_tab_match = 17;
    if (has_selected_tab_match()) {
      total_size += 2 + 1;
    }

    // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
    if (has_deprecated_is_top_result_hidden_in_dropdown()) {
      total_size += 1 + 1;
    }

    // optional bool is_popup_open = 15;
    if (has_is_popup_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_paste_and_go = 16;
    if (has_is_paste_and_go()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OmniboxEventProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OmniboxEventProto*>(&from));
}

void OmniboxEventProto::MergeFrom(const OmniboxEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  suggestion_.MergeFrom(from.suggestion_);
  provider_info_.MergeFrom(from.provider_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      time_sec_ = from.time_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      tab_id_ = from.tab_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      typed_length_ = from.typed_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_typed_terms_ = from.num_typed_terms_;
    }
    if (cached_has_bits & 0x00000010u) {
      selected_index_ = from.selected_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      typing_duration_ms_ = from.typing_duration_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      completed_length_ = from.completed_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      input_type_ = from.input_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      duration_since_last_default_match_update_ms_ = from.duration_since_last_default_match_update_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      current_page_classification_ = from.current_page_classification_;
    }
    if (cached_has_bits & 0x00000400u) {
      just_deleted_text_ = from.just_deleted_text_;
    }
    if (cached_has_bits & 0x00000800u) {
      selected_tab_match_ = from.selected_tab_match_;
    }
    if (cached_has_bits & 0x00001000u) {
      deprecated_is_top_result_hidden_in_dropdown_ = from.deprecated_is_top_result_hidden_in_dropdown_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_popup_open_ = from.is_popup_open_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_paste_and_go_ = from.is_paste_and_go_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OmniboxEventProto::CopyFrom(const OmniboxEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto::IsInitialized() const {
  return true;
}

void OmniboxEventProto::Swap(OmniboxEventProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OmniboxEventProto::InternalSwap(OmniboxEventProto* other) {
  suggestion_.InternalSwap(&other->suggestion_);
  provider_info_.InternalSwap(&other->provider_info_);
  std::swap(time_sec_, other->time_sec_);
  std::swap(tab_id_, other->tab_id_);
  std::swap(typed_length_, other->typed_length_);
  std::swap(num_typed_terms_, other->num_typed_terms_);
  std::swap(selected_index_, other->selected_index_);
  std::swap(typing_duration_ms_, other->typing_duration_ms_);
  std::swap(completed_length_, other->completed_length_);
  std::swap(input_type_, other->input_type_);
  std::swap(duration_since_last_default_match_update_ms_, other->duration_since_last_default_match_update_ms_);
  std::swap(current_page_classification_, other->current_page_classification_);
  std::swap(just_deleted_text_, other->just_deleted_text_);
  std::swap(selected_tab_match_, other->selected_tab_match_);
  std::swap(deprecated_is_top_result_hidden_in_dropdown_, other->deprecated_is_top_result_hidden_in_dropdown_);
  std::swap(is_popup_open_, other->is_popup_open_);
  std::swap(is_paste_and_go_, other->is_paste_and_go_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OmniboxEventProto::GetTypeName() const {
  return "metrics.OmniboxEventProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OmniboxEventProto

// optional int64 time_sec = 1;
bool OmniboxEventProto::has_time_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OmniboxEventProto::set_has_time_sec() {
  _has_bits_[0] |= 0x00000001u;
}
void OmniboxEventProto::clear_has_time_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
void OmniboxEventProto::clear_time_sec() {
  time_sec_ = GOOGLE_LONGLONG(0);
  clear_has_time_sec();
}
::google::protobuf::int64 OmniboxEventProto::time_sec() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.time_sec)
  return time_sec_;
}
void OmniboxEventProto::set_time_sec(::google::protobuf::int64 value) {
  set_has_time_sec();
  time_sec_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.time_sec)
}

// optional int32 tab_id = 2;
bool OmniboxEventProto::has_tab_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OmniboxEventProto::set_has_tab_id() {
  _has_bits_[0] |= 0x00000002u;
}
void OmniboxEventProto::clear_has_tab_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void OmniboxEventProto::clear_tab_id() {
  tab_id_ = 0;
  clear_has_tab_id();
}
::google::protobuf::int32 OmniboxEventProto::tab_id() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.tab_id)
  return tab_id_;
}
void OmniboxEventProto::set_tab_id(::google::protobuf::int32 value) {
  set_has_tab_id();
  tab_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.tab_id)
}

// optional int32 typed_length = 3;
bool OmniboxEventProto::has_typed_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OmniboxEventProto::set_has_typed_length() {
  _has_bits_[0] |= 0x00000004u;
}
void OmniboxEventProto::clear_has_typed_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void OmniboxEventProto::clear_typed_length() {
  typed_length_ = 0;
  clear_has_typed_length();
}
::google::protobuf::int32 OmniboxEventProto::typed_length() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.typed_length)
  return typed_length_;
}
void OmniboxEventProto::set_typed_length(::google::protobuf::int32 value) {
  set_has_typed_length();
  typed_length_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.typed_length)
}

// optional bool just_deleted_text = 11;
bool OmniboxEventProto::has_just_deleted_text() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OmniboxEventProto::set_has_just_deleted_text() {
  _has_bits_[0] |= 0x00000400u;
}
void OmniboxEventProto::clear_has_just_deleted_text() {
  _has_bits_[0] &= ~0x00000400u;
}
void OmniboxEventProto::clear_just_deleted_text() {
  just_deleted_text_ = false;
  clear_has_just_deleted_text();
}
bool OmniboxEventProto::just_deleted_text() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.just_deleted_text)
  return just_deleted_text_;
}
void OmniboxEventProto::set_just_deleted_text(bool value) {
  set_has_just_deleted_text();
  just_deleted_text_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.just_deleted_text)
}

// optional int32 num_typed_terms = 4;
bool OmniboxEventProto::has_num_typed_terms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OmniboxEventProto::set_has_num_typed_terms() {
  _has_bits_[0] |= 0x00000008u;
}
void OmniboxEventProto::clear_has_num_typed_terms() {
  _has_bits_[0] &= ~0x00000008u;
}
void OmniboxEventProto::clear_num_typed_terms() {
  num_typed_terms_ = 0;
  clear_has_num_typed_terms();
}
::google::protobuf::int32 OmniboxEventProto::num_typed_terms() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.num_typed_terms)
  return num_typed_terms_;
}
void OmniboxEventProto::set_num_typed_terms(::google::protobuf::int32 value) {
  set_has_num_typed_terms();
  num_typed_terms_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.num_typed_terms)
}

// optional int32 selected_index = 5;
bool OmniboxEventProto::has_selected_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OmniboxEventProto::set_has_selected_index() {
  _has_bits_[0] |= 0x00000010u;
}
void OmniboxEventProto::clear_has_selected_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void OmniboxEventProto::clear_selected_index() {
  selected_index_ = 0;
  clear_has_selected_index();
}
::google::protobuf::int32 OmniboxEventProto::selected_index() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.selected_index)
  return selected_index_;
}
void OmniboxEventProto::set_selected_index(::google::protobuf::int32 value) {
  set_has_selected_index();
  selected_index_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.selected_index)
}

// optional bool selected_tab_match = 17;
bool OmniboxEventProto::has_selected_tab_match() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OmniboxEventProto::set_has_selected_tab_match() {
  _has_bits_[0] |= 0x00000800u;
}
void OmniboxEventProto::clear_has_selected_tab_match() {
  _has_bits_[0] &= ~0x00000800u;
}
void OmniboxEventProto::clear_selected_tab_match() {
  selected_tab_match_ = false;
  clear_has_selected_tab_match();
}
bool OmniboxEventProto::selected_tab_match() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.selected_tab_match)
  return selected_tab_match_;
}
void OmniboxEventProto::set_selected_tab_match(bool value) {
  set_has_selected_tab_match();
  selected_tab_match_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.selected_tab_match)
}

// optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
bool OmniboxEventProto::has_deprecated_is_top_result_hidden_in_dropdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OmniboxEventProto::set_has_deprecated_is_top_result_hidden_in_dropdown() {
  _has_bits_[0] |= 0x00001000u;
}
void OmniboxEventProto::clear_has_deprecated_is_top_result_hidden_in_dropdown() {
  _has_bits_[0] &= ~0x00001000u;
}
void OmniboxEventProto::clear_deprecated_is_top_result_hidden_in_dropdown() {
  deprecated_is_top_result_hidden_in_dropdown_ = false;
  clear_has_deprecated_is_top_result_hidden_in_dropdown();
}
bool OmniboxEventProto::deprecated_is_top_result_hidden_in_dropdown() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.DEPRECATED_is_top_result_hidden_in_dropdown)
  return deprecated_is_top_result_hidden_in_dropdown_;
}
void OmniboxEventProto::set_deprecated_is_top_result_hidden_in_dropdown(bool value) {
  set_has_deprecated_is_top_result_hidden_in_dropdown();
  deprecated_is_top_result_hidden_in_dropdown_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.DEPRECATED_is_top_result_hidden_in_dropdown)
}

// optional bool is_popup_open = 15;
bool OmniboxEventProto::has_is_popup_open() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OmniboxEventProto::set_has_is_popup_open() {
  _has_bits_[0] |= 0x00002000u;
}
void OmniboxEventProto::clear_has_is_popup_open() {
  _has_bits_[0] &= ~0x00002000u;
}
void OmniboxEventProto::clear_is_popup_open() {
  is_popup_open_ = false;
  clear_has_is_popup_open();
}
bool OmniboxEventProto::is_popup_open() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.is_popup_open)
  return is_popup_open_;
}
void OmniboxEventProto::set_is_popup_open(bool value) {
  set_has_is_popup_open();
  is_popup_open_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.is_popup_open)
}

// optional bool is_paste_and_go = 16;
bool OmniboxEventProto::has_is_paste_and_go() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void OmniboxEventProto::set_has_is_paste_and_go() {
  _has_bits_[0] |= 0x00004000u;
}
void OmniboxEventProto::clear_has_is_paste_and_go() {
  _has_bits_[0] &= ~0x00004000u;
}
void OmniboxEventProto::clear_is_paste_and_go() {
  is_paste_and_go_ = false;
  clear_has_is_paste_and_go();
}
bool OmniboxEventProto::is_paste_and_go() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.is_paste_and_go)
  return is_paste_and_go_;
}
void OmniboxEventProto::set_is_paste_and_go(bool value) {
  set_has_is_paste_and_go();
  is_paste_and_go_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.is_paste_and_go)
}

// optional int32 completed_length = 6;
bool OmniboxEventProto::has_completed_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OmniboxEventProto::set_has_completed_length() {
  _has_bits_[0] |= 0x00000040u;
}
void OmniboxEventProto::clear_has_completed_length() {
  _has_bits_[0] &= ~0x00000040u;
}
void OmniboxEventProto::clear_completed_length() {
  completed_length_ = 0;
  clear_has_completed_length();
}
::google::protobuf::int32 OmniboxEventProto::completed_length() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.completed_length)
  return completed_length_;
}
void OmniboxEventProto::set_completed_length(::google::protobuf::int32 value) {
  set_has_completed_length();
  completed_length_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.completed_length)
}

// optional int64 typing_duration_ms = 7;
bool OmniboxEventProto::has_typing_duration_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OmniboxEventProto::set_has_typing_duration_ms() {
  _has_bits_[0] |= 0x00000020u;
}
void OmniboxEventProto::clear_has_typing_duration_ms() {
  _has_bits_[0] &= ~0x00000020u;
}
void OmniboxEventProto::clear_typing_duration_ms() {
  typing_duration_ms_ = GOOGLE_LONGLONG(0);
  clear_has_typing_duration_ms();
}
::google::protobuf::int64 OmniboxEventProto::typing_duration_ms() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.typing_duration_ms)
  return typing_duration_ms_;
}
void OmniboxEventProto::set_typing_duration_ms(::google::protobuf::int64 value) {
  set_has_typing_duration_ms();
  typing_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.typing_duration_ms)
}

// optional int64 duration_since_last_default_match_update_ms = 13;
bool OmniboxEventProto::has_duration_since_last_default_match_update_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OmniboxEventProto::set_has_duration_since_last_default_match_update_ms() {
  _has_bits_[0] |= 0x00000100u;
}
void OmniboxEventProto::clear_has_duration_since_last_default_match_update_ms() {
  _has_bits_[0] &= ~0x00000100u;
}
void OmniboxEventProto::clear_duration_since_last_default_match_update_ms() {
  duration_since_last_default_match_update_ms_ = GOOGLE_LONGLONG(0);
  clear_has_duration_since_last_default_match_update_ms();
}
::google::protobuf::int64 OmniboxEventProto::duration_since_last_default_match_update_ms() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.duration_since_last_default_match_update_ms)
  return duration_since_last_default_match_update_ms_;
}
void OmniboxEventProto::set_duration_since_last_default_match_update_ms(::google::protobuf::int64 value) {
  set_has_duration_since_last_default_match_update_ms();
  duration_since_last_default_match_update_ms_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.duration_since_last_default_match_update_ms)
}

// optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
bool OmniboxEventProto::has_current_page_classification() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OmniboxEventProto::set_has_current_page_classification() {
  _has_bits_[0] |= 0x00000200u;
}
void OmniboxEventProto::clear_has_current_page_classification() {
  _has_bits_[0] &= ~0x00000200u;
}
void OmniboxEventProto::clear_current_page_classification() {
  current_page_classification_ = 0;
  clear_has_current_page_classification();
}
::metrics::OmniboxEventProto_PageClassification OmniboxEventProto::current_page_classification() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.current_page_classification)
  return static_cast< ::metrics::OmniboxEventProto_PageClassification >(current_page_classification_);
}
void OmniboxEventProto::set_current_page_classification(::metrics::OmniboxEventProto_PageClassification value) {
  assert(::metrics::OmniboxEventProto_PageClassification_IsValid(value));
  set_has_current_page_classification();
  current_page_classification_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.current_page_classification)
}

// optional .metrics.OmniboxInputType input_type = 8;
bool OmniboxEventProto::has_input_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OmniboxEventProto::set_has_input_type() {
  _has_bits_[0] |= 0x00000080u;
}
void OmniboxEventProto::clear_has_input_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void OmniboxEventProto::clear_input_type() {
  input_type_ = 0;
  clear_has_input_type();
}
::metrics::OmniboxInputType OmniboxEventProto::input_type() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.input_type)
  return static_cast< ::metrics::OmniboxInputType >(input_type_);
}
void OmniboxEventProto::set_input_type(::metrics::OmniboxInputType value) {
  assert(::metrics::OmniboxInputType_IsValid(value));
  set_has_input_type();
  input_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.input_type)
}

// repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
int OmniboxEventProto::suggestion_size() const {
  return suggestion_.size();
}
void OmniboxEventProto::clear_suggestion() {
  suggestion_.Clear();
}
const ::metrics::OmniboxEventProto_Suggestion& OmniboxEventProto::suggestion(int index) const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.suggestion)
  return suggestion_.Get(index);
}
::metrics::OmniboxEventProto_Suggestion* OmniboxEventProto::mutable_suggestion(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.OmniboxEventProto.suggestion)
  return suggestion_.Mutable(index);
}
::metrics::OmniboxEventProto_Suggestion* OmniboxEventProto::add_suggestion() {
  // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.suggestion)
  return suggestion_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::OmniboxEventProto_Suggestion >*
OmniboxEventProto::mutable_suggestion() {
  // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.suggestion)
  return &suggestion_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::OmniboxEventProto_Suggestion >&
OmniboxEventProto::suggestion() const {
  // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.suggestion)
  return suggestion_;
}

// repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
int OmniboxEventProto::provider_info_size() const {
  return provider_info_.size();
}
void OmniboxEventProto::clear_provider_info() {
  provider_info_.Clear();
}
const ::metrics::OmniboxEventProto_ProviderInfo& OmniboxEventProto::provider_info(int index) const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.provider_info)
  return provider_info_.Get(index);
}
::metrics::OmniboxEventProto_ProviderInfo* OmniboxEventProto::mutable_provider_info(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.OmniboxEventProto.provider_info)
  return provider_info_.Mutable(index);
}
::metrics::OmniboxEventProto_ProviderInfo* OmniboxEventProto::add_provider_info() {
  // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.provider_info)
  return provider_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::OmniboxEventProto_ProviderInfo >*
OmniboxEventProto::mutable_provider_info() {
  // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.provider_info)
  return &provider_info_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::OmniboxEventProto_ProviderInfo >&
OmniboxEventProto::provider_info() const {
  // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.provider_info)
  return provider_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
