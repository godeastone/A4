// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_logs.proto

#ifndef PROTOBUF_cast_5flogs_2eproto__INCLUDED
#define PROTOBUF_cast_5flogs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace metrics {
class CastLogsProto;
class CastLogsProtoDefaultTypeInternal;
extern CastLogsProtoDefaultTypeInternal _CastLogsProto_default_instance_;
class CastLogsProto_CastConnectionInfo;
class CastLogsProto_CastConnectionInfoDefaultTypeInternal;
extern CastLogsProto_CastConnectionInfoDefaultTypeInternal _CastLogsProto_CastConnectionInfo_default_instance_;
class CastLogsProto_CastConnectionInfo_SenderInfo;
class CastLogsProto_CastConnectionInfo_SenderInfoDefaultTypeInternal;
extern CastLogsProto_CastConnectionInfo_SenderInfoDefaultTypeInternal _CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_;
class CastLogsProto_CastDeviceInfo;
class CastLogsProto_CastDeviceInfoDefaultTypeInternal;
extern CastLogsProto_CastDeviceInfoDefaultTypeInternal _CastLogsProto_CastDeviceInfo_default_instance_;
class CastLogsProto_CastDeviceInfo_HardwareInfo;
class CastLogsProto_CastDeviceInfo_HardwareInfoDefaultTypeInternal;
extern CastLogsProto_CastDeviceInfo_HardwareInfoDefaultTypeInternal _CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_;
class CastLogsProto_CastDeviceMutableInfo;
class CastLogsProto_CastDeviceMutableInfoDefaultTypeInternal;
extern CastLogsProto_CastDeviceMutableInfoDefaultTypeInternal _CastLogsProto_CastDeviceMutableInfo_default_instance_;
class CastLogsProto_CastEventProto;
class CastLogsProto_CastEventProtoDefaultTypeInternal;
extern CastLogsProto_CastEventProtoDefaultTypeInternal _CastLogsProto_CastEventProto_default_instance_;
}  // namespace metrics

namespace metrics {

namespace protobuf_cast_5flogs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cast_5flogs_2eproto

enum CastLogsProto_CastDeviceInfo_CastProductType {
  CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_UNKNOWN = 0,
  CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_CHROMECAST = 1,
  CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_TV = 2,
  CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_AUDIO = 3,
  CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_ANDROID_TV = 4,
  CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_ASSISTANT = 5,
  CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_ANDROID_THINGS = 6,
  CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_CHROME_OS = 7
};
bool CastLogsProto_CastDeviceInfo_CastProductType_IsValid(int value);
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo_CastProductType_CastProductType_MIN = CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_UNKNOWN;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo_CastProductType_CastProductType_MAX = CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_CHROME_OS;
const int CastLogsProto_CastDeviceInfo_CastProductType_CastProductType_ARRAYSIZE = CastLogsProto_CastDeviceInfo_CastProductType_CastProductType_MAX + 1;

enum CastLogsProto_CastConnectionInfo_SenderInfo_SDKType {
  CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDK_UNKNOWN = 0,
  CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDK_NATIVE = 1,
  CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDK_CHROME_EXTENSION = 2
};
bool CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(int value);
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDKType_MIN = CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDK_UNKNOWN;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDKType_MAX = CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDK_CHROME_EXTENSION;
const int CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDKType_ARRAYSIZE = CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDKType_MAX + 1;

enum CastLogsProto_CastConnectionInfo_SenderInfo_Platform {
  CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_OTHER = 0,
  CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_ANDROID = 1,
  CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_IOS = 2,
  CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_WINDOWS = 3,
  CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_OSX = 4,
  CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_CHROMEOS = 5,
  CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_LINUX = 6,
  CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_CAST = 7
};
bool CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(int value);
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo_Platform_Platform_MIN = CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_OTHER;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo_Platform_Platform_MAX = CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_CAST;
const int CastLogsProto_CastConnectionInfo_SenderInfo_Platform_Platform_ARRAYSIZE = CastLogsProto_CastConnectionInfo_SenderInfo_Platform_Platform_MAX + 1;

enum CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType {
  CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_CONNECTION_TYPE_UNKNOWN = 0,
  CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_CONNECTION_TYPE_LOCAL = 1,
  CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_CONNECTION_TYPE_RELAY = 2,
  CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_CONNECTION_TYPE_INTERNAL = 3
};
bool CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(int value);
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_ConnectionType_MIN = CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_CONNECTION_TYPE_UNKNOWN;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_ConnectionType_MAX = CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_CONNECTION_TYPE_INTERNAL;
const int CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_ConnectionType_ARRAYSIZE = CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_ConnectionType_MAX + 1;

enum CastLogsProto_CastDeviceMutableInfo_RebootType {
  CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_UNKNOWN = 0,
  CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_FORCED = 1,
  CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_API = 2,
  CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_NIGHTLY = 3,
  CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_OTA = 4,
  CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_WATCHDOG = 5,
  CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_PROCESS_MANAGER = 6,
  CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_CRASH_UPLOADER = 7,
  CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_FDR = 8
};
bool CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(int value);
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo_RebootType_RebootType_MIN = CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_UNKNOWN;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo_RebootType_RebootType_MAX = CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_FDR;
const int CastLogsProto_CastDeviceMutableInfo_RebootType_RebootType_ARRAYSIZE = CastLogsProto_CastDeviceMutableInfo_RebootType_RebootType_MAX + 1;

enum CastLogsProto_CastDeviceMutableInfo_NetifIPVersion {
  CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IP_UNKNOWN = 0,
  CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IP_V4 = 1,
  CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IP_V6 = 2,
  CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IP_DUAL_STACK = 3
};
bool CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(int value);
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_NetifIPVersion_MIN = CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IP_UNKNOWN;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_NetifIPVersion_MAX = CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IP_DUAL_STACK;
const int CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_NetifIPVersion_ARRAYSIZE = CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_NetifIPVersion_MAX + 1;

// ===================================================================

class CastLogsProto_CastDeviceInfo_HardwareInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo) */ {
 public:
  CastLogsProto_CastDeviceInfo_HardwareInfo();
  virtual ~CastLogsProto_CastDeviceInfo_HardwareInfo();

  CastLogsProto_CastDeviceInfo_HardwareInfo(const CastLogsProto_CastDeviceInfo_HardwareInfo& from);

  inline CastLogsProto_CastDeviceInfo_HardwareInfo& operator=(const CastLogsProto_CastDeviceInfo_HardwareInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastLogsProto_CastDeviceInfo_HardwareInfo& default_instance();

  static inline const CastLogsProto_CastDeviceInfo_HardwareInfo* internal_default_instance() {
    return reinterpret_cast<const CastLogsProto_CastDeviceInfo_HardwareInfo*>(
               &_CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CastLogsProto_CastDeviceInfo_HardwareInfo* other);

  // implements Message ----------------------------------------------

  inline CastLogsProto_CastDeviceInfo_HardwareInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CastLogsProto_CastDeviceInfo_HardwareInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CastLogsProto_CastDeviceInfo_HardwareInfo& from);
  void MergeFrom(const CastLogsProto_CastDeviceInfo_HardwareInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastLogsProto_CastDeviceInfo_HardwareInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional string mic = 2;
  bool has_mic() const;
  void clear_mic();
  static const int kMicFieldNumber = 2;
  const ::std::string& mic() const;
  void set_mic(const ::std::string& value);
  #if LANG_CXX11
  void set_mic(::std::string&& value);
  #endif
  void set_mic(const char* value);
  void set_mic(const char* value, size_t size);
  ::std::string* mutable_mic();
  ::std::string* release_mic();
  void set_allocated_mic(::std::string* mic);

  // optional string memory = 3;
  bool has_memory() const;
  void clear_memory();
  static const int kMemoryFieldNumber = 3;
  const ::std::string& memory() const;
  void set_memory(const ::std::string& value);
  #if LANG_CXX11
  void set_memory(::std::string&& value);
  #endif
  void set_memory(const char* value);
  void set_memory(const char* value, size_t size);
  ::std::string* mutable_memory();
  ::std::string* release_memory();
  void set_allocated_memory(::std::string* memory);

  // optional string nand = 4;
  bool has_nand() const;
  void clear_nand();
  static const int kNandFieldNumber = 4;
  const ::std::string& nand() const;
  void set_nand(const ::std::string& value);
  #if LANG_CXX11
  void set_nand(::std::string&& value);
  #endif
  void set_nand(const char* value);
  void set_nand(const char* value, size_t size);
  ::std::string* mutable_nand();
  ::std::string* release_nand();
  void set_allocated_nand(::std::string* nand);

  // @@protoc_insertion_point(class_scope:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
 private:
  void set_has_color();
  void clear_has_color();
  void set_has_mic();
  void clear_has_mic();
  void set_has_memory();
  void clear_has_memory();
  void set_has_nand();
  void clear_has_nand();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr mic_;
  ::google::protobuf::internal::ArenaStringPtr memory_;
  ::google::protobuf::internal::ArenaStringPtr nand_;
  friend struct protobuf_cast_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CastLogsProto_CastDeviceInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CastLogsProto.CastDeviceInfo) */ {
 public:
  CastLogsProto_CastDeviceInfo();
  virtual ~CastLogsProto_CastDeviceInfo();

  CastLogsProto_CastDeviceInfo(const CastLogsProto_CastDeviceInfo& from);

  inline CastLogsProto_CastDeviceInfo& operator=(const CastLogsProto_CastDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastLogsProto_CastDeviceInfo& default_instance();

  static inline const CastLogsProto_CastDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const CastLogsProto_CastDeviceInfo*>(
               &_CastLogsProto_CastDeviceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CastLogsProto_CastDeviceInfo* other);

  // implements Message ----------------------------------------------

  inline CastLogsProto_CastDeviceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CastLogsProto_CastDeviceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CastLogsProto_CastDeviceInfo& from);
  void MergeFrom(const CastLogsProto_CastDeviceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastLogsProto_CastDeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CastLogsProto_CastDeviceInfo_HardwareInfo HardwareInfo;

  typedef CastLogsProto_CastDeviceInfo_CastProductType CastProductType;
  static const CastProductType CAST_PRODUCT_TYPE_UNKNOWN =
    CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_UNKNOWN;
  static const CastProductType CAST_PRODUCT_TYPE_CHROMECAST =
    CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_CHROMECAST;
  static const CastProductType CAST_PRODUCT_TYPE_TV =
    CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_TV;
  static const CastProductType CAST_PRODUCT_TYPE_AUDIO =
    CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_AUDIO;
  static const CastProductType CAST_PRODUCT_TYPE_ANDROID_TV =
    CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_ANDROID_TV;
  static const CastProductType CAST_PRODUCT_TYPE_ASSISTANT =
    CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_ASSISTANT;
  static const CastProductType CAST_PRODUCT_TYPE_ANDROID_THINGS =
    CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_ANDROID_THINGS;
  static const CastProductType CAST_PRODUCT_TYPE_CHROME_OS =
    CastLogsProto_CastDeviceInfo_CastProductType_CAST_PRODUCT_TYPE_CHROME_OS;
  static inline bool CastProductType_IsValid(int value) {
    return CastLogsProto_CastDeviceInfo_CastProductType_IsValid(value);
  }
  static const CastProductType CastProductType_MIN =
    CastLogsProto_CastDeviceInfo_CastProductType_CastProductType_MIN;
  static const CastProductType CastProductType_MAX =
    CastLogsProto_CastDeviceInfo_CastProductType_CastProductType_MAX;
  static const int CastProductType_ARRAYSIZE =
    CastLogsProto_CastDeviceInfo_CastProductType_CastProductType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string hardware_revision = 2;
  bool has_hardware_revision() const;
  void clear_hardware_revision();
  static const int kHardwareRevisionFieldNumber = 2;
  const ::std::string& hardware_revision() const;
  void set_hardware_revision(const ::std::string& value);
  #if LANG_CXX11
  void set_hardware_revision(::std::string&& value);
  #endif
  void set_hardware_revision(const char* value);
  void set_hardware_revision(const char* value, size_t size);
  ::std::string* mutable_hardware_revision();
  ::std::string* release_hardware_revision();
  void set_allocated_hardware_revision(::std::string* hardware_revision);

  // optional string manufacturer = 3;
  bool has_manufacturer() const;
  void clear_manufacturer();
  static const int kManufacturerFieldNumber = 3;
  const ::std::string& manufacturer() const;
  void set_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturer(::std::string&& value);
  #endif
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  ::std::string* mutable_manufacturer();
  ::std::string* release_manufacturer();
  void set_allocated_manufacturer(::std::string* manufacturer);

  // optional string model = 4;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 4;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // optional string serial_number = 5;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 5;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
  bool has_hardware_info() const;
  void clear_hardware_info();
  static const int kHardwareInfoFieldNumber = 6;
  const ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo& hardware_info() const;
  ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* mutable_hardware_info();
  ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* release_hardware_info();
  void set_allocated_hardware_info(::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* hardware_info);

  // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::metrics::CastLogsProto_CastDeviceInfo_CastProductType type() const;
  void set_type(::metrics::CastLogsProto_CastDeviceInfo_CastProductType value);

  // @@protoc_insertion_point(class_scope:metrics.CastLogsProto.CastDeviceInfo)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_hardware_revision();
  void clear_has_hardware_revision();
  void set_has_manufacturer();
  void clear_has_manufacturer();
  void set_has_model();
  void clear_has_model();
  void set_has_serial_number();
  void clear_has_serial_number();
  void set_has_hardware_info();
  void clear_has_hardware_info();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hardware_revision_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* hardware_info_;
  int type_;
  friend struct protobuf_cast_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CastLogsProto_CastConnectionInfo_SenderInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CastLogsProto.CastConnectionInfo.SenderInfo) */ {
 public:
  CastLogsProto_CastConnectionInfo_SenderInfo();
  virtual ~CastLogsProto_CastConnectionInfo_SenderInfo();

  CastLogsProto_CastConnectionInfo_SenderInfo(const CastLogsProto_CastConnectionInfo_SenderInfo& from);

  inline CastLogsProto_CastConnectionInfo_SenderInfo& operator=(const CastLogsProto_CastConnectionInfo_SenderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastLogsProto_CastConnectionInfo_SenderInfo& default_instance();

  static inline const CastLogsProto_CastConnectionInfo_SenderInfo* internal_default_instance() {
    return reinterpret_cast<const CastLogsProto_CastConnectionInfo_SenderInfo*>(
               &_CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CastLogsProto_CastConnectionInfo_SenderInfo* other);

  // implements Message ----------------------------------------------

  inline CastLogsProto_CastConnectionInfo_SenderInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CastLogsProto_CastConnectionInfo_SenderInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CastLogsProto_CastConnectionInfo_SenderInfo& from);
  void MergeFrom(const CastLogsProto_CastConnectionInfo_SenderInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastLogsProto_CastConnectionInfo_SenderInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CastLogsProto_CastConnectionInfo_SenderInfo_SDKType SDKType;
  static const SDKType SDK_UNKNOWN =
    CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDK_UNKNOWN;
  static const SDKType SDK_NATIVE =
    CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDK_NATIVE;
  static const SDKType SDK_CHROME_EXTENSION =
    CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDK_CHROME_EXTENSION;
  static inline bool SDKType_IsValid(int value) {
    return CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(value);
  }
  static const SDKType SDKType_MIN =
    CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDKType_MIN;
  static const SDKType SDKType_MAX =
    CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDKType_MAX;
  static const int SDKType_ARRAYSIZE =
    CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_SDKType_ARRAYSIZE;

  typedef CastLogsProto_CastConnectionInfo_SenderInfo_Platform Platform;
  static const Platform PLATFORM_OTHER =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_OTHER;
  static const Platform PLATFORM_ANDROID =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_ANDROID;
  static const Platform PLATFORM_IOS =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_IOS;
  static const Platform PLATFORM_WINDOWS =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_WINDOWS;
  static const Platform PLATFORM_OSX =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_OSX;
  static const Platform PLATFORM_CHROMEOS =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_CHROMEOS;
  static const Platform PLATFORM_LINUX =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_LINUX;
  static const Platform PLATFORM_CAST =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_PLATFORM_CAST;
  static inline bool Platform_IsValid(int value) {
    return CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(value);
  }
  static const Platform Platform_MIN =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_Platform_MIN;
  static const Platform Platform_MAX =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_Platform_MAX;
  static const int Platform_ARRAYSIZE =
    CastLogsProto_CastConnectionInfo_SenderInfo_Platform_Platform_ARRAYSIZE;

  typedef CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType ConnectionType;
  static const ConnectionType CONNECTION_TYPE_UNKNOWN =
    CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_CONNECTION_TYPE_UNKNOWN;
  static const ConnectionType CONNECTION_TYPE_LOCAL =
    CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_CONNECTION_TYPE_LOCAL;
  static const ConnectionType CONNECTION_TYPE_RELAY =
    CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_CONNECTION_TYPE_RELAY;
  static const ConnectionType CONNECTION_TYPE_INTERNAL =
    CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_CONNECTION_TYPE_INTERNAL;
  static inline bool ConnectionType_IsValid(int value) {
    return CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(value);
  }
  static const ConnectionType ConnectionType_MIN =
    CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_ConnectionType_MIN;
  static const ConnectionType ConnectionType_MAX =
    CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_ConnectionType_MAX;
  static const int ConnectionType_ARRAYSIZE =
    CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_ConnectionType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string version = 3;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string chrome_browser_version = 4;
  bool has_chrome_browser_version() const;
  void clear_chrome_browser_version();
  static const int kChromeBrowserVersionFieldNumber = 4;
  const ::std::string& chrome_browser_version() const;
  void set_chrome_browser_version(const ::std::string& value);
  #if LANG_CXX11
  void set_chrome_browser_version(::std::string&& value);
  #endif
  void set_chrome_browser_version(const char* value);
  void set_chrome_browser_version(const char* value, size_t size);
  ::std::string* mutable_chrome_browser_version();
  ::std::string* release_chrome_browser_version();
  void set_allocated_chrome_browser_version(::std::string* chrome_browser_version);

  // optional string system_version = 6;
  bool has_system_version() const;
  void clear_system_version();
  static const int kSystemVersionFieldNumber = 6;
  const ::std::string& system_version() const;
  void set_system_version(const ::std::string& value);
  #if LANG_CXX11
  void set_system_version(::std::string&& value);
  #endif
  void set_system_version(const char* value);
  void set_system_version(const char* value, size_t size);
  ::std::string* mutable_system_version();
  ::std::string* release_system_version();
  void set_allocated_system_version(::std::string* system_version);

  // optional string model = 8;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 8;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // optional fixed64 sender_device_id = 1;
  bool has_sender_device_id() const;
  void clear_sender_device_id();
  static const int kSenderDeviceIdFieldNumber = 1;
  ::google::protobuf::uint64 sender_device_id() const;
  void set_sender_device_id(::google::protobuf::uint64 value);

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
  bool has_sdk_type() const;
  void clear_sdk_type();
  static const int kSdkTypeFieldNumber = 2;
  ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType sdk_type() const;
  void set_sdk_type(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType value);

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 5;
  ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform platform() const;
  void set_platform(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform value);

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
  bool has_transport_connection_type() const;
  void clear_transport_connection_type();
  static const int kTransportConnectionTypeFieldNumber = 7;
  ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType transport_connection_type() const;
  void set_transport_connection_type(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType value);

  // optional int32 sender_local_ip_fragment = 9;
  bool has_sender_local_ip_fragment() const;
  void clear_sender_local_ip_fragment();
  static const int kSenderLocalIpFragmentFieldNumber = 9;
  ::google::protobuf::int32 sender_local_ip_fragment() const;
  void set_sender_local_ip_fragment(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
 private:
  void set_has_sender_device_id();
  void clear_has_sender_device_id();
  void set_has_sdk_type();
  void clear_has_sdk_type();
  void set_has_version();
  void clear_has_version();
  void set_has_chrome_browser_version();
  void clear_has_chrome_browser_version();
  void set_has_platform();
  void clear_has_platform();
  void set_has_system_version();
  void clear_has_system_version();
  void set_has_transport_connection_type();
  void clear_has_transport_connection_type();
  void set_has_model();
  void clear_has_model();
  void set_has_sender_local_ip_fragment();
  void clear_has_sender_local_ip_fragment();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr chrome_browser_version_;
  ::google::protobuf::internal::ArenaStringPtr system_version_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::uint64 sender_device_id_;
  int sdk_type_;
  int platform_;
  int transport_connection_type_;
  ::google::protobuf::int32 sender_local_ip_fragment_;
  friend struct protobuf_cast_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CastLogsProto_CastConnectionInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CastLogsProto.CastConnectionInfo) */ {
 public:
  CastLogsProto_CastConnectionInfo();
  virtual ~CastLogsProto_CastConnectionInfo();

  CastLogsProto_CastConnectionInfo(const CastLogsProto_CastConnectionInfo& from);

  inline CastLogsProto_CastConnectionInfo& operator=(const CastLogsProto_CastConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastLogsProto_CastConnectionInfo& default_instance();

  static inline const CastLogsProto_CastConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const CastLogsProto_CastConnectionInfo*>(
               &_CastLogsProto_CastConnectionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CastLogsProto_CastConnectionInfo* other);

  // implements Message ----------------------------------------------

  inline CastLogsProto_CastConnectionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CastLogsProto_CastConnectionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CastLogsProto_CastConnectionInfo& from);
  void MergeFrom(const CastLogsProto_CastConnectionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastLogsProto_CastConnectionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CastLogsProto_CastConnectionInfo_SenderInfo SenderInfo;

  // accessors -------------------------------------------------------

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
  bool has_sender_info() const;
  void clear_sender_info();
  static const int kSenderInfoFieldNumber = 3;
  const ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo& sender_info() const;
  ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* mutable_sender_info();
  ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* release_sender_info();
  void set_allocated_sender_info(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* sender_info);

  // optional fixed32 transport_connection_id = 1;
  bool has_transport_connection_id() const;
  void clear_transport_connection_id();
  static const int kTransportConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 transport_connection_id() const;
  void set_transport_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 virtual_connection_id = 2;
  bool has_virtual_connection_id() const;
  void clear_virtual_connection_id();
  static const int kVirtualConnectionIdFieldNumber = 2;
  ::google::protobuf::uint32 virtual_connection_id() const;
  void set_virtual_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.CastLogsProto.CastConnectionInfo)
 private:
  void set_has_transport_connection_id();
  void clear_has_transport_connection_id();
  void set_has_virtual_connection_id();
  void clear_has_virtual_connection_id();
  void set_has_sender_info();
  void clear_has_sender_info();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* sender_info_;
  ::google::protobuf::uint32 transport_connection_id_;
  ::google::protobuf::uint32 virtual_connection_id_;
  friend struct protobuf_cast_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CastLogsProto_CastEventProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CastLogsProto.CastEventProto) */ {
 public:
  CastLogsProto_CastEventProto();
  virtual ~CastLogsProto_CastEventProto();

  CastLogsProto_CastEventProto(const CastLogsProto_CastEventProto& from);

  inline CastLogsProto_CastEventProto& operator=(const CastLogsProto_CastEventProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastLogsProto_CastEventProto& default_instance();

  static inline const CastLogsProto_CastEventProto* internal_default_instance() {
    return reinterpret_cast<const CastLogsProto_CastEventProto*>(
               &_CastLogsProto_CastEventProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CastLogsProto_CastEventProto* other);

  // implements Message ----------------------------------------------

  inline CastLogsProto_CastEventProto* New() const PROTOBUF_FINAL { return New(NULL); }

  CastLogsProto_CastEventProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CastLogsProto_CastEventProto& from);
  void MergeFrom(const CastLogsProto_CastEventProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastLogsProto_CastEventProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float feature_vector = 15;
  int feature_vector_size() const;
  void clear_feature_vector();
  static const int kFeatureVectorFieldNumber = 15;
  float feature_vector(int index) const;
  void set_feature_vector(int index, float value);
  void add_feature_vector(float value);
  const ::google::protobuf::RepeatedField< float >&
      feature_vector() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_feature_vector();

  // optional string conversation_key = 11;
  bool has_conversation_key() const;
  void clear_conversation_key();
  static const int kConversationKeyFieldNumber = 11;
  const ::std::string& conversation_key() const;
  void set_conversation_key(const ::std::string& value);
  #if LANG_CXX11
  void set_conversation_key(::std::string&& value);
  #endif
  void set_conversation_key(const char* value);
  void set_conversation_key(const char* value, size_t size);
  ::std::string* mutable_conversation_key();
  ::std::string* release_conversation_key();
  void set_allocated_conversation_key(::std::string* conversation_key);

  // optional fixed64 name_hash = 1;
  bool has_name_hash() const;
  void clear_name_hash();
  static const int kNameHashFieldNumber = 1;
  ::google::protobuf::uint64 name_hash() const;
  void set_name_hash(::google::protobuf::uint64 value);

  // optional int64 time_msec = 2;
  bool has_time_msec() const;
  void clear_time_msec();
  static const int kTimeMsecFieldNumber = 2;
  ::google::protobuf::int64 time_msec() const;
  void set_time_msec(::google::protobuf::int64 value);

  // optional fixed64 application_session_id = 4;
  bool has_application_session_id() const;
  void clear_application_session_id();
  static const int kApplicationSessionIdFieldNumber = 4;
  ::google::protobuf::uint64 application_session_id() const;
  void set_application_session_id(::google::protobuf::uint64 value);

  // optional fixed32 app_id = 3;
  bool has_app_id() const;
  void clear_app_id();
  static const int kAppIdFieldNumber = 3;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // optional fixed32 transport_connection_id = 6;
  bool has_transport_connection_id() const;
  void clear_transport_connection_id();
  static const int kTransportConnectionIdFieldNumber = 6;
  ::google::protobuf::uint32 transport_connection_id() const;
  void set_transport_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 cast_receiver_version = 5;
  bool has_cast_receiver_version() const;
  void clear_cast_receiver_version();
  static const int kCastReceiverVersionFieldNumber = 5;
  ::google::protobuf::uint64 cast_receiver_version() const;
  void set_cast_receiver_version(::google::protobuf::uint64 value);

  // optional int64 value = 8;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 8;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // optional fixed64 cast_mpl_version = 9;
  bool has_cast_mpl_version() const;
  void clear_cast_mpl_version();
  static const int kCastMplVersionFieldNumber = 9;
  ::google::protobuf::uint64 cast_mpl_version() const;
  void set_cast_mpl_version(::google::protobuf::uint64 value);

  // optional fixed32 virtual_connection_id = 7;
  bool has_virtual_connection_id() const;
  void clear_virtual_connection_id();
  static const int kVirtualConnectionIdFieldNumber = 7;
  ::google::protobuf::uint32 virtual_connection_id() const;
  void set_virtual_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 request_id = 12;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 12;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // optional fixed64 group_uuid = 10;
  bool has_group_uuid() const;
  void clear_group_uuid();
  static const int kGroupUuidFieldNumber = 10;
  ::google::protobuf::uint64 group_uuid() const;
  void set_group_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.CastLogsProto.CastEventProto)
 private:
  void set_has_name_hash();
  void clear_has_name_hash();
  void set_has_time_msec();
  void clear_has_time_msec();
  void set_has_app_id();
  void clear_has_app_id();
  void set_has_application_session_id();
  void clear_has_application_session_id();
  void set_has_cast_receiver_version();
  void clear_has_cast_receiver_version();
  void set_has_cast_mpl_version();
  void clear_has_cast_mpl_version();
  void set_has_transport_connection_id();
  void clear_has_transport_connection_id();
  void set_has_virtual_connection_id();
  void clear_has_virtual_connection_id();
  void set_has_value();
  void clear_has_value();
  void set_has_group_uuid();
  void clear_has_group_uuid();
  void set_has_conversation_key();
  void clear_has_conversation_key();
  void set_has_request_id();
  void clear_has_request_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > feature_vector_;
  ::google::protobuf::internal::ArenaStringPtr conversation_key_;
  ::google::protobuf::uint64 name_hash_;
  ::google::protobuf::int64 time_msec_;
  ::google::protobuf::uint64 application_session_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 transport_connection_id_;
  ::google::protobuf::uint64 cast_receiver_version_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::uint64 cast_mpl_version_;
  ::google::protobuf::uint32 virtual_connection_id_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint64 group_uuid_;
  friend struct protobuf_cast_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CastLogsProto_CastDeviceMutableInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CastLogsProto.CastDeviceMutableInfo) */ {
 public:
  CastLogsProto_CastDeviceMutableInfo();
  virtual ~CastLogsProto_CastDeviceMutableInfo();

  CastLogsProto_CastDeviceMutableInfo(const CastLogsProto_CastDeviceMutableInfo& from);

  inline CastLogsProto_CastDeviceMutableInfo& operator=(const CastLogsProto_CastDeviceMutableInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastLogsProto_CastDeviceMutableInfo& default_instance();

  static inline const CastLogsProto_CastDeviceMutableInfo* internal_default_instance() {
    return reinterpret_cast<const CastLogsProto_CastDeviceMutableInfo*>(
               &_CastLogsProto_CastDeviceMutableInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CastLogsProto_CastDeviceMutableInfo* other);

  // implements Message ----------------------------------------------

  inline CastLogsProto_CastDeviceMutableInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CastLogsProto_CastDeviceMutableInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CastLogsProto_CastDeviceMutableInfo& from);
  void MergeFrom(const CastLogsProto_CastDeviceMutableInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastLogsProto_CastDeviceMutableInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CastLogsProto_CastDeviceMutableInfo_RebootType RebootType;
  static const RebootType REBOOT_TYPE_UNKNOWN =
    CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_UNKNOWN;
  static const RebootType REBOOT_TYPE_FORCED =
    CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_FORCED;
  static const RebootType REBOOT_TYPE_API =
    CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_API;
  static const RebootType REBOOT_TYPE_NIGHTLY =
    CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_NIGHTLY;
  static const RebootType REBOOT_TYPE_OTA =
    CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_OTA;
  static const RebootType REBOOT_TYPE_WATCHDOG =
    CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_WATCHDOG;
  static const RebootType REBOOT_TYPE_PROCESS_MANAGER =
    CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_PROCESS_MANAGER;
  static const RebootType REBOOT_TYPE_CRASH_UPLOADER =
    CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_CRASH_UPLOADER;
  static const RebootType REBOOT_TYPE_FDR =
    CastLogsProto_CastDeviceMutableInfo_RebootType_REBOOT_TYPE_FDR;
  static inline bool RebootType_IsValid(int value) {
    return CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(value);
  }
  static const RebootType RebootType_MIN =
    CastLogsProto_CastDeviceMutableInfo_RebootType_RebootType_MIN;
  static const RebootType RebootType_MAX =
    CastLogsProto_CastDeviceMutableInfo_RebootType_RebootType_MAX;
  static const int RebootType_ARRAYSIZE =
    CastLogsProto_CastDeviceMutableInfo_RebootType_RebootType_ARRAYSIZE;

  typedef CastLogsProto_CastDeviceMutableInfo_NetifIPVersion NetifIPVersion;
  static const NetifIPVersion IP_UNKNOWN =
    CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IP_UNKNOWN;
  static const NetifIPVersion IP_V4 =
    CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IP_V4;
  static const NetifIPVersion IP_V6 =
    CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IP_V6;
  static const NetifIPVersion IP_DUAL_STACK =
    CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IP_DUAL_STACK;
  static inline bool NetifIPVersion_IsValid(int value) {
    return CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(value);
  }
  static const NetifIPVersion NetifIPVersion_MIN =
    CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_NetifIPVersion_MIN;
  static const NetifIPVersion NetifIPVersion_MAX =
    CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_NetifIPVersion_MAX;
  static const int NetifIPVersion_ARRAYSIZE =
    CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_NetifIPVersion_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string backdrop_app_device_id = 3;
  bool has_backdrop_app_device_id() const;
  void clear_backdrop_app_device_id();
  static const int kBackdropAppDeviceIdFieldNumber = 3;
  const ::std::string& backdrop_app_device_id() const;
  void set_backdrop_app_device_id(const ::std::string& value);
  #if LANG_CXX11
  void set_backdrop_app_device_id(::std::string&& value);
  #endif
  void set_backdrop_app_device_id(const char* value);
  void set_backdrop_app_device_id(const char* value, size_t size);
  ::std::string* mutable_backdrop_app_device_id();
  ::std::string* release_backdrop_app_device_id();
  void set_allocated_backdrop_app_device_id(::std::string* backdrop_app_device_id);

  // optional fixed64 system_build_number = 2;
  bool has_system_build_number() const;
  void clear_system_build_number();
  static const int kSystemBuildNumberFieldNumber = 2;
  ::google::protobuf::uint64 system_build_number() const;
  void set_system_build_number(::google::protobuf::uint64 value);

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
  bool has_last_reboot_type() const;
  void clear_last_reboot_type();
  static const int kLastRebootTypeFieldNumber = 1;
  ::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType last_reboot_type() const;
  void set_last_reboot_type(::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType value);

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 4;
  bool has_netif_ip_version() const;
  void clear_netif_ip_version();
  static const int kNetifIpVersionFieldNumber = 4;
  ::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion netif_ip_version() const;
  void set_netif_ip_version(::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion value);

  // optional bool ip_dual_stack_supported = 5;
  bool has_ip_dual_stack_supported() const;
  void clear_ip_dual_stack_supported();
  static const int kIpDualStackSupportedFieldNumber = 5;
  bool ip_dual_stack_supported() const;
  void set_ip_dual_stack_supported(bool value);

  // @@protoc_insertion_point(class_scope:metrics.CastLogsProto.CastDeviceMutableInfo)
 private:
  void set_has_last_reboot_type();
  void clear_has_last_reboot_type();
  void set_has_system_build_number();
  void clear_has_system_build_number();
  void set_has_backdrop_app_device_id();
  void clear_has_backdrop_app_device_id();
  void set_has_netif_ip_version();
  void clear_has_netif_ip_version();
  void set_has_ip_dual_stack_supported();
  void clear_has_ip_dual_stack_supported();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr backdrop_app_device_id_;
  ::google::protobuf::uint64 system_build_number_;
  int last_reboot_type_;
  int netif_ip_version_;
  bool ip_dual_stack_supported_;
  friend struct protobuf_cast_5flogs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CastLogsProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CastLogsProto) */ {
 public:
  CastLogsProto();
  virtual ~CastLogsProto();

  CastLogsProto(const CastLogsProto& from);

  inline CastLogsProto& operator=(const CastLogsProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastLogsProto& default_instance();

  static inline const CastLogsProto* internal_default_instance() {
    return reinterpret_cast<const CastLogsProto*>(
               &_CastLogsProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CastLogsProto* other);

  // implements Message ----------------------------------------------

  inline CastLogsProto* New() const PROTOBUF_FINAL { return New(NULL); }

  CastLogsProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CastLogsProto& from);
  void MergeFrom(const CastLogsProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastLogsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CastLogsProto_CastDeviceInfo CastDeviceInfo;
  typedef CastLogsProto_CastConnectionInfo CastConnectionInfo;
  typedef CastLogsProto_CastEventProto CastEventProto;
  typedef CastLogsProto_CastDeviceMutableInfo CastDeviceMutableInfo;

  // accessors -------------------------------------------------------

  // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
  int cast_connection_info_size() const;
  void clear_cast_connection_info();
  static const int kCastConnectionInfoFieldNumber = 2;
  const ::metrics::CastLogsProto_CastConnectionInfo& cast_connection_info(int index) const;
  ::metrics::CastLogsProto_CastConnectionInfo* mutable_cast_connection_info(int index);
  ::metrics::CastLogsProto_CastConnectionInfo* add_cast_connection_info();
  ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastConnectionInfo >*
      mutable_cast_connection_info();
  const ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastConnectionInfo >&
      cast_connection_info() const;

  // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
  int cast_event_size() const;
  void clear_cast_event();
  static const int kCastEventFieldNumber = 3;
  const ::metrics::CastLogsProto_CastEventProto& cast_event(int index) const;
  ::metrics::CastLogsProto_CastEventProto* mutable_cast_event(int index);
  ::metrics::CastLogsProto_CastEventProto* add_cast_event();
  ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto >*
      mutable_cast_event();
  const ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto >&
      cast_event() const;

  // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
  bool has_cast_device_info() const;
  void clear_cast_device_info();
  static const int kCastDeviceInfoFieldNumber = 1;
  const ::metrics::CastLogsProto_CastDeviceInfo& cast_device_info() const;
  ::metrics::CastLogsProto_CastDeviceInfo* mutable_cast_device_info();
  ::metrics::CastLogsProto_CastDeviceInfo* release_cast_device_info();
  void set_allocated_cast_device_info(::metrics::CastLogsProto_CastDeviceInfo* cast_device_info);

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
  bool has_cast_device_mutable_info() const;
  void clear_cast_device_mutable_info();
  static const int kCastDeviceMutableInfoFieldNumber = 5;
  const ::metrics::CastLogsProto_CastDeviceMutableInfo& cast_device_mutable_info() const;
  ::metrics::CastLogsProto_CastDeviceMutableInfo* mutable_cast_device_mutable_info();
  ::metrics::CastLogsProto_CastDeviceMutableInfo* release_cast_device_mutable_info();
  void set_allocated_cast_device_mutable_info(::metrics::CastLogsProto_CastDeviceMutableInfo* cast_device_mutable_info);

  // optional fixed64 receiver_metrics_id = 6;
  bool has_receiver_metrics_id() const;
  void clear_receiver_metrics_id();
  static const int kReceiverMetricsIdFieldNumber = 6;
  ::google::protobuf::uint64 receiver_metrics_id() const;
  void set_receiver_metrics_id(::google::protobuf::uint64 value);

  // optional fixed32 virtual_release_track = 4;
  bool has_virtual_release_track() const;
  void clear_virtual_release_track();
  static const int kVirtualReleaseTrackFieldNumber = 4;
  ::google::protobuf::uint32 virtual_release_track() const;
  void set_virtual_release_track(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.CastLogsProto)
 private:
  void set_has_cast_device_info();
  void clear_has_cast_device_info();
  void set_has_virtual_release_track();
  void clear_has_virtual_release_track();
  void set_has_cast_device_mutable_info();
  void clear_has_cast_device_mutable_info();
  void set_has_receiver_metrics_id();
  void clear_has_receiver_metrics_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastConnectionInfo > cast_connection_info_;
  ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto > cast_event_;
  ::metrics::CastLogsProto_CastDeviceInfo* cast_device_info_;
  ::metrics::CastLogsProto_CastDeviceMutableInfo* cast_device_mutable_info_;
  ::google::protobuf::uint64 receiver_metrics_id_;
  ::google::protobuf::uint32 virtual_release_track_;
  friend struct protobuf_cast_5flogs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastDeviceInfo_HardwareInfo

// optional string color = 1;
inline bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::color() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
  return color_.GetNoArena();
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
#if LANG_CXX11
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
#endif
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
inline ::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_color() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}

// optional string mic = 2;
inline bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_mic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_mic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_mic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_mic() {
  mic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mic();
}
inline const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::mic() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
  return mic_.GetNoArena();
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(const ::std::string& value) {
  set_has_mic();
  mic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
#if LANG_CXX11
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(::std::string&& value) {
  set_has_mic();
  mic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
#endif
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mic();
  mic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(const char* value, size_t size) {
  set_has_mic();
  mic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
inline ::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_mic() {
  set_has_mic();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
  return mic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_mic() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
  clear_has_mic();
  return mic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_mic(::std::string* mic) {
  if (mic != NULL) {
    set_has_mic();
  } else {
    clear_has_mic();
  }
  mic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mic);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}

// optional string memory = 3;
inline bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_memory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_memory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_memory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_memory() {
  memory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memory();
}
inline const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::memory() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
  return memory_.GetNoArena();
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(const ::std::string& value) {
  set_has_memory();
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
#if LANG_CXX11
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(::std::string&& value) {
  set_has_memory();
  memory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
#endif
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_memory();
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(const char* value, size_t size) {
  set_has_memory();
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
inline ::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_memory() {
  set_has_memory();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
  return memory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_memory() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
  clear_has_memory();
  return memory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_memory(::std::string* memory) {
  if (memory != NULL) {
    set_has_memory();
  } else {
    clear_has_memory();
  }
  memory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memory);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}

// optional string nand = 4;
inline bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_nand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_nand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_nand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_nand() {
  nand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nand();
}
inline const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::nand() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
  return nand_.GetNoArena();
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(const ::std::string& value) {
  set_has_nand();
  nand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
#if LANG_CXX11
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(::std::string&& value) {
  set_has_nand();
  nand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
#endif
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nand();
  nand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(const char* value, size_t size) {
  set_has_nand();
  nand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
inline ::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_nand() {
  set_has_nand();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
  return nand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_nand() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
  clear_has_nand();
  return nand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_nand(::std::string* nand) {
  if (nand != NULL) {
    set_has_nand();
  } else {
    clear_has_nand();
  }
  nand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nand);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}

// -------------------------------------------------------------------

// CastLogsProto_CastDeviceInfo

// optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
inline bool CastLogsProto_CastDeviceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CastLogsProto_CastDeviceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CastLogsProto_CastDeviceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CastLogsProto_CastDeviceInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::metrics::CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.type)
  return static_cast< ::metrics::CastLogsProto_CastDeviceInfo_CastProductType >(type_);
}
inline void CastLogsProto_CastDeviceInfo::set_type(::metrics::CastLogsProto_CastDeviceInfo_CastProductType value) {
  assert(::metrics::CastLogsProto_CastDeviceInfo_CastProductType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.type)
}

// optional string hardware_revision = 2;
inline bool CastLogsProto_CastDeviceInfo::has_hardware_revision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastLogsProto_CastDeviceInfo::set_has_hardware_revision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CastLogsProto_CastDeviceInfo::clear_has_hardware_revision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CastLogsProto_CastDeviceInfo::clear_hardware_revision() {
  hardware_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardware_revision();
}
inline const ::std::string& CastLogsProto_CastDeviceInfo::hardware_revision() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
  return hardware_revision_.GetNoArena();
}
inline void CastLogsProto_CastDeviceInfo::set_hardware_revision(const ::std::string& value) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
#if LANG_CXX11
inline void CastLogsProto_CastDeviceInfo::set_hardware_revision(::std::string&& value) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
#endif
inline void CastLogsProto_CastDeviceInfo::set_hardware_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
inline void CastLogsProto_CastDeviceInfo::set_hardware_revision(const char* value, size_t size) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
inline ::std::string* CastLogsProto_CastDeviceInfo::mutable_hardware_revision() {
  set_has_hardware_revision();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
  return hardware_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastDeviceInfo::release_hardware_revision() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
  clear_has_hardware_revision();
  return hardware_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastDeviceInfo::set_allocated_hardware_revision(::std::string* hardware_revision) {
  if (hardware_revision != NULL) {
    set_has_hardware_revision();
  } else {
    clear_has_hardware_revision();
  }
  hardware_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardware_revision);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}

// optional string manufacturer = 3;
inline bool CastLogsProto_CastDeviceInfo::has_manufacturer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastLogsProto_CastDeviceInfo::set_has_manufacturer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CastLogsProto_CastDeviceInfo::clear_has_manufacturer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CastLogsProto_CastDeviceInfo::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manufacturer();
}
inline const ::std::string& CastLogsProto_CastDeviceInfo::manufacturer() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void CastLogsProto_CastDeviceInfo::set_manufacturer(const ::std::string& value) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
#if LANG_CXX11
inline void CastLogsProto_CastDeviceInfo::set_manufacturer(::std::string&& value) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
#endif
inline void CastLogsProto_CastDeviceInfo::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
inline void CastLogsProto_CastDeviceInfo::set_manufacturer(const char* value, size_t size) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
inline ::std::string* CastLogsProto_CastDeviceInfo::mutable_manufacturer() {
  set_has_manufacturer();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastDeviceInfo::release_manufacturer() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
  clear_has_manufacturer();
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastDeviceInfo::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    set_has_manufacturer();
  } else {
    clear_has_manufacturer();
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}

// optional string model = 4;
inline bool CastLogsProto_CastDeviceInfo::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastLogsProto_CastDeviceInfo::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CastLogsProto_CastDeviceInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CastLogsProto_CastDeviceInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
inline const ::std::string& CastLogsProto_CastDeviceInfo::model() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.model)
  return model_.GetNoArena();
}
inline void CastLogsProto_CastDeviceInfo::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.model)
}
#if LANG_CXX11
inline void CastLogsProto_CastDeviceInfo::set_model(::std::string&& value) {
  set_has_model();
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.model)
}
#endif
inline void CastLogsProto_CastDeviceInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.model)
}
inline void CastLogsProto_CastDeviceInfo::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.model)
}
inline ::std::string* CastLogsProto_CastDeviceInfo::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastDeviceInfo::release_model() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastDeviceInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.model)
}

// optional string serial_number = 5;
inline bool CastLogsProto_CastDeviceInfo::has_serial_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CastLogsProto_CastDeviceInfo::set_has_serial_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CastLogsProto_CastDeviceInfo::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CastLogsProto_CastDeviceInfo::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& CastLogsProto_CastDeviceInfo::serial_number() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.serial_number)
  return serial_number_.GetNoArena();
}
inline void CastLogsProto_CastDeviceInfo::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
#if LANG_CXX11
inline void CastLogsProto_CastDeviceInfo::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
#endif
inline void CastLogsProto_CastDeviceInfo::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
inline void CastLogsProto_CastDeviceInfo::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
inline ::std::string* CastLogsProto_CastDeviceInfo::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastDeviceInfo::release_serial_number() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastDeviceInfo::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}

// optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
inline bool CastLogsProto_CastDeviceInfo::has_hardware_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CastLogsProto_CastDeviceInfo::set_has_hardware_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CastLogsProto_CastDeviceInfo::clear_has_hardware_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CastLogsProto_CastDeviceInfo::clear_hardware_info() {
  if (hardware_info_ != NULL) hardware_info_->::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::Clear();
  clear_has_hardware_info();
}
inline const ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo& CastLogsProto_CastDeviceInfo::hardware_info() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
  return hardware_info_ != NULL ? *hardware_info_
                         : *::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::internal_default_instance();
}
inline ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* CastLogsProto_CastDeviceInfo::mutable_hardware_info() {
  set_has_hardware_info();
  if (hardware_info_ == NULL) {
    hardware_info_ = new ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
  return hardware_info_;
}
inline ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* CastLogsProto_CastDeviceInfo::release_hardware_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
  clear_has_hardware_info();
  ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* temp = hardware_info_;
  hardware_info_ = NULL;
  return temp;
}
inline void CastLogsProto_CastDeviceInfo::set_allocated_hardware_info(::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* hardware_info) {
  delete hardware_info_;
  hardware_info_ = hardware_info;
  if (hardware_info) {
    set_has_hardware_info();
  } else {
    clear_has_hardware_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
}

// -------------------------------------------------------------------

// CastLogsProto_CastConnectionInfo_SenderInfo

// optional fixed64 sender_device_id = 1;
inline bool CastLogsProto_CastConnectionInfo_SenderInfo::has_sender_device_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_sender_device_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_sender_device_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_sender_device_id() {
  sender_device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_device_id();
}
inline ::google::protobuf::uint64 CastLogsProto_CastConnectionInfo_SenderInfo::sender_device_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_device_id)
  return sender_device_id_;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_sender_device_id(::google::protobuf::uint64 value) {
  set_has_sender_device_id();
  sender_device_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_device_id)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
inline bool CastLogsProto_CastConnectionInfo_SenderInfo::has_sdk_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_sdk_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_sdk_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_sdk_type() {
  sdk_type_ = 0;
  clear_has_sdk_type();
}
inline ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::sdk_type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sdk_type)
  return static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType >(sdk_type_);
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_sdk_type(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType value) {
  assert(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(value));
  set_has_sdk_type();
  sdk_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sdk_type)
}

// optional string version = 3;
inline bool CastLogsProto_CastConnectionInfo_SenderInfo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
  return version_.GetNoArena();
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
#if LANG_CXX11
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
#endif
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
inline ::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}

// optional string chrome_browser_version = 4;
inline bool CastLogsProto_CastConnectionInfo_SenderInfo::has_chrome_browser_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_chrome_browser_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_chrome_browser_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_chrome_browser_version() {
  chrome_browser_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chrome_browser_version();
}
inline const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::chrome_browser_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
  return chrome_browser_version_.GetNoArena();
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(const ::std::string& value) {
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
#if LANG_CXX11
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(::std::string&& value) {
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
#endif
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(const char* value, size_t size) {
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
inline ::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_chrome_browser_version() {
  set_has_chrome_browser_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
  return chrome_browser_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_chrome_browser_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
  clear_has_chrome_browser_version();
  return chrome_browser_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_chrome_browser_version(::std::string* chrome_browser_version) {
  if (chrome_browser_version != NULL) {
    set_has_chrome_browser_version();
  } else {
    clear_has_chrome_browser_version();
  }
  chrome_browser_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrome_browser_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
inline bool CastLogsProto_CastConnectionInfo_SenderInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::platform() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.platform)
  return static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform >(platform_);
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_platform(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform value) {
  assert(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.platform)
}

// optional string system_version = 6;
inline bool CastLogsProto_CastConnectionInfo_SenderInfo::has_system_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_system_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_system_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_system_version() {
  system_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system_version();
}
inline const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::system_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
  return system_version_.GetNoArena();
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(const ::std::string& value) {
  set_has_system_version();
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
#if LANG_CXX11
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(::std::string&& value) {
  set_has_system_version();
  system_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
#endif
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_system_version();
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(const char* value, size_t size) {
  set_has_system_version();
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
inline ::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_system_version() {
  set_has_system_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
  return system_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_system_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
  clear_has_system_version();
  return system_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_system_version(::std::string* system_version) {
  if (system_version != NULL) {
    set_has_system_version();
  } else {
    clear_has_system_version();
  }
  system_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
inline bool CastLogsProto_CastConnectionInfo_SenderInfo::has_transport_connection_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_transport_connection_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_transport_connection_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_transport_connection_type() {
  transport_connection_type_ = 0;
  clear_has_transport_connection_type();
}
inline ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::transport_connection_type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.transport_connection_type)
  return static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType >(transport_connection_type_);
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_transport_connection_type(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType value) {
  assert(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(value));
  set_has_transport_connection_type();
  transport_connection_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.transport_connection_type)
}

// optional string model = 8;
inline bool CastLogsProto_CastConnectionInfo_SenderInfo::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
inline const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::model() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
  return model_.GetNoArena();
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
#if LANG_CXX11
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(::std::string&& value) {
  set_has_model();
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
#endif
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
inline ::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_model() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}

// optional int32 sender_local_ip_fragment = 9;
inline bool CastLogsProto_CastConnectionInfo_SenderInfo::has_sender_local_ip_fragment() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_sender_local_ip_fragment() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_sender_local_ip_fragment() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::clear_sender_local_ip_fragment() {
  sender_local_ip_fragment_ = 0;
  clear_has_sender_local_ip_fragment();
}
inline ::google::protobuf::int32 CastLogsProto_CastConnectionInfo_SenderInfo::sender_local_ip_fragment() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_local_ip_fragment)
  return sender_local_ip_fragment_;
}
inline void CastLogsProto_CastConnectionInfo_SenderInfo::set_sender_local_ip_fragment(::google::protobuf::int32 value) {
  set_has_sender_local_ip_fragment();
  sender_local_ip_fragment_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_local_ip_fragment)
}

// -------------------------------------------------------------------

// CastLogsProto_CastConnectionInfo

// optional fixed32 transport_connection_id = 1;
inline bool CastLogsProto_CastConnectionInfo::has_transport_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastLogsProto_CastConnectionInfo::set_has_transport_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CastLogsProto_CastConnectionInfo::clear_has_transport_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CastLogsProto_CastConnectionInfo::clear_transport_connection_id() {
  transport_connection_id_ = 0u;
  clear_has_transport_connection_id();
}
inline ::google::protobuf::uint32 CastLogsProto_CastConnectionInfo::transport_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.transport_connection_id)
  return transport_connection_id_;
}
inline void CastLogsProto_CastConnectionInfo::set_transport_connection_id(::google::protobuf::uint32 value) {
  set_has_transport_connection_id();
  transport_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.transport_connection_id)
}

// optional fixed32 virtual_connection_id = 2;
inline bool CastLogsProto_CastConnectionInfo::has_virtual_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastLogsProto_CastConnectionInfo::set_has_virtual_connection_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CastLogsProto_CastConnectionInfo::clear_has_virtual_connection_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CastLogsProto_CastConnectionInfo::clear_virtual_connection_id() {
  virtual_connection_id_ = 0u;
  clear_has_virtual_connection_id();
}
inline ::google::protobuf::uint32 CastLogsProto_CastConnectionInfo::virtual_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.virtual_connection_id)
  return virtual_connection_id_;
}
inline void CastLogsProto_CastConnectionInfo::set_virtual_connection_id(::google::protobuf::uint32 value) {
  set_has_virtual_connection_id();
  virtual_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.virtual_connection_id)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
inline bool CastLogsProto_CastConnectionInfo::has_sender_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastLogsProto_CastConnectionInfo::set_has_sender_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CastLogsProto_CastConnectionInfo::clear_has_sender_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CastLogsProto_CastConnectionInfo::clear_sender_info() {
  if (sender_info_ != NULL) sender_info_->::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::Clear();
  clear_has_sender_info();
}
inline const ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo& CastLogsProto_CastConnectionInfo::sender_info() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.sender_info)
  return sender_info_ != NULL ? *sender_info_
                         : *::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::internal_default_instance();
}
inline ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* CastLogsProto_CastConnectionInfo::mutable_sender_info() {
  set_has_sender_info();
  if (sender_info_ == NULL) {
    sender_info_ = new ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.sender_info)
  return sender_info_;
}
inline ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* CastLogsProto_CastConnectionInfo::release_sender_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.sender_info)
  clear_has_sender_info();
  ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* temp = sender_info_;
  sender_info_ = NULL;
  return temp;
}
inline void CastLogsProto_CastConnectionInfo::set_allocated_sender_info(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* sender_info) {
  delete sender_info_;
  sender_info_ = sender_info;
  if (sender_info) {
    set_has_sender_info();
  } else {
    clear_has_sender_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.sender_info)
}

// -------------------------------------------------------------------

// CastLogsProto_CastEventProto

// optional fixed64 name_hash = 1;
inline bool CastLogsProto_CastEventProto::has_name_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_name_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CastLogsProto_CastEventProto::clear_has_name_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CastLogsProto_CastEventProto::clear_name_hash() {
  name_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_name_hash();
}
inline ::google::protobuf::uint64 CastLogsProto_CastEventProto::name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.name_hash)
  return name_hash_;
}
inline void CastLogsProto_CastEventProto::set_name_hash(::google::protobuf::uint64 value) {
  set_has_name_hash();
  name_hash_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.name_hash)
}

// optional int64 time_msec = 2;
inline bool CastLogsProto_CastEventProto::has_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CastLogsProto_CastEventProto::clear_has_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CastLogsProto_CastEventProto::clear_time_msec() {
  time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_time_msec();
}
inline ::google::protobuf::int64 CastLogsProto_CastEventProto::time_msec() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.time_msec)
  return time_msec_;
}
inline void CastLogsProto_CastEventProto::set_time_msec(::google::protobuf::int64 value) {
  set_has_time_msec();
  time_msec_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.time_msec)
}

// optional fixed32 app_id = 3;
inline bool CastLogsProto_CastEventProto::has_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_app_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CastLogsProto_CastEventProto::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CastLogsProto_CastEventProto::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CastLogsProto_CastEventProto::app_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.app_id)
  return app_id_;
}
inline void CastLogsProto_CastEventProto::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.app_id)
}

// optional fixed64 application_session_id = 4;
inline bool CastLogsProto_CastEventProto::has_application_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_application_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CastLogsProto_CastEventProto::clear_has_application_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CastLogsProto_CastEventProto::clear_application_session_id() {
  application_session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_application_session_id();
}
inline ::google::protobuf::uint64 CastLogsProto_CastEventProto::application_session_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.application_session_id)
  return application_session_id_;
}
inline void CastLogsProto_CastEventProto::set_application_session_id(::google::protobuf::uint64 value) {
  set_has_application_session_id();
  application_session_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.application_session_id)
}

// optional fixed64 cast_receiver_version = 5;
inline bool CastLogsProto_CastEventProto::has_cast_receiver_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_cast_receiver_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CastLogsProto_CastEventProto::clear_has_cast_receiver_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CastLogsProto_CastEventProto::clear_cast_receiver_version() {
  cast_receiver_version_ = GOOGLE_ULONGLONG(0);
  clear_has_cast_receiver_version();
}
inline ::google::protobuf::uint64 CastLogsProto_CastEventProto::cast_receiver_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.cast_receiver_version)
  return cast_receiver_version_;
}
inline void CastLogsProto_CastEventProto::set_cast_receiver_version(::google::protobuf::uint64 value) {
  set_has_cast_receiver_version();
  cast_receiver_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.cast_receiver_version)
}

// optional fixed64 cast_mpl_version = 9;
inline bool CastLogsProto_CastEventProto::has_cast_mpl_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_cast_mpl_version() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CastLogsProto_CastEventProto::clear_has_cast_mpl_version() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CastLogsProto_CastEventProto::clear_cast_mpl_version() {
  cast_mpl_version_ = GOOGLE_ULONGLONG(0);
  clear_has_cast_mpl_version();
}
inline ::google::protobuf::uint64 CastLogsProto_CastEventProto::cast_mpl_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.cast_mpl_version)
  return cast_mpl_version_;
}
inline void CastLogsProto_CastEventProto::set_cast_mpl_version(::google::protobuf::uint64 value) {
  set_has_cast_mpl_version();
  cast_mpl_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.cast_mpl_version)
}

// optional fixed32 transport_connection_id = 6;
inline bool CastLogsProto_CastEventProto::has_transport_connection_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_transport_connection_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CastLogsProto_CastEventProto::clear_has_transport_connection_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CastLogsProto_CastEventProto::clear_transport_connection_id() {
  transport_connection_id_ = 0u;
  clear_has_transport_connection_id();
}
inline ::google::protobuf::uint32 CastLogsProto_CastEventProto::transport_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.transport_connection_id)
  return transport_connection_id_;
}
inline void CastLogsProto_CastEventProto::set_transport_connection_id(::google::protobuf::uint32 value) {
  set_has_transport_connection_id();
  transport_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.transport_connection_id)
}

// optional fixed32 virtual_connection_id = 7;
inline bool CastLogsProto_CastEventProto::has_virtual_connection_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_virtual_connection_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CastLogsProto_CastEventProto::clear_has_virtual_connection_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CastLogsProto_CastEventProto::clear_virtual_connection_id() {
  virtual_connection_id_ = 0u;
  clear_has_virtual_connection_id();
}
inline ::google::protobuf::uint32 CastLogsProto_CastEventProto::virtual_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.virtual_connection_id)
  return virtual_connection_id_;
}
inline void CastLogsProto_CastEventProto::set_virtual_connection_id(::google::protobuf::uint32 value) {
  set_has_virtual_connection_id();
  virtual_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.virtual_connection_id)
}

// optional int64 value = 8;
inline bool CastLogsProto_CastEventProto::has_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CastLogsProto_CastEventProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CastLogsProto_CastEventProto::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 CastLogsProto_CastEventProto::value() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.value)
  return value_;
}
inline void CastLogsProto_CastEventProto::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.value)
}

// optional fixed64 group_uuid = 10;
inline bool CastLogsProto_CastEventProto::has_group_uuid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_group_uuid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CastLogsProto_CastEventProto::clear_has_group_uuid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CastLogsProto_CastEventProto::clear_group_uuid() {
  group_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_group_uuid();
}
inline ::google::protobuf::uint64 CastLogsProto_CastEventProto::group_uuid() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.group_uuid)
  return group_uuid_;
}
inline void CastLogsProto_CastEventProto::set_group_uuid(::google::protobuf::uint64 value) {
  set_has_group_uuid();
  group_uuid_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.group_uuid)
}

// optional string conversation_key = 11;
inline bool CastLogsProto_CastEventProto::has_conversation_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_conversation_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CastLogsProto_CastEventProto::clear_has_conversation_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CastLogsProto_CastEventProto::clear_conversation_key() {
  conversation_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conversation_key();
}
inline const ::std::string& CastLogsProto_CastEventProto::conversation_key() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.conversation_key)
  return conversation_key_.GetNoArena();
}
inline void CastLogsProto_CastEventProto::set_conversation_key(const ::std::string& value) {
  set_has_conversation_key();
  conversation_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.conversation_key)
}
#if LANG_CXX11
inline void CastLogsProto_CastEventProto::set_conversation_key(::std::string&& value) {
  set_has_conversation_key();
  conversation_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastEventProto.conversation_key)
}
#endif
inline void CastLogsProto_CastEventProto::set_conversation_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_conversation_key();
  conversation_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.conversation_key)
}
inline void CastLogsProto_CastEventProto::set_conversation_key(const char* value, size_t size) {
  set_has_conversation_key();
  conversation_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.conversation_key)
}
inline ::std::string* CastLogsProto_CastEventProto::mutable_conversation_key() {
  set_has_conversation_key();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.conversation_key)
  return conversation_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastEventProto::release_conversation_key() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastEventProto.conversation_key)
  clear_has_conversation_key();
  return conversation_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastEventProto::set_allocated_conversation_key(::std::string* conversation_key) {
  if (conversation_key != NULL) {
    set_has_conversation_key();
  } else {
    clear_has_conversation_key();
  }
  conversation_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conversation_key);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastEventProto.conversation_key)
}

// optional fixed32 request_id = 12;
inline bool CastLogsProto_CastEventProto::has_request_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CastLogsProto_CastEventProto::set_has_request_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CastLogsProto_CastEventProto::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CastLogsProto_CastEventProto::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 CastLogsProto_CastEventProto::request_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.request_id)
  return request_id_;
}
inline void CastLogsProto_CastEventProto::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.request_id)
}

// repeated float feature_vector = 15;
inline int CastLogsProto_CastEventProto::feature_vector_size() const {
  return feature_vector_.size();
}
inline void CastLogsProto_CastEventProto::clear_feature_vector() {
  feature_vector_.Clear();
}
inline float CastLogsProto_CastEventProto::feature_vector(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.feature_vector)
  return feature_vector_.Get(index);
}
inline void CastLogsProto_CastEventProto::set_feature_vector(int index, float value) {
  feature_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.feature_vector)
}
inline void CastLogsProto_CastEventProto::add_feature_vector(float value) {
  feature_vector_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.CastEventProto.feature_vector)
}
inline const ::google::protobuf::RepeatedField< float >&
CastLogsProto_CastEventProto::feature_vector() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.CastEventProto.feature_vector)
  return feature_vector_;
}
inline ::google::protobuf::RepeatedField< float >*
CastLogsProto_CastEventProto::mutable_feature_vector() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.CastEventProto.feature_vector)
  return &feature_vector_;
}

// -------------------------------------------------------------------

// CastLogsProto_CastDeviceMutableInfo

// optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
inline bool CastLogsProto_CastDeviceMutableInfo::has_last_reboot_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastLogsProto_CastDeviceMutableInfo::set_has_last_reboot_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CastLogsProto_CastDeviceMutableInfo::clear_has_last_reboot_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CastLogsProto_CastDeviceMutableInfo::clear_last_reboot_type() {
  last_reboot_type_ = 0;
  clear_has_last_reboot_type();
}
inline ::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::last_reboot_type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.last_reboot_type)
  return static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType >(last_reboot_type_);
}
inline void CastLogsProto_CastDeviceMutableInfo::set_last_reboot_type(::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType value) {
  assert(::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(value));
  set_has_last_reboot_type();
  last_reboot_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.last_reboot_type)
}

// optional fixed64 system_build_number = 2;
inline bool CastLogsProto_CastDeviceMutableInfo::has_system_build_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastLogsProto_CastDeviceMutableInfo::set_has_system_build_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CastLogsProto_CastDeviceMutableInfo::clear_has_system_build_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CastLogsProto_CastDeviceMutableInfo::clear_system_build_number() {
  system_build_number_ = GOOGLE_ULONGLONG(0);
  clear_has_system_build_number();
}
inline ::google::protobuf::uint64 CastLogsProto_CastDeviceMutableInfo::system_build_number() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.system_build_number)
  return system_build_number_;
}
inline void CastLogsProto_CastDeviceMutableInfo::set_system_build_number(::google::protobuf::uint64 value) {
  set_has_system_build_number();
  system_build_number_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.system_build_number)
}

// optional string backdrop_app_device_id = 3;
inline bool CastLogsProto_CastDeviceMutableInfo::has_backdrop_app_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastLogsProto_CastDeviceMutableInfo::set_has_backdrop_app_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CastLogsProto_CastDeviceMutableInfo::clear_has_backdrop_app_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CastLogsProto_CastDeviceMutableInfo::clear_backdrop_app_device_id() {
  backdrop_app_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_backdrop_app_device_id();
}
inline const ::std::string& CastLogsProto_CastDeviceMutableInfo::backdrop_app_device_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
  return backdrop_app_device_id_.GetNoArena();
}
inline void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(const ::std::string& value) {
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
#if LANG_CXX11
inline void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(::std::string&& value) {
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
#endif
inline void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
inline void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(const char* value, size_t size) {
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
inline ::std::string* CastLogsProto_CastDeviceMutableInfo::mutable_backdrop_app_device_id() {
  set_has_backdrop_app_device_id();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
  return backdrop_app_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastLogsProto_CastDeviceMutableInfo::release_backdrop_app_device_id() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
  clear_has_backdrop_app_device_id();
  return backdrop_app_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastLogsProto_CastDeviceMutableInfo::set_allocated_backdrop_app_device_id(::std::string* backdrop_app_device_id) {
  if (backdrop_app_device_id != NULL) {
    set_has_backdrop_app_device_id();
  } else {
    clear_has_backdrop_app_device_id();
  }
  backdrop_app_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backdrop_app_device_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}

// optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 4;
inline bool CastLogsProto_CastDeviceMutableInfo::has_netif_ip_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CastLogsProto_CastDeviceMutableInfo::set_has_netif_ip_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CastLogsProto_CastDeviceMutableInfo::clear_has_netif_ip_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CastLogsProto_CastDeviceMutableInfo::clear_netif_ip_version() {
  netif_ip_version_ = 0;
  clear_has_netif_ip_version();
}
inline ::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::netif_ip_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.netif_ip_version)
  return static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion >(netif_ip_version_);
}
inline void CastLogsProto_CastDeviceMutableInfo::set_netif_ip_version(::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion value) {
  assert(::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(value));
  set_has_netif_ip_version();
  netif_ip_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.netif_ip_version)
}

// optional bool ip_dual_stack_supported = 5;
inline bool CastLogsProto_CastDeviceMutableInfo::has_ip_dual_stack_supported() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CastLogsProto_CastDeviceMutableInfo::set_has_ip_dual_stack_supported() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CastLogsProto_CastDeviceMutableInfo::clear_has_ip_dual_stack_supported() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CastLogsProto_CastDeviceMutableInfo::clear_ip_dual_stack_supported() {
  ip_dual_stack_supported_ = false;
  clear_has_ip_dual_stack_supported();
}
inline bool CastLogsProto_CastDeviceMutableInfo::ip_dual_stack_supported() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.ip_dual_stack_supported)
  return ip_dual_stack_supported_;
}
inline void CastLogsProto_CastDeviceMutableInfo::set_ip_dual_stack_supported(bool value) {
  set_has_ip_dual_stack_supported();
  ip_dual_stack_supported_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.ip_dual_stack_supported)
}

// -------------------------------------------------------------------

// CastLogsProto

// optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
inline bool CastLogsProto::has_cast_device_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastLogsProto::set_has_cast_device_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CastLogsProto::clear_has_cast_device_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CastLogsProto::clear_cast_device_info() {
  if (cast_device_info_ != NULL) cast_device_info_->::metrics::CastLogsProto_CastDeviceInfo::Clear();
  clear_has_cast_device_info();
}
inline const ::metrics::CastLogsProto_CastDeviceInfo& CastLogsProto::cast_device_info() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_device_info)
  return cast_device_info_ != NULL ? *cast_device_info_
                         : *::metrics::CastLogsProto_CastDeviceInfo::internal_default_instance();
}
inline ::metrics::CastLogsProto_CastDeviceInfo* CastLogsProto::mutable_cast_device_info() {
  set_has_cast_device_info();
  if (cast_device_info_ == NULL) {
    cast_device_info_ = new ::metrics::CastLogsProto_CastDeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_device_info)
  return cast_device_info_;
}
inline ::metrics::CastLogsProto_CastDeviceInfo* CastLogsProto::release_cast_device_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.cast_device_info)
  clear_has_cast_device_info();
  ::metrics::CastLogsProto_CastDeviceInfo* temp = cast_device_info_;
  cast_device_info_ = NULL;
  return temp;
}
inline void CastLogsProto::set_allocated_cast_device_info(::metrics::CastLogsProto_CastDeviceInfo* cast_device_info) {
  delete cast_device_info_;
  cast_device_info_ = cast_device_info;
  if (cast_device_info) {
    set_has_cast_device_info();
  } else {
    clear_has_cast_device_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.cast_device_info)
}

// repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
inline int CastLogsProto::cast_connection_info_size() const {
  return cast_connection_info_.size();
}
inline void CastLogsProto::clear_cast_connection_info() {
  cast_connection_info_.Clear();
}
inline const ::metrics::CastLogsProto_CastConnectionInfo& CastLogsProto::cast_connection_info(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_.Get(index);
}
inline ::metrics::CastLogsProto_CastConnectionInfo* CastLogsProto::mutable_cast_connection_info(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_.Mutable(index);
}
inline ::metrics::CastLogsProto_CastConnectionInfo* CastLogsProto::add_cast_connection_info() {
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastConnectionInfo >*
CastLogsProto::mutable_cast_connection_info() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.cast_connection_info)
  return &cast_connection_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastConnectionInfo >&
CastLogsProto::cast_connection_info() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_;
}

// repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
inline int CastLogsProto::cast_event_size() const {
  return cast_event_.size();
}
inline void CastLogsProto::clear_cast_event() {
  cast_event_.Clear();
}
inline const ::metrics::CastLogsProto_CastEventProto& CastLogsProto::cast_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_event)
  return cast_event_.Get(index);
}
inline ::metrics::CastLogsProto_CastEventProto* CastLogsProto::mutable_cast_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_event)
  return cast_event_.Mutable(index);
}
inline ::metrics::CastLogsProto_CastEventProto* CastLogsProto::add_cast_event() {
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.cast_event)
  return cast_event_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto >*
CastLogsProto::mutable_cast_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.cast_event)
  return &cast_event_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto >&
CastLogsProto::cast_event() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.cast_event)
  return cast_event_;
}

// optional fixed32 virtual_release_track = 4;
inline bool CastLogsProto::has_virtual_release_track() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CastLogsProto::set_has_virtual_release_track() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CastLogsProto::clear_has_virtual_release_track() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CastLogsProto::clear_virtual_release_track() {
  virtual_release_track_ = 0u;
  clear_has_virtual_release_track();
}
inline ::google::protobuf::uint32 CastLogsProto::virtual_release_track() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.virtual_release_track)
  return virtual_release_track_;
}
inline void CastLogsProto::set_virtual_release_track(::google::protobuf::uint32 value) {
  set_has_virtual_release_track();
  virtual_release_track_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.virtual_release_track)
}

// optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
inline bool CastLogsProto::has_cast_device_mutable_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastLogsProto::set_has_cast_device_mutable_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CastLogsProto::clear_has_cast_device_mutable_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CastLogsProto::clear_cast_device_mutable_info() {
  if (cast_device_mutable_info_ != NULL) cast_device_mutable_info_->::metrics::CastLogsProto_CastDeviceMutableInfo::Clear();
  clear_has_cast_device_mutable_info();
}
inline const ::metrics::CastLogsProto_CastDeviceMutableInfo& CastLogsProto::cast_device_mutable_info() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_device_mutable_info)
  return cast_device_mutable_info_ != NULL ? *cast_device_mutable_info_
                         : *::metrics::CastLogsProto_CastDeviceMutableInfo::internal_default_instance();
}
inline ::metrics::CastLogsProto_CastDeviceMutableInfo* CastLogsProto::mutable_cast_device_mutable_info() {
  set_has_cast_device_mutable_info();
  if (cast_device_mutable_info_ == NULL) {
    cast_device_mutable_info_ = new ::metrics::CastLogsProto_CastDeviceMutableInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_device_mutable_info)
  return cast_device_mutable_info_;
}
inline ::metrics::CastLogsProto_CastDeviceMutableInfo* CastLogsProto::release_cast_device_mutable_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.cast_device_mutable_info)
  clear_has_cast_device_mutable_info();
  ::metrics::CastLogsProto_CastDeviceMutableInfo* temp = cast_device_mutable_info_;
  cast_device_mutable_info_ = NULL;
  return temp;
}
inline void CastLogsProto::set_allocated_cast_device_mutable_info(::metrics::CastLogsProto_CastDeviceMutableInfo* cast_device_mutable_info) {
  delete cast_device_mutable_info_;
  cast_device_mutable_info_ = cast_device_mutable_info;
  if (cast_device_mutable_info) {
    set_has_cast_device_mutable_info();
  } else {
    clear_has_cast_device_mutable_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.cast_device_mutable_info)
}

// optional fixed64 receiver_metrics_id = 6;
inline bool CastLogsProto::has_receiver_metrics_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastLogsProto::set_has_receiver_metrics_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CastLogsProto::clear_has_receiver_metrics_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CastLogsProto::clear_receiver_metrics_id() {
  receiver_metrics_id_ = GOOGLE_ULONGLONG(0);
  clear_has_receiver_metrics_id();
}
inline ::google::protobuf::uint64 CastLogsProto::receiver_metrics_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.receiver_metrics_id)
  return receiver_metrics_id_;
}
inline void CastLogsProto::set_receiver_metrics_id(::google::protobuf::uint64 value) {
  set_has_receiver_metrics_id();
  receiver_metrics_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.receiver_metrics_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace metrics

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metrics::CastLogsProto_CastDeviceInfo_CastProductType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cast_5flogs_2eproto__INCLUDED
