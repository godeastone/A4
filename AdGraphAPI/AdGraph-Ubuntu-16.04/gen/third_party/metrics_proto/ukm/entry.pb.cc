// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/entry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ukm/entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace ukm {
class Entry_MetricDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Entry_Metric> {
} _Entry_Metric_default_instance_;
class EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Entry> {
} _Entry_default_instance_;

namespace protobuf_ukm_2fentry_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Entry_Metric_default_instance_.Shutdown();
  _Entry_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Entry_Metric_default_instance_.DefaultConstruct();
  _Entry_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_ukm_2fentry_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry_Metric::kMetricHashFieldNumber;
const int Entry_Metric::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry_Metric::Entry_Metric()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ukm_2fentry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Entry.Metric)
}
Entry_Metric::Entry_Metric(const Entry_Metric& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&metric_hash_, &from.metric_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&metric_hash_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:ukm.Entry.Metric)
}

void Entry_Metric::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&metric_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&metric_hash_)) + sizeof(value_));
}

Entry_Metric::~Entry_Metric() {
  // @@protoc_insertion_point(destructor:ukm.Entry.Metric)
  SharedDtor();
}

void Entry_Metric::SharedDtor() {
}

void Entry_Metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Entry_Metric& Entry_Metric::default_instance() {
  protobuf_ukm_2fentry_2eproto::InitDefaults();
  return *internal_default_instance();
}

Entry_Metric* Entry_Metric::New(::google::protobuf::Arena* arena) const {
  Entry_Metric* n = new Entry_Metric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entry_Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Entry.Metric)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&metric_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&metric_hash_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Entry_Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ukm.Entry.Metric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 metric_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_metric_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &metric_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Entry.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Entry.Metric)
  return false;
#undef DO_
}

void Entry_Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Entry.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 metric_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->metric_hash(), output);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Entry.Metric)
}

size_t Entry_Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Entry.Metric)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 metric_hash = 1;
    if (has_metric_hash()) {
      total_size += 1 + 8;
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry_Metric::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Entry_Metric*>(&from));
}

void Entry_Metric::MergeFrom(const Entry_Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Entry.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      metric_hash_ = from.metric_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Entry_Metric::CopyFrom(const Entry_Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Entry.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry_Metric::IsInitialized() const {
  return true;
}

void Entry_Metric::Swap(Entry_Metric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry_Metric::InternalSwap(Entry_Metric* other) {
  std::swap(metric_hash_, other->metric_hash_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Entry_Metric::GetTypeName() const {
  return "ukm.Entry.Metric";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entry_Metric

// optional fixed64 metric_hash = 1;
bool Entry_Metric::has_metric_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entry_Metric::set_has_metric_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void Entry_Metric::clear_has_metric_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entry_Metric::clear_metric_hash() {
  metric_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_metric_hash();
}
::google::protobuf::uint64 Entry_Metric::metric_hash() const {
  // @@protoc_insertion_point(field_get:ukm.Entry.Metric.metric_hash)
  return metric_hash_;
}
void Entry_Metric::set_metric_hash(::google::protobuf::uint64 value) {
  set_has_metric_hash();
  metric_hash_ = value;
  // @@protoc_insertion_point(field_set:ukm.Entry.Metric.metric_hash)
}

// optional int64 value = 2;
bool Entry_Metric::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Entry_Metric::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Entry_Metric::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Entry_Metric::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
::google::protobuf::int64 Entry_Metric::value() const {
  // @@protoc_insertion_point(field_get:ukm.Entry.Metric.value)
  return value_;
}
void Entry_Metric::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ukm.Entry.Metric.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kIdFieldNumber;
const int Entry::kParentIdFieldNumber;
const int Entry::kSourceIdFieldNumber;
const int Entry::kEventHashFieldNumber;
const int Entry::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ukm_2fentry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Entry)
}
Entry::Entry(const Entry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_hash_) -
    reinterpret_cast<char*>(&id_)) + sizeof(event_hash_));
  // @@protoc_insertion_point(copy_constructor:ukm.Entry)
}

void Entry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_hash_) -
      reinterpret_cast<char*>(&id_)) + sizeof(event_hash_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:ukm.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Entry& Entry::default_instance() {
  protobuf_ukm_2fentry_2eproto::InitDefaults();
  return *internal_default_instance();
}

Entry* Entry::New(::google::protobuf::Arena* arena) const {
  Entry* n = new Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Entry)
  metrics_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_hash_) -
        reinterpret_cast<char*>(&id_)) + sizeof(event_hash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ukm.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 parent_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_parent_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 source_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 event_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_event_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &event_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Entry.Metric metrics = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 parent_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent_id(), output);
  }

  // optional int64 source_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->source_id(), output);
  }

  // optional fixed64 event_hash = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->event_hash(), output);
  }

  // repeated .ukm.Entry.Metric metrics = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->metrics(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Entry)
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Entry)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .ukm.Entry.Metric metrics = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metrics(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 parent_id = 2;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }

    // optional int64 source_id = 3;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_id());
    }

    // optional fixed64 event_hash = 4;
    if (has_event_hash()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Entry*>(&from));
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      parent_id_ = from.parent_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_hash_ = from.event_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  metrics_.InternalSwap(&other->metrics_);
  std::swap(id_, other->id_);
  std::swap(parent_id_, other->parent_id_);
  std::swap(source_id_, other->source_id_);
  std::swap(event_hash_, other->event_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Entry::GetTypeName() const {
  return "ukm.Entry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entry

// optional int32 id = 1;
bool Entry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Entry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entry::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Entry::id() const {
  // @@protoc_insertion_point(field_get:ukm.Entry.id)
  return id_;
}
void Entry::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Entry.id)
}

// optional int32 parent_id = 2;
bool Entry::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Entry::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Entry::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Entry::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
::google::protobuf::int32 Entry::parent_id() const {
  // @@protoc_insertion_point(field_get:ukm.Entry.parent_id)
  return parent_id_;
}
void Entry::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Entry.parent_id)
}

// optional int64 source_id = 3;
bool Entry::has_source_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Entry::set_has_source_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Entry::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Entry::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 Entry::source_id() const {
  // @@protoc_insertion_point(field_get:ukm.Entry.source_id)
  return source_id_;
}
void Entry::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Entry.source_id)
}

// optional fixed64 event_hash = 4;
bool Entry::has_event_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Entry::set_has_event_hash() {
  _has_bits_[0] |= 0x00000008u;
}
void Entry::clear_has_event_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
void Entry::clear_event_hash() {
  event_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_event_hash();
}
::google::protobuf::uint64 Entry::event_hash() const {
  // @@protoc_insertion_point(field_get:ukm.Entry.event_hash)
  return event_hash_;
}
void Entry::set_event_hash(::google::protobuf::uint64 value) {
  set_has_event_hash();
  event_hash_ = value;
  // @@protoc_insertion_point(field_set:ukm.Entry.event_hash)
}

// repeated .ukm.Entry.Metric metrics = 5;
int Entry::metrics_size() const {
  return metrics_.size();
}
void Entry::clear_metrics() {
  metrics_.Clear();
}
const ::ukm::Entry_Metric& Entry::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ukm.Entry.metrics)
  return metrics_.Get(index);
}
::ukm::Entry_Metric* Entry::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ukm.Entry.metrics)
  return metrics_.Mutable(index);
}
::ukm::Entry_Metric* Entry::add_metrics() {
  // @@protoc_insertion_point(field_add:ukm.Entry.metrics)
  return metrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::ukm::Entry_Metric >*
Entry::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ukm.Entry.metrics)
  return &metrics_;
}
const ::google::protobuf::RepeatedPtrField< ::ukm::Entry_Metric >&
Entry::metrics() const {
  // @@protoc_insertion_point(field_list:ukm.Entry.metrics)
  return metrics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukm

// @@protoc_insertion_point(global_scope)
