// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ukm/report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace ukm {
class Report_SourceCountsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Report_SourceCounts> {
} _Report_SourceCounts_default_instance_;
class ReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Report> {
} _Report_default_instance_;

namespace protobuf_ukm_2freport_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Report_SourceCounts_default_instance_.Shutdown();
  _Report_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ukm::protobuf_ukm_2faggregate_2eproto::InitDefaults();
  ::ukm::protobuf_ukm_2fentry_2eproto::InitDefaults();
  ::ukm::protobuf_ukm_2fsource_2eproto::InitDefaults();
  ::metrics::protobuf_system_5fprofile_2eproto::InitDefaults();
  _Report_SourceCounts_default_instance_.DefaultConstruct();
  _Report_default_instance_.DefaultConstruct();
  _Report_default_instance_.get_mutable()->system_profile_ = const_cast< ::metrics::SystemProfileProto*>(
      ::metrics::SystemProfileProto::internal_default_instance());
  _Report_default_instance_.get_mutable()->source_counts_ = const_cast< ::ukm::Report_SourceCounts*>(
      ::ukm::Report_SourceCounts::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::ukm::protobuf_ukm_2faggregate_2eproto::AddDescriptors();
  ::ukm::protobuf_ukm_2fentry_2eproto::AddDescriptors();
  ::ukm::protobuf_ukm_2fsource_2eproto::AddDescriptors();
  ::metrics::protobuf_system_5fprofile_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_ukm_2freport_2eproto

bool Report_LogRotationReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Report_LogRotationReason Report::UNKNOWN;
const Report_LogRotationReason Report::SCHEDULED_ROTATION;
const Report_LogRotationReason Report::BACKGROUNDED;
const Report_LogRotationReason Report::SHUTDOWN;
const Report_LogRotationReason Report::LogRotationReason_MIN;
const Report_LogRotationReason Report::LogRotationReason_MAX;
const int Report::LogRotationReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report_SourceCounts::kObservedFieldNumber;
const int Report_SourceCounts::kNavigationSourcesFieldNumber;
const int Report_SourceCounts::kUnmatchedSourcesFieldNumber;
const int Report_SourceCounts::kCarryoverSourcesFieldNumber;
const int Report_SourceCounts::kDeferredSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report_SourceCounts::Report_SourceCounts()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ukm_2freport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Report.SourceCounts)
}
Report_SourceCounts::Report_SourceCounts(const Report_SourceCounts& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&observed_, &from.observed_,
    static_cast<size_t>(reinterpret_cast<char*>(&deferred_sources_) -
    reinterpret_cast<char*>(&observed_)) + sizeof(deferred_sources_));
  // @@protoc_insertion_point(copy_constructor:ukm.Report.SourceCounts)
}

void Report_SourceCounts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&observed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deferred_sources_) -
      reinterpret_cast<char*>(&observed_)) + sizeof(deferred_sources_));
}

Report_SourceCounts::~Report_SourceCounts() {
  // @@protoc_insertion_point(destructor:ukm.Report.SourceCounts)
  SharedDtor();
}

void Report_SourceCounts::SharedDtor() {
}

void Report_SourceCounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Report_SourceCounts& Report_SourceCounts::default_instance() {
  protobuf_ukm_2freport_2eproto::InitDefaults();
  return *internal_default_instance();
}

Report_SourceCounts* Report_SourceCounts::New(::google::protobuf::Arena* arena) const {
  Report_SourceCounts* n = new Report_SourceCounts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Report_SourceCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Report.SourceCounts)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&observed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deferred_sources_) -
        reinterpret_cast<char*>(&observed_)) + sizeof(deferred_sources_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Report_SourceCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ukm.Report.SourceCounts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 observed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_observed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &observed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 navigation_sources = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_navigation_sources();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &navigation_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unmatched_sources = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_unmatched_sources();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unmatched_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 carryover_sources = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_carryover_sources();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carryover_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 deferred_sources = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_deferred_sources();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deferred_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Report.SourceCounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Report.SourceCounts)
  return false;
#undef DO_
}

void Report_SourceCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Report.SourceCounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 observed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->observed(), output);
  }

  // optional int32 navigation_sources = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->navigation_sources(), output);
  }

  // optional int32 unmatched_sources = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unmatched_sources(), output);
  }

  // optional int32 carryover_sources = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->carryover_sources(), output);
  }

  // optional int32 deferred_sources = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deferred_sources(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Report.SourceCounts)
}

size_t Report_SourceCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Report.SourceCounts)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 observed = 1;
    if (has_observed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->observed());
    }

    // optional int32 navigation_sources = 2;
    if (has_navigation_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->navigation_sources());
    }

    // optional int32 unmatched_sources = 3;
    if (has_unmatched_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unmatched_sources());
    }

    // optional int32 carryover_sources = 4;
    if (has_carryover_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carryover_sources());
    }

    // optional int32 deferred_sources = 5;
    if (has_deferred_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deferred_sources());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report_SourceCounts::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Report_SourceCounts*>(&from));
}

void Report_SourceCounts::MergeFrom(const Report_SourceCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Report.SourceCounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      observed_ = from.observed_;
    }
    if (cached_has_bits & 0x00000002u) {
      navigation_sources_ = from.navigation_sources_;
    }
    if (cached_has_bits & 0x00000004u) {
      unmatched_sources_ = from.unmatched_sources_;
    }
    if (cached_has_bits & 0x00000008u) {
      carryover_sources_ = from.carryover_sources_;
    }
    if (cached_has_bits & 0x00000010u) {
      deferred_sources_ = from.deferred_sources_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Report_SourceCounts::CopyFrom(const Report_SourceCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Report.SourceCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report_SourceCounts::IsInitialized() const {
  return true;
}

void Report_SourceCounts::Swap(Report_SourceCounts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report_SourceCounts::InternalSwap(Report_SourceCounts* other) {
  std::swap(observed_, other->observed_);
  std::swap(navigation_sources_, other->navigation_sources_);
  std::swap(unmatched_sources_, other->unmatched_sources_);
  std::swap(carryover_sources_, other->carryover_sources_);
  std::swap(deferred_sources_, other->deferred_sources_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Report_SourceCounts::GetTypeName() const {
  return "ukm.Report.SourceCounts";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Report_SourceCounts

// optional int32 observed = 1;
bool Report_SourceCounts::has_observed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Report_SourceCounts::set_has_observed() {
  _has_bits_[0] |= 0x00000001u;
}
void Report_SourceCounts::clear_has_observed() {
  _has_bits_[0] &= ~0x00000001u;
}
void Report_SourceCounts::clear_observed() {
  observed_ = 0;
  clear_has_observed();
}
::google::protobuf::int32 Report_SourceCounts::observed() const {
  // @@protoc_insertion_point(field_get:ukm.Report.SourceCounts.observed)
  return observed_;
}
void Report_SourceCounts::set_observed(::google::protobuf::int32 value) {
  set_has_observed();
  observed_ = value;
  // @@protoc_insertion_point(field_set:ukm.Report.SourceCounts.observed)
}

// optional int32 navigation_sources = 2;
bool Report_SourceCounts::has_navigation_sources() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Report_SourceCounts::set_has_navigation_sources() {
  _has_bits_[0] |= 0x00000002u;
}
void Report_SourceCounts::clear_has_navigation_sources() {
  _has_bits_[0] &= ~0x00000002u;
}
void Report_SourceCounts::clear_navigation_sources() {
  navigation_sources_ = 0;
  clear_has_navigation_sources();
}
::google::protobuf::int32 Report_SourceCounts::navigation_sources() const {
  // @@protoc_insertion_point(field_get:ukm.Report.SourceCounts.navigation_sources)
  return navigation_sources_;
}
void Report_SourceCounts::set_navigation_sources(::google::protobuf::int32 value) {
  set_has_navigation_sources();
  navigation_sources_ = value;
  // @@protoc_insertion_point(field_set:ukm.Report.SourceCounts.navigation_sources)
}

// optional int32 unmatched_sources = 3;
bool Report_SourceCounts::has_unmatched_sources() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Report_SourceCounts::set_has_unmatched_sources() {
  _has_bits_[0] |= 0x00000004u;
}
void Report_SourceCounts::clear_has_unmatched_sources() {
  _has_bits_[0] &= ~0x00000004u;
}
void Report_SourceCounts::clear_unmatched_sources() {
  unmatched_sources_ = 0;
  clear_has_unmatched_sources();
}
::google::protobuf::int32 Report_SourceCounts::unmatched_sources() const {
  // @@protoc_insertion_point(field_get:ukm.Report.SourceCounts.unmatched_sources)
  return unmatched_sources_;
}
void Report_SourceCounts::set_unmatched_sources(::google::protobuf::int32 value) {
  set_has_unmatched_sources();
  unmatched_sources_ = value;
  // @@protoc_insertion_point(field_set:ukm.Report.SourceCounts.unmatched_sources)
}

// optional int32 carryover_sources = 4;
bool Report_SourceCounts::has_carryover_sources() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Report_SourceCounts::set_has_carryover_sources() {
  _has_bits_[0] |= 0x00000008u;
}
void Report_SourceCounts::clear_has_carryover_sources() {
  _has_bits_[0] &= ~0x00000008u;
}
void Report_SourceCounts::clear_carryover_sources() {
  carryover_sources_ = 0;
  clear_has_carryover_sources();
}
::google::protobuf::int32 Report_SourceCounts::carryover_sources() const {
  // @@protoc_insertion_point(field_get:ukm.Report.SourceCounts.carryover_sources)
  return carryover_sources_;
}
void Report_SourceCounts::set_carryover_sources(::google::protobuf::int32 value) {
  set_has_carryover_sources();
  carryover_sources_ = value;
  // @@protoc_insertion_point(field_set:ukm.Report.SourceCounts.carryover_sources)
}

// optional int32 deferred_sources = 5;
bool Report_SourceCounts::has_deferred_sources() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Report_SourceCounts::set_has_deferred_sources() {
  _has_bits_[0] |= 0x00000010u;
}
void Report_SourceCounts::clear_has_deferred_sources() {
  _has_bits_[0] &= ~0x00000010u;
}
void Report_SourceCounts::clear_deferred_sources() {
  deferred_sources_ = 0;
  clear_has_deferred_sources();
}
::google::protobuf::int32 Report_SourceCounts::deferred_sources() const {
  // @@protoc_insertion_point(field_get:ukm.Report.SourceCounts.deferred_sources)
  return deferred_sources_;
}
void Report_SourceCounts::set_deferred_sources(::google::protobuf::int32 value) {
  set_has_deferred_sources();
  deferred_sources_ = value;
  // @@protoc_insertion_point(field_set:ukm.Report.SourceCounts.deferred_sources)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report::kClientIdFieldNumber;
const int Report::kSessionIdFieldNumber;
const int Report::kReportIdFieldNumber;
const int Report::kIsContinuousFieldNumber;
const int Report::kLogRotationReasonFieldNumber;
const int Report::kSystemProfileFieldNumber;
const int Report::kSourcesFieldNumber;
const int Report::kSourceCountsFieldNumber;
const int Report::kEntriesFieldNumber;
const int Report::kAggregatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report::Report()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ukm_2freport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Report)
}
Report::Report(const Report& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sources_(from.sources_),
      entries_(from.entries_),
      aggregates_(from.aggregates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_system_profile()) {
    system_profile_ = new ::metrics::SystemProfileProto(*from.system_profile_);
  } else {
    system_profile_ = NULL;
  }
  if (from.has_source_counts()) {
    source_counts_ = new ::ukm::Report_SourceCounts(*from.source_counts_);
  } else {
    source_counts_ = NULL;
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&log_rotation_reason_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(log_rotation_reason_));
  // @@protoc_insertion_point(copy_constructor:ukm.Report)
}

void Report::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&system_profile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_rotation_reason_) -
      reinterpret_cast<char*>(&system_profile_)) + sizeof(log_rotation_reason_));
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:ukm.Report)
  SharedDtor();
}

void Report::SharedDtor() {
  if (this != internal_default_instance()) {
    delete system_profile_;
  }
  if (this != internal_default_instance()) {
    delete source_counts_;
  }
}

void Report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Report& Report::default_instance() {
  protobuf_ukm_2freport_2eproto::InitDefaults();
  return *internal_default_instance();
}

Report* Report::New(::google::protobuf::Arena* arena) const {
  Report* n = new Report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Report)
  sources_.Clear();
  entries_.Clear();
  aggregates_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_system_profile()) {
      GOOGLE_DCHECK(system_profile_ != NULL);
      system_profile_->::metrics::SystemProfileProto::Clear();
    }
    if (has_source_counts()) {
      GOOGLE_DCHECK(source_counts_ != NULL);
      source_counts_->::ukm::Report_SourceCounts::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&log_rotation_reason_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(log_rotation_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ukm.Report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_client_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto system_profile = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Source sources = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Entry entries = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 report_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_report_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Aggregate aggregates = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aggregates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_continuous = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_continuous();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_continuous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ukm::Report_LogRotationReason_IsValid(value)) {
            set_log_rotation_reason(static_cast< ::ukm::Report_LogRotationReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ukm.Report.SourceCounts source_counts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Report)
  return false;
#undef DO_
}

void Report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->client_id(), output);
  }

  // optional .metrics.SystemProfileProto system_profile = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->system_profile_, output);
  }

  // repeated .ukm.Source sources = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->sources(static_cast<int>(i)), output);
  }

  // repeated .ukm.Entry entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->entries(static_cast<int>(i)), output);
  }

  // optional int32 session_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->session_id(), output);
  }

  // optional int32 report_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->report_id(), output);
  }

  // repeated .ukm.Aggregate aggregates = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aggregates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->aggregates(static_cast<int>(i)), output);
  }

  // optional bool is_continuous = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_continuous(), output);
  }

  // optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->log_rotation_reason(), output);
  }

  // optional .ukm.Report.SourceCounts source_counts = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->source_counts_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Report)
}

size_t Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Report)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .ukm.Source sources = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sources(static_cast<int>(i)));
    }
  }

  // repeated .ukm.Entry entries = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(static_cast<int>(i)));
    }
  }

  // repeated .ukm.Aggregate aggregates = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->aggregates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aggregates(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .metrics.SystemProfileProto system_profile = 2;
    if (has_system_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->system_profile_);
    }

    // optional .ukm.Report.SourceCounts source_counts = 10;
    if (has_source_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_counts_);
    }

    // optional fixed64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 + 8;
    }

    // optional int32 session_id = 5;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 report_id = 6;
    if (has_report_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->report_id());
    }

    // optional bool is_continuous = 8;
    if (has_is_continuous()) {
      total_size += 1 + 1;
    }

    // optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
    if (has_log_rotation_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->log_rotation_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Report*>(&from));
}

void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  entries_.MergeFrom(from.entries_);
  aggregates_.MergeFrom(from.aggregates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_system_profile()->::metrics::SystemProfileProto::MergeFrom(from.system_profile());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_source_counts()->::ukm::Report_SourceCounts::MergeFrom(from.source_counts());
    }
    if (cached_has_bits & 0x00000004u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      report_id_ = from.report_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_continuous_ = from.is_continuous_;
    }
    if (cached_has_bits & 0x00000040u) {
      log_rotation_reason_ = from.log_rotation_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  return true;
}

void Report::Swap(Report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report::InternalSwap(Report* other) {
  sources_.InternalSwap(&other->sources_);
  entries_.InternalSwap(&other->entries_);
  aggregates_.InternalSwap(&other->aggregates_);
  std::swap(system_profile_, other->system_profile_);
  std::swap(source_counts_, other->source_counts_);
  std::swap(client_id_, other->client_id_);
  std::swap(session_id_, other->session_id_);
  std::swap(report_id_, other->report_id_);
  std::swap(is_continuous_, other->is_continuous_);
  std::swap(log_rotation_reason_, other->log_rotation_reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Report::GetTypeName() const {
  return "ukm.Report";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Report

// optional fixed64 client_id = 1;
bool Report::has_client_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Report::set_has_client_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Report::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Report::clear_client_id() {
  client_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_id();
}
::google::protobuf::uint64 Report::client_id() const {
  // @@protoc_insertion_point(field_get:ukm.Report.client_id)
  return client_id_;
}
void Report::set_client_id(::google::protobuf::uint64 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Report.client_id)
}

// optional int32 session_id = 5;
bool Report::has_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Report::set_has_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Report::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Report::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
::google::protobuf::int32 Report::session_id() const {
  // @@protoc_insertion_point(field_get:ukm.Report.session_id)
  return session_id_;
}
void Report::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Report.session_id)
}

// optional int32 report_id = 6;
bool Report::has_report_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Report::set_has_report_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Report::clear_has_report_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Report::clear_report_id() {
  report_id_ = 0;
  clear_has_report_id();
}
::google::protobuf::int32 Report::report_id() const {
  // @@protoc_insertion_point(field_get:ukm.Report.report_id)
  return report_id_;
}
void Report::set_report_id(::google::protobuf::int32 value) {
  set_has_report_id();
  report_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Report.report_id)
}

// optional bool is_continuous = 8;
bool Report::has_is_continuous() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Report::set_has_is_continuous() {
  _has_bits_[0] |= 0x00000020u;
}
void Report::clear_has_is_continuous() {
  _has_bits_[0] &= ~0x00000020u;
}
void Report::clear_is_continuous() {
  is_continuous_ = false;
  clear_has_is_continuous();
}
bool Report::is_continuous() const {
  // @@protoc_insertion_point(field_get:ukm.Report.is_continuous)
  return is_continuous_;
}
void Report::set_is_continuous(bool value) {
  set_has_is_continuous();
  is_continuous_ = value;
  // @@protoc_insertion_point(field_set:ukm.Report.is_continuous)
}

// optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
bool Report::has_log_rotation_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Report::set_has_log_rotation_reason() {
  _has_bits_[0] |= 0x00000040u;
}
void Report::clear_has_log_rotation_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
void Report::clear_log_rotation_reason() {
  log_rotation_reason_ = 0;
  clear_has_log_rotation_reason();
}
::ukm::Report_LogRotationReason Report::log_rotation_reason() const {
  // @@protoc_insertion_point(field_get:ukm.Report.log_rotation_reason)
  return static_cast< ::ukm::Report_LogRotationReason >(log_rotation_reason_);
}
void Report::set_log_rotation_reason(::ukm::Report_LogRotationReason value) {
  assert(::ukm::Report_LogRotationReason_IsValid(value));
  set_has_log_rotation_reason();
  log_rotation_reason_ = value;
  // @@protoc_insertion_point(field_set:ukm.Report.log_rotation_reason)
}

// optional .metrics.SystemProfileProto system_profile = 2;
bool Report::has_system_profile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Report::set_has_system_profile() {
  _has_bits_[0] |= 0x00000001u;
}
void Report::clear_has_system_profile() {
  _has_bits_[0] &= ~0x00000001u;
}
void Report::clear_system_profile() {
  if (system_profile_ != NULL) system_profile_->::metrics::SystemProfileProto::Clear();
  clear_has_system_profile();
}
const ::metrics::SystemProfileProto& Report::system_profile() const {
  // @@protoc_insertion_point(field_get:ukm.Report.system_profile)
  return system_profile_ != NULL ? *system_profile_
                         : *::metrics::SystemProfileProto::internal_default_instance();
}
::metrics::SystemProfileProto* Report::mutable_system_profile() {
  set_has_system_profile();
  if (system_profile_ == NULL) {
    system_profile_ = new ::metrics::SystemProfileProto;
  }
  // @@protoc_insertion_point(field_mutable:ukm.Report.system_profile)
  return system_profile_;
}
::metrics::SystemProfileProto* Report::release_system_profile() {
  // @@protoc_insertion_point(field_release:ukm.Report.system_profile)
  clear_has_system_profile();
  ::metrics::SystemProfileProto* temp = system_profile_;
  system_profile_ = NULL;
  return temp;
}
void Report::set_allocated_system_profile(::metrics::SystemProfileProto* system_profile) {
  delete system_profile_;
  system_profile_ = system_profile;
  if (system_profile) {
    set_has_system_profile();
  } else {
    clear_has_system_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:ukm.Report.system_profile)
}

// repeated .ukm.Source sources = 3;
int Report::sources_size() const {
  return sources_.size();
}
void Report::clear_sources() {
  sources_.Clear();
}
const ::ukm::Source& Report::sources(int index) const {
  // @@protoc_insertion_point(field_get:ukm.Report.sources)
  return sources_.Get(index);
}
::ukm::Source* Report::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:ukm.Report.sources)
  return sources_.Mutable(index);
}
::ukm::Source* Report::add_sources() {
  // @@protoc_insertion_point(field_add:ukm.Report.sources)
  return sources_.Add();
}
::google::protobuf::RepeatedPtrField< ::ukm::Source >*
Report::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:ukm.Report.sources)
  return &sources_;
}
const ::google::protobuf::RepeatedPtrField< ::ukm::Source >&
Report::sources() const {
  // @@protoc_insertion_point(field_list:ukm.Report.sources)
  return sources_;
}

// optional .ukm.Report.SourceCounts source_counts = 10;
bool Report::has_source_counts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Report::set_has_source_counts() {
  _has_bits_[0] |= 0x00000002u;
}
void Report::clear_has_source_counts() {
  _has_bits_[0] &= ~0x00000002u;
}
void Report::clear_source_counts() {
  if (source_counts_ != NULL) source_counts_->::ukm::Report_SourceCounts::Clear();
  clear_has_source_counts();
}
const ::ukm::Report_SourceCounts& Report::source_counts() const {
  // @@protoc_insertion_point(field_get:ukm.Report.source_counts)
  return source_counts_ != NULL ? *source_counts_
                         : *::ukm::Report_SourceCounts::internal_default_instance();
}
::ukm::Report_SourceCounts* Report::mutable_source_counts() {
  set_has_source_counts();
  if (source_counts_ == NULL) {
    source_counts_ = new ::ukm::Report_SourceCounts;
  }
  // @@protoc_insertion_point(field_mutable:ukm.Report.source_counts)
  return source_counts_;
}
::ukm::Report_SourceCounts* Report::release_source_counts() {
  // @@protoc_insertion_point(field_release:ukm.Report.source_counts)
  clear_has_source_counts();
  ::ukm::Report_SourceCounts* temp = source_counts_;
  source_counts_ = NULL;
  return temp;
}
void Report::set_allocated_source_counts(::ukm::Report_SourceCounts* source_counts) {
  delete source_counts_;
  source_counts_ = source_counts;
  if (source_counts) {
    set_has_source_counts();
  } else {
    clear_has_source_counts();
  }
  // @@protoc_insertion_point(field_set_allocated:ukm.Report.source_counts)
}

// repeated .ukm.Entry entries = 4;
int Report::entries_size() const {
  return entries_.size();
}
void Report::clear_entries() {
  entries_.Clear();
}
const ::ukm::Entry& Report::entries(int index) const {
  // @@protoc_insertion_point(field_get:ukm.Report.entries)
  return entries_.Get(index);
}
::ukm::Entry* Report::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:ukm.Report.entries)
  return entries_.Mutable(index);
}
::ukm::Entry* Report::add_entries() {
  // @@protoc_insertion_point(field_add:ukm.Report.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::ukm::Entry >*
Report::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:ukm.Report.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::ukm::Entry >&
Report::entries() const {
  // @@protoc_insertion_point(field_list:ukm.Report.entries)
  return entries_;
}

// repeated .ukm.Aggregate aggregates = 7;
int Report::aggregates_size() const {
  return aggregates_.size();
}
void Report::clear_aggregates() {
  aggregates_.Clear();
}
const ::ukm::Aggregate& Report::aggregates(int index) const {
  // @@protoc_insertion_point(field_get:ukm.Report.aggregates)
  return aggregates_.Get(index);
}
::ukm::Aggregate* Report::mutable_aggregates(int index) {
  // @@protoc_insertion_point(field_mutable:ukm.Report.aggregates)
  return aggregates_.Mutable(index);
}
::ukm::Aggregate* Report::add_aggregates() {
  // @@protoc_insertion_point(field_add:ukm.Report.aggregates)
  return aggregates_.Add();
}
::google::protobuf::RepeatedPtrField< ::ukm::Aggregate >*
Report::mutable_aggregates() {
  // @@protoc_insertion_point(field_mutable_list:ukm.Report.aggregates)
  return &aggregates_;
}
const ::google::protobuf::RepeatedPtrField< ::ukm::Aggregate >&
Report::aggregates() const {
  // @@protoc_insertion_point(field_list:ukm.Report.aggregates)
  return aggregates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukm

// @@protoc_insertion_point(global_scope)
