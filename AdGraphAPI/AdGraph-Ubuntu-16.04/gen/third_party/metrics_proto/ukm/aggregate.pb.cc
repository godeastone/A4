// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/aggregate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ukm/aggregate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace ukm {
class Aggregate_MetricDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Aggregate_Metric> {
} _Aggregate_Metric_default_instance_;
class AggregateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Aggregate> {
} _Aggregate_default_instance_;

namespace protobuf_ukm_2faggregate_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Aggregate_Metric_default_instance_.Shutdown();
  _Aggregate_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Aggregate_Metric_default_instance_.DefaultConstruct();
  _Aggregate_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_ukm_2faggregate_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Aggregate_Metric::kMetricHashFieldNumber;
const int Aggregate_Metric::kValueSumFieldNumber;
const int Aggregate_Metric::kValueSquareSumFieldNumber;
const int Aggregate_Metric::kTotalCountFieldNumber;
const int Aggregate_Metric::kDroppedDueToLimitsFieldNumber;
const int Aggregate_Metric::kDroppedDueToSamplingFieldNumber;
const int Aggregate_Metric::kDroppedDueToWhitelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Aggregate_Metric::Aggregate_Metric()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ukm_2faggregate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Aggregate.Metric)
}
Aggregate_Metric::Aggregate_Metric(const Aggregate_Metric& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&metric_hash_, &from.metric_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
    reinterpret_cast<char*>(&metric_hash_)) + sizeof(dropped_due_to_whitelist_));
  // @@protoc_insertion_point(copy_constructor:ukm.Aggregate.Metric)
}

void Aggregate_Metric::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&metric_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
      reinterpret_cast<char*>(&metric_hash_)) + sizeof(dropped_due_to_whitelist_));
}

Aggregate_Metric::~Aggregate_Metric() {
  // @@protoc_insertion_point(destructor:ukm.Aggregate.Metric)
  SharedDtor();
}

void Aggregate_Metric::SharedDtor() {
}

void Aggregate_Metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Aggregate_Metric& Aggregate_Metric::default_instance() {
  protobuf_ukm_2faggregate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Aggregate_Metric* Aggregate_Metric::New(::google::protobuf::Arena* arena) const {
  Aggregate_Metric* n = new Aggregate_Metric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Aggregate_Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Aggregate.Metric)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&metric_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
        reinterpret_cast<char*>(&metric_hash_)) + sizeof(dropped_due_to_whitelist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Aggregate_Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ukm.Aggregate.Metric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 metric_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_metric_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &metric_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double value_sum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_value_sum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_sum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double value_square_sum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_value_square_sum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_square_sum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_total_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_limits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_dropped_due_to_limits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_limits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_sampling = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_dropped_due_to_sampling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_sampling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_whitelist = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_dropped_due_to_whitelist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_whitelist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Aggregate.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Aggregate.Metric)
  return false;
#undef DO_
}

void Aggregate_Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Aggregate.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 metric_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->metric_hash(), output);
  }

  // optional double value_sum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value_sum(), output);
  }

  // optional double value_square_sum = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value_square_sum(), output);
  }

  // optional uint64 total_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->total_count(), output);
  }

  // optional uint64 dropped_due_to_limits = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dropped_due_to_limits(), output);
  }

  // optional uint64 dropped_due_to_sampling = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->dropped_due_to_sampling(), output);
  }

  // optional uint64 dropped_due_to_whitelist = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->dropped_due_to_whitelist(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Aggregate.Metric)
}

size_t Aggregate_Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Aggregate.Metric)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional fixed64 metric_hash = 1;
    if (has_metric_hash()) {
      total_size += 1 + 8;
    }

    // optional double value_sum = 2;
    if (has_value_sum()) {
      total_size += 1 + 8;
    }

    // optional double value_square_sum = 3;
    if (has_value_square_sum()) {
      total_size += 1 + 8;
    }

    // optional uint64 total_count = 4;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_count());
    }

    // optional uint64 dropped_due_to_limits = 5;
    if (has_dropped_due_to_limits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_limits());
    }

    // optional uint64 dropped_due_to_sampling = 6;
    if (has_dropped_due_to_sampling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_sampling());
    }

    // optional uint64 dropped_due_to_whitelist = 7;
    if (has_dropped_due_to_whitelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_whitelist());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aggregate_Metric::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Aggregate_Metric*>(&from));
}

void Aggregate_Metric::MergeFrom(const Aggregate_Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Aggregate.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      metric_hash_ = from.metric_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_sum_ = from.value_sum_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_square_sum_ = from.value_square_sum_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_count_ = from.total_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      dropped_due_to_limits_ = from.dropped_due_to_limits_;
    }
    if (cached_has_bits & 0x00000020u) {
      dropped_due_to_sampling_ = from.dropped_due_to_sampling_;
    }
    if (cached_has_bits & 0x00000040u) {
      dropped_due_to_whitelist_ = from.dropped_due_to_whitelist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Aggregate_Metric::CopyFrom(const Aggregate_Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Aggregate.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregate_Metric::IsInitialized() const {
  return true;
}

void Aggregate_Metric::Swap(Aggregate_Metric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Aggregate_Metric::InternalSwap(Aggregate_Metric* other) {
  std::swap(metric_hash_, other->metric_hash_);
  std::swap(value_sum_, other->value_sum_);
  std::swap(value_square_sum_, other->value_square_sum_);
  std::swap(total_count_, other->total_count_);
  std::swap(dropped_due_to_limits_, other->dropped_due_to_limits_);
  std::swap(dropped_due_to_sampling_, other->dropped_due_to_sampling_);
  std::swap(dropped_due_to_whitelist_, other->dropped_due_to_whitelist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Aggregate_Metric::GetTypeName() const {
  return "ukm.Aggregate.Metric";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Aggregate_Metric

// optional fixed64 metric_hash = 1;
bool Aggregate_Metric::has_metric_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Aggregate_Metric::set_has_metric_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void Aggregate_Metric::clear_has_metric_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void Aggregate_Metric::clear_metric_hash() {
  metric_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_metric_hash();
}
::google::protobuf::uint64 Aggregate_Metric::metric_hash() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.metric_hash)
  return metric_hash_;
}
void Aggregate_Metric::set_metric_hash(::google::protobuf::uint64 value) {
  set_has_metric_hash();
  metric_hash_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.metric_hash)
}

// optional double value_sum = 2;
bool Aggregate_Metric::has_value_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Aggregate_Metric::set_has_value_sum() {
  _has_bits_[0] |= 0x00000002u;
}
void Aggregate_Metric::clear_has_value_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
void Aggregate_Metric::clear_value_sum() {
  value_sum_ = 0;
  clear_has_value_sum();
}
double Aggregate_Metric::value_sum() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.value_sum)
  return value_sum_;
}
void Aggregate_Metric::set_value_sum(double value) {
  set_has_value_sum();
  value_sum_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.value_sum)
}

// optional double value_square_sum = 3;
bool Aggregate_Metric::has_value_square_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Aggregate_Metric::set_has_value_square_sum() {
  _has_bits_[0] |= 0x00000004u;
}
void Aggregate_Metric::clear_has_value_square_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
void Aggregate_Metric::clear_value_square_sum() {
  value_square_sum_ = 0;
  clear_has_value_square_sum();
}
double Aggregate_Metric::value_square_sum() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.value_square_sum)
  return value_square_sum_;
}
void Aggregate_Metric::set_value_square_sum(double value) {
  set_has_value_square_sum();
  value_square_sum_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.value_square_sum)
}

// optional uint64 total_count = 4;
bool Aggregate_Metric::has_total_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Aggregate_Metric::set_has_total_count() {
  _has_bits_[0] |= 0x00000008u;
}
void Aggregate_Metric::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void Aggregate_Metric::clear_total_count() {
  total_count_ = GOOGLE_ULONGLONG(0);
  clear_has_total_count();
}
::google::protobuf::uint64 Aggregate_Metric::total_count() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.total_count)
  return total_count_;
}
void Aggregate_Metric::set_total_count(::google::protobuf::uint64 value) {
  set_has_total_count();
  total_count_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.total_count)
}

// optional uint64 dropped_due_to_limits = 5;
bool Aggregate_Metric::has_dropped_due_to_limits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Aggregate_Metric::set_has_dropped_due_to_limits() {
  _has_bits_[0] |= 0x00000010u;
}
void Aggregate_Metric::clear_has_dropped_due_to_limits() {
  _has_bits_[0] &= ~0x00000010u;
}
void Aggregate_Metric::clear_dropped_due_to_limits() {
  dropped_due_to_limits_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_limits();
}
::google::protobuf::uint64 Aggregate_Metric::dropped_due_to_limits() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.dropped_due_to_limits)
  return dropped_due_to_limits_;
}
void Aggregate_Metric::set_dropped_due_to_limits(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_limits();
  dropped_due_to_limits_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.dropped_due_to_limits)
}

// optional uint64 dropped_due_to_sampling = 6;
bool Aggregate_Metric::has_dropped_due_to_sampling() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Aggregate_Metric::set_has_dropped_due_to_sampling() {
  _has_bits_[0] |= 0x00000020u;
}
void Aggregate_Metric::clear_has_dropped_due_to_sampling() {
  _has_bits_[0] &= ~0x00000020u;
}
void Aggregate_Metric::clear_dropped_due_to_sampling() {
  dropped_due_to_sampling_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_sampling();
}
::google::protobuf::uint64 Aggregate_Metric::dropped_due_to_sampling() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.dropped_due_to_sampling)
  return dropped_due_to_sampling_;
}
void Aggregate_Metric::set_dropped_due_to_sampling(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_sampling();
  dropped_due_to_sampling_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.dropped_due_to_sampling)
}

// optional uint64 dropped_due_to_whitelist = 7;
bool Aggregate_Metric::has_dropped_due_to_whitelist() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Aggregate_Metric::set_has_dropped_due_to_whitelist() {
  _has_bits_[0] |= 0x00000040u;
}
void Aggregate_Metric::clear_has_dropped_due_to_whitelist() {
  _has_bits_[0] &= ~0x00000040u;
}
void Aggregate_Metric::clear_dropped_due_to_whitelist() {
  dropped_due_to_whitelist_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_whitelist();
}
::google::protobuf::uint64 Aggregate_Metric::dropped_due_to_whitelist() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.dropped_due_to_whitelist)
  return dropped_due_to_whitelist_;
}
void Aggregate_Metric::set_dropped_due_to_whitelist(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_whitelist();
  dropped_due_to_whitelist_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.dropped_due_to_whitelist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Aggregate::kSourceIdFieldNumber;
const int Aggregate::kEventHashFieldNumber;
const int Aggregate::kTotalCountFieldNumber;
const int Aggregate::kDroppedDueToLimitsFieldNumber;
const int Aggregate::kDroppedDueToSamplingFieldNumber;
const int Aggregate::kDroppedDueToWhitelistFieldNumber;
const int Aggregate::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Aggregate::Aggregate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ukm_2faggregate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Aggregate)
}
Aggregate::Aggregate(const Aggregate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(dropped_due_to_whitelist_));
  // @@protoc_insertion_point(copy_constructor:ukm.Aggregate)
}

void Aggregate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(dropped_due_to_whitelist_));
}

Aggregate::~Aggregate() {
  // @@protoc_insertion_point(destructor:ukm.Aggregate)
  SharedDtor();
}

void Aggregate::SharedDtor() {
}

void Aggregate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Aggregate& Aggregate::default_instance() {
  protobuf_ukm_2faggregate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Aggregate* Aggregate::New(::google::protobuf::Arena* arena) const {
  Aggregate* n = new Aggregate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Aggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Aggregate)
  metrics_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(dropped_due_to_whitelist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Aggregate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ukm.Aggregate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 event_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_event_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &event_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_total_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_limits = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_dropped_due_to_limits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_limits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_sampling = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_dropped_due_to_sampling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_sampling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Aggregate.Metric metrics = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_whitelist = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_dropped_due_to_whitelist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_whitelist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Aggregate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Aggregate)
  return false;
#undef DO_
}

void Aggregate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Aggregate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // optional fixed64 event_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->event_hash(), output);
  }

  // optional uint64 total_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_count(), output);
  }

  // optional uint64 dropped_due_to_limits = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dropped_due_to_limits(), output);
  }

  // optional uint64 dropped_due_to_sampling = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dropped_due_to_sampling(), output);
  }

  // repeated .ukm.Aggregate.Metric metrics = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->metrics(static_cast<int>(i)), output);
  }

  // optional uint64 dropped_due_to_whitelist = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->dropped_due_to_whitelist(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Aggregate)
}

size_t Aggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Aggregate)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .ukm.Aggregate.Metric metrics = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metrics(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional int64 source_id = 1;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_id());
    }

    // optional fixed64 event_hash = 2;
    if (has_event_hash()) {
      total_size += 1 + 8;
    }

    // optional uint64 total_count = 3;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_count());
    }

    // optional uint64 dropped_due_to_limits = 4;
    if (has_dropped_due_to_limits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_limits());
    }

    // optional uint64 dropped_due_to_sampling = 5;
    if (has_dropped_due_to_sampling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_sampling());
    }

    // optional uint64 dropped_due_to_whitelist = 7;
    if (has_dropped_due_to_whitelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_whitelist());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aggregate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Aggregate*>(&from));
}

void Aggregate::MergeFrom(const Aggregate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Aggregate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_hash_ = from.event_hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_count_ = from.total_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      dropped_due_to_limits_ = from.dropped_due_to_limits_;
    }
    if (cached_has_bits & 0x00000010u) {
      dropped_due_to_sampling_ = from.dropped_due_to_sampling_;
    }
    if (cached_has_bits & 0x00000020u) {
      dropped_due_to_whitelist_ = from.dropped_due_to_whitelist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Aggregate::CopyFrom(const Aggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregate::IsInitialized() const {
  return true;
}

void Aggregate::Swap(Aggregate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Aggregate::InternalSwap(Aggregate* other) {
  metrics_.InternalSwap(&other->metrics_);
  std::swap(source_id_, other->source_id_);
  std::swap(event_hash_, other->event_hash_);
  std::swap(total_count_, other->total_count_);
  std::swap(dropped_due_to_limits_, other->dropped_due_to_limits_);
  std::swap(dropped_due_to_sampling_, other->dropped_due_to_sampling_);
  std::swap(dropped_due_to_whitelist_, other->dropped_due_to_whitelist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Aggregate::GetTypeName() const {
  return "ukm.Aggregate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Aggregate

// optional int64 source_id = 1;
bool Aggregate::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Aggregate::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Aggregate::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Aggregate::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 Aggregate::source_id() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.source_id)
  return source_id_;
}
void Aggregate::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.source_id)
}

// optional fixed64 event_hash = 2;
bool Aggregate::has_event_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Aggregate::set_has_event_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void Aggregate::clear_has_event_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void Aggregate::clear_event_hash() {
  event_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_event_hash();
}
::google::protobuf::uint64 Aggregate::event_hash() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.event_hash)
  return event_hash_;
}
void Aggregate::set_event_hash(::google::protobuf::uint64 value) {
  set_has_event_hash();
  event_hash_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.event_hash)
}

// optional uint64 total_count = 3;
bool Aggregate::has_total_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Aggregate::set_has_total_count() {
  _has_bits_[0] |= 0x00000004u;
}
void Aggregate::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void Aggregate::clear_total_count() {
  total_count_ = GOOGLE_ULONGLONG(0);
  clear_has_total_count();
}
::google::protobuf::uint64 Aggregate::total_count() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.total_count)
  return total_count_;
}
void Aggregate::set_total_count(::google::protobuf::uint64 value) {
  set_has_total_count();
  total_count_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.total_count)
}

// optional uint64 dropped_due_to_limits = 4;
bool Aggregate::has_dropped_due_to_limits() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Aggregate::set_has_dropped_due_to_limits() {
  _has_bits_[0] |= 0x00000008u;
}
void Aggregate::clear_has_dropped_due_to_limits() {
  _has_bits_[0] &= ~0x00000008u;
}
void Aggregate::clear_dropped_due_to_limits() {
  dropped_due_to_limits_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_limits();
}
::google::protobuf::uint64 Aggregate::dropped_due_to_limits() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.dropped_due_to_limits)
  return dropped_due_to_limits_;
}
void Aggregate::set_dropped_due_to_limits(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_limits();
  dropped_due_to_limits_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.dropped_due_to_limits)
}

// optional uint64 dropped_due_to_sampling = 5;
bool Aggregate::has_dropped_due_to_sampling() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Aggregate::set_has_dropped_due_to_sampling() {
  _has_bits_[0] |= 0x00000010u;
}
void Aggregate::clear_has_dropped_due_to_sampling() {
  _has_bits_[0] &= ~0x00000010u;
}
void Aggregate::clear_dropped_due_to_sampling() {
  dropped_due_to_sampling_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_sampling();
}
::google::protobuf::uint64 Aggregate::dropped_due_to_sampling() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.dropped_due_to_sampling)
  return dropped_due_to_sampling_;
}
void Aggregate::set_dropped_due_to_sampling(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_sampling();
  dropped_due_to_sampling_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.dropped_due_to_sampling)
}

// optional uint64 dropped_due_to_whitelist = 7;
bool Aggregate::has_dropped_due_to_whitelist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Aggregate::set_has_dropped_due_to_whitelist() {
  _has_bits_[0] |= 0x00000020u;
}
void Aggregate::clear_has_dropped_due_to_whitelist() {
  _has_bits_[0] &= ~0x00000020u;
}
void Aggregate::clear_dropped_due_to_whitelist() {
  dropped_due_to_whitelist_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_whitelist();
}
::google::protobuf::uint64 Aggregate::dropped_due_to_whitelist() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.dropped_due_to_whitelist)
  return dropped_due_to_whitelist_;
}
void Aggregate::set_dropped_due_to_whitelist(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_whitelist();
  dropped_due_to_whitelist_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.dropped_due_to_whitelist)
}

// repeated .ukm.Aggregate.Metric metrics = 6;
int Aggregate::metrics_size() const {
  return metrics_.size();
}
void Aggregate::clear_metrics() {
  metrics_.Clear();
}
const ::ukm::Aggregate_Metric& Aggregate::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.metrics)
  return metrics_.Get(index);
}
::ukm::Aggregate_Metric* Aggregate::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ukm.Aggregate.metrics)
  return metrics_.Mutable(index);
}
::ukm::Aggregate_Metric* Aggregate::add_metrics() {
  // @@protoc_insertion_point(field_add:ukm.Aggregate.metrics)
  return metrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::ukm::Aggregate_Metric >*
Aggregate::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ukm.Aggregate.metrics)
  return &metrics_;
}
const ::google::protobuf::RepeatedPtrField< ::ukm::Aggregate_Metric >&
Aggregate::metrics() const {
  // @@protoc_insertion_point(field_list:ukm.Aggregate.metrics)
  return metrics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukm

// @@protoc_insertion_point(global_scope)
