// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_logs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cast_logs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace metrics {
class CastLogsProto_CastDeviceInfo_HardwareInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastDeviceInfo_HardwareInfo> {
} _CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_;
class CastLogsProto_CastDeviceInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastDeviceInfo> {
} _CastLogsProto_CastDeviceInfo_default_instance_;
class CastLogsProto_CastConnectionInfo_SenderInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastConnectionInfo_SenderInfo> {
} _CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_;
class CastLogsProto_CastConnectionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastConnectionInfo> {
} _CastLogsProto_CastConnectionInfo_default_instance_;
class CastLogsProto_CastEventProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastEventProto> {
} _CastLogsProto_CastEventProto_default_instance_;
class CastLogsProto_CastDeviceMutableInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastDeviceMutableInfo> {
} _CastLogsProto_CastDeviceMutableInfo_default_instance_;
class CastLogsProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto> {
} _CastLogsProto_default_instance_;

namespace protobuf_cast_5flogs_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_.Shutdown();
  _CastLogsProto_CastDeviceInfo_default_instance_.Shutdown();
  _CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_.Shutdown();
  _CastLogsProto_CastConnectionInfo_default_instance_.Shutdown();
  _CastLogsProto_CastEventProto_default_instance_.Shutdown();
  _CastLogsProto_CastDeviceMutableInfo_default_instance_.Shutdown();
  _CastLogsProto_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_.DefaultConstruct();
  _CastLogsProto_CastDeviceInfo_default_instance_.DefaultConstruct();
  _CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_.DefaultConstruct();
  _CastLogsProto_CastConnectionInfo_default_instance_.DefaultConstruct();
  _CastLogsProto_CastEventProto_default_instance_.DefaultConstruct();
  _CastLogsProto_CastDeviceMutableInfo_default_instance_.DefaultConstruct();
  _CastLogsProto_default_instance_.DefaultConstruct();
  _CastLogsProto_CastDeviceInfo_default_instance_.get_mutable()->hardware_info_ = const_cast< ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo*>(
      ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::internal_default_instance());
  _CastLogsProto_CastConnectionInfo_default_instance_.get_mutable()->sender_info_ = const_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo*>(
      ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::internal_default_instance());
  _CastLogsProto_default_instance_.get_mutable()->cast_device_info_ = const_cast< ::metrics::CastLogsProto_CastDeviceInfo*>(
      ::metrics::CastLogsProto_CastDeviceInfo::internal_default_instance());
  _CastLogsProto_default_instance_.get_mutable()->cast_device_mutable_info_ = const_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo*>(
      ::metrics::CastLogsProto_CastDeviceMutableInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_cast_5flogs_2eproto

bool CastLogsProto_CastDeviceInfo_CastProductType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_UNKNOWN;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_CHROMECAST;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_TV;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_AUDIO;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ANDROID_TV;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ASSISTANT;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ANDROID_THINGS;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_CHROME_OS;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CastProductType_MIN;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CastProductType_MAX;
const int CastLogsProto_CastDeviceInfo::CastProductType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_UNKNOWN;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_NATIVE;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_CHROME_EXTENSION;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_MIN;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_MAX;
const int CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_OTHER;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_ANDROID;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_IOS;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_WINDOWS;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_OSX;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_CHROMEOS;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_LINUX;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_CAST;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::Platform_MIN;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::Platform_MAX;
const int CastLogsProto_CastConnectionInfo_SenderInfo::Platform_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_UNKNOWN;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_LOCAL;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_RELAY;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_INTERNAL;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_MIN;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_MAX;
const int CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_UNKNOWN;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_FORCED;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_API;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_NIGHTLY;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_OTA;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_WATCHDOG;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_PROCESS_MANAGER;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_CRASH_UPLOADER;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_FDR;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::RebootType_MIN;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::RebootType_MAX;
const int CastLogsProto_CastDeviceMutableInfo::RebootType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_UNKNOWN;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_V4;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_V6;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_DUAL_STACK;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_MIN;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_MAX;
const int CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kColorFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kMicFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kMemoryFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kNandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastDeviceInfo_HardwareInfo::CastLogsProto_CastDeviceInfo_HardwareInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}
CastLogsProto_CastDeviceInfo_HardwareInfo::CastLogsProto_CastDeviceInfo_HardwareInfo(const CastLogsProto_CastDeviceInfo_HardwareInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  mic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mic()) {
    mic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mic_);
  }
  memory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_memory()) {
    memory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memory_);
  }
  nand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nand()) {
    nand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nand_);
  }
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SharedCtor() {
  _cached_size_ = 0;
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CastLogsProto_CastDeviceInfo_HardwareInfo::~CastLogsProto_CastDeviceInfo_HardwareInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  SharedDtor();
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SharedDtor() {
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CastLogsProto_CastDeviceInfo_HardwareInfo& CastLogsProto_CastDeviceInfo_HardwareInfo::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastDeviceInfo_HardwareInfo* CastLogsProto_CastDeviceInfo_HardwareInfo::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastDeviceInfo_HardwareInfo* n = new CastLogsProto_CastDeviceInfo_HardwareInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_color()) {
      GOOGLE_DCHECK(!color_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*color_.UnsafeRawStringPointer())->clear();
    }
    if (has_mic()) {
      GOOGLE_DCHECK(!mic_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mic_.UnsafeRawStringPointer())->clear();
    }
    if (has_memory()) {
      GOOGLE_DCHECK(!memory_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*memory_.UnsafeRawStringPointer())->clear();
    }
    if (has_nand()) {
      GOOGLE_DCHECK(!nand_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nand_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastDeviceInfo_HardwareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string memory = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nand = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->color(), output);
  }

  // optional string mic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mic(), output);
  }

  // optional string memory = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->memory(), output);
  }

  // optional string nand = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nand(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}

size_t CastLogsProto_CastDeviceInfo_HardwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional string mic = 2;
    if (has_mic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic());
    }

    // optional string memory = 3;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memory());
    }

    // optional string nand = 4;
    if (has_nand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nand());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastDeviceInfo_HardwareInfo*>(&from));
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::MergeFrom(const CastLogsProto_CastDeviceInfo_HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mic();
      mic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mic_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_memory();
      memory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memory_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_nand();
      nand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nand_);
    }
  }
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::CopyFrom(const CastLogsProto_CastDeviceInfo_HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceInfo_HardwareInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::Swap(CastLogsProto_CastDeviceInfo_HardwareInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::InternalSwap(CastLogsProto_CastDeviceInfo_HardwareInfo* other) {
  color_.Swap(&other->color_);
  mic_.Swap(&other->mic_);
  memory_.Swap(&other->memory_);
  nand_.Swap(&other->nand_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CastLogsProto_CastDeviceInfo_HardwareInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastDeviceInfo_HardwareInfo

// optional string color = 1;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::color() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
  return color_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_color() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}

// optional string mic = 2;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_mic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_mic() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_mic() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_mic() {
  mic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mic();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::mic() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
  return mic_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(const ::std::string& value) {
  set_has_mic();
  mic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(::std::string&& value) {
  set_has_mic();
  mic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mic();
  mic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(const char* value, size_t size) {
  set_has_mic();
  mic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_mic() {
  set_has_mic();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
  return mic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_mic() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
  clear_has_mic();
  return mic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_mic(::std::string* mic) {
  if (mic != NULL) {
    set_has_mic();
  } else {
    clear_has_mic();
  }
  mic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mic);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}

// optional string memory = 3;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_memory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_memory() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_memory() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_memory() {
  memory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memory();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::memory() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
  return memory_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(const ::std::string& value) {
  set_has_memory();
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(::std::string&& value) {
  set_has_memory();
  memory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_memory();
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(const char* value, size_t size) {
  set_has_memory();
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_memory() {
  set_has_memory();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
  return memory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_memory() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
  clear_has_memory();
  return memory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_memory(::std::string* memory) {
  if (memory != NULL) {
    set_has_memory();
  } else {
    clear_has_memory();
  }
  memory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memory);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}

// optional string nand = 4;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_nand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_nand() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_nand() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_nand() {
  nand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nand();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::nand() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
  return nand_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(const ::std::string& value) {
  set_has_nand();
  nand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(::std::string&& value) {
  set_has_nand();
  nand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nand();
  nand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(const char* value, size_t size) {
  set_has_nand();
  nand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_nand() {
  set_has_nand();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
  return nand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_nand() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
  clear_has_nand();
  return nand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_nand(::std::string* nand) {
  if (nand != NULL) {
    set_has_nand();
  } else {
    clear_has_nand();
  }
  nand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nand);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastDeviceInfo::kTypeFieldNumber;
const int CastLogsProto_CastDeviceInfo::kHardwareRevisionFieldNumber;
const int CastLogsProto_CastDeviceInfo::kManufacturerFieldNumber;
const int CastLogsProto_CastDeviceInfo::kModelFieldNumber;
const int CastLogsProto_CastDeviceInfo::kSerialNumberFieldNumber;
const int CastLogsProto_CastDeviceInfo::kHardwareInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastDeviceInfo::CastLogsProto_CastDeviceInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastDeviceInfo)
}
CastLogsProto_CastDeviceInfo::CastLogsProto_CastDeviceInfo(const CastLogsProto_CastDeviceInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hardware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hardware_revision()) {
    hardware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_revision_);
  }
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacturer()) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.has_hardware_info()) {
    hardware_info_ = new ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo(*from.hardware_info_);
  } else {
    hardware_info_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceInfo)
}

void CastLogsProto_CastDeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  hardware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hardware_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&hardware_info_)) + sizeof(type_));
}

CastLogsProto_CastDeviceInfo::~CastLogsProto_CastDeviceInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceInfo)
  SharedDtor();
}

void CastLogsProto_CastDeviceInfo::SharedDtor() {
  hardware_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete hardware_info_;
  }
}

void CastLogsProto_CastDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CastLogsProto_CastDeviceInfo& CastLogsProto_CastDeviceInfo::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastDeviceInfo* CastLogsProto_CastDeviceInfo::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastDeviceInfo* n = new CastLogsProto_CastDeviceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_hardware_revision()) {
      GOOGLE_DCHECK(!hardware_revision_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hardware_revision_.UnsafeRawStringPointer())->clear();
    }
    if (has_manufacturer()) {
      GOOGLE_DCHECK(!manufacturer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*manufacturer_.UnsafeRawStringPointer())->clear();
    }
    if (has_model()) {
      GOOGLE_DCHECK(!model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*model_.UnsafeRawStringPointer())->clear();
    }
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_hardware_info()) {
      GOOGLE_DCHECK(hardware_info_ != NULL);
      hardware_info_->::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastDeviceInfo_CastProductType_IsValid(value)) {
            set_type(static_cast< ::metrics::CastLogsProto_CastDeviceInfo_CastProductType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hardware_revision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware_revision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string manufacturer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardware_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastDeviceInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string hardware_revision = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hardware_revision(), output);
  }

  // optional string manufacturer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufacturer(), output);
  }

  // optional string model = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_number(), output);
  }

  // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->hardware_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastDeviceInfo)
}

size_t CastLogsProto_CastDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional string hardware_revision = 2;
    if (has_hardware_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware_revision());
    }

    // optional string manufacturer = 3;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string serial_number = 5;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
    if (has_hardware_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hardware_info_);
    }

    // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastDeviceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastDeviceInfo*>(&from));
}

void CastLogsProto_CastDeviceInfo::MergeFrom(const CastLogsProto_CastDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hardware_revision();
      hardware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_revision_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_manufacturer();
      manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_hardware_info()->::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::MergeFrom(from.hardware_info());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastDeviceInfo::CopyFrom(const CastLogsProto_CastDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceInfo::Swap(CastLogsProto_CastDeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastDeviceInfo::InternalSwap(CastLogsProto_CastDeviceInfo* other) {
  hardware_revision_.Swap(&other->hardware_revision_);
  manufacturer_.Swap(&other->manufacturer_);
  model_.Swap(&other->model_);
  serial_number_.Swap(&other->serial_number_);
  std::swap(hardware_info_, other->hardware_info_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CastLogsProto_CastDeviceInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastDeviceInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastDeviceInfo

// optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
bool CastLogsProto_CastDeviceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CastLogsProto_CastDeviceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CastLogsProto_CastDeviceInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::metrics::CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.type)
  return static_cast< ::metrics::CastLogsProto_CastDeviceInfo_CastProductType >(type_);
}
void CastLogsProto_CastDeviceInfo::set_type(::metrics::CastLogsProto_CastDeviceInfo_CastProductType value) {
  assert(::metrics::CastLogsProto_CastDeviceInfo_CastProductType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.type)
}

// optional string hardware_revision = 2;
bool CastLogsProto_CastDeviceInfo::has_hardware_revision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_hardware_revision() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastDeviceInfo::clear_has_hardware_revision() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastDeviceInfo::clear_hardware_revision() {
  hardware_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardware_revision();
}
const ::std::string& CastLogsProto_CastDeviceInfo::hardware_revision() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
  return hardware_revision_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo::set_hardware_revision(const ::std::string& value) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo::set_hardware_revision(::std::string&& value) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
#endif
void CastLogsProto_CastDeviceInfo::set_hardware_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
void CastLogsProto_CastDeviceInfo::set_hardware_revision(const char* value, size_t size) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
::std::string* CastLogsProto_CastDeviceInfo::mutable_hardware_revision() {
  set_has_hardware_revision();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
  return hardware_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo::release_hardware_revision() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
  clear_has_hardware_revision();
  return hardware_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo::set_allocated_hardware_revision(::std::string* hardware_revision) {
  if (hardware_revision != NULL) {
    set_has_hardware_revision();
  } else {
    clear_has_hardware_revision();
  }
  hardware_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardware_revision);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}

// optional string manufacturer = 3;
bool CastLogsProto_CastDeviceInfo::has_manufacturer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_manufacturer() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastDeviceInfo::clear_has_manufacturer() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastDeviceInfo::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manufacturer();
}
const ::std::string& CastLogsProto_CastDeviceInfo::manufacturer() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
  return manufacturer_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo::set_manufacturer(const ::std::string& value) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo::set_manufacturer(::std::string&& value) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
#endif
void CastLogsProto_CastDeviceInfo::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
void CastLogsProto_CastDeviceInfo::set_manufacturer(const char* value, size_t size) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
::std::string* CastLogsProto_CastDeviceInfo::mutable_manufacturer() {
  set_has_manufacturer();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo::release_manufacturer() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
  clear_has_manufacturer();
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    set_has_manufacturer();
  } else {
    clear_has_manufacturer();
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}

// optional string model = 4;
bool CastLogsProto_CastDeviceInfo::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastDeviceInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastDeviceInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
const ::std::string& CastLogsProto_CastDeviceInfo::model() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.model)
  return model_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.model)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo::set_model(::std::string&& value) {
  set_has_model();
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.model)
}
#endif
void CastLogsProto_CastDeviceInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.model)
}
void CastLogsProto_CastDeviceInfo::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.model)
}
::std::string* CastLogsProto_CastDeviceInfo::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo::release_model() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.model)
}

// optional string serial_number = 5;
bool CastLogsProto_CastDeviceInfo::has_serial_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_serial_number() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto_CastDeviceInfo::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto_CastDeviceInfo::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CastLogsProto_CastDeviceInfo::serial_number() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.serial_number)
  return serial_number_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
#endif
void CastLogsProto_CastDeviceInfo::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
void CastLogsProto_CastDeviceInfo::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
::std::string* CastLogsProto_CastDeviceInfo::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo::release_serial_number() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}

// optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
bool CastLogsProto_CastDeviceInfo::has_hardware_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_hardware_info() {
  _has_bits_[0] |= 0x00000010u;
}
void CastLogsProto_CastDeviceInfo::clear_has_hardware_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastLogsProto_CastDeviceInfo::clear_hardware_info() {
  if (hardware_info_ != NULL) hardware_info_->::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::Clear();
  clear_has_hardware_info();
}
const ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo& CastLogsProto_CastDeviceInfo::hardware_info() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
  return hardware_info_ != NULL ? *hardware_info_
                         : *::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::internal_default_instance();
}
::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* CastLogsProto_CastDeviceInfo::mutable_hardware_info() {
  set_has_hardware_info();
  if (hardware_info_ == NULL) {
    hardware_info_ = new ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
  return hardware_info_;
}
::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* CastLogsProto_CastDeviceInfo::release_hardware_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
  clear_has_hardware_info();
  ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* temp = hardware_info_;
  hardware_info_ = NULL;
  return temp;
}
void CastLogsProto_CastDeviceInfo::set_allocated_hardware_info(::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* hardware_info) {
  delete hardware_info_;
  hardware_info_ = hardware_info;
  if (hardware_info) {
    set_has_hardware_info();
  } else {
    clear_has_hardware_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSenderDeviceIdFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSdkTypeFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kVersionFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kChromeBrowserVersionFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kPlatformFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSystemVersionFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kTransportConnectionTypeFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kModelFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSenderLocalIpFragmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastConnectionInfo_SenderInfo::CastLogsProto_CastConnectionInfo_SenderInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}
CastLogsProto_CastConnectionInfo_SenderInfo::CastLogsProto_CastConnectionInfo_SenderInfo(const CastLogsProto_CastConnectionInfo_SenderInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  chrome_browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chrome_browser_version()) {
    chrome_browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_browser_version_);
  }
  system_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_version()) {
    system_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_version_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  ::memcpy(&sender_device_id_, &from.sender_device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_local_ip_fragment_) -
    reinterpret_cast<char*>(&sender_device_id_)) + sizeof(sender_local_ip_fragment_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SharedCtor() {
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_local_ip_fragment_) -
      reinterpret_cast<char*>(&sender_device_id_)) + sizeof(sender_local_ip_fragment_));
}

CastLogsProto_CastConnectionInfo_SenderInfo::~CastLogsProto_CastConnectionInfo_SenderInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  SharedDtor();
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_browser_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CastLogsProto_CastConnectionInfo_SenderInfo& CastLogsProto_CastConnectionInfo_SenderInfo::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastConnectionInfo_SenderInfo* CastLogsProto_CastConnectionInfo_SenderInfo::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastConnectionInfo_SenderInfo* n = new CastLogsProto_CastConnectionInfo_SenderInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastConnectionInfo_SenderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
    if (has_chrome_browser_version()) {
      GOOGLE_DCHECK(!chrome_browser_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chrome_browser_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_system_version()) {
      GOOGLE_DCHECK(!system_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*system_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_model()) {
      GOOGLE_DCHECK(!model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*model_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&sender_device_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transport_connection_type_) -
        reinterpret_cast<char*>(&sender_device_id_)) + sizeof(transport_connection_type_));
  }
  sender_local_ip_fragment_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastConnectionInfo_SenderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 sender_device_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_sender_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(value)) {
            set_sdk_type(static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chrome_browser_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chrome_browser_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(value)) {
            set_platform(static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string system_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(value)) {
            set_transport_connection_type(static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sender_local_ip_fragment = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_sender_local_ip_fragment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_local_ip_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 sender_device_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->sender_device_id(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sdk_type(), output);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional string chrome_browser_version = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chrome_browser_version(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->platform(), output);
  }

  // optional string system_version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->system_version(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->transport_connection_type(), output);
  }

  // optional string model = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->model(), output);
  }

  // optional int32 sender_local_ip_fragment = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sender_local_ip_fragment(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}

size_t CastLogsProto_CastConnectionInfo_SenderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string chrome_browser_version = 4;
    if (has_chrome_browser_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chrome_browser_version());
    }

    // optional string system_version = 6;
    if (has_system_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_version());
    }

    // optional string model = 8;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional fixed64 sender_device_id = 1;
    if (has_sender_device_id()) {
      total_size += 1 + 8;
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
    if (has_sdk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sdk_type());
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
    if (has_transport_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transport_connection_type());
    }

  }
  // optional int32 sender_local_ip_fragment = 9;
  if (has_sender_local_ip_fragment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_local_ip_fragment());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastConnectionInfo_SenderInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastConnectionInfo_SenderInfo*>(&from));
}

void CastLogsProto_CastConnectionInfo_SenderInfo::MergeFrom(const CastLogsProto_CastConnectionInfo_SenderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chrome_browser_version();
      chrome_browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_browser_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_system_version();
      system_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000010u) {
      sender_device_id_ = from.sender_device_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      sdk_type_ = from.sdk_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000080u) {
      transport_connection_type_ = from.transport_connection_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_sender_local_ip_fragment(from.sender_local_ip_fragment());
  }
}

void CastLogsProto_CastConnectionInfo_SenderInfo::CopyFrom(const CastLogsProto_CastConnectionInfo_SenderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastConnectionInfo_SenderInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastConnectionInfo_SenderInfo::Swap(CastLogsProto_CastConnectionInfo_SenderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastConnectionInfo_SenderInfo::InternalSwap(CastLogsProto_CastConnectionInfo_SenderInfo* other) {
  version_.Swap(&other->version_);
  chrome_browser_version_.Swap(&other->chrome_browser_version_);
  system_version_.Swap(&other->system_version_);
  model_.Swap(&other->model_);
  std::swap(sender_device_id_, other->sender_device_id_);
  std::swap(sdk_type_, other->sdk_type_);
  std::swap(platform_, other->platform_);
  std::swap(transport_connection_type_, other->transport_connection_type_);
  std::swap(sender_local_ip_fragment_, other->sender_local_ip_fragment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CastLogsProto_CastConnectionInfo_SenderInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastConnectionInfo.SenderInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastConnectionInfo_SenderInfo

// optional fixed64 sender_device_id = 1;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_sender_device_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_sender_device_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_sender_device_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_sender_device_id() {
  sender_device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_device_id();
}
::google::protobuf::uint64 CastLogsProto_CastConnectionInfo_SenderInfo::sender_device_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_device_id)
  return sender_device_id_;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_sender_device_id(::google::protobuf::uint64 value) {
  set_has_sender_device_id();
  sender_device_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_device_id)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_sdk_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_sdk_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_sdk_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_sdk_type() {
  sdk_type_ = 0;
  clear_has_sdk_type();
}
::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::sdk_type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sdk_type)
  return static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType >(sdk_type_);
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_sdk_type(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType value) {
  assert(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(value));
  set_has_sdk_type();
  sdk_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sdk_type)
}

// optional string version = 3;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
  return version_.GetNoArena();
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
#if LANG_CXX11
void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
#endif
void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}

// optional string chrome_browser_version = 4;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_chrome_browser_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_chrome_browser_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_chrome_browser_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_chrome_browser_version() {
  chrome_browser_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chrome_browser_version();
}
const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::chrome_browser_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
  return chrome_browser_version_.GetNoArena();
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(const ::std::string& value) {
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
#if LANG_CXX11
void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(::std::string&& value) {
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
#endif
void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(const char* value, size_t size) {
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_chrome_browser_version() {
  set_has_chrome_browser_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
  return chrome_browser_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_chrome_browser_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
  clear_has_chrome_browser_version();
  return chrome_browser_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_chrome_browser_version(::std::string* chrome_browser_version) {
  if (chrome_browser_version != NULL) {
    set_has_chrome_browser_version();
  } else {
    clear_has_chrome_browser_version();
  }
  chrome_browser_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrome_browser_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000040u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000040u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::platform() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.platform)
  return static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform >(platform_);
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_platform(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform value) {
  assert(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.platform)
}

// optional string system_version = 6;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_system_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_system_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_system_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_system_version() {
  system_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system_version();
}
const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::system_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
  return system_version_.GetNoArena();
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(const ::std::string& value) {
  set_has_system_version();
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
#if LANG_CXX11
void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(::std::string&& value) {
  set_has_system_version();
  system_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
#endif
void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_system_version();
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(const char* value, size_t size) {
  set_has_system_version();
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_system_version() {
  set_has_system_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
  return system_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_system_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
  clear_has_system_version();
  return system_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_system_version(::std::string* system_version) {
  if (system_version != NULL) {
    set_has_system_version();
  } else {
    clear_has_system_version();
  }
  system_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_transport_connection_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_transport_connection_type() {
  _has_bits_[0] |= 0x00000080u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_transport_connection_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_transport_connection_type() {
  transport_connection_type_ = 0;
  clear_has_transport_connection_type();
}
::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::transport_connection_type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.transport_connection_type)
  return static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType >(transport_connection_type_);
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_transport_connection_type(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType value) {
  assert(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(value));
  set_has_transport_connection_type();
  transport_connection_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.transport_connection_type)
}

// optional string model = 8;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::model() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
  return model_.GetNoArena();
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
#if LANG_CXX11
void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(::std::string&& value) {
  set_has_model();
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
#endif
void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_model() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}

// optional int32 sender_local_ip_fragment = 9;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_sender_local_ip_fragment() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_sender_local_ip_fragment() {
  _has_bits_[0] |= 0x00000100u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_sender_local_ip_fragment() {
  _has_bits_[0] &= ~0x00000100u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_sender_local_ip_fragment() {
  sender_local_ip_fragment_ = 0;
  clear_has_sender_local_ip_fragment();
}
::google::protobuf::int32 CastLogsProto_CastConnectionInfo_SenderInfo::sender_local_ip_fragment() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_local_ip_fragment)
  return sender_local_ip_fragment_;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_sender_local_ip_fragment(::google::protobuf::int32 value) {
  set_has_sender_local_ip_fragment();
  sender_local_ip_fragment_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_local_ip_fragment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastConnectionInfo::kTransportConnectionIdFieldNumber;
const int CastLogsProto_CastConnectionInfo::kVirtualConnectionIdFieldNumber;
const int CastLogsProto_CastConnectionInfo::kSenderInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastConnectionInfo::CastLogsProto_CastConnectionInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastConnectionInfo)
}
CastLogsProto_CastConnectionInfo::CastLogsProto_CastConnectionInfo(const CastLogsProto_CastConnectionInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sender_info()) {
    sender_info_ = new ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo(*from.sender_info_);
  } else {
    sender_info_ = NULL;
  }
  ::memcpy(&transport_connection_id_, &from.transport_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_connection_id_) -
    reinterpret_cast<char*>(&transport_connection_id_)) + sizeof(virtual_connection_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastConnectionInfo)
}

void CastLogsProto_CastConnectionInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sender_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_connection_id_) -
      reinterpret_cast<char*>(&sender_info_)) + sizeof(virtual_connection_id_));
}

CastLogsProto_CastConnectionInfo::~CastLogsProto_CastConnectionInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastConnectionInfo)
  SharedDtor();
}

void CastLogsProto_CastConnectionInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete sender_info_;
  }
}

void CastLogsProto_CastConnectionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CastLogsProto_CastConnectionInfo& CastLogsProto_CastConnectionInfo::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastConnectionInfo* CastLogsProto_CastConnectionInfo::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastConnectionInfo* n = new CastLogsProto_CastConnectionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastConnectionInfo)
  if (has_sender_info()) {
    GOOGLE_DCHECK(sender_info_ != NULL);
    sender_info_->::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&transport_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_connection_id_) -
        reinterpret_cast<char*>(&transport_connection_id_)) + sizeof(virtual_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastConnectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastConnectionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 transport_connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_transport_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &transport_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 virtual_connection_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_virtual_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &virtual_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastConnectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastConnectionInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastConnectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 transport_connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->transport_connection_id(), output);
  }

  // optional fixed32 virtual_connection_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->virtual_connection_id(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->sender_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastConnectionInfo)
}

size_t CastLogsProto_CastConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastConnectionInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
    if (has_sender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sender_info_);
    }

    // optional fixed32 transport_connection_id = 1;
    if (has_transport_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 virtual_connection_id = 2;
    if (has_virtual_connection_id()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastConnectionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastConnectionInfo*>(&from));
}

void CastLogsProto_CastConnectionInfo::MergeFrom(const CastLogsProto_CastConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sender_info()->::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::MergeFrom(from.sender_info());
    }
    if (cached_has_bits & 0x00000002u) {
      transport_connection_id_ = from.transport_connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      virtual_connection_id_ = from.virtual_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastConnectionInfo::CopyFrom(const CastLogsProto_CastConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastConnectionInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastConnectionInfo::Swap(CastLogsProto_CastConnectionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastConnectionInfo::InternalSwap(CastLogsProto_CastConnectionInfo* other) {
  std::swap(sender_info_, other->sender_info_);
  std::swap(transport_connection_id_, other->transport_connection_id_);
  std::swap(virtual_connection_id_, other->virtual_connection_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CastLogsProto_CastConnectionInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastConnectionInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastConnectionInfo

// optional fixed32 transport_connection_id = 1;
bool CastLogsProto_CastConnectionInfo::has_transport_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastConnectionInfo::set_has_transport_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastConnectionInfo::clear_has_transport_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastConnectionInfo::clear_transport_connection_id() {
  transport_connection_id_ = 0u;
  clear_has_transport_connection_id();
}
::google::protobuf::uint32 CastLogsProto_CastConnectionInfo::transport_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.transport_connection_id)
  return transport_connection_id_;
}
void CastLogsProto_CastConnectionInfo::set_transport_connection_id(::google::protobuf::uint32 value) {
  set_has_transport_connection_id();
  transport_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.transport_connection_id)
}

// optional fixed32 virtual_connection_id = 2;
bool CastLogsProto_CastConnectionInfo::has_virtual_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastConnectionInfo::set_has_virtual_connection_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastConnectionInfo::clear_has_virtual_connection_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastConnectionInfo::clear_virtual_connection_id() {
  virtual_connection_id_ = 0u;
  clear_has_virtual_connection_id();
}
::google::protobuf::uint32 CastLogsProto_CastConnectionInfo::virtual_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.virtual_connection_id)
  return virtual_connection_id_;
}
void CastLogsProto_CastConnectionInfo::set_virtual_connection_id(::google::protobuf::uint32 value) {
  set_has_virtual_connection_id();
  virtual_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.virtual_connection_id)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
bool CastLogsProto_CastConnectionInfo::has_sender_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastConnectionInfo::set_has_sender_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastConnectionInfo::clear_has_sender_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastConnectionInfo::clear_sender_info() {
  if (sender_info_ != NULL) sender_info_->::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::Clear();
  clear_has_sender_info();
}
const ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo& CastLogsProto_CastConnectionInfo::sender_info() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.sender_info)
  return sender_info_ != NULL ? *sender_info_
                         : *::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::internal_default_instance();
}
::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* CastLogsProto_CastConnectionInfo::mutable_sender_info() {
  set_has_sender_info();
  if (sender_info_ == NULL) {
    sender_info_ = new ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.sender_info)
  return sender_info_;
}
::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* CastLogsProto_CastConnectionInfo::release_sender_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.sender_info)
  clear_has_sender_info();
  ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* temp = sender_info_;
  sender_info_ = NULL;
  return temp;
}
void CastLogsProto_CastConnectionInfo::set_allocated_sender_info(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* sender_info) {
  delete sender_info_;
  sender_info_ = sender_info;
  if (sender_info) {
    set_has_sender_info();
  } else {
    clear_has_sender_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.sender_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastEventProto::kNameHashFieldNumber;
const int CastLogsProto_CastEventProto::kTimeMsecFieldNumber;
const int CastLogsProto_CastEventProto::kAppIdFieldNumber;
const int CastLogsProto_CastEventProto::kApplicationSessionIdFieldNumber;
const int CastLogsProto_CastEventProto::kCastReceiverVersionFieldNumber;
const int CastLogsProto_CastEventProto::kCastMplVersionFieldNumber;
const int CastLogsProto_CastEventProto::kTransportConnectionIdFieldNumber;
const int CastLogsProto_CastEventProto::kVirtualConnectionIdFieldNumber;
const int CastLogsProto_CastEventProto::kValueFieldNumber;
const int CastLogsProto_CastEventProto::kGroupUuidFieldNumber;
const int CastLogsProto_CastEventProto::kConversationKeyFieldNumber;
const int CastLogsProto_CastEventProto::kRequestIdFieldNumber;
const int CastLogsProto_CastEventProto::kFeatureVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastEventProto::CastLogsProto_CastEventProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastEventProto)
}
CastLogsProto_CastEventProto::CastLogsProto_CastEventProto(const CastLogsProto_CastEventProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      feature_vector_(from.feature_vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  conversation_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_conversation_key()) {
    conversation_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conversation_key_);
  }
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_uuid_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(group_uuid_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastEventProto)
}

void CastLogsProto_CastEventProto::SharedCtor() {
  _cached_size_ = 0;
  conversation_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_uuid_) -
      reinterpret_cast<char*>(&name_hash_)) + sizeof(group_uuid_));
}

CastLogsProto_CastEventProto::~CastLogsProto_CastEventProto() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastEventProto)
  SharedDtor();
}

void CastLogsProto_CastEventProto::SharedDtor() {
  conversation_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastEventProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CastLogsProto_CastEventProto& CastLogsProto_CastEventProto::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastEventProto* CastLogsProto_CastEventProto::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastEventProto* n = new CastLogsProto_CastEventProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastEventProto)
  feature_vector_.Clear();
  if (has_conversation_key()) {
    GOOGLE_DCHECK(!conversation_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*conversation_key_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&cast_mpl_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_uuid_) -
        reinterpret_cast<char*>(&cast_mpl_version_)) + sizeof(group_uuid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastEventProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 name_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_msec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 application_session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_application_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &application_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 cast_receiver_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_cast_receiver_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cast_receiver_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 transport_connection_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_transport_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &transport_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 virtual_connection_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_virtual_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &virtual_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 cast_mpl_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_cast_mpl_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cast_mpl_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 group_uuid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_group_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &group_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string conversation_key = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conversation_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 request_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float feature_vector = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 125u, input, this->mutable_feature_vector())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(122u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature_vector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastEventProto)
  return false;
#undef DO_
}

void CastLogsProto_CastEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->name_hash(), output);
  }

  // optional int64 time_msec = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_msec(), output);
  }

  // optional fixed32 app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->app_id(), output);
  }

  // optional fixed64 application_session_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->application_session_id(), output);
  }

  // optional fixed64 cast_receiver_version = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->cast_receiver_version(), output);
  }

  // optional fixed32 transport_connection_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->transport_connection_id(), output);
  }

  // optional fixed32 virtual_connection_id = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->virtual_connection_id(), output);
  }

  // optional int64 value = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->value(), output);
  }

  // optional fixed64 cast_mpl_version = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->cast_mpl_version(), output);
  }

  // optional fixed64 group_uuid = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->group_uuid(), output);
  }

  // optional string conversation_key = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->conversation_key(), output);
  }

  // optional fixed32 request_id = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->request_id(), output);
  }

  // repeated float feature_vector = 15;
  for (int i = 0, n = this->feature_vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      15, this->feature_vector(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastEventProto)
}

size_t CastLogsProto_CastEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastEventProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated float feature_vector = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_vector_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->feature_vector_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string conversation_key = 11;
    if (has_conversation_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conversation_key());
    }

    // optional fixed64 name_hash = 1;
    if (has_name_hash()) {
      total_size += 1 + 8;
    }

    // optional int64 time_msec = 2;
    if (has_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_msec());
    }

    // optional fixed64 application_session_id = 4;
    if (has_application_session_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 transport_connection_id = 6;
    if (has_transport_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 cast_receiver_version = 5;
    if (has_cast_receiver_version()) {
      total_size += 1 + 8;
    }

    // optional int64 value = 8;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional fixed64 cast_mpl_version = 9;
    if (has_cast_mpl_version()) {
      total_size += 1 + 8;
    }

    // optional fixed32 virtual_connection_id = 7;
    if (has_virtual_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 request_id = 12;
    if (has_request_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 group_uuid = 10;
    if (has_group_uuid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastEventProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastEventProto*>(&from));
}

void CastLogsProto_CastEventProto::MergeFrom(const CastLogsProto_CastEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_vector_.MergeFrom(from.feature_vector_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_conversation_key();
      conversation_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conversation_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_msec_ = from.time_msec_;
    }
    if (cached_has_bits & 0x00000008u) {
      application_session_id_ = from.application_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      transport_connection_id_ = from.transport_connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      cast_receiver_version_ = from.cast_receiver_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      cast_mpl_version_ = from.cast_mpl_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      virtual_connection_id_ = from.virtual_connection_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      group_uuid_ = from.group_uuid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastEventProto::CopyFrom(const CastLogsProto_CastEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastEventProto::IsInitialized() const {
  return true;
}

void CastLogsProto_CastEventProto::Swap(CastLogsProto_CastEventProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastEventProto::InternalSwap(CastLogsProto_CastEventProto* other) {
  feature_vector_.InternalSwap(&other->feature_vector_);
  conversation_key_.Swap(&other->conversation_key_);
  std::swap(name_hash_, other->name_hash_);
  std::swap(time_msec_, other->time_msec_);
  std::swap(application_session_id_, other->application_session_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(transport_connection_id_, other->transport_connection_id_);
  std::swap(cast_receiver_version_, other->cast_receiver_version_);
  std::swap(value_, other->value_);
  std::swap(cast_mpl_version_, other->cast_mpl_version_);
  std::swap(virtual_connection_id_, other->virtual_connection_id_);
  std::swap(request_id_, other->request_id_);
  std::swap(group_uuid_, other->group_uuid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CastLogsProto_CastEventProto::GetTypeName() const {
  return "metrics.CastLogsProto.CastEventProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastEventProto

// optional fixed64 name_hash = 1;
bool CastLogsProto_CastEventProto::has_name_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastEventProto::set_has_name_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastEventProto::clear_has_name_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastEventProto::clear_name_hash() {
  name_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_name_hash();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.name_hash)
  return name_hash_;
}
void CastLogsProto_CastEventProto::set_name_hash(::google::protobuf::uint64 value) {
  set_has_name_hash();
  name_hash_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.name_hash)
}

// optional int64 time_msec = 2;
bool CastLogsProto_CastEventProto::has_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastEventProto::set_has_time_msec() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastEventProto::clear_has_time_msec() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastEventProto::clear_time_msec() {
  time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_time_msec();
}
::google::protobuf::int64 CastLogsProto_CastEventProto::time_msec() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.time_msec)
  return time_msec_;
}
void CastLogsProto_CastEventProto::set_time_msec(::google::protobuf::int64 value) {
  set_has_time_msec();
  time_msec_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.time_msec)
}

// optional fixed32 app_id = 3;
bool CastLogsProto_CastEventProto::has_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastLogsProto_CastEventProto::set_has_app_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CastLogsProto_CastEventProto::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastLogsProto_CastEventProto::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CastLogsProto_CastEventProto::app_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.app_id)
  return app_id_;
}
void CastLogsProto_CastEventProto::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.app_id)
}

// optional fixed64 application_session_id = 4;
bool CastLogsProto_CastEventProto::has_application_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto_CastEventProto::set_has_application_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto_CastEventProto::clear_has_application_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto_CastEventProto::clear_application_session_id() {
  application_session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_application_session_id();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::application_session_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.application_session_id)
  return application_session_id_;
}
void CastLogsProto_CastEventProto::set_application_session_id(::google::protobuf::uint64 value) {
  set_has_application_session_id();
  application_session_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.application_session_id)
}

// optional fixed64 cast_receiver_version = 5;
bool CastLogsProto_CastEventProto::has_cast_receiver_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CastLogsProto_CastEventProto::set_has_cast_receiver_version() {
  _has_bits_[0] |= 0x00000040u;
}
void CastLogsProto_CastEventProto::clear_has_cast_receiver_version() {
  _has_bits_[0] &= ~0x00000040u;
}
void CastLogsProto_CastEventProto::clear_cast_receiver_version() {
  cast_receiver_version_ = GOOGLE_ULONGLONG(0);
  clear_has_cast_receiver_version();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::cast_receiver_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.cast_receiver_version)
  return cast_receiver_version_;
}
void CastLogsProto_CastEventProto::set_cast_receiver_version(::google::protobuf::uint64 value) {
  set_has_cast_receiver_version();
  cast_receiver_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.cast_receiver_version)
}

// optional fixed64 cast_mpl_version = 9;
bool CastLogsProto_CastEventProto::has_cast_mpl_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CastLogsProto_CastEventProto::set_has_cast_mpl_version() {
  _has_bits_[0] |= 0x00000100u;
}
void CastLogsProto_CastEventProto::clear_has_cast_mpl_version() {
  _has_bits_[0] &= ~0x00000100u;
}
void CastLogsProto_CastEventProto::clear_cast_mpl_version() {
  cast_mpl_version_ = GOOGLE_ULONGLONG(0);
  clear_has_cast_mpl_version();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::cast_mpl_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.cast_mpl_version)
  return cast_mpl_version_;
}
void CastLogsProto_CastEventProto::set_cast_mpl_version(::google::protobuf::uint64 value) {
  set_has_cast_mpl_version();
  cast_mpl_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.cast_mpl_version)
}

// optional fixed32 transport_connection_id = 6;
bool CastLogsProto_CastEventProto::has_transport_connection_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CastLogsProto_CastEventProto::set_has_transport_connection_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CastLogsProto_CastEventProto::clear_has_transport_connection_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CastLogsProto_CastEventProto::clear_transport_connection_id() {
  transport_connection_id_ = 0u;
  clear_has_transport_connection_id();
}
::google::protobuf::uint32 CastLogsProto_CastEventProto::transport_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.transport_connection_id)
  return transport_connection_id_;
}
void CastLogsProto_CastEventProto::set_transport_connection_id(::google::protobuf::uint32 value) {
  set_has_transport_connection_id();
  transport_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.transport_connection_id)
}

// optional fixed32 virtual_connection_id = 7;
bool CastLogsProto_CastEventProto::has_virtual_connection_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CastLogsProto_CastEventProto::set_has_virtual_connection_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CastLogsProto_CastEventProto::clear_has_virtual_connection_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CastLogsProto_CastEventProto::clear_virtual_connection_id() {
  virtual_connection_id_ = 0u;
  clear_has_virtual_connection_id();
}
::google::protobuf::uint32 CastLogsProto_CastEventProto::virtual_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.virtual_connection_id)
  return virtual_connection_id_;
}
void CastLogsProto_CastEventProto::set_virtual_connection_id(::google::protobuf::uint32 value) {
  set_has_virtual_connection_id();
  virtual_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.virtual_connection_id)
}

// optional int64 value = 8;
bool CastLogsProto_CastEventProto::has_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CastLogsProto_CastEventProto::set_has_value() {
  _has_bits_[0] |= 0x00000080u;
}
void CastLogsProto_CastEventProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000080u;
}
void CastLogsProto_CastEventProto::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
::google::protobuf::int64 CastLogsProto_CastEventProto::value() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.value)
  return value_;
}
void CastLogsProto_CastEventProto::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.value)
}

// optional fixed64 group_uuid = 10;
bool CastLogsProto_CastEventProto::has_group_uuid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CastLogsProto_CastEventProto::set_has_group_uuid() {
  _has_bits_[0] |= 0x00000800u;
}
void CastLogsProto_CastEventProto::clear_has_group_uuid() {
  _has_bits_[0] &= ~0x00000800u;
}
void CastLogsProto_CastEventProto::clear_group_uuid() {
  group_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_group_uuid();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::group_uuid() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.group_uuid)
  return group_uuid_;
}
void CastLogsProto_CastEventProto::set_group_uuid(::google::protobuf::uint64 value) {
  set_has_group_uuid();
  group_uuid_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.group_uuid)
}

// optional string conversation_key = 11;
bool CastLogsProto_CastEventProto::has_conversation_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastEventProto::set_has_conversation_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastEventProto::clear_has_conversation_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastEventProto::clear_conversation_key() {
  conversation_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conversation_key();
}
const ::std::string& CastLogsProto_CastEventProto::conversation_key() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.conversation_key)
  return conversation_key_.GetNoArena();
}
void CastLogsProto_CastEventProto::set_conversation_key(const ::std::string& value) {
  set_has_conversation_key();
  conversation_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.conversation_key)
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::set_conversation_key(::std::string&& value) {
  set_has_conversation_key();
  conversation_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastEventProto.conversation_key)
}
#endif
void CastLogsProto_CastEventProto::set_conversation_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_conversation_key();
  conversation_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.conversation_key)
}
void CastLogsProto_CastEventProto::set_conversation_key(const char* value, size_t size) {
  set_has_conversation_key();
  conversation_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.conversation_key)
}
::std::string* CastLogsProto_CastEventProto::mutable_conversation_key() {
  set_has_conversation_key();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.conversation_key)
  return conversation_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastEventProto::release_conversation_key() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastEventProto.conversation_key)
  clear_has_conversation_key();
  return conversation_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastEventProto::set_allocated_conversation_key(::std::string* conversation_key) {
  if (conversation_key != NULL) {
    set_has_conversation_key();
  } else {
    clear_has_conversation_key();
  }
  conversation_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conversation_key);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastEventProto.conversation_key)
}

// optional fixed32 request_id = 12;
bool CastLogsProto_CastEventProto::has_request_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CastLogsProto_CastEventProto::set_has_request_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CastLogsProto_CastEventProto::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CastLogsProto_CastEventProto::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 CastLogsProto_CastEventProto::request_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.request_id)
  return request_id_;
}
void CastLogsProto_CastEventProto::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.request_id)
}

// repeated float feature_vector = 15;
int CastLogsProto_CastEventProto::feature_vector_size() const {
  return feature_vector_.size();
}
void CastLogsProto_CastEventProto::clear_feature_vector() {
  feature_vector_.Clear();
}
float CastLogsProto_CastEventProto::feature_vector(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.feature_vector)
  return feature_vector_.Get(index);
}
void CastLogsProto_CastEventProto::set_feature_vector(int index, float value) {
  feature_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.feature_vector)
}
void CastLogsProto_CastEventProto::add_feature_vector(float value) {
  feature_vector_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.CastEventProto.feature_vector)
}
const ::google::protobuf::RepeatedField< float >&
CastLogsProto_CastEventProto::feature_vector() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.CastEventProto.feature_vector)
  return feature_vector_;
}
::google::protobuf::RepeatedField< float >*
CastLogsProto_CastEventProto::mutable_feature_vector() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.CastEventProto.feature_vector)
  return &feature_vector_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastDeviceMutableInfo::kLastRebootTypeFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kSystemBuildNumberFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kBackdropAppDeviceIdFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kNetifIpVersionFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kIpDualStackSupportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastDeviceMutableInfo::CastLogsProto_CastDeviceMutableInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastDeviceMutableInfo)
}
CastLogsProto_CastDeviceMutableInfo::CastLogsProto_CastDeviceMutableInfo(const CastLogsProto_CastDeviceMutableInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  backdrop_app_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_backdrop_app_device_id()) {
    backdrop_app_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backdrop_app_device_id_);
  }
  ::memcpy(&system_build_number_, &from.system_build_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&ip_dual_stack_supported_) -
    reinterpret_cast<char*>(&system_build_number_)) + sizeof(ip_dual_stack_supported_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceMutableInfo)
}

void CastLogsProto_CastDeviceMutableInfo::SharedCtor() {
  _cached_size_ = 0;
  backdrop_app_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&system_build_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_dual_stack_supported_) -
      reinterpret_cast<char*>(&system_build_number_)) + sizeof(ip_dual_stack_supported_));
}

CastLogsProto_CastDeviceMutableInfo::~CastLogsProto_CastDeviceMutableInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceMutableInfo)
  SharedDtor();
}

void CastLogsProto_CastDeviceMutableInfo::SharedDtor() {
  backdrop_app_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastDeviceMutableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CastLogsProto_CastDeviceMutableInfo& CastLogsProto_CastDeviceMutableInfo::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastDeviceMutableInfo* CastLogsProto_CastDeviceMutableInfo::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastDeviceMutableInfo* n = new CastLogsProto_CastDeviceMutableInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastDeviceMutableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  if (has_backdrop_app_device_id()) {
    GOOGLE_DCHECK(!backdrop_app_device_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*backdrop_app_device_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&system_build_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ip_dual_stack_supported_) -
        reinterpret_cast<char*>(&system_build_number_)) + sizeof(ip_dual_stack_supported_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastDeviceMutableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(value)) {
            set_last_reboot_type(static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 system_build_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_system_build_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &system_build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string backdrop_app_device_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backdrop_app_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(value)) {
            set_netif_ip_version(static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ip_dual_stack_supported = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ip_dual_stack_supported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ip_dual_stack_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastDeviceMutableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastDeviceMutableInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastDeviceMutableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->last_reboot_type(), output);
  }

  // optional fixed64 system_build_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->system_build_number(), output);
  }

  // optional string backdrop_app_device_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backdrop_app_device_id(), output);
  }

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->netif_ip_version(), output);
  }

  // optional bool ip_dual_stack_supported = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ip_dual_stack_supported(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastDeviceMutableInfo)
}

size_t CastLogsProto_CastDeviceMutableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string backdrop_app_device_id = 3;
    if (has_backdrop_app_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backdrop_app_device_id());
    }

    // optional fixed64 system_build_number = 2;
    if (has_system_build_number()) {
      total_size += 1 + 8;
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
    if (has_last_reboot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->last_reboot_type());
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 4;
    if (has_netif_ip_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->netif_ip_version());
    }

    // optional bool ip_dual_stack_supported = 5;
    if (has_ip_dual_stack_supported()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastDeviceMutableInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastDeviceMutableInfo*>(&from));
}

void CastLogsProto_CastDeviceMutableInfo::MergeFrom(const CastLogsProto_CastDeviceMutableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_backdrop_app_device_id();
      backdrop_app_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backdrop_app_device_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      system_build_number_ = from.system_build_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_reboot_type_ = from.last_reboot_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      netif_ip_version_ = from.netif_ip_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      ip_dual_stack_supported_ = from.ip_dual_stack_supported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastDeviceMutableInfo::CopyFrom(const CastLogsProto_CastDeviceMutableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceMutableInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceMutableInfo::Swap(CastLogsProto_CastDeviceMutableInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastDeviceMutableInfo::InternalSwap(CastLogsProto_CastDeviceMutableInfo* other) {
  backdrop_app_device_id_.Swap(&other->backdrop_app_device_id_);
  std::swap(system_build_number_, other->system_build_number_);
  std::swap(last_reboot_type_, other->last_reboot_type_);
  std::swap(netif_ip_version_, other->netif_ip_version_);
  std::swap(ip_dual_stack_supported_, other->ip_dual_stack_supported_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CastLogsProto_CastDeviceMutableInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastDeviceMutableInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastDeviceMutableInfo

// optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
bool CastLogsProto_CastDeviceMutableInfo::has_last_reboot_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_last_reboot_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_last_reboot_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_last_reboot_type() {
  last_reboot_type_ = 0;
  clear_has_last_reboot_type();
}
::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::last_reboot_type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.last_reboot_type)
  return static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType >(last_reboot_type_);
}
void CastLogsProto_CastDeviceMutableInfo::set_last_reboot_type(::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType value) {
  assert(::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(value));
  set_has_last_reboot_type();
  last_reboot_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.last_reboot_type)
}

// optional fixed64 system_build_number = 2;
bool CastLogsProto_CastDeviceMutableInfo::has_system_build_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_system_build_number() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_system_build_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_system_build_number() {
  system_build_number_ = GOOGLE_ULONGLONG(0);
  clear_has_system_build_number();
}
::google::protobuf::uint64 CastLogsProto_CastDeviceMutableInfo::system_build_number() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.system_build_number)
  return system_build_number_;
}
void CastLogsProto_CastDeviceMutableInfo::set_system_build_number(::google::protobuf::uint64 value) {
  set_has_system_build_number();
  system_build_number_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.system_build_number)
}

// optional string backdrop_app_device_id = 3;
bool CastLogsProto_CastDeviceMutableInfo::has_backdrop_app_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_backdrop_app_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_backdrop_app_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_backdrop_app_device_id() {
  backdrop_app_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_backdrop_app_device_id();
}
const ::std::string& CastLogsProto_CastDeviceMutableInfo::backdrop_app_device_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
  return backdrop_app_device_id_.GetNoArena();
}
void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(const ::std::string& value) {
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(::std::string&& value) {
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
#endif
void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(const char* value, size_t size) {
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
::std::string* CastLogsProto_CastDeviceMutableInfo::mutable_backdrop_app_device_id() {
  set_has_backdrop_app_device_id();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
  return backdrop_app_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceMutableInfo::release_backdrop_app_device_id() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
  clear_has_backdrop_app_device_id();
  return backdrop_app_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceMutableInfo::set_allocated_backdrop_app_device_id(::std::string* backdrop_app_device_id) {
  if (backdrop_app_device_id != NULL) {
    set_has_backdrop_app_device_id();
  } else {
    clear_has_backdrop_app_device_id();
  }
  backdrop_app_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backdrop_app_device_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}

// optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 4;
bool CastLogsProto_CastDeviceMutableInfo::has_netif_ip_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_netif_ip_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_netif_ip_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_netif_ip_version() {
  netif_ip_version_ = 0;
  clear_has_netif_ip_version();
}
::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::netif_ip_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.netif_ip_version)
  return static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion >(netif_ip_version_);
}
void CastLogsProto_CastDeviceMutableInfo::set_netif_ip_version(::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion value) {
  assert(::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(value));
  set_has_netif_ip_version();
  netif_ip_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.netif_ip_version)
}

// optional bool ip_dual_stack_supported = 5;
bool CastLogsProto_CastDeviceMutableInfo::has_ip_dual_stack_supported() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_ip_dual_stack_supported() {
  _has_bits_[0] |= 0x00000010u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_ip_dual_stack_supported() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_ip_dual_stack_supported() {
  ip_dual_stack_supported_ = false;
  clear_has_ip_dual_stack_supported();
}
bool CastLogsProto_CastDeviceMutableInfo::ip_dual_stack_supported() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.ip_dual_stack_supported)
  return ip_dual_stack_supported_;
}
void CastLogsProto_CastDeviceMutableInfo::set_ip_dual_stack_supported(bool value) {
  set_has_ip_dual_stack_supported();
  ip_dual_stack_supported_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.ip_dual_stack_supported)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto::kCastDeviceInfoFieldNumber;
const int CastLogsProto::kCastConnectionInfoFieldNumber;
const int CastLogsProto::kCastEventFieldNumber;
const int CastLogsProto::kVirtualReleaseTrackFieldNumber;
const int CastLogsProto::kCastDeviceMutableInfoFieldNumber;
const int CastLogsProto::kReceiverMetricsIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto::CastLogsProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto)
}
CastLogsProto::CastLogsProto(const CastLogsProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cast_connection_info_(from.cast_connection_info_),
      cast_event_(from.cast_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cast_device_info()) {
    cast_device_info_ = new ::metrics::CastLogsProto_CastDeviceInfo(*from.cast_device_info_);
  } else {
    cast_device_info_ = NULL;
  }
  if (from.has_cast_device_mutable_info()) {
    cast_device_mutable_info_ = new ::metrics::CastLogsProto_CastDeviceMutableInfo(*from.cast_device_mutable_info_);
  } else {
    cast_device_mutable_info_ = NULL;
  }
  ::memcpy(&receiver_metrics_id_, &from.receiver_metrics_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_release_track_) -
    reinterpret_cast<char*>(&receiver_metrics_id_)) + sizeof(virtual_release_track_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto)
}

void CastLogsProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cast_device_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_release_track_) -
      reinterpret_cast<char*>(&cast_device_info_)) + sizeof(virtual_release_track_));
}

CastLogsProto::~CastLogsProto() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto)
  SharedDtor();
}

void CastLogsProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cast_device_info_;
  }
  if (this != internal_default_instance()) {
    delete cast_device_mutable_info_;
  }
}

void CastLogsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CastLogsProto& CastLogsProto::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto* CastLogsProto::New(::google::protobuf::Arena* arena) const {
  CastLogsProto* n = new CastLogsProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto)
  cast_connection_info_.Clear();
  cast_event_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cast_device_info()) {
      GOOGLE_DCHECK(cast_device_info_ != NULL);
      cast_device_info_->::metrics::CastLogsProto_CastDeviceInfo::Clear();
    }
    if (has_cast_device_mutable_info()) {
      GOOGLE_DCHECK(cast_device_mutable_info_ != NULL);
      cast_device_mutable_info_->::metrics::CastLogsProto_CastDeviceMutableInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&receiver_metrics_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_release_track_) -
        reinterpret_cast<char*>(&receiver_metrics_id_)) + sizeof(virtual_release_track_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cast_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cast_connection_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cast_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 virtual_release_track = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_virtual_release_track();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &virtual_release_track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cast_device_mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 receiver_metrics_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_receiver_metrics_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiver_metrics_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto)
  return false;
#undef DO_
}

void CastLogsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->cast_device_info_, output);
  }

  // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cast_connection_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->cast_connection_info(static_cast<int>(i)), output);
  }

  // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cast_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->cast_event(static_cast<int>(i)), output);
  }

  // optional fixed32 virtual_release_track = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->virtual_release_track(), output);
  }

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->cast_device_mutable_info_, output);
  }

  // optional fixed64 receiver_metrics_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->receiver_metrics_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto)
}

size_t CastLogsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cast_connection_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cast_connection_info(static_cast<int>(i)));
    }
  }

  // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cast_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cast_event(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
    if (has_cast_device_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cast_device_info_);
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
    if (has_cast_device_mutable_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cast_device_mutable_info_);
    }

    // optional fixed64 receiver_metrics_id = 6;
    if (has_receiver_metrics_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 virtual_release_track = 4;
    if (has_virtual_release_track()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto*>(&from));
}

void CastLogsProto::MergeFrom(const CastLogsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cast_connection_info_.MergeFrom(from.cast_connection_info_);
  cast_event_.MergeFrom(from.cast_event_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cast_device_info()->::metrics::CastLogsProto_CastDeviceInfo::MergeFrom(from.cast_device_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cast_device_mutable_info()->::metrics::CastLogsProto_CastDeviceMutableInfo::MergeFrom(from.cast_device_mutable_info());
    }
    if (cached_has_bits & 0x00000004u) {
      receiver_metrics_id_ = from.receiver_metrics_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      virtual_release_track_ = from.virtual_release_track_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto::CopyFrom(const CastLogsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto::IsInitialized() const {
  return true;
}

void CastLogsProto::Swap(CastLogsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto::InternalSwap(CastLogsProto* other) {
  cast_connection_info_.InternalSwap(&other->cast_connection_info_);
  cast_event_.InternalSwap(&other->cast_event_);
  std::swap(cast_device_info_, other->cast_device_info_);
  std::swap(cast_device_mutable_info_, other->cast_device_mutable_info_);
  std::swap(receiver_metrics_id_, other->receiver_metrics_id_);
  std::swap(virtual_release_track_, other->virtual_release_track_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CastLogsProto::GetTypeName() const {
  return "metrics.CastLogsProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto

// optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
bool CastLogsProto::has_cast_device_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto::set_has_cast_device_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto::clear_has_cast_device_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto::clear_cast_device_info() {
  if (cast_device_info_ != NULL) cast_device_info_->::metrics::CastLogsProto_CastDeviceInfo::Clear();
  clear_has_cast_device_info();
}
const ::metrics::CastLogsProto_CastDeviceInfo& CastLogsProto::cast_device_info() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_device_info)
  return cast_device_info_ != NULL ? *cast_device_info_
                         : *::metrics::CastLogsProto_CastDeviceInfo::internal_default_instance();
}
::metrics::CastLogsProto_CastDeviceInfo* CastLogsProto::mutable_cast_device_info() {
  set_has_cast_device_info();
  if (cast_device_info_ == NULL) {
    cast_device_info_ = new ::metrics::CastLogsProto_CastDeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_device_info)
  return cast_device_info_;
}
::metrics::CastLogsProto_CastDeviceInfo* CastLogsProto::release_cast_device_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.cast_device_info)
  clear_has_cast_device_info();
  ::metrics::CastLogsProto_CastDeviceInfo* temp = cast_device_info_;
  cast_device_info_ = NULL;
  return temp;
}
void CastLogsProto::set_allocated_cast_device_info(::metrics::CastLogsProto_CastDeviceInfo* cast_device_info) {
  delete cast_device_info_;
  cast_device_info_ = cast_device_info;
  if (cast_device_info) {
    set_has_cast_device_info();
  } else {
    clear_has_cast_device_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.cast_device_info)
}

// repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
int CastLogsProto::cast_connection_info_size() const {
  return cast_connection_info_.size();
}
void CastLogsProto::clear_cast_connection_info() {
  cast_connection_info_.Clear();
}
const ::metrics::CastLogsProto_CastConnectionInfo& CastLogsProto::cast_connection_info(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_.Get(index);
}
::metrics::CastLogsProto_CastConnectionInfo* CastLogsProto::mutable_cast_connection_info(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_.Mutable(index);
}
::metrics::CastLogsProto_CastConnectionInfo* CastLogsProto::add_cast_connection_info() {
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastConnectionInfo >*
CastLogsProto::mutable_cast_connection_info() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.cast_connection_info)
  return &cast_connection_info_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastConnectionInfo >&
CastLogsProto::cast_connection_info() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_;
}

// repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
int CastLogsProto::cast_event_size() const {
  return cast_event_.size();
}
void CastLogsProto::clear_cast_event() {
  cast_event_.Clear();
}
const ::metrics::CastLogsProto_CastEventProto& CastLogsProto::cast_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_event)
  return cast_event_.Get(index);
}
::metrics::CastLogsProto_CastEventProto* CastLogsProto::mutable_cast_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_event)
  return cast_event_.Mutable(index);
}
::metrics::CastLogsProto_CastEventProto* CastLogsProto::add_cast_event() {
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.cast_event)
  return cast_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto >*
CastLogsProto::mutable_cast_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.cast_event)
  return &cast_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto >&
CastLogsProto::cast_event() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.cast_event)
  return cast_event_;
}

// optional fixed32 virtual_release_track = 4;
bool CastLogsProto::has_virtual_release_track() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto::set_has_virtual_release_track() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto::clear_has_virtual_release_track() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto::clear_virtual_release_track() {
  virtual_release_track_ = 0u;
  clear_has_virtual_release_track();
}
::google::protobuf::uint32 CastLogsProto::virtual_release_track() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.virtual_release_track)
  return virtual_release_track_;
}
void CastLogsProto::set_virtual_release_track(::google::protobuf::uint32 value) {
  set_has_virtual_release_track();
  virtual_release_track_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.virtual_release_track)
}

// optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
bool CastLogsProto::has_cast_device_mutable_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto::set_has_cast_device_mutable_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto::clear_has_cast_device_mutable_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto::clear_cast_device_mutable_info() {
  if (cast_device_mutable_info_ != NULL) cast_device_mutable_info_->::metrics::CastLogsProto_CastDeviceMutableInfo::Clear();
  clear_has_cast_device_mutable_info();
}
const ::metrics::CastLogsProto_CastDeviceMutableInfo& CastLogsProto::cast_device_mutable_info() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_device_mutable_info)
  return cast_device_mutable_info_ != NULL ? *cast_device_mutable_info_
                         : *::metrics::CastLogsProto_CastDeviceMutableInfo::internal_default_instance();
}
::metrics::CastLogsProto_CastDeviceMutableInfo* CastLogsProto::mutable_cast_device_mutable_info() {
  set_has_cast_device_mutable_info();
  if (cast_device_mutable_info_ == NULL) {
    cast_device_mutable_info_ = new ::metrics::CastLogsProto_CastDeviceMutableInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_device_mutable_info)
  return cast_device_mutable_info_;
}
::metrics::CastLogsProto_CastDeviceMutableInfo* CastLogsProto::release_cast_device_mutable_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.cast_device_mutable_info)
  clear_has_cast_device_mutable_info();
  ::metrics::CastLogsProto_CastDeviceMutableInfo* temp = cast_device_mutable_info_;
  cast_device_mutable_info_ = NULL;
  return temp;
}
void CastLogsProto::set_allocated_cast_device_mutable_info(::metrics::CastLogsProto_CastDeviceMutableInfo* cast_device_mutable_info) {
  delete cast_device_mutable_info_;
  cast_device_mutable_info_ = cast_device_mutable_info;
  if (cast_device_mutable_info) {
    set_has_cast_device_mutable_info();
  } else {
    clear_has_cast_device_mutable_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.cast_device_mutable_info)
}

// optional fixed64 receiver_metrics_id = 6;
bool CastLogsProto::has_receiver_metrics_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto::set_has_receiver_metrics_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto::clear_has_receiver_metrics_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto::clear_receiver_metrics_id() {
  receiver_metrics_id_ = GOOGLE_ULONGLONG(0);
  clear_has_receiver_metrics_id();
}
::google::protobuf::uint64 CastLogsProto::receiver_metrics_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.receiver_metrics_id)
  return receiver_metrics_id_;
}
void CastLogsProto::set_receiver_metrics_id(::google::protobuf::uint64 value) {
  set_has_receiver_metrics_id();
  receiver_metrics_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.receiver_metrics_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
