// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dom_distiller.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dom_distiller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace dom_distiller {
namespace proto {
class DistilledContentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DistilledContent> {
} _DistilledContent_default_instance_;
class PaginationInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PaginationInfo> {
} _PaginationInfo_default_instance_;
class MarkupArticleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MarkupArticle> {
} _MarkupArticle_default_instance_;
class MarkupImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MarkupImage> {
} _MarkupImage_default_instance_;
class MarkupInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MarkupInfo> {
} _MarkupInfo_default_instance_;
class TimingEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimingEntry> {
} _TimingEntry_default_instance_;
class TimingInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimingInfo> {
} _TimingInfo_default_instance_;
class DebugInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DebugInfo> {
} _DebugInfo_default_instance_;
class StatisticsInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StatisticsInfo> {
} _StatisticsInfo_default_instance_;
class DomDistillerResult_ContentImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DomDistillerResult_ContentImage> {
} _DomDistillerResult_ContentImage_default_instance_;
class DomDistillerResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DomDistillerResult> {
} _DomDistillerResult_default_instance_;
class DomDistillerOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DomDistillerOptions> {
} _DomDistillerOptions_default_instance_;

namespace protobuf_dom_5fdistiller_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DistilledContent_default_instance_.Shutdown();
  _PaginationInfo_default_instance_.Shutdown();
  _MarkupArticle_default_instance_.Shutdown();
  _MarkupImage_default_instance_.Shutdown();
  _MarkupInfo_default_instance_.Shutdown();
  _TimingEntry_default_instance_.Shutdown();
  _TimingInfo_default_instance_.Shutdown();
  _DebugInfo_default_instance_.Shutdown();
  _StatisticsInfo_default_instance_.Shutdown();
  _DomDistillerResult_ContentImage_default_instance_.Shutdown();
  _DomDistillerResult_default_instance_.Shutdown();
  _DomDistillerOptions_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DistilledContent_default_instance_.DefaultConstruct();
  _PaginationInfo_default_instance_.DefaultConstruct();
  _MarkupArticle_default_instance_.DefaultConstruct();
  _MarkupImage_default_instance_.DefaultConstruct();
  _MarkupInfo_default_instance_.DefaultConstruct();
  _TimingEntry_default_instance_.DefaultConstruct();
  _TimingInfo_default_instance_.DefaultConstruct();
  _DebugInfo_default_instance_.DefaultConstruct();
  _StatisticsInfo_default_instance_.DefaultConstruct();
  _DomDistillerResult_ContentImage_default_instance_.DefaultConstruct();
  _DomDistillerResult_default_instance_.DefaultConstruct();
  _DomDistillerOptions_default_instance_.DefaultConstruct();
  _MarkupInfo_default_instance_.get_mutable()->article_ = const_cast< ::dom_distiller::proto::MarkupArticle*>(
      ::dom_distiller::proto::MarkupArticle::internal_default_instance());
  _DomDistillerResult_default_instance_.get_mutable()->distilled_content_ = const_cast< ::dom_distiller::proto::DistilledContent*>(
      ::dom_distiller::proto::DistilledContent::internal_default_instance());
  _DomDistillerResult_default_instance_.get_mutable()->pagination_info_ = const_cast< ::dom_distiller::proto::PaginationInfo*>(
      ::dom_distiller::proto::PaginationInfo::internal_default_instance());
  _DomDistillerResult_default_instance_.get_mutable()->markup_info_ = const_cast< ::dom_distiller::proto::MarkupInfo*>(
      ::dom_distiller::proto::MarkupInfo::internal_default_instance());
  _DomDistillerResult_default_instance_.get_mutable()->timing_info_ = const_cast< ::dom_distiller::proto::TimingInfo*>(
      ::dom_distiller::proto::TimingInfo::internal_default_instance());
  _DomDistillerResult_default_instance_.get_mutable()->debug_info_ = const_cast< ::dom_distiller::proto::DebugInfo*>(
      ::dom_distiller::proto::DebugInfo::internal_default_instance());
  _DomDistillerResult_default_instance_.get_mutable()->statistics_info_ = const_cast< ::dom_distiller::proto::StatisticsInfo*>(
      ::dom_distiller::proto::StatisticsInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_dom_5fdistiller_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledContent::kHtmlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledContent::DistilledContent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.DistilledContent)
}
DistilledContent::DistilledContent(const DistilledContent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_html()) {
    html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_);
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.DistilledContent)
}

void DistilledContent::SharedCtor() {
  _cached_size_ = 0;
  html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DistilledContent::~DistilledContent() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.DistilledContent)
  SharedDtor();
}

void DistilledContent::SharedDtor() {
  html_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DistilledContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledContent& DistilledContent::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistilledContent* DistilledContent::New(::google::protobuf::Arena* arena) const {
  DistilledContent* n = new DistilledContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledContent::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.DistilledContent)
  if (has_html()) {
    GOOGLE_DCHECK(!html_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*html_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistilledContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.DistilledContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string html = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.DistilledContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.DistilledContent)
  return false;
#undef DO_
}

void DistilledContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.DistilledContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string html = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->html(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.DistilledContent)
}

size_t DistilledContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.DistilledContent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string html = 1;
  if (has_html()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->html());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledContent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledContent*>(&from));
}

void DistilledContent::MergeFrom(const DistilledContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.DistilledContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_html()) {
    set_has_html();
    html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_);
  }
}

void DistilledContent::CopyFrom(const DistilledContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.DistilledContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledContent::IsInitialized() const {
  return true;
}

void DistilledContent::Swap(DistilledContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledContent::InternalSwap(DistilledContent* other) {
  html_.Swap(&other->html_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledContent::GetTypeName() const {
  return "dom_distiller.proto.DistilledContent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistilledContent

// optional string html = 1;
bool DistilledContent::has_html() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledContent::set_has_html() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledContent::clear_has_html() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledContent::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_html();
}
const ::std::string& DistilledContent::html() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DistilledContent.html)
  return html_.GetNoArena();
}
void DistilledContent::set_html(const ::std::string& value) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DistilledContent.html)
}
#if LANG_CXX11
void DistilledContent::set_html(::std::string&& value) {
  set_has_html();
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DistilledContent.html)
}
#endif
void DistilledContent::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DistilledContent.html)
}
void DistilledContent::set_html(const char* value, size_t size) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DistilledContent.html)
}
::std::string* DistilledContent::mutable_html() {
  set_has_html();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DistilledContent.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledContent::release_html() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DistilledContent.html)
  clear_has_html();
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledContent::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    set_has_html();
  } else {
    clear_has_html();
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DistilledContent.html)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaginationInfo::kNextPageFieldNumber;
const int PaginationInfo::kPrevPageFieldNumber;
const int PaginationInfo::kCanonicalPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaginationInfo::PaginationInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.PaginationInfo)
}
PaginationInfo::PaginationInfo(const PaginationInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_next_page()) {
    next_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_);
  }
  prev_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prev_page()) {
    prev_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_page_);
  }
  canonical_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_canonical_page()) {
    canonical_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_page_);
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.PaginationInfo)
}

void PaginationInfo::SharedCtor() {
  _cached_size_ = 0;
  next_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PaginationInfo::~PaginationInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.PaginationInfo)
  SharedDtor();
}

void PaginationInfo::SharedDtor() {
  next_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PaginationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PaginationInfo& PaginationInfo::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

PaginationInfo* PaginationInfo::New(::google::protobuf::Arena* arena) const {
  PaginationInfo* n = new PaginationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaginationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.PaginationInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_next_page()) {
      GOOGLE_DCHECK(!next_page_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*next_page_.UnsafeRawStringPointer())->clear();
    }
    if (has_prev_page()) {
      GOOGLE_DCHECK(!prev_page_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*prev_page_.UnsafeRawStringPointer())->clear();
    }
    if (has_canonical_page()) {
      GOOGLE_DCHECK(!canonical_page_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*canonical_page_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PaginationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.PaginationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string next_page = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string prev_page = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string canonical_page = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonical_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.PaginationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.PaginationInfo)
  return false;
#undef DO_
}

void PaginationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.PaginationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string next_page = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->next_page(), output);
  }

  // optional string prev_page = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prev_page(), output);
  }

  // optional string canonical_page = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->canonical_page(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.PaginationInfo)
}

size_t PaginationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.PaginationInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string next_page = 1;
    if (has_next_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_page());
    }

    // optional string prev_page = 2;
    if (has_prev_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prev_page());
    }

    // optional string canonical_page = 3;
    if (has_canonical_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canonical_page());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaginationInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PaginationInfo*>(&from));
}

void PaginationInfo::MergeFrom(const PaginationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.PaginationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_next_page();
      next_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_prev_page();
      prev_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_page_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_canonical_page();
      canonical_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_page_);
    }
  }
}

void PaginationInfo::CopyFrom(const PaginationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.PaginationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaginationInfo::IsInitialized() const {
  return true;
}

void PaginationInfo::Swap(PaginationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaginationInfo::InternalSwap(PaginationInfo* other) {
  next_page_.Swap(&other->next_page_);
  prev_page_.Swap(&other->prev_page_);
  canonical_page_.Swap(&other->canonical_page_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PaginationInfo::GetTypeName() const {
  return "dom_distiller.proto.PaginationInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaginationInfo

// optional string next_page = 1;
bool PaginationInfo::has_next_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PaginationInfo::set_has_next_page() {
  _has_bits_[0] |= 0x00000001u;
}
void PaginationInfo::clear_has_next_page() {
  _has_bits_[0] &= ~0x00000001u;
}
void PaginationInfo::clear_next_page() {
  next_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next_page();
}
const ::std::string& PaginationInfo::next_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.PaginationInfo.next_page)
  return next_page_.GetNoArena();
}
void PaginationInfo::set_next_page(const ::std::string& value) {
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.PaginationInfo.next_page)
}
#if LANG_CXX11
void PaginationInfo::set_next_page(::std::string&& value) {
  set_has_next_page();
  next_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.PaginationInfo.next_page)
}
#endif
void PaginationInfo::set_next_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.PaginationInfo.next_page)
}
void PaginationInfo::set_next_page(const char* value, size_t size) {
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.PaginationInfo.next_page)
}
::std::string* PaginationInfo::mutable_next_page() {
  set_has_next_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.PaginationInfo.next_page)
  return next_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PaginationInfo::release_next_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.PaginationInfo.next_page)
  clear_has_next_page();
  return next_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PaginationInfo::set_allocated_next_page(::std::string* next_page) {
  if (next_page != NULL) {
    set_has_next_page();
  } else {
    clear_has_next_page();
  }
  next_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.PaginationInfo.next_page)
}

// optional string prev_page = 2;
bool PaginationInfo::has_prev_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PaginationInfo::set_has_prev_page() {
  _has_bits_[0] |= 0x00000002u;
}
void PaginationInfo::clear_has_prev_page() {
  _has_bits_[0] &= ~0x00000002u;
}
void PaginationInfo::clear_prev_page() {
  prev_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_page();
}
const ::std::string& PaginationInfo::prev_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.PaginationInfo.prev_page)
  return prev_page_.GetNoArena();
}
void PaginationInfo::set_prev_page(const ::std::string& value) {
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.PaginationInfo.prev_page)
}
#if LANG_CXX11
void PaginationInfo::set_prev_page(::std::string&& value) {
  set_has_prev_page();
  prev_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.PaginationInfo.prev_page)
}
#endif
void PaginationInfo::set_prev_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.PaginationInfo.prev_page)
}
void PaginationInfo::set_prev_page(const char* value, size_t size) {
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.PaginationInfo.prev_page)
}
::std::string* PaginationInfo::mutable_prev_page() {
  set_has_prev_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.PaginationInfo.prev_page)
  return prev_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PaginationInfo::release_prev_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.PaginationInfo.prev_page)
  clear_has_prev_page();
  return prev_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PaginationInfo::set_allocated_prev_page(::std::string* prev_page) {
  if (prev_page != NULL) {
    set_has_prev_page();
  } else {
    clear_has_prev_page();
  }
  prev_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.PaginationInfo.prev_page)
}

// optional string canonical_page = 3;
bool PaginationInfo::has_canonical_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PaginationInfo::set_has_canonical_page() {
  _has_bits_[0] |= 0x00000004u;
}
void PaginationInfo::clear_has_canonical_page() {
  _has_bits_[0] &= ~0x00000004u;
}
void PaginationInfo::clear_canonical_page() {
  canonical_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canonical_page();
}
const ::std::string& PaginationInfo::canonical_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.PaginationInfo.canonical_page)
  return canonical_page_.GetNoArena();
}
void PaginationInfo::set_canonical_page(const ::std::string& value) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.PaginationInfo.canonical_page)
}
#if LANG_CXX11
void PaginationInfo::set_canonical_page(::std::string&& value) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.PaginationInfo.canonical_page)
}
#endif
void PaginationInfo::set_canonical_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.PaginationInfo.canonical_page)
}
void PaginationInfo::set_canonical_page(const char* value, size_t size) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.PaginationInfo.canonical_page)
}
::std::string* PaginationInfo::mutable_canonical_page() {
  set_has_canonical_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.PaginationInfo.canonical_page)
  return canonical_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PaginationInfo::release_canonical_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.PaginationInfo.canonical_page)
  clear_has_canonical_page();
  return canonical_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PaginationInfo::set_allocated_canonical_page(::std::string* canonical_page) {
  if (canonical_page != NULL) {
    set_has_canonical_page();
  } else {
    clear_has_canonical_page();
  }
  canonical_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.PaginationInfo.canonical_page)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkupArticle::kPublishedTimeFieldNumber;
const int MarkupArticle::kModifiedTimeFieldNumber;
const int MarkupArticle::kExpirationTimeFieldNumber;
const int MarkupArticle::kSectionFieldNumber;
const int MarkupArticle::kAuthorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkupArticle::MarkupArticle()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.MarkupArticle)
}
MarkupArticle::MarkupArticle(const MarkupArticle& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      authors_(from.authors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  published_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_published_time()) {
    published_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.published_time_);
  }
  modified_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_modified_time()) {
    modified_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modified_time_);
  }
  expiration_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_expiration_time()) {
    expiration_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiration_time_);
  }
  section_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_section()) {
    section_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_);
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.MarkupArticle)
}

void MarkupArticle::SharedCtor() {
  _cached_size_ = 0;
  published_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiration_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  section_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarkupArticle::~MarkupArticle() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.MarkupArticle)
  SharedDtor();
}

void MarkupArticle::SharedDtor() {
  published_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiration_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  section_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarkupArticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MarkupArticle& MarkupArticle::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkupArticle* MarkupArticle::New(::google::protobuf::Arena* arena) const {
  MarkupArticle* n = new MarkupArticle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkupArticle::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.MarkupArticle)
  authors_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_published_time()) {
      GOOGLE_DCHECK(!published_time_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*published_time_.UnsafeRawStringPointer())->clear();
    }
    if (has_modified_time()) {
      GOOGLE_DCHECK(!modified_time_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*modified_time_.UnsafeRawStringPointer())->clear();
    }
    if (has_expiration_time()) {
      GOOGLE_DCHECK(!expiration_time_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*expiration_time_.UnsafeRawStringPointer())->clear();
    }
    if (has_section()) {
      GOOGLE_DCHECK(!section_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*section_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkupArticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.MarkupArticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string published_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_published_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string modified_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modified_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string expiration_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expiration_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string section = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_section()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string authors = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_authors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.MarkupArticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.MarkupArticle)
  return false;
#undef DO_
}

void MarkupArticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.MarkupArticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string published_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->published_time(), output);
  }

  // optional string modified_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->modified_time(), output);
  }

  // optional string expiration_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->expiration_time(), output);
  }

  // optional string section = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->section(), output);
  }

  // repeated string authors = 5;
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->authors(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.MarkupArticle)
}

size_t MarkupArticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.MarkupArticle)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string authors = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->authors_size());
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->authors(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string published_time = 1;
    if (has_published_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->published_time());
    }

    // optional string modified_time = 2;
    if (has_modified_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modified_time());
    }

    // optional string expiration_time = 3;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expiration_time());
    }

    // optional string section = 4;
    if (has_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->section());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkupArticle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MarkupArticle*>(&from));
}

void MarkupArticle::MergeFrom(const MarkupArticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.MarkupArticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authors_.MergeFrom(from.authors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_published_time();
      published_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.published_time_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_modified_time();
      modified_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modified_time_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_expiration_time();
      expiration_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiration_time_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_section();
      section_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_);
    }
  }
}

void MarkupArticle::CopyFrom(const MarkupArticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.MarkupArticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkupArticle::IsInitialized() const {
  return true;
}

void MarkupArticle::Swap(MarkupArticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkupArticle::InternalSwap(MarkupArticle* other) {
  authors_.InternalSwap(&other->authors_);
  published_time_.Swap(&other->published_time_);
  modified_time_.Swap(&other->modified_time_);
  expiration_time_.Swap(&other->expiration_time_);
  section_.Swap(&other->section_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MarkupArticle::GetTypeName() const {
  return "dom_distiller.proto.MarkupArticle";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkupArticle

// optional string published_time = 1;
bool MarkupArticle::has_published_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkupArticle::set_has_published_time() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkupArticle::clear_has_published_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkupArticle::clear_published_time() {
  published_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_published_time();
}
const ::std::string& MarkupArticle::published_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupArticle.published_time)
  return published_time_.GetNoArena();
}
void MarkupArticle::set_published_time(const ::std::string& value) {
  set_has_published_time();
  published_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.published_time)
}
#if LANG_CXX11
void MarkupArticle::set_published_time(::std::string&& value) {
  set_has_published_time();
  published_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupArticle.published_time)
}
#endif
void MarkupArticle::set_published_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_published_time();
  published_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupArticle.published_time)
}
void MarkupArticle::set_published_time(const char* value, size_t size) {
  set_has_published_time();
  published_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupArticle.published_time)
}
::std::string* MarkupArticle::mutable_published_time() {
  set_has_published_time();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupArticle.published_time)
  return published_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupArticle::release_published_time() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupArticle.published_time)
  clear_has_published_time();
  return published_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupArticle::set_allocated_published_time(::std::string* published_time) {
  if (published_time != NULL) {
    set_has_published_time();
  } else {
    clear_has_published_time();
  }
  published_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), published_time);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupArticle.published_time)
}

// optional string modified_time = 2;
bool MarkupArticle::has_modified_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarkupArticle::set_has_modified_time() {
  _has_bits_[0] |= 0x00000002u;
}
void MarkupArticle::clear_has_modified_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarkupArticle::clear_modified_time() {
  modified_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_modified_time();
}
const ::std::string& MarkupArticle::modified_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupArticle.modified_time)
  return modified_time_.GetNoArena();
}
void MarkupArticle::set_modified_time(const ::std::string& value) {
  set_has_modified_time();
  modified_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.modified_time)
}
#if LANG_CXX11
void MarkupArticle::set_modified_time(::std::string&& value) {
  set_has_modified_time();
  modified_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupArticle.modified_time)
}
#endif
void MarkupArticle::set_modified_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_modified_time();
  modified_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupArticle.modified_time)
}
void MarkupArticle::set_modified_time(const char* value, size_t size) {
  set_has_modified_time();
  modified_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupArticle.modified_time)
}
::std::string* MarkupArticle::mutable_modified_time() {
  set_has_modified_time();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupArticle.modified_time)
  return modified_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupArticle::release_modified_time() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupArticle.modified_time)
  clear_has_modified_time();
  return modified_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupArticle::set_allocated_modified_time(::std::string* modified_time) {
  if (modified_time != NULL) {
    set_has_modified_time();
  } else {
    clear_has_modified_time();
  }
  modified_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modified_time);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupArticle.modified_time)
}

// optional string expiration_time = 3;
bool MarkupArticle::has_expiration_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarkupArticle::set_has_expiration_time() {
  _has_bits_[0] |= 0x00000004u;
}
void MarkupArticle::clear_has_expiration_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarkupArticle::clear_expiration_time() {
  expiration_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_expiration_time();
}
const ::std::string& MarkupArticle::expiration_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupArticle.expiration_time)
  return expiration_time_.GetNoArena();
}
void MarkupArticle::set_expiration_time(const ::std::string& value) {
  set_has_expiration_time();
  expiration_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.expiration_time)
}
#if LANG_CXX11
void MarkupArticle::set_expiration_time(::std::string&& value) {
  set_has_expiration_time();
  expiration_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupArticle.expiration_time)
}
#endif
void MarkupArticle::set_expiration_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_expiration_time();
  expiration_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupArticle.expiration_time)
}
void MarkupArticle::set_expiration_time(const char* value, size_t size) {
  set_has_expiration_time();
  expiration_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupArticle.expiration_time)
}
::std::string* MarkupArticle::mutable_expiration_time() {
  set_has_expiration_time();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupArticle.expiration_time)
  return expiration_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupArticle::release_expiration_time() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupArticle.expiration_time)
  clear_has_expiration_time();
  return expiration_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupArticle::set_allocated_expiration_time(::std::string* expiration_time) {
  if (expiration_time != NULL) {
    set_has_expiration_time();
  } else {
    clear_has_expiration_time();
  }
  expiration_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiration_time);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupArticle.expiration_time)
}

// optional string section = 4;
bool MarkupArticle::has_section() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MarkupArticle::set_has_section() {
  _has_bits_[0] |= 0x00000008u;
}
void MarkupArticle::clear_has_section() {
  _has_bits_[0] &= ~0x00000008u;
}
void MarkupArticle::clear_section() {
  section_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_section();
}
const ::std::string& MarkupArticle::section() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupArticle.section)
  return section_.GetNoArena();
}
void MarkupArticle::set_section(const ::std::string& value) {
  set_has_section();
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.section)
}
#if LANG_CXX11
void MarkupArticle::set_section(::std::string&& value) {
  set_has_section();
  section_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupArticle.section)
}
#endif
void MarkupArticle::set_section(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_section();
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupArticle.section)
}
void MarkupArticle::set_section(const char* value, size_t size) {
  set_has_section();
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupArticle.section)
}
::std::string* MarkupArticle::mutable_section() {
  set_has_section();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupArticle.section)
  return section_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupArticle::release_section() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupArticle.section)
  clear_has_section();
  return section_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupArticle::set_allocated_section(::std::string* section) {
  if (section != NULL) {
    set_has_section();
  } else {
    clear_has_section();
  }
  section_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), section);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupArticle.section)
}

// repeated string authors = 5;
int MarkupArticle::authors_size() const {
  return authors_.size();
}
void MarkupArticle::clear_authors() {
  authors_.Clear();
}
const ::std::string& MarkupArticle::authors(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupArticle.authors)
  return authors_.Get(index);
}
::std::string* MarkupArticle::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupArticle.authors)
  return authors_.Mutable(index);
}
void MarkupArticle::set_authors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.authors)
  authors_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MarkupArticle::set_authors(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.authors)
  authors_.Mutable(index)->assign(std::move(value));
}
#endif
void MarkupArticle::set_authors(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  authors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupArticle.authors)
}
void MarkupArticle::set_authors(int index, const char* value, size_t size) {
  authors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupArticle.authors)
}
::std::string* MarkupArticle::add_authors() {
  // @@protoc_insertion_point(field_add_mutable:dom_distiller.proto.MarkupArticle.authors)
  return authors_.Add();
}
void MarkupArticle::add_authors(const ::std::string& value) {
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dom_distiller.proto.MarkupArticle.authors)
}
#if LANG_CXX11
void MarkupArticle::add_authors(::std::string&& value) {
  authors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dom_distiller.proto.MarkupArticle.authors)
}
#endif
void MarkupArticle::add_authors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dom_distiller.proto.MarkupArticle.authors)
}
void MarkupArticle::add_authors(const char* value, size_t size) {
  authors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dom_distiller.proto.MarkupArticle.authors)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MarkupArticle::authors() const {
  // @@protoc_insertion_point(field_list:dom_distiller.proto.MarkupArticle.authors)
  return authors_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MarkupArticle::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.proto.MarkupArticle.authors)
  return &authors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkupImage::kUrlFieldNumber;
const int MarkupImage::kSecureUrlFieldNumber;
const int MarkupImage::kTypeFieldNumber;
const int MarkupImage::kCaptionFieldNumber;
const int MarkupImage::kWidthFieldNumber;
const int MarkupImage::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkupImage::MarkupImage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.MarkupImage)
}
MarkupImage::MarkupImage(const MarkupImage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  secure_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secure_url()) {
    secure_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secure_url_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_caption()) {
    caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.MarkupImage)
}

void MarkupImage::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secure_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

MarkupImage::~MarkupImage() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.MarkupImage)
  SharedDtor();
}

void MarkupImage::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secure_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caption_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarkupImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MarkupImage& MarkupImage::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkupImage* MarkupImage::New(::google::protobuf::Arena* arena) const {
  MarkupImage* n = new MarkupImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkupImage::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.MarkupImage)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_secure_url()) {
      GOOGLE_DCHECK(!secure_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*secure_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (has_caption()) {
      GOOGLE_DCHECK(!caption_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*caption_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkupImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.MarkupImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string secure_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secure_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string caption = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.MarkupImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.MarkupImage)
  return false;
#undef DO_
}

void MarkupImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.MarkupImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string secure_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secure_url(), output);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional string caption = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->caption(), output);
  }

  // optional int32 width = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // optional int32 height = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.MarkupImage)
}

size_t MarkupImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.MarkupImage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string secure_url = 2;
    if (has_secure_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secure_url());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string caption = 4;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional int32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkupImage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MarkupImage*>(&from));
}

void MarkupImage::MergeFrom(const MarkupImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.MarkupImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_secure_url();
      secure_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secure_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_caption();
      caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_);
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarkupImage::CopyFrom(const MarkupImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.MarkupImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkupImage::IsInitialized() const {
  return true;
}

void MarkupImage::Swap(MarkupImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkupImage::InternalSwap(MarkupImage* other) {
  url_.Swap(&other->url_);
  secure_url_.Swap(&other->secure_url_);
  type_.Swap(&other->type_);
  caption_.Swap(&other->caption_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MarkupImage::GetTypeName() const {
  return "dom_distiller.proto.MarkupImage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkupImage

// optional string url = 1;
bool MarkupImage::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkupImage::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkupImage::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkupImage::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& MarkupImage::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.url)
  return url_.GetNoArena();
}
void MarkupImage::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.url)
}
#if LANG_CXX11
void MarkupImage::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupImage.url)
}
#endif
void MarkupImage::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupImage.url)
}
void MarkupImage::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupImage.url)
}
::std::string* MarkupImage::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupImage.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupImage::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupImage.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupImage::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupImage.url)
}

// optional string secure_url = 2;
bool MarkupImage::has_secure_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarkupImage::set_has_secure_url() {
  _has_bits_[0] |= 0x00000002u;
}
void MarkupImage::clear_has_secure_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarkupImage::clear_secure_url() {
  secure_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secure_url();
}
const ::std::string& MarkupImage::secure_url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.secure_url)
  return secure_url_.GetNoArena();
}
void MarkupImage::set_secure_url(const ::std::string& value) {
  set_has_secure_url();
  secure_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.secure_url)
}
#if LANG_CXX11
void MarkupImage::set_secure_url(::std::string&& value) {
  set_has_secure_url();
  secure_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupImage.secure_url)
}
#endif
void MarkupImage::set_secure_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_secure_url();
  secure_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupImage.secure_url)
}
void MarkupImage::set_secure_url(const char* value, size_t size) {
  set_has_secure_url();
  secure_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupImage.secure_url)
}
::std::string* MarkupImage::mutable_secure_url() {
  set_has_secure_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupImage.secure_url)
  return secure_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupImage::release_secure_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupImage.secure_url)
  clear_has_secure_url();
  return secure_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupImage::set_allocated_secure_url(::std::string* secure_url) {
  if (secure_url != NULL) {
    set_has_secure_url();
  } else {
    clear_has_secure_url();
  }
  secure_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secure_url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupImage.secure_url)
}

// optional string type = 3;
bool MarkupImage::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarkupImage::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void MarkupImage::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarkupImage::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& MarkupImage::type() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.type)
  return type_.GetNoArena();
}
void MarkupImage::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.type)
}
#if LANG_CXX11
void MarkupImage::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupImage.type)
}
#endif
void MarkupImage::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupImage.type)
}
void MarkupImage::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupImage.type)
}
::std::string* MarkupImage::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupImage.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupImage::release_type() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupImage.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupImage::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupImage.type)
}

// optional string caption = 4;
bool MarkupImage::has_caption() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MarkupImage::set_has_caption() {
  _has_bits_[0] |= 0x00000008u;
}
void MarkupImage::clear_has_caption() {
  _has_bits_[0] &= ~0x00000008u;
}
void MarkupImage::clear_caption() {
  caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption();
}
const ::std::string& MarkupImage::caption() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.caption)
  return caption_.GetNoArena();
}
void MarkupImage::set_caption(const ::std::string& value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.caption)
}
#if LANG_CXX11
void MarkupImage::set_caption(::std::string&& value) {
  set_has_caption();
  caption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupImage.caption)
}
#endif
void MarkupImage::set_caption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupImage.caption)
}
void MarkupImage::set_caption(const char* value, size_t size) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupImage.caption)
}
::std::string* MarkupImage::mutable_caption() {
  set_has_caption();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupImage.caption)
  return caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupImage::release_caption() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupImage.caption)
  clear_has_caption();
  return caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupImage::set_allocated_caption(::std::string* caption) {
  if (caption != NULL) {
    set_has_caption();
  } else {
    clear_has_caption();
  }
  caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupImage.caption)
}

// optional int32 width = 5;
bool MarkupImage::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MarkupImage::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void MarkupImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void MarkupImage::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 MarkupImage::width() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.width)
  return width_;
}
void MarkupImage::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.width)
}

// optional int32 height = 6;
bool MarkupImage::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MarkupImage::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void MarkupImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void MarkupImage::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 MarkupImage::height() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.height)
  return height_;
}
void MarkupImage::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkupInfo::kTitleFieldNumber;
const int MarkupInfo::kTypeFieldNumber;
const int MarkupInfo::kUrlFieldNumber;
const int MarkupInfo::kDescriptionFieldNumber;
const int MarkupInfo::kPublisherFieldNumber;
const int MarkupInfo::kCopyrightFieldNumber;
const int MarkupInfo::kAuthorFieldNumber;
const int MarkupInfo::kArticleFieldNumber;
const int MarkupInfo::kImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkupInfo::MarkupInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.MarkupInfo)
}
MarkupInfo::MarkupInfo(const MarkupInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  publisher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_publisher()) {
    publisher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publisher_);
  }
  copyright_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_copyright()) {
    copyright_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.copyright_);
  }
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_author()) {
    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  if (from.has_article()) {
    article_ = new ::dom_distiller::proto::MarkupArticle(*from.article_);
  } else {
    article_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.MarkupInfo)
}

void MarkupInfo::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copyright_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  article_ = NULL;
}

MarkupInfo::~MarkupInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.MarkupInfo)
  SharedDtor();
}

void MarkupInfo::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copyright_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete article_;
  }
}

void MarkupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MarkupInfo& MarkupInfo::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkupInfo* MarkupInfo::New(::google::protobuf::Arena* arena) const {
  MarkupInfo* n = new MarkupInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.MarkupInfo)
  images_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_publisher()) {
      GOOGLE_DCHECK(!publisher_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*publisher_.UnsafeRawStringPointer())->clear();
    }
    if (has_copyright()) {
      GOOGLE_DCHECK(!copyright_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*copyright_.UnsafeRawStringPointer())->clear();
    }
    if (has_author()) {
      GOOGLE_DCHECK(!author_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*author_.UnsafeRawStringPointer())->clear();
    }
    if (has_article()) {
      GOOGLE_DCHECK(article_ != NULL);
      article_->::dom_distiller::proto::MarkupArticle::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.MarkupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string publisher = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string copyright = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_copyright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string author = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dom_distiller.proto.MarkupArticle article = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_article()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dom_distiller.proto.MarkupImage images = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.MarkupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.MarkupInfo)
  return false;
#undef DO_
}

void MarkupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.MarkupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional string publisher = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->publisher(), output);
  }

  // optional string copyright = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->copyright(), output);
  }

  // optional string author = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->author(), output);
  }

  // optional .dom_distiller.proto.MarkupArticle article = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->article_, output);
  }

  // repeated .dom_distiller.proto.MarkupImage images = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->images(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.MarkupInfo)
}

size_t MarkupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.MarkupInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .dom_distiller.proto.MarkupImage images = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string publisher = 5;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }

    // optional string copyright = 6;
    if (has_copyright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->copyright());
    }

    // optional string author = 7;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

    // optional .dom_distiller.proto.MarkupArticle article = 8;
    if (has_article()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->article_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkupInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MarkupInfo*>(&from));
}

void MarkupInfo::MergeFrom(const MarkupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.MarkupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_publisher();
      publisher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publisher_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_copyright();
      copyright_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.copyright_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_author();
      author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_article()->::dom_distiller::proto::MarkupArticle::MergeFrom(from.article());
    }
  }
}

void MarkupInfo::CopyFrom(const MarkupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.MarkupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkupInfo::IsInitialized() const {
  return true;
}

void MarkupInfo::Swap(MarkupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkupInfo::InternalSwap(MarkupInfo* other) {
  images_.InternalSwap(&other->images_);
  title_.Swap(&other->title_);
  type_.Swap(&other->type_);
  url_.Swap(&other->url_);
  description_.Swap(&other->description_);
  publisher_.Swap(&other->publisher_);
  copyright_.Swap(&other->copyright_);
  author_.Swap(&other->author_);
  std::swap(article_, other->article_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MarkupInfo::GetTypeName() const {
  return "dom_distiller.proto.MarkupInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkupInfo

// optional string title = 1;
bool MarkupInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkupInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkupInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkupInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& MarkupInfo::title() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.title)
  return title_.GetNoArena();
}
void MarkupInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.title)
}
#if LANG_CXX11
void MarkupInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.title)
}
#endif
void MarkupInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.title)
}
void MarkupInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.title)
}
::std::string* MarkupInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupInfo::release_title() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.title)
}

// optional string type = 2;
bool MarkupInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarkupInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MarkupInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarkupInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& MarkupInfo::type() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.type)
  return type_.GetNoArena();
}
void MarkupInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.type)
}
#if LANG_CXX11
void MarkupInfo::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.type)
}
#endif
void MarkupInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.type)
}
void MarkupInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.type)
}
::std::string* MarkupInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupInfo::release_type() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.type)
}

// optional string url = 3;
bool MarkupInfo::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarkupInfo::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
void MarkupInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarkupInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& MarkupInfo::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.url)
  return url_.GetNoArena();
}
void MarkupInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.url)
}
#if LANG_CXX11
void MarkupInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.url)
}
#endif
void MarkupInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.url)
}
void MarkupInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.url)
}
::std::string* MarkupInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupInfo::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.url)
}

// optional string description = 4;
bool MarkupInfo::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MarkupInfo::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
void MarkupInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
void MarkupInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& MarkupInfo::description() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.description)
  return description_.GetNoArena();
}
void MarkupInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.description)
}
#if LANG_CXX11
void MarkupInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.description)
}
#endif
void MarkupInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.description)
}
void MarkupInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.description)
}
::std::string* MarkupInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupInfo::release_description() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.description)
}

// optional string publisher = 5;
bool MarkupInfo::has_publisher() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MarkupInfo::set_has_publisher() {
  _has_bits_[0] |= 0x00000010u;
}
void MarkupInfo::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000010u;
}
void MarkupInfo::clear_publisher() {
  publisher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publisher();
}
const ::std::string& MarkupInfo::publisher() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.publisher)
  return publisher_.GetNoArena();
}
void MarkupInfo::set_publisher(const ::std::string& value) {
  set_has_publisher();
  publisher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.publisher)
}
#if LANG_CXX11
void MarkupInfo::set_publisher(::std::string&& value) {
  set_has_publisher();
  publisher_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.publisher)
}
#endif
void MarkupInfo::set_publisher(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publisher();
  publisher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.publisher)
}
void MarkupInfo::set_publisher(const char* value, size_t size) {
  set_has_publisher();
  publisher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.publisher)
}
::std::string* MarkupInfo::mutable_publisher() {
  set_has_publisher();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.publisher)
  return publisher_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupInfo::release_publisher() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.publisher)
  clear_has_publisher();
  return publisher_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupInfo::set_allocated_publisher(::std::string* publisher) {
  if (publisher != NULL) {
    set_has_publisher();
  } else {
    clear_has_publisher();
  }
  publisher_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisher);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.publisher)
}

// optional string copyright = 6;
bool MarkupInfo::has_copyright() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MarkupInfo::set_has_copyright() {
  _has_bits_[0] |= 0x00000020u;
}
void MarkupInfo::clear_has_copyright() {
  _has_bits_[0] &= ~0x00000020u;
}
void MarkupInfo::clear_copyright() {
  copyright_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_copyright();
}
const ::std::string& MarkupInfo::copyright() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.copyright)
  return copyright_.GetNoArena();
}
void MarkupInfo::set_copyright(const ::std::string& value) {
  set_has_copyright();
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.copyright)
}
#if LANG_CXX11
void MarkupInfo::set_copyright(::std::string&& value) {
  set_has_copyright();
  copyright_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.copyright)
}
#endif
void MarkupInfo::set_copyright(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_copyright();
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.copyright)
}
void MarkupInfo::set_copyright(const char* value, size_t size) {
  set_has_copyright();
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.copyright)
}
::std::string* MarkupInfo::mutable_copyright() {
  set_has_copyright();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.copyright)
  return copyright_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupInfo::release_copyright() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.copyright)
  clear_has_copyright();
  return copyright_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupInfo::set_allocated_copyright(::std::string* copyright) {
  if (copyright != NULL) {
    set_has_copyright();
  } else {
    clear_has_copyright();
  }
  copyright_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), copyright);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.copyright)
}

// optional string author = 7;
bool MarkupInfo::has_author() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MarkupInfo::set_has_author() {
  _has_bits_[0] |= 0x00000040u;
}
void MarkupInfo::clear_has_author() {
  _has_bits_[0] &= ~0x00000040u;
}
void MarkupInfo::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
const ::std::string& MarkupInfo::author() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.author)
  return author_.GetNoArena();
}
void MarkupInfo::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.author)
}
#if LANG_CXX11
void MarkupInfo::set_author(::std::string&& value) {
  set_has_author();
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.author)
}
#endif
void MarkupInfo::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.author)
}
void MarkupInfo::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.author)
}
::std::string* MarkupInfo::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkupInfo::release_author() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.author)
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkupInfo::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.author)
}

// optional .dom_distiller.proto.MarkupArticle article = 8;
bool MarkupInfo::has_article() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MarkupInfo::set_has_article() {
  _has_bits_[0] |= 0x00000080u;
}
void MarkupInfo::clear_has_article() {
  _has_bits_[0] &= ~0x00000080u;
}
void MarkupInfo::clear_article() {
  if (article_ != NULL) article_->::dom_distiller::proto::MarkupArticle::Clear();
  clear_has_article();
}
const ::dom_distiller::proto::MarkupArticle& MarkupInfo::article() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.article)
  return article_ != NULL ? *article_
                         : *::dom_distiller::proto::MarkupArticle::internal_default_instance();
}
::dom_distiller::proto::MarkupArticle* MarkupInfo::mutable_article() {
  set_has_article();
  if (article_ == NULL) {
    article_ = new ::dom_distiller::proto::MarkupArticle;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.article)
  return article_;
}
::dom_distiller::proto::MarkupArticle* MarkupInfo::release_article() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.article)
  clear_has_article();
  ::dom_distiller::proto::MarkupArticle* temp = article_;
  article_ = NULL;
  return temp;
}
void MarkupInfo::set_allocated_article(::dom_distiller::proto::MarkupArticle* article) {
  delete article_;
  article_ = article;
  if (article) {
    set_has_article();
  } else {
    clear_has_article();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.article)
}

// repeated .dom_distiller.proto.MarkupImage images = 9;
int MarkupInfo::images_size() const {
  return images_.size();
}
void MarkupInfo::clear_images() {
  images_.Clear();
}
const ::dom_distiller::proto::MarkupImage& MarkupInfo::images(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.images)
  return images_.Get(index);
}
::dom_distiller::proto::MarkupImage* MarkupInfo::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.images)
  return images_.Mutable(index);
}
::dom_distiller::proto::MarkupImage* MarkupInfo::add_images() {
  // @@protoc_insertion_point(field_add:dom_distiller.proto.MarkupInfo.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::MarkupImage >*
MarkupInfo::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.proto.MarkupInfo.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::MarkupImage >&
MarkupInfo::images() const {
  // @@protoc_insertion_point(field_list:dom_distiller.proto.MarkupInfo.images)
  return images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimingEntry::kNameFieldNumber;
const int TimingEntry::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimingEntry::TimingEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.TimingEntry)
}
TimingEntry::TimingEntry(const TimingEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.TimingEntry)
}

void TimingEntry::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
}

TimingEntry::~TimingEntry() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.TimingEntry)
  SharedDtor();
}

void TimingEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TimingEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimingEntry& TimingEntry::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimingEntry* TimingEntry::New(::google::protobuf::Arena* arena) const {
  TimingEntry* n = new TimingEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.TimingEntry)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimingEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.TimingEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.TimingEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.TimingEntry)
  return false;
#undef DO_
}

void TimingEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.TimingEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.TimingEntry)
}

size_t TimingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.TimingEntry)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double time = 2;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimingEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimingEntry*>(&from));
}

void TimingEntry::MergeFrom(const TimingEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.TimingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimingEntry::CopyFrom(const TimingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.TimingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingEntry::IsInitialized() const {
  return true;
}

void TimingEntry::Swap(TimingEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimingEntry::InternalSwap(TimingEntry* other) {
  name_.Swap(&other->name_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TimingEntry::GetTypeName() const {
  return "dom_distiller.proto.TimingEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimingEntry

// optional string name = 1;
bool TimingEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimingEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TimingEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimingEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TimingEntry::name() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingEntry.name)
  return name_.GetNoArena();
}
void TimingEntry::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingEntry.name)
}
#if LANG_CXX11
void TimingEntry::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.TimingEntry.name)
}
#endif
void TimingEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.TimingEntry.name)
}
void TimingEntry::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.TimingEntry.name)
}
::std::string* TimingEntry::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.TimingEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TimingEntry::release_name() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.TimingEntry.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TimingEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.TimingEntry.name)
}

// optional double time = 2;
bool TimingEntry::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimingEntry::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void TimingEntry::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimingEntry::clear_time() {
  time_ = 0;
  clear_has_time();
}
double TimingEntry::time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingEntry.time)
  return time_;
}
void TimingEntry::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingEntry.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimingInfo::kMarkupParsingTimeFieldNumber;
const int TimingInfo::kDocumentConstructionTimeFieldNumber;
const int TimingInfo::kArticleProcessingTimeFieldNumber;
const int TimingInfo::kFormattingTimeFieldNumber;
const int TimingInfo::kTotalTimeFieldNumber;
const int TimingInfo::kOtherTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimingInfo::TimingInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.TimingInfo)
}
TimingInfo::TimingInfo(const TimingInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      other_times_(from.other_times_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&markup_parsing_time_, &from.markup_parsing_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&markup_parsing_time_)) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.TimingInfo)
}

void TimingInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&markup_parsing_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&markup_parsing_time_)) + sizeof(total_time_));
}

TimingInfo::~TimingInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.TimingInfo)
  SharedDtor();
}

void TimingInfo::SharedDtor() {
}

void TimingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimingInfo& TimingInfo::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimingInfo* TimingInfo::New(::google::protobuf::Arena* arena) const {
  TimingInfo* n = new TimingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.TimingInfo)
  other_times_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&markup_parsing_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_time_) -
        reinterpret_cast<char*>(&markup_parsing_time_)) + sizeof(total_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.TimingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double markup_parsing_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_markup_parsing_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &markup_parsing_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double document_construction_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_document_construction_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &document_construction_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double article_processing_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_article_processing_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &article_processing_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double formatting_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_formatting_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &formatting_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dom_distiller.proto.TimingEntry other_times = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_other_times()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.TimingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.TimingInfo)
  return false;
#undef DO_
}

void TimingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.TimingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double markup_parsing_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->markup_parsing_time(), output);
  }

  // optional double document_construction_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->document_construction_time(), output);
  }

  // optional double article_processing_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->article_processing_time(), output);
  }

  // optional double formatting_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->formatting_time(), output);
  }

  // optional double total_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->total_time(), output);
  }

  // repeated .dom_distiller.proto.TimingEntry other_times = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->other_times_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->other_times(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.TimingInfo)
}

size_t TimingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.TimingInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .dom_distiller.proto.TimingEntry other_times = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->other_times_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other_times(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional double markup_parsing_time = 1;
    if (has_markup_parsing_time()) {
      total_size += 1 + 8;
    }

    // optional double document_construction_time = 2;
    if (has_document_construction_time()) {
      total_size += 1 + 8;
    }

    // optional double article_processing_time = 3;
    if (has_article_processing_time()) {
      total_size += 1 + 8;
    }

    // optional double formatting_time = 4;
    if (has_formatting_time()) {
      total_size += 1 + 8;
    }

    // optional double total_time = 5;
    if (has_total_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimingInfo*>(&from));
}

void TimingInfo::MergeFrom(const TimingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.TimingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  other_times_.MergeFrom(from.other_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      markup_parsing_time_ = from.markup_parsing_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      document_construction_time_ = from.document_construction_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      article_processing_time_ = from.article_processing_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      formatting_time_ = from.formatting_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_time_ = from.total_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimingInfo::CopyFrom(const TimingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.TimingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingInfo::IsInitialized() const {
  return true;
}

void TimingInfo::Swap(TimingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimingInfo::InternalSwap(TimingInfo* other) {
  other_times_.InternalSwap(&other->other_times_);
  std::swap(markup_parsing_time_, other->markup_parsing_time_);
  std::swap(document_construction_time_, other->document_construction_time_);
  std::swap(article_processing_time_, other->article_processing_time_);
  std::swap(formatting_time_, other->formatting_time_);
  std::swap(total_time_, other->total_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TimingInfo::GetTypeName() const {
  return "dom_distiller.proto.TimingInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimingInfo

// optional double markup_parsing_time = 1;
bool TimingInfo::has_markup_parsing_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimingInfo::set_has_markup_parsing_time() {
  _has_bits_[0] |= 0x00000001u;
}
void TimingInfo::clear_has_markup_parsing_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimingInfo::clear_markup_parsing_time() {
  markup_parsing_time_ = 0;
  clear_has_markup_parsing_time();
}
double TimingInfo::markup_parsing_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.markup_parsing_time)
  return markup_parsing_time_;
}
void TimingInfo::set_markup_parsing_time(double value) {
  set_has_markup_parsing_time();
  markup_parsing_time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingInfo.markup_parsing_time)
}

// optional double document_construction_time = 2;
bool TimingInfo::has_document_construction_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimingInfo::set_has_document_construction_time() {
  _has_bits_[0] |= 0x00000002u;
}
void TimingInfo::clear_has_document_construction_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimingInfo::clear_document_construction_time() {
  document_construction_time_ = 0;
  clear_has_document_construction_time();
}
double TimingInfo::document_construction_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.document_construction_time)
  return document_construction_time_;
}
void TimingInfo::set_document_construction_time(double value) {
  set_has_document_construction_time();
  document_construction_time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingInfo.document_construction_time)
}

// optional double article_processing_time = 3;
bool TimingInfo::has_article_processing_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimingInfo::set_has_article_processing_time() {
  _has_bits_[0] |= 0x00000004u;
}
void TimingInfo::clear_has_article_processing_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimingInfo::clear_article_processing_time() {
  article_processing_time_ = 0;
  clear_has_article_processing_time();
}
double TimingInfo::article_processing_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.article_processing_time)
  return article_processing_time_;
}
void TimingInfo::set_article_processing_time(double value) {
  set_has_article_processing_time();
  article_processing_time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingInfo.article_processing_time)
}

// optional double formatting_time = 4;
bool TimingInfo::has_formatting_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimingInfo::set_has_formatting_time() {
  _has_bits_[0] |= 0x00000008u;
}
void TimingInfo::clear_has_formatting_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimingInfo::clear_formatting_time() {
  formatting_time_ = 0;
  clear_has_formatting_time();
}
double TimingInfo::formatting_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.formatting_time)
  return formatting_time_;
}
void TimingInfo::set_formatting_time(double value) {
  set_has_formatting_time();
  formatting_time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingInfo.formatting_time)
}

// optional double total_time = 5;
bool TimingInfo::has_total_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TimingInfo::set_has_total_time() {
  _has_bits_[0] |= 0x00000010u;
}
void TimingInfo::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void TimingInfo::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
double TimingInfo::total_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.total_time)
  return total_time_;
}
void TimingInfo::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingInfo.total_time)
}

// repeated .dom_distiller.proto.TimingEntry other_times = 6;
int TimingInfo::other_times_size() const {
  return other_times_.size();
}
void TimingInfo::clear_other_times() {
  other_times_.Clear();
}
const ::dom_distiller::proto::TimingEntry& TimingInfo::other_times(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.other_times)
  return other_times_.Get(index);
}
::dom_distiller::proto::TimingEntry* TimingInfo::mutable_other_times(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.TimingInfo.other_times)
  return other_times_.Mutable(index);
}
::dom_distiller::proto::TimingEntry* TimingInfo::add_other_times() {
  // @@protoc_insertion_point(field_add:dom_distiller.proto.TimingInfo.other_times)
  return other_times_.Add();
}
::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::TimingEntry >*
TimingInfo::mutable_other_times() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.proto.TimingInfo.other_times)
  return &other_times_;
}
const ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::TimingEntry >&
TimingInfo::other_times() const {
  // @@protoc_insertion_point(field_list:dom_distiller.proto.TimingInfo.other_times)
  return other_times_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugInfo::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugInfo::DebugInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.DebugInfo)
}
DebugInfo::DebugInfo(const DebugInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_log()) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.DebugInfo)
}

void DebugInfo::SharedCtor() {
  _cached_size_ = 0;
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DebugInfo::~DebugInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.DebugInfo)
  SharedDtor();
}

void DebugInfo::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DebugInfo& DebugInfo::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugInfo* DebugInfo::New(::google::protobuf::Arena* arena) const {
  DebugInfo* n = new DebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.DebugInfo)
  if (has_log()) {
    GOOGLE_DCHECK(!log_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*log_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.DebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string log = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.DebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.DebugInfo)
  return false;
#undef DO_
}

void DebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.DebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string log = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->log(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.DebugInfo)
}

size_t DebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.DebugInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string log = 1;
  if (has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DebugInfo*>(&from));
}

void DebugInfo::MergeFrom(const DebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_log()) {
    set_has_log();
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
}

void DebugInfo::CopyFrom(const DebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfo::IsInitialized() const {
  return true;
}

void DebugInfo::Swap(DebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugInfo::InternalSwap(DebugInfo* other) {
  log_.Swap(&other->log_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DebugInfo::GetTypeName() const {
  return "dom_distiller.proto.DebugInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugInfo

// optional string log = 1;
bool DebugInfo::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugInfo::set_has_log() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugInfo::clear_has_log() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugInfo::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log();
}
const ::std::string& DebugInfo::log() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DebugInfo.log)
  return log_.GetNoArena();
}
void DebugInfo::set_log(const ::std::string& value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DebugInfo.log)
}
#if LANG_CXX11
void DebugInfo::set_log(::std::string&& value) {
  set_has_log();
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DebugInfo.log)
}
#endif
void DebugInfo::set_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DebugInfo.log)
}
void DebugInfo::set_log(const char* value, size_t size) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DebugInfo.log)
}
::std::string* DebugInfo::mutable_log() {
  set_has_log();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DebugInfo.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DebugInfo::release_log() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DebugInfo.log)
  clear_has_log();
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DebugInfo::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    set_has_log();
  } else {
    clear_has_log();
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DebugInfo.log)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticsInfo::kWordCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticsInfo::StatisticsInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.StatisticsInfo)
}
StatisticsInfo::StatisticsInfo(const StatisticsInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_count_ = from.word_count_;
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.StatisticsInfo)
}

void StatisticsInfo::SharedCtor() {
  _cached_size_ = 0;
  word_count_ = 0;
}

StatisticsInfo::~StatisticsInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.StatisticsInfo)
  SharedDtor();
}

void StatisticsInfo::SharedDtor() {
}

void StatisticsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StatisticsInfo& StatisticsInfo::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatisticsInfo* StatisticsInfo::New(::google::protobuf::Arena* arena) const {
  StatisticsInfo* n = new StatisticsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatisticsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.StatisticsInfo)
  word_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StatisticsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.StatisticsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 word_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_word_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.StatisticsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.StatisticsInfo)
  return false;
#undef DO_
}

void StatisticsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.StatisticsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 word_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->word_count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.StatisticsInfo)
}

size_t StatisticsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.StatisticsInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional int32 word_count = 1;
  if (has_word_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticsInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StatisticsInfo*>(&from));
}

void StatisticsInfo::MergeFrom(const StatisticsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.StatisticsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_word_count()) {
    set_word_count(from.word_count());
  }
}

void StatisticsInfo::CopyFrom(const StatisticsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.StatisticsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsInfo::IsInitialized() const {
  return true;
}

void StatisticsInfo::Swap(StatisticsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticsInfo::InternalSwap(StatisticsInfo* other) {
  std::swap(word_count_, other->word_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StatisticsInfo::GetTypeName() const {
  return "dom_distiller.proto.StatisticsInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatisticsInfo

// optional int32 word_count = 1;
bool StatisticsInfo::has_word_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StatisticsInfo::set_has_word_count() {
  _has_bits_[0] |= 0x00000001u;
}
void StatisticsInfo::clear_has_word_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void StatisticsInfo::clear_word_count() {
  word_count_ = 0;
  clear_has_word_count();
}
::google::protobuf::int32 StatisticsInfo::word_count() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.StatisticsInfo.word_count)
  return word_count_;
}
void StatisticsInfo::set_word_count(::google::protobuf::int32 value) {
  set_has_word_count();
  word_count_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.StatisticsInfo.word_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DomDistillerResult_ContentImage::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DomDistillerResult_ContentImage::DomDistillerResult_ContentImage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.DomDistillerResult.ContentImage)
}
DomDistillerResult_ContentImage::DomDistillerResult_ContentImage(const DomDistillerResult_ContentImage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.DomDistillerResult.ContentImage)
}

void DomDistillerResult_ContentImage::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DomDistillerResult_ContentImage::~DomDistillerResult_ContentImage() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.DomDistillerResult.ContentImage)
  SharedDtor();
}

void DomDistillerResult_ContentImage::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DomDistillerResult_ContentImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DomDistillerResult_ContentImage& DomDistillerResult_ContentImage::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

DomDistillerResult_ContentImage* DomDistillerResult_ContentImage::New(::google::protobuf::Arena* arena) const {
  DomDistillerResult_ContentImage* n = new DomDistillerResult_ContentImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DomDistillerResult_ContentImage::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.DomDistillerResult.ContentImage)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DomDistillerResult_ContentImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.DomDistillerResult.ContentImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.DomDistillerResult.ContentImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.DomDistillerResult.ContentImage)
  return false;
#undef DO_
}

void DomDistillerResult_ContentImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.DomDistillerResult.ContentImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.DomDistillerResult.ContentImage)
}

size_t DomDistillerResult_ContentImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.DomDistillerResult.ContentImage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DomDistillerResult_ContentImage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DomDistillerResult_ContentImage*>(&from));
}

void DomDistillerResult_ContentImage::MergeFrom(const DomDistillerResult_ContentImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.DomDistillerResult.ContentImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void DomDistillerResult_ContentImage::CopyFrom(const DomDistillerResult_ContentImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.DomDistillerResult.ContentImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomDistillerResult_ContentImage::IsInitialized() const {
  return true;
}

void DomDistillerResult_ContentImage::Swap(DomDistillerResult_ContentImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DomDistillerResult_ContentImage::InternalSwap(DomDistillerResult_ContentImage* other) {
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DomDistillerResult_ContentImage::GetTypeName() const {
  return "dom_distiller.proto.DomDistillerResult.ContentImage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DomDistillerResult_ContentImage

// optional string url = 1;
bool DomDistillerResult_ContentImage::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DomDistillerResult_ContentImage::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DomDistillerResult_ContentImage::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DomDistillerResult_ContentImage::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DomDistillerResult_ContentImage::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.ContentImage.url)
  return url_.GetNoArena();
}
void DomDistillerResult_ContentImage::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerResult.ContentImage.url)
}
#if LANG_CXX11
void DomDistillerResult_ContentImage::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DomDistillerResult.ContentImage.url)
}
#endif
void DomDistillerResult_ContentImage::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DomDistillerResult.ContentImage.url)
}
void DomDistillerResult_ContentImage::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DomDistillerResult.ContentImage.url)
}
::std::string* DomDistillerResult_ContentImage::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.ContentImage.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DomDistillerResult_ContentImage::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.ContentImage.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DomDistillerResult_ContentImage::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.ContentImage.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DomDistillerResult::kTitleFieldNumber;
const int DomDistillerResult::kDistilledContentFieldNumber;
const int DomDistillerResult::kPaginationInfoFieldNumber;
const int DomDistillerResult::kMarkupInfoFieldNumber;
const int DomDistillerResult::kTimingInfoFieldNumber;
const int DomDistillerResult::kDebugInfoFieldNumber;
const int DomDistillerResult::kStatisticsInfoFieldNumber;
const int DomDistillerResult::kTextDirectionFieldNumber;
const int DomDistillerResult::kContentImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DomDistillerResult::DomDistillerResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.DomDistillerResult)
}
DomDistillerResult::DomDistillerResult(const DomDistillerResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      content_images_(from.content_images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  text_direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_direction()) {
    text_direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_direction_);
  }
  if (from.has_distilled_content()) {
    distilled_content_ = new ::dom_distiller::proto::DistilledContent(*from.distilled_content_);
  } else {
    distilled_content_ = NULL;
  }
  if (from.has_pagination_info()) {
    pagination_info_ = new ::dom_distiller::proto::PaginationInfo(*from.pagination_info_);
  } else {
    pagination_info_ = NULL;
  }
  if (from.has_markup_info()) {
    markup_info_ = new ::dom_distiller::proto::MarkupInfo(*from.markup_info_);
  } else {
    markup_info_ = NULL;
  }
  if (from.has_timing_info()) {
    timing_info_ = new ::dom_distiller::proto::TimingInfo(*from.timing_info_);
  } else {
    timing_info_ = NULL;
  }
  if (from.has_debug_info()) {
    debug_info_ = new ::dom_distiller::proto::DebugInfo(*from.debug_info_);
  } else {
    debug_info_ = NULL;
  }
  if (from.has_statistics_info()) {
    statistics_info_ = new ::dom_distiller::proto::StatisticsInfo(*from.statistics_info_);
  } else {
    statistics_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.DomDistillerResult)
}

void DomDistillerResult::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&distilled_content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statistics_info_) -
      reinterpret_cast<char*>(&distilled_content_)) + sizeof(statistics_info_));
}

DomDistillerResult::~DomDistillerResult() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.DomDistillerResult)
  SharedDtor();
}

void DomDistillerResult::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_direction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete distilled_content_;
  }
  if (this != internal_default_instance()) {
    delete pagination_info_;
  }
  if (this != internal_default_instance()) {
    delete markup_info_;
  }
  if (this != internal_default_instance()) {
    delete timing_info_;
  }
  if (this != internal_default_instance()) {
    delete debug_info_;
  }
  if (this != internal_default_instance()) {
    delete statistics_info_;
  }
}

void DomDistillerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DomDistillerResult& DomDistillerResult::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

DomDistillerResult* DomDistillerResult::New(::google::protobuf::Arena* arena) const {
  DomDistillerResult* n = new DomDistillerResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DomDistillerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.DomDistillerResult)
  content_images_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_text_direction()) {
      GOOGLE_DCHECK(!text_direction_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_direction_.UnsafeRawStringPointer())->clear();
    }
    if (has_distilled_content()) {
      GOOGLE_DCHECK(distilled_content_ != NULL);
      distilled_content_->::dom_distiller::proto::DistilledContent::Clear();
    }
    if (has_pagination_info()) {
      GOOGLE_DCHECK(pagination_info_ != NULL);
      pagination_info_->::dom_distiller::proto::PaginationInfo::Clear();
    }
    if (has_markup_info()) {
      GOOGLE_DCHECK(markup_info_ != NULL);
      markup_info_->::dom_distiller::proto::MarkupInfo::Clear();
    }
    if (has_timing_info()) {
      GOOGLE_DCHECK(timing_info_ != NULL);
      timing_info_->::dom_distiller::proto::TimingInfo::Clear();
    }
    if (has_debug_info()) {
      GOOGLE_DCHECK(debug_info_ != NULL);
      debug_info_->::dom_distiller::proto::DebugInfo::Clear();
    }
    if (has_statistics_info()) {
      GOOGLE_DCHECK(statistics_info_ != NULL);
      statistics_info_->::dom_distiller::proto::StatisticsInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DomDistillerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.DomDistillerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dom_distiller.proto.DistilledContent distilled_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distilled_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dom_distiller.proto.PaginationInfo pagination_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pagination_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dom_distiller.proto.MarkupInfo markup_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_markup_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dom_distiller.proto.TimingInfo timing_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timing_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dom_distiller.proto.DebugInfo debug_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dom_distiller.proto.StatisticsInfo statistics_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statistics_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_direction = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dom_distiller.proto.DomDistillerResult.ContentImage content_images = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.DomDistillerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.DomDistillerResult)
  return false;
#undef DO_
}

void DomDistillerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.DomDistillerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional .dom_distiller.proto.DistilledContent distilled_content = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->distilled_content_, output);
  }

  // optional .dom_distiller.proto.PaginationInfo pagination_info = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pagination_info_, output);
  }

  // optional .dom_distiller.proto.MarkupInfo markup_info = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->markup_info_, output);
  }

  // optional .dom_distiller.proto.TimingInfo timing_info = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->timing_info_, output);
  }

  // optional .dom_distiller.proto.DebugInfo debug_info = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->debug_info_, output);
  }

  // optional .dom_distiller.proto.StatisticsInfo statistics_info = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->statistics_info_, output);
  }

  // optional string text_direction = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->text_direction(), output);
  }

  // repeated .dom_distiller.proto.DomDistillerResult.ContentImage content_images = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->content_images(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.DomDistillerResult)
}

size_t DomDistillerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.DomDistillerResult)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .dom_distiller.proto.DomDistillerResult.ContentImage content_images = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->content_images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content_images(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string text_direction = 9;
    if (has_text_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_direction());
    }

    // optional .dom_distiller.proto.DistilledContent distilled_content = 2;
    if (has_distilled_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->distilled_content_);
    }

    // optional .dom_distiller.proto.PaginationInfo pagination_info = 3;
    if (has_pagination_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pagination_info_);
    }

    // optional .dom_distiller.proto.MarkupInfo markup_info = 5;
    if (has_markup_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->markup_info_);
    }

    // optional .dom_distiller.proto.TimingInfo timing_info = 6;
    if (has_timing_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timing_info_);
    }

    // optional .dom_distiller.proto.DebugInfo debug_info = 7;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_info_);
    }

    // optional .dom_distiller.proto.StatisticsInfo statistics_info = 8;
    if (has_statistics_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->statistics_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DomDistillerResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DomDistillerResult*>(&from));
}

void DomDistillerResult::MergeFrom(const DomDistillerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.DomDistillerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_images_.MergeFrom(from.content_images_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_text_direction();
      text_direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_direction_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_distilled_content()->::dom_distiller::proto::DistilledContent::MergeFrom(from.distilled_content());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pagination_info()->::dom_distiller::proto::PaginationInfo::MergeFrom(from.pagination_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_markup_info()->::dom_distiller::proto::MarkupInfo::MergeFrom(from.markup_info());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_timing_info()->::dom_distiller::proto::TimingInfo::MergeFrom(from.timing_info());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_debug_info()->::dom_distiller::proto::DebugInfo::MergeFrom(from.debug_info());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_statistics_info()->::dom_distiller::proto::StatisticsInfo::MergeFrom(from.statistics_info());
    }
  }
}

void DomDistillerResult::CopyFrom(const DomDistillerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.DomDistillerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomDistillerResult::IsInitialized() const {
  return true;
}

void DomDistillerResult::Swap(DomDistillerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DomDistillerResult::InternalSwap(DomDistillerResult* other) {
  content_images_.InternalSwap(&other->content_images_);
  title_.Swap(&other->title_);
  text_direction_.Swap(&other->text_direction_);
  std::swap(distilled_content_, other->distilled_content_);
  std::swap(pagination_info_, other->pagination_info_);
  std::swap(markup_info_, other->markup_info_);
  std::swap(timing_info_, other->timing_info_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(statistics_info_, other->statistics_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DomDistillerResult::GetTypeName() const {
  return "dom_distiller.proto.DomDistillerResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DomDistillerResult

// optional string title = 1;
bool DomDistillerResult::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DomDistillerResult::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void DomDistillerResult::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void DomDistillerResult::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& DomDistillerResult::title() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.title)
  return title_.GetNoArena();
}
void DomDistillerResult::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerResult.title)
}
#if LANG_CXX11
void DomDistillerResult::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DomDistillerResult.title)
}
#endif
void DomDistillerResult::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DomDistillerResult.title)
}
void DomDistillerResult::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DomDistillerResult.title)
}
::std::string* DomDistillerResult::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DomDistillerResult::release_title() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DomDistillerResult::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.title)
}

// optional .dom_distiller.proto.DistilledContent distilled_content = 2;
bool DomDistillerResult::has_distilled_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DomDistillerResult::set_has_distilled_content() {
  _has_bits_[0] |= 0x00000004u;
}
void DomDistillerResult::clear_has_distilled_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void DomDistillerResult::clear_distilled_content() {
  if (distilled_content_ != NULL) distilled_content_->::dom_distiller::proto::DistilledContent::Clear();
  clear_has_distilled_content();
}
const ::dom_distiller::proto::DistilledContent& DomDistillerResult::distilled_content() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.distilled_content)
  return distilled_content_ != NULL ? *distilled_content_
                         : *::dom_distiller::proto::DistilledContent::internal_default_instance();
}
::dom_distiller::proto::DistilledContent* DomDistillerResult::mutable_distilled_content() {
  set_has_distilled_content();
  if (distilled_content_ == NULL) {
    distilled_content_ = new ::dom_distiller::proto::DistilledContent;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.distilled_content)
  return distilled_content_;
}
::dom_distiller::proto::DistilledContent* DomDistillerResult::release_distilled_content() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.distilled_content)
  clear_has_distilled_content();
  ::dom_distiller::proto::DistilledContent* temp = distilled_content_;
  distilled_content_ = NULL;
  return temp;
}
void DomDistillerResult::set_allocated_distilled_content(::dom_distiller::proto::DistilledContent* distilled_content) {
  delete distilled_content_;
  distilled_content_ = distilled_content;
  if (distilled_content) {
    set_has_distilled_content();
  } else {
    clear_has_distilled_content();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.distilled_content)
}

// optional .dom_distiller.proto.PaginationInfo pagination_info = 3;
bool DomDistillerResult::has_pagination_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DomDistillerResult::set_has_pagination_info() {
  _has_bits_[0] |= 0x00000008u;
}
void DomDistillerResult::clear_has_pagination_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void DomDistillerResult::clear_pagination_info() {
  if (pagination_info_ != NULL) pagination_info_->::dom_distiller::proto::PaginationInfo::Clear();
  clear_has_pagination_info();
}
const ::dom_distiller::proto::PaginationInfo& DomDistillerResult::pagination_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.pagination_info)
  return pagination_info_ != NULL ? *pagination_info_
                         : *::dom_distiller::proto::PaginationInfo::internal_default_instance();
}
::dom_distiller::proto::PaginationInfo* DomDistillerResult::mutable_pagination_info() {
  set_has_pagination_info();
  if (pagination_info_ == NULL) {
    pagination_info_ = new ::dom_distiller::proto::PaginationInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.pagination_info)
  return pagination_info_;
}
::dom_distiller::proto::PaginationInfo* DomDistillerResult::release_pagination_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.pagination_info)
  clear_has_pagination_info();
  ::dom_distiller::proto::PaginationInfo* temp = pagination_info_;
  pagination_info_ = NULL;
  return temp;
}
void DomDistillerResult::set_allocated_pagination_info(::dom_distiller::proto::PaginationInfo* pagination_info) {
  delete pagination_info_;
  pagination_info_ = pagination_info;
  if (pagination_info) {
    set_has_pagination_info();
  } else {
    clear_has_pagination_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.pagination_info)
}

// optional .dom_distiller.proto.MarkupInfo markup_info = 5;
bool DomDistillerResult::has_markup_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DomDistillerResult::set_has_markup_info() {
  _has_bits_[0] |= 0x00000010u;
}
void DomDistillerResult::clear_has_markup_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void DomDistillerResult::clear_markup_info() {
  if (markup_info_ != NULL) markup_info_->::dom_distiller::proto::MarkupInfo::Clear();
  clear_has_markup_info();
}
const ::dom_distiller::proto::MarkupInfo& DomDistillerResult::markup_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.markup_info)
  return markup_info_ != NULL ? *markup_info_
                         : *::dom_distiller::proto::MarkupInfo::internal_default_instance();
}
::dom_distiller::proto::MarkupInfo* DomDistillerResult::mutable_markup_info() {
  set_has_markup_info();
  if (markup_info_ == NULL) {
    markup_info_ = new ::dom_distiller::proto::MarkupInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.markup_info)
  return markup_info_;
}
::dom_distiller::proto::MarkupInfo* DomDistillerResult::release_markup_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.markup_info)
  clear_has_markup_info();
  ::dom_distiller::proto::MarkupInfo* temp = markup_info_;
  markup_info_ = NULL;
  return temp;
}
void DomDistillerResult::set_allocated_markup_info(::dom_distiller::proto::MarkupInfo* markup_info) {
  delete markup_info_;
  markup_info_ = markup_info;
  if (markup_info) {
    set_has_markup_info();
  } else {
    clear_has_markup_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.markup_info)
}

// optional .dom_distiller.proto.TimingInfo timing_info = 6;
bool DomDistillerResult::has_timing_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DomDistillerResult::set_has_timing_info() {
  _has_bits_[0] |= 0x00000020u;
}
void DomDistillerResult::clear_has_timing_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void DomDistillerResult::clear_timing_info() {
  if (timing_info_ != NULL) timing_info_->::dom_distiller::proto::TimingInfo::Clear();
  clear_has_timing_info();
}
const ::dom_distiller::proto::TimingInfo& DomDistillerResult::timing_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.timing_info)
  return timing_info_ != NULL ? *timing_info_
                         : *::dom_distiller::proto::TimingInfo::internal_default_instance();
}
::dom_distiller::proto::TimingInfo* DomDistillerResult::mutable_timing_info() {
  set_has_timing_info();
  if (timing_info_ == NULL) {
    timing_info_ = new ::dom_distiller::proto::TimingInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.timing_info)
  return timing_info_;
}
::dom_distiller::proto::TimingInfo* DomDistillerResult::release_timing_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.timing_info)
  clear_has_timing_info();
  ::dom_distiller::proto::TimingInfo* temp = timing_info_;
  timing_info_ = NULL;
  return temp;
}
void DomDistillerResult::set_allocated_timing_info(::dom_distiller::proto::TimingInfo* timing_info) {
  delete timing_info_;
  timing_info_ = timing_info;
  if (timing_info) {
    set_has_timing_info();
  } else {
    clear_has_timing_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.timing_info)
}

// optional .dom_distiller.proto.DebugInfo debug_info = 7;
bool DomDistillerResult::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DomDistillerResult::set_has_debug_info() {
  _has_bits_[0] |= 0x00000040u;
}
void DomDistillerResult::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void DomDistillerResult::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::dom_distiller::proto::DebugInfo::Clear();
  clear_has_debug_info();
}
const ::dom_distiller::proto::DebugInfo& DomDistillerResult::debug_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.debug_info)
  return debug_info_ != NULL ? *debug_info_
                         : *::dom_distiller::proto::DebugInfo::internal_default_instance();
}
::dom_distiller::proto::DebugInfo* DomDistillerResult::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) {
    debug_info_ = new ::dom_distiller::proto::DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.debug_info)
  return debug_info_;
}
::dom_distiller::proto::DebugInfo* DomDistillerResult::release_debug_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.debug_info)
  clear_has_debug_info();
  ::dom_distiller::proto::DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
void DomDistillerResult::set_allocated_debug_info(::dom_distiller::proto::DebugInfo* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.debug_info)
}

// optional .dom_distiller.proto.StatisticsInfo statistics_info = 8;
bool DomDistillerResult::has_statistics_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DomDistillerResult::set_has_statistics_info() {
  _has_bits_[0] |= 0x00000080u;
}
void DomDistillerResult::clear_has_statistics_info() {
  _has_bits_[0] &= ~0x00000080u;
}
void DomDistillerResult::clear_statistics_info() {
  if (statistics_info_ != NULL) statistics_info_->::dom_distiller::proto::StatisticsInfo::Clear();
  clear_has_statistics_info();
}
const ::dom_distiller::proto::StatisticsInfo& DomDistillerResult::statistics_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.statistics_info)
  return statistics_info_ != NULL ? *statistics_info_
                         : *::dom_distiller::proto::StatisticsInfo::internal_default_instance();
}
::dom_distiller::proto::StatisticsInfo* DomDistillerResult::mutable_statistics_info() {
  set_has_statistics_info();
  if (statistics_info_ == NULL) {
    statistics_info_ = new ::dom_distiller::proto::StatisticsInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.statistics_info)
  return statistics_info_;
}
::dom_distiller::proto::StatisticsInfo* DomDistillerResult::release_statistics_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.statistics_info)
  clear_has_statistics_info();
  ::dom_distiller::proto::StatisticsInfo* temp = statistics_info_;
  statistics_info_ = NULL;
  return temp;
}
void DomDistillerResult::set_allocated_statistics_info(::dom_distiller::proto::StatisticsInfo* statistics_info) {
  delete statistics_info_;
  statistics_info_ = statistics_info;
  if (statistics_info) {
    set_has_statistics_info();
  } else {
    clear_has_statistics_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.statistics_info)
}

// optional string text_direction = 9;
bool DomDistillerResult::has_text_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DomDistillerResult::set_has_text_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void DomDistillerResult::clear_has_text_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void DomDistillerResult::clear_text_direction() {
  text_direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_direction();
}
const ::std::string& DomDistillerResult::text_direction() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.text_direction)
  return text_direction_.GetNoArena();
}
void DomDistillerResult::set_text_direction(const ::std::string& value) {
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerResult.text_direction)
}
#if LANG_CXX11
void DomDistillerResult::set_text_direction(::std::string&& value) {
  set_has_text_direction();
  text_direction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DomDistillerResult.text_direction)
}
#endif
void DomDistillerResult::set_text_direction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DomDistillerResult.text_direction)
}
void DomDistillerResult::set_text_direction(const char* value, size_t size) {
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DomDistillerResult.text_direction)
}
::std::string* DomDistillerResult::mutable_text_direction() {
  set_has_text_direction();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.text_direction)
  return text_direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DomDistillerResult::release_text_direction() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.text_direction)
  clear_has_text_direction();
  return text_direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DomDistillerResult::set_allocated_text_direction(::std::string* text_direction) {
  if (text_direction != NULL) {
    set_has_text_direction();
  } else {
    clear_has_text_direction();
  }
  text_direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_direction);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.text_direction)
}

// repeated .dom_distiller.proto.DomDistillerResult.ContentImage content_images = 10;
int DomDistillerResult::content_images_size() const {
  return content_images_.size();
}
void DomDistillerResult::clear_content_images() {
  content_images_.Clear();
}
const ::dom_distiller::proto::DomDistillerResult_ContentImage& DomDistillerResult::content_images(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.content_images)
  return content_images_.Get(index);
}
::dom_distiller::proto::DomDistillerResult_ContentImage* DomDistillerResult::mutable_content_images(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.content_images)
  return content_images_.Mutable(index);
}
::dom_distiller::proto::DomDistillerResult_ContentImage* DomDistillerResult::add_content_images() {
  // @@protoc_insertion_point(field_add:dom_distiller.proto.DomDistillerResult.content_images)
  return content_images_.Add();
}
::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::DomDistillerResult_ContentImage >*
DomDistillerResult::mutable_content_images() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.proto.DomDistillerResult.content_images)
  return &content_images_;
}
const ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::DomDistillerResult_ContentImage >&
DomDistillerResult::content_images() const {
  // @@protoc_insertion_point(field_list:dom_distiller.proto.DomDistillerResult.content_images)
  return content_images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DomDistillerOptions::kExtractTextOnlyFieldNumber;
const int DomDistillerOptions::kDebugLevelFieldNumber;
const int DomDistillerOptions::kOriginalUrlFieldNumber;
const int DomDistillerOptions::kPaginationAlgoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DomDistillerOptions::DomDistillerOptions()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dom_5fdistiller_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.proto.DomDistillerOptions)
}
DomDistillerOptions::DomDistillerOptions(const DomDistillerOptions& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  original_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_url()) {
    original_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_url_);
  }
  pagination_algo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pagination_algo()) {
    pagination_algo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagination_algo_);
  }
  ::memcpy(&extract_text_only_, &from.extract_text_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&debug_level_) -
    reinterpret_cast<char*>(&extract_text_only_)) + sizeof(debug_level_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.proto.DomDistillerOptions)
}

void DomDistillerOptions::SharedCtor() {
  _cached_size_ = 0;
  original_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagination_algo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&extract_text_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_level_) -
      reinterpret_cast<char*>(&extract_text_only_)) + sizeof(debug_level_));
}

DomDistillerOptions::~DomDistillerOptions() {
  // @@protoc_insertion_point(destructor:dom_distiller.proto.DomDistillerOptions)
  SharedDtor();
}

void DomDistillerOptions::SharedDtor() {
  original_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagination_algo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DomDistillerOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DomDistillerOptions& DomDistillerOptions::default_instance() {
  protobuf_dom_5fdistiller_2eproto::InitDefaults();
  return *internal_default_instance();
}

DomDistillerOptions* DomDistillerOptions::New(::google::protobuf::Arena* arena) const {
  DomDistillerOptions* n = new DomDistillerOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DomDistillerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.proto.DomDistillerOptions)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_original_url()) {
      GOOGLE_DCHECK(!original_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*original_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_pagination_algo()) {
      GOOGLE_DCHECK(!pagination_algo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pagination_algo_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&extract_text_only_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_level_) -
        reinterpret_cast<char*>(&extract_text_only_)) + sizeof(debug_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DomDistillerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.proto.DomDistillerOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool extract_text_only = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_extract_text_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extract_text_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 debug_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_debug_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debug_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string original_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pagination_algo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagination_algo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.proto.DomDistillerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.proto.DomDistillerOptions)
  return false;
#undef DO_
}

void DomDistillerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.proto.DomDistillerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool extract_text_only = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->extract_text_only(), output);
  }

  // optional int32 debug_level = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->debug_level(), output);
  }

  // optional string original_url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->original_url(), output);
  }

  // optional string pagination_algo = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pagination_algo(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.proto.DomDistillerOptions)
}

size_t DomDistillerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.proto.DomDistillerOptions)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string original_url = 3;
    if (has_original_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_url());
    }

    // optional string pagination_algo = 4;
    if (has_pagination_algo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagination_algo());
    }

    // optional bool extract_text_only = 1;
    if (has_extract_text_only()) {
      total_size += 1 + 1;
    }

    // optional int32 debug_level = 2;
    if (has_debug_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debug_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DomDistillerOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DomDistillerOptions*>(&from));
}

void DomDistillerOptions::MergeFrom(const DomDistillerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.proto.DomDistillerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_original_url();
      original_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pagination_algo();
      pagination_algo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagination_algo_);
    }
    if (cached_has_bits & 0x00000004u) {
      extract_text_only_ = from.extract_text_only_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_level_ = from.debug_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DomDistillerOptions::CopyFrom(const DomDistillerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.proto.DomDistillerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomDistillerOptions::IsInitialized() const {
  return true;
}

void DomDistillerOptions::Swap(DomDistillerOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DomDistillerOptions::InternalSwap(DomDistillerOptions* other) {
  original_url_.Swap(&other->original_url_);
  pagination_algo_.Swap(&other->pagination_algo_);
  std::swap(extract_text_only_, other->extract_text_only_);
  std::swap(debug_level_, other->debug_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DomDistillerOptions::GetTypeName() const {
  return "dom_distiller.proto.DomDistillerOptions";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DomDistillerOptions

// optional bool extract_text_only = 1;
bool DomDistillerOptions::has_extract_text_only() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DomDistillerOptions::set_has_extract_text_only() {
  _has_bits_[0] |= 0x00000004u;
}
void DomDistillerOptions::clear_has_extract_text_only() {
  _has_bits_[0] &= ~0x00000004u;
}
void DomDistillerOptions::clear_extract_text_only() {
  extract_text_only_ = false;
  clear_has_extract_text_only();
}
bool DomDistillerOptions::extract_text_only() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerOptions.extract_text_only)
  return extract_text_only_;
}
void DomDistillerOptions::set_extract_text_only(bool value) {
  set_has_extract_text_only();
  extract_text_only_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerOptions.extract_text_only)
}

// optional int32 debug_level = 2;
bool DomDistillerOptions::has_debug_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DomDistillerOptions::set_has_debug_level() {
  _has_bits_[0] |= 0x00000008u;
}
void DomDistillerOptions::clear_has_debug_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void DomDistillerOptions::clear_debug_level() {
  debug_level_ = 0;
  clear_has_debug_level();
}
::google::protobuf::int32 DomDistillerOptions::debug_level() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerOptions.debug_level)
  return debug_level_;
}
void DomDistillerOptions::set_debug_level(::google::protobuf::int32 value) {
  set_has_debug_level();
  debug_level_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerOptions.debug_level)
}

// optional string original_url = 3;
bool DomDistillerOptions::has_original_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DomDistillerOptions::set_has_original_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DomDistillerOptions::clear_has_original_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DomDistillerOptions::clear_original_url() {
  original_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_url();
}
const ::std::string& DomDistillerOptions::original_url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerOptions.original_url)
  return original_url_.GetNoArena();
}
void DomDistillerOptions::set_original_url(const ::std::string& value) {
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerOptions.original_url)
}
#if LANG_CXX11
void DomDistillerOptions::set_original_url(::std::string&& value) {
  set_has_original_url();
  original_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DomDistillerOptions.original_url)
}
#endif
void DomDistillerOptions::set_original_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DomDistillerOptions.original_url)
}
void DomDistillerOptions::set_original_url(const char* value, size_t size) {
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DomDistillerOptions.original_url)
}
::std::string* DomDistillerOptions::mutable_original_url() {
  set_has_original_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerOptions.original_url)
  return original_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DomDistillerOptions::release_original_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerOptions.original_url)
  clear_has_original_url();
  return original_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DomDistillerOptions::set_allocated_original_url(::std::string* original_url) {
  if (original_url != NULL) {
    set_has_original_url();
  } else {
    clear_has_original_url();
  }
  original_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerOptions.original_url)
}

// optional string pagination_algo = 4;
bool DomDistillerOptions::has_pagination_algo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DomDistillerOptions::set_has_pagination_algo() {
  _has_bits_[0] |= 0x00000002u;
}
void DomDistillerOptions::clear_has_pagination_algo() {
  _has_bits_[0] &= ~0x00000002u;
}
void DomDistillerOptions::clear_pagination_algo() {
  pagination_algo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pagination_algo();
}
const ::std::string& DomDistillerOptions::pagination_algo() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerOptions.pagination_algo)
  return pagination_algo_.GetNoArena();
}
void DomDistillerOptions::set_pagination_algo(const ::std::string& value) {
  set_has_pagination_algo();
  pagination_algo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerOptions.pagination_algo)
}
#if LANG_CXX11
void DomDistillerOptions::set_pagination_algo(::std::string&& value) {
  set_has_pagination_algo();
  pagination_algo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DomDistillerOptions.pagination_algo)
}
#endif
void DomDistillerOptions::set_pagination_algo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pagination_algo();
  pagination_algo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DomDistillerOptions.pagination_algo)
}
void DomDistillerOptions::set_pagination_algo(const char* value, size_t size) {
  set_has_pagination_algo();
  pagination_algo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DomDistillerOptions.pagination_algo)
}
::std::string* DomDistillerOptions::mutable_pagination_algo() {
  set_has_pagination_algo();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerOptions.pagination_algo)
  return pagination_algo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DomDistillerOptions::release_pagination_algo() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerOptions.pagination_algo)
  clear_has_pagination_algo();
  return pagination_algo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DomDistillerOptions::set_allocated_pagination_algo(::std::string* pagination_algo) {
  if (pagination_algo != NULL) {
    set_has_pagination_algo();
  } else {
    clear_has_pagination_algo();
  }
  pagination_algo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pagination_algo);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerOptions.pagination_algo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)
