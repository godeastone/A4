// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_sample.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test_sample.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace dom_distiller {
namespace test_sample {
namespace proto {
class TypeTest_MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TypeTest_Message> {
} _TypeTest_Message_default_instance_;
class TypeTestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TypeTest> {
} _TypeTest_default_instance_;
class Repeated_MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Repeated_Message> {
} _Repeated_Message_default_instance_;
class RepeatedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Repeated> {
} _Repeated_default_instance_;

namespace protobuf_test_5fsample_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _TypeTest_Message_default_instance_.Shutdown();
  _TypeTest_default_instance_.Shutdown();
  _Repeated_Message_default_instance_.Shutdown();
  _Repeated_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TypeTest_Message_default_instance_.DefaultConstruct();
  _TypeTest_default_instance_.DefaultConstruct();
  _Repeated_Message_default_instance_.DefaultConstruct();
  _Repeated_default_instance_.DefaultConstruct();
  _TypeTest_default_instance_.get_mutable()->message_value_ = const_cast< ::dom_distiller::test_sample::proto::TypeTest_Message*>(
      ::dom_distiller::test_sample::proto::TypeTest_Message::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_test_5fsample_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeTest_Message::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeTest_Message::TypeTest_Message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_5fsample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.test_sample.proto.TypeTest.Message)
}
TypeTest_Message::TypeTest_Message(const TypeTest_Message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:dom_distiller.test_sample.proto.TypeTest.Message)
}

void TypeTest_Message::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = false;
}

TypeTest_Message::~TypeTest_Message() {
  // @@protoc_insertion_point(destructor:dom_distiller.test_sample.proto.TypeTest.Message)
  SharedDtor();
}

void TypeTest_Message::SharedDtor() {
}

void TypeTest_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TypeTest_Message& TypeTest_Message::default_instance() {
  protobuf_test_5fsample_2eproto::InitDefaults();
  return *internal_default_instance();
}

TypeTest_Message* TypeTest_Message::New(::google::protobuf::Arena* arena) const {
  TypeTest_Message* n = new TypeTest_Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeTest_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.test_sample.proto.TypeTest.Message)
  dummy_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TypeTest_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.test_sample.proto.TypeTest.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dummy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dummy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.test_sample.proto.TypeTest.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.test_sample.proto.TypeTest.Message)
  return false;
#undef DO_
}

void TypeTest_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.test_sample.proto.TypeTest.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dummy(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.test_sample.proto.TypeTest.Message)
}

size_t TypeTest_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.test_sample.proto.TypeTest.Message)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional bool dummy = 1;
  if (has_dummy()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeTest_Message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TypeTest_Message*>(&from));
}

void TypeTest_Message::MergeFrom(const TypeTest_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.test_sample.proto.TypeTest.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dummy()) {
    set_dummy(from.dummy());
  }
}

void TypeTest_Message::CopyFrom(const TypeTest_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.test_sample.proto.TypeTest.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeTest_Message::IsInitialized() const {
  return true;
}

void TypeTest_Message::Swap(TypeTest_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeTest_Message::InternalSwap(TypeTest_Message* other) {
  std::swap(dummy_, other->dummy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TypeTest_Message::GetTypeName() const {
  return "dom_distiller.test_sample.proto.TypeTest.Message";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TypeTest_Message

// optional bool dummy = 1;
bool TypeTest_Message::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TypeTest_Message::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
void TypeTest_Message::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
void TypeTest_Message::clear_dummy() {
  dummy_ = false;
  clear_has_dummy();
}
bool TypeTest_Message::dummy() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.Message.dummy)
  return dummy_;
}
void TypeTest_Message::set_dummy(bool value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.Message.dummy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeTest::kFloatValueFieldNumber;
const int TypeTest::kDoubleValueFieldNumber;
const int TypeTest::kInt32ValueFieldNumber;
const int TypeTest::kBoolValueFieldNumber;
const int TypeTest::kStringValueFieldNumber;
const int TypeTest::kMessageValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeTest::TypeTest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_5fsample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.test_sample.proto.TypeTest)
}
TypeTest::TypeTest(const TypeTest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  if (from.has_message_value()) {
    message_value_ = new ::dom_distiller::test_sample::proto::TypeTest_Message(*from.message_value_);
  } else {
    message_value_ = NULL;
  }
  ::memcpy(&double_value_, &from.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&bool_value_) -
    reinterpret_cast<char*>(&double_value_)) + sizeof(bool_value_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.test_sample.proto.TypeTest)
}

void TypeTest::SharedCtor() {
  _cached_size_ = 0;
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bool_value_) -
      reinterpret_cast<char*>(&message_value_)) + sizeof(bool_value_));
}

TypeTest::~TypeTest() {
  // @@protoc_insertion_point(destructor:dom_distiller.test_sample.proto.TypeTest)
  SharedDtor();
}

void TypeTest::SharedDtor() {
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete message_value_;
  }
}

void TypeTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TypeTest& TypeTest::default_instance() {
  protobuf_test_5fsample_2eproto::InitDefaults();
  return *internal_default_instance();
}

TypeTest* TypeTest::New(::google::protobuf::Arena* arena) const {
  TypeTest* n = new TypeTest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeTest::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.test_sample.proto.TypeTest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_string_value()) {
      GOOGLE_DCHECK(!string_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*string_value_.UnsafeRawStringPointer())->clear();
    }
    if (has_message_value()) {
      GOOGLE_DCHECK(message_value_ != NULL);
      message_value_->::dom_distiller::test_sample::proto::TypeTest_Message::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bool_value_) -
        reinterpret_cast<char*>(&double_value_)) + sizeof(bool_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TypeTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.test_sample.proto.TypeTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float float_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_float_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_double_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 int32_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_int32_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bool_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bool_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.test_sample.proto.TypeTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.test_sample.proto.TypeTest)
  return false;
#undef DO_
}

void TypeTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.test_sample.proto.TypeTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float float_value = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->float_value(), output);
  }

  // optional double double_value = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->double_value(), output);
  }

  // optional int32 int32_value = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int32_value(), output);
  }

  // optional bool bool_value = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bool_value(), output);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->string_value(), output);
  }

  // optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->message_value_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.test_sample.proto.TypeTest)
}

size_t TypeTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.test_sample.proto.TypeTest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional string string_value = 5;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
    if (has_message_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->message_value_);
    }

    // optional double double_value = 2;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

    // optional float float_value = 1;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

    // optional int32 int32_value = 3;
    if (has_int32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_value());
    }

    // optional bool bool_value = 4;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeTest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TypeTest*>(&from));
}

void TypeTest::MergeFrom(const TypeTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.test_sample.proto.TypeTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_string_value();
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_message_value()->::dom_distiller::test_sample::proto::TypeTest_Message::MergeFrom(from.message_value());
    }
    if (cached_has_bits & 0x00000004u) {
      double_value_ = from.double_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      float_value_ = from.float_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      int32_value_ = from.int32_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      bool_value_ = from.bool_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TypeTest::CopyFrom(const TypeTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.test_sample.proto.TypeTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeTest::IsInitialized() const {
  return true;
}

void TypeTest::Swap(TypeTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeTest::InternalSwap(TypeTest* other) {
  string_value_.Swap(&other->string_value_);
  std::swap(message_value_, other->message_value_);
  std::swap(double_value_, other->double_value_);
  std::swap(float_value_, other->float_value_);
  std::swap(int32_value_, other->int32_value_);
  std::swap(bool_value_, other->bool_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TypeTest::GetTypeName() const {
  return "dom_distiller.test_sample.proto.TypeTest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TypeTest

// optional float float_value = 1;
bool TypeTest::has_float_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TypeTest::set_has_float_value() {
  _has_bits_[0] |= 0x00000008u;
}
void TypeTest::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void TypeTest::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
float TypeTest::float_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.float_value)
  return float_value_;
}
void TypeTest::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.float_value)
}

// optional double double_value = 2;
bool TypeTest::has_double_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TypeTest::set_has_double_value() {
  _has_bits_[0] |= 0x00000004u;
}
void TypeTest::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void TypeTest::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
double TypeTest::double_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.double_value)
  return double_value_;
}
void TypeTest::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.double_value)
}

// optional int32 int32_value = 3;
bool TypeTest::has_int32_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TypeTest::set_has_int32_value() {
  _has_bits_[0] |= 0x00000010u;
}
void TypeTest::clear_has_int32_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void TypeTest::clear_int32_value() {
  int32_value_ = 0;
  clear_has_int32_value();
}
::google::protobuf::int32 TypeTest::int32_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.int32_value)
  return int32_value_;
}
void TypeTest::set_int32_value(::google::protobuf::int32 value) {
  set_has_int32_value();
  int32_value_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.int32_value)
}

// optional bool bool_value = 4;
bool TypeTest::has_bool_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TypeTest::set_has_bool_value() {
  _has_bits_[0] |= 0x00000020u;
}
void TypeTest::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void TypeTest::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
bool TypeTest::bool_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.bool_value)
  return bool_value_;
}
void TypeTest::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.bool_value)
}

// optional string string_value = 5;
bool TypeTest::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TypeTest::set_has_string_value() {
  _has_bits_[0] |= 0x00000001u;
}
void TypeTest::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void TypeTest::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
const ::std::string& TypeTest::string_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.string_value)
  return string_value_.GetNoArena();
}
void TypeTest::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.TypeTest.string_value)
}
#if LANG_CXX11
void TypeTest::set_string_value(::std::string&& value) {
  set_has_string_value();
  string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.test_sample.proto.TypeTest.string_value)
}
#endif
void TypeTest::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.test_sample.proto.TypeTest.string_value)
}
void TypeTest::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.test_sample.proto.TypeTest.string_value)
}
::std::string* TypeTest::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.TypeTest.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TypeTest::release_string_value() {
  // @@protoc_insertion_point(field_release:dom_distiller.test_sample.proto.TypeTest.string_value)
  clear_has_string_value();
  return string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TypeTest::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.test_sample.proto.TypeTest.string_value)
}

// optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
bool TypeTest::has_message_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TypeTest::set_has_message_value() {
  _has_bits_[0] |= 0x00000002u;
}
void TypeTest::clear_has_message_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void TypeTest::clear_message_value() {
  if (message_value_ != NULL) message_value_->::dom_distiller::test_sample::proto::TypeTest_Message::Clear();
  clear_has_message_value();
}
const ::dom_distiller::test_sample::proto::TypeTest_Message& TypeTest::message_value() const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.TypeTest.message_value)
  return message_value_ != NULL ? *message_value_
                         : *::dom_distiller::test_sample::proto::TypeTest_Message::internal_default_instance();
}
::dom_distiller::test_sample::proto::TypeTest_Message* TypeTest::mutable_message_value() {
  set_has_message_value();
  if (message_value_ == NULL) {
    message_value_ = new ::dom_distiller::test_sample::proto::TypeTest_Message;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.TypeTest.message_value)
  return message_value_;
}
::dom_distiller::test_sample::proto::TypeTest_Message* TypeTest::release_message_value() {
  // @@protoc_insertion_point(field_release:dom_distiller.test_sample.proto.TypeTest.message_value)
  clear_has_message_value();
  ::dom_distiller::test_sample::proto::TypeTest_Message* temp = message_value_;
  message_value_ = NULL;
  return temp;
}
void TypeTest::set_allocated_message_value(::dom_distiller::test_sample::proto::TypeTest_Message* message_value) {
  delete message_value_;
  message_value_ = message_value;
  if (message_value) {
    set_has_message_value();
  } else {
    clear_has_message_value();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.test_sample.proto.TypeTest.message_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Repeated_Message::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Repeated_Message::Repeated_Message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_5fsample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.test_sample.proto.Repeated.Message)
}
Repeated_Message::Repeated_Message(const Repeated_Message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dummy_(from.dummy_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dom_distiller.test_sample.proto.Repeated.Message)
}

void Repeated_Message::SharedCtor() {
  _cached_size_ = 0;
}

Repeated_Message::~Repeated_Message() {
  // @@protoc_insertion_point(destructor:dom_distiller.test_sample.proto.Repeated.Message)
  SharedDtor();
}

void Repeated_Message::SharedDtor() {
}

void Repeated_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Repeated_Message& Repeated_Message::default_instance() {
  protobuf_test_5fsample_2eproto::InitDefaults();
  return *internal_default_instance();
}

Repeated_Message* Repeated_Message::New(::google::protobuf::Arena* arena) const {
  Repeated_Message* n = new Repeated_Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Repeated_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.test_sample.proto.Repeated.Message)
  dummy_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Repeated_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.test_sample.proto.Repeated.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool dummy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8u, input, this->mutable_dummy())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_dummy())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.test_sample.proto.Repeated.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.test_sample.proto.Repeated.Message)
  return false;
#undef DO_
}

void Repeated_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.test_sample.proto.Repeated.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool dummy = 1;
  for (int i = 0, n = this->dummy_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->dummy(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.test_sample.proto.Repeated.Message)
}

size_t Repeated_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.test_sample.proto.Repeated.Message)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated bool dummy = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dummy_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dummy_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Repeated_Message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Repeated_Message*>(&from));
}

void Repeated_Message::MergeFrom(const Repeated_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.test_sample.proto.Repeated.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dummy_.MergeFrom(from.dummy_);
}

void Repeated_Message::CopyFrom(const Repeated_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.test_sample.proto.Repeated.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repeated_Message::IsInitialized() const {
  return true;
}

void Repeated_Message::Swap(Repeated_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Repeated_Message::InternalSwap(Repeated_Message* other) {
  dummy_.InternalSwap(&other->dummy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Repeated_Message::GetTypeName() const {
  return "dom_distiller.test_sample.proto.Repeated.Message";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Repeated_Message

// repeated bool dummy = 1;
int Repeated_Message::dummy_size() const {
  return dummy_.size();
}
void Repeated_Message::clear_dummy() {
  dummy_.Clear();
}
bool Repeated_Message::dummy(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.Message.dummy)
  return dummy_.Get(index);
}
void Repeated_Message::set_dummy(int index, bool value) {
  dummy_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.Message.dummy)
}
void Repeated_Message::add_dummy(bool value) {
  dummy_.Add(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.Message.dummy)
}
const ::google::protobuf::RepeatedField< bool >&
Repeated_Message::dummy() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.Message.dummy)
  return dummy_;
}
::google::protobuf::RepeatedField< bool >*
Repeated_Message::mutable_dummy() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.Message.dummy)
  return &dummy_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Repeated::kFloatValueFieldNumber;
const int Repeated::kDoubleValueFieldNumber;
const int Repeated::kInt32ValueFieldNumber;
const int Repeated::kBoolValueFieldNumber;
const int Repeated::kStringValueFieldNumber;
const int Repeated::kMessageValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Repeated::Repeated()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_5fsample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.test_sample.proto.Repeated)
}
Repeated::Repeated(const Repeated& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      float_value_(from.float_value_),
      double_value_(from.double_value_),
      int32_value_(from.int32_value_),
      bool_value_(from.bool_value_),
      string_value_(from.string_value_),
      message_value_(from.message_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dom_distiller.test_sample.proto.Repeated)
}

void Repeated::SharedCtor() {
  _cached_size_ = 0;
}

Repeated::~Repeated() {
  // @@protoc_insertion_point(destructor:dom_distiller.test_sample.proto.Repeated)
  SharedDtor();
}

void Repeated::SharedDtor() {
}

void Repeated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Repeated& Repeated::default_instance() {
  protobuf_test_5fsample_2eproto::InitDefaults();
  return *internal_default_instance();
}

Repeated* Repeated::New(::google::protobuf::Arena* arena) const {
  Repeated* n = new Repeated;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Repeated::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.test_sample.proto.Repeated)
  float_value_.Clear();
  double_value_.Clear();
  int32_value_.Clear();
  bool_value_.Clear();
  string_value_.Clear();
  message_value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Repeated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.test_sample.proto.Repeated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float float_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_float_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double double_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_double_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 int32_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_int32_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool bool_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32u, input, this->mutable_bool_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bool_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string string_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_message_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.test_sample.proto.Repeated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.test_sample.proto.Repeated)
  return false;
#undef DO_
}

void Repeated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.test_sample.proto.Repeated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float float_value = 1;
  for (int i = 0, n = this->float_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->float_value(i), output);
  }

  // repeated double double_value = 2;
  for (int i = 0, n = this->double_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->double_value(i), output);
  }

  // repeated int32 int32_value = 3;
  for (int i = 0, n = this->int32_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->int32_value(i), output);
  }

  // repeated bool bool_value = 4;
  for (int i = 0, n = this->bool_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->bool_value(i), output);
  }

  // repeated string string_value = 5;
  for (int i = 0, n = this->string_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->string_value(i), output);
  }

  // repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->message_value_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->message_value(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.test_sample.proto.Repeated)
}

size_t Repeated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.test_sample.proto.Repeated)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated float float_value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->float_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->float_value_size());
    total_size += data_size;
  }

  // repeated double double_value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->double_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->double_value_size());
    total_size += data_size;
  }

  // repeated int32 int32_value = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->int32_value_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->int32_value_size());
    total_size += data_size;
  }

  // repeated bool bool_value = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->bool_value_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bool_value_size());
    total_size += data_size;
  }

  // repeated string string_value = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_value_size());
  for (int i = 0, n = this->string_value_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_value(i));
  }

  // repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->message_value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message_value(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Repeated::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Repeated*>(&from));
}

void Repeated::MergeFrom(const Repeated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.test_sample.proto.Repeated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_value_.MergeFrom(from.float_value_);
  double_value_.MergeFrom(from.double_value_);
  int32_value_.MergeFrom(from.int32_value_);
  bool_value_.MergeFrom(from.bool_value_);
  string_value_.MergeFrom(from.string_value_);
  message_value_.MergeFrom(from.message_value_);
}

void Repeated::CopyFrom(const Repeated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.test_sample.proto.Repeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repeated::IsInitialized() const {
  return true;
}

void Repeated::Swap(Repeated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Repeated::InternalSwap(Repeated* other) {
  float_value_.InternalSwap(&other->float_value_);
  double_value_.InternalSwap(&other->double_value_);
  int32_value_.InternalSwap(&other->int32_value_);
  bool_value_.InternalSwap(&other->bool_value_);
  string_value_.InternalSwap(&other->string_value_);
  message_value_.InternalSwap(&other->message_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Repeated::GetTypeName() const {
  return "dom_distiller.test_sample.proto.Repeated";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Repeated

// repeated float float_value = 1;
int Repeated::float_value_size() const {
  return float_value_.size();
}
void Repeated::clear_float_value() {
  float_value_.Clear();
}
float Repeated::float_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.float_value)
  return float_value_.Get(index);
}
void Repeated::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.float_value)
}
void Repeated::add_float_value(float value) {
  float_value_.Add(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.float_value)
}
const ::google::protobuf::RepeatedField< float >&
Repeated::float_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.float_value)
  return float_value_;
}
::google::protobuf::RepeatedField< float >*
Repeated::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.float_value)
  return &float_value_;
}

// repeated double double_value = 2;
int Repeated::double_value_size() const {
  return double_value_.size();
}
void Repeated::clear_double_value() {
  double_value_.Clear();
}
double Repeated::double_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.double_value)
  return double_value_.Get(index);
}
void Repeated::set_double_value(int index, double value) {
  double_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.double_value)
}
void Repeated::add_double_value(double value) {
  double_value_.Add(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.double_value)
}
const ::google::protobuf::RepeatedField< double >&
Repeated::double_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.double_value)
  return double_value_;
}
::google::protobuf::RepeatedField< double >*
Repeated::mutable_double_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.double_value)
  return &double_value_;
}

// repeated int32 int32_value = 3;
int Repeated::int32_value_size() const {
  return int32_value_.size();
}
void Repeated::clear_int32_value() {
  int32_value_.Clear();
}
::google::protobuf::int32 Repeated::int32_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.int32_value)
  return int32_value_.Get(index);
}
void Repeated::set_int32_value(int index, ::google::protobuf::int32 value) {
  int32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.int32_value)
}
void Repeated::add_int32_value(::google::protobuf::int32 value) {
  int32_value_.Add(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.int32_value)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Repeated::int32_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.int32_value)
  return int32_value_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Repeated::mutable_int32_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.int32_value)
  return &int32_value_;
}

// repeated bool bool_value = 4;
int Repeated::bool_value_size() const {
  return bool_value_.size();
}
void Repeated::clear_bool_value() {
  bool_value_.Clear();
}
bool Repeated::bool_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.bool_value)
  return bool_value_.Get(index);
}
void Repeated::set_bool_value(int index, bool value) {
  bool_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.bool_value)
}
void Repeated::add_bool_value(bool value) {
  bool_value_.Add(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.bool_value)
}
const ::google::protobuf::RepeatedField< bool >&
Repeated::bool_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.bool_value)
  return bool_value_;
}
::google::protobuf::RepeatedField< bool >*
Repeated::mutable_bool_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.bool_value)
  return &bool_value_;
}

// repeated string string_value = 5;
int Repeated::string_value_size() const {
  return string_value_.size();
}
void Repeated::clear_string_value() {
  string_value_.Clear();
}
const ::std::string& Repeated::string_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.string_value)
  return string_value_.Get(index);
}
::std::string* Repeated::mutable_string_value(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.Repeated.string_value)
  return string_value_.Mutable(index);
}
void Repeated::set_string_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.string_value)
  string_value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Repeated::set_string_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dom_distiller.test_sample.proto.Repeated.string_value)
  string_value_.Mutable(index)->assign(std::move(value));
}
#endif
void Repeated::set_string_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dom_distiller.test_sample.proto.Repeated.string_value)
}
void Repeated::set_string_value(int index, const char* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.test_sample.proto.Repeated.string_value)
}
::std::string* Repeated::add_string_value() {
  // @@protoc_insertion_point(field_add_mutable:dom_distiller.test_sample.proto.Repeated.string_value)
  return string_value_.Add();
}
void Repeated::add_string_value(const ::std::string& value) {
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.string_value)
}
#if LANG_CXX11
void Repeated::add_string_value(::std::string&& value) {
  string_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.string_value)
}
#endif
void Repeated::add_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dom_distiller.test_sample.proto.Repeated.string_value)
}
void Repeated::add_string_value(const char* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dom_distiller.test_sample.proto.Repeated.string_value)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Repeated::string_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.string_value)
  return string_value_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Repeated::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.string_value)
  return &string_value_;
}

// repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
int Repeated::message_value_size() const {
  return message_value_.size();
}
void Repeated::clear_message_value() {
  message_value_.Clear();
}
const ::dom_distiller::test_sample::proto::Repeated_Message& Repeated::message_value(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.test_sample.proto.Repeated.message_value)
  return message_value_.Get(index);
}
::dom_distiller::test_sample::proto::Repeated_Message* Repeated::mutable_message_value(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.test_sample.proto.Repeated.message_value)
  return message_value_.Mutable(index);
}
::dom_distiller::test_sample::proto::Repeated_Message* Repeated::add_message_value() {
  // @@protoc_insertion_point(field_add:dom_distiller.test_sample.proto.Repeated.message_value)
  return message_value_.Add();
}
::google::protobuf::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message >*
Repeated::mutable_message_value() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.test_sample.proto.Repeated.message_value)
  return &message_value_;
}
const ::google::protobuf::RepeatedPtrField< ::dom_distiller::test_sample::proto::Repeated_Message >&
Repeated::message_value() const {
  // @@protoc_insertion_point(field_list:dom_distiller.test_sample.proto.Repeated.message_value)
  return message_value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace test_sample
}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)
