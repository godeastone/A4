// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dom_distiller.proto

#ifndef PROTOBUF_dom_5fdistiller_2eproto__INCLUDED
#define PROTOBUF_dom_5fdistiller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace dom_distiller {
namespace proto {
class DebugInfo;
class DebugInfoDefaultTypeInternal;
extern DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
class DistilledContent;
class DistilledContentDefaultTypeInternal;
extern DistilledContentDefaultTypeInternal _DistilledContent_default_instance_;
class DomDistillerOptions;
class DomDistillerOptionsDefaultTypeInternal;
extern DomDistillerOptionsDefaultTypeInternal _DomDistillerOptions_default_instance_;
class DomDistillerResult;
class DomDistillerResultDefaultTypeInternal;
extern DomDistillerResultDefaultTypeInternal _DomDistillerResult_default_instance_;
class DomDistillerResult_ContentImage;
class DomDistillerResult_ContentImageDefaultTypeInternal;
extern DomDistillerResult_ContentImageDefaultTypeInternal _DomDistillerResult_ContentImage_default_instance_;
class MarkupArticle;
class MarkupArticleDefaultTypeInternal;
extern MarkupArticleDefaultTypeInternal _MarkupArticle_default_instance_;
class MarkupImage;
class MarkupImageDefaultTypeInternal;
extern MarkupImageDefaultTypeInternal _MarkupImage_default_instance_;
class MarkupInfo;
class MarkupInfoDefaultTypeInternal;
extern MarkupInfoDefaultTypeInternal _MarkupInfo_default_instance_;
class PaginationInfo;
class PaginationInfoDefaultTypeInternal;
extern PaginationInfoDefaultTypeInternal _PaginationInfo_default_instance_;
class StatisticsInfo;
class StatisticsInfoDefaultTypeInternal;
extern StatisticsInfoDefaultTypeInternal _StatisticsInfo_default_instance_;
class TimingEntry;
class TimingEntryDefaultTypeInternal;
extern TimingEntryDefaultTypeInternal _TimingEntry_default_instance_;
class TimingInfo;
class TimingInfoDefaultTypeInternal;
extern TimingInfoDefaultTypeInternal _TimingInfo_default_instance_;
}  // namespace proto
}  // namespace dom_distiller

namespace dom_distiller {
namespace proto {

namespace protobuf_dom_5fdistiller_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dom_5fdistiller_2eproto

// ===================================================================

class DistilledContent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.DistilledContent) */ {
 public:
  DistilledContent();
  virtual ~DistilledContent();

  DistilledContent(const DistilledContent& from);

  inline DistilledContent& operator=(const DistilledContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DistilledContent& default_instance();

  static inline const DistilledContent* internal_default_instance() {
    return reinterpret_cast<const DistilledContent*>(
               &_DistilledContent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DistilledContent* other);

  // implements Message ----------------------------------------------

  inline DistilledContent* New() const PROTOBUF_FINAL { return New(NULL); }

  DistilledContent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DistilledContent& from);
  void MergeFrom(const DistilledContent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledContent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string html = 1;
  bool has_html() const;
  void clear_html();
  static const int kHtmlFieldNumber = 1;
  const ::std::string& html() const;
  void set_html(const ::std::string& value);
  #if LANG_CXX11
  void set_html(::std::string&& value);
  #endif
  void set_html(const char* value);
  void set_html(const char* value, size_t size);
  ::std::string* mutable_html();
  ::std::string* release_html();
  void set_allocated_html(::std::string* html);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.DistilledContent)
 private:
  void set_has_html();
  void clear_has_html();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr html_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PaginationInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.PaginationInfo) */ {
 public:
  PaginationInfo();
  virtual ~PaginationInfo();

  PaginationInfo(const PaginationInfo& from);

  inline PaginationInfo& operator=(const PaginationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PaginationInfo& default_instance();

  static inline const PaginationInfo* internal_default_instance() {
    return reinterpret_cast<const PaginationInfo*>(
               &_PaginationInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PaginationInfo* other);

  // implements Message ----------------------------------------------

  inline PaginationInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PaginationInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PaginationInfo& from);
  void MergeFrom(const PaginationInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaginationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string next_page = 1;
  bool has_next_page() const;
  void clear_next_page();
  static const int kNextPageFieldNumber = 1;
  const ::std::string& next_page() const;
  void set_next_page(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page(::std::string&& value);
  #endif
  void set_next_page(const char* value);
  void set_next_page(const char* value, size_t size);
  ::std::string* mutable_next_page();
  ::std::string* release_next_page();
  void set_allocated_next_page(::std::string* next_page);

  // optional string prev_page = 2;
  bool has_prev_page() const;
  void clear_prev_page();
  static const int kPrevPageFieldNumber = 2;
  const ::std::string& prev_page() const;
  void set_prev_page(const ::std::string& value);
  #if LANG_CXX11
  void set_prev_page(::std::string&& value);
  #endif
  void set_prev_page(const char* value);
  void set_prev_page(const char* value, size_t size);
  ::std::string* mutable_prev_page();
  ::std::string* release_prev_page();
  void set_allocated_prev_page(::std::string* prev_page);

  // optional string canonical_page = 3;
  bool has_canonical_page() const;
  void clear_canonical_page();
  static const int kCanonicalPageFieldNumber = 3;
  const ::std::string& canonical_page() const;
  void set_canonical_page(const ::std::string& value);
  #if LANG_CXX11
  void set_canonical_page(::std::string&& value);
  #endif
  void set_canonical_page(const char* value);
  void set_canonical_page(const char* value, size_t size);
  ::std::string* mutable_canonical_page();
  ::std::string* release_canonical_page();
  void set_allocated_canonical_page(::std::string* canonical_page);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.PaginationInfo)
 private:
  void set_has_next_page();
  void clear_has_next_page();
  void set_has_prev_page();
  void clear_has_prev_page();
  void set_has_canonical_page();
  void clear_has_canonical_page();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr next_page_;
  ::google::protobuf::internal::ArenaStringPtr prev_page_;
  ::google::protobuf::internal::ArenaStringPtr canonical_page_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarkupArticle : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.MarkupArticle) */ {
 public:
  MarkupArticle();
  virtual ~MarkupArticle();

  MarkupArticle(const MarkupArticle& from);

  inline MarkupArticle& operator=(const MarkupArticle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MarkupArticle& default_instance();

  static inline const MarkupArticle* internal_default_instance() {
    return reinterpret_cast<const MarkupArticle*>(
               &_MarkupArticle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MarkupArticle* other);

  // implements Message ----------------------------------------------

  inline MarkupArticle* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkupArticle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MarkupArticle& from);
  void MergeFrom(const MarkupArticle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MarkupArticle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string authors = 5;
  int authors_size() const;
  void clear_authors();
  static const int kAuthorsFieldNumber = 5;
  const ::std::string& authors(int index) const;
  ::std::string* mutable_authors(int index);
  void set_authors(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_authors(int index, ::std::string&& value);
  #endif
  void set_authors(int index, const char* value);
  void set_authors(int index, const char* value, size_t size);
  ::std::string* add_authors();
  void add_authors(const ::std::string& value);
  #if LANG_CXX11
  void add_authors(::std::string&& value);
  #endif
  void add_authors(const char* value);
  void add_authors(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& authors() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_authors();

  // optional string published_time = 1;
  bool has_published_time() const;
  void clear_published_time();
  static const int kPublishedTimeFieldNumber = 1;
  const ::std::string& published_time() const;
  void set_published_time(const ::std::string& value);
  #if LANG_CXX11
  void set_published_time(::std::string&& value);
  #endif
  void set_published_time(const char* value);
  void set_published_time(const char* value, size_t size);
  ::std::string* mutable_published_time();
  ::std::string* release_published_time();
  void set_allocated_published_time(::std::string* published_time);

  // optional string modified_time = 2;
  bool has_modified_time() const;
  void clear_modified_time();
  static const int kModifiedTimeFieldNumber = 2;
  const ::std::string& modified_time() const;
  void set_modified_time(const ::std::string& value);
  #if LANG_CXX11
  void set_modified_time(::std::string&& value);
  #endif
  void set_modified_time(const char* value);
  void set_modified_time(const char* value, size_t size);
  ::std::string* mutable_modified_time();
  ::std::string* release_modified_time();
  void set_allocated_modified_time(::std::string* modified_time);

  // optional string expiration_time = 3;
  bool has_expiration_time() const;
  void clear_expiration_time();
  static const int kExpirationTimeFieldNumber = 3;
  const ::std::string& expiration_time() const;
  void set_expiration_time(const ::std::string& value);
  #if LANG_CXX11
  void set_expiration_time(::std::string&& value);
  #endif
  void set_expiration_time(const char* value);
  void set_expiration_time(const char* value, size_t size);
  ::std::string* mutable_expiration_time();
  ::std::string* release_expiration_time();
  void set_allocated_expiration_time(::std::string* expiration_time);

  // optional string section = 4;
  bool has_section() const;
  void clear_section();
  static const int kSectionFieldNumber = 4;
  const ::std::string& section() const;
  void set_section(const ::std::string& value);
  #if LANG_CXX11
  void set_section(::std::string&& value);
  #endif
  void set_section(const char* value);
  void set_section(const char* value, size_t size);
  ::std::string* mutable_section();
  ::std::string* release_section();
  void set_allocated_section(::std::string* section);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.MarkupArticle)
 private:
  void set_has_published_time();
  void clear_has_published_time();
  void set_has_modified_time();
  void clear_has_modified_time();
  void set_has_expiration_time();
  void clear_has_expiration_time();
  void set_has_section();
  void clear_has_section();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> authors_;
  ::google::protobuf::internal::ArenaStringPtr published_time_;
  ::google::protobuf::internal::ArenaStringPtr modified_time_;
  ::google::protobuf::internal::ArenaStringPtr expiration_time_;
  ::google::protobuf::internal::ArenaStringPtr section_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarkupImage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.MarkupImage) */ {
 public:
  MarkupImage();
  virtual ~MarkupImage();

  MarkupImage(const MarkupImage& from);

  inline MarkupImage& operator=(const MarkupImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MarkupImage& default_instance();

  static inline const MarkupImage* internal_default_instance() {
    return reinterpret_cast<const MarkupImage*>(
               &_MarkupImage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MarkupImage* other);

  // implements Message ----------------------------------------------

  inline MarkupImage* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkupImage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MarkupImage& from);
  void MergeFrom(const MarkupImage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MarkupImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string secure_url = 2;
  bool has_secure_url() const;
  void clear_secure_url();
  static const int kSecureUrlFieldNumber = 2;
  const ::std::string& secure_url() const;
  void set_secure_url(const ::std::string& value);
  #if LANG_CXX11
  void set_secure_url(::std::string&& value);
  #endif
  void set_secure_url(const char* value);
  void set_secure_url(const char* value, size_t size);
  ::std::string* mutable_secure_url();
  ::std::string* release_secure_url();
  void set_allocated_secure_url(::std::string* secure_url);

  // optional string type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string caption = 4;
  bool has_caption() const;
  void clear_caption();
  static const int kCaptionFieldNumber = 4;
  const ::std::string& caption() const;
  void set_caption(const ::std::string& value);
  #if LANG_CXX11
  void set_caption(::std::string&& value);
  #endif
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  ::std::string* mutable_caption();
  ::std::string* release_caption();
  void set_allocated_caption(::std::string* caption);

  // optional int32 width = 5;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 6;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.MarkupImage)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_secure_url();
  void clear_has_secure_url();
  void set_has_type();
  void clear_has_type();
  void set_has_caption();
  void clear_has_caption();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr secure_url_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr caption_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarkupInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.MarkupInfo) */ {
 public:
  MarkupInfo();
  virtual ~MarkupInfo();

  MarkupInfo(const MarkupInfo& from);

  inline MarkupInfo& operator=(const MarkupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MarkupInfo& default_instance();

  static inline const MarkupInfo* internal_default_instance() {
    return reinterpret_cast<const MarkupInfo*>(
               &_MarkupInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MarkupInfo* other);

  // implements Message ----------------------------------------------

  inline MarkupInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkupInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MarkupInfo& from);
  void MergeFrom(const MarkupInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MarkupInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dom_distiller.proto.MarkupImage images = 9;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 9;
  const ::dom_distiller::proto::MarkupImage& images(int index) const;
  ::dom_distiller::proto::MarkupImage* mutable_images(int index);
  ::dom_distiller::proto::MarkupImage* add_images();
  ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::MarkupImage >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::MarkupImage >&
      images() const;

  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string publisher = 5;
  bool has_publisher() const;
  void clear_publisher();
  static const int kPublisherFieldNumber = 5;
  const ::std::string& publisher() const;
  void set_publisher(const ::std::string& value);
  #if LANG_CXX11
  void set_publisher(::std::string&& value);
  #endif
  void set_publisher(const char* value);
  void set_publisher(const char* value, size_t size);
  ::std::string* mutable_publisher();
  ::std::string* release_publisher();
  void set_allocated_publisher(::std::string* publisher);

  // optional string copyright = 6;
  bool has_copyright() const;
  void clear_copyright();
  static const int kCopyrightFieldNumber = 6;
  const ::std::string& copyright() const;
  void set_copyright(const ::std::string& value);
  #if LANG_CXX11
  void set_copyright(::std::string&& value);
  #endif
  void set_copyright(const char* value);
  void set_copyright(const char* value, size_t size);
  ::std::string* mutable_copyright();
  ::std::string* release_copyright();
  void set_allocated_copyright(::std::string* copyright);

  // optional string author = 7;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 7;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // optional .dom_distiller.proto.MarkupArticle article = 8;
  bool has_article() const;
  void clear_article();
  static const int kArticleFieldNumber = 8;
  const ::dom_distiller::proto::MarkupArticle& article() const;
  ::dom_distiller::proto::MarkupArticle* mutable_article();
  ::dom_distiller::proto::MarkupArticle* release_article();
  void set_allocated_article(::dom_distiller::proto::MarkupArticle* article);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.MarkupInfo)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_type();
  void clear_has_type();
  void set_has_url();
  void clear_has_url();
  void set_has_description();
  void clear_has_description();
  void set_has_publisher();
  void clear_has_publisher();
  void set_has_copyright();
  void clear_has_copyright();
  void set_has_author();
  void clear_has_author();
  void set_has_article();
  void clear_has_article();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::MarkupImage > images_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr publisher_;
  ::google::protobuf::internal::ArenaStringPtr copyright_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::dom_distiller::proto::MarkupArticle* article_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimingEntry : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.TimingEntry) */ {
 public:
  TimingEntry();
  virtual ~TimingEntry();

  TimingEntry(const TimingEntry& from);

  inline TimingEntry& operator=(const TimingEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TimingEntry& default_instance();

  static inline const TimingEntry* internal_default_instance() {
    return reinterpret_cast<const TimingEntry*>(
               &_TimingEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(TimingEntry* other);

  // implements Message ----------------------------------------------

  inline TimingEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  TimingEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TimingEntry& from);
  void MergeFrom(const TimingEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimingEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.TimingEntry)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double time_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimingInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.TimingInfo) */ {
 public:
  TimingInfo();
  virtual ~TimingInfo();

  TimingInfo(const TimingInfo& from);

  inline TimingInfo& operator=(const TimingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TimingInfo& default_instance();

  static inline const TimingInfo* internal_default_instance() {
    return reinterpret_cast<const TimingInfo*>(
               &_TimingInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(TimingInfo* other);

  // implements Message ----------------------------------------------

  inline TimingInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TimingInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TimingInfo& from);
  void MergeFrom(const TimingInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dom_distiller.proto.TimingEntry other_times = 6;
  int other_times_size() const;
  void clear_other_times();
  static const int kOtherTimesFieldNumber = 6;
  const ::dom_distiller::proto::TimingEntry& other_times(int index) const;
  ::dom_distiller::proto::TimingEntry* mutable_other_times(int index);
  ::dom_distiller::proto::TimingEntry* add_other_times();
  ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::TimingEntry >*
      mutable_other_times();
  const ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::TimingEntry >&
      other_times() const;

  // optional double markup_parsing_time = 1;
  bool has_markup_parsing_time() const;
  void clear_markup_parsing_time();
  static const int kMarkupParsingTimeFieldNumber = 1;
  double markup_parsing_time() const;
  void set_markup_parsing_time(double value);

  // optional double document_construction_time = 2;
  bool has_document_construction_time() const;
  void clear_document_construction_time();
  static const int kDocumentConstructionTimeFieldNumber = 2;
  double document_construction_time() const;
  void set_document_construction_time(double value);

  // optional double article_processing_time = 3;
  bool has_article_processing_time() const;
  void clear_article_processing_time();
  static const int kArticleProcessingTimeFieldNumber = 3;
  double article_processing_time() const;
  void set_article_processing_time(double value);

  // optional double formatting_time = 4;
  bool has_formatting_time() const;
  void clear_formatting_time();
  static const int kFormattingTimeFieldNumber = 4;
  double formatting_time() const;
  void set_formatting_time(double value);

  // optional double total_time = 5;
  bool has_total_time() const;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 5;
  double total_time() const;
  void set_total_time(double value);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.TimingInfo)
 private:
  void set_has_markup_parsing_time();
  void clear_has_markup_parsing_time();
  void set_has_document_construction_time();
  void clear_has_document_construction_time();
  void set_has_article_processing_time();
  void clear_has_article_processing_time();
  void set_has_formatting_time();
  void clear_has_formatting_time();
  void set_has_total_time();
  void clear_has_total_time();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::TimingEntry > other_times_;
  double markup_parsing_time_;
  double document_construction_time_;
  double article_processing_time_;
  double formatting_time_;
  double total_time_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DebugInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.DebugInfo) */ {
 public:
  DebugInfo();
  virtual ~DebugInfo();

  DebugInfo(const DebugInfo& from);

  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DebugInfo& default_instance();

  static inline const DebugInfo* internal_default_instance() {
    return reinterpret_cast<const DebugInfo*>(
               &_DebugInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DebugInfo* other);

  // implements Message ----------------------------------------------

  inline DebugInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DebugInfo& from);
  void MergeFrom(const DebugInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string log = 1;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 1;
  const ::std::string& log() const;
  void set_log(const ::std::string& value);
  #if LANG_CXX11
  void set_log(::std::string&& value);
  #endif
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  ::std::string* mutable_log();
  ::std::string* release_log();
  void set_allocated_log(::std::string* log);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.DebugInfo)
 private:
  void set_has_log();
  void clear_has_log();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr log_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatisticsInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.StatisticsInfo) */ {
 public:
  StatisticsInfo();
  virtual ~StatisticsInfo();

  StatisticsInfo(const StatisticsInfo& from);

  inline StatisticsInfo& operator=(const StatisticsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StatisticsInfo& default_instance();

  static inline const StatisticsInfo* internal_default_instance() {
    return reinterpret_cast<const StatisticsInfo*>(
               &_StatisticsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(StatisticsInfo* other);

  // implements Message ----------------------------------------------

  inline StatisticsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  StatisticsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StatisticsInfo& from);
  void MergeFrom(const StatisticsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatisticsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 word_count = 1;
  bool has_word_count() const;
  void clear_word_count();
  static const int kWordCountFieldNumber = 1;
  ::google::protobuf::int32 word_count() const;
  void set_word_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.StatisticsInfo)
 private:
  void set_has_word_count();
  void clear_has_word_count();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 word_count_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DomDistillerResult_ContentImage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.DomDistillerResult.ContentImage) */ {
 public:
  DomDistillerResult_ContentImage();
  virtual ~DomDistillerResult_ContentImage();

  DomDistillerResult_ContentImage(const DomDistillerResult_ContentImage& from);

  inline DomDistillerResult_ContentImage& operator=(const DomDistillerResult_ContentImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DomDistillerResult_ContentImage& default_instance();

  static inline const DomDistillerResult_ContentImage* internal_default_instance() {
    return reinterpret_cast<const DomDistillerResult_ContentImage*>(
               &_DomDistillerResult_ContentImage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DomDistillerResult_ContentImage* other);

  // implements Message ----------------------------------------------

  inline DomDistillerResult_ContentImage* New() const PROTOBUF_FINAL { return New(NULL); }

  DomDistillerResult_ContentImage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DomDistillerResult_ContentImage& from);
  void MergeFrom(const DomDistillerResult_ContentImage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DomDistillerResult_ContentImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.DomDistillerResult.ContentImage)
 private:
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DomDistillerResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.DomDistillerResult) */ {
 public:
  DomDistillerResult();
  virtual ~DomDistillerResult();

  DomDistillerResult(const DomDistillerResult& from);

  inline DomDistillerResult& operator=(const DomDistillerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DomDistillerResult& default_instance();

  static inline const DomDistillerResult* internal_default_instance() {
    return reinterpret_cast<const DomDistillerResult*>(
               &_DomDistillerResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DomDistillerResult* other);

  // implements Message ----------------------------------------------

  inline DomDistillerResult* New() const PROTOBUF_FINAL { return New(NULL); }

  DomDistillerResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DomDistillerResult& from);
  void MergeFrom(const DomDistillerResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DomDistillerResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DomDistillerResult_ContentImage ContentImage;

  // accessors -------------------------------------------------------

  // repeated .dom_distiller.proto.DomDistillerResult.ContentImage content_images = 10;
  int content_images_size() const;
  void clear_content_images();
  static const int kContentImagesFieldNumber = 10;
  const ::dom_distiller::proto::DomDistillerResult_ContentImage& content_images(int index) const;
  ::dom_distiller::proto::DomDistillerResult_ContentImage* mutable_content_images(int index);
  ::dom_distiller::proto::DomDistillerResult_ContentImage* add_content_images();
  ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::DomDistillerResult_ContentImage >*
      mutable_content_images();
  const ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::DomDistillerResult_ContentImage >&
      content_images() const;

  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string text_direction = 9;
  bool has_text_direction() const;
  void clear_text_direction();
  static const int kTextDirectionFieldNumber = 9;
  const ::std::string& text_direction() const;
  void set_text_direction(const ::std::string& value);
  #if LANG_CXX11
  void set_text_direction(::std::string&& value);
  #endif
  void set_text_direction(const char* value);
  void set_text_direction(const char* value, size_t size);
  ::std::string* mutable_text_direction();
  ::std::string* release_text_direction();
  void set_allocated_text_direction(::std::string* text_direction);

  // optional .dom_distiller.proto.DistilledContent distilled_content = 2;
  bool has_distilled_content() const;
  void clear_distilled_content();
  static const int kDistilledContentFieldNumber = 2;
  const ::dom_distiller::proto::DistilledContent& distilled_content() const;
  ::dom_distiller::proto::DistilledContent* mutable_distilled_content();
  ::dom_distiller::proto::DistilledContent* release_distilled_content();
  void set_allocated_distilled_content(::dom_distiller::proto::DistilledContent* distilled_content);

  // optional .dom_distiller.proto.PaginationInfo pagination_info = 3;
  bool has_pagination_info() const;
  void clear_pagination_info();
  static const int kPaginationInfoFieldNumber = 3;
  const ::dom_distiller::proto::PaginationInfo& pagination_info() const;
  ::dom_distiller::proto::PaginationInfo* mutable_pagination_info();
  ::dom_distiller::proto::PaginationInfo* release_pagination_info();
  void set_allocated_pagination_info(::dom_distiller::proto::PaginationInfo* pagination_info);

  // optional .dom_distiller.proto.MarkupInfo markup_info = 5;
  bool has_markup_info() const;
  void clear_markup_info();
  static const int kMarkupInfoFieldNumber = 5;
  const ::dom_distiller::proto::MarkupInfo& markup_info() const;
  ::dom_distiller::proto::MarkupInfo* mutable_markup_info();
  ::dom_distiller::proto::MarkupInfo* release_markup_info();
  void set_allocated_markup_info(::dom_distiller::proto::MarkupInfo* markup_info);

  // optional .dom_distiller.proto.TimingInfo timing_info = 6;
  bool has_timing_info() const;
  void clear_timing_info();
  static const int kTimingInfoFieldNumber = 6;
  const ::dom_distiller::proto::TimingInfo& timing_info() const;
  ::dom_distiller::proto::TimingInfo* mutable_timing_info();
  ::dom_distiller::proto::TimingInfo* release_timing_info();
  void set_allocated_timing_info(::dom_distiller::proto::TimingInfo* timing_info);

  // optional .dom_distiller.proto.DebugInfo debug_info = 7;
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  const ::dom_distiller::proto::DebugInfo& debug_info() const;
  ::dom_distiller::proto::DebugInfo* mutable_debug_info();
  ::dom_distiller::proto::DebugInfo* release_debug_info();
  void set_allocated_debug_info(::dom_distiller::proto::DebugInfo* debug_info);

  // optional .dom_distiller.proto.StatisticsInfo statistics_info = 8;
  bool has_statistics_info() const;
  void clear_statistics_info();
  static const int kStatisticsInfoFieldNumber = 8;
  const ::dom_distiller::proto::StatisticsInfo& statistics_info() const;
  ::dom_distiller::proto::StatisticsInfo* mutable_statistics_info();
  ::dom_distiller::proto::StatisticsInfo* release_statistics_info();
  void set_allocated_statistics_info(::dom_distiller::proto::StatisticsInfo* statistics_info);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.DomDistillerResult)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_distilled_content();
  void clear_has_distilled_content();
  void set_has_pagination_info();
  void clear_has_pagination_info();
  void set_has_markup_info();
  void clear_has_markup_info();
  void set_has_timing_info();
  void clear_has_timing_info();
  void set_has_debug_info();
  void clear_has_debug_info();
  void set_has_statistics_info();
  void clear_has_statistics_info();
  void set_has_text_direction();
  void clear_has_text_direction();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::DomDistillerResult_ContentImage > content_images_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr text_direction_;
  ::dom_distiller::proto::DistilledContent* distilled_content_;
  ::dom_distiller::proto::PaginationInfo* pagination_info_;
  ::dom_distiller::proto::MarkupInfo* markup_info_;
  ::dom_distiller::proto::TimingInfo* timing_info_;
  ::dom_distiller::proto::DebugInfo* debug_info_;
  ::dom_distiller::proto::StatisticsInfo* statistics_info_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DomDistillerOptions : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.proto.DomDistillerOptions) */ {
 public:
  DomDistillerOptions();
  virtual ~DomDistillerOptions();

  DomDistillerOptions(const DomDistillerOptions& from);

  inline DomDistillerOptions& operator=(const DomDistillerOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DomDistillerOptions& default_instance();

  static inline const DomDistillerOptions* internal_default_instance() {
    return reinterpret_cast<const DomDistillerOptions*>(
               &_DomDistillerOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DomDistillerOptions* other);

  // implements Message ----------------------------------------------

  inline DomDistillerOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  DomDistillerOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DomDistillerOptions& from);
  void MergeFrom(const DomDistillerOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DomDistillerOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string original_url = 3;
  bool has_original_url() const;
  void clear_original_url();
  static const int kOriginalUrlFieldNumber = 3;
  const ::std::string& original_url() const;
  void set_original_url(const ::std::string& value);
  #if LANG_CXX11
  void set_original_url(::std::string&& value);
  #endif
  void set_original_url(const char* value);
  void set_original_url(const char* value, size_t size);
  ::std::string* mutable_original_url();
  ::std::string* release_original_url();
  void set_allocated_original_url(::std::string* original_url);

  // optional string pagination_algo = 4;
  bool has_pagination_algo() const;
  void clear_pagination_algo();
  static const int kPaginationAlgoFieldNumber = 4;
  const ::std::string& pagination_algo() const;
  void set_pagination_algo(const ::std::string& value);
  #if LANG_CXX11
  void set_pagination_algo(::std::string&& value);
  #endif
  void set_pagination_algo(const char* value);
  void set_pagination_algo(const char* value, size_t size);
  ::std::string* mutable_pagination_algo();
  ::std::string* release_pagination_algo();
  void set_allocated_pagination_algo(::std::string* pagination_algo);

  // optional bool extract_text_only = 1;
  bool has_extract_text_only() const;
  void clear_extract_text_only();
  static const int kExtractTextOnlyFieldNumber = 1;
  bool extract_text_only() const;
  void set_extract_text_only(bool value);

  // optional int32 debug_level = 2;
  bool has_debug_level() const;
  void clear_debug_level();
  static const int kDebugLevelFieldNumber = 2;
  ::google::protobuf::int32 debug_level() const;
  void set_debug_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dom_distiller.proto.DomDistillerOptions)
 private:
  void set_has_extract_text_only();
  void clear_has_extract_text_only();
  void set_has_debug_level();
  void clear_has_debug_level();
  void set_has_original_url();
  void clear_has_original_url();
  void set_has_pagination_algo();
  void clear_has_pagination_algo();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr original_url_;
  ::google::protobuf::internal::ArenaStringPtr pagination_algo_;
  bool extract_text_only_;
  ::google::protobuf::int32 debug_level_;
  friend struct protobuf_dom_5fdistiller_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DistilledContent

// optional string html = 1;
inline bool DistilledContent::has_html() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistilledContent::set_has_html() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DistilledContent::clear_has_html() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DistilledContent::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_html();
}
inline const ::std::string& DistilledContent::html() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DistilledContent.html)
  return html_.GetNoArena();
}
inline void DistilledContent::set_html(const ::std::string& value) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DistilledContent.html)
}
#if LANG_CXX11
inline void DistilledContent::set_html(::std::string&& value) {
  set_has_html();
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DistilledContent.html)
}
#endif
inline void DistilledContent::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DistilledContent.html)
}
inline void DistilledContent::set_html(const char* value, size_t size) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DistilledContent.html)
}
inline ::std::string* DistilledContent::mutable_html() {
  set_has_html();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DistilledContent.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistilledContent::release_html() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DistilledContent.html)
  clear_has_html();
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledContent::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    set_has_html();
  } else {
    clear_has_html();
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DistilledContent.html)
}

// -------------------------------------------------------------------

// PaginationInfo

// optional string next_page = 1;
inline bool PaginationInfo::has_next_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaginationInfo::set_has_next_page() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaginationInfo::clear_has_next_page() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaginationInfo::clear_next_page() {
  next_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next_page();
}
inline const ::std::string& PaginationInfo::next_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.PaginationInfo.next_page)
  return next_page_.GetNoArena();
}
inline void PaginationInfo::set_next_page(const ::std::string& value) {
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.PaginationInfo.next_page)
}
#if LANG_CXX11
inline void PaginationInfo::set_next_page(::std::string&& value) {
  set_has_next_page();
  next_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.PaginationInfo.next_page)
}
#endif
inline void PaginationInfo::set_next_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.PaginationInfo.next_page)
}
inline void PaginationInfo::set_next_page(const char* value, size_t size) {
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.PaginationInfo.next_page)
}
inline ::std::string* PaginationInfo::mutable_next_page() {
  set_has_next_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.PaginationInfo.next_page)
  return next_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PaginationInfo::release_next_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.PaginationInfo.next_page)
  clear_has_next_page();
  return next_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PaginationInfo::set_allocated_next_page(::std::string* next_page) {
  if (next_page != NULL) {
    set_has_next_page();
  } else {
    clear_has_next_page();
  }
  next_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.PaginationInfo.next_page)
}

// optional string prev_page = 2;
inline bool PaginationInfo::has_prev_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaginationInfo::set_has_prev_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaginationInfo::clear_has_prev_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaginationInfo::clear_prev_page() {
  prev_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_page();
}
inline const ::std::string& PaginationInfo::prev_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.PaginationInfo.prev_page)
  return prev_page_.GetNoArena();
}
inline void PaginationInfo::set_prev_page(const ::std::string& value) {
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.PaginationInfo.prev_page)
}
#if LANG_CXX11
inline void PaginationInfo::set_prev_page(::std::string&& value) {
  set_has_prev_page();
  prev_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.PaginationInfo.prev_page)
}
#endif
inline void PaginationInfo::set_prev_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.PaginationInfo.prev_page)
}
inline void PaginationInfo::set_prev_page(const char* value, size_t size) {
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.PaginationInfo.prev_page)
}
inline ::std::string* PaginationInfo::mutable_prev_page() {
  set_has_prev_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.PaginationInfo.prev_page)
  return prev_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PaginationInfo::release_prev_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.PaginationInfo.prev_page)
  clear_has_prev_page();
  return prev_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PaginationInfo::set_allocated_prev_page(::std::string* prev_page) {
  if (prev_page != NULL) {
    set_has_prev_page();
  } else {
    clear_has_prev_page();
  }
  prev_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.PaginationInfo.prev_page)
}

// optional string canonical_page = 3;
inline bool PaginationInfo::has_canonical_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PaginationInfo::set_has_canonical_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PaginationInfo::clear_has_canonical_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PaginationInfo::clear_canonical_page() {
  canonical_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canonical_page();
}
inline const ::std::string& PaginationInfo::canonical_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.PaginationInfo.canonical_page)
  return canonical_page_.GetNoArena();
}
inline void PaginationInfo::set_canonical_page(const ::std::string& value) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.PaginationInfo.canonical_page)
}
#if LANG_CXX11
inline void PaginationInfo::set_canonical_page(::std::string&& value) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.PaginationInfo.canonical_page)
}
#endif
inline void PaginationInfo::set_canonical_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.PaginationInfo.canonical_page)
}
inline void PaginationInfo::set_canonical_page(const char* value, size_t size) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.PaginationInfo.canonical_page)
}
inline ::std::string* PaginationInfo::mutable_canonical_page() {
  set_has_canonical_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.PaginationInfo.canonical_page)
  return canonical_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PaginationInfo::release_canonical_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.PaginationInfo.canonical_page)
  clear_has_canonical_page();
  return canonical_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PaginationInfo::set_allocated_canonical_page(::std::string* canonical_page) {
  if (canonical_page != NULL) {
    set_has_canonical_page();
  } else {
    clear_has_canonical_page();
  }
  canonical_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.PaginationInfo.canonical_page)
}

// -------------------------------------------------------------------

// MarkupArticle

// optional string published_time = 1;
inline bool MarkupArticle::has_published_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkupArticle::set_has_published_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkupArticle::clear_has_published_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkupArticle::clear_published_time() {
  published_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_published_time();
}
inline const ::std::string& MarkupArticle::published_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupArticle.published_time)
  return published_time_.GetNoArena();
}
inline void MarkupArticle::set_published_time(const ::std::string& value) {
  set_has_published_time();
  published_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.published_time)
}
#if LANG_CXX11
inline void MarkupArticle::set_published_time(::std::string&& value) {
  set_has_published_time();
  published_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupArticle.published_time)
}
#endif
inline void MarkupArticle::set_published_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_published_time();
  published_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupArticle.published_time)
}
inline void MarkupArticle::set_published_time(const char* value, size_t size) {
  set_has_published_time();
  published_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupArticle.published_time)
}
inline ::std::string* MarkupArticle::mutable_published_time() {
  set_has_published_time();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupArticle.published_time)
  return published_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupArticle::release_published_time() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupArticle.published_time)
  clear_has_published_time();
  return published_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupArticle::set_allocated_published_time(::std::string* published_time) {
  if (published_time != NULL) {
    set_has_published_time();
  } else {
    clear_has_published_time();
  }
  published_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), published_time);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupArticle.published_time)
}

// optional string modified_time = 2;
inline bool MarkupArticle::has_modified_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarkupArticle::set_has_modified_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarkupArticle::clear_has_modified_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarkupArticle::clear_modified_time() {
  modified_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_modified_time();
}
inline const ::std::string& MarkupArticle::modified_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupArticle.modified_time)
  return modified_time_.GetNoArena();
}
inline void MarkupArticle::set_modified_time(const ::std::string& value) {
  set_has_modified_time();
  modified_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.modified_time)
}
#if LANG_CXX11
inline void MarkupArticle::set_modified_time(::std::string&& value) {
  set_has_modified_time();
  modified_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupArticle.modified_time)
}
#endif
inline void MarkupArticle::set_modified_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_modified_time();
  modified_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupArticle.modified_time)
}
inline void MarkupArticle::set_modified_time(const char* value, size_t size) {
  set_has_modified_time();
  modified_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupArticle.modified_time)
}
inline ::std::string* MarkupArticle::mutable_modified_time() {
  set_has_modified_time();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupArticle.modified_time)
  return modified_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupArticle::release_modified_time() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupArticle.modified_time)
  clear_has_modified_time();
  return modified_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupArticle::set_allocated_modified_time(::std::string* modified_time) {
  if (modified_time != NULL) {
    set_has_modified_time();
  } else {
    clear_has_modified_time();
  }
  modified_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modified_time);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupArticle.modified_time)
}

// optional string expiration_time = 3;
inline bool MarkupArticle::has_expiration_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarkupArticle::set_has_expiration_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarkupArticle::clear_has_expiration_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarkupArticle::clear_expiration_time() {
  expiration_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_expiration_time();
}
inline const ::std::string& MarkupArticle::expiration_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupArticle.expiration_time)
  return expiration_time_.GetNoArena();
}
inline void MarkupArticle::set_expiration_time(const ::std::string& value) {
  set_has_expiration_time();
  expiration_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.expiration_time)
}
#if LANG_CXX11
inline void MarkupArticle::set_expiration_time(::std::string&& value) {
  set_has_expiration_time();
  expiration_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupArticle.expiration_time)
}
#endif
inline void MarkupArticle::set_expiration_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_expiration_time();
  expiration_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupArticle.expiration_time)
}
inline void MarkupArticle::set_expiration_time(const char* value, size_t size) {
  set_has_expiration_time();
  expiration_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupArticle.expiration_time)
}
inline ::std::string* MarkupArticle::mutable_expiration_time() {
  set_has_expiration_time();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupArticle.expiration_time)
  return expiration_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupArticle::release_expiration_time() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupArticle.expiration_time)
  clear_has_expiration_time();
  return expiration_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupArticle::set_allocated_expiration_time(::std::string* expiration_time) {
  if (expiration_time != NULL) {
    set_has_expiration_time();
  } else {
    clear_has_expiration_time();
  }
  expiration_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiration_time);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupArticle.expiration_time)
}

// optional string section = 4;
inline bool MarkupArticle::has_section() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarkupArticle::set_has_section() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarkupArticle::clear_has_section() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarkupArticle::clear_section() {
  section_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_section();
}
inline const ::std::string& MarkupArticle::section() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupArticle.section)
  return section_.GetNoArena();
}
inline void MarkupArticle::set_section(const ::std::string& value) {
  set_has_section();
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.section)
}
#if LANG_CXX11
inline void MarkupArticle::set_section(::std::string&& value) {
  set_has_section();
  section_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupArticle.section)
}
#endif
inline void MarkupArticle::set_section(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_section();
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupArticle.section)
}
inline void MarkupArticle::set_section(const char* value, size_t size) {
  set_has_section();
  section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupArticle.section)
}
inline ::std::string* MarkupArticle::mutable_section() {
  set_has_section();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupArticle.section)
  return section_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupArticle::release_section() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupArticle.section)
  clear_has_section();
  return section_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupArticle::set_allocated_section(::std::string* section) {
  if (section != NULL) {
    set_has_section();
  } else {
    clear_has_section();
  }
  section_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), section);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupArticle.section)
}

// repeated string authors = 5;
inline int MarkupArticle::authors_size() const {
  return authors_.size();
}
inline void MarkupArticle::clear_authors() {
  authors_.Clear();
}
inline const ::std::string& MarkupArticle::authors(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupArticle.authors)
  return authors_.Get(index);
}
inline ::std::string* MarkupArticle::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupArticle.authors)
  return authors_.Mutable(index);
}
inline void MarkupArticle::set_authors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.authors)
  authors_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MarkupArticle::set_authors(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupArticle.authors)
  authors_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MarkupArticle::set_authors(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  authors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupArticle.authors)
}
inline void MarkupArticle::set_authors(int index, const char* value, size_t size) {
  authors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupArticle.authors)
}
inline ::std::string* MarkupArticle::add_authors() {
  // @@protoc_insertion_point(field_add_mutable:dom_distiller.proto.MarkupArticle.authors)
  return authors_.Add();
}
inline void MarkupArticle::add_authors(const ::std::string& value) {
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dom_distiller.proto.MarkupArticle.authors)
}
#if LANG_CXX11
inline void MarkupArticle::add_authors(::std::string&& value) {
  authors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dom_distiller.proto.MarkupArticle.authors)
}
#endif
inline void MarkupArticle::add_authors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dom_distiller.proto.MarkupArticle.authors)
}
inline void MarkupArticle::add_authors(const char* value, size_t size) {
  authors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dom_distiller.proto.MarkupArticle.authors)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MarkupArticle::authors() const {
  // @@protoc_insertion_point(field_list:dom_distiller.proto.MarkupArticle.authors)
  return authors_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MarkupArticle::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.proto.MarkupArticle.authors)
  return &authors_;
}

// -------------------------------------------------------------------

// MarkupImage

// optional string url = 1;
inline bool MarkupImage::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkupImage::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkupImage::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkupImage::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& MarkupImage::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.url)
  return url_.GetNoArena();
}
inline void MarkupImage::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.url)
}
#if LANG_CXX11
inline void MarkupImage::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupImage.url)
}
#endif
inline void MarkupImage::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupImage.url)
}
inline void MarkupImage::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupImage.url)
}
inline ::std::string* MarkupImage::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupImage.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupImage::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupImage.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupImage::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupImage.url)
}

// optional string secure_url = 2;
inline bool MarkupImage::has_secure_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarkupImage::set_has_secure_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarkupImage::clear_has_secure_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarkupImage::clear_secure_url() {
  secure_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secure_url();
}
inline const ::std::string& MarkupImage::secure_url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.secure_url)
  return secure_url_.GetNoArena();
}
inline void MarkupImage::set_secure_url(const ::std::string& value) {
  set_has_secure_url();
  secure_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.secure_url)
}
#if LANG_CXX11
inline void MarkupImage::set_secure_url(::std::string&& value) {
  set_has_secure_url();
  secure_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupImage.secure_url)
}
#endif
inline void MarkupImage::set_secure_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_secure_url();
  secure_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupImage.secure_url)
}
inline void MarkupImage::set_secure_url(const char* value, size_t size) {
  set_has_secure_url();
  secure_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupImage.secure_url)
}
inline ::std::string* MarkupImage::mutable_secure_url() {
  set_has_secure_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupImage.secure_url)
  return secure_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupImage::release_secure_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupImage.secure_url)
  clear_has_secure_url();
  return secure_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupImage::set_allocated_secure_url(::std::string* secure_url) {
  if (secure_url != NULL) {
    set_has_secure_url();
  } else {
    clear_has_secure_url();
  }
  secure_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secure_url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupImage.secure_url)
}

// optional string type = 3;
inline bool MarkupImage::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarkupImage::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarkupImage::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarkupImage::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MarkupImage::type() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.type)
  return type_.GetNoArena();
}
inline void MarkupImage::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.type)
}
#if LANG_CXX11
inline void MarkupImage::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupImage.type)
}
#endif
inline void MarkupImage::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupImage.type)
}
inline void MarkupImage::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupImage.type)
}
inline ::std::string* MarkupImage::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupImage.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupImage::release_type() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupImage.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupImage::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupImage.type)
}

// optional string caption = 4;
inline bool MarkupImage::has_caption() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarkupImage::set_has_caption() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarkupImage::clear_has_caption() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarkupImage::clear_caption() {
  caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption();
}
inline const ::std::string& MarkupImage::caption() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.caption)
  return caption_.GetNoArena();
}
inline void MarkupImage::set_caption(const ::std::string& value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.caption)
}
#if LANG_CXX11
inline void MarkupImage::set_caption(::std::string&& value) {
  set_has_caption();
  caption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupImage.caption)
}
#endif
inline void MarkupImage::set_caption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupImage.caption)
}
inline void MarkupImage::set_caption(const char* value, size_t size) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupImage.caption)
}
inline ::std::string* MarkupImage::mutable_caption() {
  set_has_caption();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupImage.caption)
  return caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupImage::release_caption() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupImage.caption)
  clear_has_caption();
  return caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupImage::set_allocated_caption(::std::string* caption) {
  if (caption != NULL) {
    set_has_caption();
  } else {
    clear_has_caption();
  }
  caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupImage.caption)
}

// optional int32 width = 5;
inline bool MarkupImage::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarkupImage::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarkupImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarkupImage::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 MarkupImage::width() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.width)
  return width_;
}
inline void MarkupImage::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.width)
}

// optional int32 height = 6;
inline bool MarkupImage::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarkupImage::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarkupImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarkupImage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 MarkupImage::height() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupImage.height)
  return height_;
}
inline void MarkupImage::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupImage.height)
}

// -------------------------------------------------------------------

// MarkupInfo

// optional string title = 1;
inline bool MarkupInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkupInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkupInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkupInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& MarkupInfo::title() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.title)
  return title_.GetNoArena();
}
inline void MarkupInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.title)
}
#if LANG_CXX11
inline void MarkupInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.title)
}
#endif
inline void MarkupInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.title)
}
inline void MarkupInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.title)
}
inline ::std::string* MarkupInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupInfo::release_title() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.title)
}

// optional string type = 2;
inline bool MarkupInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarkupInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarkupInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarkupInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MarkupInfo::type() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.type)
  return type_.GetNoArena();
}
inline void MarkupInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.type)
}
#if LANG_CXX11
inline void MarkupInfo::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.type)
}
#endif
inline void MarkupInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.type)
}
inline void MarkupInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.type)
}
inline ::std::string* MarkupInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupInfo::release_type() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.type)
}

// optional string url = 3;
inline bool MarkupInfo::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarkupInfo::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarkupInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarkupInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& MarkupInfo::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.url)
  return url_.GetNoArena();
}
inline void MarkupInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.url)
}
#if LANG_CXX11
inline void MarkupInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.url)
}
#endif
inline void MarkupInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.url)
}
inline void MarkupInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.url)
}
inline ::std::string* MarkupInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupInfo::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.url)
}

// optional string description = 4;
inline bool MarkupInfo::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarkupInfo::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarkupInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarkupInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& MarkupInfo::description() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.description)
  return description_.GetNoArena();
}
inline void MarkupInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.description)
}
#if LANG_CXX11
inline void MarkupInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.description)
}
#endif
inline void MarkupInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.description)
}
inline void MarkupInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.description)
}
inline ::std::string* MarkupInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupInfo::release_description() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.description)
}

// optional string publisher = 5;
inline bool MarkupInfo::has_publisher() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarkupInfo::set_has_publisher() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarkupInfo::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarkupInfo::clear_publisher() {
  publisher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publisher();
}
inline const ::std::string& MarkupInfo::publisher() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.publisher)
  return publisher_.GetNoArena();
}
inline void MarkupInfo::set_publisher(const ::std::string& value) {
  set_has_publisher();
  publisher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.publisher)
}
#if LANG_CXX11
inline void MarkupInfo::set_publisher(::std::string&& value) {
  set_has_publisher();
  publisher_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.publisher)
}
#endif
inline void MarkupInfo::set_publisher(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publisher();
  publisher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.publisher)
}
inline void MarkupInfo::set_publisher(const char* value, size_t size) {
  set_has_publisher();
  publisher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.publisher)
}
inline ::std::string* MarkupInfo::mutable_publisher() {
  set_has_publisher();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.publisher)
  return publisher_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupInfo::release_publisher() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.publisher)
  clear_has_publisher();
  return publisher_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupInfo::set_allocated_publisher(::std::string* publisher) {
  if (publisher != NULL) {
    set_has_publisher();
  } else {
    clear_has_publisher();
  }
  publisher_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisher);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.publisher)
}

// optional string copyright = 6;
inline bool MarkupInfo::has_copyright() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarkupInfo::set_has_copyright() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarkupInfo::clear_has_copyright() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarkupInfo::clear_copyright() {
  copyright_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_copyright();
}
inline const ::std::string& MarkupInfo::copyright() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.copyright)
  return copyright_.GetNoArena();
}
inline void MarkupInfo::set_copyright(const ::std::string& value) {
  set_has_copyright();
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.copyright)
}
#if LANG_CXX11
inline void MarkupInfo::set_copyright(::std::string&& value) {
  set_has_copyright();
  copyright_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.copyright)
}
#endif
inline void MarkupInfo::set_copyright(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_copyright();
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.copyright)
}
inline void MarkupInfo::set_copyright(const char* value, size_t size) {
  set_has_copyright();
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.copyright)
}
inline ::std::string* MarkupInfo::mutable_copyright() {
  set_has_copyright();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.copyright)
  return copyright_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupInfo::release_copyright() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.copyright)
  clear_has_copyright();
  return copyright_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupInfo::set_allocated_copyright(::std::string* copyright) {
  if (copyright != NULL) {
    set_has_copyright();
  } else {
    clear_has_copyright();
  }
  copyright_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), copyright);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.copyright)
}

// optional string author = 7;
inline bool MarkupInfo::has_author() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarkupInfo::set_has_author() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarkupInfo::clear_has_author() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarkupInfo::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
inline const ::std::string& MarkupInfo::author() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.author)
  return author_.GetNoArena();
}
inline void MarkupInfo::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.MarkupInfo.author)
}
#if LANG_CXX11
inline void MarkupInfo::set_author(::std::string&& value) {
  set_has_author();
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.MarkupInfo.author)
}
#endif
inline void MarkupInfo::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.MarkupInfo.author)
}
inline void MarkupInfo::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.MarkupInfo.author)
}
inline ::std::string* MarkupInfo::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkupInfo::release_author() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.author)
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkupInfo::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.author)
}

// optional .dom_distiller.proto.MarkupArticle article = 8;
inline bool MarkupInfo::has_article() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarkupInfo::set_has_article() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarkupInfo::clear_has_article() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarkupInfo::clear_article() {
  if (article_ != NULL) article_->::dom_distiller::proto::MarkupArticle::Clear();
  clear_has_article();
}
inline const ::dom_distiller::proto::MarkupArticle& MarkupInfo::article() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.article)
  return article_ != NULL ? *article_
                         : *::dom_distiller::proto::MarkupArticle::internal_default_instance();
}
inline ::dom_distiller::proto::MarkupArticle* MarkupInfo::mutable_article() {
  set_has_article();
  if (article_ == NULL) {
    article_ = new ::dom_distiller::proto::MarkupArticle;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.article)
  return article_;
}
inline ::dom_distiller::proto::MarkupArticle* MarkupInfo::release_article() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.MarkupInfo.article)
  clear_has_article();
  ::dom_distiller::proto::MarkupArticle* temp = article_;
  article_ = NULL;
  return temp;
}
inline void MarkupInfo::set_allocated_article(::dom_distiller::proto::MarkupArticle* article) {
  delete article_;
  article_ = article;
  if (article) {
    set_has_article();
  } else {
    clear_has_article();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.MarkupInfo.article)
}

// repeated .dom_distiller.proto.MarkupImage images = 9;
inline int MarkupInfo::images_size() const {
  return images_.size();
}
inline void MarkupInfo::clear_images() {
  images_.Clear();
}
inline const ::dom_distiller::proto::MarkupImage& MarkupInfo::images(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.MarkupInfo.images)
  return images_.Get(index);
}
inline ::dom_distiller::proto::MarkupImage* MarkupInfo::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.MarkupInfo.images)
  return images_.Mutable(index);
}
inline ::dom_distiller::proto::MarkupImage* MarkupInfo::add_images() {
  // @@protoc_insertion_point(field_add:dom_distiller.proto.MarkupInfo.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::MarkupImage >*
MarkupInfo::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.proto.MarkupInfo.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::MarkupImage >&
MarkupInfo::images() const {
  // @@protoc_insertion_point(field_list:dom_distiller.proto.MarkupInfo.images)
  return images_;
}

// -------------------------------------------------------------------

// TimingEntry

// optional string name = 1;
inline bool TimingEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimingEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimingEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimingEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TimingEntry::name() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingEntry.name)
  return name_.GetNoArena();
}
inline void TimingEntry::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingEntry.name)
}
#if LANG_CXX11
inline void TimingEntry::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.TimingEntry.name)
}
#endif
inline void TimingEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.TimingEntry.name)
}
inline void TimingEntry::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.TimingEntry.name)
}
inline ::std::string* TimingEntry::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.TimingEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimingEntry::release_name() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.TimingEntry.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimingEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.TimingEntry.name)
}

// optional double time = 2;
inline bool TimingEntry::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimingEntry::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimingEntry::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimingEntry::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double TimingEntry::time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingEntry.time)
  return time_;
}
inline void TimingEntry::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingEntry.time)
}

// -------------------------------------------------------------------

// TimingInfo

// optional double markup_parsing_time = 1;
inline bool TimingInfo::has_markup_parsing_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimingInfo::set_has_markup_parsing_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimingInfo::clear_has_markup_parsing_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimingInfo::clear_markup_parsing_time() {
  markup_parsing_time_ = 0;
  clear_has_markup_parsing_time();
}
inline double TimingInfo::markup_parsing_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.markup_parsing_time)
  return markup_parsing_time_;
}
inline void TimingInfo::set_markup_parsing_time(double value) {
  set_has_markup_parsing_time();
  markup_parsing_time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingInfo.markup_parsing_time)
}

// optional double document_construction_time = 2;
inline bool TimingInfo::has_document_construction_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimingInfo::set_has_document_construction_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimingInfo::clear_has_document_construction_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimingInfo::clear_document_construction_time() {
  document_construction_time_ = 0;
  clear_has_document_construction_time();
}
inline double TimingInfo::document_construction_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.document_construction_time)
  return document_construction_time_;
}
inline void TimingInfo::set_document_construction_time(double value) {
  set_has_document_construction_time();
  document_construction_time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingInfo.document_construction_time)
}

// optional double article_processing_time = 3;
inline bool TimingInfo::has_article_processing_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimingInfo::set_has_article_processing_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimingInfo::clear_has_article_processing_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimingInfo::clear_article_processing_time() {
  article_processing_time_ = 0;
  clear_has_article_processing_time();
}
inline double TimingInfo::article_processing_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.article_processing_time)
  return article_processing_time_;
}
inline void TimingInfo::set_article_processing_time(double value) {
  set_has_article_processing_time();
  article_processing_time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingInfo.article_processing_time)
}

// optional double formatting_time = 4;
inline bool TimingInfo::has_formatting_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimingInfo::set_has_formatting_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TimingInfo::clear_has_formatting_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TimingInfo::clear_formatting_time() {
  formatting_time_ = 0;
  clear_has_formatting_time();
}
inline double TimingInfo::formatting_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.formatting_time)
  return formatting_time_;
}
inline void TimingInfo::set_formatting_time(double value) {
  set_has_formatting_time();
  formatting_time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingInfo.formatting_time)
}

// optional double total_time = 5;
inline bool TimingInfo::has_total_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TimingInfo::set_has_total_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TimingInfo::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TimingInfo::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline double TimingInfo::total_time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.total_time)
  return total_time_;
}
inline void TimingInfo::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.TimingInfo.total_time)
}

// repeated .dom_distiller.proto.TimingEntry other_times = 6;
inline int TimingInfo::other_times_size() const {
  return other_times_.size();
}
inline void TimingInfo::clear_other_times() {
  other_times_.Clear();
}
inline const ::dom_distiller::proto::TimingEntry& TimingInfo::other_times(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.TimingInfo.other_times)
  return other_times_.Get(index);
}
inline ::dom_distiller::proto::TimingEntry* TimingInfo::mutable_other_times(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.TimingInfo.other_times)
  return other_times_.Mutable(index);
}
inline ::dom_distiller::proto::TimingEntry* TimingInfo::add_other_times() {
  // @@protoc_insertion_point(field_add:dom_distiller.proto.TimingInfo.other_times)
  return other_times_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::TimingEntry >*
TimingInfo::mutable_other_times() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.proto.TimingInfo.other_times)
  return &other_times_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::TimingEntry >&
TimingInfo::other_times() const {
  // @@protoc_insertion_point(field_list:dom_distiller.proto.TimingInfo.other_times)
  return other_times_;
}

// -------------------------------------------------------------------

// DebugInfo

// optional string log = 1;
inline bool DebugInfo::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugInfo::set_has_log() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugInfo::clear_has_log() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugInfo::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log();
}
inline const ::std::string& DebugInfo::log() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DebugInfo.log)
  return log_.GetNoArena();
}
inline void DebugInfo::set_log(const ::std::string& value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DebugInfo.log)
}
#if LANG_CXX11
inline void DebugInfo::set_log(::std::string&& value) {
  set_has_log();
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DebugInfo.log)
}
#endif
inline void DebugInfo::set_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DebugInfo.log)
}
inline void DebugInfo::set_log(const char* value, size_t size) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DebugInfo.log)
}
inline ::std::string* DebugInfo::mutable_log() {
  set_has_log();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DebugInfo.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugInfo::release_log() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DebugInfo.log)
  clear_has_log();
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugInfo::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    set_has_log();
  } else {
    clear_has_log();
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DebugInfo.log)
}

// -------------------------------------------------------------------

// StatisticsInfo

// optional int32 word_count = 1;
inline bool StatisticsInfo::has_word_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatisticsInfo::set_has_word_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatisticsInfo::clear_has_word_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatisticsInfo::clear_word_count() {
  word_count_ = 0;
  clear_has_word_count();
}
inline ::google::protobuf::int32 StatisticsInfo::word_count() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.StatisticsInfo.word_count)
  return word_count_;
}
inline void StatisticsInfo::set_word_count(::google::protobuf::int32 value) {
  set_has_word_count();
  word_count_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.StatisticsInfo.word_count)
}

// -------------------------------------------------------------------

// DomDistillerResult_ContentImage

// optional string url = 1;
inline bool DomDistillerResult_ContentImage::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DomDistillerResult_ContentImage::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DomDistillerResult_ContentImage::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DomDistillerResult_ContentImage::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& DomDistillerResult_ContentImage::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.ContentImage.url)
  return url_.GetNoArena();
}
inline void DomDistillerResult_ContentImage::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerResult.ContentImage.url)
}
#if LANG_CXX11
inline void DomDistillerResult_ContentImage::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DomDistillerResult.ContentImage.url)
}
#endif
inline void DomDistillerResult_ContentImage::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DomDistillerResult.ContentImage.url)
}
inline void DomDistillerResult_ContentImage::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DomDistillerResult.ContentImage.url)
}
inline ::std::string* DomDistillerResult_ContentImage::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.ContentImage.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DomDistillerResult_ContentImage::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.ContentImage.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DomDistillerResult_ContentImage::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.ContentImage.url)
}

// -------------------------------------------------------------------

// DomDistillerResult

// optional string title = 1;
inline bool DomDistillerResult::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DomDistillerResult::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DomDistillerResult::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DomDistillerResult::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& DomDistillerResult::title() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.title)
  return title_.GetNoArena();
}
inline void DomDistillerResult::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerResult.title)
}
#if LANG_CXX11
inline void DomDistillerResult::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DomDistillerResult.title)
}
#endif
inline void DomDistillerResult::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DomDistillerResult.title)
}
inline void DomDistillerResult::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DomDistillerResult.title)
}
inline ::std::string* DomDistillerResult::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DomDistillerResult::release_title() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DomDistillerResult::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.title)
}

// optional .dom_distiller.proto.DistilledContent distilled_content = 2;
inline bool DomDistillerResult::has_distilled_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DomDistillerResult::set_has_distilled_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DomDistillerResult::clear_has_distilled_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DomDistillerResult::clear_distilled_content() {
  if (distilled_content_ != NULL) distilled_content_->::dom_distiller::proto::DistilledContent::Clear();
  clear_has_distilled_content();
}
inline const ::dom_distiller::proto::DistilledContent& DomDistillerResult::distilled_content() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.distilled_content)
  return distilled_content_ != NULL ? *distilled_content_
                         : *::dom_distiller::proto::DistilledContent::internal_default_instance();
}
inline ::dom_distiller::proto::DistilledContent* DomDistillerResult::mutable_distilled_content() {
  set_has_distilled_content();
  if (distilled_content_ == NULL) {
    distilled_content_ = new ::dom_distiller::proto::DistilledContent;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.distilled_content)
  return distilled_content_;
}
inline ::dom_distiller::proto::DistilledContent* DomDistillerResult::release_distilled_content() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.distilled_content)
  clear_has_distilled_content();
  ::dom_distiller::proto::DistilledContent* temp = distilled_content_;
  distilled_content_ = NULL;
  return temp;
}
inline void DomDistillerResult::set_allocated_distilled_content(::dom_distiller::proto::DistilledContent* distilled_content) {
  delete distilled_content_;
  distilled_content_ = distilled_content;
  if (distilled_content) {
    set_has_distilled_content();
  } else {
    clear_has_distilled_content();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.distilled_content)
}

// optional .dom_distiller.proto.PaginationInfo pagination_info = 3;
inline bool DomDistillerResult::has_pagination_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DomDistillerResult::set_has_pagination_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DomDistillerResult::clear_has_pagination_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DomDistillerResult::clear_pagination_info() {
  if (pagination_info_ != NULL) pagination_info_->::dom_distiller::proto::PaginationInfo::Clear();
  clear_has_pagination_info();
}
inline const ::dom_distiller::proto::PaginationInfo& DomDistillerResult::pagination_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.pagination_info)
  return pagination_info_ != NULL ? *pagination_info_
                         : *::dom_distiller::proto::PaginationInfo::internal_default_instance();
}
inline ::dom_distiller::proto::PaginationInfo* DomDistillerResult::mutable_pagination_info() {
  set_has_pagination_info();
  if (pagination_info_ == NULL) {
    pagination_info_ = new ::dom_distiller::proto::PaginationInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.pagination_info)
  return pagination_info_;
}
inline ::dom_distiller::proto::PaginationInfo* DomDistillerResult::release_pagination_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.pagination_info)
  clear_has_pagination_info();
  ::dom_distiller::proto::PaginationInfo* temp = pagination_info_;
  pagination_info_ = NULL;
  return temp;
}
inline void DomDistillerResult::set_allocated_pagination_info(::dom_distiller::proto::PaginationInfo* pagination_info) {
  delete pagination_info_;
  pagination_info_ = pagination_info;
  if (pagination_info) {
    set_has_pagination_info();
  } else {
    clear_has_pagination_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.pagination_info)
}

// optional .dom_distiller.proto.MarkupInfo markup_info = 5;
inline bool DomDistillerResult::has_markup_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DomDistillerResult::set_has_markup_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DomDistillerResult::clear_has_markup_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DomDistillerResult::clear_markup_info() {
  if (markup_info_ != NULL) markup_info_->::dom_distiller::proto::MarkupInfo::Clear();
  clear_has_markup_info();
}
inline const ::dom_distiller::proto::MarkupInfo& DomDistillerResult::markup_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.markup_info)
  return markup_info_ != NULL ? *markup_info_
                         : *::dom_distiller::proto::MarkupInfo::internal_default_instance();
}
inline ::dom_distiller::proto::MarkupInfo* DomDistillerResult::mutable_markup_info() {
  set_has_markup_info();
  if (markup_info_ == NULL) {
    markup_info_ = new ::dom_distiller::proto::MarkupInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.markup_info)
  return markup_info_;
}
inline ::dom_distiller::proto::MarkupInfo* DomDistillerResult::release_markup_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.markup_info)
  clear_has_markup_info();
  ::dom_distiller::proto::MarkupInfo* temp = markup_info_;
  markup_info_ = NULL;
  return temp;
}
inline void DomDistillerResult::set_allocated_markup_info(::dom_distiller::proto::MarkupInfo* markup_info) {
  delete markup_info_;
  markup_info_ = markup_info;
  if (markup_info) {
    set_has_markup_info();
  } else {
    clear_has_markup_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.markup_info)
}

// optional .dom_distiller.proto.TimingInfo timing_info = 6;
inline bool DomDistillerResult::has_timing_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DomDistillerResult::set_has_timing_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DomDistillerResult::clear_has_timing_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DomDistillerResult::clear_timing_info() {
  if (timing_info_ != NULL) timing_info_->::dom_distiller::proto::TimingInfo::Clear();
  clear_has_timing_info();
}
inline const ::dom_distiller::proto::TimingInfo& DomDistillerResult::timing_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.timing_info)
  return timing_info_ != NULL ? *timing_info_
                         : *::dom_distiller::proto::TimingInfo::internal_default_instance();
}
inline ::dom_distiller::proto::TimingInfo* DomDistillerResult::mutable_timing_info() {
  set_has_timing_info();
  if (timing_info_ == NULL) {
    timing_info_ = new ::dom_distiller::proto::TimingInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.timing_info)
  return timing_info_;
}
inline ::dom_distiller::proto::TimingInfo* DomDistillerResult::release_timing_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.timing_info)
  clear_has_timing_info();
  ::dom_distiller::proto::TimingInfo* temp = timing_info_;
  timing_info_ = NULL;
  return temp;
}
inline void DomDistillerResult::set_allocated_timing_info(::dom_distiller::proto::TimingInfo* timing_info) {
  delete timing_info_;
  timing_info_ = timing_info;
  if (timing_info) {
    set_has_timing_info();
  } else {
    clear_has_timing_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.timing_info)
}

// optional .dom_distiller.proto.DebugInfo debug_info = 7;
inline bool DomDistillerResult::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DomDistillerResult::set_has_debug_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DomDistillerResult::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DomDistillerResult::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::dom_distiller::proto::DebugInfo::Clear();
  clear_has_debug_info();
}
inline const ::dom_distiller::proto::DebugInfo& DomDistillerResult::debug_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.debug_info)
  return debug_info_ != NULL ? *debug_info_
                         : *::dom_distiller::proto::DebugInfo::internal_default_instance();
}
inline ::dom_distiller::proto::DebugInfo* DomDistillerResult::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) {
    debug_info_ = new ::dom_distiller::proto::DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.debug_info)
  return debug_info_;
}
inline ::dom_distiller::proto::DebugInfo* DomDistillerResult::release_debug_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.debug_info)
  clear_has_debug_info();
  ::dom_distiller::proto::DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
inline void DomDistillerResult::set_allocated_debug_info(::dom_distiller::proto::DebugInfo* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.debug_info)
}

// optional .dom_distiller.proto.StatisticsInfo statistics_info = 8;
inline bool DomDistillerResult::has_statistics_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DomDistillerResult::set_has_statistics_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DomDistillerResult::clear_has_statistics_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DomDistillerResult::clear_statistics_info() {
  if (statistics_info_ != NULL) statistics_info_->::dom_distiller::proto::StatisticsInfo::Clear();
  clear_has_statistics_info();
}
inline const ::dom_distiller::proto::StatisticsInfo& DomDistillerResult::statistics_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.statistics_info)
  return statistics_info_ != NULL ? *statistics_info_
                         : *::dom_distiller::proto::StatisticsInfo::internal_default_instance();
}
inline ::dom_distiller::proto::StatisticsInfo* DomDistillerResult::mutable_statistics_info() {
  set_has_statistics_info();
  if (statistics_info_ == NULL) {
    statistics_info_ = new ::dom_distiller::proto::StatisticsInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.statistics_info)
  return statistics_info_;
}
inline ::dom_distiller::proto::StatisticsInfo* DomDistillerResult::release_statistics_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.statistics_info)
  clear_has_statistics_info();
  ::dom_distiller::proto::StatisticsInfo* temp = statistics_info_;
  statistics_info_ = NULL;
  return temp;
}
inline void DomDistillerResult::set_allocated_statistics_info(::dom_distiller::proto::StatisticsInfo* statistics_info) {
  delete statistics_info_;
  statistics_info_ = statistics_info;
  if (statistics_info) {
    set_has_statistics_info();
  } else {
    clear_has_statistics_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.statistics_info)
}

// optional string text_direction = 9;
inline bool DomDistillerResult::has_text_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DomDistillerResult::set_has_text_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DomDistillerResult::clear_has_text_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DomDistillerResult::clear_text_direction() {
  text_direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_direction();
}
inline const ::std::string& DomDistillerResult::text_direction() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.text_direction)
  return text_direction_.GetNoArena();
}
inline void DomDistillerResult::set_text_direction(const ::std::string& value) {
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerResult.text_direction)
}
#if LANG_CXX11
inline void DomDistillerResult::set_text_direction(::std::string&& value) {
  set_has_text_direction();
  text_direction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DomDistillerResult.text_direction)
}
#endif
inline void DomDistillerResult::set_text_direction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DomDistillerResult.text_direction)
}
inline void DomDistillerResult::set_text_direction(const char* value, size_t size) {
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DomDistillerResult.text_direction)
}
inline ::std::string* DomDistillerResult::mutable_text_direction() {
  set_has_text_direction();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.text_direction)
  return text_direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DomDistillerResult::release_text_direction() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerResult.text_direction)
  clear_has_text_direction();
  return text_direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DomDistillerResult::set_allocated_text_direction(::std::string* text_direction) {
  if (text_direction != NULL) {
    set_has_text_direction();
  } else {
    clear_has_text_direction();
  }
  text_direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_direction);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerResult.text_direction)
}

// repeated .dom_distiller.proto.DomDistillerResult.ContentImage content_images = 10;
inline int DomDistillerResult::content_images_size() const {
  return content_images_.size();
}
inline void DomDistillerResult::clear_content_images() {
  content_images_.Clear();
}
inline const ::dom_distiller::proto::DomDistillerResult_ContentImage& DomDistillerResult::content_images(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerResult.content_images)
  return content_images_.Get(index);
}
inline ::dom_distiller::proto::DomDistillerResult_ContentImage* DomDistillerResult::mutable_content_images(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerResult.content_images)
  return content_images_.Mutable(index);
}
inline ::dom_distiller::proto::DomDistillerResult_ContentImage* DomDistillerResult::add_content_images() {
  // @@protoc_insertion_point(field_add:dom_distiller.proto.DomDistillerResult.content_images)
  return content_images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::DomDistillerResult_ContentImage >*
DomDistillerResult::mutable_content_images() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.proto.DomDistillerResult.content_images)
  return &content_images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dom_distiller::proto::DomDistillerResult_ContentImage >&
DomDistillerResult::content_images() const {
  // @@protoc_insertion_point(field_list:dom_distiller.proto.DomDistillerResult.content_images)
  return content_images_;
}

// -------------------------------------------------------------------

// DomDistillerOptions

// optional bool extract_text_only = 1;
inline bool DomDistillerOptions::has_extract_text_only() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DomDistillerOptions::set_has_extract_text_only() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DomDistillerOptions::clear_has_extract_text_only() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DomDistillerOptions::clear_extract_text_only() {
  extract_text_only_ = false;
  clear_has_extract_text_only();
}
inline bool DomDistillerOptions::extract_text_only() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerOptions.extract_text_only)
  return extract_text_only_;
}
inline void DomDistillerOptions::set_extract_text_only(bool value) {
  set_has_extract_text_only();
  extract_text_only_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerOptions.extract_text_only)
}

// optional int32 debug_level = 2;
inline bool DomDistillerOptions::has_debug_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DomDistillerOptions::set_has_debug_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DomDistillerOptions::clear_has_debug_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DomDistillerOptions::clear_debug_level() {
  debug_level_ = 0;
  clear_has_debug_level();
}
inline ::google::protobuf::int32 DomDistillerOptions::debug_level() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerOptions.debug_level)
  return debug_level_;
}
inline void DomDistillerOptions::set_debug_level(::google::protobuf::int32 value) {
  set_has_debug_level();
  debug_level_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerOptions.debug_level)
}

// optional string original_url = 3;
inline bool DomDistillerOptions::has_original_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DomDistillerOptions::set_has_original_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DomDistillerOptions::clear_has_original_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DomDistillerOptions::clear_original_url() {
  original_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_url();
}
inline const ::std::string& DomDistillerOptions::original_url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerOptions.original_url)
  return original_url_.GetNoArena();
}
inline void DomDistillerOptions::set_original_url(const ::std::string& value) {
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerOptions.original_url)
}
#if LANG_CXX11
inline void DomDistillerOptions::set_original_url(::std::string&& value) {
  set_has_original_url();
  original_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DomDistillerOptions.original_url)
}
#endif
inline void DomDistillerOptions::set_original_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DomDistillerOptions.original_url)
}
inline void DomDistillerOptions::set_original_url(const char* value, size_t size) {
  set_has_original_url();
  original_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DomDistillerOptions.original_url)
}
inline ::std::string* DomDistillerOptions::mutable_original_url() {
  set_has_original_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerOptions.original_url)
  return original_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DomDistillerOptions::release_original_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerOptions.original_url)
  clear_has_original_url();
  return original_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DomDistillerOptions::set_allocated_original_url(::std::string* original_url) {
  if (original_url != NULL) {
    set_has_original_url();
  } else {
    clear_has_original_url();
  }
  original_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerOptions.original_url)
}

// optional string pagination_algo = 4;
inline bool DomDistillerOptions::has_pagination_algo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DomDistillerOptions::set_has_pagination_algo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DomDistillerOptions::clear_has_pagination_algo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DomDistillerOptions::clear_pagination_algo() {
  pagination_algo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pagination_algo();
}
inline const ::std::string& DomDistillerOptions::pagination_algo() const {
  // @@protoc_insertion_point(field_get:dom_distiller.proto.DomDistillerOptions.pagination_algo)
  return pagination_algo_.GetNoArena();
}
inline void DomDistillerOptions::set_pagination_algo(const ::std::string& value) {
  set_has_pagination_algo();
  pagination_algo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.proto.DomDistillerOptions.pagination_algo)
}
#if LANG_CXX11
inline void DomDistillerOptions::set_pagination_algo(::std::string&& value) {
  set_has_pagination_algo();
  pagination_algo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.proto.DomDistillerOptions.pagination_algo)
}
#endif
inline void DomDistillerOptions::set_pagination_algo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pagination_algo();
  pagination_algo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.proto.DomDistillerOptions.pagination_algo)
}
inline void DomDistillerOptions::set_pagination_algo(const char* value, size_t size) {
  set_has_pagination_algo();
  pagination_algo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.proto.DomDistillerOptions.pagination_algo)
}
inline ::std::string* DomDistillerOptions::mutable_pagination_algo() {
  set_has_pagination_algo();
  // @@protoc_insertion_point(field_mutable:dom_distiller.proto.DomDistillerOptions.pagination_algo)
  return pagination_algo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DomDistillerOptions::release_pagination_algo() {
  // @@protoc_insertion_point(field_release:dom_distiller.proto.DomDistillerOptions.pagination_algo)
  clear_has_pagination_algo();
  return pagination_algo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DomDistillerOptions::set_allocated_pagination_algo(::std::string* pagination_algo) {
  if (pagination_algo != NULL) {
    set_has_pagination_algo();
  } else {
    clear_has_pagination_algo();
  }
  pagination_algo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pagination_algo);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.proto.DomDistillerOptions.pagination_algo)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dom_5fdistiller_2eproto__INCLUDED
