// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/config/test_config.proto

#ifndef PROTOBUF_perfetto_2fconfig_2ftest_5fconfig_2eproto__INCLUDED
#define PROTOBUF_perfetto_2fconfig_2ftest_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace perfetto {
namespace protos {
class TestConfig;
class TestConfigDefaultTypeInternal;
extern TestConfigDefaultTypeInternal _TestConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto

namespace perfetto {
namespace protos {

namespace protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto

// ===================================================================

class TestConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TestConfig) */ {
 public:
  TestConfig();
  virtual ~TestConfig();

  TestConfig(const TestConfig& from);

  inline TestConfig& operator=(const TestConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestConfig& default_instance();

  static inline const TestConfig* internal_default_instance() {
    return reinterpret_cast<const TestConfig*>(
               &_TestConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(TestConfig* other);

  // implements Message ----------------------------------------------

  inline TestConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  TestConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TestConfig& from);
  void MergeFrom(const TestConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 message_count = 1;
  bool has_message_count() const;
  void clear_message_count();
  static const int kMessageCountFieldNumber = 1;
  ::google::protobuf::uint32 message_count() const;
  void set_message_count(::google::protobuf::uint32 value);

  // optional uint32 max_messages_per_second = 2;
  bool has_max_messages_per_second() const;
  void clear_max_messages_per_second();
  static const int kMaxMessagesPerSecondFieldNumber = 2;
  ::google::protobuf::uint32 max_messages_per_second() const;
  void set_max_messages_per_second(::google::protobuf::uint32 value);

  // optional uint32 seed = 3;
  bool has_seed() const;
  void clear_seed();
  static const int kSeedFieldNumber = 3;
  ::google::protobuf::uint32 seed() const;
  void set_seed(::google::protobuf::uint32 value);

  // optional uint32 message_size = 4;
  bool has_message_size() const;
  void clear_message_size();
  static const int kMessageSizeFieldNumber = 4;
  ::google::protobuf::uint32 message_size() const;
  void set_message_size(::google::protobuf::uint32 value);

  // optional bool send_batch_on_register = 5;
  bool has_send_batch_on_register() const;
  void clear_send_batch_on_register();
  static const int kSendBatchOnRegisterFieldNumber = 5;
  bool send_batch_on_register() const;
  void set_send_batch_on_register(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.TestConfig)
 private:
  void set_has_message_count();
  void clear_has_message_count();
  void set_has_max_messages_per_second();
  void clear_has_max_messages_per_second();
  void set_has_seed();
  void clear_has_seed();
  void set_has_message_size();
  void clear_has_message_size();
  void set_has_send_batch_on_register();
  void clear_has_send_batch_on_register();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 message_count_;
  ::google::protobuf::uint32 max_messages_per_second_;
  ::google::protobuf::uint32 seed_;
  ::google::protobuf::uint32 message_size_;
  bool send_batch_on_register_;
  friend struct protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TestConfig

// optional uint32 message_count = 1;
inline bool TestConfig::has_message_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestConfig::set_has_message_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestConfig::clear_has_message_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestConfig::clear_message_count() {
  message_count_ = 0u;
  clear_has_message_count();
}
inline ::google::protobuf::uint32 TestConfig::message_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.message_count)
  return message_count_;
}
inline void TestConfig::set_message_count(::google::protobuf::uint32 value) {
  set_has_message_count();
  message_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.message_count)
}

// optional uint32 max_messages_per_second = 2;
inline bool TestConfig::has_max_messages_per_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestConfig::set_has_max_messages_per_second() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestConfig::clear_has_max_messages_per_second() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestConfig::clear_max_messages_per_second() {
  max_messages_per_second_ = 0u;
  clear_has_max_messages_per_second();
}
inline ::google::protobuf::uint32 TestConfig::max_messages_per_second() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.max_messages_per_second)
  return max_messages_per_second_;
}
inline void TestConfig::set_max_messages_per_second(::google::protobuf::uint32 value) {
  set_has_max_messages_per_second();
  max_messages_per_second_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.max_messages_per_second)
}

// optional uint32 seed = 3;
inline bool TestConfig::has_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestConfig::set_has_seed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestConfig::clear_has_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestConfig::clear_seed() {
  seed_ = 0u;
  clear_has_seed();
}
inline ::google::protobuf::uint32 TestConfig::seed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.seed)
  return seed_;
}
inline void TestConfig::set_seed(::google::protobuf::uint32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.seed)
}

// optional uint32 message_size = 4;
inline bool TestConfig::has_message_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestConfig::set_has_message_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestConfig::clear_has_message_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestConfig::clear_message_size() {
  message_size_ = 0u;
  clear_has_message_size();
}
inline ::google::protobuf::uint32 TestConfig::message_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.message_size)
  return message_size_;
}
inline void TestConfig::set_message_size(::google::protobuf::uint32 value) {
  set_has_message_size();
  message_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.message_size)
}

// optional bool send_batch_on_register = 5;
inline bool TestConfig::has_send_batch_on_register() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestConfig::set_has_send_batch_on_register() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TestConfig::clear_has_send_batch_on_register() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TestConfig::clear_send_batch_on_register() {
  send_batch_on_register_ = false;
  clear_has_send_batch_on_register();
}
inline bool TestConfig::send_batch_on_register() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.send_batch_on_register)
  return send_batch_on_register_;
}
inline void TestConfig::set_send_batch_on_register(bool value) {
  set_has_send_batch_on_register();
  send_batch_on_register_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.send_batch_on_register)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perfetto_2fconfig_2ftest_5fconfig_2eproto__INCLUDED
