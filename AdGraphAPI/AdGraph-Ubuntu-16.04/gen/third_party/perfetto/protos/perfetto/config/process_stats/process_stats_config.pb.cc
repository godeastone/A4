// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/config/process_stats/process_stats_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perfetto/config/process_stats/process_stats_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace perfetto {
namespace protos {
class ProcessStatsConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProcessStatsConfig> {
} _ProcessStatsConfig_default_instance_;

namespace protobuf_perfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ProcessStatsConfig_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProcessStatsConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_perfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto

bool ProcessStatsConfig_Quirks_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProcessStatsConfig_Quirks ProcessStatsConfig::QUIRKS_UNSPECIFIED;
const ProcessStatsConfig_Quirks ProcessStatsConfig::DISABLE_INITIAL_DUMP;
const ProcessStatsConfig_Quirks ProcessStatsConfig::DISABLE_ON_DEMAND;
const ProcessStatsConfig_Quirks ProcessStatsConfig::Quirks_MIN;
const ProcessStatsConfig_Quirks ProcessStatsConfig::Quirks_MAX;
const int ProcessStatsConfig::Quirks_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessStatsConfig::kQuirksFieldNumber;
const int ProcessStatsConfig::kScanAllProcessesOnStartFieldNumber;
const int ProcessStatsConfig::kRecordThreadNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessStatsConfig::ProcessStatsConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ProcessStatsConfig)
}
ProcessStatsConfig::ProcessStatsConfig(const ProcessStatsConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      quirks_(from.quirks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scan_all_processes_on_start_, &from.scan_all_processes_on_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_thread_names_) -
    reinterpret_cast<char*>(&scan_all_processes_on_start_)) + sizeof(record_thread_names_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStatsConfig)
}

void ProcessStatsConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&scan_all_processes_on_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_thread_names_) -
      reinterpret_cast<char*>(&scan_all_processes_on_start_)) + sizeof(record_thread_names_));
}

ProcessStatsConfig::~ProcessStatsConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStatsConfig)
  SharedDtor();
}

void ProcessStatsConfig::SharedDtor() {
}

void ProcessStatsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProcessStatsConfig& ProcessStatsConfig::default_instance() {
  protobuf_perfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessStatsConfig* ProcessStatsConfig::New(::google::protobuf::Arena* arena) const {
  ProcessStatsConfig* n = new ProcessStatsConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessStatsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStatsConfig)
  quirks_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&scan_all_processes_on_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&record_thread_names_) -
        reinterpret_cast<char*>(&scan_all_processes_on_start_)) + sizeof(record_thread_names_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProcessStatsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ProcessStatsConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ProcessStatsConfig_Quirks_IsValid(value)) {
            add_quirks(static_cast< ::perfetto::protos::ProcessStatsConfig_Quirks >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::perfetto::protos::ProcessStatsConfig_Quirks_IsValid,
                 &unknown_fields_stream,
                 this->mutable_quirks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool scan_all_processes_on_start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_scan_all_processes_on_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scan_all_processes_on_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool record_thread_names = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_record_thread_names();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_thread_names_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ProcessStatsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ProcessStatsConfig)
  return false;
#undef DO_
}

void ProcessStatsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ProcessStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
  for (int i = 0, n = this->quirks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->quirks(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool scan_all_processes_on_start = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->scan_all_processes_on_start(), output);
  }

  // optional bool record_thread_names = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->record_thread_names(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ProcessStatsConfig)
}

size_t ProcessStatsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStatsConfig)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->quirks_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->quirks(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool scan_all_processes_on_start = 2;
    if (has_scan_all_processes_on_start()) {
      total_size += 1 + 1;
    }

    // optional bool record_thread_names = 3;
    if (has_record_thread_names()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessStatsConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProcessStatsConfig*>(&from));
}

void ProcessStatsConfig::MergeFrom(const ProcessStatsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quirks_.MergeFrom(from.quirks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      scan_all_processes_on_start_ = from.scan_all_processes_on_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      record_thread_names_ = from.record_thread_names_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessStatsConfig::CopyFrom(const ProcessStatsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStatsConfig::IsInitialized() const {
  return true;
}

void ProcessStatsConfig::Swap(ProcessStatsConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessStatsConfig::InternalSwap(ProcessStatsConfig* other) {
  quirks_.InternalSwap(&other->quirks_);
  std::swap(scan_all_processes_on_start_, other->scan_all_processes_on_start_);
  std::swap(record_thread_names_, other->record_thread_names_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProcessStatsConfig::GetTypeName() const {
  return "perfetto.protos.ProcessStatsConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessStatsConfig

// repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
int ProcessStatsConfig::quirks_size() const {
  return quirks_.size();
}
void ProcessStatsConfig::clear_quirks() {
  quirks_.Clear();
}
::perfetto::protos::ProcessStatsConfig_Quirks ProcessStatsConfig::quirks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.quirks)
  return static_cast< ::perfetto::protos::ProcessStatsConfig_Quirks >(quirks_.Get(index));
}
void ProcessStatsConfig::set_quirks(int index, ::perfetto::protos::ProcessStatsConfig_Quirks value) {
  assert(::perfetto::protos::ProcessStatsConfig_Quirks_IsValid(value));
  quirks_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.quirks)
}
void ProcessStatsConfig::add_quirks(::perfetto::protos::ProcessStatsConfig_Quirks value) {
  assert(::perfetto::protos::ProcessStatsConfig_Quirks_IsValid(value));
  quirks_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessStatsConfig.quirks)
}
const ::google::protobuf::RepeatedField<int>&
ProcessStatsConfig::quirks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessStatsConfig.quirks)
  return quirks_;
}
::google::protobuf::RepeatedField<int>*
ProcessStatsConfig::mutable_quirks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessStatsConfig.quirks)
  return &quirks_;
}

// optional bool scan_all_processes_on_start = 2;
bool ProcessStatsConfig::has_scan_all_processes_on_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProcessStatsConfig::set_has_scan_all_processes_on_start() {
  _has_bits_[0] |= 0x00000001u;
}
void ProcessStatsConfig::clear_has_scan_all_processes_on_start() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProcessStatsConfig::clear_scan_all_processes_on_start() {
  scan_all_processes_on_start_ = false;
  clear_has_scan_all_processes_on_start();
}
bool ProcessStatsConfig::scan_all_processes_on_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.scan_all_processes_on_start)
  return scan_all_processes_on_start_;
}
void ProcessStatsConfig::set_scan_all_processes_on_start(bool value) {
  set_has_scan_all_processes_on_start();
  scan_all_processes_on_start_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.scan_all_processes_on_start)
}

// optional bool record_thread_names = 3;
bool ProcessStatsConfig::has_record_thread_names() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProcessStatsConfig::set_has_record_thread_names() {
  _has_bits_[0] |= 0x00000002u;
}
void ProcessStatsConfig::clear_has_record_thread_names() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProcessStatsConfig::clear_record_thread_names() {
  record_thread_names_ = false;
  clear_has_record_thread_names();
}
bool ProcessStatsConfig::record_thread_names() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.record_thread_names)
  return record_thread_names_;
}
void ProcessStatsConfig::set_record_thread_names(bool value) {
  set_has_record_thread_names();
  record_thread_names_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.record_thread_names)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)
