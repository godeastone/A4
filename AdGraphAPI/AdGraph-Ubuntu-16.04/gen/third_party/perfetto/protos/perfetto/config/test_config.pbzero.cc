// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/config/test_config.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_TestConfig[] = {
  {"message_count", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 1, 0},
  {"max_messages_per_second", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 2, 0},
  {"seed", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 3, 0},
  {"message_size", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 4, 0},
  {"send_batch_on_register", ::protozero::ProtoFieldDescriptor::Type::TYPE_BOOL, 5, 0},
};

const ::protozero::ProtoFieldDescriptor* TestConfig::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kMessageCountFieldNumber:
      return &kFields_TestConfig[0];
    case kMaxMessagesPerSecondFieldNumber:
      return &kFields_TestConfig[1];
    case kSeedFieldNumber:
      return &kFields_TestConfig[2];
    case kMessageSizeFieldNumber:
      return &kFields_TestConfig[3];
    case kSendBatchOnRegisterFieldNumber:
      return &kFields_TestConfig[4];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
