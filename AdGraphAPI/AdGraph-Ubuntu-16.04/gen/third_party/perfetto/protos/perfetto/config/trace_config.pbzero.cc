// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/config/trace_config.pbzero.h"
#include "perfetto/config/data_source_config.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_TraceConfig[] = {
  {"buffers", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 1, 1},
  {"data_sources", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 2, 1},
  {"duration_ms", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 3, 0},
  {"enable_extra_guardrails", ::protozero::ProtoFieldDescriptor::Type::TYPE_BOOL, 4, 0},
  {"lockdown_mode", ::protozero::ProtoFieldDescriptor::Type::TYPE_ENUM, 5, 0},
  {"producers", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 6, 1},
  {"statsd_metadata", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 7, 0},
  {"write_into_file", ::protozero::ProtoFieldDescriptor::Type::TYPE_BOOL, 8, 0},
  {"file_write_period_ms", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 9, 0},
  {"max_file_size_bytes", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 10, 0},
  {"guardrail_overrides", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 11, 0},
};

const ::protozero::ProtoFieldDescriptor* TraceConfig::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kBuffersFieldNumber:
      return &kFields_TraceConfig[0];
    case kDataSourcesFieldNumber:
      return &kFields_TraceConfig[1];
    case kDurationMsFieldNumber:
      return &kFields_TraceConfig[2];
    case kEnableExtraGuardrailsFieldNumber:
      return &kFields_TraceConfig[3];
    case kLockdownModeFieldNumber:
      return &kFields_TraceConfig[4];
    case kProducersFieldNumber:
      return &kFields_TraceConfig[5];
    case kStatsdMetadataFieldNumber:
      return &kFields_TraceConfig[6];
    case kWriteIntoFileFieldNumber:
      return &kFields_TraceConfig[7];
    case kFileWritePeriodMsFieldNumber:
      return &kFields_TraceConfig[8];
    case kMaxFileSizeBytesFieldNumber:
      return &kFields_TraceConfig[9];
    case kGuardrailOverridesFieldNumber:
      return &kFields_TraceConfig[10];
    default:
      return &kInvalidField;
  }
}

TraceConfig_BufferConfig* TraceConfig::add_buffers() {
  return BeginNestedMessage<TraceConfig_BufferConfig>(1);
}

TraceConfig_DataSource* TraceConfig::add_data_sources() {
  return BeginNestedMessage<TraceConfig_DataSource>(2);
}

TraceConfig_ProducerConfig* TraceConfig::add_producers() {
  return BeginNestedMessage<TraceConfig_ProducerConfig>(6);
}

TraceConfig_StatsdMetadata* TraceConfig::set_statsd_metadata() {
  return BeginNestedMessage<TraceConfig_StatsdMetadata>(7);
}

TraceConfig_GuardrailOverrides* TraceConfig::set_guardrail_overrides() {
  return BeginNestedMessage<TraceConfig_GuardrailOverrides>(11);
}

static const ::protozero::ProtoFieldDescriptor kFields_TraceConfig_GuardrailOverrides[] = {
  {"max_upload_per_day_bytes", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
};

const ::protozero::ProtoFieldDescriptor* TraceConfig_GuardrailOverrides::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kMaxUploadPerDayBytesFieldNumber:
      return &kFields_TraceConfig_GuardrailOverrides[0];
    default:
      return &kInvalidField;
  }
}

static const ::protozero::ProtoFieldDescriptor kFields_TraceConfig_StatsdMetadata[] = {
  {"triggering_alert_id", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 1, 0},
  {"triggering_config_uid", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 2, 0},
  {"triggering_config_id", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 3, 0},
};

const ::protozero::ProtoFieldDescriptor* TraceConfig_StatsdMetadata::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kTriggeringAlertIdFieldNumber:
      return &kFields_TraceConfig_StatsdMetadata[0];
    case kTriggeringConfigUidFieldNumber:
      return &kFields_TraceConfig_StatsdMetadata[1];
    case kTriggeringConfigIdFieldNumber:
      return &kFields_TraceConfig_StatsdMetadata[2];
    default:
      return &kInvalidField;
  }
}

static const ::protozero::ProtoFieldDescriptor kFields_TraceConfig_ProducerConfig[] = {
  {"producer_name", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 1, 0},
  {"shm_size_kb", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 2, 0},
  {"page_size_kb", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 3, 0},
};

const ::protozero::ProtoFieldDescriptor* TraceConfig_ProducerConfig::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kProducerNameFieldNumber:
      return &kFields_TraceConfig_ProducerConfig[0];
    case kShmSizeKbFieldNumber:
      return &kFields_TraceConfig_ProducerConfig[1];
    case kPageSizeKbFieldNumber:
      return &kFields_TraceConfig_ProducerConfig[2];
    default:
      return &kInvalidField;
  }
}

static const ::protozero::ProtoFieldDescriptor kFields_TraceConfig_DataSource[] = {
  {"config", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 1, 0},
  {"producer_name_filter", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 2, 1},
};

const ::protozero::ProtoFieldDescriptor* TraceConfig_DataSource::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kConfigFieldNumber:
      return &kFields_TraceConfig_DataSource[0];
    case kProducerNameFilterFieldNumber:
      return &kFields_TraceConfig_DataSource[1];
    default:
      return &kInvalidField;
  }
}

DataSourceConfig* TraceConfig_DataSource::set_config() {
  return BeginNestedMessage<DataSourceConfig>(1);
}

static const ::protozero::ProtoFieldDescriptor kFields_TraceConfig_BufferConfig[] = {
  {"size_kb", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 1, 0},
  {"fill_policy", ::protozero::ProtoFieldDescriptor::Type::TYPE_ENUM, 4, 0},
};

const ::protozero::ProtoFieldDescriptor* TraceConfig_BufferConfig::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kSizeKbFieldNumber:
      return &kFields_TraceConfig_BufferConfig[0];
    case kFillPolicyFieldNumber:
      return &kFields_TraceConfig_BufferConfig[1];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
