// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/config/test_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perfetto/config/test_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace perfetto {
namespace protos {
class TestConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestConfig> {
} _TestConfig_default_instance_;

namespace protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _TestConfig_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TestConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestConfig::kMessageCountFieldNumber;
const int TestConfig::kMaxMessagesPerSecondFieldNumber;
const int TestConfig::kSeedFieldNumber;
const int TestConfig::kMessageSizeFieldNumber;
const int TestConfig::kSendBatchOnRegisterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestConfig::TestConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TestConfig)
}
TestConfig::TestConfig(const TestConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_count_, &from.message_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_batch_on_register_) -
    reinterpret_cast<char*>(&message_count_)) + sizeof(send_batch_on_register_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestConfig)
}

void TestConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&message_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_batch_on_register_) -
      reinterpret_cast<char*>(&message_count_)) + sizeof(send_batch_on_register_));
}

TestConfig::~TestConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestConfig)
  SharedDtor();
}

void TestConfig::SharedDtor() {
}

void TestConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestConfig& TestConfig::default_instance() {
  protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestConfig* TestConfig::New(::google::protobuf::Arena* arena) const {
  TestConfig* n = new TestConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestConfig)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&message_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_batch_on_register_) -
        reinterpret_cast<char*>(&message_count_)) + sizeof(send_batch_on_register_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TestConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_message_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_messages_per_second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_max_messages_per_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_messages_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 message_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_message_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_batch_on_register = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_send_batch_on_register();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_batch_on_register_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TestConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TestConfig)
  return false;
#undef DO_
}

void TestConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_count(), output);
  }

  // optional uint32 max_messages_per_second = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_messages_per_second(), output);
  }

  // optional uint32 seed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seed(), output);
  }

  // optional uint32 message_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->message_size(), output);
  }

  // optional bool send_batch_on_register = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->send_batch_on_register(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TestConfig)
}

size_t TestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestConfig)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 message_count = 1;
    if (has_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_count());
    }

    // optional uint32 max_messages_per_second = 2;
    if (has_max_messages_per_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_messages_per_second());
    }

    // optional uint32 seed = 3;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seed());
    }

    // optional uint32 message_size = 4;
    if (has_message_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_size());
    }

    // optional bool send_batch_on_register = 5;
    if (has_send_batch_on_register()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestConfig*>(&from));
}

void TestConfig::MergeFrom(const TestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      message_count_ = from.message_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_messages_per_second_ = from.max_messages_per_second_;
    }
    if (cached_has_bits & 0x00000004u) {
      seed_ = from.seed_;
    }
    if (cached_has_bits & 0x00000008u) {
      message_size_ = from.message_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      send_batch_on_register_ = from.send_batch_on_register_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestConfig::CopyFrom(const TestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConfig::IsInitialized() const {
  return true;
}

void TestConfig::Swap(TestConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestConfig::InternalSwap(TestConfig* other) {
  std::swap(message_count_, other->message_count_);
  std::swap(max_messages_per_second_, other->max_messages_per_second_);
  std::swap(seed_, other->seed_);
  std::swap(message_size_, other->message_size_);
  std::swap(send_batch_on_register_, other->send_batch_on_register_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TestConfig::GetTypeName() const {
  return "perfetto.protos.TestConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestConfig

// optional uint32 message_count = 1;
bool TestConfig::has_message_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestConfig::set_has_message_count() {
  _has_bits_[0] |= 0x00000001u;
}
void TestConfig::clear_has_message_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestConfig::clear_message_count() {
  message_count_ = 0u;
  clear_has_message_count();
}
::google::protobuf::uint32 TestConfig::message_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.message_count)
  return message_count_;
}
void TestConfig::set_message_count(::google::protobuf::uint32 value) {
  set_has_message_count();
  message_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.message_count)
}

// optional uint32 max_messages_per_second = 2;
bool TestConfig::has_max_messages_per_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TestConfig::set_has_max_messages_per_second() {
  _has_bits_[0] |= 0x00000002u;
}
void TestConfig::clear_has_max_messages_per_second() {
  _has_bits_[0] &= ~0x00000002u;
}
void TestConfig::clear_max_messages_per_second() {
  max_messages_per_second_ = 0u;
  clear_has_max_messages_per_second();
}
::google::protobuf::uint32 TestConfig::max_messages_per_second() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.max_messages_per_second)
  return max_messages_per_second_;
}
void TestConfig::set_max_messages_per_second(::google::protobuf::uint32 value) {
  set_has_max_messages_per_second();
  max_messages_per_second_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.max_messages_per_second)
}

// optional uint32 seed = 3;
bool TestConfig::has_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TestConfig::set_has_seed() {
  _has_bits_[0] |= 0x00000004u;
}
void TestConfig::clear_has_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
void TestConfig::clear_seed() {
  seed_ = 0u;
  clear_has_seed();
}
::google::protobuf::uint32 TestConfig::seed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.seed)
  return seed_;
}
void TestConfig::set_seed(::google::protobuf::uint32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.seed)
}

// optional uint32 message_size = 4;
bool TestConfig::has_message_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TestConfig::set_has_message_size() {
  _has_bits_[0] |= 0x00000008u;
}
void TestConfig::clear_has_message_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void TestConfig::clear_message_size() {
  message_size_ = 0u;
  clear_has_message_size();
}
::google::protobuf::uint32 TestConfig::message_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.message_size)
  return message_size_;
}
void TestConfig::set_message_size(::google::protobuf::uint32 value) {
  set_has_message_size();
  message_size_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.message_size)
}

// optional bool send_batch_on_register = 5;
bool TestConfig::has_send_batch_on_register() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TestConfig::set_has_send_batch_on_register() {
  _has_bits_[0] |= 0x00000010u;
}
void TestConfig::clear_has_send_batch_on_register() {
  _has_bits_[0] &= ~0x00000010u;
}
void TestConfig::clear_send_batch_on_register() {
  send_batch_on_register_ = false;
  clear_has_send_batch_on_register();
}
bool TestConfig::send_batch_on_register() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.send_batch_on_register)
  return send_batch_on_register_;
}
void TestConfig::set_send_batch_on_register(bool value) {
  set_has_send_batch_on_register();
  send_batch_on_register_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.send_batch_on_register)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)
