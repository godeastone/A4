// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/config/data_source_config.pbzero.h"
#include "perfetto/config/chrome/chrome_config.pbzero.h"
#include "perfetto/config/ftrace/ftrace_config.pbzero.h"
#include "perfetto/config/inode_file/inode_file_config.pbzero.h"
#include "perfetto/config/process_stats/process_stats_config.pbzero.h"
#include "perfetto/config/test_config.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_DataSourceConfig[] = {
  {"name", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 1, 0},
  {"target_buffer", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 2, 0},
  {"trace_duration_ms", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 3, 0},
  {"ftrace_config", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 100, 0},
  {"chrome_config", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 101, 0},
  {"inode_file_config", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 102, 0},
  {"process_stats_config", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 103, 0},
  {"legacy_config", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 1000, 0},
  {"for_testing", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 536870911, 0},
};

const ::protozero::ProtoFieldDescriptor* DataSourceConfig::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kNameFieldNumber:
      return &kFields_DataSourceConfig[0];
    case kTargetBufferFieldNumber:
      return &kFields_DataSourceConfig[1];
    case kTraceDurationMsFieldNumber:
      return &kFields_DataSourceConfig[2];
    case kFtraceConfigFieldNumber:
      return &kFields_DataSourceConfig[3];
    case kChromeConfigFieldNumber:
      return &kFields_DataSourceConfig[4];
    case kInodeFileConfigFieldNumber:
      return &kFields_DataSourceConfig[5];
    case kProcessStatsConfigFieldNumber:
      return &kFields_DataSourceConfig[6];
    case kLegacyConfigFieldNumber:
      return &kFields_DataSourceConfig[7];
    case kForTestingFieldNumber:
      return &kFields_DataSourceConfig[8];
    default:
      return &kInvalidField;
  }
}

FtraceConfig* DataSourceConfig::set_ftrace_config() {
  return BeginNestedMessage<FtraceConfig>(100);
}

ChromeConfig* DataSourceConfig::set_chrome_config() {
  return BeginNestedMessage<ChromeConfig>(101);
}

InodeFileConfig* DataSourceConfig::set_inode_file_config() {
  return BeginNestedMessage<InodeFileConfig>(102);
}

ProcessStatsConfig* DataSourceConfig::set_process_stats_config() {
  return BeginNestedMessage<ProcessStatsConfig>(103);
}

TestConfig* DataSourceConfig::set_for_testing() {
  return BeginNestedMessage<TestConfig>(536870911);
}

} // Namespace.
} // Namespace.
} // Namespace.
