// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/binder_set_priority.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_BinderSetPriorityFtraceEvent[] = {
  {"proc", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 1, 0},
  {"thread", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 2, 0},
  {"old_prio", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 3, 0},
  {"new_prio", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 4, 0},
  {"desired_prio", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 5, 0},
};

const ::protozero::ProtoFieldDescriptor* BinderSetPriorityFtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kProcFieldNumber:
      return &kFields_BinderSetPriorityFtraceEvent[0];
    case kThreadFieldNumber:
      return &kFields_BinderSetPriorityFtraceEvent[1];
    case kOldPrioFieldNumber:
      return &kFields_BinderSetPriorityFtraceEvent[2];
    case kNewPrioFieldNumber:
      return &kFields_BinderSetPriorityFtraceEvent[3];
    case kDesiredPrioFieldNumber:
      return &kFields_BinderSetPriorityFtraceEvent[4];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
