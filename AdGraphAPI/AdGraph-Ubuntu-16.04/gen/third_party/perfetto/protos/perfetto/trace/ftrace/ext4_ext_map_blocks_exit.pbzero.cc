// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/ext4_ext_map_blocks_exit.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_Ext4ExtMapBlocksExitFtraceEvent[] = {
  {"dev", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
  {"ino", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 2, 0},
  {"flags", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 3, 0},
  {"pblk", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 4, 0},
  {"lblk", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 5, 0},
  {"len", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 6, 0},
  {"mflags", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 7, 0},
  {"ret", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 8, 0},
};

const ::protozero::ProtoFieldDescriptor* Ext4ExtMapBlocksExitFtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kDevFieldNumber:
      return &kFields_Ext4ExtMapBlocksExitFtraceEvent[0];
    case kInoFieldNumber:
      return &kFields_Ext4ExtMapBlocksExitFtraceEvent[1];
    case kFlagsFieldNumber:
      return &kFields_Ext4ExtMapBlocksExitFtraceEvent[2];
    case kPblkFieldNumber:
      return &kFields_Ext4ExtMapBlocksExitFtraceEvent[3];
    case kLblkFieldNumber:
      return &kFields_Ext4ExtMapBlocksExitFtraceEvent[4];
    case kLenFieldNumber:
      return &kFields_Ext4ExtMapBlocksExitFtraceEvent[5];
    case kMflagsFieldNumber:
      return &kFields_Ext4ExtMapBlocksExitFtraceEvent[6];
    case kRetFieldNumber:
      return &kFields_Ext4ExtMapBlocksExitFtraceEvent[7];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
