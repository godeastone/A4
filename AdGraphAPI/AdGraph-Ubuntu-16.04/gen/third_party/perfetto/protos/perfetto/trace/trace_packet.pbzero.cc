// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/trace_packet.pbzero.h"
#include "perfetto/trace/clock_snapshot.pbzero.h"
#include "perfetto/trace/trace_stats.pbzero.h"
#include "perfetto/trace/test_event.pbzero.h"
#include "perfetto/config/trace_config.pbzero.h"
#include "perfetto/trace/chrome/chrome_trace_event.pbzero.h"
#include "perfetto/trace/filesystem/inode_file_map.pbzero.h"
#include "perfetto/trace/ps/process_tree.pbzero.h"
#include "perfetto/trace/ftrace/ftrace_event_bundle.pbzero.h"
#include "perfetto/trace/ftrace/ftrace_stats.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_TracePacket[] = {
  {"ftrace_events", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 1, 0},
  {"process_tree", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 2, 0},
  {"inode_file_map", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 4, 0},
  {"chrome_events", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 5, 0},
  {"clock_snapshot", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 6, 0},
  {"trace_config", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 33, 0},
  {"ftrace_stats", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 34, 0},
  {"trace_stats", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 35, 0},
  {"for_testing", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 536870911, 0},
  {"trusted_uid", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 3, 0},
};

const ::protozero::ProtoFieldDescriptor* TracePacket::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kFtraceEventsFieldNumber:
      return &kFields_TracePacket[0];
    case kProcessTreeFieldNumber:
      return &kFields_TracePacket[1];
    case kInodeFileMapFieldNumber:
      return &kFields_TracePacket[2];
    case kChromeEventsFieldNumber:
      return &kFields_TracePacket[3];
    case kClockSnapshotFieldNumber:
      return &kFields_TracePacket[4];
    case kTraceConfigFieldNumber:
      return &kFields_TracePacket[5];
    case kFtraceStatsFieldNumber:
      return &kFields_TracePacket[6];
    case kTraceStatsFieldNumber:
      return &kFields_TracePacket[7];
    case kForTestingFieldNumber:
      return &kFields_TracePacket[8];
    case kTrustedUidFieldNumber:
      return &kFields_TracePacket[9];
    default:
      return &kInvalidField;
  }
}

FtraceEventBundle* TracePacket::set_ftrace_events() {
  return BeginNestedMessage<FtraceEventBundle>(1);
}

ProcessTree* TracePacket::set_process_tree() {
  return BeginNestedMessage<ProcessTree>(2);
}

InodeFileMap* TracePacket::set_inode_file_map() {
  return BeginNestedMessage<InodeFileMap>(4);
}

ChromeEventBundle* TracePacket::set_chrome_events() {
  return BeginNestedMessage<ChromeEventBundle>(5);
}

ClockSnapshot* TracePacket::set_clock_snapshot() {
  return BeginNestedMessage<ClockSnapshot>(6);
}

TraceConfig* TracePacket::set_trace_config() {
  return BeginNestedMessage<TraceConfig>(33);
}

FtraceStats* TracePacket::set_ftrace_stats() {
  return BeginNestedMessage<FtraceStats>(34);
}

TraceStats* TracePacket::set_trace_stats() {
  return BeginNestedMessage<TraceStats>(35);
}

TestEvent* TracePacket::set_for_testing() {
  return BeginNestedMessage<TestEvent>(536870911);
}

} // Namespace.
} // Namespace.
} // Namespace.
