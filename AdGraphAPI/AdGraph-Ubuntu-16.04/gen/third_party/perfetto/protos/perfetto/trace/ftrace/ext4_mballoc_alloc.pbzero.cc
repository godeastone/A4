// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/ext4_mballoc_alloc.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_Ext4MballocAllocFtraceEvent[] = {
  {"dev", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
  {"ino", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 2, 0},
  {"orig_logical", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 3, 0},
  {"orig_start", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 4, 0},
  {"orig_group", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 5, 0},
  {"orig_len", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 6, 0},
  {"goal_logical", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 7, 0},
  {"goal_start", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 8, 0},
  {"goal_group", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 9, 0},
  {"goal_len", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 10, 0},
  {"result_logical", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 11, 0},
  {"result_start", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 12, 0},
  {"result_group", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 13, 0},
  {"result_len", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 14, 0},
  {"found", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 15, 0},
  {"groups", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 16, 0},
  {"buddy", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 17, 0},
  {"flags", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 18, 0},
  {"tail", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 19, 0},
  {"cr", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 20, 0},
};

const ::protozero::ProtoFieldDescriptor* Ext4MballocAllocFtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kDevFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[0];
    case kInoFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[1];
    case kOrigLogicalFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[2];
    case kOrigStartFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[3];
    case kOrigGroupFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[4];
    case kOrigLenFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[5];
    case kGoalLogicalFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[6];
    case kGoalStartFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[7];
    case kGoalGroupFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[8];
    case kGoalLenFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[9];
    case kResultLogicalFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[10];
    case kResultStartFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[11];
    case kResultGroupFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[12];
    case kResultLenFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[13];
    case kFoundFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[14];
    case kGroupsFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[15];
    case kBuddyFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[16];
    case kFlagsFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[17];
    case kTailFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[18];
    case kCrFieldNumber:
      return &kFields_Ext4MballocAllocFtraceEvent[19];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
