// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/lowmemory_kill.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_LowmemoryKillFtraceEvent[] = {
  {"comm", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 1, 0},
  {"pid", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 2, 0},
  {"pagecache_size", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 3, 0},
  {"pagecache_limit", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 4, 0},
  {"free", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 5, 0},
};

const ::protozero::ProtoFieldDescriptor* LowmemoryKillFtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kCommFieldNumber:
      return &kFields_LowmemoryKillFtraceEvent[0];
    case kPidFieldNumber:
      return &kFields_LowmemoryKillFtraceEvent[1];
    case kPagecacheSizeFieldNumber:
      return &kFields_LowmemoryKillFtraceEvent[2];
    case kPagecacheLimitFieldNumber:
      return &kFields_LowmemoryKillFtraceEvent[3];
    case kFreeFieldNumber:
      return &kFields_LowmemoryKillFtraceEvent[4];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
