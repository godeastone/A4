// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/chrome/chrome_trace_packet.proto

#ifndef PROTOBUF_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto__INCLUDED
#define PROTOBUF_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "perfetto/config/trace_config.pb.h"
#include "perfetto/trace/chrome/chrome_trace_event.pb.h"
#include "perfetto/trace/clock_snapshot.pb.h"
#include "perfetto/trace/trace_stats.pb.h"
// @@protoc_insertion_point(includes)
namespace perfetto {
namespace protos {
class ChromeTracePacket;
class ChromeTracePacketDefaultTypeInternal;
extern ChromeTracePacketDefaultTypeInternal _ChromeTracePacket_default_instance_;
}  // namespace protos
}  // namespace perfetto

namespace perfetto {
namespace protos {

namespace protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto

// ===================================================================

class ChromeTracePacket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeTracePacket) */ {
 public:
  ChromeTracePacket();
  virtual ~ChromeTracePacket();

  ChromeTracePacket(const ChromeTracePacket& from);

  inline ChromeTracePacket& operator=(const ChromeTracePacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChromeTracePacket& default_instance();

  static inline const ChromeTracePacket* internal_default_instance() {
    return reinterpret_cast<const ChromeTracePacket*>(
               &_ChromeTracePacket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeTracePacket* other);

  // implements Message ----------------------------------------------

  inline ChromeTracePacket* New() const PROTOBUF_FINAL { return New(NULL); }

  ChromeTracePacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ChromeTracePacket& from);
  void MergeFrom(const ChromeTracePacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeTracePacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .perfetto.protos.ChromeEventBundle chrome_events = 5;
  bool has_chrome_events() const;
  void clear_chrome_events();
  static const int kChromeEventsFieldNumber = 5;
  const ::perfetto::protos::ChromeEventBundle& chrome_events() const;
  ::perfetto::protos::ChromeEventBundle* mutable_chrome_events();
  ::perfetto::protos::ChromeEventBundle* release_chrome_events();
  void set_allocated_chrome_events(::perfetto::protos::ChromeEventBundle* chrome_events);

  // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
  bool has_clock_snapshot() const;
  void clear_clock_snapshot();
  static const int kClockSnapshotFieldNumber = 6;
  const ::perfetto::protos::ClockSnapshot& clock_snapshot() const;
  ::perfetto::protos::ClockSnapshot* mutable_clock_snapshot();
  ::perfetto::protos::ClockSnapshot* release_clock_snapshot();
  void set_allocated_clock_snapshot(::perfetto::protos::ClockSnapshot* clock_snapshot);

  // .perfetto.protos.TraceConfig trace_config = 33;
  bool has_trace_config() const;
  void clear_trace_config();
  static const int kTraceConfigFieldNumber = 33;
  const ::perfetto::protos::TraceConfig& trace_config() const;
  ::perfetto::protos::TraceConfig* mutable_trace_config();
  ::perfetto::protos::TraceConfig* release_trace_config();
  void set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config);

  // .perfetto.protos.TraceStats trace_stats = 35;
  bool has_trace_stats() const;
  void clear_trace_stats();
  static const int kTraceStatsFieldNumber = 35;
  const ::perfetto::protos::TraceStats& trace_stats() const;
  ::perfetto::protos::TraceStats* mutable_trace_stats();
  ::perfetto::protos::TraceStats* release_trace_stats();
  void set_allocated_trace_stats(::perfetto::protos::TraceStats* trace_stats);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeTracePacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::perfetto::protos::ChromeEventBundle* chrome_events_;
  ::perfetto::protos::ClockSnapshot* clock_snapshot_;
  ::perfetto::protos::TraceConfig* trace_config_;
  ::perfetto::protos::TraceStats* trace_stats_;
  mutable int _cached_size_;
  friend struct protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeTracePacket

// .perfetto.protos.ChromeEventBundle chrome_events = 5;
inline bool ChromeTracePacket::has_chrome_events() const {
  return this != internal_default_instance() && chrome_events_ != NULL;
}
inline void ChromeTracePacket::clear_chrome_events() {
  if (GetArenaNoVirtual() == NULL && chrome_events_ != NULL) delete chrome_events_;
  chrome_events_ = NULL;
}
inline const ::perfetto::protos::ChromeEventBundle& ChromeTracePacket::chrome_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.chrome_events)
  return chrome_events_ != NULL ? *chrome_events_
                         : *::perfetto::protos::ChromeEventBundle::internal_default_instance();
}
inline ::perfetto::protos::ChromeEventBundle* ChromeTracePacket::mutable_chrome_events() {
  
  if (chrome_events_ == NULL) {
    chrome_events_ = new ::perfetto::protos::ChromeEventBundle;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.chrome_events)
  return chrome_events_;
}
inline ::perfetto::protos::ChromeEventBundle* ChromeTracePacket::release_chrome_events() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.chrome_events)
  
  ::perfetto::protos::ChromeEventBundle* temp = chrome_events_;
  chrome_events_ = NULL;
  return temp;
}
inline void ChromeTracePacket::set_allocated_chrome_events(::perfetto::protos::ChromeEventBundle* chrome_events) {
  delete chrome_events_;
  chrome_events_ = chrome_events;
  if (chrome_events) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.chrome_events)
}

// .perfetto.protos.TraceConfig trace_config = 33;
inline bool ChromeTracePacket::has_trace_config() const {
  return this != internal_default_instance() && trace_config_ != NULL;
}
inline void ChromeTracePacket::clear_trace_config() {
  if (GetArenaNoVirtual() == NULL && trace_config_ != NULL) delete trace_config_;
  trace_config_ = NULL;
}
inline const ::perfetto::protos::TraceConfig& ChromeTracePacket::trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.trace_config)
  return trace_config_ != NULL ? *trace_config_
                         : *::perfetto::protos::TraceConfig::internal_default_instance();
}
inline ::perfetto::protos::TraceConfig* ChromeTracePacket::mutable_trace_config() {
  
  if (trace_config_ == NULL) {
    trace_config_ = new ::perfetto::protos::TraceConfig;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.trace_config)
  return trace_config_;
}
inline ::perfetto::protos::TraceConfig* ChromeTracePacket::release_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.trace_config)
  
  ::perfetto::protos::TraceConfig* temp = trace_config_;
  trace_config_ = NULL;
  return temp;
}
inline void ChromeTracePacket::set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config) {
  delete trace_config_;
  trace_config_ = trace_config;
  if (trace_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.trace_config)
}

// .perfetto.protos.TraceStats trace_stats = 35;
inline bool ChromeTracePacket::has_trace_stats() const {
  return this != internal_default_instance() && trace_stats_ != NULL;
}
inline void ChromeTracePacket::clear_trace_stats() {
  if (GetArenaNoVirtual() == NULL && trace_stats_ != NULL) delete trace_stats_;
  trace_stats_ = NULL;
}
inline const ::perfetto::protos::TraceStats& ChromeTracePacket::trace_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.trace_stats)
  return trace_stats_ != NULL ? *trace_stats_
                         : *::perfetto::protos::TraceStats::internal_default_instance();
}
inline ::perfetto::protos::TraceStats* ChromeTracePacket::mutable_trace_stats() {
  
  if (trace_stats_ == NULL) {
    trace_stats_ = new ::perfetto::protos::TraceStats;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.trace_stats)
  return trace_stats_;
}
inline ::perfetto::protos::TraceStats* ChromeTracePacket::release_trace_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.trace_stats)
  
  ::perfetto::protos::TraceStats* temp = trace_stats_;
  trace_stats_ = NULL;
  return temp;
}
inline void ChromeTracePacket::set_allocated_trace_stats(::perfetto::protos::TraceStats* trace_stats) {
  delete trace_stats_;
  trace_stats_ = trace_stats;
  if (trace_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.trace_stats)
}

// .perfetto.protos.ClockSnapshot clock_snapshot = 6;
inline bool ChromeTracePacket::has_clock_snapshot() const {
  return this != internal_default_instance() && clock_snapshot_ != NULL;
}
inline void ChromeTracePacket::clear_clock_snapshot() {
  if (GetArenaNoVirtual() == NULL && clock_snapshot_ != NULL) delete clock_snapshot_;
  clock_snapshot_ = NULL;
}
inline const ::perfetto::protos::ClockSnapshot& ChromeTracePacket::clock_snapshot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.clock_snapshot)
  return clock_snapshot_ != NULL ? *clock_snapshot_
                         : *::perfetto::protos::ClockSnapshot::internal_default_instance();
}
inline ::perfetto::protos::ClockSnapshot* ChromeTracePacket::mutable_clock_snapshot() {
  
  if (clock_snapshot_ == NULL) {
    clock_snapshot_ = new ::perfetto::protos::ClockSnapshot;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.clock_snapshot)
  return clock_snapshot_;
}
inline ::perfetto::protos::ClockSnapshot* ChromeTracePacket::release_clock_snapshot() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.clock_snapshot)
  
  ::perfetto::protos::ClockSnapshot* temp = clock_snapshot_;
  clock_snapshot_ = NULL;
  return temp;
}
inline void ChromeTracePacket::set_allocated_clock_snapshot(::perfetto::protos::ClockSnapshot* clock_snapshot) {
  delete clock_snapshot_;
  clock_snapshot_ = clock_snapshot;
  if (clock_snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.clock_snapshot)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto__INCLUDED
