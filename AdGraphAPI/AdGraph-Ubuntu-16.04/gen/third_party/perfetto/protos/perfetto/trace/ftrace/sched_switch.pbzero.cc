// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/sched_switch.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_SchedSwitchFtraceEvent[] = {
  {"prev_comm", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 1, 0},
  {"prev_pid", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 2, 0},
  {"prev_prio", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 3, 0},
  {"prev_state", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 4, 0},
  {"next_comm", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 5, 0},
  {"next_pid", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 6, 0},
  {"next_prio", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 7, 0},
};

const ::protozero::ProtoFieldDescriptor* SchedSwitchFtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kPrevCommFieldNumber:
      return &kFields_SchedSwitchFtraceEvent[0];
    case kPrevPidFieldNumber:
      return &kFields_SchedSwitchFtraceEvent[1];
    case kPrevPrioFieldNumber:
      return &kFields_SchedSwitchFtraceEvent[2];
    case kPrevStateFieldNumber:
      return &kFields_SchedSwitchFtraceEvent[3];
    case kNextCommFieldNumber:
      return &kFields_SchedSwitchFtraceEvent[4];
    case kNextPidFieldNumber:
      return &kFields_SchedSwitchFtraceEvent[5];
    case kNextPrioFieldNumber:
      return &kFields_SchedSwitchFtraceEvent[6];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
