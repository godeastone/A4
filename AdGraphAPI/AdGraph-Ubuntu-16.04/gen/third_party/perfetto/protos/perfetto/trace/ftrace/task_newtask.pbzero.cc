// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/task_newtask.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_TaskNewtaskFtraceEvent[] = {
  {"pid", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 1, 0},
  {"comm", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 2, 0},
  {"clone_flags", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 3, 0},
  {"oom_score_adj", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 4, 0},
};

const ::protozero::ProtoFieldDescriptor* TaskNewtaskFtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kPidFieldNumber:
      return &kFields_TaskNewtaskFtraceEvent[0];
    case kCommFieldNumber:
      return &kFields_TaskNewtaskFtraceEvent[1];
    case kCloneFlagsFieldNumber:
      return &kFields_TaskNewtaskFtraceEvent[2];
    case kOomScoreAdjFieldNumber:
      return &kFields_TaskNewtaskFtraceEvent[3];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
