// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/chrome/chrome_trace_packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perfetto/trace/chrome/chrome_trace_packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace perfetto {
namespace protos {
class ChromeTracePacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeTracePacket> {
} _ChromeTracePacket_default_instance_;

namespace protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ChromeTracePacket_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::perfetto::protos::protobuf_perfetto_2fconfig_2ftrace_5fconfig_2eproto::InitDefaults();
  ::perfetto::protos::protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::InitDefaults();
  ::perfetto::protos::protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto::InitDefaults();
  ::perfetto::protos::protobuf_perfetto_2ftrace_2ftrace_5fstats_2eproto::InitDefaults();
  _ChromeTracePacket_default_instance_.DefaultConstruct();
  _ChromeTracePacket_default_instance_.get_mutable()->chrome_events_ = const_cast< ::perfetto::protos::ChromeEventBundle*>(
      ::perfetto::protos::ChromeEventBundle::internal_default_instance());
  _ChromeTracePacket_default_instance_.get_mutable()->trace_config_ = const_cast< ::perfetto::protos::TraceConfig*>(
      ::perfetto::protos::TraceConfig::internal_default_instance());
  _ChromeTracePacket_default_instance_.get_mutable()->trace_stats_ = const_cast< ::perfetto::protos::TraceStats*>(
      ::perfetto::protos::TraceStats::internal_default_instance());
  _ChromeTracePacket_default_instance_.get_mutable()->clock_snapshot_ = const_cast< ::perfetto::protos::ClockSnapshot*>(
      ::perfetto::protos::ClockSnapshot::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::perfetto::protos::protobuf_perfetto_2fconfig_2ftrace_5fconfig_2eproto::AddDescriptors();
  ::perfetto::protos::protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::AddDescriptors();
  ::perfetto::protos::protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto::AddDescriptors();
  ::perfetto::protos::protobuf_perfetto_2ftrace_2ftrace_5fstats_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeTracePacket::kChromeEventsFieldNumber;
const int ChromeTracePacket::kTraceConfigFieldNumber;
const int ChromeTracePacket::kTraceStatsFieldNumber;
const int ChromeTracePacket::kClockSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeTracePacket::ChromeTracePacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeTracePacket)
}
ChromeTracePacket::ChromeTracePacket(const ChromeTracePacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chrome_events()) {
    chrome_events_ = new ::perfetto::protos::ChromeEventBundle(*from.chrome_events_);
  } else {
    chrome_events_ = NULL;
  }
  if (from.has_clock_snapshot()) {
    clock_snapshot_ = new ::perfetto::protos::ClockSnapshot(*from.clock_snapshot_);
  } else {
    clock_snapshot_ = NULL;
  }
  if (from.has_trace_config()) {
    trace_config_ = new ::perfetto::protos::TraceConfig(*from.trace_config_);
  } else {
    trace_config_ = NULL;
  }
  if (from.has_trace_stats()) {
    trace_stats_ = new ::perfetto::protos::TraceStats(*from.trace_stats_);
  } else {
    trace_stats_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeTracePacket)
}

void ChromeTracePacket::SharedCtor() {
  ::memset(&chrome_events_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_stats_) -
      reinterpret_cast<char*>(&chrome_events_)) + sizeof(trace_stats_));
  _cached_size_ = 0;
}

ChromeTracePacket::~ChromeTracePacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeTracePacket)
  SharedDtor();
}

void ChromeTracePacket::SharedDtor() {
  if (this != internal_default_instance()) {
    delete chrome_events_;
  }
  if (this != internal_default_instance()) {
    delete clock_snapshot_;
  }
  if (this != internal_default_instance()) {
    delete trace_config_;
  }
  if (this != internal_default_instance()) {
    delete trace_stats_;
  }
}

void ChromeTracePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeTracePacket& ChromeTracePacket::default_instance() {
  protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeTracePacket* ChromeTracePacket::New(::google::protobuf::Arena* arena) const {
  ChromeTracePacket* n = new ChromeTracePacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeTracePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeTracePacket)
  if (GetArenaNoVirtual() == NULL && chrome_events_ != NULL) {
    delete chrome_events_;
  }
  chrome_events_ = NULL;
  if (GetArenaNoVirtual() == NULL && clock_snapshot_ != NULL) {
    delete clock_snapshot_;
  }
  clock_snapshot_ = NULL;
  if (GetArenaNoVirtual() == NULL && trace_config_ != NULL) {
    delete trace_config_;
  }
  trace_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && trace_stats_ != NULL) {
    delete trace_stats_;
  }
  trace_stats_ = NULL;
}

bool ChromeTracePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeTracePacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .perfetto.protos.ChromeEventBundle chrome_events = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chrome_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clock_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.TraceConfig trace_config = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.TraceStats trace_stats = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeTracePacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeTracePacket)
  return false;
#undef DO_
}

void ChromeTracePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeTracePacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perfetto.protos.ChromeEventBundle chrome_events = 5;
  if (this->has_chrome_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->chrome_events_, output);
  }

  // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
  if (this->has_clock_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->clock_snapshot_, output);
  }

  // .perfetto.protos.TraceConfig trace_config = 33;
  if (this->has_trace_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, *this->trace_config_, output);
  }

  // .perfetto.protos.TraceStats trace_stats = 35;
  if (this->has_trace_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, *this->trace_stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeTracePacket)
}

size_t ChromeTracePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeTracePacket)
  size_t total_size = 0;

  // .perfetto.protos.ChromeEventBundle chrome_events = 5;
  if (this->has_chrome_events()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chrome_events_);
  }

  // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
  if (this->has_clock_snapshot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clock_snapshot_);
  }

  // .perfetto.protos.TraceConfig trace_config = 33;
  if (this->has_trace_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trace_config_);
  }

  // .perfetto.protos.TraceStats trace_stats = 35;
  if (this->has_trace_stats()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trace_stats_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeTracePacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeTracePacket*>(&from));
}

void ChromeTracePacket::MergeFrom(const ChromeTracePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeTracePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chrome_events()) {
    mutable_chrome_events()->::perfetto::protos::ChromeEventBundle::MergeFrom(from.chrome_events());
  }
  if (from.has_clock_snapshot()) {
    mutable_clock_snapshot()->::perfetto::protos::ClockSnapshot::MergeFrom(from.clock_snapshot());
  }
  if (from.has_trace_config()) {
    mutable_trace_config()->::perfetto::protos::TraceConfig::MergeFrom(from.trace_config());
  }
  if (from.has_trace_stats()) {
    mutable_trace_stats()->::perfetto::protos::TraceStats::MergeFrom(from.trace_stats());
  }
}

void ChromeTracePacket::CopyFrom(const ChromeTracePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeTracePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeTracePacket::IsInitialized() const {
  return true;
}

void ChromeTracePacket::Swap(ChromeTracePacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeTracePacket::InternalSwap(ChromeTracePacket* other) {
  std::swap(chrome_events_, other->chrome_events_);
  std::swap(clock_snapshot_, other->clock_snapshot_);
  std::swap(trace_config_, other->trace_config_);
  std::swap(trace_stats_, other->trace_stats_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeTracePacket::GetTypeName() const {
  return "perfetto.protos.ChromeTracePacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeTracePacket

// .perfetto.protos.ChromeEventBundle chrome_events = 5;
bool ChromeTracePacket::has_chrome_events() const {
  return this != internal_default_instance() && chrome_events_ != NULL;
}
void ChromeTracePacket::clear_chrome_events() {
  if (GetArenaNoVirtual() == NULL && chrome_events_ != NULL) delete chrome_events_;
  chrome_events_ = NULL;
}
const ::perfetto::protos::ChromeEventBundle& ChromeTracePacket::chrome_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.chrome_events)
  return chrome_events_ != NULL ? *chrome_events_
                         : *::perfetto::protos::ChromeEventBundle::internal_default_instance();
}
::perfetto::protos::ChromeEventBundle* ChromeTracePacket::mutable_chrome_events() {
  
  if (chrome_events_ == NULL) {
    chrome_events_ = new ::perfetto::protos::ChromeEventBundle;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.chrome_events)
  return chrome_events_;
}
::perfetto::protos::ChromeEventBundle* ChromeTracePacket::release_chrome_events() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.chrome_events)
  
  ::perfetto::protos::ChromeEventBundle* temp = chrome_events_;
  chrome_events_ = NULL;
  return temp;
}
void ChromeTracePacket::set_allocated_chrome_events(::perfetto::protos::ChromeEventBundle* chrome_events) {
  delete chrome_events_;
  chrome_events_ = chrome_events;
  if (chrome_events) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.chrome_events)
}

// .perfetto.protos.TraceConfig trace_config = 33;
bool ChromeTracePacket::has_trace_config() const {
  return this != internal_default_instance() && trace_config_ != NULL;
}
void ChromeTracePacket::clear_trace_config() {
  if (GetArenaNoVirtual() == NULL && trace_config_ != NULL) delete trace_config_;
  trace_config_ = NULL;
}
const ::perfetto::protos::TraceConfig& ChromeTracePacket::trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.trace_config)
  return trace_config_ != NULL ? *trace_config_
                         : *::perfetto::protos::TraceConfig::internal_default_instance();
}
::perfetto::protos::TraceConfig* ChromeTracePacket::mutable_trace_config() {
  
  if (trace_config_ == NULL) {
    trace_config_ = new ::perfetto::protos::TraceConfig;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.trace_config)
  return trace_config_;
}
::perfetto::protos::TraceConfig* ChromeTracePacket::release_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.trace_config)
  
  ::perfetto::protos::TraceConfig* temp = trace_config_;
  trace_config_ = NULL;
  return temp;
}
void ChromeTracePacket::set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config) {
  delete trace_config_;
  trace_config_ = trace_config;
  if (trace_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.trace_config)
}

// .perfetto.protos.TraceStats trace_stats = 35;
bool ChromeTracePacket::has_trace_stats() const {
  return this != internal_default_instance() && trace_stats_ != NULL;
}
void ChromeTracePacket::clear_trace_stats() {
  if (GetArenaNoVirtual() == NULL && trace_stats_ != NULL) delete trace_stats_;
  trace_stats_ = NULL;
}
const ::perfetto::protos::TraceStats& ChromeTracePacket::trace_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.trace_stats)
  return trace_stats_ != NULL ? *trace_stats_
                         : *::perfetto::protos::TraceStats::internal_default_instance();
}
::perfetto::protos::TraceStats* ChromeTracePacket::mutable_trace_stats() {
  
  if (trace_stats_ == NULL) {
    trace_stats_ = new ::perfetto::protos::TraceStats;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.trace_stats)
  return trace_stats_;
}
::perfetto::protos::TraceStats* ChromeTracePacket::release_trace_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.trace_stats)
  
  ::perfetto::protos::TraceStats* temp = trace_stats_;
  trace_stats_ = NULL;
  return temp;
}
void ChromeTracePacket::set_allocated_trace_stats(::perfetto::protos::TraceStats* trace_stats) {
  delete trace_stats_;
  trace_stats_ = trace_stats;
  if (trace_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.trace_stats)
}

// .perfetto.protos.ClockSnapshot clock_snapshot = 6;
bool ChromeTracePacket::has_clock_snapshot() const {
  return this != internal_default_instance() && clock_snapshot_ != NULL;
}
void ChromeTracePacket::clear_clock_snapshot() {
  if (GetArenaNoVirtual() == NULL && clock_snapshot_ != NULL) delete clock_snapshot_;
  clock_snapshot_ = NULL;
}
const ::perfetto::protos::ClockSnapshot& ChromeTracePacket::clock_snapshot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.clock_snapshot)
  return clock_snapshot_ != NULL ? *clock_snapshot_
                         : *::perfetto::protos::ClockSnapshot::internal_default_instance();
}
::perfetto::protos::ClockSnapshot* ChromeTracePacket::mutable_clock_snapshot() {
  
  if (clock_snapshot_ == NULL) {
    clock_snapshot_ = new ::perfetto::protos::ClockSnapshot;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.clock_snapshot)
  return clock_snapshot_;
}
::perfetto::protos::ClockSnapshot* ChromeTracePacket::release_clock_snapshot() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.clock_snapshot)
  
  ::perfetto::protos::ClockSnapshot* temp = clock_snapshot_;
  clock_snapshot_ = NULL;
  return temp;
}
void ChromeTracePacket::set_allocated_clock_snapshot(::perfetto::protos::ClockSnapshot* clock_snapshot) {
  delete clock_snapshot_;
  clock_snapshot_ = clock_snapshot;
  if (clock_snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.clock_snapshot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)
