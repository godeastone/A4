// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/mm_filemap_delete_from_page_cache.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_MmFilemapDeleteFromPageCacheFtraceEvent[] = {
  {"pfn", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
  {"i_ino", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 2, 0},
  {"index", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 3, 0},
  {"s_dev", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 4, 0},
  {"page", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 5, 0},
};

const ::protozero::ProtoFieldDescriptor* MmFilemapDeleteFromPageCacheFtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kPfnFieldNumber:
      return &kFields_MmFilemapDeleteFromPageCacheFtraceEvent[0];
    case kIInoFieldNumber:
      return &kFields_MmFilemapDeleteFromPageCacheFtraceEvent[1];
    case kIndexFieldNumber:
      return &kFields_MmFilemapDeleteFromPageCacheFtraceEvent[2];
    case kSDevFieldNumber:
      return &kFields_MmFilemapDeleteFromPageCacheFtraceEvent[3];
    case kPageFieldNumber:
      return &kFields_MmFilemapDeleteFromPageCacheFtraceEvent[4];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
