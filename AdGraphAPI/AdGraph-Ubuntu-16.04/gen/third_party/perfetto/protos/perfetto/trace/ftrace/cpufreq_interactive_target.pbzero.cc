// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/cpufreq_interactive_target.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_CpufreqInteractiveTargetFtraceEvent[] = {
  {"cpu_id", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
  {"load", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 2, 0},
  {"curtarg", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 3, 0},
  {"curactual", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 4, 0},
  {"newtarg", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 5, 0},
};

const ::protozero::ProtoFieldDescriptor* CpufreqInteractiveTargetFtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kCpuIdFieldNumber:
      return &kFields_CpufreqInteractiveTargetFtraceEvent[0];
    case kLoadFieldNumber:
      return &kFields_CpufreqInteractiveTargetFtraceEvent[1];
    case kCurtargFieldNumber:
      return &kFields_CpufreqInteractiveTargetFtraceEvent[2];
    case kCuractualFieldNumber:
      return &kFields_CpufreqInteractiveTargetFtraceEvent[3];
    case kNewtargFieldNumber:
      return &kFields_CpufreqInteractiveTargetFtraceEvent[4];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
