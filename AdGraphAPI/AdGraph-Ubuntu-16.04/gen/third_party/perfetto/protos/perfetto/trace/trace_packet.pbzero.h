// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_TRACE_PACKET_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_TRACE_PACKET_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/proto_field_descriptor.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class ClockSnapshot;
class TraceStats;
class TestEvent;
class TraceConfig;
class ChromeEventBundle;
class InodeFileMap;
class ProcessTree;
class FtraceEventBundle;
class FtraceStats;

class TracePacket : public ::protozero::Message {
 public:
  enum : int32_t {
    kFtraceEventsFieldNumber = 1,
    kProcessTreeFieldNumber = 2,
    kInodeFileMapFieldNumber = 4,
    kChromeEventsFieldNumber = 5,
    kClockSnapshotFieldNumber = 6,
    kTraceConfigFieldNumber = 33,
    kFtraceStatsFieldNumber = 34,
    kTraceStatsFieldNumber = 35,
    kForTestingFieldNumber = 536870911,
    kTrustedUidFieldNumber = 3,
  };
  static const ::protozero::ProtoFieldDescriptor* GetFieldDescriptor(uint32_t field_id);
  FtraceEventBundle* set_ftrace_events();
  ProcessTree* set_process_tree();
  InodeFileMap* set_inode_file_map();
  ChromeEventBundle* set_chrome_events();
  ClockSnapshot* set_clock_snapshot();
  TraceConfig* set_trace_config();
  FtraceStats* set_ftrace_stats();
  TraceStats* set_trace_stats();
  TestEvent* set_for_testing();
  void set_trusted_uid(int32_t value) {
    AppendVarInt(3, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
