// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/chrome/chrome_trace_event.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_ChromeEventBundle[] = {
  {"trace_events", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 1, 1},
};

const ::protozero::ProtoFieldDescriptor* ChromeEventBundle::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kTraceEventsFieldNumber:
      return &kFields_ChromeEventBundle[0];
    default:
      return &kInvalidField;
  }
}

ChromeTraceEvent* ChromeEventBundle::add_trace_events() {
  return BeginNestedMessage<ChromeTraceEvent>(1);
}

static const ::protozero::ProtoFieldDescriptor kFields_ChromeTraceEvent[] = {
  {"name", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 1, 0},
  {"timestamp", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 2, 0},
  {"phase", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 3, 0},
  {"thread_id", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 4, 0},
  {"duration", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 5, 0},
  {"thread_duration", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 6, 0},
  {"scope", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 7, 0},
  {"id", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 8, 0},
  {"flags", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 9, 0},
  {"category_group_name", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 10, 0},
  {"process_id", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT32, 11, 0},
  {"thread_timestamp", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 12, 0},
  {"bind_id", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 13, 0},
  {"args", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 14, 1},
};

const ::protozero::ProtoFieldDescriptor* ChromeTraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kNameFieldNumber:
      return &kFields_ChromeTraceEvent[0];
    case kTimestampFieldNumber:
      return &kFields_ChromeTraceEvent[1];
    case kPhaseFieldNumber:
      return &kFields_ChromeTraceEvent[2];
    case kThreadIdFieldNumber:
      return &kFields_ChromeTraceEvent[3];
    case kDurationFieldNumber:
      return &kFields_ChromeTraceEvent[4];
    case kThreadDurationFieldNumber:
      return &kFields_ChromeTraceEvent[5];
    case kScopeFieldNumber:
      return &kFields_ChromeTraceEvent[6];
    case kIdFieldNumber:
      return &kFields_ChromeTraceEvent[7];
    case kFlagsFieldNumber:
      return &kFields_ChromeTraceEvent[8];
    case kCategoryGroupNameFieldNumber:
      return &kFields_ChromeTraceEvent[9];
    case kProcessIdFieldNumber:
      return &kFields_ChromeTraceEvent[10];
    case kThreadTimestampFieldNumber:
      return &kFields_ChromeTraceEvent[11];
    case kBindIdFieldNumber:
      return &kFields_ChromeTraceEvent[12];
    case kArgsFieldNumber:
      return &kFields_ChromeTraceEvent[13];
    default:
      return &kInvalidField;
  }
}

ChromeTraceEvent_Arg* ChromeTraceEvent::add_args() {
  return BeginNestedMessage<ChromeTraceEvent_Arg>(14);
}

static const ::protozero::ProtoFieldDescriptor kFields_ChromeTraceEvent_Arg[] = {
  {"name", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 1, 0},
  {"bool_value", ::protozero::ProtoFieldDescriptor::Type::TYPE_BOOL, 2, 0},
  {"uint_value", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 3, 0},
  {"int_value", ::protozero::ProtoFieldDescriptor::Type::TYPE_INT64, 4, 0},
  {"double_value", ::protozero::ProtoFieldDescriptor::Type::TYPE_DOUBLE, 5, 0},
  {"string_value", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 6, 0},
  {"pointer_value", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 7, 0},
};

const ::protozero::ProtoFieldDescriptor* ChromeTraceEvent_Arg::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kNameFieldNumber:
      return &kFields_ChromeTraceEvent_Arg[0];
    case kBoolValueFieldNumber:
      return &kFields_ChromeTraceEvent_Arg[1];
    case kUintValueFieldNumber:
      return &kFields_ChromeTraceEvent_Arg[2];
    case kIntValueFieldNumber:
      return &kFields_ChromeTraceEvent_Arg[3];
    case kDoubleValueFieldNumber:
      return &kFields_ChromeTraceEvent_Arg[4];
    case kStringValueFieldNumber:
      return &kFields_ChromeTraceEvent_Arg[5];
    case kPointerValueFieldNumber:
      return &kFields_ChromeTraceEvent_Arg[6];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
