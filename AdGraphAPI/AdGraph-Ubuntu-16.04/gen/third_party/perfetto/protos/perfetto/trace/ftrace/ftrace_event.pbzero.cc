// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/ftrace_event.pbzero.h"
#include "perfetto/trace/ftrace/print.pbzero.h"
#include "perfetto/trace/ftrace/sched_switch.pbzero.h"
#include "perfetto/trace/ftrace/cpufreq_interactive_already.pbzero.h"
#include "perfetto/trace/ftrace/cpufreq_interactive_boost.pbzero.h"
#include "perfetto/trace/ftrace/cpufreq_interactive_notyet.pbzero.h"
#include "perfetto/trace/ftrace/cpufreq_interactive_setspeed.pbzero.h"
#include "perfetto/trace/ftrace/cpufreq_interactive_target.pbzero.h"
#include "perfetto/trace/ftrace/sched_blocked_reason.pbzero.h"
#include "perfetto/trace/ftrace/cpufreq_interactive_unboost.pbzero.h"
#include "perfetto/trace/ftrace/cpu_frequency.pbzero.h"
#include "perfetto/trace/ftrace/cpu_frequency_limits.pbzero.h"
#include "perfetto/trace/ftrace/cpu_idle.pbzero.h"
#include "perfetto/trace/ftrace/clock_enable.pbzero.h"
#include "perfetto/trace/ftrace/clock_disable.pbzero.h"
#include "perfetto/trace/ftrace/clock_set_rate.pbzero.h"
#include "perfetto/trace/ftrace/sched_wakeup.pbzero.h"
#include "perfetto/trace/ftrace/smbus_result.pbzero.h"
#include "perfetto/trace/ftrace/sched_cpu_hotplug.pbzero.h"
#include "perfetto/trace/ftrace/sched_waking.pbzero.h"
#include "perfetto/trace/ftrace/sync_wait.pbzero.h"
#include "perfetto/trace/ftrace/ipi_entry.pbzero.h"
#include "perfetto/trace/ftrace/ipi_exit.pbzero.h"
#include "perfetto/trace/ftrace/ipi_raise.pbzero.h"
#include "perfetto/trace/ftrace/softirq_entry.pbzero.h"
#include "perfetto/trace/ftrace/softirq_exit.pbzero.h"
#include "perfetto/trace/ftrace/softirq_raise.pbzero.h"
#include "perfetto/trace/ftrace/i2c_read.pbzero.h"
#include "perfetto/trace/ftrace/i2c_write.pbzero.h"
#include "perfetto/trace/ftrace/i2c_result.pbzero.h"
#include "perfetto/trace/ftrace/i2c_reply.pbzero.h"
#include "perfetto/trace/ftrace/smbus_read.pbzero.h"
#include "perfetto/trace/ftrace/smbus_write.pbzero.h"
#include "perfetto/trace/ftrace/regulator_set_voltage_complete.pbzero.h"
#include "perfetto/trace/ftrace/smbus_reply.pbzero.h"
#include "perfetto/trace/ftrace/lowmemory_kill.pbzero.h"
#include "perfetto/trace/ftrace/irq_handler_entry.pbzero.h"
#include "perfetto/trace/ftrace/irq_handler_exit.pbzero.h"
#include "perfetto/trace/ftrace/sync_pt.pbzero.h"
#include "perfetto/trace/ftrace/sync_timeline.pbzero.h"
#include "perfetto/trace/ftrace/mdp_cmd_pingpong_done.pbzero.h"
#include "perfetto/trace/ftrace/ext4_da_write_begin.pbzero.h"
#include "perfetto/trace/ftrace/ext4_da_write_end.pbzero.h"
#include "perfetto/trace/ftrace/ext4_sync_file_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_sync_file_exit.pbzero.h"
#include "perfetto/trace/ftrace/block_rq_issue.pbzero.h"
#include "perfetto/trace/ftrace/mm_vmscan_direct_reclaim_begin.pbzero.h"
#include "perfetto/trace/ftrace/mm_vmscan_direct_reclaim_end.pbzero.h"
#include "perfetto/trace/ftrace/mm_vmscan_kswapd_wake.pbzero.h"
#include "perfetto/trace/ftrace/mm_vmscan_kswapd_sleep.pbzero.h"
#include "perfetto/trace/ftrace/binder_transaction.pbzero.h"
#include "perfetto/trace/ftrace/binder_transaction_received.pbzero.h"
#include "perfetto/trace/ftrace/binder_set_priority.pbzero.h"
#include "perfetto/trace/ftrace/binder_lock.pbzero.h"
#include "perfetto/trace/ftrace/binder_locked.pbzero.h"
#include "perfetto/trace/ftrace/binder_unlock.pbzero.h"
#include "perfetto/trace/ftrace/workqueue_activate_work.pbzero.h"
#include "perfetto/trace/ftrace/workqueue_execute_end.pbzero.h"
#include "perfetto/trace/ftrace/workqueue_execute_start.pbzero.h"
#include "perfetto/trace/ftrace/workqueue_queue_work.pbzero.h"
#include "perfetto/trace/ftrace/regulator_disable.pbzero.h"
#include "perfetto/trace/ftrace/regulator_disable_complete.pbzero.h"
#include "perfetto/trace/ftrace/regulator_enable.pbzero.h"
#include "perfetto/trace/ftrace/regulator_enable_complete.pbzero.h"
#include "perfetto/trace/ftrace/regulator_enable_delay.pbzero.h"
#include "perfetto/trace/ftrace/regulator_set_voltage.pbzero.h"
#include "perfetto/trace/ftrace/sched_wakeup_new.pbzero.h"
#include "perfetto/trace/ftrace/block_bio_backmerge.pbzero.h"
#include "perfetto/trace/ftrace/cgroup_attach_task.pbzero.h"
#include "perfetto/trace/ftrace/cgroup_mkdir.pbzero.h"
#include "perfetto/trace/ftrace/cgroup_remount.pbzero.h"
#include "perfetto/trace/ftrace/cgroup_rmdir.pbzero.h"
#include "perfetto/trace/ftrace/cgroup_transfer_tasks.pbzero.h"
#include "perfetto/trace/ftrace/cgroup_destroy_root.pbzero.h"
#include "perfetto/trace/ftrace/cgroup_release.pbzero.h"
#include "perfetto/trace/ftrace/cgroup_rename.pbzero.h"
#include "perfetto/trace/ftrace/cgroup_setup_root.pbzero.h"
#include "perfetto/trace/ftrace/mdp_cmd_kickoff.pbzero.h"
#include "perfetto/trace/ftrace/mdp_commit.pbzero.h"
#include "perfetto/trace/ftrace/mdp_perf_set_ot.pbzero.h"
#include "perfetto/trace/ftrace/mdp_sspp_change.pbzero.h"
#include "perfetto/trace/ftrace/tracing_mark_write.pbzero.h"
#include "perfetto/trace/ftrace/mdp_compare_bw.pbzero.h"
#include "perfetto/trace/ftrace/mdp_perf_set_panic_luts.pbzero.h"
#include "perfetto/trace/ftrace/mdp_sspp_set.pbzero.h"
#include "perfetto/trace/ftrace/mdp_cmd_readptr_done.pbzero.h"
#include "perfetto/trace/ftrace/mdp_misr_crc.pbzero.h"
#include "perfetto/trace/ftrace/mdp_perf_set_qos_luts.pbzero.h"
#include "perfetto/trace/ftrace/mdp_trace_counter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_fallocate_exit.pbzero.h"
#include "perfetto/trace/ftrace/mdp_cmd_release_bw.pbzero.h"
#include "perfetto/trace/ftrace/mdp_mixer_update.pbzero.h"
#include "perfetto/trace/ftrace/mdp_perf_set_wm_levels.pbzero.h"
#include "perfetto/trace/ftrace/mdp_video_underrun_done.pbzero.h"
#include "perfetto/trace/ftrace/mdp_cmd_wait_pingpong.pbzero.h"
#include "perfetto/trace/ftrace/mdp_perf_prefill_calc.pbzero.h"
#include "perfetto/trace/ftrace/mdp_perf_update_bus.pbzero.h"
#include "perfetto/trace/ftrace/rotator_bw_ao_as_context.pbzero.h"
#include "perfetto/trace/ftrace/mm_filemap_add_to_page_cache.pbzero.h"
#include "perfetto/trace/ftrace/mm_filemap_delete_from_page_cache.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_begin.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_defer_compaction.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_deferred.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_defer_reset.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_end.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_finished.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_isolate_freepages.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_isolate_migratepages.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_kcompactd_sleep.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_kcompactd_wake.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_migratepages.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_suitable.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_try_to_compact_pages.pbzero.h"
#include "perfetto/trace/ftrace/mm_compaction_wakeup_kcompactd.pbzero.h"
#include "perfetto/trace/ftrace/suspend_resume.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mballoc_discard.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mballoc_free.pbzero.h"
#include "perfetto/trace/ftrace/block_bio_bounce.pbzero.h"
#include "perfetto/trace/ftrace/block_bio_complete.pbzero.h"
#include "perfetto/trace/ftrace/block_bio_frontmerge.pbzero.h"
#include "perfetto/trace/ftrace/block_bio_queue.pbzero.h"
#include "perfetto/trace/ftrace/block_bio_remap.pbzero.h"
#include "perfetto/trace/ftrace/block_dirty_buffer.pbzero.h"
#include "perfetto/trace/ftrace/block_getrq.pbzero.h"
#include "perfetto/trace/ftrace/block_plug.pbzero.h"
#include "perfetto/trace/ftrace/block_rq_abort.pbzero.h"
#include "perfetto/trace/ftrace/block_rq_complete.pbzero.h"
#include "perfetto/trace/ftrace/block_rq_insert.pbzero.h"
#include "perfetto/trace/ftrace/block_rq_remap.pbzero.h"
#include "perfetto/trace/ftrace/block_rq_requeue.pbzero.h"
#include "perfetto/trace/ftrace/block_sleeprq.pbzero.h"
#include "perfetto/trace/ftrace/block_split.pbzero.h"
#include "perfetto/trace/ftrace/block_touch_buffer.pbzero.h"
#include "perfetto/trace/ftrace/block_unplug.pbzero.h"
#include "perfetto/trace/ftrace/ext4_alloc_da_blocks.pbzero.h"
#include "perfetto/trace/ftrace/ext4_allocate_blocks.pbzero.h"
#include "perfetto/trace/ftrace/ext4_allocate_inode.pbzero.h"
#include "perfetto/trace/ftrace/ext4_begin_ordered_truncate.pbzero.h"
#include "perfetto/trace/ftrace/ext4_collapse_range.pbzero.h"
#include "perfetto/trace/ftrace/ext4_da_release_space.pbzero.h"
#include "perfetto/trace/ftrace/ext4_da_reserve_space.pbzero.h"
#include "perfetto/trace/ftrace/ext4_da_update_reserve_space.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_truncate_nodes_exit.pbzero.h"
#include "perfetto/trace/ftrace/ext4_da_write_pages.pbzero.h"
#include "perfetto/trace/ftrace/ext4_da_write_pages_extent.pbzero.h"
#include "perfetto/trace/ftrace/ext4_direct_IO_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_direct_IO_exit.pbzero.h"
#include "perfetto/trace/ftrace/ext4_discard_blocks.pbzero.h"
#include "perfetto/trace/ftrace/ext4_discard_preallocations.pbzero.h"
#include "perfetto/trace/ftrace/ext4_drop_inode.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_cache_extent.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_find_delayed_extent_range_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_find_delayed_extent_range_exit.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_insert_extent.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_lookup_extent_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_lookup_extent_exit.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_remove_extent.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_shrink.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_shrink_count.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_shrink_scan_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_es_shrink_scan_exit.pbzero.h"
#include "perfetto/trace/ftrace/ext4_evict_inode.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_convert_to_initialized_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_convert_to_initialized_fastpath.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_handle_unwritten_extents.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_in_cache.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_load_extent.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_map_blocks_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_map_blocks_exit.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_put_in_cache.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_remove_space.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_remove_space_done.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_rm_idx.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_rm_leaf.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ext_show_extent.pbzero.h"
#include "perfetto/trace/ftrace/ext4_fallocate_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_find_delalloc_range.pbzero.h"
#include "perfetto/trace/ftrace/ext4_forget.pbzero.h"
#include "perfetto/trace/ftrace/ext4_free_blocks.pbzero.h"
#include "perfetto/trace/ftrace/ext4_free_inode.pbzero.h"
#include "perfetto/trace/ftrace/ext4_get_implied_cluster_alloc_exit.pbzero.h"
#include "perfetto/trace/ftrace/ext4_get_reserved_cluster_alloc.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ind_map_blocks_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_ind_map_blocks_exit.pbzero.h"
#include "perfetto/trace/ftrace/ext4_insert_range.pbzero.h"
#include "perfetto/trace/ftrace/ext4_invalidatepage.pbzero.h"
#include "perfetto/trace/ftrace/ext4_journal_start.pbzero.h"
#include "perfetto/trace/ftrace/ext4_journal_start_reserved.pbzero.h"
#include "perfetto/trace/ftrace/ext4_journalled_invalidatepage.pbzero.h"
#include "perfetto/trace/ftrace/ext4_journalled_write_end.pbzero.h"
#include "perfetto/trace/ftrace/ext4_load_inode.pbzero.h"
#include "perfetto/trace/ftrace/ext4_load_inode_bitmap.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mark_inode_dirty.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mb_bitmap_load.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mb_buddy_bitmap_load.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mb_discard_preallocations.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mb_new_group_pa.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mb_new_inode_pa.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mb_release_group_pa.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mb_release_inode_pa.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mballoc_alloc.pbzero.h"
#include "perfetto/trace/ftrace/ext4_mballoc_prealloc.pbzero.h"
#include "perfetto/trace/ftrace/ext4_other_inode_update_time.pbzero.h"
#include "perfetto/trace/ftrace/ext4_punch_hole.pbzero.h"
#include "perfetto/trace/ftrace/ext4_read_block_bitmap_load.pbzero.h"
#include "perfetto/trace/ftrace/ext4_readpage.pbzero.h"
#include "perfetto/trace/ftrace/ext4_releasepage.pbzero.h"
#include "perfetto/trace/ftrace/ext4_remove_blocks.pbzero.h"
#include "perfetto/trace/ftrace/ext4_request_blocks.pbzero.h"
#include "perfetto/trace/ftrace/ext4_request_inode.pbzero.h"
#include "perfetto/trace/ftrace/ext4_sync_fs.pbzero.h"
#include "perfetto/trace/ftrace/ext4_trim_all_free.pbzero.h"
#include "perfetto/trace/ftrace/ext4_trim_extent.pbzero.h"
#include "perfetto/trace/ftrace/ext4_truncate_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_truncate_exit.pbzero.h"
#include "perfetto/trace/ftrace/ext4_unlink_enter.pbzero.h"
#include "perfetto/trace/ftrace/ext4_unlink_exit.pbzero.h"
#include "perfetto/trace/ftrace/ext4_write_begin.pbzero.h"
#include "perfetto/trace/ftrace/ext4_write_end.pbzero.h"
#include "perfetto/trace/ftrace/ext4_writepage.pbzero.h"
#include "perfetto/trace/ftrace/ext4_writepages.pbzero.h"
#include "perfetto/trace/ftrace/ext4_writepages_result.pbzero.h"
#include "perfetto/trace/ftrace/ext4_zero_range.pbzero.h"
#include "perfetto/trace/ftrace/task_newtask.pbzero.h"
#include "perfetto/trace/ftrace/task_rename.pbzero.h"
#include "perfetto/trace/ftrace/sched_process_exec.pbzero.h"
#include "perfetto/trace/ftrace/sched_process_exit.pbzero.h"
#include "perfetto/trace/ftrace/sched_process_fork.pbzero.h"
#include "perfetto/trace/ftrace/sched_process_free.pbzero.h"
#include "perfetto/trace/ftrace/sched_process_hang.pbzero.h"
#include "perfetto/trace/ftrace/sched_process_wait.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_do_submit_bio.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_evict_inode.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_fallocate.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_get_data_block.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_get_victim.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_iget.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_iget_exit.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_new_inode.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_readpage.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_reserve_new_block.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_set_page_dirty.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_submit_write_page.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_sync_file_enter.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_sync_file_exit.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_sync_fs.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_truncate.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_truncate_blocks_enter.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_truncate_blocks_exit.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_truncate_data_blocks_range.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_truncate_inode_blocks_enter.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_truncate_inode_blocks_exit.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_truncate_node.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_truncate_nodes_enter.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_truncate_partial_nodes.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_unlink_enter.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_unlink_exit.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_vm_page_mkwrite.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_write_begin.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_write_checkpoint.pbzero.h"
#include "perfetto/trace/ftrace/f2fs_write_end.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_FtraceEvent[] = {
  {"timestamp", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
  {"pid", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 2, 0},
  {"print", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 3, 0},
  {"sched_switch", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 4, 0},
  {"cpufreq_interactive_already", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 5, 0},
  {"cpufreq_interactive_boost", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 6, 0},
  {"cpufreq_interactive_notyet", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 7, 0},
  {"cpufreq_interactive_setspeed", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 8, 0},
  {"cpufreq_interactive_target", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 9, 0},
  {"cpufreq_interactive_unboost", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 10, 0},
  {"cpu_frequency", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 11, 0},
  {"cpu_frequency_limits", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 12, 0},
  {"cpu_idle", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 13, 0},
  {"clock_enable", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 14, 0},
  {"clock_disable", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 15, 0},
  {"clock_set_rate", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 16, 0},
  {"sched_wakeup", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 17, 0},
  {"sched_blocked_reason", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 18, 0},
  {"sched_cpu_hotplug", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 19, 0},
  {"sched_waking", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 20, 0},
  {"ipi_entry", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 21, 0},
  {"ipi_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 22, 0},
  {"ipi_raise", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 23, 0},
  {"softirq_entry", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 24, 0},
  {"softirq_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 25, 0},
  {"softirq_raise", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 26, 0},
  {"i2c_read", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 27, 0},
  {"i2c_write", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 28, 0},
  {"i2c_result", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 29, 0},
  {"i2c_reply", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 30, 0},
  {"smbus_read", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 31, 0},
  {"smbus_write", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 32, 0},
  {"smbus_result", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 33, 0},
  {"smbus_reply", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 34, 0},
  {"lowmemory_kill", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 35, 0},
  {"irq_handler_entry", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 36, 0},
  {"irq_handler_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 37, 0},
  {"sync_pt", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 38, 0},
  {"sync_timeline", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 39, 0},
  {"sync_wait", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 40, 0},
  {"ext4_da_write_begin", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 41, 0},
  {"ext4_da_write_end", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 42, 0},
  {"ext4_sync_file_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 43, 0},
  {"ext4_sync_file_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 44, 0},
  {"block_rq_issue", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 45, 0},
  {"mm_vmscan_direct_reclaim_begin", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 46, 0},
  {"mm_vmscan_direct_reclaim_end", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 47, 0},
  {"mm_vmscan_kswapd_wake", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 48, 0},
  {"mm_vmscan_kswapd_sleep", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 49, 0},
  {"binder_transaction", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 50, 0},
  {"binder_transaction_received", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 51, 0},
  {"binder_set_priority", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 52, 0},
  {"binder_lock", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 53, 0},
  {"binder_locked", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 54, 0},
  {"binder_unlock", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 55, 0},
  {"workqueue_activate_work", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 56, 0},
  {"workqueue_execute_end", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 57, 0},
  {"workqueue_execute_start", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 58, 0},
  {"workqueue_queue_work", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 59, 0},
  {"regulator_disable", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 60, 0},
  {"regulator_disable_complete", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 61, 0},
  {"regulator_enable", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 62, 0},
  {"regulator_enable_complete", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 63, 0},
  {"regulator_enable_delay", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 64, 0},
  {"regulator_set_voltage", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 65, 0},
  {"regulator_set_voltage_complete", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 66, 0},
  {"cgroup_attach_task", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 67, 0},
  {"cgroup_mkdir", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 68, 0},
  {"cgroup_remount", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 69, 0},
  {"cgroup_rmdir", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 70, 0},
  {"cgroup_transfer_tasks", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 71, 0},
  {"cgroup_destroy_root", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 72, 0},
  {"cgroup_release", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 73, 0},
  {"cgroup_rename", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 74, 0},
  {"cgroup_setup_root", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 75, 0},
  {"mdp_cmd_kickoff", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 76, 0},
  {"mdp_commit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 77, 0},
  {"mdp_perf_set_ot", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 78, 0},
  {"mdp_sspp_change", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 79, 0},
  {"tracing_mark_write", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 80, 0},
  {"mdp_cmd_pingpong_done", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 81, 0},
  {"mdp_compare_bw", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 82, 0},
  {"mdp_perf_set_panic_luts", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 83, 0},
  {"mdp_sspp_set", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 84, 0},
  {"mdp_cmd_readptr_done", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 85, 0},
  {"mdp_misr_crc", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 86, 0},
  {"mdp_perf_set_qos_luts", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 87, 0},
  {"mdp_trace_counter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 88, 0},
  {"mdp_cmd_release_bw", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 89, 0},
  {"mdp_mixer_update", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 90, 0},
  {"mdp_perf_set_wm_levels", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 91, 0},
  {"mdp_video_underrun_done", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 92, 0},
  {"mdp_cmd_wait_pingpong", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 93, 0},
  {"mdp_perf_prefill_calc", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 94, 0},
  {"mdp_perf_update_bus", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 95, 0},
  {"rotator_bw_ao_as_context", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 96, 0},
  {"mm_filemap_add_to_page_cache", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 97, 0},
  {"mm_filemap_delete_from_page_cache", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 98, 0},
  {"mm_compaction_begin", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 99, 0},
  {"mm_compaction_defer_compaction", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 100, 0},
  {"mm_compaction_deferred", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 101, 0},
  {"mm_compaction_defer_reset", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 102, 0},
  {"mm_compaction_end", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 103, 0},
  {"mm_compaction_finished", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 104, 0},
  {"mm_compaction_isolate_freepages", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 105, 0},
  {"mm_compaction_isolate_migratepages", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 106, 0},
  {"mm_compaction_kcompactd_sleep", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 107, 0},
  {"mm_compaction_kcompactd_wake", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 108, 0},
  {"mm_compaction_migratepages", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 109, 0},
  {"mm_compaction_suitable", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 110, 0},
  {"mm_compaction_try_to_compact_pages", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 111, 0},
  {"mm_compaction_wakeup_kcompactd", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 112, 0},
  {"suspend_resume", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 113, 0},
  {"sched_wakeup_new", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 114, 0},
  {"block_bio_backmerge", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 115, 0},
  {"block_bio_bounce", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 116, 0},
  {"block_bio_complete", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 117, 0},
  {"block_bio_frontmerge", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 118, 0},
  {"block_bio_queue", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 119, 0},
  {"block_bio_remap", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 120, 0},
  {"block_dirty_buffer", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 121, 0},
  {"block_getrq", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 122, 0},
  {"block_plug", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 123, 0},
  {"block_rq_abort", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 124, 0},
  {"block_rq_complete", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 125, 0},
  {"block_rq_insert", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 126, 0},
  {"block_rq_remap", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 128, 0},
  {"block_rq_requeue", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 129, 0},
  {"block_sleeprq", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 130, 0},
  {"block_split", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 131, 0},
  {"block_touch_buffer", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 132, 0},
  {"block_unplug", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 133, 0},
  {"ext4_alloc_da_blocks", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 134, 0},
  {"ext4_allocate_blocks", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 135, 0},
  {"ext4_allocate_inode", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 136, 0},
  {"ext4_begin_ordered_truncate", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 137, 0},
  {"ext4_collapse_range", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 138, 0},
  {"ext4_da_release_space", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 139, 0},
  {"ext4_da_reserve_space", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 140, 0},
  {"ext4_da_update_reserve_space", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 141, 0},
  {"ext4_da_write_pages", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 142, 0},
  {"ext4_da_write_pages_extent", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 143, 0},
  {"ext4_direct_IO_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 144, 0},
  {"ext4_direct_IO_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 145, 0},
  {"ext4_discard_blocks", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 146, 0},
  {"ext4_discard_preallocations", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 147, 0},
  {"ext4_drop_inode", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 148, 0},
  {"ext4_es_cache_extent", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 149, 0},
  {"ext4_es_find_delayed_extent_range_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 150, 0},
  {"ext4_es_find_delayed_extent_range_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 151, 0},
  {"ext4_es_insert_extent", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 152, 0},
  {"ext4_es_lookup_extent_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 153, 0},
  {"ext4_es_lookup_extent_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 154, 0},
  {"ext4_es_remove_extent", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 155, 0},
  {"ext4_es_shrink", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 156, 0},
  {"ext4_es_shrink_count", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 157, 0},
  {"ext4_es_shrink_scan_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 158, 0},
  {"ext4_es_shrink_scan_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 159, 0},
  {"ext4_evict_inode", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 160, 0},
  {"ext4_ext_convert_to_initialized_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 161, 0},
  {"ext4_ext_convert_to_initialized_fastpath", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 162, 0},
  {"ext4_ext_handle_unwritten_extents", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 163, 0},
  {"ext4_ext_in_cache", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 164, 0},
  {"ext4_ext_load_extent", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 165, 0},
  {"ext4_ext_map_blocks_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 166, 0},
  {"ext4_ext_map_blocks_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 167, 0},
  {"ext4_ext_put_in_cache", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 168, 0},
  {"ext4_ext_remove_space", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 169, 0},
  {"ext4_ext_remove_space_done", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 170, 0},
  {"ext4_ext_rm_idx", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 171, 0},
  {"ext4_ext_rm_leaf", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 172, 0},
  {"ext4_ext_show_extent", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 173, 0},
  {"ext4_fallocate_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 174, 0},
  {"ext4_fallocate_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 175, 0},
  {"ext4_find_delalloc_range", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 176, 0},
  {"ext4_forget", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 177, 0},
  {"ext4_free_blocks", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 178, 0},
  {"ext4_free_inode", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 179, 0},
  {"ext4_get_implied_cluster_alloc_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 180, 0},
  {"ext4_get_reserved_cluster_alloc", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 181, 0},
  {"ext4_ind_map_blocks_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 182, 0},
  {"ext4_ind_map_blocks_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 183, 0},
  {"ext4_insert_range", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 184, 0},
  {"ext4_invalidatepage", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 185, 0},
  {"ext4_journal_start", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 186, 0},
  {"ext4_journal_start_reserved", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 187, 0},
  {"ext4_journalled_invalidatepage", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 188, 0},
  {"ext4_journalled_write_end", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 189, 0},
  {"ext4_load_inode", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 190, 0},
  {"ext4_load_inode_bitmap", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 191, 0},
  {"ext4_mark_inode_dirty", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 192, 0},
  {"ext4_mb_bitmap_load", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 193, 0},
  {"ext4_mb_buddy_bitmap_load", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 194, 0},
  {"ext4_mb_discard_preallocations", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 195, 0},
  {"ext4_mb_new_group_pa", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 196, 0},
  {"ext4_mb_new_inode_pa", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 197, 0},
  {"ext4_mb_release_group_pa", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 198, 0},
  {"ext4_mb_release_inode_pa", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 199, 0},
  {"ext4_mballoc_alloc", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 200, 0},
  {"ext4_mballoc_discard", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 201, 0},
  {"ext4_mballoc_free", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 202, 0},
  {"ext4_mballoc_prealloc", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 203, 0},
  {"ext4_other_inode_update_time", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 204, 0},
  {"ext4_punch_hole", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 205, 0},
  {"ext4_read_block_bitmap_load", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 206, 0},
  {"ext4_readpage", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 207, 0},
  {"ext4_releasepage", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 208, 0},
  {"ext4_remove_blocks", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 209, 0},
  {"ext4_request_blocks", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 210, 0},
  {"ext4_request_inode", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 211, 0},
  {"ext4_sync_fs", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 212, 0},
  {"ext4_trim_all_free", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 213, 0},
  {"ext4_trim_extent", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 214, 0},
  {"ext4_truncate_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 215, 0},
  {"ext4_truncate_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 216, 0},
  {"ext4_unlink_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 217, 0},
  {"ext4_unlink_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 218, 0},
  {"ext4_write_begin", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 219, 0},
  {"ext4_write_end", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 230, 0},
  {"ext4_writepage", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 231, 0},
  {"ext4_writepages", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 232, 0},
  {"ext4_writepages_result", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 233, 0},
  {"ext4_zero_range", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 234, 0},
  {"task_newtask", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 235, 0},
  {"task_rename", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 236, 0},
  {"sched_process_exec", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 237, 0},
  {"sched_process_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 238, 0},
  {"sched_process_fork", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 239, 0},
  {"sched_process_free", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 240, 0},
  {"sched_process_hang", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 241, 0},
  {"sched_process_wait", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 242, 0},
  {"f2fs_do_submit_bio", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 243, 0},
  {"f2fs_evict_inode", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 244, 0},
  {"f2fs_fallocate", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 245, 0},
  {"f2fs_get_data_block", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 246, 0},
  {"f2fs_get_victim", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 247, 0},
  {"f2fs_iget", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 248, 0},
  {"f2fs_iget_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 249, 0},
  {"f2fs_new_inode", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 250, 0},
  {"f2fs_readpage", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 251, 0},
  {"f2fs_reserve_new_block", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 252, 0},
  {"f2fs_set_page_dirty", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 253, 0},
  {"f2fs_submit_write_page", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 254, 0},
  {"f2fs_sync_file_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 255, 0},
  {"f2fs_sync_file_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 256, 0},
  {"f2fs_sync_fs", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 257, 0},
  {"f2fs_truncate", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 258, 0},
  {"f2fs_truncate_blocks_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 259, 0},
  {"f2fs_truncate_blocks_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 260, 0},
  {"f2fs_truncate_data_blocks_range", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 261, 0},
  {"f2fs_truncate_inode_blocks_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 262, 0},
  {"f2fs_truncate_inode_blocks_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 263, 0},
  {"f2fs_truncate_node", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 264, 0},
  {"f2fs_truncate_nodes_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 265, 0},
  {"f2fs_truncate_nodes_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 266, 0},
  {"f2fs_truncate_partial_nodes", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 267, 0},
  {"f2fs_unlink_enter", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 268, 0},
  {"f2fs_unlink_exit", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 269, 0},
  {"f2fs_vm_page_mkwrite", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 270, 0},
  {"f2fs_write_begin", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 271, 0},
  {"f2fs_write_checkpoint", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 272, 0},
  {"f2fs_write_end", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 273, 0},
};

const ::protozero::ProtoFieldDescriptor* FtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kTimestampFieldNumber:
      return &kFields_FtraceEvent[0];
    case kPidFieldNumber:
      return &kFields_FtraceEvent[1];
    case kPrintFieldNumber:
      return &kFields_FtraceEvent[2];
    case kSchedSwitchFieldNumber:
      return &kFields_FtraceEvent[3];
    case kCpufreqInteractiveAlreadyFieldNumber:
      return &kFields_FtraceEvent[4];
    case kCpufreqInteractiveBoostFieldNumber:
      return &kFields_FtraceEvent[5];
    case kCpufreqInteractiveNotyetFieldNumber:
      return &kFields_FtraceEvent[6];
    case kCpufreqInteractiveSetspeedFieldNumber:
      return &kFields_FtraceEvent[7];
    case kCpufreqInteractiveTargetFieldNumber:
      return &kFields_FtraceEvent[8];
    case kCpufreqInteractiveUnboostFieldNumber:
      return &kFields_FtraceEvent[9];
    case kCpuFrequencyFieldNumber:
      return &kFields_FtraceEvent[10];
    case kCpuFrequencyLimitsFieldNumber:
      return &kFields_FtraceEvent[11];
    case kCpuIdleFieldNumber:
      return &kFields_FtraceEvent[12];
    case kClockEnableFieldNumber:
      return &kFields_FtraceEvent[13];
    case kClockDisableFieldNumber:
      return &kFields_FtraceEvent[14];
    case kClockSetRateFieldNumber:
      return &kFields_FtraceEvent[15];
    case kSchedWakeupFieldNumber:
      return &kFields_FtraceEvent[16];
    case kSchedBlockedReasonFieldNumber:
      return &kFields_FtraceEvent[17];
    case kSchedCpuHotplugFieldNumber:
      return &kFields_FtraceEvent[18];
    case kSchedWakingFieldNumber:
      return &kFields_FtraceEvent[19];
    case kIpiEntryFieldNumber:
      return &kFields_FtraceEvent[20];
    case kIpiExitFieldNumber:
      return &kFields_FtraceEvent[21];
    case kIpiRaiseFieldNumber:
      return &kFields_FtraceEvent[22];
    case kSoftirqEntryFieldNumber:
      return &kFields_FtraceEvent[23];
    case kSoftirqExitFieldNumber:
      return &kFields_FtraceEvent[24];
    case kSoftirqRaiseFieldNumber:
      return &kFields_FtraceEvent[25];
    case kI2cReadFieldNumber:
      return &kFields_FtraceEvent[26];
    case kI2cWriteFieldNumber:
      return &kFields_FtraceEvent[27];
    case kI2cResultFieldNumber:
      return &kFields_FtraceEvent[28];
    case kI2cReplyFieldNumber:
      return &kFields_FtraceEvent[29];
    case kSmbusReadFieldNumber:
      return &kFields_FtraceEvent[30];
    case kSmbusWriteFieldNumber:
      return &kFields_FtraceEvent[31];
    case kSmbusResultFieldNumber:
      return &kFields_FtraceEvent[32];
    case kSmbusReplyFieldNumber:
      return &kFields_FtraceEvent[33];
    case kLowmemoryKillFieldNumber:
      return &kFields_FtraceEvent[34];
    case kIrqHandlerEntryFieldNumber:
      return &kFields_FtraceEvent[35];
    case kIrqHandlerExitFieldNumber:
      return &kFields_FtraceEvent[36];
    case kSyncPtFieldNumber:
      return &kFields_FtraceEvent[37];
    case kSyncTimelineFieldNumber:
      return &kFields_FtraceEvent[38];
    case kSyncWaitFieldNumber:
      return &kFields_FtraceEvent[39];
    case kExt4DaWriteBeginFieldNumber:
      return &kFields_FtraceEvent[40];
    case kExt4DaWriteEndFieldNumber:
      return &kFields_FtraceEvent[41];
    case kExt4SyncFileEnterFieldNumber:
      return &kFields_FtraceEvent[42];
    case kExt4SyncFileExitFieldNumber:
      return &kFields_FtraceEvent[43];
    case kBlockRqIssueFieldNumber:
      return &kFields_FtraceEvent[44];
    case kMmVmscanDirectReclaimBeginFieldNumber:
      return &kFields_FtraceEvent[45];
    case kMmVmscanDirectReclaimEndFieldNumber:
      return &kFields_FtraceEvent[46];
    case kMmVmscanKswapdWakeFieldNumber:
      return &kFields_FtraceEvent[47];
    case kMmVmscanKswapdSleepFieldNumber:
      return &kFields_FtraceEvent[48];
    case kBinderTransactionFieldNumber:
      return &kFields_FtraceEvent[49];
    case kBinderTransactionReceivedFieldNumber:
      return &kFields_FtraceEvent[50];
    case kBinderSetPriorityFieldNumber:
      return &kFields_FtraceEvent[51];
    case kBinderLockFieldNumber:
      return &kFields_FtraceEvent[52];
    case kBinderLockedFieldNumber:
      return &kFields_FtraceEvent[53];
    case kBinderUnlockFieldNumber:
      return &kFields_FtraceEvent[54];
    case kWorkqueueActivateWorkFieldNumber:
      return &kFields_FtraceEvent[55];
    case kWorkqueueExecuteEndFieldNumber:
      return &kFields_FtraceEvent[56];
    case kWorkqueueExecuteStartFieldNumber:
      return &kFields_FtraceEvent[57];
    case kWorkqueueQueueWorkFieldNumber:
      return &kFields_FtraceEvent[58];
    case kRegulatorDisableFieldNumber:
      return &kFields_FtraceEvent[59];
    case kRegulatorDisableCompleteFieldNumber:
      return &kFields_FtraceEvent[60];
    case kRegulatorEnableFieldNumber:
      return &kFields_FtraceEvent[61];
    case kRegulatorEnableCompleteFieldNumber:
      return &kFields_FtraceEvent[62];
    case kRegulatorEnableDelayFieldNumber:
      return &kFields_FtraceEvent[63];
    case kRegulatorSetVoltageFieldNumber:
      return &kFields_FtraceEvent[64];
    case kRegulatorSetVoltageCompleteFieldNumber:
      return &kFields_FtraceEvent[65];
    case kCgroupAttachTaskFieldNumber:
      return &kFields_FtraceEvent[66];
    case kCgroupMkdirFieldNumber:
      return &kFields_FtraceEvent[67];
    case kCgroupRemountFieldNumber:
      return &kFields_FtraceEvent[68];
    case kCgroupRmdirFieldNumber:
      return &kFields_FtraceEvent[69];
    case kCgroupTransferTasksFieldNumber:
      return &kFields_FtraceEvent[70];
    case kCgroupDestroyRootFieldNumber:
      return &kFields_FtraceEvent[71];
    case kCgroupReleaseFieldNumber:
      return &kFields_FtraceEvent[72];
    case kCgroupRenameFieldNumber:
      return &kFields_FtraceEvent[73];
    case kCgroupSetupRootFieldNumber:
      return &kFields_FtraceEvent[74];
    case kMdpCmdKickoffFieldNumber:
      return &kFields_FtraceEvent[75];
    case kMdpCommitFieldNumber:
      return &kFields_FtraceEvent[76];
    case kMdpPerfSetOtFieldNumber:
      return &kFields_FtraceEvent[77];
    case kMdpSsppChangeFieldNumber:
      return &kFields_FtraceEvent[78];
    case kTracingMarkWriteFieldNumber:
      return &kFields_FtraceEvent[79];
    case kMdpCmdPingpongDoneFieldNumber:
      return &kFields_FtraceEvent[80];
    case kMdpCompareBwFieldNumber:
      return &kFields_FtraceEvent[81];
    case kMdpPerfSetPanicLutsFieldNumber:
      return &kFields_FtraceEvent[82];
    case kMdpSsppSetFieldNumber:
      return &kFields_FtraceEvent[83];
    case kMdpCmdReadptrDoneFieldNumber:
      return &kFields_FtraceEvent[84];
    case kMdpMisrCrcFieldNumber:
      return &kFields_FtraceEvent[85];
    case kMdpPerfSetQosLutsFieldNumber:
      return &kFields_FtraceEvent[86];
    case kMdpTraceCounterFieldNumber:
      return &kFields_FtraceEvent[87];
    case kMdpCmdReleaseBwFieldNumber:
      return &kFields_FtraceEvent[88];
    case kMdpMixerUpdateFieldNumber:
      return &kFields_FtraceEvent[89];
    case kMdpPerfSetWmLevelsFieldNumber:
      return &kFields_FtraceEvent[90];
    case kMdpVideoUnderrunDoneFieldNumber:
      return &kFields_FtraceEvent[91];
    case kMdpCmdWaitPingpongFieldNumber:
      return &kFields_FtraceEvent[92];
    case kMdpPerfPrefillCalcFieldNumber:
      return &kFields_FtraceEvent[93];
    case kMdpPerfUpdateBusFieldNumber:
      return &kFields_FtraceEvent[94];
    case kRotatorBwAoAsContextFieldNumber:
      return &kFields_FtraceEvent[95];
    case kMmFilemapAddToPageCacheFieldNumber:
      return &kFields_FtraceEvent[96];
    case kMmFilemapDeleteFromPageCacheFieldNumber:
      return &kFields_FtraceEvent[97];
    case kMmCompactionBeginFieldNumber:
      return &kFields_FtraceEvent[98];
    case kMmCompactionDeferCompactionFieldNumber:
      return &kFields_FtraceEvent[99];
    case kMmCompactionDeferredFieldNumber:
      return &kFields_FtraceEvent[100];
    case kMmCompactionDeferResetFieldNumber:
      return &kFields_FtraceEvent[101];
    case kMmCompactionEndFieldNumber:
      return &kFields_FtraceEvent[102];
    case kMmCompactionFinishedFieldNumber:
      return &kFields_FtraceEvent[103];
    case kMmCompactionIsolateFreepagesFieldNumber:
      return &kFields_FtraceEvent[104];
    case kMmCompactionIsolateMigratepagesFieldNumber:
      return &kFields_FtraceEvent[105];
    case kMmCompactionKcompactdSleepFieldNumber:
      return &kFields_FtraceEvent[106];
    case kMmCompactionKcompactdWakeFieldNumber:
      return &kFields_FtraceEvent[107];
    case kMmCompactionMigratepagesFieldNumber:
      return &kFields_FtraceEvent[108];
    case kMmCompactionSuitableFieldNumber:
      return &kFields_FtraceEvent[109];
    case kMmCompactionTryToCompactPagesFieldNumber:
      return &kFields_FtraceEvent[110];
    case kMmCompactionWakeupKcompactdFieldNumber:
      return &kFields_FtraceEvent[111];
    case kSuspendResumeFieldNumber:
      return &kFields_FtraceEvent[112];
    case kSchedWakeupNewFieldNumber:
      return &kFields_FtraceEvent[113];
    case kBlockBioBackmergeFieldNumber:
      return &kFields_FtraceEvent[114];
    case kBlockBioBounceFieldNumber:
      return &kFields_FtraceEvent[115];
    case kBlockBioCompleteFieldNumber:
      return &kFields_FtraceEvent[116];
    case kBlockBioFrontmergeFieldNumber:
      return &kFields_FtraceEvent[117];
    case kBlockBioQueueFieldNumber:
      return &kFields_FtraceEvent[118];
    case kBlockBioRemapFieldNumber:
      return &kFields_FtraceEvent[119];
    case kBlockDirtyBufferFieldNumber:
      return &kFields_FtraceEvent[120];
    case kBlockGetrqFieldNumber:
      return &kFields_FtraceEvent[121];
    case kBlockPlugFieldNumber:
      return &kFields_FtraceEvent[122];
    case kBlockRqAbortFieldNumber:
      return &kFields_FtraceEvent[123];
    case kBlockRqCompleteFieldNumber:
      return &kFields_FtraceEvent[124];
    case kBlockRqInsertFieldNumber:
      return &kFields_FtraceEvent[125];
    case kBlockRqRemapFieldNumber:
      return &kFields_FtraceEvent[126];
    case kBlockRqRequeueFieldNumber:
      return &kFields_FtraceEvent[127];
    case kBlockSleeprqFieldNumber:
      return &kFields_FtraceEvent[128];
    case kBlockSplitFieldNumber:
      return &kFields_FtraceEvent[129];
    case kBlockTouchBufferFieldNumber:
      return &kFields_FtraceEvent[130];
    case kBlockUnplugFieldNumber:
      return &kFields_FtraceEvent[131];
    case kExt4AllocDaBlocksFieldNumber:
      return &kFields_FtraceEvent[132];
    case kExt4AllocateBlocksFieldNumber:
      return &kFields_FtraceEvent[133];
    case kExt4AllocateInodeFieldNumber:
      return &kFields_FtraceEvent[134];
    case kExt4BeginOrderedTruncateFieldNumber:
      return &kFields_FtraceEvent[135];
    case kExt4CollapseRangeFieldNumber:
      return &kFields_FtraceEvent[136];
    case kExt4DaReleaseSpaceFieldNumber:
      return &kFields_FtraceEvent[137];
    case kExt4DaReserveSpaceFieldNumber:
      return &kFields_FtraceEvent[138];
    case kExt4DaUpdateReserveSpaceFieldNumber:
      return &kFields_FtraceEvent[139];
    case kExt4DaWritePagesFieldNumber:
      return &kFields_FtraceEvent[140];
    case kExt4DaWritePagesExtentFieldNumber:
      return &kFields_FtraceEvent[141];
    case kExt4DirectIOEnterFieldNumber:
      return &kFields_FtraceEvent[142];
    case kExt4DirectIOExitFieldNumber:
      return &kFields_FtraceEvent[143];
    case kExt4DiscardBlocksFieldNumber:
      return &kFields_FtraceEvent[144];
    case kExt4DiscardPreallocationsFieldNumber:
      return &kFields_FtraceEvent[145];
    case kExt4DropInodeFieldNumber:
      return &kFields_FtraceEvent[146];
    case kExt4EsCacheExtentFieldNumber:
      return &kFields_FtraceEvent[147];
    case kExt4EsFindDelayedExtentRangeEnterFieldNumber:
      return &kFields_FtraceEvent[148];
    case kExt4EsFindDelayedExtentRangeExitFieldNumber:
      return &kFields_FtraceEvent[149];
    case kExt4EsInsertExtentFieldNumber:
      return &kFields_FtraceEvent[150];
    case kExt4EsLookupExtentEnterFieldNumber:
      return &kFields_FtraceEvent[151];
    case kExt4EsLookupExtentExitFieldNumber:
      return &kFields_FtraceEvent[152];
    case kExt4EsRemoveExtentFieldNumber:
      return &kFields_FtraceEvent[153];
    case kExt4EsShrinkFieldNumber:
      return &kFields_FtraceEvent[154];
    case kExt4EsShrinkCountFieldNumber:
      return &kFields_FtraceEvent[155];
    case kExt4EsShrinkScanEnterFieldNumber:
      return &kFields_FtraceEvent[156];
    case kExt4EsShrinkScanExitFieldNumber:
      return &kFields_FtraceEvent[157];
    case kExt4EvictInodeFieldNumber:
      return &kFields_FtraceEvent[158];
    case kExt4ExtConvertToInitializedEnterFieldNumber:
      return &kFields_FtraceEvent[159];
    case kExt4ExtConvertToInitializedFastpathFieldNumber:
      return &kFields_FtraceEvent[160];
    case kExt4ExtHandleUnwrittenExtentsFieldNumber:
      return &kFields_FtraceEvent[161];
    case kExt4ExtInCacheFieldNumber:
      return &kFields_FtraceEvent[162];
    case kExt4ExtLoadExtentFieldNumber:
      return &kFields_FtraceEvent[163];
    case kExt4ExtMapBlocksEnterFieldNumber:
      return &kFields_FtraceEvent[164];
    case kExt4ExtMapBlocksExitFieldNumber:
      return &kFields_FtraceEvent[165];
    case kExt4ExtPutInCacheFieldNumber:
      return &kFields_FtraceEvent[166];
    case kExt4ExtRemoveSpaceFieldNumber:
      return &kFields_FtraceEvent[167];
    case kExt4ExtRemoveSpaceDoneFieldNumber:
      return &kFields_FtraceEvent[168];
    case kExt4ExtRmIdxFieldNumber:
      return &kFields_FtraceEvent[169];
    case kExt4ExtRmLeafFieldNumber:
      return &kFields_FtraceEvent[170];
    case kExt4ExtShowExtentFieldNumber:
      return &kFields_FtraceEvent[171];
    case kExt4FallocateEnterFieldNumber:
      return &kFields_FtraceEvent[172];
    case kExt4FallocateExitFieldNumber:
      return &kFields_FtraceEvent[173];
    case kExt4FindDelallocRangeFieldNumber:
      return &kFields_FtraceEvent[174];
    case kExt4ForgetFieldNumber:
      return &kFields_FtraceEvent[175];
    case kExt4FreeBlocksFieldNumber:
      return &kFields_FtraceEvent[176];
    case kExt4FreeInodeFieldNumber:
      return &kFields_FtraceEvent[177];
    case kExt4GetImpliedClusterAllocExitFieldNumber:
      return &kFields_FtraceEvent[178];
    case kExt4GetReservedClusterAllocFieldNumber:
      return &kFields_FtraceEvent[179];
    case kExt4IndMapBlocksEnterFieldNumber:
      return &kFields_FtraceEvent[180];
    case kExt4IndMapBlocksExitFieldNumber:
      return &kFields_FtraceEvent[181];
    case kExt4InsertRangeFieldNumber:
      return &kFields_FtraceEvent[182];
    case kExt4InvalidatepageFieldNumber:
      return &kFields_FtraceEvent[183];
    case kExt4JournalStartFieldNumber:
      return &kFields_FtraceEvent[184];
    case kExt4JournalStartReservedFieldNumber:
      return &kFields_FtraceEvent[185];
    case kExt4JournalledInvalidatepageFieldNumber:
      return &kFields_FtraceEvent[186];
    case kExt4JournalledWriteEndFieldNumber:
      return &kFields_FtraceEvent[187];
    case kExt4LoadInodeFieldNumber:
      return &kFields_FtraceEvent[188];
    case kExt4LoadInodeBitmapFieldNumber:
      return &kFields_FtraceEvent[189];
    case kExt4MarkInodeDirtyFieldNumber:
      return &kFields_FtraceEvent[190];
    case kExt4MbBitmapLoadFieldNumber:
      return &kFields_FtraceEvent[191];
    case kExt4MbBuddyBitmapLoadFieldNumber:
      return &kFields_FtraceEvent[192];
    case kExt4MbDiscardPreallocationsFieldNumber:
      return &kFields_FtraceEvent[193];
    case kExt4MbNewGroupPaFieldNumber:
      return &kFields_FtraceEvent[194];
    case kExt4MbNewInodePaFieldNumber:
      return &kFields_FtraceEvent[195];
    case kExt4MbReleaseGroupPaFieldNumber:
      return &kFields_FtraceEvent[196];
    case kExt4MbReleaseInodePaFieldNumber:
      return &kFields_FtraceEvent[197];
    case kExt4MballocAllocFieldNumber:
      return &kFields_FtraceEvent[198];
    case kExt4MballocDiscardFieldNumber:
      return &kFields_FtraceEvent[199];
    case kExt4MballocFreeFieldNumber:
      return &kFields_FtraceEvent[200];
    case kExt4MballocPreallocFieldNumber:
      return &kFields_FtraceEvent[201];
    case kExt4OtherInodeUpdateTimeFieldNumber:
      return &kFields_FtraceEvent[202];
    case kExt4PunchHoleFieldNumber:
      return &kFields_FtraceEvent[203];
    case kExt4ReadBlockBitmapLoadFieldNumber:
      return &kFields_FtraceEvent[204];
    case kExt4ReadpageFieldNumber:
      return &kFields_FtraceEvent[205];
    case kExt4ReleasepageFieldNumber:
      return &kFields_FtraceEvent[206];
    case kExt4RemoveBlocksFieldNumber:
      return &kFields_FtraceEvent[207];
    case kExt4RequestBlocksFieldNumber:
      return &kFields_FtraceEvent[208];
    case kExt4RequestInodeFieldNumber:
      return &kFields_FtraceEvent[209];
    case kExt4SyncFsFieldNumber:
      return &kFields_FtraceEvent[210];
    case kExt4TrimAllFreeFieldNumber:
      return &kFields_FtraceEvent[211];
    case kExt4TrimExtentFieldNumber:
      return &kFields_FtraceEvent[212];
    case kExt4TruncateEnterFieldNumber:
      return &kFields_FtraceEvent[213];
    case kExt4TruncateExitFieldNumber:
      return &kFields_FtraceEvent[214];
    case kExt4UnlinkEnterFieldNumber:
      return &kFields_FtraceEvent[215];
    case kExt4UnlinkExitFieldNumber:
      return &kFields_FtraceEvent[216];
    case kExt4WriteBeginFieldNumber:
      return &kFields_FtraceEvent[217];
    case kExt4WriteEndFieldNumber:
      return &kFields_FtraceEvent[218];
    case kExt4WritepageFieldNumber:
      return &kFields_FtraceEvent[219];
    case kExt4WritepagesFieldNumber:
      return &kFields_FtraceEvent[220];
    case kExt4WritepagesResultFieldNumber:
      return &kFields_FtraceEvent[221];
    case kExt4ZeroRangeFieldNumber:
      return &kFields_FtraceEvent[222];
    case kTaskNewtaskFieldNumber:
      return &kFields_FtraceEvent[223];
    case kTaskRenameFieldNumber:
      return &kFields_FtraceEvent[224];
    case kSchedProcessExecFieldNumber:
      return &kFields_FtraceEvent[225];
    case kSchedProcessExitFieldNumber:
      return &kFields_FtraceEvent[226];
    case kSchedProcessForkFieldNumber:
      return &kFields_FtraceEvent[227];
    case kSchedProcessFreeFieldNumber:
      return &kFields_FtraceEvent[228];
    case kSchedProcessHangFieldNumber:
      return &kFields_FtraceEvent[229];
    case kSchedProcessWaitFieldNumber:
      return &kFields_FtraceEvent[230];
    case kF2fsDoSubmitBioFieldNumber:
      return &kFields_FtraceEvent[231];
    case kF2fsEvictInodeFieldNumber:
      return &kFields_FtraceEvent[232];
    case kF2fsFallocateFieldNumber:
      return &kFields_FtraceEvent[233];
    case kF2fsGetDataBlockFieldNumber:
      return &kFields_FtraceEvent[234];
    case kF2fsGetVictimFieldNumber:
      return &kFields_FtraceEvent[235];
    case kF2fsIgetFieldNumber:
      return &kFields_FtraceEvent[236];
    case kF2fsIgetExitFieldNumber:
      return &kFields_FtraceEvent[237];
    case kF2fsNewInodeFieldNumber:
      return &kFields_FtraceEvent[238];
    case kF2fsReadpageFieldNumber:
      return &kFields_FtraceEvent[239];
    case kF2fsReserveNewBlockFieldNumber:
      return &kFields_FtraceEvent[240];
    case kF2fsSetPageDirtyFieldNumber:
      return &kFields_FtraceEvent[241];
    case kF2fsSubmitWritePageFieldNumber:
      return &kFields_FtraceEvent[242];
    case kF2fsSyncFileEnterFieldNumber:
      return &kFields_FtraceEvent[243];
    case kF2fsSyncFileExitFieldNumber:
      return &kFields_FtraceEvent[244];
    case kF2fsSyncFsFieldNumber:
      return &kFields_FtraceEvent[245];
    case kF2fsTruncateFieldNumber:
      return &kFields_FtraceEvent[246];
    case kF2fsTruncateBlocksEnterFieldNumber:
      return &kFields_FtraceEvent[247];
    case kF2fsTruncateBlocksExitFieldNumber:
      return &kFields_FtraceEvent[248];
    case kF2fsTruncateDataBlocksRangeFieldNumber:
      return &kFields_FtraceEvent[249];
    case kF2fsTruncateInodeBlocksEnterFieldNumber:
      return &kFields_FtraceEvent[250];
    case kF2fsTruncateInodeBlocksExitFieldNumber:
      return &kFields_FtraceEvent[251];
    case kF2fsTruncateNodeFieldNumber:
      return &kFields_FtraceEvent[252];
    case kF2fsTruncateNodesEnterFieldNumber:
      return &kFields_FtraceEvent[253];
    case kF2fsTruncateNodesExitFieldNumber:
      return &kFields_FtraceEvent[254];
    case kF2fsTruncatePartialNodesFieldNumber:
      return &kFields_FtraceEvent[255];
    case kF2fsUnlinkEnterFieldNumber:
      return &kFields_FtraceEvent[256];
    case kF2fsUnlinkExitFieldNumber:
      return &kFields_FtraceEvent[257];
    case kF2fsVmPageMkwriteFieldNumber:
      return &kFields_FtraceEvent[258];
    case kF2fsWriteBeginFieldNumber:
      return &kFields_FtraceEvent[259];
    case kF2fsWriteCheckpointFieldNumber:
      return &kFields_FtraceEvent[260];
    case kF2fsWriteEndFieldNumber:
      return &kFields_FtraceEvent[261];
    default:
      return &kInvalidField;
  }
}

PrintFtraceEvent* FtraceEvent::set_print() {
  return BeginNestedMessage<PrintFtraceEvent>(3);
}

SchedSwitchFtraceEvent* FtraceEvent::set_sched_switch() {
  return BeginNestedMessage<SchedSwitchFtraceEvent>(4);
}

CpufreqInteractiveAlreadyFtraceEvent* FtraceEvent::set_cpufreq_interactive_already() {
  return BeginNestedMessage<CpufreqInteractiveAlreadyFtraceEvent>(5);
}

CpufreqInteractiveBoostFtraceEvent* FtraceEvent::set_cpufreq_interactive_boost() {
  return BeginNestedMessage<CpufreqInteractiveBoostFtraceEvent>(6);
}

CpufreqInteractiveNotyetFtraceEvent* FtraceEvent::set_cpufreq_interactive_notyet() {
  return BeginNestedMessage<CpufreqInteractiveNotyetFtraceEvent>(7);
}

CpufreqInteractiveSetspeedFtraceEvent* FtraceEvent::set_cpufreq_interactive_setspeed() {
  return BeginNestedMessage<CpufreqInteractiveSetspeedFtraceEvent>(8);
}

CpufreqInteractiveTargetFtraceEvent* FtraceEvent::set_cpufreq_interactive_target() {
  return BeginNestedMessage<CpufreqInteractiveTargetFtraceEvent>(9);
}

CpufreqInteractiveUnboostFtraceEvent* FtraceEvent::set_cpufreq_interactive_unboost() {
  return BeginNestedMessage<CpufreqInteractiveUnboostFtraceEvent>(10);
}

CpuFrequencyFtraceEvent* FtraceEvent::set_cpu_frequency() {
  return BeginNestedMessage<CpuFrequencyFtraceEvent>(11);
}

CpuFrequencyLimitsFtraceEvent* FtraceEvent::set_cpu_frequency_limits() {
  return BeginNestedMessage<CpuFrequencyLimitsFtraceEvent>(12);
}

CpuIdleFtraceEvent* FtraceEvent::set_cpu_idle() {
  return BeginNestedMessage<CpuIdleFtraceEvent>(13);
}

ClockEnableFtraceEvent* FtraceEvent::set_clock_enable() {
  return BeginNestedMessage<ClockEnableFtraceEvent>(14);
}

ClockDisableFtraceEvent* FtraceEvent::set_clock_disable() {
  return BeginNestedMessage<ClockDisableFtraceEvent>(15);
}

ClockSetRateFtraceEvent* FtraceEvent::set_clock_set_rate() {
  return BeginNestedMessage<ClockSetRateFtraceEvent>(16);
}

SchedWakeupFtraceEvent* FtraceEvent::set_sched_wakeup() {
  return BeginNestedMessage<SchedWakeupFtraceEvent>(17);
}

SchedBlockedReasonFtraceEvent* FtraceEvent::set_sched_blocked_reason() {
  return BeginNestedMessage<SchedBlockedReasonFtraceEvent>(18);
}

SchedCpuHotplugFtraceEvent* FtraceEvent::set_sched_cpu_hotplug() {
  return BeginNestedMessage<SchedCpuHotplugFtraceEvent>(19);
}

SchedWakingFtraceEvent* FtraceEvent::set_sched_waking() {
  return BeginNestedMessage<SchedWakingFtraceEvent>(20);
}

IpiEntryFtraceEvent* FtraceEvent::set_ipi_entry() {
  return BeginNestedMessage<IpiEntryFtraceEvent>(21);
}

IpiExitFtraceEvent* FtraceEvent::set_ipi_exit() {
  return BeginNestedMessage<IpiExitFtraceEvent>(22);
}

IpiRaiseFtraceEvent* FtraceEvent::set_ipi_raise() {
  return BeginNestedMessage<IpiRaiseFtraceEvent>(23);
}

SoftirqEntryFtraceEvent* FtraceEvent::set_softirq_entry() {
  return BeginNestedMessage<SoftirqEntryFtraceEvent>(24);
}

SoftirqExitFtraceEvent* FtraceEvent::set_softirq_exit() {
  return BeginNestedMessage<SoftirqExitFtraceEvent>(25);
}

SoftirqRaiseFtraceEvent* FtraceEvent::set_softirq_raise() {
  return BeginNestedMessage<SoftirqRaiseFtraceEvent>(26);
}

I2cReadFtraceEvent* FtraceEvent::set_i2c_read() {
  return BeginNestedMessage<I2cReadFtraceEvent>(27);
}

I2cWriteFtraceEvent* FtraceEvent::set_i2c_write() {
  return BeginNestedMessage<I2cWriteFtraceEvent>(28);
}

I2cResultFtraceEvent* FtraceEvent::set_i2c_result() {
  return BeginNestedMessage<I2cResultFtraceEvent>(29);
}

I2cReplyFtraceEvent* FtraceEvent::set_i2c_reply() {
  return BeginNestedMessage<I2cReplyFtraceEvent>(30);
}

SmbusReadFtraceEvent* FtraceEvent::set_smbus_read() {
  return BeginNestedMessage<SmbusReadFtraceEvent>(31);
}

SmbusWriteFtraceEvent* FtraceEvent::set_smbus_write() {
  return BeginNestedMessage<SmbusWriteFtraceEvent>(32);
}

SmbusResultFtraceEvent* FtraceEvent::set_smbus_result() {
  return BeginNestedMessage<SmbusResultFtraceEvent>(33);
}

SmbusReplyFtraceEvent* FtraceEvent::set_smbus_reply() {
  return BeginNestedMessage<SmbusReplyFtraceEvent>(34);
}

LowmemoryKillFtraceEvent* FtraceEvent::set_lowmemory_kill() {
  return BeginNestedMessage<LowmemoryKillFtraceEvent>(35);
}

IrqHandlerEntryFtraceEvent* FtraceEvent::set_irq_handler_entry() {
  return BeginNestedMessage<IrqHandlerEntryFtraceEvent>(36);
}

IrqHandlerExitFtraceEvent* FtraceEvent::set_irq_handler_exit() {
  return BeginNestedMessage<IrqHandlerExitFtraceEvent>(37);
}

SyncPtFtraceEvent* FtraceEvent::set_sync_pt() {
  return BeginNestedMessage<SyncPtFtraceEvent>(38);
}

SyncTimelineFtraceEvent* FtraceEvent::set_sync_timeline() {
  return BeginNestedMessage<SyncTimelineFtraceEvent>(39);
}

SyncWaitFtraceEvent* FtraceEvent::set_sync_wait() {
  return BeginNestedMessage<SyncWaitFtraceEvent>(40);
}

Ext4DaWriteBeginFtraceEvent* FtraceEvent::set_ext4_da_write_begin() {
  return BeginNestedMessage<Ext4DaWriteBeginFtraceEvent>(41);
}

Ext4DaWriteEndFtraceEvent* FtraceEvent::set_ext4_da_write_end() {
  return BeginNestedMessage<Ext4DaWriteEndFtraceEvent>(42);
}

Ext4SyncFileEnterFtraceEvent* FtraceEvent::set_ext4_sync_file_enter() {
  return BeginNestedMessage<Ext4SyncFileEnterFtraceEvent>(43);
}

Ext4SyncFileExitFtraceEvent* FtraceEvent::set_ext4_sync_file_exit() {
  return BeginNestedMessage<Ext4SyncFileExitFtraceEvent>(44);
}

BlockRqIssueFtraceEvent* FtraceEvent::set_block_rq_issue() {
  return BeginNestedMessage<BlockRqIssueFtraceEvent>(45);
}

MmVmscanDirectReclaimBeginFtraceEvent* FtraceEvent::set_mm_vmscan_direct_reclaim_begin() {
  return BeginNestedMessage<MmVmscanDirectReclaimBeginFtraceEvent>(46);
}

MmVmscanDirectReclaimEndFtraceEvent* FtraceEvent::set_mm_vmscan_direct_reclaim_end() {
  return BeginNestedMessage<MmVmscanDirectReclaimEndFtraceEvent>(47);
}

MmVmscanKswapdWakeFtraceEvent* FtraceEvent::set_mm_vmscan_kswapd_wake() {
  return BeginNestedMessage<MmVmscanKswapdWakeFtraceEvent>(48);
}

MmVmscanKswapdSleepFtraceEvent* FtraceEvent::set_mm_vmscan_kswapd_sleep() {
  return BeginNestedMessage<MmVmscanKswapdSleepFtraceEvent>(49);
}

BinderTransactionFtraceEvent* FtraceEvent::set_binder_transaction() {
  return BeginNestedMessage<BinderTransactionFtraceEvent>(50);
}

BinderTransactionReceivedFtraceEvent* FtraceEvent::set_binder_transaction_received() {
  return BeginNestedMessage<BinderTransactionReceivedFtraceEvent>(51);
}

BinderSetPriorityFtraceEvent* FtraceEvent::set_binder_set_priority() {
  return BeginNestedMessage<BinderSetPriorityFtraceEvent>(52);
}

BinderLockFtraceEvent* FtraceEvent::set_binder_lock() {
  return BeginNestedMessage<BinderLockFtraceEvent>(53);
}

BinderLockedFtraceEvent* FtraceEvent::set_binder_locked() {
  return BeginNestedMessage<BinderLockedFtraceEvent>(54);
}

BinderUnlockFtraceEvent* FtraceEvent::set_binder_unlock() {
  return BeginNestedMessage<BinderUnlockFtraceEvent>(55);
}

WorkqueueActivateWorkFtraceEvent* FtraceEvent::set_workqueue_activate_work() {
  return BeginNestedMessage<WorkqueueActivateWorkFtraceEvent>(56);
}

WorkqueueExecuteEndFtraceEvent* FtraceEvent::set_workqueue_execute_end() {
  return BeginNestedMessage<WorkqueueExecuteEndFtraceEvent>(57);
}

WorkqueueExecuteStartFtraceEvent* FtraceEvent::set_workqueue_execute_start() {
  return BeginNestedMessage<WorkqueueExecuteStartFtraceEvent>(58);
}

WorkqueueQueueWorkFtraceEvent* FtraceEvent::set_workqueue_queue_work() {
  return BeginNestedMessage<WorkqueueQueueWorkFtraceEvent>(59);
}

RegulatorDisableFtraceEvent* FtraceEvent::set_regulator_disable() {
  return BeginNestedMessage<RegulatorDisableFtraceEvent>(60);
}

RegulatorDisableCompleteFtraceEvent* FtraceEvent::set_regulator_disable_complete() {
  return BeginNestedMessage<RegulatorDisableCompleteFtraceEvent>(61);
}

RegulatorEnableFtraceEvent* FtraceEvent::set_regulator_enable() {
  return BeginNestedMessage<RegulatorEnableFtraceEvent>(62);
}

RegulatorEnableCompleteFtraceEvent* FtraceEvent::set_regulator_enable_complete() {
  return BeginNestedMessage<RegulatorEnableCompleteFtraceEvent>(63);
}

RegulatorEnableDelayFtraceEvent* FtraceEvent::set_regulator_enable_delay() {
  return BeginNestedMessage<RegulatorEnableDelayFtraceEvent>(64);
}

RegulatorSetVoltageFtraceEvent* FtraceEvent::set_regulator_set_voltage() {
  return BeginNestedMessage<RegulatorSetVoltageFtraceEvent>(65);
}

RegulatorSetVoltageCompleteFtraceEvent* FtraceEvent::set_regulator_set_voltage_complete() {
  return BeginNestedMessage<RegulatorSetVoltageCompleteFtraceEvent>(66);
}

CgroupAttachTaskFtraceEvent* FtraceEvent::set_cgroup_attach_task() {
  return BeginNestedMessage<CgroupAttachTaskFtraceEvent>(67);
}

CgroupMkdirFtraceEvent* FtraceEvent::set_cgroup_mkdir() {
  return BeginNestedMessage<CgroupMkdirFtraceEvent>(68);
}

CgroupRemountFtraceEvent* FtraceEvent::set_cgroup_remount() {
  return BeginNestedMessage<CgroupRemountFtraceEvent>(69);
}

CgroupRmdirFtraceEvent* FtraceEvent::set_cgroup_rmdir() {
  return BeginNestedMessage<CgroupRmdirFtraceEvent>(70);
}

CgroupTransferTasksFtraceEvent* FtraceEvent::set_cgroup_transfer_tasks() {
  return BeginNestedMessage<CgroupTransferTasksFtraceEvent>(71);
}

CgroupDestroyRootFtraceEvent* FtraceEvent::set_cgroup_destroy_root() {
  return BeginNestedMessage<CgroupDestroyRootFtraceEvent>(72);
}

CgroupReleaseFtraceEvent* FtraceEvent::set_cgroup_release() {
  return BeginNestedMessage<CgroupReleaseFtraceEvent>(73);
}

CgroupRenameFtraceEvent* FtraceEvent::set_cgroup_rename() {
  return BeginNestedMessage<CgroupRenameFtraceEvent>(74);
}

CgroupSetupRootFtraceEvent* FtraceEvent::set_cgroup_setup_root() {
  return BeginNestedMessage<CgroupSetupRootFtraceEvent>(75);
}

MdpCmdKickoffFtraceEvent* FtraceEvent::set_mdp_cmd_kickoff() {
  return BeginNestedMessage<MdpCmdKickoffFtraceEvent>(76);
}

MdpCommitFtraceEvent* FtraceEvent::set_mdp_commit() {
  return BeginNestedMessage<MdpCommitFtraceEvent>(77);
}

MdpPerfSetOtFtraceEvent* FtraceEvent::set_mdp_perf_set_ot() {
  return BeginNestedMessage<MdpPerfSetOtFtraceEvent>(78);
}

MdpSsppChangeFtraceEvent* FtraceEvent::set_mdp_sspp_change() {
  return BeginNestedMessage<MdpSsppChangeFtraceEvent>(79);
}

TracingMarkWriteFtraceEvent* FtraceEvent::set_tracing_mark_write() {
  return BeginNestedMessage<TracingMarkWriteFtraceEvent>(80);
}

MdpCmdPingpongDoneFtraceEvent* FtraceEvent::set_mdp_cmd_pingpong_done() {
  return BeginNestedMessage<MdpCmdPingpongDoneFtraceEvent>(81);
}

MdpCompareBwFtraceEvent* FtraceEvent::set_mdp_compare_bw() {
  return BeginNestedMessage<MdpCompareBwFtraceEvent>(82);
}

MdpPerfSetPanicLutsFtraceEvent* FtraceEvent::set_mdp_perf_set_panic_luts() {
  return BeginNestedMessage<MdpPerfSetPanicLutsFtraceEvent>(83);
}

MdpSsppSetFtraceEvent* FtraceEvent::set_mdp_sspp_set() {
  return BeginNestedMessage<MdpSsppSetFtraceEvent>(84);
}

MdpCmdReadptrDoneFtraceEvent* FtraceEvent::set_mdp_cmd_readptr_done() {
  return BeginNestedMessage<MdpCmdReadptrDoneFtraceEvent>(85);
}

MdpMisrCrcFtraceEvent* FtraceEvent::set_mdp_misr_crc() {
  return BeginNestedMessage<MdpMisrCrcFtraceEvent>(86);
}

MdpPerfSetQosLutsFtraceEvent* FtraceEvent::set_mdp_perf_set_qos_luts() {
  return BeginNestedMessage<MdpPerfSetQosLutsFtraceEvent>(87);
}

MdpTraceCounterFtraceEvent* FtraceEvent::set_mdp_trace_counter() {
  return BeginNestedMessage<MdpTraceCounterFtraceEvent>(88);
}

MdpCmdReleaseBwFtraceEvent* FtraceEvent::set_mdp_cmd_release_bw() {
  return BeginNestedMessage<MdpCmdReleaseBwFtraceEvent>(89);
}

MdpMixerUpdateFtraceEvent* FtraceEvent::set_mdp_mixer_update() {
  return BeginNestedMessage<MdpMixerUpdateFtraceEvent>(90);
}

MdpPerfSetWmLevelsFtraceEvent* FtraceEvent::set_mdp_perf_set_wm_levels() {
  return BeginNestedMessage<MdpPerfSetWmLevelsFtraceEvent>(91);
}

MdpVideoUnderrunDoneFtraceEvent* FtraceEvent::set_mdp_video_underrun_done() {
  return BeginNestedMessage<MdpVideoUnderrunDoneFtraceEvent>(92);
}

MdpCmdWaitPingpongFtraceEvent* FtraceEvent::set_mdp_cmd_wait_pingpong() {
  return BeginNestedMessage<MdpCmdWaitPingpongFtraceEvent>(93);
}

MdpPerfPrefillCalcFtraceEvent* FtraceEvent::set_mdp_perf_prefill_calc() {
  return BeginNestedMessage<MdpPerfPrefillCalcFtraceEvent>(94);
}

MdpPerfUpdateBusFtraceEvent* FtraceEvent::set_mdp_perf_update_bus() {
  return BeginNestedMessage<MdpPerfUpdateBusFtraceEvent>(95);
}

RotatorBwAoAsContextFtraceEvent* FtraceEvent::set_rotator_bw_ao_as_context() {
  return BeginNestedMessage<RotatorBwAoAsContextFtraceEvent>(96);
}

MmFilemapAddToPageCacheFtraceEvent* FtraceEvent::set_mm_filemap_add_to_page_cache() {
  return BeginNestedMessage<MmFilemapAddToPageCacheFtraceEvent>(97);
}

MmFilemapDeleteFromPageCacheFtraceEvent* FtraceEvent::set_mm_filemap_delete_from_page_cache() {
  return BeginNestedMessage<MmFilemapDeleteFromPageCacheFtraceEvent>(98);
}

MmCompactionBeginFtraceEvent* FtraceEvent::set_mm_compaction_begin() {
  return BeginNestedMessage<MmCompactionBeginFtraceEvent>(99);
}

MmCompactionDeferCompactionFtraceEvent* FtraceEvent::set_mm_compaction_defer_compaction() {
  return BeginNestedMessage<MmCompactionDeferCompactionFtraceEvent>(100);
}

MmCompactionDeferredFtraceEvent* FtraceEvent::set_mm_compaction_deferred() {
  return BeginNestedMessage<MmCompactionDeferredFtraceEvent>(101);
}

MmCompactionDeferResetFtraceEvent* FtraceEvent::set_mm_compaction_defer_reset() {
  return BeginNestedMessage<MmCompactionDeferResetFtraceEvent>(102);
}

MmCompactionEndFtraceEvent* FtraceEvent::set_mm_compaction_end() {
  return BeginNestedMessage<MmCompactionEndFtraceEvent>(103);
}

MmCompactionFinishedFtraceEvent* FtraceEvent::set_mm_compaction_finished() {
  return BeginNestedMessage<MmCompactionFinishedFtraceEvent>(104);
}

MmCompactionIsolateFreepagesFtraceEvent* FtraceEvent::set_mm_compaction_isolate_freepages() {
  return BeginNestedMessage<MmCompactionIsolateFreepagesFtraceEvent>(105);
}

MmCompactionIsolateMigratepagesFtraceEvent* FtraceEvent::set_mm_compaction_isolate_migratepages() {
  return BeginNestedMessage<MmCompactionIsolateMigratepagesFtraceEvent>(106);
}

MmCompactionKcompactdSleepFtraceEvent* FtraceEvent::set_mm_compaction_kcompactd_sleep() {
  return BeginNestedMessage<MmCompactionKcompactdSleepFtraceEvent>(107);
}

MmCompactionKcompactdWakeFtraceEvent* FtraceEvent::set_mm_compaction_kcompactd_wake() {
  return BeginNestedMessage<MmCompactionKcompactdWakeFtraceEvent>(108);
}

MmCompactionMigratepagesFtraceEvent* FtraceEvent::set_mm_compaction_migratepages() {
  return BeginNestedMessage<MmCompactionMigratepagesFtraceEvent>(109);
}

MmCompactionSuitableFtraceEvent* FtraceEvent::set_mm_compaction_suitable() {
  return BeginNestedMessage<MmCompactionSuitableFtraceEvent>(110);
}

MmCompactionTryToCompactPagesFtraceEvent* FtraceEvent::set_mm_compaction_try_to_compact_pages() {
  return BeginNestedMessage<MmCompactionTryToCompactPagesFtraceEvent>(111);
}

MmCompactionWakeupKcompactdFtraceEvent* FtraceEvent::set_mm_compaction_wakeup_kcompactd() {
  return BeginNestedMessage<MmCompactionWakeupKcompactdFtraceEvent>(112);
}

SuspendResumeFtraceEvent* FtraceEvent::set_suspend_resume() {
  return BeginNestedMessage<SuspendResumeFtraceEvent>(113);
}

SchedWakeupNewFtraceEvent* FtraceEvent::set_sched_wakeup_new() {
  return BeginNestedMessage<SchedWakeupNewFtraceEvent>(114);
}

BlockBioBackmergeFtraceEvent* FtraceEvent::set_block_bio_backmerge() {
  return BeginNestedMessage<BlockBioBackmergeFtraceEvent>(115);
}

BlockBioBounceFtraceEvent* FtraceEvent::set_block_bio_bounce() {
  return BeginNestedMessage<BlockBioBounceFtraceEvent>(116);
}

BlockBioCompleteFtraceEvent* FtraceEvent::set_block_bio_complete() {
  return BeginNestedMessage<BlockBioCompleteFtraceEvent>(117);
}

BlockBioFrontmergeFtraceEvent* FtraceEvent::set_block_bio_frontmerge() {
  return BeginNestedMessage<BlockBioFrontmergeFtraceEvent>(118);
}

BlockBioQueueFtraceEvent* FtraceEvent::set_block_bio_queue() {
  return BeginNestedMessage<BlockBioQueueFtraceEvent>(119);
}

BlockBioRemapFtraceEvent* FtraceEvent::set_block_bio_remap() {
  return BeginNestedMessage<BlockBioRemapFtraceEvent>(120);
}

BlockDirtyBufferFtraceEvent* FtraceEvent::set_block_dirty_buffer() {
  return BeginNestedMessage<BlockDirtyBufferFtraceEvent>(121);
}

BlockGetrqFtraceEvent* FtraceEvent::set_block_getrq() {
  return BeginNestedMessage<BlockGetrqFtraceEvent>(122);
}

BlockPlugFtraceEvent* FtraceEvent::set_block_plug() {
  return BeginNestedMessage<BlockPlugFtraceEvent>(123);
}

BlockRqAbortFtraceEvent* FtraceEvent::set_block_rq_abort() {
  return BeginNestedMessage<BlockRqAbortFtraceEvent>(124);
}

BlockRqCompleteFtraceEvent* FtraceEvent::set_block_rq_complete() {
  return BeginNestedMessage<BlockRqCompleteFtraceEvent>(125);
}

BlockRqInsertFtraceEvent* FtraceEvent::set_block_rq_insert() {
  return BeginNestedMessage<BlockRqInsertFtraceEvent>(126);
}

BlockRqRemapFtraceEvent* FtraceEvent::set_block_rq_remap() {
  return BeginNestedMessage<BlockRqRemapFtraceEvent>(128);
}

BlockRqRequeueFtraceEvent* FtraceEvent::set_block_rq_requeue() {
  return BeginNestedMessage<BlockRqRequeueFtraceEvent>(129);
}

BlockSleeprqFtraceEvent* FtraceEvent::set_block_sleeprq() {
  return BeginNestedMessage<BlockSleeprqFtraceEvent>(130);
}

BlockSplitFtraceEvent* FtraceEvent::set_block_split() {
  return BeginNestedMessage<BlockSplitFtraceEvent>(131);
}

BlockTouchBufferFtraceEvent* FtraceEvent::set_block_touch_buffer() {
  return BeginNestedMessage<BlockTouchBufferFtraceEvent>(132);
}

BlockUnplugFtraceEvent* FtraceEvent::set_block_unplug() {
  return BeginNestedMessage<BlockUnplugFtraceEvent>(133);
}

Ext4AllocDaBlocksFtraceEvent* FtraceEvent::set_ext4_alloc_da_blocks() {
  return BeginNestedMessage<Ext4AllocDaBlocksFtraceEvent>(134);
}

Ext4AllocateBlocksFtraceEvent* FtraceEvent::set_ext4_allocate_blocks() {
  return BeginNestedMessage<Ext4AllocateBlocksFtraceEvent>(135);
}

Ext4AllocateInodeFtraceEvent* FtraceEvent::set_ext4_allocate_inode() {
  return BeginNestedMessage<Ext4AllocateInodeFtraceEvent>(136);
}

Ext4BeginOrderedTruncateFtraceEvent* FtraceEvent::set_ext4_begin_ordered_truncate() {
  return BeginNestedMessage<Ext4BeginOrderedTruncateFtraceEvent>(137);
}

Ext4CollapseRangeFtraceEvent* FtraceEvent::set_ext4_collapse_range() {
  return BeginNestedMessage<Ext4CollapseRangeFtraceEvent>(138);
}

Ext4DaReleaseSpaceFtraceEvent* FtraceEvent::set_ext4_da_release_space() {
  return BeginNestedMessage<Ext4DaReleaseSpaceFtraceEvent>(139);
}

Ext4DaReserveSpaceFtraceEvent* FtraceEvent::set_ext4_da_reserve_space() {
  return BeginNestedMessage<Ext4DaReserveSpaceFtraceEvent>(140);
}

Ext4DaUpdateReserveSpaceFtraceEvent* FtraceEvent::set_ext4_da_update_reserve_space() {
  return BeginNestedMessage<Ext4DaUpdateReserveSpaceFtraceEvent>(141);
}

Ext4DaWritePagesFtraceEvent* FtraceEvent::set_ext4_da_write_pages() {
  return BeginNestedMessage<Ext4DaWritePagesFtraceEvent>(142);
}

Ext4DaWritePagesExtentFtraceEvent* FtraceEvent::set_ext4_da_write_pages_extent() {
  return BeginNestedMessage<Ext4DaWritePagesExtentFtraceEvent>(143);
}

Ext4DirectIOEnterFtraceEvent* FtraceEvent::set_ext4_direct_IO_enter() {
  return BeginNestedMessage<Ext4DirectIOEnterFtraceEvent>(144);
}

Ext4DirectIOExitFtraceEvent* FtraceEvent::set_ext4_direct_IO_exit() {
  return BeginNestedMessage<Ext4DirectIOExitFtraceEvent>(145);
}

Ext4DiscardBlocksFtraceEvent* FtraceEvent::set_ext4_discard_blocks() {
  return BeginNestedMessage<Ext4DiscardBlocksFtraceEvent>(146);
}

Ext4DiscardPreallocationsFtraceEvent* FtraceEvent::set_ext4_discard_preallocations() {
  return BeginNestedMessage<Ext4DiscardPreallocationsFtraceEvent>(147);
}

Ext4DropInodeFtraceEvent* FtraceEvent::set_ext4_drop_inode() {
  return BeginNestedMessage<Ext4DropInodeFtraceEvent>(148);
}

Ext4EsCacheExtentFtraceEvent* FtraceEvent::set_ext4_es_cache_extent() {
  return BeginNestedMessage<Ext4EsCacheExtentFtraceEvent>(149);
}

Ext4EsFindDelayedExtentRangeEnterFtraceEvent* FtraceEvent::set_ext4_es_find_delayed_extent_range_enter() {
  return BeginNestedMessage<Ext4EsFindDelayedExtentRangeEnterFtraceEvent>(150);
}

Ext4EsFindDelayedExtentRangeExitFtraceEvent* FtraceEvent::set_ext4_es_find_delayed_extent_range_exit() {
  return BeginNestedMessage<Ext4EsFindDelayedExtentRangeExitFtraceEvent>(151);
}

Ext4EsInsertExtentFtraceEvent* FtraceEvent::set_ext4_es_insert_extent() {
  return BeginNestedMessage<Ext4EsInsertExtentFtraceEvent>(152);
}

Ext4EsLookupExtentEnterFtraceEvent* FtraceEvent::set_ext4_es_lookup_extent_enter() {
  return BeginNestedMessage<Ext4EsLookupExtentEnterFtraceEvent>(153);
}

Ext4EsLookupExtentExitFtraceEvent* FtraceEvent::set_ext4_es_lookup_extent_exit() {
  return BeginNestedMessage<Ext4EsLookupExtentExitFtraceEvent>(154);
}

Ext4EsRemoveExtentFtraceEvent* FtraceEvent::set_ext4_es_remove_extent() {
  return BeginNestedMessage<Ext4EsRemoveExtentFtraceEvent>(155);
}

Ext4EsShrinkFtraceEvent* FtraceEvent::set_ext4_es_shrink() {
  return BeginNestedMessage<Ext4EsShrinkFtraceEvent>(156);
}

Ext4EsShrinkCountFtraceEvent* FtraceEvent::set_ext4_es_shrink_count() {
  return BeginNestedMessage<Ext4EsShrinkCountFtraceEvent>(157);
}

Ext4EsShrinkScanEnterFtraceEvent* FtraceEvent::set_ext4_es_shrink_scan_enter() {
  return BeginNestedMessage<Ext4EsShrinkScanEnterFtraceEvent>(158);
}

Ext4EsShrinkScanExitFtraceEvent* FtraceEvent::set_ext4_es_shrink_scan_exit() {
  return BeginNestedMessage<Ext4EsShrinkScanExitFtraceEvent>(159);
}

Ext4EvictInodeFtraceEvent* FtraceEvent::set_ext4_evict_inode() {
  return BeginNestedMessage<Ext4EvictInodeFtraceEvent>(160);
}

Ext4ExtConvertToInitializedEnterFtraceEvent* FtraceEvent::set_ext4_ext_convert_to_initialized_enter() {
  return BeginNestedMessage<Ext4ExtConvertToInitializedEnterFtraceEvent>(161);
}

Ext4ExtConvertToInitializedFastpathFtraceEvent* FtraceEvent::set_ext4_ext_convert_to_initialized_fastpath() {
  return BeginNestedMessage<Ext4ExtConvertToInitializedFastpathFtraceEvent>(162);
}

Ext4ExtHandleUnwrittenExtentsFtraceEvent* FtraceEvent::set_ext4_ext_handle_unwritten_extents() {
  return BeginNestedMessage<Ext4ExtHandleUnwrittenExtentsFtraceEvent>(163);
}

Ext4ExtInCacheFtraceEvent* FtraceEvent::set_ext4_ext_in_cache() {
  return BeginNestedMessage<Ext4ExtInCacheFtraceEvent>(164);
}

Ext4ExtLoadExtentFtraceEvent* FtraceEvent::set_ext4_ext_load_extent() {
  return BeginNestedMessage<Ext4ExtLoadExtentFtraceEvent>(165);
}

Ext4ExtMapBlocksEnterFtraceEvent* FtraceEvent::set_ext4_ext_map_blocks_enter() {
  return BeginNestedMessage<Ext4ExtMapBlocksEnterFtraceEvent>(166);
}

Ext4ExtMapBlocksExitFtraceEvent* FtraceEvent::set_ext4_ext_map_blocks_exit() {
  return BeginNestedMessage<Ext4ExtMapBlocksExitFtraceEvent>(167);
}

Ext4ExtPutInCacheFtraceEvent* FtraceEvent::set_ext4_ext_put_in_cache() {
  return BeginNestedMessage<Ext4ExtPutInCacheFtraceEvent>(168);
}

Ext4ExtRemoveSpaceFtraceEvent* FtraceEvent::set_ext4_ext_remove_space() {
  return BeginNestedMessage<Ext4ExtRemoveSpaceFtraceEvent>(169);
}

Ext4ExtRemoveSpaceDoneFtraceEvent* FtraceEvent::set_ext4_ext_remove_space_done() {
  return BeginNestedMessage<Ext4ExtRemoveSpaceDoneFtraceEvent>(170);
}

Ext4ExtRmIdxFtraceEvent* FtraceEvent::set_ext4_ext_rm_idx() {
  return BeginNestedMessage<Ext4ExtRmIdxFtraceEvent>(171);
}

Ext4ExtRmLeafFtraceEvent* FtraceEvent::set_ext4_ext_rm_leaf() {
  return BeginNestedMessage<Ext4ExtRmLeafFtraceEvent>(172);
}

Ext4ExtShowExtentFtraceEvent* FtraceEvent::set_ext4_ext_show_extent() {
  return BeginNestedMessage<Ext4ExtShowExtentFtraceEvent>(173);
}

Ext4FallocateEnterFtraceEvent* FtraceEvent::set_ext4_fallocate_enter() {
  return BeginNestedMessage<Ext4FallocateEnterFtraceEvent>(174);
}

Ext4FallocateExitFtraceEvent* FtraceEvent::set_ext4_fallocate_exit() {
  return BeginNestedMessage<Ext4FallocateExitFtraceEvent>(175);
}

Ext4FindDelallocRangeFtraceEvent* FtraceEvent::set_ext4_find_delalloc_range() {
  return BeginNestedMessage<Ext4FindDelallocRangeFtraceEvent>(176);
}

Ext4ForgetFtraceEvent* FtraceEvent::set_ext4_forget() {
  return BeginNestedMessage<Ext4ForgetFtraceEvent>(177);
}

Ext4FreeBlocksFtraceEvent* FtraceEvent::set_ext4_free_blocks() {
  return BeginNestedMessage<Ext4FreeBlocksFtraceEvent>(178);
}

Ext4FreeInodeFtraceEvent* FtraceEvent::set_ext4_free_inode() {
  return BeginNestedMessage<Ext4FreeInodeFtraceEvent>(179);
}

Ext4GetImpliedClusterAllocExitFtraceEvent* FtraceEvent::set_ext4_get_implied_cluster_alloc_exit() {
  return BeginNestedMessage<Ext4GetImpliedClusterAllocExitFtraceEvent>(180);
}

Ext4GetReservedClusterAllocFtraceEvent* FtraceEvent::set_ext4_get_reserved_cluster_alloc() {
  return BeginNestedMessage<Ext4GetReservedClusterAllocFtraceEvent>(181);
}

Ext4IndMapBlocksEnterFtraceEvent* FtraceEvent::set_ext4_ind_map_blocks_enter() {
  return BeginNestedMessage<Ext4IndMapBlocksEnterFtraceEvent>(182);
}

Ext4IndMapBlocksExitFtraceEvent* FtraceEvent::set_ext4_ind_map_blocks_exit() {
  return BeginNestedMessage<Ext4IndMapBlocksExitFtraceEvent>(183);
}

Ext4InsertRangeFtraceEvent* FtraceEvent::set_ext4_insert_range() {
  return BeginNestedMessage<Ext4InsertRangeFtraceEvent>(184);
}

Ext4InvalidatepageFtraceEvent* FtraceEvent::set_ext4_invalidatepage() {
  return BeginNestedMessage<Ext4InvalidatepageFtraceEvent>(185);
}

Ext4JournalStartFtraceEvent* FtraceEvent::set_ext4_journal_start() {
  return BeginNestedMessage<Ext4JournalStartFtraceEvent>(186);
}

Ext4JournalStartReservedFtraceEvent* FtraceEvent::set_ext4_journal_start_reserved() {
  return BeginNestedMessage<Ext4JournalStartReservedFtraceEvent>(187);
}

Ext4JournalledInvalidatepageFtraceEvent* FtraceEvent::set_ext4_journalled_invalidatepage() {
  return BeginNestedMessage<Ext4JournalledInvalidatepageFtraceEvent>(188);
}

Ext4JournalledWriteEndFtraceEvent* FtraceEvent::set_ext4_journalled_write_end() {
  return BeginNestedMessage<Ext4JournalledWriteEndFtraceEvent>(189);
}

Ext4LoadInodeFtraceEvent* FtraceEvent::set_ext4_load_inode() {
  return BeginNestedMessage<Ext4LoadInodeFtraceEvent>(190);
}

Ext4LoadInodeBitmapFtraceEvent* FtraceEvent::set_ext4_load_inode_bitmap() {
  return BeginNestedMessage<Ext4LoadInodeBitmapFtraceEvent>(191);
}

Ext4MarkInodeDirtyFtraceEvent* FtraceEvent::set_ext4_mark_inode_dirty() {
  return BeginNestedMessage<Ext4MarkInodeDirtyFtraceEvent>(192);
}

Ext4MbBitmapLoadFtraceEvent* FtraceEvent::set_ext4_mb_bitmap_load() {
  return BeginNestedMessage<Ext4MbBitmapLoadFtraceEvent>(193);
}

Ext4MbBuddyBitmapLoadFtraceEvent* FtraceEvent::set_ext4_mb_buddy_bitmap_load() {
  return BeginNestedMessage<Ext4MbBuddyBitmapLoadFtraceEvent>(194);
}

Ext4MbDiscardPreallocationsFtraceEvent* FtraceEvent::set_ext4_mb_discard_preallocations() {
  return BeginNestedMessage<Ext4MbDiscardPreallocationsFtraceEvent>(195);
}

Ext4MbNewGroupPaFtraceEvent* FtraceEvent::set_ext4_mb_new_group_pa() {
  return BeginNestedMessage<Ext4MbNewGroupPaFtraceEvent>(196);
}

Ext4MbNewInodePaFtraceEvent* FtraceEvent::set_ext4_mb_new_inode_pa() {
  return BeginNestedMessage<Ext4MbNewInodePaFtraceEvent>(197);
}

Ext4MbReleaseGroupPaFtraceEvent* FtraceEvent::set_ext4_mb_release_group_pa() {
  return BeginNestedMessage<Ext4MbReleaseGroupPaFtraceEvent>(198);
}

Ext4MbReleaseInodePaFtraceEvent* FtraceEvent::set_ext4_mb_release_inode_pa() {
  return BeginNestedMessage<Ext4MbReleaseInodePaFtraceEvent>(199);
}

Ext4MballocAllocFtraceEvent* FtraceEvent::set_ext4_mballoc_alloc() {
  return BeginNestedMessage<Ext4MballocAllocFtraceEvent>(200);
}

Ext4MballocDiscardFtraceEvent* FtraceEvent::set_ext4_mballoc_discard() {
  return BeginNestedMessage<Ext4MballocDiscardFtraceEvent>(201);
}

Ext4MballocFreeFtraceEvent* FtraceEvent::set_ext4_mballoc_free() {
  return BeginNestedMessage<Ext4MballocFreeFtraceEvent>(202);
}

Ext4MballocPreallocFtraceEvent* FtraceEvent::set_ext4_mballoc_prealloc() {
  return BeginNestedMessage<Ext4MballocPreallocFtraceEvent>(203);
}

Ext4OtherInodeUpdateTimeFtraceEvent* FtraceEvent::set_ext4_other_inode_update_time() {
  return BeginNestedMessage<Ext4OtherInodeUpdateTimeFtraceEvent>(204);
}

Ext4PunchHoleFtraceEvent* FtraceEvent::set_ext4_punch_hole() {
  return BeginNestedMessage<Ext4PunchHoleFtraceEvent>(205);
}

Ext4ReadBlockBitmapLoadFtraceEvent* FtraceEvent::set_ext4_read_block_bitmap_load() {
  return BeginNestedMessage<Ext4ReadBlockBitmapLoadFtraceEvent>(206);
}

Ext4ReadpageFtraceEvent* FtraceEvent::set_ext4_readpage() {
  return BeginNestedMessage<Ext4ReadpageFtraceEvent>(207);
}

Ext4ReleasepageFtraceEvent* FtraceEvent::set_ext4_releasepage() {
  return BeginNestedMessage<Ext4ReleasepageFtraceEvent>(208);
}

Ext4RemoveBlocksFtraceEvent* FtraceEvent::set_ext4_remove_blocks() {
  return BeginNestedMessage<Ext4RemoveBlocksFtraceEvent>(209);
}

Ext4RequestBlocksFtraceEvent* FtraceEvent::set_ext4_request_blocks() {
  return BeginNestedMessage<Ext4RequestBlocksFtraceEvent>(210);
}

Ext4RequestInodeFtraceEvent* FtraceEvent::set_ext4_request_inode() {
  return BeginNestedMessage<Ext4RequestInodeFtraceEvent>(211);
}

Ext4SyncFsFtraceEvent* FtraceEvent::set_ext4_sync_fs() {
  return BeginNestedMessage<Ext4SyncFsFtraceEvent>(212);
}

Ext4TrimAllFreeFtraceEvent* FtraceEvent::set_ext4_trim_all_free() {
  return BeginNestedMessage<Ext4TrimAllFreeFtraceEvent>(213);
}

Ext4TrimExtentFtraceEvent* FtraceEvent::set_ext4_trim_extent() {
  return BeginNestedMessage<Ext4TrimExtentFtraceEvent>(214);
}

Ext4TruncateEnterFtraceEvent* FtraceEvent::set_ext4_truncate_enter() {
  return BeginNestedMessage<Ext4TruncateEnterFtraceEvent>(215);
}

Ext4TruncateExitFtraceEvent* FtraceEvent::set_ext4_truncate_exit() {
  return BeginNestedMessage<Ext4TruncateExitFtraceEvent>(216);
}

Ext4UnlinkEnterFtraceEvent* FtraceEvent::set_ext4_unlink_enter() {
  return BeginNestedMessage<Ext4UnlinkEnterFtraceEvent>(217);
}

Ext4UnlinkExitFtraceEvent* FtraceEvent::set_ext4_unlink_exit() {
  return BeginNestedMessage<Ext4UnlinkExitFtraceEvent>(218);
}

Ext4WriteBeginFtraceEvent* FtraceEvent::set_ext4_write_begin() {
  return BeginNestedMessage<Ext4WriteBeginFtraceEvent>(219);
}

Ext4WriteEndFtraceEvent* FtraceEvent::set_ext4_write_end() {
  return BeginNestedMessage<Ext4WriteEndFtraceEvent>(230);
}

Ext4WritepageFtraceEvent* FtraceEvent::set_ext4_writepage() {
  return BeginNestedMessage<Ext4WritepageFtraceEvent>(231);
}

Ext4WritepagesFtraceEvent* FtraceEvent::set_ext4_writepages() {
  return BeginNestedMessage<Ext4WritepagesFtraceEvent>(232);
}

Ext4WritepagesResultFtraceEvent* FtraceEvent::set_ext4_writepages_result() {
  return BeginNestedMessage<Ext4WritepagesResultFtraceEvent>(233);
}

Ext4ZeroRangeFtraceEvent* FtraceEvent::set_ext4_zero_range() {
  return BeginNestedMessage<Ext4ZeroRangeFtraceEvent>(234);
}

TaskNewtaskFtraceEvent* FtraceEvent::set_task_newtask() {
  return BeginNestedMessage<TaskNewtaskFtraceEvent>(235);
}

TaskRenameFtraceEvent* FtraceEvent::set_task_rename() {
  return BeginNestedMessage<TaskRenameFtraceEvent>(236);
}

SchedProcessExecFtraceEvent* FtraceEvent::set_sched_process_exec() {
  return BeginNestedMessage<SchedProcessExecFtraceEvent>(237);
}

SchedProcessExitFtraceEvent* FtraceEvent::set_sched_process_exit() {
  return BeginNestedMessage<SchedProcessExitFtraceEvent>(238);
}

SchedProcessForkFtraceEvent* FtraceEvent::set_sched_process_fork() {
  return BeginNestedMessage<SchedProcessForkFtraceEvent>(239);
}

SchedProcessFreeFtraceEvent* FtraceEvent::set_sched_process_free() {
  return BeginNestedMessage<SchedProcessFreeFtraceEvent>(240);
}

SchedProcessHangFtraceEvent* FtraceEvent::set_sched_process_hang() {
  return BeginNestedMessage<SchedProcessHangFtraceEvent>(241);
}

SchedProcessWaitFtraceEvent* FtraceEvent::set_sched_process_wait() {
  return BeginNestedMessage<SchedProcessWaitFtraceEvent>(242);
}

F2fsDoSubmitBioFtraceEvent* FtraceEvent::set_f2fs_do_submit_bio() {
  return BeginNestedMessage<F2fsDoSubmitBioFtraceEvent>(243);
}

F2fsEvictInodeFtraceEvent* FtraceEvent::set_f2fs_evict_inode() {
  return BeginNestedMessage<F2fsEvictInodeFtraceEvent>(244);
}

F2fsFallocateFtraceEvent* FtraceEvent::set_f2fs_fallocate() {
  return BeginNestedMessage<F2fsFallocateFtraceEvent>(245);
}

F2fsGetDataBlockFtraceEvent* FtraceEvent::set_f2fs_get_data_block() {
  return BeginNestedMessage<F2fsGetDataBlockFtraceEvent>(246);
}

F2fsGetVictimFtraceEvent* FtraceEvent::set_f2fs_get_victim() {
  return BeginNestedMessage<F2fsGetVictimFtraceEvent>(247);
}

F2fsIgetFtraceEvent* FtraceEvent::set_f2fs_iget() {
  return BeginNestedMessage<F2fsIgetFtraceEvent>(248);
}

F2fsIgetExitFtraceEvent* FtraceEvent::set_f2fs_iget_exit() {
  return BeginNestedMessage<F2fsIgetExitFtraceEvent>(249);
}

F2fsNewInodeFtraceEvent* FtraceEvent::set_f2fs_new_inode() {
  return BeginNestedMessage<F2fsNewInodeFtraceEvent>(250);
}

F2fsReadpageFtraceEvent* FtraceEvent::set_f2fs_readpage() {
  return BeginNestedMessage<F2fsReadpageFtraceEvent>(251);
}

F2fsReserveNewBlockFtraceEvent* FtraceEvent::set_f2fs_reserve_new_block() {
  return BeginNestedMessage<F2fsReserveNewBlockFtraceEvent>(252);
}

F2fsSetPageDirtyFtraceEvent* FtraceEvent::set_f2fs_set_page_dirty() {
  return BeginNestedMessage<F2fsSetPageDirtyFtraceEvent>(253);
}

F2fsSubmitWritePageFtraceEvent* FtraceEvent::set_f2fs_submit_write_page() {
  return BeginNestedMessage<F2fsSubmitWritePageFtraceEvent>(254);
}

F2fsSyncFileEnterFtraceEvent* FtraceEvent::set_f2fs_sync_file_enter() {
  return BeginNestedMessage<F2fsSyncFileEnterFtraceEvent>(255);
}

F2fsSyncFileExitFtraceEvent* FtraceEvent::set_f2fs_sync_file_exit() {
  return BeginNestedMessage<F2fsSyncFileExitFtraceEvent>(256);
}

F2fsSyncFsFtraceEvent* FtraceEvent::set_f2fs_sync_fs() {
  return BeginNestedMessage<F2fsSyncFsFtraceEvent>(257);
}

F2fsTruncateFtraceEvent* FtraceEvent::set_f2fs_truncate() {
  return BeginNestedMessage<F2fsTruncateFtraceEvent>(258);
}

F2fsTruncateBlocksEnterFtraceEvent* FtraceEvent::set_f2fs_truncate_blocks_enter() {
  return BeginNestedMessage<F2fsTruncateBlocksEnterFtraceEvent>(259);
}

F2fsTruncateBlocksExitFtraceEvent* FtraceEvent::set_f2fs_truncate_blocks_exit() {
  return BeginNestedMessage<F2fsTruncateBlocksExitFtraceEvent>(260);
}

F2fsTruncateDataBlocksRangeFtraceEvent* FtraceEvent::set_f2fs_truncate_data_blocks_range() {
  return BeginNestedMessage<F2fsTruncateDataBlocksRangeFtraceEvent>(261);
}

F2fsTruncateInodeBlocksEnterFtraceEvent* FtraceEvent::set_f2fs_truncate_inode_blocks_enter() {
  return BeginNestedMessage<F2fsTruncateInodeBlocksEnterFtraceEvent>(262);
}

F2fsTruncateInodeBlocksExitFtraceEvent* FtraceEvent::set_f2fs_truncate_inode_blocks_exit() {
  return BeginNestedMessage<F2fsTruncateInodeBlocksExitFtraceEvent>(263);
}

F2fsTruncateNodeFtraceEvent* FtraceEvent::set_f2fs_truncate_node() {
  return BeginNestedMessage<F2fsTruncateNodeFtraceEvent>(264);
}

F2fsTruncateNodesEnterFtraceEvent* FtraceEvent::set_f2fs_truncate_nodes_enter() {
  return BeginNestedMessage<F2fsTruncateNodesEnterFtraceEvent>(265);
}

F2fsTruncateNodesExitFtraceEvent* FtraceEvent::set_f2fs_truncate_nodes_exit() {
  return BeginNestedMessage<F2fsTruncateNodesExitFtraceEvent>(266);
}

F2fsTruncatePartialNodesFtraceEvent* FtraceEvent::set_f2fs_truncate_partial_nodes() {
  return BeginNestedMessage<F2fsTruncatePartialNodesFtraceEvent>(267);
}

F2fsUnlinkEnterFtraceEvent* FtraceEvent::set_f2fs_unlink_enter() {
  return BeginNestedMessage<F2fsUnlinkEnterFtraceEvent>(268);
}

F2fsUnlinkExitFtraceEvent* FtraceEvent::set_f2fs_unlink_exit() {
  return BeginNestedMessage<F2fsUnlinkExitFtraceEvent>(269);
}

F2fsVmPageMkwriteFtraceEvent* FtraceEvent::set_f2fs_vm_page_mkwrite() {
  return BeginNestedMessage<F2fsVmPageMkwriteFtraceEvent>(270);
}

F2fsWriteBeginFtraceEvent* FtraceEvent::set_f2fs_write_begin() {
  return BeginNestedMessage<F2fsWriteBeginFtraceEvent>(271);
}

F2fsWriteCheckpointFtraceEvent* FtraceEvent::set_f2fs_write_checkpoint() {
  return BeginNestedMessage<F2fsWriteCheckpointFtraceEvent>(272);
}

F2fsWriteEndFtraceEvent* FtraceEvent::set_f2fs_write_end() {
  return BeginNestedMessage<F2fsWriteEndFtraceEvent>(273);
}

} // Namespace.
} // Namespace.
} // Namespace.
