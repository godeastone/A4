// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/chrome/chrome_trace_event.proto

#ifndef PROTOBUF_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto__INCLUDED
#define PROTOBUF_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace perfetto {
namespace protos {
class ChromeEventBundle;
class ChromeEventBundleDefaultTypeInternal;
extern ChromeEventBundleDefaultTypeInternal _ChromeEventBundle_default_instance_;
class ChromeTraceEvent;
class ChromeTraceEventDefaultTypeInternal;
extern ChromeTraceEventDefaultTypeInternal _ChromeTraceEvent_default_instance_;
class ChromeTraceEvent_Arg;
class ChromeTraceEvent_ArgDefaultTypeInternal;
extern ChromeTraceEvent_ArgDefaultTypeInternal _ChromeTraceEvent_Arg_default_instance_;
}  // namespace protos
}  // namespace perfetto

namespace perfetto {
namespace protos {

namespace protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto

// ===================================================================

class ChromeTraceEvent_Arg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeTraceEvent.Arg) */ {
 public:
  ChromeTraceEvent_Arg();
  virtual ~ChromeTraceEvent_Arg();

  ChromeTraceEvent_Arg(const ChromeTraceEvent_Arg& from);

  inline ChromeTraceEvent_Arg& operator=(const ChromeTraceEvent_Arg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeTraceEvent_Arg& default_instance();

  enum ValueCase {
    kBoolValue = 2,
    kUintValue = 3,
    kIntValue = 4,
    kDoubleValue = 5,
    kStringValue = 6,
    kPointerValue = 7,
    VALUE_NOT_SET = 0,
  };

  static inline const ChromeTraceEvent_Arg* internal_default_instance() {
    return reinterpret_cast<const ChromeTraceEvent_Arg*>(
               &_ChromeTraceEvent_Arg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeTraceEvent_Arg* other);

  // implements Message ----------------------------------------------

  inline ChromeTraceEvent_Arg* New() const PROTOBUF_FINAL { return New(NULL); }

  ChromeTraceEvent_Arg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ChromeTraceEvent_Arg& from);
  void MergeFrom(const ChromeTraceEvent_Arg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeTraceEvent_Arg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool bool_value = 2;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 2;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional uint64 uint_value = 3;
  bool has_uint_value() const;
  void clear_uint_value();
  static const int kUintValueFieldNumber = 3;
  ::google::protobuf::uint64 uint_value() const;
  void set_uint_value(::google::protobuf::uint64 value);

  // optional int64 int_value = 4;
  bool has_int_value() const;
  void clear_int_value();
  static const int kIntValueFieldNumber = 4;
  ::google::protobuf::int64 int_value() const;
  void set_int_value(::google::protobuf::int64 value);

  // optional double double_value = 5;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 5;
  double double_value() const;
  void set_double_value(double value);

  // optional string string_value = 6;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 6;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional uint64 pointer_value = 7;
  bool has_pointer_value() const;
  void clear_pointer_value();
  static const int kPointerValueFieldNumber = 7;
  ::google::protobuf::uint64 pointer_value() const;
  void set_pointer_value(::google::protobuf::uint64 value);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeTraceEvent.Arg)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_bool_value();
  void set_has_uint_value();
  void set_has_int_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_pointer_value();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    bool bool_value_;
    ::google::protobuf::uint64 uint_value_;
    ::google::protobuf::int64 int_value_;
    double double_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    ::google::protobuf::uint64 pointer_value_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChromeTraceEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeTraceEvent) */ {
 public:
  ChromeTraceEvent();
  virtual ~ChromeTraceEvent();

  ChromeTraceEvent(const ChromeTraceEvent& from);

  inline ChromeTraceEvent& operator=(const ChromeTraceEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeTraceEvent& default_instance();

  static inline const ChromeTraceEvent* internal_default_instance() {
    return reinterpret_cast<const ChromeTraceEvent*>(
               &_ChromeTraceEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeTraceEvent* other);

  // implements Message ----------------------------------------------

  inline ChromeTraceEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  ChromeTraceEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ChromeTraceEvent& from);
  void MergeFrom(const ChromeTraceEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeTraceEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChromeTraceEvent_Arg Arg;

  // accessors -------------------------------------------------------

  // repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 14;
  const ::perfetto::protos::ChromeTraceEvent_Arg& args(int index) const;
  ::perfetto::protos::ChromeTraceEvent_Arg* mutable_args(int index);
  ::perfetto::protos::ChromeTraceEvent_Arg* add_args();
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >*
      mutable_args();
  const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >&
      args() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string scope = 7;
  bool has_scope() const;
  void clear_scope();
  static const int kScopeFieldNumber = 7;
  const ::std::string& scope() const;
  void set_scope(const ::std::string& value);
  #if LANG_CXX11
  void set_scope(::std::string&& value);
  #endif
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  ::std::string* mutable_scope();
  ::std::string* release_scope();
  void set_allocated_scope(::std::string* scope);

  // optional string category_group_name = 10;
  bool has_category_group_name() const;
  void clear_category_group_name();
  static const int kCategoryGroupNameFieldNumber = 10;
  const ::std::string& category_group_name() const;
  void set_category_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_category_group_name(::std::string&& value);
  #endif
  void set_category_group_name(const char* value);
  void set_category_group_name(const char* value, size_t size);
  ::std::string* mutable_category_group_name();
  ::std::string* release_category_group_name();
  void set_allocated_category_group_name(::std::string* category_group_name);

  // optional int64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 phase = 3;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::google::protobuf::int32 phase() const;
  void set_phase(::google::protobuf::int32 value);

  // optional int32 thread_id = 4;
  bool has_thread_id() const;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 4;
  ::google::protobuf::int32 thread_id() const;
  void set_thread_id(::google::protobuf::int32 value);

  // optional int64 duration = 5;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 5;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // optional int64 thread_duration = 6;
  bool has_thread_duration() const;
  void clear_thread_duration();
  static const int kThreadDurationFieldNumber = 6;
  ::google::protobuf::int64 thread_duration() const;
  void set_thread_duration(::google::protobuf::int64 value);

  // optional uint64 id = 8;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 8;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 flags = 9;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 9;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional int32 process_id = 11;
  bool has_process_id() const;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 11;
  ::google::protobuf::int32 process_id() const;
  void set_process_id(::google::protobuf::int32 value);

  // optional int64 thread_timestamp = 12;
  bool has_thread_timestamp() const;
  void clear_thread_timestamp();
  static const int kThreadTimestampFieldNumber = 12;
  ::google::protobuf::int64 thread_timestamp() const;
  void set_thread_timestamp(::google::protobuf::int64 value);

  // optional uint32 bind_id = 13;
  bool has_bind_id() const;
  void clear_bind_id();
  static const int kBindIdFieldNumber = 13;
  ::google::protobuf::uint32 bind_id() const;
  void set_bind_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeTraceEvent)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_phase();
  void clear_has_phase();
  void set_has_thread_id();
  void clear_has_thread_id();
  void set_has_duration();
  void clear_has_duration();
  void set_has_thread_duration();
  void clear_has_thread_duration();
  void set_has_scope();
  void clear_has_scope();
  void set_has_id();
  void clear_has_id();
  void set_has_flags();
  void clear_has_flags();
  void set_has_category_group_name();
  void clear_has_category_group_name();
  void set_has_process_id();
  void clear_has_process_id();
  void set_has_thread_timestamp();
  void clear_has_thread_timestamp();
  void set_has_bind_id();
  void clear_has_bind_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg > args_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr scope_;
  ::google::protobuf::internal::ArenaStringPtr category_group_name_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 phase_;
  ::google::protobuf::int32 thread_id_;
  ::google::protobuf::int64 duration_;
  ::google::protobuf::int64 thread_duration_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::int32 process_id_;
  ::google::protobuf::int64 thread_timestamp_;
  ::google::protobuf::uint32 bind_id_;
  friend struct protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChromeEventBundle : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeEventBundle) */ {
 public:
  ChromeEventBundle();
  virtual ~ChromeEventBundle();

  ChromeEventBundle(const ChromeEventBundle& from);

  inline ChromeEventBundle& operator=(const ChromeEventBundle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeEventBundle& default_instance();

  static inline const ChromeEventBundle* internal_default_instance() {
    return reinterpret_cast<const ChromeEventBundle*>(
               &_ChromeEventBundle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeEventBundle* other);

  // implements Message ----------------------------------------------

  inline ChromeEventBundle* New() const PROTOBUF_FINAL { return New(NULL); }

  ChromeEventBundle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ChromeEventBundle& from);
  void MergeFrom(const ChromeEventBundle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeEventBundle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .perfetto.protos.ChromeTraceEvent trace_events = 1;
  int trace_events_size() const;
  void clear_trace_events();
  static const int kTraceEventsFieldNumber = 1;
  const ::perfetto::protos::ChromeTraceEvent& trace_events(int index) const;
  ::perfetto::protos::ChromeTraceEvent* mutable_trace_events(int index);
  ::perfetto::protos::ChromeTraceEvent* add_trace_events();
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >*
      mutable_trace_events();
  const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >&
      trace_events() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeEventBundle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent > trace_events_;
  friend struct protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeTraceEvent_Arg

// optional string name = 1;
inline bool ChromeTraceEvent_Arg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeTraceEvent_Arg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeTraceEvent_Arg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeTraceEvent_Arg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChromeTraceEvent_Arg::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.name)
  return name_.GetNoArena();
}
inline void ChromeTraceEvent_Arg::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.name)
}
#if LANG_CXX11
inline void ChromeTraceEvent_Arg::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.Arg.name)
}
#endif
inline void ChromeTraceEvent_Arg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.Arg.name)
}
inline void ChromeTraceEvent_Arg::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.Arg.name)
}
inline ::std::string* ChromeTraceEvent_Arg::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent_Arg::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeTraceEvent_Arg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.name)
}

// optional bool bool_value = 2;
inline bool ChromeTraceEvent_Arg::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void ChromeTraceEvent_Arg::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void ChromeTraceEvent_Arg::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ChromeTraceEvent_Arg::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void ChromeTraceEvent_Arg::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.bool_value)
}

// optional uint64 uint_value = 3;
inline bool ChromeTraceEvent_Arg::has_uint_value() const {
  return value_case() == kUintValue;
}
inline void ChromeTraceEvent_Arg::set_has_uint_value() {
  _oneof_case_[0] = kUintValue;
}
inline void ChromeTraceEvent_Arg::clear_uint_value() {
  if (has_uint_value()) {
    value_.uint_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::uint64 ChromeTraceEvent_Arg::uint_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.uint_value)
  if (has_uint_value()) {
    return value_.uint_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ChromeTraceEvent_Arg::set_uint_value(::google::protobuf::uint64 value) {
  if (!has_uint_value()) {
    clear_value();
    set_has_uint_value();
  }
  value_.uint_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.uint_value)
}

// optional int64 int_value = 4;
inline bool ChromeTraceEvent_Arg::has_int_value() const {
  return value_case() == kIntValue;
}
inline void ChromeTraceEvent_Arg::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void ChromeTraceEvent_Arg::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 ChromeTraceEvent_Arg::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void ChromeTraceEvent_Arg::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.int_value)
}

// optional double double_value = 5;
inline bool ChromeTraceEvent_Arg::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void ChromeTraceEvent_Arg::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void ChromeTraceEvent_Arg::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double ChromeTraceEvent_Arg::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void ChromeTraceEvent_Arg::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.double_value)
}

// optional string string_value = 6;
inline bool ChromeTraceEvent_Arg::has_string_value() const {
  return value_case() == kStringValue;
}
inline void ChromeTraceEvent_Arg::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void ChromeTraceEvent_Arg::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& ChromeTraceEvent_Arg::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ChromeTraceEvent_Arg::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
#if LANG_CXX11
inline void ChromeTraceEvent_Arg::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
#endif
inline void ChromeTraceEvent_Arg::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
inline void ChromeTraceEvent_Arg::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
inline ::std::string* ChromeTraceEvent_Arg::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent_Arg::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ChromeTraceEvent_Arg::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}

// optional uint64 pointer_value = 7;
inline bool ChromeTraceEvent_Arg::has_pointer_value() const {
  return value_case() == kPointerValue;
}
inline void ChromeTraceEvent_Arg::set_has_pointer_value() {
  _oneof_case_[0] = kPointerValue;
}
inline void ChromeTraceEvent_Arg::clear_pointer_value() {
  if (has_pointer_value()) {
    value_.pointer_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::uint64 ChromeTraceEvent_Arg::pointer_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.pointer_value)
  if (has_pointer_value()) {
    return value_.pointer_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ChromeTraceEvent_Arg::set_pointer_value(::google::protobuf::uint64 value) {
  if (!has_pointer_value()) {
    clear_value();
    set_has_pointer_value();
  }
  value_.pointer_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.pointer_value)
}

inline bool ChromeTraceEvent_Arg::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ChromeTraceEvent_Arg::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ChromeTraceEvent_Arg::ValueCase ChromeTraceEvent_Arg::value_case() const {
  return ChromeTraceEvent_Arg::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChromeTraceEvent

// optional string name = 1;
inline bool ChromeTraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeTraceEvent::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeTraceEvent::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeTraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChromeTraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.name)
  return name_.GetNoArena();
}
inline void ChromeTraceEvent::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.name)
}
#if LANG_CXX11
inline void ChromeTraceEvent::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.name)
}
#endif
inline void ChromeTraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.name)
}
inline void ChromeTraceEvent::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.name)
}
inline ::std::string* ChromeTraceEvent::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeTraceEvent::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.name)
}

// optional int64 timestamp = 2;
inline bool ChromeTraceEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeTraceEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChromeTraceEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChromeTraceEvent::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 ChromeTraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.timestamp)
  return timestamp_;
}
inline void ChromeTraceEvent::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.timestamp)
}

// optional int32 phase = 3;
inline bool ChromeTraceEvent::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChromeTraceEvent::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChromeTraceEvent::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChromeTraceEvent::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::google::protobuf::int32 ChromeTraceEvent::phase() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.phase)
  return phase_;
}
inline void ChromeTraceEvent::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.phase)
}

// optional int32 thread_id = 4;
inline bool ChromeTraceEvent::has_thread_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChromeTraceEvent::set_has_thread_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChromeTraceEvent::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChromeTraceEvent::clear_thread_id() {
  thread_id_ = 0;
  clear_has_thread_id();
}
inline ::google::protobuf::int32 ChromeTraceEvent::thread_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_id)
  return thread_id_;
}
inline void ChromeTraceEvent::set_thread_id(::google::protobuf::int32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_id)
}

// optional int64 duration = 5;
inline bool ChromeTraceEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChromeTraceEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChromeTraceEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChromeTraceEvent::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::int64 ChromeTraceEvent::duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.duration)
  return duration_;
}
inline void ChromeTraceEvent::set_duration(::google::protobuf::int64 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.duration)
}

// optional int64 thread_duration = 6;
inline bool ChromeTraceEvent::has_thread_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChromeTraceEvent::set_has_thread_duration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChromeTraceEvent::clear_has_thread_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChromeTraceEvent::clear_thread_duration() {
  thread_duration_ = GOOGLE_LONGLONG(0);
  clear_has_thread_duration();
}
inline ::google::protobuf::int64 ChromeTraceEvent::thread_duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_duration)
  return thread_duration_;
}
inline void ChromeTraceEvent::set_thread_duration(::google::protobuf::int64 value) {
  set_has_thread_duration();
  thread_duration_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_duration)
}

// optional string scope = 7;
inline bool ChromeTraceEvent::has_scope() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeTraceEvent::set_has_scope() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChromeTraceEvent::clear_has_scope() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChromeTraceEvent::clear_scope() {
  scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scope();
}
inline const ::std::string& ChromeTraceEvent::scope() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.scope)
  return scope_.GetNoArena();
}
inline void ChromeTraceEvent::set_scope(const ::std::string& value) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.scope)
}
#if LANG_CXX11
inline void ChromeTraceEvent::set_scope(::std::string&& value) {
  set_has_scope();
  scope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.scope)
}
#endif
inline void ChromeTraceEvent::set_scope(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.scope)
}
inline void ChromeTraceEvent::set_scope(const char* value, size_t size) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.scope)
}
inline ::std::string* ChromeTraceEvent::mutable_scope() {
  set_has_scope();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.scope)
  return scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent::release_scope() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.scope)
  clear_has_scope();
  return scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeTraceEvent::set_allocated_scope(::std::string* scope) {
  if (scope != NULL) {
    set_has_scope();
  } else {
    clear_has_scope();
  }
  scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.scope)
}

// optional uint64 id = 8;
inline bool ChromeTraceEvent::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChromeTraceEvent::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChromeTraceEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChromeTraceEvent::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ChromeTraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.id)
  return id_;
}
inline void ChromeTraceEvent::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.id)
}

// optional uint32 flags = 9;
inline bool ChromeTraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChromeTraceEvent::set_has_flags() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChromeTraceEvent::clear_has_flags() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChromeTraceEvent::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 ChromeTraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.flags)
  return flags_;
}
inline void ChromeTraceEvent::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.flags)
}

// optional string category_group_name = 10;
inline bool ChromeTraceEvent::has_category_group_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeTraceEvent::set_has_category_group_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChromeTraceEvent::clear_has_category_group_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChromeTraceEvent::clear_category_group_name() {
  category_group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category_group_name();
}
inline const ::std::string& ChromeTraceEvent::category_group_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.category_group_name)
  return category_group_name_.GetNoArena();
}
inline void ChromeTraceEvent::set_category_group_name(const ::std::string& value) {
  set_has_category_group_name();
  category_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.category_group_name)
}
#if LANG_CXX11
inline void ChromeTraceEvent::set_category_group_name(::std::string&& value) {
  set_has_category_group_name();
  category_group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.category_group_name)
}
#endif
inline void ChromeTraceEvent::set_category_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category_group_name();
  category_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.category_group_name)
}
inline void ChromeTraceEvent::set_category_group_name(const char* value, size_t size) {
  set_has_category_group_name();
  category_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.category_group_name)
}
inline ::std::string* ChromeTraceEvent::mutable_category_group_name() {
  set_has_category_group_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.category_group_name)
  return category_group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent::release_category_group_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.category_group_name)
  clear_has_category_group_name();
  return category_group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeTraceEvent::set_allocated_category_group_name(::std::string* category_group_name) {
  if (category_group_name != NULL) {
    set_has_category_group_name();
  } else {
    clear_has_category_group_name();
  }
  category_group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category_group_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.category_group_name)
}

// optional int32 process_id = 11;
inline bool ChromeTraceEvent::has_process_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChromeTraceEvent::set_has_process_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChromeTraceEvent::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChromeTraceEvent::clear_process_id() {
  process_id_ = 0;
  clear_has_process_id();
}
inline ::google::protobuf::int32 ChromeTraceEvent::process_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.process_id)
  return process_id_;
}
inline void ChromeTraceEvent::set_process_id(::google::protobuf::int32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.process_id)
}

// optional int64 thread_timestamp = 12;
inline bool ChromeTraceEvent::has_thread_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChromeTraceEvent::set_has_thread_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChromeTraceEvent::clear_has_thread_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChromeTraceEvent::clear_thread_timestamp() {
  thread_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_thread_timestamp();
}
inline ::google::protobuf::int64 ChromeTraceEvent::thread_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_timestamp)
  return thread_timestamp_;
}
inline void ChromeTraceEvent::set_thread_timestamp(::google::protobuf::int64 value) {
  set_has_thread_timestamp();
  thread_timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_timestamp)
}

// optional uint32 bind_id = 13;
inline bool ChromeTraceEvent::has_bind_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChromeTraceEvent::set_has_bind_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChromeTraceEvent::clear_has_bind_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChromeTraceEvent::clear_bind_id() {
  bind_id_ = 0u;
  clear_has_bind_id();
}
inline ::google::protobuf::uint32 ChromeTraceEvent::bind_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.bind_id)
  return bind_id_;
}
inline void ChromeTraceEvent::set_bind_id(::google::protobuf::uint32 value) {
  set_has_bind_id();
  bind_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.bind_id)
}

// repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
inline int ChromeTraceEvent::args_size() const {
  return args_.size();
}
inline void ChromeTraceEvent::clear_args() {
  args_.Clear();
}
inline const ::perfetto::protos::ChromeTraceEvent_Arg& ChromeTraceEvent::args(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.args)
  return args_.Get(index);
}
inline ::perfetto::protos::ChromeTraceEvent_Arg* ChromeTraceEvent::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.args)
  return args_.Mutable(index);
}
inline ::perfetto::protos::ChromeTraceEvent_Arg* ChromeTraceEvent::add_args() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTraceEvent.args)
  return args_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >*
ChromeTraceEvent::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeTraceEvent.args)
  return &args_;
}
inline const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >&
ChromeTraceEvent::args() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeTraceEvent.args)
  return args_;
}

// -------------------------------------------------------------------

// ChromeEventBundle

// repeated .perfetto.protos.ChromeTraceEvent trace_events = 1;
inline int ChromeEventBundle::trace_events_size() const {
  return trace_events_.size();
}
inline void ChromeEventBundle::clear_trace_events() {
  trace_events_.Clear();
}
inline const ::perfetto::protos::ChromeTraceEvent& ChromeEventBundle::trace_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_.Get(index);
}
inline ::perfetto::protos::ChromeTraceEvent* ChromeEventBundle::mutable_trace_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_.Mutable(index);
}
inline ::perfetto::protos::ChromeTraceEvent* ChromeEventBundle::add_trace_events() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >*
ChromeEventBundle::mutable_trace_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.trace_events)
  return &trace_events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >&
ChromeEventBundle::trace_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto__INCLUDED
