// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/mdp_compare_bw.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_MdpCompareBwFtraceEvent[] = {
  {"new_ab", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
  {"new_ib", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 2, 0},
  {"new_wb", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 3, 0},
  {"old_ab", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 4, 0},
  {"old_ib", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 5, 0},
  {"old_wb", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 6, 0},
  {"params_changed", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 7, 0},
  {"update_bw", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 8, 0},
};

const ::protozero::ProtoFieldDescriptor* MdpCompareBwFtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kNewAbFieldNumber:
      return &kFields_MdpCompareBwFtraceEvent[0];
    case kNewIbFieldNumber:
      return &kFields_MdpCompareBwFtraceEvent[1];
    case kNewWbFieldNumber:
      return &kFields_MdpCompareBwFtraceEvent[2];
    case kOldAbFieldNumber:
      return &kFields_MdpCompareBwFtraceEvent[3];
    case kOldIbFieldNumber:
      return &kFields_MdpCompareBwFtraceEvent[4];
    case kOldWbFieldNumber:
      return &kFields_MdpCompareBwFtraceEvent[5];
    case kParamsChangedFieldNumber:
      return &kFields_MdpCompareBwFtraceEvent[6];
    case kUpdateBwFieldNumber:
      return &kFields_MdpCompareBwFtraceEvent[7];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
