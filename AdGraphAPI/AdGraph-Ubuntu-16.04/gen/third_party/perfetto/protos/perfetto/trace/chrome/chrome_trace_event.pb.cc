// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/chrome/chrome_trace_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perfetto/trace/chrome/chrome_trace_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace perfetto {
namespace protos {
class ChromeTraceEvent_ArgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeTraceEvent_Arg> {
  public:
  bool bool_value_;
  ::google::protobuf::uint64 uint_value_;
  ::google::protobuf::int64 int_value_;
  double double_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::google::protobuf::uint64 pointer_value_;
} _ChromeTraceEvent_Arg_default_instance_;
class ChromeTraceEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeTraceEvent> {
} _ChromeTraceEvent_default_instance_;
class ChromeEventBundleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeEventBundle> {
} _ChromeEventBundle_default_instance_;

namespace protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ChromeTraceEvent_Arg_default_instance_.Shutdown();
  _ChromeTraceEvent_default_instance_.Shutdown();
  _ChromeEventBundle_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ChromeTraceEvent_Arg_default_instance_.DefaultConstruct();
  _ChromeTraceEvent_default_instance_.DefaultConstruct();
  _ChromeEventBundle_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeTraceEvent_Arg::kNameFieldNumber;
const int ChromeTraceEvent_Arg::kBoolValueFieldNumber;
const int ChromeTraceEvent_Arg::kUintValueFieldNumber;
const int ChromeTraceEvent_Arg::kIntValueFieldNumber;
const int ChromeTraceEvent_Arg::kDoubleValueFieldNumber;
const int ChromeTraceEvent_Arg::kStringValueFieldNumber;
const int ChromeTraceEvent_Arg::kPointerValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeTraceEvent_Arg::ChromeTraceEvent_Arg()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeTraceEvent.Arg)
}
ChromeTraceEvent_Arg::ChromeTraceEvent_Arg(const ChromeTraceEvent_Arg& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kUintValue: {
      set_uint_value(from.uint_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kPointerValue: {
      set_pointer_value(from.pointer_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeTraceEvent.Arg)
}

void ChromeTraceEvent_Arg::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

ChromeTraceEvent_Arg::~ChromeTraceEvent_Arg() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeTraceEvent.Arg)
  SharedDtor();
}

void ChromeTraceEvent_Arg::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void ChromeTraceEvent_Arg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeTraceEvent_Arg& ChromeTraceEvent_Arg::default_instance() {
  protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeTraceEvent_Arg* ChromeTraceEvent_Arg::New(::google::protobuf::Arena* arena) const {
  ChromeTraceEvent_Arg* n = new ChromeTraceEvent_Arg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeTraceEvent_Arg::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.ChromeTraceEvent.Arg)
  switch (value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kUintValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPointerValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ChromeTraceEvent_Arg::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeTraceEvent.Arg)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeTraceEvent_Arg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeTraceEvent.Arg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bool_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uint_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_.uint_value_)));
          set_has_uint_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pointer_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_.pointer_value_)));
          set_has_pointer_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeTraceEvent.Arg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeTraceEvent.Arg)
  return false;
#undef DO_
}

void ChromeTraceEvent_Arg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeTraceEvent.Arg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  switch (value_case()) {
    case kBoolValue:
      ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bool_value(), output);
      break;
    case kUintValue:
      ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uint_value(), output);
      break;
    case kIntValue:
      ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int_value(), output);
      break;
    case kDoubleValue:
      ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->double_value(), output);
      break;
    case kStringValue:
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        6, this->string_value(), output);
      break;
    case kPointerValue:
      ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pointer_value(), output);
      break;
    default: ;
  }
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeTraceEvent.Arg)
}

size_t ChromeTraceEvent_Arg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeTraceEvent.Arg)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (value_case()) {
    // optional bool bool_value = 2;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // optional uint64 uint_value = 3;
    case kUintValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint_value());
      break;
    }
    // optional int64 int_value = 4;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
      break;
    }
    // optional double double_value = 5;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // optional string string_value = 6;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // optional uint64 pointer_value = 7;
    case kPointerValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pointer_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeTraceEvent_Arg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeTraceEvent_Arg*>(&from));
}

void ChromeTraceEvent_Arg::MergeFrom(const ChromeTraceEvent_Arg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeTraceEvent.Arg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.value_case()) {
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kUintValue: {
      set_uint_value(from.uint_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kPointerValue: {
      set_pointer_value(from.pointer_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ChromeTraceEvent_Arg::CopyFrom(const ChromeTraceEvent_Arg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeTraceEvent.Arg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeTraceEvent_Arg::IsInitialized() const {
  return true;
}

void ChromeTraceEvent_Arg::Swap(ChromeTraceEvent_Arg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeTraceEvent_Arg::InternalSwap(ChromeTraceEvent_Arg* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeTraceEvent_Arg::GetTypeName() const {
  return "perfetto.protos.ChromeTraceEvent.Arg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeTraceEvent_Arg

// optional string name = 1;
bool ChromeTraceEvent_Arg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeTraceEvent_Arg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeTraceEvent_Arg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeTraceEvent_Arg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ChromeTraceEvent_Arg::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.name)
  return name_.GetNoArena();
}
void ChromeTraceEvent_Arg::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.name)
}
#if LANG_CXX11
void ChromeTraceEvent_Arg::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.Arg.name)
}
#endif
void ChromeTraceEvent_Arg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.Arg.name)
}
void ChromeTraceEvent_Arg::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.Arg.name)
}
::std::string* ChromeTraceEvent_Arg::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeTraceEvent_Arg::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeTraceEvent_Arg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.name)
}

// optional bool bool_value = 2;
bool ChromeTraceEvent_Arg::has_bool_value() const {
  return value_case() == kBoolValue;
}
void ChromeTraceEvent_Arg::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
void ChromeTraceEvent_Arg::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
bool ChromeTraceEvent_Arg::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
void ChromeTraceEvent_Arg::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.bool_value)
}

// optional uint64 uint_value = 3;
bool ChromeTraceEvent_Arg::has_uint_value() const {
  return value_case() == kUintValue;
}
void ChromeTraceEvent_Arg::set_has_uint_value() {
  _oneof_case_[0] = kUintValue;
}
void ChromeTraceEvent_Arg::clear_uint_value() {
  if (has_uint_value()) {
    value_.uint_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::uint64 ChromeTraceEvent_Arg::uint_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.uint_value)
  if (has_uint_value()) {
    return value_.uint_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
void ChromeTraceEvent_Arg::set_uint_value(::google::protobuf::uint64 value) {
  if (!has_uint_value()) {
    clear_value();
    set_has_uint_value();
  }
  value_.uint_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.uint_value)
}

// optional int64 int_value = 4;
bool ChromeTraceEvent_Arg::has_int_value() const {
  return value_case() == kIntValue;
}
void ChromeTraceEvent_Arg::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
void ChromeTraceEvent_Arg::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::int64 ChromeTraceEvent_Arg::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return GOOGLE_LONGLONG(0);
}
void ChromeTraceEvent_Arg::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.int_value)
}

// optional double double_value = 5;
bool ChromeTraceEvent_Arg::has_double_value() const {
  return value_case() == kDoubleValue;
}
void ChromeTraceEvent_Arg::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
void ChromeTraceEvent_Arg::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
double ChromeTraceEvent_Arg::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
void ChromeTraceEvent_Arg::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.double_value)
}

// optional string string_value = 6;
bool ChromeTraceEvent_Arg::has_string_value() const {
  return value_case() == kStringValue;
}
void ChromeTraceEvent_Arg::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
void ChromeTraceEvent_Arg::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
const ::std::string& ChromeTraceEvent_Arg::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ChromeTraceEvent_Arg::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
#if LANG_CXX11
void ChromeTraceEvent_Arg::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
#endif
void ChromeTraceEvent_Arg::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
void ChromeTraceEvent_Arg::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
::std::string* ChromeTraceEvent_Arg::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeTraceEvent_Arg::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ChromeTraceEvent_Arg::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}

// optional uint64 pointer_value = 7;
bool ChromeTraceEvent_Arg::has_pointer_value() const {
  return value_case() == kPointerValue;
}
void ChromeTraceEvent_Arg::set_has_pointer_value() {
  _oneof_case_[0] = kPointerValue;
}
void ChromeTraceEvent_Arg::clear_pointer_value() {
  if (has_pointer_value()) {
    value_.pointer_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::uint64 ChromeTraceEvent_Arg::pointer_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.pointer_value)
  if (has_pointer_value()) {
    return value_.pointer_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
void ChromeTraceEvent_Arg::set_pointer_value(::google::protobuf::uint64 value) {
  if (!has_pointer_value()) {
    clear_value();
    set_has_pointer_value();
  }
  value_.pointer_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.pointer_value)
}

bool ChromeTraceEvent_Arg::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void ChromeTraceEvent_Arg::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
ChromeTraceEvent_Arg::ValueCase ChromeTraceEvent_Arg::value_case() const {
  return ChromeTraceEvent_Arg::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeTraceEvent::kNameFieldNumber;
const int ChromeTraceEvent::kTimestampFieldNumber;
const int ChromeTraceEvent::kPhaseFieldNumber;
const int ChromeTraceEvent::kThreadIdFieldNumber;
const int ChromeTraceEvent::kDurationFieldNumber;
const int ChromeTraceEvent::kThreadDurationFieldNumber;
const int ChromeTraceEvent::kScopeFieldNumber;
const int ChromeTraceEvent::kIdFieldNumber;
const int ChromeTraceEvent::kFlagsFieldNumber;
const int ChromeTraceEvent::kCategoryGroupNameFieldNumber;
const int ChromeTraceEvent::kProcessIdFieldNumber;
const int ChromeTraceEvent::kThreadTimestampFieldNumber;
const int ChromeTraceEvent::kBindIdFieldNumber;
const int ChromeTraceEvent::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeTraceEvent::ChromeTraceEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeTraceEvent)
}
ChromeTraceEvent::ChromeTraceEvent(const ChromeTraceEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scope()) {
    scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scope_);
  }
  category_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category_group_name()) {
    category_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_group_name_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&bind_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(bind_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeTraceEvent)
}

void ChromeTraceEvent::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bind_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(bind_id_));
}

ChromeTraceEvent::~ChromeTraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeTraceEvent)
  SharedDtor();
}

void ChromeTraceEvent::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChromeTraceEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeTraceEvent& ChromeTraceEvent::default_instance() {
  protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeTraceEvent* ChromeTraceEvent::New(::google::protobuf::Arena* arena) const {
  ChromeTraceEvent* n = new ChromeTraceEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeTraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeTraceEvent)
  args_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_scope()) {
      GOOGLE_DCHECK(!scope_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*scope_.UnsafeRawStringPointer())->clear();
    }
    if (has_category_group_name()) {
      GOOGLE_DCHECK(!category_group_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*category_group_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thread_duration_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(thread_duration_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bind_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(bind_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeTraceEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeTraceEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_phase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 thread_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_thread_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 thread_duration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_thread_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &thread_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scope = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string category_group_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_group_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 process_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_process_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 thread_timestamp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_thread_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &thread_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bind_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_bind_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeTraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeTraceEvent)
  return false;
#undef DO_
}

void ChromeTraceEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeTraceEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional int32 phase = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->phase(), output);
  }

  // optional int32 thread_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->thread_id(), output);
  }

  // optional int64 duration = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->duration(), output);
  }

  // optional int64 thread_duration = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->thread_duration(), output);
  }

  // optional string scope = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->scope(), output);
  }

  // optional uint64 id = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->id(), output);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->flags(), output);
  }

  // optional string category_group_name = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->category_group_name(), output);
  }

  // optional int32 process_id = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->process_id(), output);
  }

  // optional int64 thread_timestamp = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->thread_timestamp(), output);
  }

  // optional uint32 bind_id = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->bind_id(), output);
  }

  // repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->args(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeTraceEvent)
}

size_t ChromeTraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeTraceEvent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->args_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->args(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string scope = 7;
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scope());
    }

    // optional string category_group_name = 10;
    if (has_category_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_group_name());
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 phase = 3;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phase());
    }

    // optional int32 thread_id = 4;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread_id());
    }

    // optional int64 duration = 5;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration());
    }

    // optional int64 thread_duration = 6;
    if (has_thread_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->thread_duration());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint64 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 flags = 9;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional int32 process_id = 11;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_id());
    }

    // optional int64 thread_timestamp = 12;
    if (has_thread_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->thread_timestamp());
    }

    // optional uint32 bind_id = 13;
    if (has_bind_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeTraceEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeTraceEvent*>(&from));
}

void ChromeTraceEvent::MergeFrom(const ChromeTraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeTraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_scope();
      scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scope_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_category_group_name();
      category_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_group_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000020u) {
      thread_id_ = from.thread_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000080u) {
      thread_duration_ = from.thread_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000400u) {
      process_id_ = from.process_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      thread_timestamp_ = from.thread_timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      bind_id_ = from.bind_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeTraceEvent::CopyFrom(const ChromeTraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeTraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeTraceEvent::IsInitialized() const {
  return true;
}

void ChromeTraceEvent::Swap(ChromeTraceEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeTraceEvent::InternalSwap(ChromeTraceEvent* other) {
  args_.InternalSwap(&other->args_);
  name_.Swap(&other->name_);
  scope_.Swap(&other->scope_);
  category_group_name_.Swap(&other->category_group_name_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(phase_, other->phase_);
  std::swap(thread_id_, other->thread_id_);
  std::swap(duration_, other->duration_);
  std::swap(thread_duration_, other->thread_duration_);
  std::swap(id_, other->id_);
  std::swap(flags_, other->flags_);
  std::swap(process_id_, other->process_id_);
  std::swap(thread_timestamp_, other->thread_timestamp_);
  std::swap(bind_id_, other->bind_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeTraceEvent::GetTypeName() const {
  return "perfetto.protos.ChromeTraceEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeTraceEvent

// optional string name = 1;
bool ChromeTraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeTraceEvent::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeTraceEvent::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeTraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ChromeTraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.name)
  return name_.GetNoArena();
}
void ChromeTraceEvent::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.name)
}
#if LANG_CXX11
void ChromeTraceEvent::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.name)
}
#endif
void ChromeTraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.name)
}
void ChromeTraceEvent::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.name)
}
::std::string* ChromeTraceEvent::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeTraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeTraceEvent::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.name)
}

// optional int64 timestamp = 2;
bool ChromeTraceEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChromeTraceEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void ChromeTraceEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChromeTraceEvent::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 ChromeTraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.timestamp)
  return timestamp_;
}
void ChromeTraceEvent::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.timestamp)
}

// optional int32 phase = 3;
bool ChromeTraceEvent::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChromeTraceEvent::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
void ChromeTraceEvent::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChromeTraceEvent::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
::google::protobuf::int32 ChromeTraceEvent::phase() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.phase)
  return phase_;
}
void ChromeTraceEvent::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.phase)
}

// optional int32 thread_id = 4;
bool ChromeTraceEvent::has_thread_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChromeTraceEvent::set_has_thread_id() {
  _has_bits_[0] |= 0x00000020u;
}
void ChromeTraceEvent::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChromeTraceEvent::clear_thread_id() {
  thread_id_ = 0;
  clear_has_thread_id();
}
::google::protobuf::int32 ChromeTraceEvent::thread_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_id)
  return thread_id_;
}
void ChromeTraceEvent::set_thread_id(::google::protobuf::int32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_id)
}

// optional int64 duration = 5;
bool ChromeTraceEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChromeTraceEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000040u;
}
void ChromeTraceEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChromeTraceEvent::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
  clear_has_duration();
}
::google::protobuf::int64 ChromeTraceEvent::duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.duration)
  return duration_;
}
void ChromeTraceEvent::set_duration(::google::protobuf::int64 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.duration)
}

// optional int64 thread_duration = 6;
bool ChromeTraceEvent::has_thread_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChromeTraceEvent::set_has_thread_duration() {
  _has_bits_[0] |= 0x00000080u;
}
void ChromeTraceEvent::clear_has_thread_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChromeTraceEvent::clear_thread_duration() {
  thread_duration_ = GOOGLE_LONGLONG(0);
  clear_has_thread_duration();
}
::google::protobuf::int64 ChromeTraceEvent::thread_duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_duration)
  return thread_duration_;
}
void ChromeTraceEvent::set_thread_duration(::google::protobuf::int64 value) {
  set_has_thread_duration();
  thread_duration_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_duration)
}

// optional string scope = 7;
bool ChromeTraceEvent::has_scope() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeTraceEvent::set_has_scope() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromeTraceEvent::clear_has_scope() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromeTraceEvent::clear_scope() {
  scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scope();
}
const ::std::string& ChromeTraceEvent::scope() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.scope)
  return scope_.GetNoArena();
}
void ChromeTraceEvent::set_scope(const ::std::string& value) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.scope)
}
#if LANG_CXX11
void ChromeTraceEvent::set_scope(::std::string&& value) {
  set_has_scope();
  scope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.scope)
}
#endif
void ChromeTraceEvent::set_scope(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.scope)
}
void ChromeTraceEvent::set_scope(const char* value, size_t size) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.scope)
}
::std::string* ChromeTraceEvent::mutable_scope() {
  set_has_scope();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.scope)
  return scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeTraceEvent::release_scope() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.scope)
  clear_has_scope();
  return scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeTraceEvent::set_allocated_scope(::std::string* scope) {
  if (scope != NULL) {
    set_has_scope();
  } else {
    clear_has_scope();
  }
  scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.scope)
}

// optional uint64 id = 8;
bool ChromeTraceEvent::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChromeTraceEvent::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
void ChromeTraceEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChromeTraceEvent::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 ChromeTraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.id)
  return id_;
}
void ChromeTraceEvent::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.id)
}

// optional uint32 flags = 9;
bool ChromeTraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ChromeTraceEvent::set_has_flags() {
  _has_bits_[0] |= 0x00000200u;
}
void ChromeTraceEvent::clear_has_flags() {
  _has_bits_[0] &= ~0x00000200u;
}
void ChromeTraceEvent::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 ChromeTraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.flags)
  return flags_;
}
void ChromeTraceEvent::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.flags)
}

// optional string category_group_name = 10;
bool ChromeTraceEvent::has_category_group_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChromeTraceEvent::set_has_category_group_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ChromeTraceEvent::clear_has_category_group_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChromeTraceEvent::clear_category_group_name() {
  category_group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category_group_name();
}
const ::std::string& ChromeTraceEvent::category_group_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.category_group_name)
  return category_group_name_.GetNoArena();
}
void ChromeTraceEvent::set_category_group_name(const ::std::string& value) {
  set_has_category_group_name();
  category_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.category_group_name)
}
#if LANG_CXX11
void ChromeTraceEvent::set_category_group_name(::std::string&& value) {
  set_has_category_group_name();
  category_group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.category_group_name)
}
#endif
void ChromeTraceEvent::set_category_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category_group_name();
  category_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.category_group_name)
}
void ChromeTraceEvent::set_category_group_name(const char* value, size_t size) {
  set_has_category_group_name();
  category_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.category_group_name)
}
::std::string* ChromeTraceEvent::mutable_category_group_name() {
  set_has_category_group_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.category_group_name)
  return category_group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeTraceEvent::release_category_group_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.category_group_name)
  clear_has_category_group_name();
  return category_group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeTraceEvent::set_allocated_category_group_name(::std::string* category_group_name) {
  if (category_group_name != NULL) {
    set_has_category_group_name();
  } else {
    clear_has_category_group_name();
  }
  category_group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category_group_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.category_group_name)
}

// optional int32 process_id = 11;
bool ChromeTraceEvent::has_process_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ChromeTraceEvent::set_has_process_id() {
  _has_bits_[0] |= 0x00000400u;
}
void ChromeTraceEvent::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void ChromeTraceEvent::clear_process_id() {
  process_id_ = 0;
  clear_has_process_id();
}
::google::protobuf::int32 ChromeTraceEvent::process_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.process_id)
  return process_id_;
}
void ChromeTraceEvent::set_process_id(::google::protobuf::int32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.process_id)
}

// optional int64 thread_timestamp = 12;
bool ChromeTraceEvent::has_thread_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ChromeTraceEvent::set_has_thread_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
void ChromeTraceEvent::clear_has_thread_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
void ChromeTraceEvent::clear_thread_timestamp() {
  thread_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_thread_timestamp();
}
::google::protobuf::int64 ChromeTraceEvent::thread_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_timestamp)
  return thread_timestamp_;
}
void ChromeTraceEvent::set_thread_timestamp(::google::protobuf::int64 value) {
  set_has_thread_timestamp();
  thread_timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_timestamp)
}

// optional uint32 bind_id = 13;
bool ChromeTraceEvent::has_bind_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ChromeTraceEvent::set_has_bind_id() {
  _has_bits_[0] |= 0x00001000u;
}
void ChromeTraceEvent::clear_has_bind_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void ChromeTraceEvent::clear_bind_id() {
  bind_id_ = 0u;
  clear_has_bind_id();
}
::google::protobuf::uint32 ChromeTraceEvent::bind_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.bind_id)
  return bind_id_;
}
void ChromeTraceEvent::set_bind_id(::google::protobuf::uint32 value) {
  set_has_bind_id();
  bind_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.bind_id)
}

// repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
int ChromeTraceEvent::args_size() const {
  return args_.size();
}
void ChromeTraceEvent::clear_args() {
  args_.Clear();
}
const ::perfetto::protos::ChromeTraceEvent_Arg& ChromeTraceEvent::args(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.args)
  return args_.Get(index);
}
::perfetto::protos::ChromeTraceEvent_Arg* ChromeTraceEvent::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.args)
  return args_.Mutable(index);
}
::perfetto::protos::ChromeTraceEvent_Arg* ChromeTraceEvent::add_args() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTraceEvent.args)
  return args_.Add();
}
::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >*
ChromeTraceEvent::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeTraceEvent.args)
  return &args_;
}
const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >&
ChromeTraceEvent::args() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeTraceEvent.args)
  return args_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeEventBundle::kTraceEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeEventBundle::ChromeEventBundle()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeEventBundle)
}
ChromeEventBundle::ChromeEventBundle(const ChromeEventBundle& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trace_events_(from.trace_events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeEventBundle)
}

void ChromeEventBundle::SharedCtor() {
  _cached_size_ = 0;
}

ChromeEventBundle::~ChromeEventBundle() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeEventBundle)
  SharedDtor();
}

void ChromeEventBundle::SharedDtor() {
}

void ChromeEventBundle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeEventBundle& ChromeEventBundle::default_instance() {
  protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeEventBundle* ChromeEventBundle::New(::google::protobuf::Arena* arena) const {
  ChromeEventBundle* n = new ChromeEventBundle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeEventBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeEventBundle)
  trace_events_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeEventBundle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeEventBundle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.ChromeTraceEvent trace_events = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trace_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeEventBundle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeEventBundle)
  return false;
#undef DO_
}

void ChromeEventBundle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeEventBundle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ChromeTraceEvent trace_events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trace_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->trace_events(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeEventBundle)
}

size_t ChromeEventBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeEventBundle)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .perfetto.protos.ChromeTraceEvent trace_events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trace_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trace_events(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeEventBundle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeEventBundle*>(&from));
}

void ChromeEventBundle::MergeFrom(const ChromeEventBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeEventBundle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trace_events_.MergeFrom(from.trace_events_);
}

void ChromeEventBundle::CopyFrom(const ChromeEventBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeEventBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeEventBundle::IsInitialized() const {
  return true;
}

void ChromeEventBundle::Swap(ChromeEventBundle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeEventBundle::InternalSwap(ChromeEventBundle* other) {
  trace_events_.InternalSwap(&other->trace_events_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeEventBundle::GetTypeName() const {
  return "perfetto.protos.ChromeEventBundle";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeEventBundle

// repeated .perfetto.protos.ChromeTraceEvent trace_events = 1;
int ChromeEventBundle::trace_events_size() const {
  return trace_events_.size();
}
void ChromeEventBundle::clear_trace_events() {
  trace_events_.Clear();
}
const ::perfetto::protos::ChromeTraceEvent& ChromeEventBundle::trace_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_.Get(index);
}
::perfetto::protos::ChromeTraceEvent* ChromeEventBundle::mutable_trace_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_.Mutable(index);
}
::perfetto::protos::ChromeTraceEvent* ChromeEventBundle::add_trace_events() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >*
ChromeEventBundle::mutable_trace_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.trace_events)
  return &trace_events_;
}
const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >&
ChromeEventBundle::trace_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)
