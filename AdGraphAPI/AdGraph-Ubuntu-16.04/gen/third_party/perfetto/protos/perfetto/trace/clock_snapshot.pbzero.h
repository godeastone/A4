// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_CLOCK_SNAPSHOT_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_CLOCK_SNAPSHOT_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/proto_field_descriptor.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class ClockSnapshot_Clock;
enum ClockSnapshot_Clock_Type : int32_t;

enum ClockSnapshot_Clock_Type : int32_t {
  ClockSnapshot_Clock_Type_UNKNOWN = 0,
  ClockSnapshot_Clock_Type_REALTIME = 1,
  ClockSnapshot_Clock_Type_REALTIME_COARSE = 2,
  ClockSnapshot_Clock_Type_MONOTONIC = 3,
  ClockSnapshot_Clock_Type_MONOTONIC_COARSE = 4,
  ClockSnapshot_Clock_Type_MONOTONIC_RAW = 5,
  ClockSnapshot_Clock_Type_BOOTTIME = 6,
  ClockSnapshot_Clock_Type_PROCESS_CPUTIME = 7,
  ClockSnapshot_Clock_Type_THREAD_CPUTIME = 8,
};

class ClockSnapshot : public ::protozero::Message {
 public:
  enum : int32_t {
    kClocksFieldNumber = 1,
  };
  static const ::protozero::ProtoFieldDescriptor* GetFieldDescriptor(uint32_t field_id);
  using Clock = ::perfetto::protos::pbzero::ClockSnapshot_Clock;
  ClockSnapshot_Clock* add_clocks();
};

class ClockSnapshot_Clock : public ::protozero::Message {
 public:
  enum : int32_t {
    kTypeFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  static const ::protozero::ProtoFieldDescriptor* GetFieldDescriptor(uint32_t field_id);
  using Type = ::perfetto::protos::pbzero::ClockSnapshot_Clock_Type;
  static const Type UNKNOWN = ClockSnapshot_Clock_Type_UNKNOWN;
  static const Type REALTIME = ClockSnapshot_Clock_Type_REALTIME;
  static const Type REALTIME_COARSE = ClockSnapshot_Clock_Type_REALTIME_COARSE;
  static const Type MONOTONIC = ClockSnapshot_Clock_Type_MONOTONIC;
  static const Type MONOTONIC_COARSE = ClockSnapshot_Clock_Type_MONOTONIC_COARSE;
  static const Type MONOTONIC_RAW = ClockSnapshot_Clock_Type_MONOTONIC_RAW;
  static const Type BOOTTIME = ClockSnapshot_Clock_Type_BOOTTIME;
  static const Type PROCESS_CPUTIME = ClockSnapshot_Clock_Type_PROCESS_CPUTIME;
  static const Type THREAD_CPUTIME = ClockSnapshot_Clock_Type_THREAD_CPUTIME;
  void set_type(::perfetto::protos::pbzero::ClockSnapshot_Clock_Type value) {
    AppendTinyVarInt(1, value);
  }
  void set_timestamp(uint64_t value) {
    AppendVarInt(2, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
