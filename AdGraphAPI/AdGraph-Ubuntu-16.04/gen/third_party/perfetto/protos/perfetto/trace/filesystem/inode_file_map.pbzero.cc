// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/filesystem/inode_file_map.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_InodeFileMap[] = {
  {"block_device_id", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
  {"mount_points", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 2, 1},
  {"entries", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 3, 1},
};

const ::protozero::ProtoFieldDescriptor* InodeFileMap::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kBlockDeviceIdFieldNumber:
      return &kFields_InodeFileMap[0];
    case kMountPointsFieldNumber:
      return &kFields_InodeFileMap[1];
    case kEntriesFieldNumber:
      return &kFields_InodeFileMap[2];
    default:
      return &kInvalidField;
  }
}

InodeFileMap_Entry* InodeFileMap::add_entries() {
  return BeginNestedMessage<InodeFileMap_Entry>(3);
}

static const ::protozero::ProtoFieldDescriptor kFields_InodeFileMap_Entry[] = {
  {"inode_number", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
  {"paths", ::protozero::ProtoFieldDescriptor::Type::TYPE_STRING, 2, 1},
  {"type", ::protozero::ProtoFieldDescriptor::Type::TYPE_ENUM, 3, 0},
};

const ::protozero::ProtoFieldDescriptor* InodeFileMap_Entry::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kInodeNumberFieldNumber:
      return &kFields_InodeFileMap_Entry[0];
    case kPathsFieldNumber:
      return &kFields_InodeFileMap_Entry[1];
    case kTypeFieldNumber:
      return &kFields_InodeFileMap_Entry[2];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
