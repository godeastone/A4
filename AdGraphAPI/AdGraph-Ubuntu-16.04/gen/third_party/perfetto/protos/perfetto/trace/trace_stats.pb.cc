// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/trace_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perfetto/trace/trace_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace perfetto {
namespace protos {
class TraceStats_BufferStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TraceStats_BufferStats> {
} _TraceStats_BufferStats_default_instance_;
class TraceStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TraceStats> {
} _TraceStats_default_instance_;

namespace protobuf_perfetto_2ftrace_2ftrace_5fstats_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _TraceStats_BufferStats_default_instance_.Shutdown();
  _TraceStats_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TraceStats_BufferStats_default_instance_.DefaultConstruct();
  _TraceStats_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_perfetto_2ftrace_2ftrace_5fstats_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceStats_BufferStats::kBytesWrittenFieldNumber;
const int TraceStats_BufferStats::kChunksWrittenFieldNumber;
const int TraceStats_BufferStats::kChunksOverwrittenFieldNumber;
const int TraceStats_BufferStats::kWriteWrapCountFieldNumber;
const int TraceStats_BufferStats::kPatchesSucceededFieldNumber;
const int TraceStats_BufferStats::kPatchesFailedFieldNumber;
const int TraceStats_BufferStats::kReadaheadsSucceededFieldNumber;
const int TraceStats_BufferStats::kReadaheadsFailedFieldNumber;
const int TraceStats_BufferStats::kAbiViolationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceStats_BufferStats::TraceStats_BufferStats()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2ftrace_2ftrace_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceStats.BufferStats)
}
TraceStats_BufferStats::TraceStats_BufferStats(const TraceStats_BufferStats& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytes_written_, &from.bytes_written_,
    static_cast<size_t>(reinterpret_cast<char*>(&abi_violations_) -
    reinterpret_cast<char*>(&bytes_written_)) + sizeof(abi_violations_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceStats.BufferStats)
}

void TraceStats_BufferStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bytes_written_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abi_violations_) -
      reinterpret_cast<char*>(&bytes_written_)) + sizeof(abi_violations_));
}

TraceStats_BufferStats::~TraceStats_BufferStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceStats.BufferStats)
  SharedDtor();
}

void TraceStats_BufferStats::SharedDtor() {
}

void TraceStats_BufferStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TraceStats_BufferStats& TraceStats_BufferStats::default_instance() {
  protobuf_perfetto_2ftrace_2ftrace_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

TraceStats_BufferStats* TraceStats_BufferStats::New(::google::protobuf::Arena* arena) const {
  TraceStats_BufferStats* n = new TraceStats_BufferStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceStats_BufferStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceStats.BufferStats)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&bytes_written_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&readaheads_failed_) -
        reinterpret_cast<char*>(&bytes_written_)) + sizeof(readaheads_failed_));
  }
  abi_violations_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TraceStats_BufferStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceStats.BufferStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 bytes_written = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bytes_written();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_written = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chunks_written();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_overwritten = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_chunks_overwritten();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_overwritten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 write_wrap_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_write_wrap_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_wrap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 patches_succeeded = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_patches_succeeded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &patches_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 patches_failed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_patches_failed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &patches_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 readaheads_succeeded = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_readaheads_succeeded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &readaheads_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 readaheads_failed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_readaheads_failed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &readaheads_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 abi_violations = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_abi_violations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &abi_violations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceStats.BufferStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceStats.BufferStats)
  return false;
#undef DO_
}

void TraceStats_BufferStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceStats.BufferStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bytes_written = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bytes_written(), output);
  }

  // optional uint64 chunks_written = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chunks_written(), output);
  }

  // optional uint64 chunks_overwritten = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->chunks_overwritten(), output);
  }

  // optional uint64 write_wrap_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->write_wrap_count(), output);
  }

  // optional uint64 patches_succeeded = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->patches_succeeded(), output);
  }

  // optional uint64 patches_failed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->patches_failed(), output);
  }

  // optional uint64 readaheads_succeeded = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->readaheads_succeeded(), output);
  }

  // optional uint64 readaheads_failed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->readaheads_failed(), output);
  }

  // optional uint64 abi_violations = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->abi_violations(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceStats.BufferStats)
}

size_t TraceStats_BufferStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceStats.BufferStats)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 bytes_written = 1;
    if (has_bytes_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_written());
    }

    // optional uint64 chunks_written = 2;
    if (has_chunks_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunks_written());
    }

    // optional uint64 chunks_overwritten = 3;
    if (has_chunks_overwritten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunks_overwritten());
    }

    // optional uint64 write_wrap_count = 4;
    if (has_write_wrap_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_wrap_count());
    }

    // optional uint64 patches_succeeded = 5;
    if (has_patches_succeeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->patches_succeeded());
    }

    // optional uint64 patches_failed = 6;
    if (has_patches_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->patches_failed());
    }

    // optional uint64 readaheads_succeeded = 7;
    if (has_readaheads_succeeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->readaheads_succeeded());
    }

    // optional uint64 readaheads_failed = 8;
    if (has_readaheads_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->readaheads_failed());
    }

  }
  // optional uint64 abi_violations = 9;
  if (has_abi_violations()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->abi_violations());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceStats_BufferStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TraceStats_BufferStats*>(&from));
}

void TraceStats_BufferStats::MergeFrom(const TraceStats_BufferStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceStats.BufferStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      bytes_written_ = from.bytes_written_;
    }
    if (cached_has_bits & 0x00000002u) {
      chunks_written_ = from.chunks_written_;
    }
    if (cached_has_bits & 0x00000004u) {
      chunks_overwritten_ = from.chunks_overwritten_;
    }
    if (cached_has_bits & 0x00000008u) {
      write_wrap_count_ = from.write_wrap_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      patches_succeeded_ = from.patches_succeeded_;
    }
    if (cached_has_bits & 0x00000020u) {
      patches_failed_ = from.patches_failed_;
    }
    if (cached_has_bits & 0x00000040u) {
      readaheads_succeeded_ = from.readaheads_succeeded_;
    }
    if (cached_has_bits & 0x00000080u) {
      readaheads_failed_ = from.readaheads_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_abi_violations(from.abi_violations());
  }
}

void TraceStats_BufferStats::CopyFrom(const TraceStats_BufferStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceStats.BufferStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceStats_BufferStats::IsInitialized() const {
  return true;
}

void TraceStats_BufferStats::Swap(TraceStats_BufferStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceStats_BufferStats::InternalSwap(TraceStats_BufferStats* other) {
  std::swap(bytes_written_, other->bytes_written_);
  std::swap(chunks_written_, other->chunks_written_);
  std::swap(chunks_overwritten_, other->chunks_overwritten_);
  std::swap(write_wrap_count_, other->write_wrap_count_);
  std::swap(patches_succeeded_, other->patches_succeeded_);
  std::swap(patches_failed_, other->patches_failed_);
  std::swap(readaheads_succeeded_, other->readaheads_succeeded_);
  std::swap(readaheads_failed_, other->readaheads_failed_);
  std::swap(abi_violations_, other->abi_violations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TraceStats_BufferStats::GetTypeName() const {
  return "perfetto.protos.TraceStats.BufferStats";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceStats_BufferStats

// optional uint64 bytes_written = 1;
bool TraceStats_BufferStats::has_bytes_written() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TraceStats_BufferStats::set_has_bytes_written() {
  _has_bits_[0] |= 0x00000001u;
}
void TraceStats_BufferStats::clear_has_bytes_written() {
  _has_bits_[0] &= ~0x00000001u;
}
void TraceStats_BufferStats::clear_bytes_written() {
  bytes_written_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_written();
}
::google::protobuf::uint64 TraceStats_BufferStats::bytes_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.bytes_written)
  return bytes_written_;
}
void TraceStats_BufferStats::set_bytes_written(::google::protobuf::uint64 value) {
  set_has_bytes_written();
  bytes_written_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.bytes_written)
}

// optional uint64 chunks_written = 2;
bool TraceStats_BufferStats::has_chunks_written() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TraceStats_BufferStats::set_has_chunks_written() {
  _has_bits_[0] |= 0x00000002u;
}
void TraceStats_BufferStats::clear_has_chunks_written() {
  _has_bits_[0] &= ~0x00000002u;
}
void TraceStats_BufferStats::clear_chunks_written() {
  chunks_written_ = GOOGLE_ULONGLONG(0);
  clear_has_chunks_written();
}
::google::protobuf::uint64 TraceStats_BufferStats::chunks_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_written)
  return chunks_written_;
}
void TraceStats_BufferStats::set_chunks_written(::google::protobuf::uint64 value) {
  set_has_chunks_written();
  chunks_written_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_written)
}

// optional uint64 chunks_overwritten = 3;
bool TraceStats_BufferStats::has_chunks_overwritten() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TraceStats_BufferStats::set_has_chunks_overwritten() {
  _has_bits_[0] |= 0x00000004u;
}
void TraceStats_BufferStats::clear_has_chunks_overwritten() {
  _has_bits_[0] &= ~0x00000004u;
}
void TraceStats_BufferStats::clear_chunks_overwritten() {
  chunks_overwritten_ = GOOGLE_ULONGLONG(0);
  clear_has_chunks_overwritten();
}
::google::protobuf::uint64 TraceStats_BufferStats::chunks_overwritten() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_overwritten)
  return chunks_overwritten_;
}
void TraceStats_BufferStats::set_chunks_overwritten(::google::protobuf::uint64 value) {
  set_has_chunks_overwritten();
  chunks_overwritten_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_overwritten)
}

// optional uint64 write_wrap_count = 4;
bool TraceStats_BufferStats::has_write_wrap_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TraceStats_BufferStats::set_has_write_wrap_count() {
  _has_bits_[0] |= 0x00000008u;
}
void TraceStats_BufferStats::clear_has_write_wrap_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void TraceStats_BufferStats::clear_write_wrap_count() {
  write_wrap_count_ = GOOGLE_ULONGLONG(0);
  clear_has_write_wrap_count();
}
::google::protobuf::uint64 TraceStats_BufferStats::write_wrap_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.write_wrap_count)
  return write_wrap_count_;
}
void TraceStats_BufferStats::set_write_wrap_count(::google::protobuf::uint64 value) {
  set_has_write_wrap_count();
  write_wrap_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.write_wrap_count)
}

// optional uint64 patches_succeeded = 5;
bool TraceStats_BufferStats::has_patches_succeeded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TraceStats_BufferStats::set_has_patches_succeeded() {
  _has_bits_[0] |= 0x00000010u;
}
void TraceStats_BufferStats::clear_has_patches_succeeded() {
  _has_bits_[0] &= ~0x00000010u;
}
void TraceStats_BufferStats::clear_patches_succeeded() {
  patches_succeeded_ = GOOGLE_ULONGLONG(0);
  clear_has_patches_succeeded();
}
::google::protobuf::uint64 TraceStats_BufferStats::patches_succeeded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.patches_succeeded)
  return patches_succeeded_;
}
void TraceStats_BufferStats::set_patches_succeeded(::google::protobuf::uint64 value) {
  set_has_patches_succeeded();
  patches_succeeded_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.patches_succeeded)
}

// optional uint64 patches_failed = 6;
bool TraceStats_BufferStats::has_patches_failed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TraceStats_BufferStats::set_has_patches_failed() {
  _has_bits_[0] |= 0x00000020u;
}
void TraceStats_BufferStats::clear_has_patches_failed() {
  _has_bits_[0] &= ~0x00000020u;
}
void TraceStats_BufferStats::clear_patches_failed() {
  patches_failed_ = GOOGLE_ULONGLONG(0);
  clear_has_patches_failed();
}
::google::protobuf::uint64 TraceStats_BufferStats::patches_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.patches_failed)
  return patches_failed_;
}
void TraceStats_BufferStats::set_patches_failed(::google::protobuf::uint64 value) {
  set_has_patches_failed();
  patches_failed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.patches_failed)
}

// optional uint64 readaheads_succeeded = 7;
bool TraceStats_BufferStats::has_readaheads_succeeded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TraceStats_BufferStats::set_has_readaheads_succeeded() {
  _has_bits_[0] |= 0x00000040u;
}
void TraceStats_BufferStats::clear_has_readaheads_succeeded() {
  _has_bits_[0] &= ~0x00000040u;
}
void TraceStats_BufferStats::clear_readaheads_succeeded() {
  readaheads_succeeded_ = GOOGLE_ULONGLONG(0);
  clear_has_readaheads_succeeded();
}
::google::protobuf::uint64 TraceStats_BufferStats::readaheads_succeeded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.readaheads_succeeded)
  return readaheads_succeeded_;
}
void TraceStats_BufferStats::set_readaheads_succeeded(::google::protobuf::uint64 value) {
  set_has_readaheads_succeeded();
  readaheads_succeeded_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.readaheads_succeeded)
}

// optional uint64 readaheads_failed = 8;
bool TraceStats_BufferStats::has_readaheads_failed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TraceStats_BufferStats::set_has_readaheads_failed() {
  _has_bits_[0] |= 0x00000080u;
}
void TraceStats_BufferStats::clear_has_readaheads_failed() {
  _has_bits_[0] &= ~0x00000080u;
}
void TraceStats_BufferStats::clear_readaheads_failed() {
  readaheads_failed_ = GOOGLE_ULONGLONG(0);
  clear_has_readaheads_failed();
}
::google::protobuf::uint64 TraceStats_BufferStats::readaheads_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.readaheads_failed)
  return readaheads_failed_;
}
void TraceStats_BufferStats::set_readaheads_failed(::google::protobuf::uint64 value) {
  set_has_readaheads_failed();
  readaheads_failed_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.readaheads_failed)
}

// optional uint64 abi_violations = 9;
bool TraceStats_BufferStats::has_abi_violations() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TraceStats_BufferStats::set_has_abi_violations() {
  _has_bits_[0] |= 0x00000100u;
}
void TraceStats_BufferStats::clear_has_abi_violations() {
  _has_bits_[0] &= ~0x00000100u;
}
void TraceStats_BufferStats::clear_abi_violations() {
  abi_violations_ = GOOGLE_ULONGLONG(0);
  clear_has_abi_violations();
}
::google::protobuf::uint64 TraceStats_BufferStats::abi_violations() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.abi_violations)
  return abi_violations_;
}
void TraceStats_BufferStats::set_abi_violations(::google::protobuf::uint64 value) {
  set_has_abi_violations();
  abi_violations_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.abi_violations)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceStats::kBufferStatsFieldNumber;
const int TraceStats::kProducersConnectedFieldNumber;
const int TraceStats::kProducersSeenFieldNumber;
const int TraceStats::kDataSourcesRegisteredFieldNumber;
const int TraceStats::kDataSourcesSeenFieldNumber;
const int TraceStats::kTracingSessionsFieldNumber;
const int TraceStats::kTotalBuffersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceStats::TraceStats()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2ftrace_2ftrace_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceStats)
}
TraceStats::TraceStats(const TraceStats& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      buffer_stats_(from.buffer_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&producers_seen_, &from.producers_seen_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_buffers_) -
    reinterpret_cast<char*>(&producers_seen_)) + sizeof(total_buffers_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceStats)
}

void TraceStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&producers_seen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_buffers_) -
      reinterpret_cast<char*>(&producers_seen_)) + sizeof(total_buffers_));
}

TraceStats::~TraceStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceStats)
  SharedDtor();
}

void TraceStats::SharedDtor() {
}

void TraceStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TraceStats& TraceStats::default_instance() {
  protobuf_perfetto_2ftrace_2ftrace_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

TraceStats* TraceStats::New(::google::protobuf::Arena* arena) const {
  TraceStats* n = new TraceStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceStats)
  buffer_stats_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&producers_seen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_buffers_) -
        reinterpret_cast<char*>(&producers_seen_)) + sizeof(total_buffers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TraceStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffer_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 producers_connected = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_producers_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producers_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 producers_seen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_producers_seen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &producers_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_sources_registered = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_data_sources_registered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sources_registered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 data_sources_seen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_data_sources_seen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_sources_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tracing_sessions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tracing_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracing_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_buffers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_total_buffers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_buffers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceStats)
  return false;
#undef DO_
}

void TraceStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buffer_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->buffer_stats(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 producers_connected = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->producers_connected(), output);
  }

  // optional uint64 producers_seen = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->producers_seen(), output);
  }

  // optional uint32 data_sources_registered = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->data_sources_registered(), output);
  }

  // optional uint64 data_sources_seen = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->data_sources_seen(), output);
  }

  // optional uint32 tracing_sessions = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tracing_sessions(), output);
  }

  // optional uint32 total_buffers = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->total_buffers(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceStats)
}

size_t TraceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceStats)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->buffer_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffer_stats(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint64 producers_seen = 3;
    if (has_producers_seen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->producers_seen());
    }

    // optional uint32 producers_connected = 2;
    if (has_producers_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producers_connected());
    }

    // optional uint32 data_sources_registered = 4;
    if (has_data_sources_registered()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_sources_registered());
    }

    // optional uint64 data_sources_seen = 5;
    if (has_data_sources_seen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_sources_seen());
    }

    // optional uint32 tracing_sessions = 6;
    if (has_tracing_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tracing_sessions());
    }

    // optional uint32 total_buffers = 7;
    if (has_total_buffers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_buffers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TraceStats*>(&from));
}

void TraceStats::MergeFrom(const TraceStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_stats_.MergeFrom(from.buffer_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      producers_seen_ = from.producers_seen_;
    }
    if (cached_has_bits & 0x00000002u) {
      producers_connected_ = from.producers_connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_sources_registered_ = from.data_sources_registered_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_sources_seen_ = from.data_sources_seen_;
    }
    if (cached_has_bits & 0x00000010u) {
      tracing_sessions_ = from.tracing_sessions_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_buffers_ = from.total_buffers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceStats::CopyFrom(const TraceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceStats::IsInitialized() const {
  return true;
}

void TraceStats::Swap(TraceStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceStats::InternalSwap(TraceStats* other) {
  buffer_stats_.InternalSwap(&other->buffer_stats_);
  std::swap(producers_seen_, other->producers_seen_);
  std::swap(producers_connected_, other->producers_connected_);
  std::swap(data_sources_registered_, other->data_sources_registered_);
  std::swap(data_sources_seen_, other->data_sources_seen_);
  std::swap(tracing_sessions_, other->tracing_sessions_);
  std::swap(total_buffers_, other->total_buffers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TraceStats::GetTypeName() const {
  return "perfetto.protos.TraceStats";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceStats

// repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
int TraceStats::buffer_stats_size() const {
  return buffer_stats_.size();
}
void TraceStats::clear_buffer_stats() {
  buffer_stats_.Clear();
}
const ::perfetto::protos::TraceStats_BufferStats& TraceStats::buffer_stats(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.buffer_stats)
  return buffer_stats_.Get(index);
}
::perfetto::protos::TraceStats_BufferStats* TraceStats::mutable_buffer_stats(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceStats.buffer_stats)
  return buffer_stats_.Mutable(index);
}
::perfetto::protos::TraceStats_BufferStats* TraceStats::add_buffer_stats() {
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceStats.buffer_stats)
  return buffer_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats >*
TraceStats::mutable_buffer_stats() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceStats.buffer_stats)
  return &buffer_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats >&
TraceStats::buffer_stats() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceStats.buffer_stats)
  return buffer_stats_;
}

// optional uint32 producers_connected = 2;
bool TraceStats::has_producers_connected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TraceStats::set_has_producers_connected() {
  _has_bits_[0] |= 0x00000002u;
}
void TraceStats::clear_has_producers_connected() {
  _has_bits_[0] &= ~0x00000002u;
}
void TraceStats::clear_producers_connected() {
  producers_connected_ = 0u;
  clear_has_producers_connected();
}
::google::protobuf::uint32 TraceStats::producers_connected() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.producers_connected)
  return producers_connected_;
}
void TraceStats::set_producers_connected(::google::protobuf::uint32 value) {
  set_has_producers_connected();
  producers_connected_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.producers_connected)
}

// optional uint64 producers_seen = 3;
bool TraceStats::has_producers_seen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TraceStats::set_has_producers_seen() {
  _has_bits_[0] |= 0x00000001u;
}
void TraceStats::clear_has_producers_seen() {
  _has_bits_[0] &= ~0x00000001u;
}
void TraceStats::clear_producers_seen() {
  producers_seen_ = GOOGLE_ULONGLONG(0);
  clear_has_producers_seen();
}
::google::protobuf::uint64 TraceStats::producers_seen() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.producers_seen)
  return producers_seen_;
}
void TraceStats::set_producers_seen(::google::protobuf::uint64 value) {
  set_has_producers_seen();
  producers_seen_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.producers_seen)
}

// optional uint32 data_sources_registered = 4;
bool TraceStats::has_data_sources_registered() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TraceStats::set_has_data_sources_registered() {
  _has_bits_[0] |= 0x00000004u;
}
void TraceStats::clear_has_data_sources_registered() {
  _has_bits_[0] &= ~0x00000004u;
}
void TraceStats::clear_data_sources_registered() {
  data_sources_registered_ = 0u;
  clear_has_data_sources_registered();
}
::google::protobuf::uint32 TraceStats::data_sources_registered() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.data_sources_registered)
  return data_sources_registered_;
}
void TraceStats::set_data_sources_registered(::google::protobuf::uint32 value) {
  set_has_data_sources_registered();
  data_sources_registered_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.data_sources_registered)
}

// optional uint64 data_sources_seen = 5;
bool TraceStats::has_data_sources_seen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TraceStats::set_has_data_sources_seen() {
  _has_bits_[0] |= 0x00000008u;
}
void TraceStats::clear_has_data_sources_seen() {
  _has_bits_[0] &= ~0x00000008u;
}
void TraceStats::clear_data_sources_seen() {
  data_sources_seen_ = GOOGLE_ULONGLONG(0);
  clear_has_data_sources_seen();
}
::google::protobuf::uint64 TraceStats::data_sources_seen() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.data_sources_seen)
  return data_sources_seen_;
}
void TraceStats::set_data_sources_seen(::google::protobuf::uint64 value) {
  set_has_data_sources_seen();
  data_sources_seen_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.data_sources_seen)
}

// optional uint32 tracing_sessions = 6;
bool TraceStats::has_tracing_sessions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TraceStats::set_has_tracing_sessions() {
  _has_bits_[0] |= 0x00000010u;
}
void TraceStats::clear_has_tracing_sessions() {
  _has_bits_[0] &= ~0x00000010u;
}
void TraceStats::clear_tracing_sessions() {
  tracing_sessions_ = 0u;
  clear_has_tracing_sessions();
}
::google::protobuf::uint32 TraceStats::tracing_sessions() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.tracing_sessions)
  return tracing_sessions_;
}
void TraceStats::set_tracing_sessions(::google::protobuf::uint32 value) {
  set_has_tracing_sessions();
  tracing_sessions_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.tracing_sessions)
}

// optional uint32 total_buffers = 7;
bool TraceStats::has_total_buffers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TraceStats::set_has_total_buffers() {
  _has_bits_[0] |= 0x00000020u;
}
void TraceStats::clear_has_total_buffers() {
  _has_bits_[0] &= ~0x00000020u;
}
void TraceStats::clear_total_buffers() {
  total_buffers_ = 0u;
  clear_has_total_buffers();
}
::google::protobuf::uint32 TraceStats::total_buffers() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.total_buffers)
  return total_buffers_;
}
void TraceStats::set_total_buffers(::google::protobuf::uint32 value) {
  set_has_total_buffers();
  total_buffers_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.total_buffers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)
