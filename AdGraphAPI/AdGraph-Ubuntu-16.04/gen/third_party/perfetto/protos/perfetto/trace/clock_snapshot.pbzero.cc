// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/clock_snapshot.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_ClockSnapshot[] = {
  {"clocks", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 1, 1},
};

const ::protozero::ProtoFieldDescriptor* ClockSnapshot::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kClocksFieldNumber:
      return &kFields_ClockSnapshot[0];
    default:
      return &kInvalidField;
  }
}

ClockSnapshot_Clock* ClockSnapshot::add_clocks() {
  return BeginNestedMessage<ClockSnapshot_Clock>(1);
}

static const ::protozero::ProtoFieldDescriptor kFields_ClockSnapshot_Clock[] = {
  {"type", ::protozero::ProtoFieldDescriptor::Type::TYPE_ENUM, 1, 0},
  {"timestamp", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 2, 0},
};

const ::protozero::ProtoFieldDescriptor* ClockSnapshot_Clock::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kTypeFieldNumber:
      return &kFields_ClockSnapshot_Clock[0];
    case kTimestampFieldNumber:
      return &kFields_ClockSnapshot_Clock[1];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
