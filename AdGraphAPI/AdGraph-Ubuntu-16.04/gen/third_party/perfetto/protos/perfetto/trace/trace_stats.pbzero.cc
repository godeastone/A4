// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/trace_stats.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_TraceStats[] = {
  {"buffer_stats", ::protozero::ProtoFieldDescriptor::Type::TYPE_MESSAGE, 1, 1},
  {"producers_connected", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 2, 0},
  {"producers_seen", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 3, 0},
  {"data_sources_registered", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 4, 0},
  {"data_sources_seen", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 5, 0},
  {"tracing_sessions", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 6, 0},
  {"total_buffers", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 7, 0},
};

const ::protozero::ProtoFieldDescriptor* TraceStats::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kBufferStatsFieldNumber:
      return &kFields_TraceStats[0];
    case kProducersConnectedFieldNumber:
      return &kFields_TraceStats[1];
    case kProducersSeenFieldNumber:
      return &kFields_TraceStats[2];
    case kDataSourcesRegisteredFieldNumber:
      return &kFields_TraceStats[3];
    case kDataSourcesSeenFieldNumber:
      return &kFields_TraceStats[4];
    case kTracingSessionsFieldNumber:
      return &kFields_TraceStats[5];
    case kTotalBuffersFieldNumber:
      return &kFields_TraceStats[6];
    default:
      return &kInvalidField;
  }
}

TraceStats_BufferStats* TraceStats::add_buffer_stats() {
  return BeginNestedMessage<TraceStats_BufferStats>(1);
}

static const ::protozero::ProtoFieldDescriptor kFields_TraceStats_BufferStats[] = {
  {"bytes_written", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
  {"chunks_written", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 2, 0},
  {"chunks_overwritten", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 3, 0},
  {"write_wrap_count", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 4, 0},
  {"patches_succeeded", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 5, 0},
  {"patches_failed", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 6, 0},
  {"readaheads_succeeded", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 7, 0},
  {"readaheads_failed", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 8, 0},
  {"abi_violations", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 9, 0},
};

const ::protozero::ProtoFieldDescriptor* TraceStats_BufferStats::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kBytesWrittenFieldNumber:
      return &kFields_TraceStats_BufferStats[0];
    case kChunksWrittenFieldNumber:
      return &kFields_TraceStats_BufferStats[1];
    case kChunksOverwrittenFieldNumber:
      return &kFields_TraceStats_BufferStats[2];
    case kWriteWrapCountFieldNumber:
      return &kFields_TraceStats_BufferStats[3];
    case kPatchesSucceededFieldNumber:
      return &kFields_TraceStats_BufferStats[4];
    case kPatchesFailedFieldNumber:
      return &kFields_TraceStats_BufferStats[5];
    case kReadaheadsSucceededFieldNumber:
      return &kFields_TraceStats_BufferStats[6];
    case kReadaheadsFailedFieldNumber:
      return &kFields_TraceStats_BufferStats[7];
    case kAbiViolationsFieldNumber:
      return &kFields_TraceStats_BufferStats[8];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
