// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#include "perfetto/trace/ftrace/mm_compaction_begin.pbzero.h"

namespace {
  static const ::protozero::ProtoFieldDescriptor kInvalidField = {"", ::protozero::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false};
}

namespace perfetto {
namespace protos {
namespace pbzero {

static const ::protozero::ProtoFieldDescriptor kFields_MmCompactionBeginFtraceEvent[] = {
  {"zone_start", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 1, 0},
  {"migrate_pfn", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 2, 0},
  {"free_pfn", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 3, 0},
  {"zone_end", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT64, 4, 0},
  {"sync", ::protozero::ProtoFieldDescriptor::Type::TYPE_UINT32, 5, 0},
};

const ::protozero::ProtoFieldDescriptor* MmCompactionBeginFtraceEvent::GetFieldDescriptor(uint32_t field_id) {
  switch (field_id) {
    case kZoneStartFieldNumber:
      return &kFields_MmCompactionBeginFtraceEvent[0];
    case kMigratePfnFieldNumber:
      return &kFields_MmCompactionBeginFtraceEvent[1];
    case kFreePfnFieldNumber:
      return &kFields_MmCompactionBeginFtraceEvent[2];
    case kZoneEndFieldNumber:
      return &kFields_MmCompactionBeginFtraceEvent[3];
    case kSyncFieldNumber:
      return &kFields_MmCompactionBeginFtraceEvent[4];
    default:
      return &kInvalidField;
  }
}

} // Namespace.
} // Namespace.
} // Namespace.
