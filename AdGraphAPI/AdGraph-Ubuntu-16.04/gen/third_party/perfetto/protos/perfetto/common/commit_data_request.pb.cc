// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/common/commit_data_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perfetto/common/commit_data_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace perfetto {
namespace protos {
class CommitDataRequest_ChunksToMoveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitDataRequest_ChunksToMove> {
} _CommitDataRequest_ChunksToMove_default_instance_;
class CommitDataRequest_ChunkToPatch_PatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitDataRequest_ChunkToPatch_Patch> {
} _CommitDataRequest_ChunkToPatch_Patch_default_instance_;
class CommitDataRequest_ChunkToPatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitDataRequest_ChunkToPatch> {
} _CommitDataRequest_ChunkToPatch_default_instance_;
class CommitDataRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitDataRequest> {
} _CommitDataRequest_default_instance_;

namespace protobuf_perfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _CommitDataRequest_ChunksToMove_default_instance_.Shutdown();
  _CommitDataRequest_ChunkToPatch_Patch_default_instance_.Shutdown();
  _CommitDataRequest_ChunkToPatch_default_instance_.Shutdown();
  _CommitDataRequest_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CommitDataRequest_ChunksToMove_default_instance_.DefaultConstruct();
  _CommitDataRequest_ChunkToPatch_Patch_default_instance_.DefaultConstruct();
  _CommitDataRequest_ChunkToPatch_default_instance_.DefaultConstruct();
  _CommitDataRequest_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_perfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitDataRequest_ChunksToMove::kPageFieldNumber;
const int CommitDataRequest_ChunksToMove::kChunkFieldNumber;
const int CommitDataRequest_ChunksToMove::kTargetBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitDataRequest_ChunksToMove::CommitDataRequest_ChunksToMove()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.CommitDataRequest.ChunksToMove)
}
CommitDataRequest_ChunksToMove::CommitDataRequest_ChunksToMove(const CommitDataRequest_ChunksToMove& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_buffer_) -
    reinterpret_cast<char*>(&page_)) + sizeof(target_buffer_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest.ChunksToMove)
}

void CommitDataRequest_ChunksToMove::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_buffer_) -
      reinterpret_cast<char*>(&page_)) + sizeof(target_buffer_));
}

CommitDataRequest_ChunksToMove::~CommitDataRequest_ChunksToMove() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest.ChunksToMove)
  SharedDtor();
}

void CommitDataRequest_ChunksToMove::SharedDtor() {
}

void CommitDataRequest_ChunksToMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitDataRequest_ChunksToMove& CommitDataRequest_ChunksToMove::default_instance() {
  protobuf_perfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitDataRequest_ChunksToMove* CommitDataRequest_ChunksToMove::New(::google::protobuf::Arena* arena) const {
  CommitDataRequest_ChunksToMove* n = new CommitDataRequest_ChunksToMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitDataRequest_ChunksToMove::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_buffer_) -
        reinterpret_cast<char*>(&page_)) + sizeof(target_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommitDataRequest_ChunksToMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 page = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chunk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chunk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_buffer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_target_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.CommitDataRequest.ChunksToMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.CommitDataRequest.ChunksToMove)
  return false;
#undef DO_
}

void CommitDataRequest_ChunksToMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 page = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page(), output);
  }

  // optional uint32 chunk = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chunk(), output);
  }

  // optional uint32 target_buffer = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.CommitDataRequest.ChunksToMove)
}

size_t CommitDataRequest_ChunksToMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 chunk = 2;
    if (has_chunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk());
    }

    // optional uint32 target_buffer = 3;
    if (has_target_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitDataRequest_ChunksToMove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitDataRequest_ChunksToMove*>(&from));
}

void CommitDataRequest_ChunksToMove::MergeFrom(const CommitDataRequest_ChunksToMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      chunk_ = from.chunk_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_buffer_ = from.target_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommitDataRequest_ChunksToMove::CopyFrom(const CommitDataRequest_ChunksToMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest_ChunksToMove::IsInitialized() const {
  return true;
}

void CommitDataRequest_ChunksToMove::Swap(CommitDataRequest_ChunksToMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitDataRequest_ChunksToMove::InternalSwap(CommitDataRequest_ChunksToMove* other) {
  std::swap(page_, other->page_);
  std::swap(chunk_, other->chunk_);
  std::swap(target_buffer_, other->target_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommitDataRequest_ChunksToMove::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest.ChunksToMove";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitDataRequest_ChunksToMove

// optional uint32 page = 1;
bool CommitDataRequest_ChunksToMove::has_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitDataRequest_ChunksToMove::set_has_page() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitDataRequest_ChunksToMove::clear_has_page() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitDataRequest_ChunksToMove::clear_page() {
  page_ = 0u;
  clear_has_page();
}
::google::protobuf::uint32 CommitDataRequest_ChunksToMove::page() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.ChunksToMove.page)
  return page_;
}
void CommitDataRequest_ChunksToMove::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CommitDataRequest.ChunksToMove.page)
}

// optional uint32 chunk = 2;
bool CommitDataRequest_ChunksToMove::has_chunk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommitDataRequest_ChunksToMove::set_has_chunk() {
  _has_bits_[0] |= 0x00000002u;
}
void CommitDataRequest_ChunksToMove::clear_has_chunk() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommitDataRequest_ChunksToMove::clear_chunk() {
  chunk_ = 0u;
  clear_has_chunk();
}
::google::protobuf::uint32 CommitDataRequest_ChunksToMove::chunk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.ChunksToMove.chunk)
  return chunk_;
}
void CommitDataRequest_ChunksToMove::set_chunk(::google::protobuf::uint32 value) {
  set_has_chunk();
  chunk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CommitDataRequest.ChunksToMove.chunk)
}

// optional uint32 target_buffer = 3;
bool CommitDataRequest_ChunksToMove::has_target_buffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommitDataRequest_ChunksToMove::set_has_target_buffer() {
  _has_bits_[0] |= 0x00000004u;
}
void CommitDataRequest_ChunksToMove::clear_has_target_buffer() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommitDataRequest_ChunksToMove::clear_target_buffer() {
  target_buffer_ = 0u;
  clear_has_target_buffer();
}
::google::protobuf::uint32 CommitDataRequest_ChunksToMove::target_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.ChunksToMove.target_buffer)
  return target_buffer_;
}
void CommitDataRequest_ChunksToMove::set_target_buffer(::google::protobuf::uint32 value) {
  set_has_target_buffer();
  target_buffer_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CommitDataRequest.ChunksToMove.target_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitDataRequest_ChunkToPatch_Patch::kOffsetFieldNumber;
const int CommitDataRequest_ChunkToPatch_Patch::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitDataRequest_ChunkToPatch_Patch::CommitDataRequest_ChunkToPatch_Patch()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
}
CommitDataRequest_ChunkToPatch_Patch::CommitDataRequest_ChunkToPatch_Patch(const CommitDataRequest_ChunkToPatch_Patch& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
}

void CommitDataRequest_ChunkToPatch_Patch::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0u;
}

CommitDataRequest_ChunkToPatch_Patch::~CommitDataRequest_ChunkToPatch_Patch() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  SharedDtor();
}

void CommitDataRequest_ChunkToPatch_Patch::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommitDataRequest_ChunkToPatch_Patch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitDataRequest_ChunkToPatch_Patch& CommitDataRequest_ChunkToPatch_Patch::default_instance() {
  protobuf_perfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitDataRequest_ChunkToPatch_Patch* CommitDataRequest_ChunkToPatch_Patch::New(::google::protobuf::Arena* arena) const {
  CommitDataRequest_ChunkToPatch_Patch* n = new CommitDataRequest_ChunkToPatch_Patch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitDataRequest_ChunkToPatch_Patch::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  offset_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommitDataRequest_ChunkToPatch_Patch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  return false;
#undef DO_
}

void CommitDataRequest_ChunkToPatch_Patch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 offset = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
}

size_t CommitDataRequest_ChunkToPatch_Patch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitDataRequest_ChunkToPatch_Patch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitDataRequest_ChunkToPatch_Patch*>(&from));
}

void CommitDataRequest_ChunkToPatch_Patch::MergeFrom(const CommitDataRequest_ChunkToPatch_Patch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommitDataRequest_ChunkToPatch_Patch::CopyFrom(const CommitDataRequest_ChunkToPatch_Patch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest_ChunkToPatch_Patch::IsInitialized() const {
  return true;
}

void CommitDataRequest_ChunkToPatch_Patch::Swap(CommitDataRequest_ChunkToPatch_Patch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitDataRequest_ChunkToPatch_Patch::InternalSwap(CommitDataRequest_ChunkToPatch_Patch* other) {
  data_.Swap(&other->data_);
  std::swap(offset_, other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommitDataRequest_ChunkToPatch_Patch::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest.ChunkToPatch.Patch";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitDataRequest_ChunkToPatch_Patch

// optional uint32 offset = 1;
bool CommitDataRequest_ChunkToPatch_Patch::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommitDataRequest_ChunkToPatch_Patch::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
void CommitDataRequest_ChunkToPatch_Patch::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommitDataRequest_ChunkToPatch_Patch::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 CommitDataRequest_ChunkToPatch_Patch::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch.offset)
  return offset_;
}
void CommitDataRequest_ChunkToPatch_Patch::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch.offset)
}

// optional bytes data = 2;
bool CommitDataRequest_ChunkToPatch_Patch::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitDataRequest_ChunkToPatch_Patch::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitDataRequest_ChunkToPatch_Patch::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitDataRequest_ChunkToPatch_Patch::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CommitDataRequest_ChunkToPatch_Patch::data() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch.data)
  return data_.GetNoArena();
}
void CommitDataRequest_ChunkToPatch_Patch::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch.data)
}
#if LANG_CXX11
void CommitDataRequest_ChunkToPatch_Patch::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch.data)
}
#endif
void CommitDataRequest_ChunkToPatch_Patch::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch.data)
}
void CommitDataRequest_ChunkToPatch_Patch::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch.data)
}
::std::string* CommitDataRequest_ChunkToPatch_Patch::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitDataRequest_ChunkToPatch_Patch::release_data() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitDataRequest_ChunkToPatch_Patch::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitDataRequest_ChunkToPatch::kTargetBufferFieldNumber;
const int CommitDataRequest_ChunkToPatch::kWriterIdFieldNumber;
const int CommitDataRequest_ChunkToPatch::kChunkIdFieldNumber;
const int CommitDataRequest_ChunkToPatch::kPatchesFieldNumber;
const int CommitDataRequest_ChunkToPatch::kHasMorePatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitDataRequest_ChunkToPatch::CommitDataRequest_ChunkToPatch()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.CommitDataRequest.ChunkToPatch)
}
CommitDataRequest_ChunkToPatch::CommitDataRequest_ChunkToPatch(const CommitDataRequest_ChunkToPatch& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      patches_(from.patches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_buffer_, &from.target_buffer_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_more_patches_) -
    reinterpret_cast<char*>(&target_buffer_)) + sizeof(has_more_patches_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest.ChunkToPatch)
}

void CommitDataRequest_ChunkToPatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_buffer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_more_patches_) -
      reinterpret_cast<char*>(&target_buffer_)) + sizeof(has_more_patches_));
}

CommitDataRequest_ChunkToPatch::~CommitDataRequest_ChunkToPatch() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest.ChunkToPatch)
  SharedDtor();
}

void CommitDataRequest_ChunkToPatch::SharedDtor() {
}

void CommitDataRequest_ChunkToPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitDataRequest_ChunkToPatch& CommitDataRequest_ChunkToPatch::default_instance() {
  protobuf_perfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitDataRequest_ChunkToPatch* CommitDataRequest_ChunkToPatch::New(::google::protobuf::Arena* arena) const {
  CommitDataRequest_ChunkToPatch* n = new CommitDataRequest_ChunkToPatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitDataRequest_ChunkToPatch::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  patches_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&target_buffer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_more_patches_) -
        reinterpret_cast<char*>(&target_buffer_)) + sizeof(has_more_patches_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommitDataRequest_ChunkToPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_buffer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_target_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 writer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_writer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chunk_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_chunk_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_more_patches = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_has_more_patches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_more_patches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.CommitDataRequest.ChunkToPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.CommitDataRequest.ChunkToPatch)
  return false;
#undef DO_
}

void CommitDataRequest_ChunkToPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_buffer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_buffer(), output);
  }

  // optional uint32 writer_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->writer_id(), output);
  }

  // optional uint32 chunk_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chunk_id(), output);
  }

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->patches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->patches(static_cast<int>(i)), output);
  }

  // optional bool has_more_patches = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_more_patches(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.CommitDataRequest.ChunkToPatch)
}

size_t CommitDataRequest_ChunkToPatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->patches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patches(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 target_buffer = 1;
    if (has_target_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_buffer());
    }

    // optional uint32 writer_id = 2;
    if (has_writer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->writer_id());
    }

    // optional uint32 chunk_id = 3;
    if (has_chunk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk_id());
    }

    // optional bool has_more_patches = 5;
    if (has_has_more_patches()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitDataRequest_ChunkToPatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitDataRequest_ChunkToPatch*>(&from));
}

void CommitDataRequest_ChunkToPatch::MergeFrom(const CommitDataRequest_ChunkToPatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patches_.MergeFrom(from.patches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      target_buffer_ = from.target_buffer_;
    }
    if (cached_has_bits & 0x00000002u) {
      writer_id_ = from.writer_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chunk_id_ = from.chunk_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_more_patches_ = from.has_more_patches_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommitDataRequest_ChunkToPatch::CopyFrom(const CommitDataRequest_ChunkToPatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest_ChunkToPatch::IsInitialized() const {
  return true;
}

void CommitDataRequest_ChunkToPatch::Swap(CommitDataRequest_ChunkToPatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitDataRequest_ChunkToPatch::InternalSwap(CommitDataRequest_ChunkToPatch* other) {
  patches_.InternalSwap(&other->patches_);
  std::swap(target_buffer_, other->target_buffer_);
  std::swap(writer_id_, other->writer_id_);
  std::swap(chunk_id_, other->chunk_id_);
  std::swap(has_more_patches_, other->has_more_patches_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommitDataRequest_ChunkToPatch::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest.ChunkToPatch";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitDataRequest_ChunkToPatch

// optional uint32 target_buffer = 1;
bool CommitDataRequest_ChunkToPatch::has_target_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitDataRequest_ChunkToPatch::set_has_target_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitDataRequest_ChunkToPatch::clear_has_target_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitDataRequest_ChunkToPatch::clear_target_buffer() {
  target_buffer_ = 0u;
  clear_has_target_buffer();
}
::google::protobuf::uint32 CommitDataRequest_ChunkToPatch::target_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.ChunkToPatch.target_buffer)
  return target_buffer_;
}
void CommitDataRequest_ChunkToPatch::set_target_buffer(::google::protobuf::uint32 value) {
  set_has_target_buffer();
  target_buffer_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CommitDataRequest.ChunkToPatch.target_buffer)
}

// optional uint32 writer_id = 2;
bool CommitDataRequest_ChunkToPatch::has_writer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommitDataRequest_ChunkToPatch::set_has_writer_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CommitDataRequest_ChunkToPatch::clear_has_writer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommitDataRequest_ChunkToPatch::clear_writer_id() {
  writer_id_ = 0u;
  clear_has_writer_id();
}
::google::protobuf::uint32 CommitDataRequest_ChunkToPatch::writer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.ChunkToPatch.writer_id)
  return writer_id_;
}
void CommitDataRequest_ChunkToPatch::set_writer_id(::google::protobuf::uint32 value) {
  set_has_writer_id();
  writer_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CommitDataRequest.ChunkToPatch.writer_id)
}

// optional uint32 chunk_id = 3;
bool CommitDataRequest_ChunkToPatch::has_chunk_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommitDataRequest_ChunkToPatch::set_has_chunk_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CommitDataRequest_ChunkToPatch::clear_has_chunk_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommitDataRequest_ChunkToPatch::clear_chunk_id() {
  chunk_id_ = 0u;
  clear_has_chunk_id();
}
::google::protobuf::uint32 CommitDataRequest_ChunkToPatch::chunk_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.ChunkToPatch.chunk_id)
  return chunk_id_;
}
void CommitDataRequest_ChunkToPatch::set_chunk_id(::google::protobuf::uint32 value) {
  set_has_chunk_id();
  chunk_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CommitDataRequest.ChunkToPatch.chunk_id)
}

// repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;
int CommitDataRequest_ChunkToPatch::patches_size() const {
  return patches_.size();
}
void CommitDataRequest_ChunkToPatch::clear_patches() {
  patches_.Clear();
}
const ::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch& CommitDataRequest_ChunkToPatch::patches(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.ChunkToPatch.patches)
  return patches_.Get(index);
}
::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch* CommitDataRequest_ChunkToPatch::mutable_patches(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CommitDataRequest.ChunkToPatch.patches)
  return patches_.Mutable(index);
}
::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch* CommitDataRequest_ChunkToPatch::add_patches() {
  // @@protoc_insertion_point(field_add:perfetto.protos.CommitDataRequest.ChunkToPatch.patches)
  return patches_.Add();
}
::google::protobuf::RepeatedPtrField< ::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch >*
CommitDataRequest_ChunkToPatch::mutable_patches() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.CommitDataRequest.ChunkToPatch.patches)
  return &patches_;
}
const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch >&
CommitDataRequest_ChunkToPatch::patches() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.CommitDataRequest.ChunkToPatch.patches)
  return patches_;
}

// optional bool has_more_patches = 5;
bool CommitDataRequest_ChunkToPatch::has_has_more_patches() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CommitDataRequest_ChunkToPatch::set_has_has_more_patches() {
  _has_bits_[0] |= 0x00000008u;
}
void CommitDataRequest_ChunkToPatch::clear_has_has_more_patches() {
  _has_bits_[0] &= ~0x00000008u;
}
void CommitDataRequest_ChunkToPatch::clear_has_more_patches() {
  has_more_patches_ = false;
  clear_has_has_more_patches();
}
bool CommitDataRequest_ChunkToPatch::has_more_patches() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.ChunkToPatch.has_more_patches)
  return has_more_patches_;
}
void CommitDataRequest_ChunkToPatch::set_has_more_patches(bool value) {
  set_has_has_more_patches();
  has_more_patches_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CommitDataRequest.ChunkToPatch.has_more_patches)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitDataRequest::kChunksToMoveFieldNumber;
const int CommitDataRequest::kChunksToPatchFieldNumber;
const int CommitDataRequest::kFlushRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitDataRequest::CommitDataRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.CommitDataRequest)
}
CommitDataRequest::CommitDataRequest(const CommitDataRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      chunks_to_move_(from.chunks_to_move_),
      chunks_to_patch_(from.chunks_to_patch_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flush_request_id_ = from.flush_request_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest)
}

void CommitDataRequest::SharedCtor() {
  _cached_size_ = 0;
  flush_request_id_ = GOOGLE_ULONGLONG(0);
}

CommitDataRequest::~CommitDataRequest() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest)
  SharedDtor();
}

void CommitDataRequest::SharedDtor() {
}

void CommitDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitDataRequest& CommitDataRequest::default_instance() {
  protobuf_perfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitDataRequest* CommitDataRequest::New(::google::protobuf::Arena* arena) const {
  CommitDataRequest* n = new CommitDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest)
  chunks_to_move_.Clear();
  chunks_to_patch_.Clear();
  flush_request_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommitDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.CommitDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunks_to_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunks_to_patch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 flush_request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_flush_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flush_request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.CommitDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.CommitDataRequest)
  return false;
#undef DO_
}

void CommitDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.CommitDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunks_to_move_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->chunks_to_move(static_cast<int>(i)), output);
  }

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunks_to_patch_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->chunks_to_patch(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 flush_request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->flush_request_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.CommitDataRequest)
}

size_t CommitDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chunks_to_move_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunks_to_move(static_cast<int>(i)));
    }
  }

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->chunks_to_patch_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunks_to_patch(static_cast<int>(i)));
    }
  }

  // optional uint64 flush_request_id = 3;
  if (has_flush_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flush_request_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitDataRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitDataRequest*>(&from));
}

void CommitDataRequest::MergeFrom(const CommitDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_to_move_.MergeFrom(from.chunks_to_move_);
  chunks_to_patch_.MergeFrom(from.chunks_to_patch_);
  if (from.has_flush_request_id()) {
    set_flush_request_id(from.flush_request_id());
  }
}

void CommitDataRequest::CopyFrom(const CommitDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest::IsInitialized() const {
  return true;
}

void CommitDataRequest::Swap(CommitDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitDataRequest::InternalSwap(CommitDataRequest* other) {
  chunks_to_move_.InternalSwap(&other->chunks_to_move_);
  chunks_to_patch_.InternalSwap(&other->chunks_to_patch_);
  std::swap(flush_request_id_, other->flush_request_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommitDataRequest::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitDataRequest

// repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;
int CommitDataRequest::chunks_to_move_size() const {
  return chunks_to_move_.size();
}
void CommitDataRequest::clear_chunks_to_move() {
  chunks_to_move_.Clear();
}
const ::perfetto::protos::CommitDataRequest_ChunksToMove& CommitDataRequest::chunks_to_move(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.chunks_to_move)
  return chunks_to_move_.Get(index);
}
::perfetto::protos::CommitDataRequest_ChunksToMove* CommitDataRequest::mutable_chunks_to_move(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CommitDataRequest.chunks_to_move)
  return chunks_to_move_.Mutable(index);
}
::perfetto::protos::CommitDataRequest_ChunksToMove* CommitDataRequest::add_chunks_to_move() {
  // @@protoc_insertion_point(field_add:perfetto.protos.CommitDataRequest.chunks_to_move)
  return chunks_to_move_.Add();
}
::google::protobuf::RepeatedPtrField< ::perfetto::protos::CommitDataRequest_ChunksToMove >*
CommitDataRequest::mutable_chunks_to_move() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.CommitDataRequest.chunks_to_move)
  return &chunks_to_move_;
}
const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::CommitDataRequest_ChunksToMove >&
CommitDataRequest::chunks_to_move() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.CommitDataRequest.chunks_to_move)
  return chunks_to_move_;
}

// repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;
int CommitDataRequest::chunks_to_patch_size() const {
  return chunks_to_patch_.size();
}
void CommitDataRequest::clear_chunks_to_patch() {
  chunks_to_patch_.Clear();
}
const ::perfetto::protos::CommitDataRequest_ChunkToPatch& CommitDataRequest::chunks_to_patch(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.chunks_to_patch)
  return chunks_to_patch_.Get(index);
}
::perfetto::protos::CommitDataRequest_ChunkToPatch* CommitDataRequest::mutable_chunks_to_patch(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CommitDataRequest.chunks_to_patch)
  return chunks_to_patch_.Mutable(index);
}
::perfetto::protos::CommitDataRequest_ChunkToPatch* CommitDataRequest::add_chunks_to_patch() {
  // @@protoc_insertion_point(field_add:perfetto.protos.CommitDataRequest.chunks_to_patch)
  return chunks_to_patch_.Add();
}
::google::protobuf::RepeatedPtrField< ::perfetto::protos::CommitDataRequest_ChunkToPatch >*
CommitDataRequest::mutable_chunks_to_patch() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.CommitDataRequest.chunks_to_patch)
  return &chunks_to_patch_;
}
const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::CommitDataRequest_ChunkToPatch >&
CommitDataRequest::chunks_to_patch() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.CommitDataRequest.chunks_to_patch)
  return chunks_to_patch_;
}

// optional uint64 flush_request_id = 3;
bool CommitDataRequest::has_flush_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitDataRequest::set_has_flush_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitDataRequest::clear_has_flush_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitDataRequest::clear_flush_request_id() {
  flush_request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_flush_request_id();
}
::google::protobuf::uint64 CommitDataRequest::flush_request_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CommitDataRequest.flush_request_id)
  return flush_request_id_;
}
void CommitDataRequest::set_flush_request_id(::google::protobuf::uint64 value) {
  set_has_flush_request_id();
  flush_request_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.CommitDataRequest.flush_request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)
