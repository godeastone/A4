// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phonemetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "phonemetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace i18n {
namespace phonenumbers {
class NumberFormatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NumberFormat> {
} _NumberFormat_default_instance_;
class PhoneNumberDescDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhoneNumberDesc> {
} _PhoneNumberDesc_default_instance_;
class PhoneMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhoneMetadata> {
} _PhoneMetadata_default_instance_;
class PhoneMetadataCollectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhoneMetadataCollection> {
} _PhoneMetadataCollection_default_instance_;

namespace protobuf_phonemetadata_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _NumberFormat_default_instance_.Shutdown();
  _PhoneNumberDesc_default_instance_.Shutdown();
  _PhoneMetadata_default_instance_.Shutdown();
  _PhoneMetadataCollection_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NumberFormat_default_instance_.DefaultConstruct();
  _PhoneNumberDesc_default_instance_.DefaultConstruct();
  _PhoneMetadata_default_instance_.DefaultConstruct();
  _PhoneMetadataCollection_default_instance_.DefaultConstruct();
  _PhoneMetadata_default_instance_.get_mutable()->general_desc_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->fixed_line_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->mobile_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->toll_free_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->premium_rate_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->shared_cost_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->personal_number_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->voip_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->pager_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->uan_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->emergency_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->voicemail_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->short_code_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->standard_rate_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->carrier_specific_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
  _PhoneMetadata_default_instance_.get_mutable()->no_international_dialling_ = const_cast< ::i18n::phonenumbers::PhoneNumberDesc*>(
      ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_phonemetadata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NumberFormat::kPatternFieldNumber;
const int NumberFormat::kFormatFieldNumber;
const int NumberFormat::kLeadingDigitsPatternFieldNumber;
const int NumberFormat::kNationalPrefixFormattingRuleFieldNumber;
const int NumberFormat::kNationalPrefixOptionalWhenFormattingFieldNumber;
const int NumberFormat::kDomesticCarrierCodeFormattingRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NumberFormat::NumberFormat()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_phonemetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:i18n.phonenumbers.NumberFormat)
}
NumberFormat::NumberFormat(const NumberFormat& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      leading_digits_pattern_(from.leading_digits_pattern_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pattern()) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_format()) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  national_prefix_formatting_rule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_national_prefix_formatting_rule()) {
    national_prefix_formatting_rule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_formatting_rule_);
  }
  domestic_carrier_code_formatting_rule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domestic_carrier_code_formatting_rule()) {
    domestic_carrier_code_formatting_rule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domestic_carrier_code_formatting_rule_);
  }
  national_prefix_optional_when_formatting_ = from.national_prefix_optional_when_formatting_;
  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.NumberFormat)
}

void NumberFormat::SharedCtor() {
  _cached_size_ = 0;
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_prefix_formatting_rule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domestic_carrier_code_formatting_rule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_prefix_optional_when_formatting_ = false;
}

NumberFormat::~NumberFormat() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.NumberFormat)
  SharedDtor();
}

void NumberFormat::SharedDtor() {
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_prefix_formatting_rule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domestic_carrier_code_formatting_rule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NumberFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NumberFormat& NumberFormat::default_instance() {
  protobuf_phonemetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

NumberFormat* NumberFormat::New(::google::protobuf::Arena* arena) const {
  NumberFormat* n = new NumberFormat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NumberFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.NumberFormat)
  leading_digits_pattern_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_pattern()) {
      GOOGLE_DCHECK(!pattern_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pattern_.UnsafeRawStringPointer())->clear();
    }
    if (has_format()) {
      GOOGLE_DCHECK(!format_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*format_.UnsafeRawStringPointer())->clear();
    }
    if (has_national_prefix_formatting_rule()) {
      GOOGLE_DCHECK(!national_prefix_formatting_rule_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*national_prefix_formatting_rule_.UnsafeRawStringPointer())->clear();
    }
    if (has_domestic_carrier_code_formatting_rule()) {
      GOOGLE_DCHECK(!domestic_carrier_code_formatting_rule_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*domestic_carrier_code_formatting_rule_.UnsafeRawStringPointer())->clear();
    }
  }
  national_prefix_optional_when_formatting_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NumberFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:i18n.phonenumbers.NumberFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pattern = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string leading_digits_pattern = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_leading_digits_pattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string national_prefix_formatting_rule = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national_prefix_formatting_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domestic_carrier_code_formatting_rule = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domestic_carrier_code_formatting_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool national_prefix_optional_when_formatting = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_national_prefix_optional_when_formatting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &national_prefix_optional_when_formatting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:i18n.phonenumbers.NumberFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:i18n.phonenumbers.NumberFormat)
  return false;
#undef DO_
}

void NumberFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:i18n.phonenumbers.NumberFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // required string format = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format(), output);
  }

  // repeated string leading_digits_pattern = 3;
  for (int i = 0, n = this->leading_digits_pattern_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->leading_digits_pattern(i), output);
  }

  // optional string national_prefix_formatting_rule = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->national_prefix_formatting_rule(), output);
  }

  // optional string domestic_carrier_code_formatting_rule = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->domestic_carrier_code_formatting_rule(), output);
  }

  // optional bool national_prefix_optional_when_formatting = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->national_prefix_optional_when_formatting(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:i18n.phonenumbers.NumberFormat)
}

size_t NumberFormat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:i18n.phonenumbers.NumberFormat)
  size_t total_size = 0;

  if (has_pattern()) {
    // required string pattern = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  if (has_format()) {
    // required string format = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  return total_size;
}
size_t NumberFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.NumberFormat)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string pattern = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());

    // required string format = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string leading_digits_pattern = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->leading_digits_pattern_size());
  for (int i = 0, n = this->leading_digits_pattern_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->leading_digits_pattern(i));
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional string national_prefix_formatting_rule = 4;
    if (has_national_prefix_formatting_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->national_prefix_formatting_rule());
    }

    // optional string domestic_carrier_code_formatting_rule = 5;
    if (has_domestic_carrier_code_formatting_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domestic_carrier_code_formatting_rule());
    }

    // optional bool national_prefix_optional_when_formatting = 6;
    if (has_national_prefix_optional_when_formatting()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumberFormat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NumberFormat*>(&from));
}

void NumberFormat::MergeFrom(const NumberFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.NumberFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leading_digits_pattern_.MergeFrom(from.leading_digits_pattern_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pattern();
      pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_format();
      format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_national_prefix_formatting_rule();
      national_prefix_formatting_rule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_formatting_rule_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_domestic_carrier_code_formatting_rule();
      domestic_carrier_code_formatting_rule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domestic_carrier_code_formatting_rule_);
    }
    if (cached_has_bits & 0x00000010u) {
      national_prefix_optional_when_formatting_ = from.national_prefix_optional_when_formatting_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NumberFormat::CopyFrom(const NumberFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.NumberFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberFormat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void NumberFormat::Swap(NumberFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NumberFormat::InternalSwap(NumberFormat* other) {
  leading_digits_pattern_.InternalSwap(&other->leading_digits_pattern_);
  pattern_.Swap(&other->pattern_);
  format_.Swap(&other->format_);
  national_prefix_formatting_rule_.Swap(&other->national_prefix_formatting_rule_);
  domestic_carrier_code_formatting_rule_.Swap(&other->domestic_carrier_code_formatting_rule_);
  std::swap(national_prefix_optional_when_formatting_, other->national_prefix_optional_when_formatting_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NumberFormat::GetTypeName() const {
  return "i18n.phonenumbers.NumberFormat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NumberFormat

// required string pattern = 1;
bool NumberFormat::has_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NumberFormat::set_has_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
void NumberFormat::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
void NumberFormat::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pattern();
}
const ::std::string& NumberFormat::pattern() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.pattern)
  return pattern_.GetNoArena();
}
void NumberFormat::set_pattern(const ::std::string& value) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.pattern)
}
#if LANG_CXX11
void NumberFormat::set_pattern(::std::string&& value) {
  set_has_pattern();
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.NumberFormat.pattern)
}
#endif
void NumberFormat::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.pattern)
}
void NumberFormat::set_pattern(const char* value, size_t size) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.pattern)
}
::std::string* NumberFormat::mutable_pattern() {
  set_has_pattern();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NumberFormat::release_pattern() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.pattern)
  clear_has_pattern();
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NumberFormat::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    set_has_pattern();
  } else {
    clear_has_pattern();
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.pattern)
}

// required string format = 2;
bool NumberFormat::has_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NumberFormat::set_has_format() {
  _has_bits_[0] |= 0x00000002u;
}
void NumberFormat::clear_has_format() {
  _has_bits_[0] &= ~0x00000002u;
}
void NumberFormat::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_format();
}
const ::std::string& NumberFormat::format() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.format)
  return format_.GetNoArena();
}
void NumberFormat::set_format(const ::std::string& value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.format)
}
#if LANG_CXX11
void NumberFormat::set_format(::std::string&& value) {
  set_has_format();
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.NumberFormat.format)
}
#endif
void NumberFormat::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.format)
}
void NumberFormat::set_format(const char* value, size_t size) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.format)
}
::std::string* NumberFormat::mutable_format() {
  set_has_format();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NumberFormat::release_format() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.format)
  clear_has_format();
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NumberFormat::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    set_has_format();
  } else {
    clear_has_format();
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.format)
}

// repeated string leading_digits_pattern = 3;
int NumberFormat::leading_digits_pattern_size() const {
  return leading_digits_pattern_.size();
}
void NumberFormat::clear_leading_digits_pattern() {
  leading_digits_pattern_.Clear();
}
const ::std::string& NumberFormat::leading_digits_pattern(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return leading_digits_pattern_.Get(index);
}
::std::string* NumberFormat::mutable_leading_digits_pattern(int index) {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return leading_digits_pattern_.Mutable(index);
}
void NumberFormat::set_leading_digits_pattern(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  leading_digits_pattern_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NumberFormat::set_leading_digits_pattern(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  leading_digits_pattern_.Mutable(index)->assign(std::move(value));
}
#endif
void NumberFormat::set_leading_digits_pattern(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  leading_digits_pattern_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
void NumberFormat::set_leading_digits_pattern(int index, const char* value, size_t size) {
  leading_digits_pattern_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
::std::string* NumberFormat::add_leading_digits_pattern() {
  // @@protoc_insertion_point(field_add_mutable:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return leading_digits_pattern_.Add();
}
void NumberFormat::add_leading_digits_pattern(const ::std::string& value) {
  leading_digits_pattern_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
#if LANG_CXX11
void NumberFormat::add_leading_digits_pattern(::std::string&& value) {
  leading_digits_pattern_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
#endif
void NumberFormat::add_leading_digits_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  leading_digits_pattern_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
void NumberFormat::add_leading_digits_pattern(const char* value, size_t size) {
  leading_digits_pattern_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NumberFormat::leading_digits_pattern() const {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return leading_digits_pattern_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NumberFormat::mutable_leading_digits_pattern() {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return &leading_digits_pattern_;
}

// optional string national_prefix_formatting_rule = 4;
bool NumberFormat::has_national_prefix_formatting_rule() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NumberFormat::set_has_national_prefix_formatting_rule() {
  _has_bits_[0] |= 0x00000004u;
}
void NumberFormat::clear_has_national_prefix_formatting_rule() {
  _has_bits_[0] &= ~0x00000004u;
}
void NumberFormat::clear_national_prefix_formatting_rule() {
  national_prefix_formatting_rule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_national_prefix_formatting_rule();
}
const ::std::string& NumberFormat::national_prefix_formatting_rule() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
  return national_prefix_formatting_rule_.GetNoArena();
}
void NumberFormat::set_national_prefix_formatting_rule(const ::std::string& value) {
  set_has_national_prefix_formatting_rule();
  national_prefix_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
}
#if LANG_CXX11
void NumberFormat::set_national_prefix_formatting_rule(::std::string&& value) {
  set_has_national_prefix_formatting_rule();
  national_prefix_formatting_rule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
}
#endif
void NumberFormat::set_national_prefix_formatting_rule(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_national_prefix_formatting_rule();
  national_prefix_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
}
void NumberFormat::set_national_prefix_formatting_rule(const char* value, size_t size) {
  set_has_national_prefix_formatting_rule();
  national_prefix_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
}
::std::string* NumberFormat::mutable_national_prefix_formatting_rule() {
  set_has_national_prefix_formatting_rule();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
  return national_prefix_formatting_rule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NumberFormat::release_national_prefix_formatting_rule() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
  clear_has_national_prefix_formatting_rule();
  return national_prefix_formatting_rule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NumberFormat::set_allocated_national_prefix_formatting_rule(::std::string* national_prefix_formatting_rule) {
  if (national_prefix_formatting_rule != NULL) {
    set_has_national_prefix_formatting_rule();
  } else {
    clear_has_national_prefix_formatting_rule();
  }
  national_prefix_formatting_rule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national_prefix_formatting_rule);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
}

// optional bool national_prefix_optional_when_formatting = 6;
bool NumberFormat::has_national_prefix_optional_when_formatting() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NumberFormat::set_has_national_prefix_optional_when_formatting() {
  _has_bits_[0] |= 0x00000010u;
}
void NumberFormat::clear_has_national_prefix_optional_when_formatting() {
  _has_bits_[0] &= ~0x00000010u;
}
void NumberFormat::clear_national_prefix_optional_when_formatting() {
  national_prefix_optional_when_formatting_ = false;
  clear_has_national_prefix_optional_when_formatting();
}
bool NumberFormat::national_prefix_optional_when_formatting() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.national_prefix_optional_when_formatting)
  return national_prefix_optional_when_formatting_;
}
void NumberFormat::set_national_prefix_optional_when_formatting(bool value) {
  set_has_national_prefix_optional_when_formatting();
  national_prefix_optional_when_formatting_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.national_prefix_optional_when_formatting)
}

// optional string domestic_carrier_code_formatting_rule = 5;
bool NumberFormat::has_domestic_carrier_code_formatting_rule() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NumberFormat::set_has_domestic_carrier_code_formatting_rule() {
  _has_bits_[0] |= 0x00000008u;
}
void NumberFormat::clear_has_domestic_carrier_code_formatting_rule() {
  _has_bits_[0] &= ~0x00000008u;
}
void NumberFormat::clear_domestic_carrier_code_formatting_rule() {
  domestic_carrier_code_formatting_rule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domestic_carrier_code_formatting_rule();
}
const ::std::string& NumberFormat::domestic_carrier_code_formatting_rule() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
  return domestic_carrier_code_formatting_rule_.GetNoArena();
}
void NumberFormat::set_domestic_carrier_code_formatting_rule(const ::std::string& value) {
  set_has_domestic_carrier_code_formatting_rule();
  domestic_carrier_code_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
}
#if LANG_CXX11
void NumberFormat::set_domestic_carrier_code_formatting_rule(::std::string&& value) {
  set_has_domestic_carrier_code_formatting_rule();
  domestic_carrier_code_formatting_rule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
}
#endif
void NumberFormat::set_domestic_carrier_code_formatting_rule(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domestic_carrier_code_formatting_rule();
  domestic_carrier_code_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
}
void NumberFormat::set_domestic_carrier_code_formatting_rule(const char* value, size_t size) {
  set_has_domestic_carrier_code_formatting_rule();
  domestic_carrier_code_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
}
::std::string* NumberFormat::mutable_domestic_carrier_code_formatting_rule() {
  set_has_domestic_carrier_code_formatting_rule();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
  return domestic_carrier_code_formatting_rule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NumberFormat::release_domestic_carrier_code_formatting_rule() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
  clear_has_domestic_carrier_code_formatting_rule();
  return domestic_carrier_code_formatting_rule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NumberFormat::set_allocated_domestic_carrier_code_formatting_rule(::std::string* domestic_carrier_code_formatting_rule) {
  if (domestic_carrier_code_formatting_rule != NULL) {
    set_has_domestic_carrier_code_formatting_rule();
  } else {
    clear_has_domestic_carrier_code_formatting_rule();
  }
  domestic_carrier_code_formatting_rule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domestic_carrier_code_formatting_rule);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhoneNumberDesc::kNationalNumberPatternFieldNumber;
const int PhoneNumberDesc::kPossibleNumberPatternFieldNumber;
const int PhoneNumberDesc::kExampleNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhoneNumberDesc::PhoneNumberDesc()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_phonemetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:i18n.phonenumbers.PhoneNumberDesc)
}
PhoneNumberDesc::PhoneNumberDesc(const PhoneNumberDesc& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  national_number_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_national_number_pattern()) {
    national_number_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_number_pattern_);
  }
  possible_number_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_possible_number_pattern()) {
    possible_number_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.possible_number_pattern_);
  }
  example_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_example_number()) {
    example_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.example_number_);
  }
  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PhoneNumberDesc)
}

void PhoneNumberDesc::SharedCtor() {
  _cached_size_ = 0;
  national_number_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  possible_number_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  example_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PhoneNumberDesc::~PhoneNumberDesc() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.PhoneNumberDesc)
  SharedDtor();
}

void PhoneNumberDesc::SharedDtor() {
  national_number_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  possible_number_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  example_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhoneNumberDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PhoneNumberDesc& PhoneNumberDesc::default_instance() {
  protobuf_phonemetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhoneNumberDesc* PhoneNumberDesc::New(::google::protobuf::Arena* arena) const {
  PhoneNumberDesc* n = new PhoneNumberDesc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhoneNumberDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PhoneNumberDesc)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_national_number_pattern()) {
      GOOGLE_DCHECK(!national_number_pattern_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*national_number_pattern_.UnsafeRawStringPointer())->clear();
    }
    if (has_possible_number_pattern()) {
      GOOGLE_DCHECK(!possible_number_pattern_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*possible_number_pattern_.UnsafeRawStringPointer())->clear();
    }
    if (has_example_number()) {
      GOOGLE_DCHECK(!example_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*example_number_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PhoneNumberDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:i18n.phonenumbers.PhoneNumberDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string national_number_pattern = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national_number_pattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string possible_number_pattern = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_possible_number_pattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string example_number = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_example_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:i18n.phonenumbers.PhoneNumberDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:i18n.phonenumbers.PhoneNumberDesc)
  return false;
#undef DO_
}

void PhoneNumberDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:i18n.phonenumbers.PhoneNumberDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string national_number_pattern = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->national_number_pattern(), output);
  }

  // optional string possible_number_pattern = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->possible_number_pattern(), output);
  }

  // optional string example_number = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->example_number(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:i18n.phonenumbers.PhoneNumberDesc)
}

size_t PhoneNumberDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PhoneNumberDesc)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string national_number_pattern = 2;
    if (has_national_number_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->national_number_pattern());
    }

    // optional string possible_number_pattern = 3;
    if (has_possible_number_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->possible_number_pattern());
    }

    // optional string example_number = 6;
    if (has_example_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->example_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneNumberDesc::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PhoneNumberDesc*>(&from));
}

void PhoneNumberDesc::MergeFrom(const PhoneNumberDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PhoneNumberDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_national_number_pattern();
      national_number_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_number_pattern_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_possible_number_pattern();
      possible_number_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.possible_number_pattern_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_example_number();
      example_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.example_number_);
    }
  }
}

void PhoneNumberDesc::CopyFrom(const PhoneNumberDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PhoneNumberDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneNumberDesc::IsInitialized() const {
  return true;
}

void PhoneNumberDesc::Swap(PhoneNumberDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhoneNumberDesc::InternalSwap(PhoneNumberDesc* other) {
  national_number_pattern_.Swap(&other->national_number_pattern_);
  possible_number_pattern_.Swap(&other->possible_number_pattern_);
  example_number_.Swap(&other->example_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PhoneNumberDesc::GetTypeName() const {
  return "i18n.phonenumbers.PhoneNumberDesc";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhoneNumberDesc

// optional string national_number_pattern = 2;
bool PhoneNumberDesc::has_national_number_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PhoneNumberDesc::set_has_national_number_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
void PhoneNumberDesc::clear_has_national_number_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
void PhoneNumberDesc::clear_national_number_pattern() {
  national_number_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_national_number_pattern();
}
const ::std::string& PhoneNumberDesc::national_number_pattern() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
  return national_number_pattern_.GetNoArena();
}
void PhoneNumberDesc::set_national_number_pattern(const ::std::string& value) {
  set_has_national_number_pattern();
  national_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
}
#if LANG_CXX11
void PhoneNumberDesc::set_national_number_pattern(::std::string&& value) {
  set_has_national_number_pattern();
  national_number_pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
}
#endif
void PhoneNumberDesc::set_national_number_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_national_number_pattern();
  national_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
}
void PhoneNumberDesc::set_national_number_pattern(const char* value, size_t size) {
  set_has_national_number_pattern();
  national_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
}
::std::string* PhoneNumberDesc::mutable_national_number_pattern() {
  set_has_national_number_pattern();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
  return national_number_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneNumberDesc::release_national_number_pattern() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
  clear_has_national_number_pattern();
  return national_number_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneNumberDesc::set_allocated_national_number_pattern(::std::string* national_number_pattern) {
  if (national_number_pattern != NULL) {
    set_has_national_number_pattern();
  } else {
    clear_has_national_number_pattern();
  }
  national_number_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national_number_pattern);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
}

// optional string possible_number_pattern = 3;
bool PhoneNumberDesc::has_possible_number_pattern() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PhoneNumberDesc::set_has_possible_number_pattern() {
  _has_bits_[0] |= 0x00000002u;
}
void PhoneNumberDesc::clear_has_possible_number_pattern() {
  _has_bits_[0] &= ~0x00000002u;
}
void PhoneNumberDesc::clear_possible_number_pattern() {
  possible_number_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_possible_number_pattern();
}
const ::std::string& PhoneNumberDesc::possible_number_pattern() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
  return possible_number_pattern_.GetNoArena();
}
void PhoneNumberDesc::set_possible_number_pattern(const ::std::string& value) {
  set_has_possible_number_pattern();
  possible_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
}
#if LANG_CXX11
void PhoneNumberDesc::set_possible_number_pattern(::std::string&& value) {
  set_has_possible_number_pattern();
  possible_number_pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
}
#endif
void PhoneNumberDesc::set_possible_number_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_possible_number_pattern();
  possible_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
}
void PhoneNumberDesc::set_possible_number_pattern(const char* value, size_t size) {
  set_has_possible_number_pattern();
  possible_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
}
::std::string* PhoneNumberDesc::mutable_possible_number_pattern() {
  set_has_possible_number_pattern();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
  return possible_number_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneNumberDesc::release_possible_number_pattern() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
  clear_has_possible_number_pattern();
  return possible_number_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneNumberDesc::set_allocated_possible_number_pattern(::std::string* possible_number_pattern) {
  if (possible_number_pattern != NULL) {
    set_has_possible_number_pattern();
  } else {
    clear_has_possible_number_pattern();
  }
  possible_number_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), possible_number_pattern);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
}

// optional string example_number = 6;
bool PhoneNumberDesc::has_example_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PhoneNumberDesc::set_has_example_number() {
  _has_bits_[0] |= 0x00000004u;
}
void PhoneNumberDesc::clear_has_example_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void PhoneNumberDesc::clear_example_number() {
  example_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_example_number();
}
const ::std::string& PhoneNumberDesc::example_number() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.example_number)
  return example_number_.GetNoArena();
}
void PhoneNumberDesc::set_example_number(const ::std::string& value) {
  set_has_example_number();
  example_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.example_number)
}
#if LANG_CXX11
void PhoneNumberDesc::set_example_number(::std::string&& value) {
  set_has_example_number();
  example_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneNumberDesc.example_number)
}
#endif
void PhoneNumberDesc::set_example_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_example_number();
  example_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneNumberDesc.example_number)
}
void PhoneNumberDesc::set_example_number(const char* value, size_t size) {
  set_has_example_number();
  example_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneNumberDesc.example_number)
}
::std::string* PhoneNumberDesc::mutable_example_number() {
  set_has_example_number();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumberDesc.example_number)
  return example_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneNumberDesc::release_example_number() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumberDesc.example_number)
  clear_has_example_number();
  return example_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneNumberDesc::set_allocated_example_number(::std::string* example_number) {
  if (example_number != NULL) {
    set_has_example_number();
  } else {
    clear_has_example_number();
  }
  example_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), example_number);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumberDesc.example_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhoneMetadata::kGeneralDescFieldNumber;
const int PhoneMetadata::kFixedLineFieldNumber;
const int PhoneMetadata::kMobileFieldNumber;
const int PhoneMetadata::kTollFreeFieldNumber;
const int PhoneMetadata::kPremiumRateFieldNumber;
const int PhoneMetadata::kSharedCostFieldNumber;
const int PhoneMetadata::kPersonalNumberFieldNumber;
const int PhoneMetadata::kVoipFieldNumber;
const int PhoneMetadata::kPagerFieldNumber;
const int PhoneMetadata::kUanFieldNumber;
const int PhoneMetadata::kEmergencyFieldNumber;
const int PhoneMetadata::kVoicemailFieldNumber;
const int PhoneMetadata::kShortCodeFieldNumber;
const int PhoneMetadata::kStandardRateFieldNumber;
const int PhoneMetadata::kCarrierSpecificFieldNumber;
const int PhoneMetadata::kNoInternationalDiallingFieldNumber;
const int PhoneMetadata::kIdFieldNumber;
const int PhoneMetadata::kCountryCodeFieldNumber;
const int PhoneMetadata::kInternationalPrefixFieldNumber;
const int PhoneMetadata::kPreferredInternationalPrefixFieldNumber;
const int PhoneMetadata::kNationalPrefixFieldNumber;
const int PhoneMetadata::kPreferredExtnPrefixFieldNumber;
const int PhoneMetadata::kNationalPrefixForParsingFieldNumber;
const int PhoneMetadata::kNationalPrefixTransformRuleFieldNumber;
const int PhoneMetadata::kSameMobileAndFixedLinePatternFieldNumber;
const int PhoneMetadata::kNumberFormatFieldNumber;
const int PhoneMetadata::kIntlNumberFormatFieldNumber;
const int PhoneMetadata::kMainCountryForCodeFieldNumber;
const int PhoneMetadata::kLeadingDigitsFieldNumber;
const int PhoneMetadata::kLeadingZeroPossibleFieldNumber;
const int PhoneMetadata::kMobileNumberPortableRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhoneMetadata::PhoneMetadata()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_phonemetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:i18n.phonenumbers.PhoneMetadata)
}
PhoneMetadata::PhoneMetadata(const PhoneMetadata& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      number_format_(from.number_format_),
      intl_number_format_(from.intl_number_format_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  international_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_international_prefix()) {
    international_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.international_prefix_);
  }
  national_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_national_prefix()) {
    national_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_);
  }
  preferred_extn_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preferred_extn_prefix()) {
    preferred_extn_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_extn_prefix_);
  }
  national_prefix_for_parsing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_national_prefix_for_parsing()) {
    national_prefix_for_parsing_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_for_parsing_);
  }
  national_prefix_transform_rule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_national_prefix_transform_rule()) {
    national_prefix_transform_rule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_transform_rule_);
  }
  preferred_international_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preferred_international_prefix()) {
    preferred_international_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_international_prefix_);
  }
  leading_digits_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leading_digits()) {
    leading_digits_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leading_digits_);
  }
  if (from.has_general_desc()) {
    general_desc_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.general_desc_);
  } else {
    general_desc_ = NULL;
  }
  if (from.has_fixed_line()) {
    fixed_line_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.fixed_line_);
  } else {
    fixed_line_ = NULL;
  }
  if (from.has_mobile()) {
    mobile_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.mobile_);
  } else {
    mobile_ = NULL;
  }
  if (from.has_toll_free()) {
    toll_free_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.toll_free_);
  } else {
    toll_free_ = NULL;
  }
  if (from.has_premium_rate()) {
    premium_rate_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.premium_rate_);
  } else {
    premium_rate_ = NULL;
  }
  if (from.has_shared_cost()) {
    shared_cost_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.shared_cost_);
  } else {
    shared_cost_ = NULL;
  }
  if (from.has_personal_number()) {
    personal_number_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.personal_number_);
  } else {
    personal_number_ = NULL;
  }
  if (from.has_voip()) {
    voip_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.voip_);
  } else {
    voip_ = NULL;
  }
  if (from.has_pager()) {
    pager_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.pager_);
  } else {
    pager_ = NULL;
  }
  if (from.has_no_international_dialling()) {
    no_international_dialling_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.no_international_dialling_);
  } else {
    no_international_dialling_ = NULL;
  }
  if (from.has_uan()) {
    uan_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.uan_);
  } else {
    uan_ = NULL;
  }
  if (from.has_emergency()) {
    emergency_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.emergency_);
  } else {
    emergency_ = NULL;
  }
  if (from.has_voicemail()) {
    voicemail_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.voicemail_);
  } else {
    voicemail_ = NULL;
  }
  if (from.has_short_code()) {
    short_code_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.short_code_);
  } else {
    short_code_ = NULL;
  }
  if (from.has_standard_rate()) {
    standard_rate_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.standard_rate_);
  } else {
    standard_rate_ = NULL;
  }
  if (from.has_carrier_specific()) {
    carrier_specific_ = new ::i18n::phonenumbers::PhoneNumberDesc(*from.carrier_specific_);
  } else {
    carrier_specific_ = NULL;
  }
  ::memcpy(&country_code_, &from.country_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&mobile_number_portable_region_) -
    reinterpret_cast<char*>(&country_code_)) + sizeof(mobile_number_portable_region_));
  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PhoneMetadata)
}

void PhoneMetadata::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  international_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_extn_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_prefix_for_parsing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_prefix_transform_rule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_international_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leading_digits_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&general_desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mobile_number_portable_region_) -
      reinterpret_cast<char*>(&general_desc_)) + sizeof(mobile_number_portable_region_));
}

PhoneMetadata::~PhoneMetadata() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.PhoneMetadata)
  SharedDtor();
}

void PhoneMetadata::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  international_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_extn_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_prefix_for_parsing_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_prefix_transform_rule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_international_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leading_digits_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete general_desc_;
  }
  if (this != internal_default_instance()) {
    delete fixed_line_;
  }
  if (this != internal_default_instance()) {
    delete mobile_;
  }
  if (this != internal_default_instance()) {
    delete toll_free_;
  }
  if (this != internal_default_instance()) {
    delete premium_rate_;
  }
  if (this != internal_default_instance()) {
    delete shared_cost_;
  }
  if (this != internal_default_instance()) {
    delete personal_number_;
  }
  if (this != internal_default_instance()) {
    delete voip_;
  }
  if (this != internal_default_instance()) {
    delete pager_;
  }
  if (this != internal_default_instance()) {
    delete no_international_dialling_;
  }
  if (this != internal_default_instance()) {
    delete uan_;
  }
  if (this != internal_default_instance()) {
    delete emergency_;
  }
  if (this != internal_default_instance()) {
    delete voicemail_;
  }
  if (this != internal_default_instance()) {
    delete short_code_;
  }
  if (this != internal_default_instance()) {
    delete standard_rate_;
  }
  if (this != internal_default_instance()) {
    delete carrier_specific_;
  }
}

void PhoneMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PhoneMetadata& PhoneMetadata::default_instance() {
  protobuf_phonemetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhoneMetadata* PhoneMetadata::New(::google::protobuf::Arena* arena) const {
  PhoneMetadata* n = new PhoneMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhoneMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PhoneMetadata)
  number_format_.Clear();
  intl_number_format_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_international_prefix()) {
      GOOGLE_DCHECK(!international_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*international_prefix_.UnsafeRawStringPointer())->clear();
    }
    if (has_national_prefix()) {
      GOOGLE_DCHECK(!national_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*national_prefix_.UnsafeRawStringPointer())->clear();
    }
    if (has_preferred_extn_prefix()) {
      GOOGLE_DCHECK(!preferred_extn_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preferred_extn_prefix_.UnsafeRawStringPointer())->clear();
    }
    if (has_national_prefix_for_parsing()) {
      GOOGLE_DCHECK(!national_prefix_for_parsing_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*national_prefix_for_parsing_.UnsafeRawStringPointer())->clear();
    }
    if (has_national_prefix_transform_rule()) {
      GOOGLE_DCHECK(!national_prefix_transform_rule_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*national_prefix_transform_rule_.UnsafeRawStringPointer())->clear();
    }
    if (has_preferred_international_prefix()) {
      GOOGLE_DCHECK(!preferred_international_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preferred_international_prefix_.UnsafeRawStringPointer())->clear();
    }
    if (has_leading_digits()) {
      GOOGLE_DCHECK(!leading_digits_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*leading_digits_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_general_desc()) {
      GOOGLE_DCHECK(general_desc_ != NULL);
      general_desc_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_fixed_line()) {
      GOOGLE_DCHECK(fixed_line_ != NULL);
      fixed_line_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_mobile()) {
      GOOGLE_DCHECK(mobile_ != NULL);
      mobile_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_toll_free()) {
      GOOGLE_DCHECK(toll_free_ != NULL);
      toll_free_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_premium_rate()) {
      GOOGLE_DCHECK(premium_rate_ != NULL);
      premium_rate_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_shared_cost()) {
      GOOGLE_DCHECK(shared_cost_ != NULL);
      shared_cost_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_personal_number()) {
      GOOGLE_DCHECK(personal_number_ != NULL);
      personal_number_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_voip()) {
      GOOGLE_DCHECK(voip_ != NULL);
      voip_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_pager()) {
      GOOGLE_DCHECK(pager_ != NULL);
      pager_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_no_international_dialling()) {
      GOOGLE_DCHECK(no_international_dialling_ != NULL);
      no_international_dialling_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_uan()) {
      GOOGLE_DCHECK(uan_ != NULL);
      uan_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_emergency()) {
      GOOGLE_DCHECK(emergency_ != NULL);
      emergency_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_voicemail()) {
      GOOGLE_DCHECK(voicemail_ != NULL);
      voicemail_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_short_code()) {
      GOOGLE_DCHECK(short_code_ != NULL);
      short_code_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_standard_rate()) {
      GOOGLE_DCHECK(standard_rate_ != NULL);
      standard_rate_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
    if (has_carrier_specific()) {
      GOOGLE_DCHECK(carrier_specific_ != NULL);
      carrier_specific_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 520093696u) {
    ::memset(&country_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mobile_number_portable_region_) -
        reinterpret_cast<char*>(&country_code_)) + sizeof(mobile_number_portable_region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PhoneMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:i18n.phonenumbers.PhoneMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_general_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toll_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_premium_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shared_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personal_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 country_code = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_country_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string international_prefix = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_international_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string national_prefix = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preferred_extn_prefix = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_extn_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string national_prefix_for_parsing = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national_prefix_for_parsing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string national_prefix_transform_rule = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national_prefix_transform_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preferred_international_prefix = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_international_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_same_mobile_and_fixed_line_pattern();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &same_mobile_and_fixed_line_pattern_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_number_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intl_number_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool main_country_for_code = 22 [default = false];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_main_country_for_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &main_country_for_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string leading_digits = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leading_digits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_no_international_dialling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool leading_zero_possible = 26 [default = false];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_leading_zero_possible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leading_zero_possible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emergency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voicemail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_short_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carrier_specific()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mobile_number_portable_region = 32 [default = false];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u)) {
          set_has_mobile_number_portable_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobile_number_portable_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:i18n.phonenumbers.PhoneMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:i18n.phonenumbers.PhoneMetadata)
  return false;
#undef DO_
}

void PhoneMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:i18n.phonenumbers.PhoneMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->general_desc_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->fixed_line_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->mobile_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->toll_free_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->premium_rate_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->shared_cost_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->personal_number_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->voip_, output);
  }

  // required string id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->id(), output);
  }

  // optional int32 country_code = 10;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->country_code(), output);
  }

  // optional string international_prefix = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->international_prefix(), output);
  }

  // optional string national_prefix = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->national_prefix(), output);
  }

  // optional string preferred_extn_prefix = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->preferred_extn_prefix(), output);
  }

  // optional string national_prefix_for_parsing = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->national_prefix_for_parsing(), output);
  }

  // optional string national_prefix_transform_rule = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->national_prefix_transform_rule(), output);
  }

  // optional string preferred_international_prefix = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->preferred_international_prefix(), output);
  }

  // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->same_mobile_and_fixed_line_pattern(), output);
  }

  // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->number_format_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->number_format(static_cast<int>(i)), output);
  }

  // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intl_number_format_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->intl_number_format(static_cast<int>(i)), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, *this->pager_, output);
  }

  // optional bool main_country_for_code = 22 [default = false];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->main_country_for_code(), output);
  }

  // optional string leading_digits = 23;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->leading_digits(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, *this->no_international_dialling_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, *this->uan_, output);
  }

  // optional bool leading_zero_possible = 26 [default = false];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->leading_zero_possible(), output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, *this->emergency_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, *this->voicemail_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, *this->short_code_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, *this->standard_rate_, output);
  }

  // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, *this->carrier_specific_, output);
  }

  // optional bool mobile_number_portable_region = 32 [default = false];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->mobile_number_portable_region(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:i18n.phonenumbers.PhoneMetadata)
}

size_t PhoneMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PhoneMetadata)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required string id = 9;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->number_format_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->number_format(static_cast<int>(i)));
    }
  }

  // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->intl_number_format_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intl_number_format(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional string international_prefix = 11;
    if (has_international_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->international_prefix());
    }

    // optional string national_prefix = 12;
    if (has_national_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->national_prefix());
    }

    // optional string preferred_extn_prefix = 13;
    if (has_preferred_extn_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_extn_prefix());
    }

    // optional string national_prefix_for_parsing = 15;
    if (has_national_prefix_for_parsing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->national_prefix_for_parsing());
    }

    // optional string national_prefix_transform_rule = 16;
    if (has_national_prefix_transform_rule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->national_prefix_transform_rule());
    }

    // optional string preferred_international_prefix = 17;
    if (has_preferred_international_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_international_prefix());
    }

    // optional string leading_digits = 23;
    if (has_leading_digits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leading_digits());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
    if (has_general_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->general_desc_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
    if (has_fixed_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fixed_line_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mobile_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
    if (has_toll_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->toll_free_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
    if (has_premium_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->premium_rate_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
    if (has_shared_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shared_cost_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
    if (has_personal_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->personal_number_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
    if (has_voip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->voip_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
    if (has_pager()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pager_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
    if (has_no_international_dialling()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->no_international_dialling_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
    if (has_uan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uan_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
    if (has_emergency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->emergency_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
    if (has_voicemail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->voicemail_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
    if (has_short_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->short_code_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
    if (has_standard_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->standard_rate_);
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
    if (has_carrier_specific()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->carrier_specific_);
    }

  }
  if (_has_bits_[24 / 32] & 520093696u) {
    // optional int32 country_code = 10;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country_code());
    }

    // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
    if (has_same_mobile_and_fixed_line_pattern()) {
      total_size += 2 + 1;
    }

    // optional bool main_country_for_code = 22 [default = false];
    if (has_main_country_for_code()) {
      total_size += 2 + 1;
    }

    // optional bool leading_zero_possible = 26 [default = false];
    if (has_leading_zero_possible()) {
      total_size += 2 + 1;
    }

    // optional bool mobile_number_portable_region = 32 [default = false];
    if (has_mobile_number_portable_region()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PhoneMetadata*>(&from));
}

void PhoneMetadata::MergeFrom(const PhoneMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PhoneMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  number_format_.MergeFrom(from.number_format_);
  intl_number_format_.MergeFrom(from.intl_number_format_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_international_prefix();
      international_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.international_prefix_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_national_prefix();
      national_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_preferred_extn_prefix();
      preferred_extn_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_extn_prefix_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_national_prefix_for_parsing();
      national_prefix_for_parsing_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_for_parsing_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_national_prefix_transform_rule();
      national_prefix_transform_rule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_transform_rule_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_preferred_international_prefix();
      preferred_international_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_international_prefix_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_leading_digits();
      leading_digits_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leading_digits_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_general_desc()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.general_desc());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_fixed_line()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.fixed_line());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_mobile()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.mobile());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_toll_free()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.toll_free());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_premium_rate()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.premium_rate());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_shared_cost()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.shared_cost());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_personal_number()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.personal_number());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_voip()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.voip());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_pager()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.pager());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_no_international_dialling()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.no_international_dialling());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_uan()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.uan());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_emergency()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.emergency());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_voicemail()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.voicemail());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_short_code()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.short_code());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_standard_rate()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.standard_rate());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_carrier_specific()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.carrier_specific());
    }
  }
  if (cached_has_bits & 520093696u) {
    if (cached_has_bits & 0x01000000u) {
      country_code_ = from.country_code_;
    }
    if (cached_has_bits & 0x02000000u) {
      same_mobile_and_fixed_line_pattern_ = from.same_mobile_and_fixed_line_pattern_;
    }
    if (cached_has_bits & 0x04000000u) {
      main_country_for_code_ = from.main_country_for_code_;
    }
    if (cached_has_bits & 0x08000000u) {
      leading_zero_possible_ = from.leading_zero_possible_;
    }
    if (cached_has_bits & 0x10000000u) {
      mobile_number_portable_region_ = from.mobile_number_portable_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PhoneMetadata::CopyFrom(const PhoneMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PhoneMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->number_format())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->intl_number_format())) return false;
  return true;
}

void PhoneMetadata::Swap(PhoneMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhoneMetadata::InternalSwap(PhoneMetadata* other) {
  number_format_.InternalSwap(&other->number_format_);
  intl_number_format_.InternalSwap(&other->intl_number_format_);
  id_.Swap(&other->id_);
  international_prefix_.Swap(&other->international_prefix_);
  national_prefix_.Swap(&other->national_prefix_);
  preferred_extn_prefix_.Swap(&other->preferred_extn_prefix_);
  national_prefix_for_parsing_.Swap(&other->national_prefix_for_parsing_);
  national_prefix_transform_rule_.Swap(&other->national_prefix_transform_rule_);
  preferred_international_prefix_.Swap(&other->preferred_international_prefix_);
  leading_digits_.Swap(&other->leading_digits_);
  std::swap(general_desc_, other->general_desc_);
  std::swap(fixed_line_, other->fixed_line_);
  std::swap(mobile_, other->mobile_);
  std::swap(toll_free_, other->toll_free_);
  std::swap(premium_rate_, other->premium_rate_);
  std::swap(shared_cost_, other->shared_cost_);
  std::swap(personal_number_, other->personal_number_);
  std::swap(voip_, other->voip_);
  std::swap(pager_, other->pager_);
  std::swap(no_international_dialling_, other->no_international_dialling_);
  std::swap(uan_, other->uan_);
  std::swap(emergency_, other->emergency_);
  std::swap(voicemail_, other->voicemail_);
  std::swap(short_code_, other->short_code_);
  std::swap(standard_rate_, other->standard_rate_);
  std::swap(carrier_specific_, other->carrier_specific_);
  std::swap(country_code_, other->country_code_);
  std::swap(same_mobile_and_fixed_line_pattern_, other->same_mobile_and_fixed_line_pattern_);
  std::swap(main_country_for_code_, other->main_country_for_code_);
  std::swap(leading_zero_possible_, other->leading_zero_possible_);
  std::swap(mobile_number_portable_region_, other->mobile_number_portable_region_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PhoneMetadata::GetTypeName() const {
  return "i18n.phonenumbers.PhoneMetadata";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhoneMetadata

// optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
bool PhoneMetadata::has_general_desc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PhoneMetadata::set_has_general_desc() {
  _has_bits_[0] |= 0x00000100u;
}
void PhoneMetadata::clear_has_general_desc() {
  _has_bits_[0] &= ~0x00000100u;
}
void PhoneMetadata::clear_general_desc() {
  if (general_desc_ != NULL) general_desc_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_general_desc();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::general_desc() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.general_desc)
  return general_desc_ != NULL ? *general_desc_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_general_desc() {
  set_has_general_desc();
  if (general_desc_ == NULL) {
    general_desc_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.general_desc)
  return general_desc_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_general_desc() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.general_desc)
  clear_has_general_desc();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = general_desc_;
  general_desc_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_general_desc(::i18n::phonenumbers::PhoneNumberDesc* general_desc) {
  delete general_desc_;
  general_desc_ = general_desc;
  if (general_desc) {
    set_has_general_desc();
  } else {
    clear_has_general_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.general_desc)
}

// optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
bool PhoneMetadata::has_fixed_line() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PhoneMetadata::set_has_fixed_line() {
  _has_bits_[0] |= 0x00000200u;
}
void PhoneMetadata::clear_has_fixed_line() {
  _has_bits_[0] &= ~0x00000200u;
}
void PhoneMetadata::clear_fixed_line() {
  if (fixed_line_ != NULL) fixed_line_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_fixed_line();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::fixed_line() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.fixed_line)
  return fixed_line_ != NULL ? *fixed_line_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_fixed_line() {
  set_has_fixed_line();
  if (fixed_line_ == NULL) {
    fixed_line_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.fixed_line)
  return fixed_line_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_fixed_line() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.fixed_line)
  clear_has_fixed_line();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = fixed_line_;
  fixed_line_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_fixed_line(::i18n::phonenumbers::PhoneNumberDesc* fixed_line) {
  delete fixed_line_;
  fixed_line_ = fixed_line;
  if (fixed_line) {
    set_has_fixed_line();
  } else {
    clear_has_fixed_line();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.fixed_line)
}

// optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
bool PhoneMetadata::has_mobile() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PhoneMetadata::set_has_mobile() {
  _has_bits_[0] |= 0x00000400u;
}
void PhoneMetadata::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000400u;
}
void PhoneMetadata::clear_mobile() {
  if (mobile_ != NULL) mobile_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_mobile();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::mobile() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.mobile)
  return mobile_ != NULL ? *mobile_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == NULL) {
    mobile_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.mobile)
  return mobile_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_mobile() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.mobile)
  clear_has_mobile();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = mobile_;
  mobile_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_mobile(::i18n::phonenumbers::PhoneNumberDesc* mobile) {
  delete mobile_;
  mobile_ = mobile;
  if (mobile) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.mobile)
}

// optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
bool PhoneMetadata::has_toll_free() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PhoneMetadata::set_has_toll_free() {
  _has_bits_[0] |= 0x00000800u;
}
void PhoneMetadata::clear_has_toll_free() {
  _has_bits_[0] &= ~0x00000800u;
}
void PhoneMetadata::clear_toll_free() {
  if (toll_free_ != NULL) toll_free_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_toll_free();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::toll_free() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.toll_free)
  return toll_free_ != NULL ? *toll_free_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_toll_free() {
  set_has_toll_free();
  if (toll_free_ == NULL) {
    toll_free_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.toll_free)
  return toll_free_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_toll_free() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.toll_free)
  clear_has_toll_free();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = toll_free_;
  toll_free_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_toll_free(::i18n::phonenumbers::PhoneNumberDesc* toll_free) {
  delete toll_free_;
  toll_free_ = toll_free;
  if (toll_free) {
    set_has_toll_free();
  } else {
    clear_has_toll_free();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.toll_free)
}

// optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
bool PhoneMetadata::has_premium_rate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PhoneMetadata::set_has_premium_rate() {
  _has_bits_[0] |= 0x00001000u;
}
void PhoneMetadata::clear_has_premium_rate() {
  _has_bits_[0] &= ~0x00001000u;
}
void PhoneMetadata::clear_premium_rate() {
  if (premium_rate_ != NULL) premium_rate_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_premium_rate();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::premium_rate() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.premium_rate)
  return premium_rate_ != NULL ? *premium_rate_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_premium_rate() {
  set_has_premium_rate();
  if (premium_rate_ == NULL) {
    premium_rate_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.premium_rate)
  return premium_rate_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_premium_rate() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.premium_rate)
  clear_has_premium_rate();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = premium_rate_;
  premium_rate_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_premium_rate(::i18n::phonenumbers::PhoneNumberDesc* premium_rate) {
  delete premium_rate_;
  premium_rate_ = premium_rate;
  if (premium_rate) {
    set_has_premium_rate();
  } else {
    clear_has_premium_rate();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.premium_rate)
}

// optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
bool PhoneMetadata::has_shared_cost() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PhoneMetadata::set_has_shared_cost() {
  _has_bits_[0] |= 0x00002000u;
}
void PhoneMetadata::clear_has_shared_cost() {
  _has_bits_[0] &= ~0x00002000u;
}
void PhoneMetadata::clear_shared_cost() {
  if (shared_cost_ != NULL) shared_cost_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_shared_cost();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::shared_cost() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.shared_cost)
  return shared_cost_ != NULL ? *shared_cost_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_shared_cost() {
  set_has_shared_cost();
  if (shared_cost_ == NULL) {
    shared_cost_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.shared_cost)
  return shared_cost_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_shared_cost() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.shared_cost)
  clear_has_shared_cost();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = shared_cost_;
  shared_cost_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_shared_cost(::i18n::phonenumbers::PhoneNumberDesc* shared_cost) {
  delete shared_cost_;
  shared_cost_ = shared_cost;
  if (shared_cost) {
    set_has_shared_cost();
  } else {
    clear_has_shared_cost();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.shared_cost)
}

// optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
bool PhoneMetadata::has_personal_number() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PhoneMetadata::set_has_personal_number() {
  _has_bits_[0] |= 0x00004000u;
}
void PhoneMetadata::clear_has_personal_number() {
  _has_bits_[0] &= ~0x00004000u;
}
void PhoneMetadata::clear_personal_number() {
  if (personal_number_ != NULL) personal_number_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_personal_number();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::personal_number() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.personal_number)
  return personal_number_ != NULL ? *personal_number_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_personal_number() {
  set_has_personal_number();
  if (personal_number_ == NULL) {
    personal_number_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.personal_number)
  return personal_number_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_personal_number() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.personal_number)
  clear_has_personal_number();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = personal_number_;
  personal_number_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_personal_number(::i18n::phonenumbers::PhoneNumberDesc* personal_number) {
  delete personal_number_;
  personal_number_ = personal_number;
  if (personal_number) {
    set_has_personal_number();
  } else {
    clear_has_personal_number();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.personal_number)
}

// optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
bool PhoneMetadata::has_voip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PhoneMetadata::set_has_voip() {
  _has_bits_[0] |= 0x00008000u;
}
void PhoneMetadata::clear_has_voip() {
  _has_bits_[0] &= ~0x00008000u;
}
void PhoneMetadata::clear_voip() {
  if (voip_ != NULL) voip_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_voip();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::voip() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.voip)
  return voip_ != NULL ? *voip_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_voip() {
  set_has_voip();
  if (voip_ == NULL) {
    voip_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.voip)
  return voip_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_voip() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.voip)
  clear_has_voip();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = voip_;
  voip_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_voip(::i18n::phonenumbers::PhoneNumberDesc* voip) {
  delete voip_;
  voip_ = voip;
  if (voip) {
    set_has_voip();
  } else {
    clear_has_voip();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.voip)
}

// optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
bool PhoneMetadata::has_pager() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PhoneMetadata::set_has_pager() {
  _has_bits_[0] |= 0x00010000u;
}
void PhoneMetadata::clear_has_pager() {
  _has_bits_[0] &= ~0x00010000u;
}
void PhoneMetadata::clear_pager() {
  if (pager_ != NULL) pager_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_pager();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::pager() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.pager)
  return pager_ != NULL ? *pager_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_pager() {
  set_has_pager();
  if (pager_ == NULL) {
    pager_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.pager)
  return pager_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_pager() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.pager)
  clear_has_pager();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = pager_;
  pager_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_pager(::i18n::phonenumbers::PhoneNumberDesc* pager) {
  delete pager_;
  pager_ = pager;
  if (pager) {
    set_has_pager();
  } else {
    clear_has_pager();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.pager)
}

// optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
bool PhoneMetadata::has_uan() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PhoneMetadata::set_has_uan() {
  _has_bits_[0] |= 0x00040000u;
}
void PhoneMetadata::clear_has_uan() {
  _has_bits_[0] &= ~0x00040000u;
}
void PhoneMetadata::clear_uan() {
  if (uan_ != NULL) uan_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_uan();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::uan() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.uan)
  return uan_ != NULL ? *uan_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_uan() {
  set_has_uan();
  if (uan_ == NULL) {
    uan_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.uan)
  return uan_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_uan() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.uan)
  clear_has_uan();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = uan_;
  uan_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_uan(::i18n::phonenumbers::PhoneNumberDesc* uan) {
  delete uan_;
  uan_ = uan;
  if (uan) {
    set_has_uan();
  } else {
    clear_has_uan();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.uan)
}

// optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
bool PhoneMetadata::has_emergency() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PhoneMetadata::set_has_emergency() {
  _has_bits_[0] |= 0x00080000u;
}
void PhoneMetadata::clear_has_emergency() {
  _has_bits_[0] &= ~0x00080000u;
}
void PhoneMetadata::clear_emergency() {
  if (emergency_ != NULL) emergency_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_emergency();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::emergency() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.emergency)
  return emergency_ != NULL ? *emergency_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_emergency() {
  set_has_emergency();
  if (emergency_ == NULL) {
    emergency_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.emergency)
  return emergency_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_emergency() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.emergency)
  clear_has_emergency();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = emergency_;
  emergency_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_emergency(::i18n::phonenumbers::PhoneNumberDesc* emergency) {
  delete emergency_;
  emergency_ = emergency;
  if (emergency) {
    set_has_emergency();
  } else {
    clear_has_emergency();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.emergency)
}

// optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
bool PhoneMetadata::has_voicemail() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PhoneMetadata::set_has_voicemail() {
  _has_bits_[0] |= 0x00100000u;
}
void PhoneMetadata::clear_has_voicemail() {
  _has_bits_[0] &= ~0x00100000u;
}
void PhoneMetadata::clear_voicemail() {
  if (voicemail_ != NULL) voicemail_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_voicemail();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::voicemail() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.voicemail)
  return voicemail_ != NULL ? *voicemail_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_voicemail() {
  set_has_voicemail();
  if (voicemail_ == NULL) {
    voicemail_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.voicemail)
  return voicemail_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_voicemail() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.voicemail)
  clear_has_voicemail();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = voicemail_;
  voicemail_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_voicemail(::i18n::phonenumbers::PhoneNumberDesc* voicemail) {
  delete voicemail_;
  voicemail_ = voicemail;
  if (voicemail) {
    set_has_voicemail();
  } else {
    clear_has_voicemail();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.voicemail)
}

// optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
bool PhoneMetadata::has_short_code() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PhoneMetadata::set_has_short_code() {
  _has_bits_[0] |= 0x00200000u;
}
void PhoneMetadata::clear_has_short_code() {
  _has_bits_[0] &= ~0x00200000u;
}
void PhoneMetadata::clear_short_code() {
  if (short_code_ != NULL) short_code_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_short_code();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::short_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.short_code)
  return short_code_ != NULL ? *short_code_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_short_code() {
  set_has_short_code();
  if (short_code_ == NULL) {
    short_code_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.short_code)
  return short_code_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_short_code() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.short_code)
  clear_has_short_code();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = short_code_;
  short_code_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_short_code(::i18n::phonenumbers::PhoneNumberDesc* short_code) {
  delete short_code_;
  short_code_ = short_code;
  if (short_code) {
    set_has_short_code();
  } else {
    clear_has_short_code();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.short_code)
}

// optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
bool PhoneMetadata::has_standard_rate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PhoneMetadata::set_has_standard_rate() {
  _has_bits_[0] |= 0x00400000u;
}
void PhoneMetadata::clear_has_standard_rate() {
  _has_bits_[0] &= ~0x00400000u;
}
void PhoneMetadata::clear_standard_rate() {
  if (standard_rate_ != NULL) standard_rate_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_standard_rate();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::standard_rate() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.standard_rate)
  return standard_rate_ != NULL ? *standard_rate_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_standard_rate() {
  set_has_standard_rate();
  if (standard_rate_ == NULL) {
    standard_rate_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.standard_rate)
  return standard_rate_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_standard_rate() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.standard_rate)
  clear_has_standard_rate();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = standard_rate_;
  standard_rate_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_standard_rate(::i18n::phonenumbers::PhoneNumberDesc* standard_rate) {
  delete standard_rate_;
  standard_rate_ = standard_rate;
  if (standard_rate) {
    set_has_standard_rate();
  } else {
    clear_has_standard_rate();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.standard_rate)
}

// optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
bool PhoneMetadata::has_carrier_specific() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PhoneMetadata::set_has_carrier_specific() {
  _has_bits_[0] |= 0x00800000u;
}
void PhoneMetadata::clear_has_carrier_specific() {
  _has_bits_[0] &= ~0x00800000u;
}
void PhoneMetadata::clear_carrier_specific() {
  if (carrier_specific_ != NULL) carrier_specific_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_carrier_specific();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::carrier_specific() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.carrier_specific)
  return carrier_specific_ != NULL ? *carrier_specific_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_carrier_specific() {
  set_has_carrier_specific();
  if (carrier_specific_ == NULL) {
    carrier_specific_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.carrier_specific)
  return carrier_specific_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_carrier_specific() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.carrier_specific)
  clear_has_carrier_specific();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = carrier_specific_;
  carrier_specific_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_carrier_specific(::i18n::phonenumbers::PhoneNumberDesc* carrier_specific) {
  delete carrier_specific_;
  carrier_specific_ = carrier_specific;
  if (carrier_specific) {
    set_has_carrier_specific();
  } else {
    clear_has_carrier_specific();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.carrier_specific)
}

// optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
bool PhoneMetadata::has_no_international_dialling() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PhoneMetadata::set_has_no_international_dialling() {
  _has_bits_[0] |= 0x00020000u;
}
void PhoneMetadata::clear_has_no_international_dialling() {
  _has_bits_[0] &= ~0x00020000u;
}
void PhoneMetadata::clear_no_international_dialling() {
  if (no_international_dialling_ != NULL) no_international_dialling_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
  clear_has_no_international_dialling();
}
const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::no_international_dialling() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
  return no_international_dialling_ != NULL ? *no_international_dialling_
                         : *::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance();
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_no_international_dialling() {
  set_has_no_international_dialling();
  if (no_international_dialling_ == NULL) {
    no_international_dialling_ = new ::i18n::phonenumbers::PhoneNumberDesc;
  }
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
  return no_international_dialling_;
}
::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_no_international_dialling() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
  clear_has_no_international_dialling();
  ::i18n::phonenumbers::PhoneNumberDesc* temp = no_international_dialling_;
  no_international_dialling_ = NULL;
  return temp;
}
void PhoneMetadata::set_allocated_no_international_dialling(::i18n::phonenumbers::PhoneNumberDesc* no_international_dialling) {
  delete no_international_dialling_;
  no_international_dialling_ = no_international_dialling;
  if (no_international_dialling) {
    set_has_no_international_dialling();
  } else {
    clear_has_no_international_dialling();
  }
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
}

// required string id = 9;
bool PhoneMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PhoneMetadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PhoneMetadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PhoneMetadata::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& PhoneMetadata::id() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.id)
  return id_.GetNoArena();
}
void PhoneMetadata::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.id)
}
#if LANG_CXX11
void PhoneMetadata::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneMetadata.id)
}
#endif
void PhoneMetadata::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.id)
}
void PhoneMetadata::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.id)
}
::std::string* PhoneMetadata::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneMetadata::release_id() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneMetadata::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.id)
}

// optional int32 country_code = 10;
bool PhoneMetadata::has_country_code() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void PhoneMetadata::set_has_country_code() {
  _has_bits_[0] |= 0x01000000u;
}
void PhoneMetadata::clear_has_country_code() {
  _has_bits_[0] &= ~0x01000000u;
}
void PhoneMetadata::clear_country_code() {
  country_code_ = 0;
  clear_has_country_code();
}
::google::protobuf::int32 PhoneMetadata::country_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.country_code)
  return country_code_;
}
void PhoneMetadata::set_country_code(::google::protobuf::int32 value) {
  set_has_country_code();
  country_code_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.country_code)
}

// optional string international_prefix = 11;
bool PhoneMetadata::has_international_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PhoneMetadata::set_has_international_prefix() {
  _has_bits_[0] |= 0x00000002u;
}
void PhoneMetadata::clear_has_international_prefix() {
  _has_bits_[0] &= ~0x00000002u;
}
void PhoneMetadata::clear_international_prefix() {
  international_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_international_prefix();
}
const ::std::string& PhoneMetadata::international_prefix() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.international_prefix)
  return international_prefix_.GetNoArena();
}
void PhoneMetadata::set_international_prefix(const ::std::string& value) {
  set_has_international_prefix();
  international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.international_prefix)
}
#if LANG_CXX11
void PhoneMetadata::set_international_prefix(::std::string&& value) {
  set_has_international_prefix();
  international_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneMetadata.international_prefix)
}
#endif
void PhoneMetadata::set_international_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_international_prefix();
  international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.international_prefix)
}
void PhoneMetadata::set_international_prefix(const char* value, size_t size) {
  set_has_international_prefix();
  international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.international_prefix)
}
::std::string* PhoneMetadata::mutable_international_prefix() {
  set_has_international_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.international_prefix)
  return international_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneMetadata::release_international_prefix() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.international_prefix)
  clear_has_international_prefix();
  return international_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneMetadata::set_allocated_international_prefix(::std::string* international_prefix) {
  if (international_prefix != NULL) {
    set_has_international_prefix();
  } else {
    clear_has_international_prefix();
  }
  international_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), international_prefix);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.international_prefix)
}

// optional string preferred_international_prefix = 17;
bool PhoneMetadata::has_preferred_international_prefix() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PhoneMetadata::set_has_preferred_international_prefix() {
  _has_bits_[0] |= 0x00000040u;
}
void PhoneMetadata::clear_has_preferred_international_prefix() {
  _has_bits_[0] &= ~0x00000040u;
}
void PhoneMetadata::clear_preferred_international_prefix() {
  preferred_international_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preferred_international_prefix();
}
const ::std::string& PhoneMetadata::preferred_international_prefix() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
  return preferred_international_prefix_.GetNoArena();
}
void PhoneMetadata::set_preferred_international_prefix(const ::std::string& value) {
  set_has_preferred_international_prefix();
  preferred_international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
}
#if LANG_CXX11
void PhoneMetadata::set_preferred_international_prefix(::std::string&& value) {
  set_has_preferred_international_prefix();
  preferred_international_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
}
#endif
void PhoneMetadata::set_preferred_international_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preferred_international_prefix();
  preferred_international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
}
void PhoneMetadata::set_preferred_international_prefix(const char* value, size_t size) {
  set_has_preferred_international_prefix();
  preferred_international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
}
::std::string* PhoneMetadata::mutable_preferred_international_prefix() {
  set_has_preferred_international_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
  return preferred_international_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneMetadata::release_preferred_international_prefix() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
  clear_has_preferred_international_prefix();
  return preferred_international_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneMetadata::set_allocated_preferred_international_prefix(::std::string* preferred_international_prefix) {
  if (preferred_international_prefix != NULL) {
    set_has_preferred_international_prefix();
  } else {
    clear_has_preferred_international_prefix();
  }
  preferred_international_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_international_prefix);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
}

// optional string national_prefix = 12;
bool PhoneMetadata::has_national_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PhoneMetadata::set_has_national_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
void PhoneMetadata::clear_has_national_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
void PhoneMetadata::clear_national_prefix() {
  national_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_national_prefix();
}
const ::std::string& PhoneMetadata::national_prefix() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix)
  return national_prefix_.GetNoArena();
}
void PhoneMetadata::set_national_prefix(const ::std::string& value) {
  set_has_national_prefix();
  national_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix)
}
#if LANG_CXX11
void PhoneMetadata::set_national_prefix(::std::string&& value) {
  set_has_national_prefix();
  national_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneMetadata.national_prefix)
}
#endif
void PhoneMetadata::set_national_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_national_prefix();
  national_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.national_prefix)
}
void PhoneMetadata::set_national_prefix(const char* value, size_t size) {
  set_has_national_prefix();
  national_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.national_prefix)
}
::std::string* PhoneMetadata::mutable_national_prefix() {
  set_has_national_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix)
  return national_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneMetadata::release_national_prefix() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix)
  clear_has_national_prefix();
  return national_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneMetadata::set_allocated_national_prefix(::std::string* national_prefix) {
  if (national_prefix != NULL) {
    set_has_national_prefix();
  } else {
    clear_has_national_prefix();
  }
  national_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national_prefix);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix)
}

// optional string preferred_extn_prefix = 13;
bool PhoneMetadata::has_preferred_extn_prefix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PhoneMetadata::set_has_preferred_extn_prefix() {
  _has_bits_[0] |= 0x00000008u;
}
void PhoneMetadata::clear_has_preferred_extn_prefix() {
  _has_bits_[0] &= ~0x00000008u;
}
void PhoneMetadata::clear_preferred_extn_prefix() {
  preferred_extn_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preferred_extn_prefix();
}
const ::std::string& PhoneMetadata::preferred_extn_prefix() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
  return preferred_extn_prefix_.GetNoArena();
}
void PhoneMetadata::set_preferred_extn_prefix(const ::std::string& value) {
  set_has_preferred_extn_prefix();
  preferred_extn_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
}
#if LANG_CXX11
void PhoneMetadata::set_preferred_extn_prefix(::std::string&& value) {
  set_has_preferred_extn_prefix();
  preferred_extn_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
}
#endif
void PhoneMetadata::set_preferred_extn_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preferred_extn_prefix();
  preferred_extn_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
}
void PhoneMetadata::set_preferred_extn_prefix(const char* value, size_t size) {
  set_has_preferred_extn_prefix();
  preferred_extn_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
}
::std::string* PhoneMetadata::mutable_preferred_extn_prefix() {
  set_has_preferred_extn_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
  return preferred_extn_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneMetadata::release_preferred_extn_prefix() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
  clear_has_preferred_extn_prefix();
  return preferred_extn_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneMetadata::set_allocated_preferred_extn_prefix(::std::string* preferred_extn_prefix) {
  if (preferred_extn_prefix != NULL) {
    set_has_preferred_extn_prefix();
  } else {
    clear_has_preferred_extn_prefix();
  }
  preferred_extn_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_extn_prefix);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
}

// optional string national_prefix_for_parsing = 15;
bool PhoneMetadata::has_national_prefix_for_parsing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PhoneMetadata::set_has_national_prefix_for_parsing() {
  _has_bits_[0] |= 0x00000010u;
}
void PhoneMetadata::clear_has_national_prefix_for_parsing() {
  _has_bits_[0] &= ~0x00000010u;
}
void PhoneMetadata::clear_national_prefix_for_parsing() {
  national_prefix_for_parsing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_national_prefix_for_parsing();
}
const ::std::string& PhoneMetadata::national_prefix_for_parsing() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
  return national_prefix_for_parsing_.GetNoArena();
}
void PhoneMetadata::set_national_prefix_for_parsing(const ::std::string& value) {
  set_has_national_prefix_for_parsing();
  national_prefix_for_parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
}
#if LANG_CXX11
void PhoneMetadata::set_national_prefix_for_parsing(::std::string&& value) {
  set_has_national_prefix_for_parsing();
  national_prefix_for_parsing_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
}
#endif
void PhoneMetadata::set_national_prefix_for_parsing(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_national_prefix_for_parsing();
  national_prefix_for_parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
}
void PhoneMetadata::set_national_prefix_for_parsing(const char* value, size_t size) {
  set_has_national_prefix_for_parsing();
  national_prefix_for_parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
}
::std::string* PhoneMetadata::mutable_national_prefix_for_parsing() {
  set_has_national_prefix_for_parsing();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
  return national_prefix_for_parsing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneMetadata::release_national_prefix_for_parsing() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
  clear_has_national_prefix_for_parsing();
  return national_prefix_for_parsing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneMetadata::set_allocated_national_prefix_for_parsing(::std::string* national_prefix_for_parsing) {
  if (national_prefix_for_parsing != NULL) {
    set_has_national_prefix_for_parsing();
  } else {
    clear_has_national_prefix_for_parsing();
  }
  national_prefix_for_parsing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national_prefix_for_parsing);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
}

// optional string national_prefix_transform_rule = 16;
bool PhoneMetadata::has_national_prefix_transform_rule() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PhoneMetadata::set_has_national_prefix_transform_rule() {
  _has_bits_[0] |= 0x00000020u;
}
void PhoneMetadata::clear_has_national_prefix_transform_rule() {
  _has_bits_[0] &= ~0x00000020u;
}
void PhoneMetadata::clear_national_prefix_transform_rule() {
  national_prefix_transform_rule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_national_prefix_transform_rule();
}
const ::std::string& PhoneMetadata::national_prefix_transform_rule() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
  return national_prefix_transform_rule_.GetNoArena();
}
void PhoneMetadata::set_national_prefix_transform_rule(const ::std::string& value) {
  set_has_national_prefix_transform_rule();
  national_prefix_transform_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
}
#if LANG_CXX11
void PhoneMetadata::set_national_prefix_transform_rule(::std::string&& value) {
  set_has_national_prefix_transform_rule();
  national_prefix_transform_rule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
}
#endif
void PhoneMetadata::set_national_prefix_transform_rule(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_national_prefix_transform_rule();
  national_prefix_transform_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
}
void PhoneMetadata::set_national_prefix_transform_rule(const char* value, size_t size) {
  set_has_national_prefix_transform_rule();
  national_prefix_transform_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
}
::std::string* PhoneMetadata::mutable_national_prefix_transform_rule() {
  set_has_national_prefix_transform_rule();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
  return national_prefix_transform_rule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneMetadata::release_national_prefix_transform_rule() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
  clear_has_national_prefix_transform_rule();
  return national_prefix_transform_rule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneMetadata::set_allocated_national_prefix_transform_rule(::std::string* national_prefix_transform_rule) {
  if (national_prefix_transform_rule != NULL) {
    set_has_national_prefix_transform_rule();
  } else {
    clear_has_national_prefix_transform_rule();
  }
  national_prefix_transform_rule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national_prefix_transform_rule);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
}

// optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
bool PhoneMetadata::has_same_mobile_and_fixed_line_pattern() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void PhoneMetadata::set_has_same_mobile_and_fixed_line_pattern() {
  _has_bits_[0] |= 0x02000000u;
}
void PhoneMetadata::clear_has_same_mobile_and_fixed_line_pattern() {
  _has_bits_[0] &= ~0x02000000u;
}
void PhoneMetadata::clear_same_mobile_and_fixed_line_pattern() {
  same_mobile_and_fixed_line_pattern_ = false;
  clear_has_same_mobile_and_fixed_line_pattern();
}
bool PhoneMetadata::same_mobile_and_fixed_line_pattern() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.same_mobile_and_fixed_line_pattern)
  return same_mobile_and_fixed_line_pattern_;
}
void PhoneMetadata::set_same_mobile_and_fixed_line_pattern(bool value) {
  set_has_same_mobile_and_fixed_line_pattern();
  same_mobile_and_fixed_line_pattern_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.same_mobile_and_fixed_line_pattern)
}

// repeated .i18n.phonenumbers.NumberFormat number_format = 19;
int PhoneMetadata::number_format_size() const {
  return number_format_.size();
}
void PhoneMetadata::clear_number_format() {
  number_format_.Clear();
}
const ::i18n::phonenumbers::NumberFormat& PhoneMetadata::number_format(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.number_format)
  return number_format_.Get(index);
}
::i18n::phonenumbers::NumberFormat* PhoneMetadata::mutable_number_format(int index) {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.number_format)
  return number_format_.Mutable(index);
}
::i18n::phonenumbers::NumberFormat* PhoneMetadata::add_number_format() {
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadata.number_format)
  return number_format_.Add();
}
::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >*
PhoneMetadata::mutable_number_format() {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadata.number_format)
  return &number_format_;
}
const ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >&
PhoneMetadata::number_format() const {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadata.number_format)
  return number_format_;
}

// repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
int PhoneMetadata::intl_number_format_size() const {
  return intl_number_format_.size();
}
void PhoneMetadata::clear_intl_number_format() {
  intl_number_format_.Clear();
}
const ::i18n::phonenumbers::NumberFormat& PhoneMetadata::intl_number_format(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return intl_number_format_.Get(index);
}
::i18n::phonenumbers::NumberFormat* PhoneMetadata::mutable_intl_number_format(int index) {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return intl_number_format_.Mutable(index);
}
::i18n::phonenumbers::NumberFormat* PhoneMetadata::add_intl_number_format() {
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return intl_number_format_.Add();
}
::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >*
PhoneMetadata::mutable_intl_number_format() {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return &intl_number_format_;
}
const ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >&
PhoneMetadata::intl_number_format() const {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return intl_number_format_;
}

// optional bool main_country_for_code = 22 [default = false];
bool PhoneMetadata::has_main_country_for_code() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void PhoneMetadata::set_has_main_country_for_code() {
  _has_bits_[0] |= 0x04000000u;
}
void PhoneMetadata::clear_has_main_country_for_code() {
  _has_bits_[0] &= ~0x04000000u;
}
void PhoneMetadata::clear_main_country_for_code() {
  main_country_for_code_ = false;
  clear_has_main_country_for_code();
}
bool PhoneMetadata::main_country_for_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.main_country_for_code)
  return main_country_for_code_;
}
void PhoneMetadata::set_main_country_for_code(bool value) {
  set_has_main_country_for_code();
  main_country_for_code_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.main_country_for_code)
}

// optional string leading_digits = 23;
bool PhoneMetadata::has_leading_digits() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PhoneMetadata::set_has_leading_digits() {
  _has_bits_[0] |= 0x00000080u;
}
void PhoneMetadata::clear_has_leading_digits() {
  _has_bits_[0] &= ~0x00000080u;
}
void PhoneMetadata::clear_leading_digits() {
  leading_digits_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leading_digits();
}
const ::std::string& PhoneMetadata::leading_digits() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.leading_digits)
  return leading_digits_.GetNoArena();
}
void PhoneMetadata::set_leading_digits(const ::std::string& value) {
  set_has_leading_digits();
  leading_digits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.leading_digits)
}
#if LANG_CXX11
void PhoneMetadata::set_leading_digits(::std::string&& value) {
  set_has_leading_digits();
  leading_digits_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneMetadata.leading_digits)
}
#endif
void PhoneMetadata::set_leading_digits(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leading_digits();
  leading_digits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.leading_digits)
}
void PhoneMetadata::set_leading_digits(const char* value, size_t size) {
  set_has_leading_digits();
  leading_digits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.leading_digits)
}
::std::string* PhoneMetadata::mutable_leading_digits() {
  set_has_leading_digits();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.leading_digits)
  return leading_digits_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneMetadata::release_leading_digits() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.leading_digits)
  clear_has_leading_digits();
  return leading_digits_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneMetadata::set_allocated_leading_digits(::std::string* leading_digits) {
  if (leading_digits != NULL) {
    set_has_leading_digits();
  } else {
    clear_has_leading_digits();
  }
  leading_digits_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leading_digits);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.leading_digits)
}

// optional bool leading_zero_possible = 26 [default = false];
bool PhoneMetadata::has_leading_zero_possible() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void PhoneMetadata::set_has_leading_zero_possible() {
  _has_bits_[0] |= 0x08000000u;
}
void PhoneMetadata::clear_has_leading_zero_possible() {
  _has_bits_[0] &= ~0x08000000u;
}
void PhoneMetadata::clear_leading_zero_possible() {
  leading_zero_possible_ = false;
  clear_has_leading_zero_possible();
}
bool PhoneMetadata::leading_zero_possible() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.leading_zero_possible)
  return leading_zero_possible_;
}
void PhoneMetadata::set_leading_zero_possible(bool value) {
  set_has_leading_zero_possible();
  leading_zero_possible_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.leading_zero_possible)
}

// optional bool mobile_number_portable_region = 32 [default = false];
bool PhoneMetadata::has_mobile_number_portable_region() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void PhoneMetadata::set_has_mobile_number_portable_region() {
  _has_bits_[0] |= 0x10000000u;
}
void PhoneMetadata::clear_has_mobile_number_portable_region() {
  _has_bits_[0] &= ~0x10000000u;
}
void PhoneMetadata::clear_mobile_number_portable_region() {
  mobile_number_portable_region_ = false;
  clear_has_mobile_number_portable_region();
}
bool PhoneMetadata::mobile_number_portable_region() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.mobile_number_portable_region)
  return mobile_number_portable_region_;
}
void PhoneMetadata::set_mobile_number_portable_region(bool value) {
  set_has_mobile_number_portable_region();
  mobile_number_portable_region_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.mobile_number_portable_region)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhoneMetadataCollection::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhoneMetadataCollection::PhoneMetadataCollection()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_phonemetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:i18n.phonenumbers.PhoneMetadataCollection)
}
PhoneMetadataCollection::PhoneMetadataCollection(const PhoneMetadataCollection& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PhoneMetadataCollection)
}

void PhoneMetadataCollection::SharedCtor() {
  _cached_size_ = 0;
}

PhoneMetadataCollection::~PhoneMetadataCollection() {
  // @@protoc_insertion_point(destructor:i18n.phonenumbers.PhoneMetadataCollection)
  SharedDtor();
}

void PhoneMetadataCollection::SharedDtor() {
}

void PhoneMetadataCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PhoneMetadataCollection& PhoneMetadataCollection::default_instance() {
  protobuf_phonemetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhoneMetadataCollection* PhoneMetadataCollection::New(::google::protobuf::Arena* arena) const {
  PhoneMetadataCollection* n = new PhoneMetadataCollection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhoneMetadataCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PhoneMetadataCollection)
  metadata_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PhoneMetadataCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:i18n.phonenumbers.PhoneMetadataCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:i18n.phonenumbers.PhoneMetadataCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:i18n.phonenumbers.PhoneMetadataCollection)
  return false;
#undef DO_
}

void PhoneMetadataCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:i18n.phonenumbers.PhoneMetadataCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->metadata(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:i18n.phonenumbers.PhoneMetadataCollection)
}

size_t PhoneMetadataCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PhoneMetadataCollection)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneMetadataCollection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PhoneMetadataCollection*>(&from));
}

void PhoneMetadataCollection::MergeFrom(const PhoneMetadataCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PhoneMetadataCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
}

void PhoneMetadataCollection::CopyFrom(const PhoneMetadataCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PhoneMetadataCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneMetadataCollection::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->metadata())) return false;
  return true;
}

void PhoneMetadataCollection::Swap(PhoneMetadataCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhoneMetadataCollection::InternalSwap(PhoneMetadataCollection* other) {
  metadata_.InternalSwap(&other->metadata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PhoneMetadataCollection::GetTypeName() const {
  return "i18n.phonenumbers.PhoneMetadataCollection";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhoneMetadataCollection

// repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
int PhoneMetadataCollection::metadata_size() const {
  return metadata_.size();
}
void PhoneMetadataCollection::clear_metadata() {
  metadata_.Clear();
}
const ::i18n::phonenumbers::PhoneMetadata& PhoneMetadataCollection::metadata(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return metadata_.Get(index);
}
::i18n::phonenumbers::PhoneMetadata* PhoneMetadataCollection::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return metadata_.Mutable(index);
}
::i18n::phonenumbers::PhoneMetadata* PhoneMetadataCollection::add_metadata() {
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::PhoneMetadata >*
PhoneMetadataCollection::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return &metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::i18n::phonenumbers::PhoneMetadata >&
PhoneMetadataCollection::metadata() const {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return metadata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace phonenumbers
}  // namespace i18n

// @@protoc_insertion_point(global_scope)
