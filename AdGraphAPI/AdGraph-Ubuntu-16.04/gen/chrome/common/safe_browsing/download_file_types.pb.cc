// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: download_file_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "download_file_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace safe_browsing {
class DownloadFileType_PlatformSettingsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadFileType_PlatformSettings> {
} _DownloadFileType_PlatformSettings_default_instance_;
class DownloadFileTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadFileType> {
} _DownloadFileType_default_instance_;
class DownloadFileTypeConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadFileTypeConfig> {
} _DownloadFileTypeConfig_default_instance_;

namespace protobuf_download_5ffile_5ftypes_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DownloadFileType_PlatformSettings_default_instance_.Shutdown();
  _DownloadFileType_default_instance_.Shutdown();
  _DownloadFileTypeConfig_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DownloadFileType_PlatformSettings_default_instance_.DefaultConstruct();
  _DownloadFileType_default_instance_.DefaultConstruct();
  _DownloadFileTypeConfig_default_instance_.DefaultConstruct();
  _DownloadFileTypeConfig_default_instance_.get_mutable()->default_file_type_ = const_cast< ::safe_browsing::DownloadFileType*>(
      ::safe_browsing::DownloadFileType::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_download_5ffile_5ftypes_2eproto

bool DownloadFileType_PingSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DownloadFileType_PingSetting DownloadFileType::SAMPLED_PING;
const DownloadFileType_PingSetting DownloadFileType::NO_PING;
const DownloadFileType_PingSetting DownloadFileType::FULL_PING;
const DownloadFileType_PingSetting DownloadFileType::PingSetting_MIN;
const DownloadFileType_PingSetting DownloadFileType::PingSetting_MAX;
const int DownloadFileType::PingSetting_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DownloadFileType_DangerLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DownloadFileType_DangerLevel DownloadFileType::NOT_DANGEROUS;
const DownloadFileType_DangerLevel DownloadFileType::ALLOW_ON_USER_GESTURE;
const DownloadFileType_DangerLevel DownloadFileType::DANGEROUS;
const DownloadFileType_DangerLevel DownloadFileType::DangerLevel_MIN;
const DownloadFileType_DangerLevel DownloadFileType::DangerLevel_MAX;
const int DownloadFileType::DangerLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DownloadFileType_AutoOpenHint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DownloadFileType_AutoOpenHint DownloadFileType::DISALLOW_AUTO_OPEN;
const DownloadFileType_AutoOpenHint DownloadFileType::ALLOW_AUTO_OPEN;
const DownloadFileType_AutoOpenHint DownloadFileType::AutoOpenHint_MIN;
const DownloadFileType_AutoOpenHint DownloadFileType::AutoOpenHint_MAX;
const int DownloadFileType::AutoOpenHint_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DownloadFileType_PlatformType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DownloadFileType_PlatformType DownloadFileType::PLATFORM_ANY;
const DownloadFileType_PlatformType DownloadFileType::PLATFORM_ANDROID;
const DownloadFileType_PlatformType DownloadFileType::PLATFORM_CHROME_OS;
const DownloadFileType_PlatformType DownloadFileType::PLATFORM_LINUX;
const DownloadFileType_PlatformType DownloadFileType::PLATFORM_MAC;
const DownloadFileType_PlatformType DownloadFileType::PLATFORM_WINDOWS;
const DownloadFileType_PlatformType DownloadFileType::PlatformType_MIN;
const DownloadFileType_PlatformType DownloadFileType::PlatformType_MAX;
const int DownloadFileType::PlatformType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadFileType_PlatformSettings::kPlatformFieldNumber;
const int DownloadFileType_PlatformSettings::kDangerLevelFieldNumber;
const int DownloadFileType_PlatformSettings::kAutoOpenHintFieldNumber;
const int DownloadFileType_PlatformSettings::kMaxFileSizeToAnalyzeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadFileType_PlatformSettings::DownloadFileType_PlatformSettings()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_download_5ffile_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DownloadFileType.PlatformSettings)
}
DownloadFileType_PlatformSettings::DownloadFileType_PlatformSettings(const DownloadFileType_PlatformSettings& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&platform_, &from.platform_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_file_size_to_analyze_) -
    reinterpret_cast<char*>(&platform_)) + sizeof(max_file_size_to_analyze_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DownloadFileType.PlatformSettings)
}

void DownloadFileType_PlatformSettings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&platform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_open_hint_) -
      reinterpret_cast<char*>(&platform_)) + sizeof(auto_open_hint_));
  max_file_size_to_analyze_ = GOOGLE_ULONGLONG(18446744073709551615);
}

DownloadFileType_PlatformSettings::~DownloadFileType_PlatformSettings() {
  // @@protoc_insertion_point(destructor:safe_browsing.DownloadFileType.PlatformSettings)
  SharedDtor();
}

void DownloadFileType_PlatformSettings::SharedDtor() {
}

void DownloadFileType_PlatformSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadFileType_PlatformSettings& DownloadFileType_PlatformSettings::default_instance() {
  protobuf_download_5ffile_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadFileType_PlatformSettings* DownloadFileType_PlatformSettings::New(::google::protobuf::Arena* arena) const {
  DownloadFileType_PlatformSettings* n = new DownloadFileType_PlatformSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadFileType_PlatformSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DownloadFileType.PlatformSettings)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&platform_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auto_open_hint_) -
        reinterpret_cast<char*>(&platform_)) + sizeof(auto_open_hint_));
    max_file_size_to_analyze_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DownloadFileType_PlatformSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DownloadFileType.PlatformSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.DownloadFileType.PlatformType platform = 1 [default = PLATFORM_ANY];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DownloadFileType_PlatformType_IsValid(value)) {
            set_platform(static_cast< ::safe_browsing::DownloadFileType_PlatformType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DownloadFileType.DangerLevel danger_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DownloadFileType_DangerLevel_IsValid(value)) {
            set_danger_level(static_cast< ::safe_browsing::DownloadFileType_DangerLevel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DownloadFileType.AutoOpenHint auto_open_hint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DownloadFileType_AutoOpenHint_IsValid(value)) {
            set_auto_open_hint(static_cast< ::safe_browsing::DownloadFileType_AutoOpenHint >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_file_size_to_analyze = 4 [default = 18446744073709551615];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_file_size_to_analyze();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_file_size_to_analyze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DownloadFileType.PlatformSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DownloadFileType.PlatformSettings)
  return false;
#undef DO_
}

void DownloadFileType_PlatformSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DownloadFileType.PlatformSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.DownloadFileType.PlatformType platform = 1 [default = PLATFORM_ANY];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->platform(), output);
  }

  // optional .safe_browsing.DownloadFileType.DangerLevel danger_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->danger_level(), output);
  }

  // optional .safe_browsing.DownloadFileType.AutoOpenHint auto_open_hint = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->auto_open_hint(), output);
  }

  // optional uint64 max_file_size_to_analyze = 4 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_file_size_to_analyze(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DownloadFileType.PlatformSettings)
}

size_t DownloadFileType_PlatformSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DownloadFileType.PlatformSettings)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional .safe_browsing.DownloadFileType.PlatformType platform = 1 [default = PLATFORM_ANY];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional .safe_browsing.DownloadFileType.DangerLevel danger_level = 2;
    if (has_danger_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->danger_level());
    }

    // optional .safe_browsing.DownloadFileType.AutoOpenHint auto_open_hint = 3;
    if (has_auto_open_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->auto_open_hint());
    }

    // optional uint64 max_file_size_to_analyze = 4 [default = 18446744073709551615];
    if (has_max_file_size_to_analyze()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_file_size_to_analyze());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFileType_PlatformSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadFileType_PlatformSettings*>(&from));
}

void DownloadFileType_PlatformSettings::MergeFrom(const DownloadFileType_PlatformSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DownloadFileType.PlatformSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000002u) {
      danger_level_ = from.danger_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      auto_open_hint_ = from.auto_open_hint_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_file_size_to_analyze_ = from.max_file_size_to_analyze_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadFileType_PlatformSettings::CopyFrom(const DownloadFileType_PlatformSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DownloadFileType.PlatformSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileType_PlatformSettings::IsInitialized() const {
  return true;
}

void DownloadFileType_PlatformSettings::Swap(DownloadFileType_PlatformSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadFileType_PlatformSettings::InternalSwap(DownloadFileType_PlatformSettings* other) {
  std::swap(platform_, other->platform_);
  std::swap(danger_level_, other->danger_level_);
  std::swap(auto_open_hint_, other->auto_open_hint_);
  std::swap(max_file_size_to_analyze_, other->max_file_size_to_analyze_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DownloadFileType_PlatformSettings::GetTypeName() const {
  return "safe_browsing.DownloadFileType.PlatformSettings";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadFileType_PlatformSettings

// optional .safe_browsing.DownloadFileType.PlatformType platform = 1 [default = PLATFORM_ANY];
bool DownloadFileType_PlatformSettings::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DownloadFileType_PlatformSettings::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
void DownloadFileType_PlatformSettings::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
void DownloadFileType_PlatformSettings::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
::safe_browsing::DownloadFileType_PlatformType DownloadFileType_PlatformSettings::platform() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileType.PlatformSettings.platform)
  return static_cast< ::safe_browsing::DownloadFileType_PlatformType >(platform_);
}
void DownloadFileType_PlatformSettings::set_platform(::safe_browsing::DownloadFileType_PlatformType value) {
  assert(::safe_browsing::DownloadFileType_PlatformType_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileType.PlatformSettings.platform)
}

// optional .safe_browsing.DownloadFileType.DangerLevel danger_level = 2;
bool DownloadFileType_PlatformSettings::has_danger_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DownloadFileType_PlatformSettings::set_has_danger_level() {
  _has_bits_[0] |= 0x00000002u;
}
void DownloadFileType_PlatformSettings::clear_has_danger_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void DownloadFileType_PlatformSettings::clear_danger_level() {
  danger_level_ = 0;
  clear_has_danger_level();
}
::safe_browsing::DownloadFileType_DangerLevel DownloadFileType_PlatformSettings::danger_level() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileType.PlatformSettings.danger_level)
  return static_cast< ::safe_browsing::DownloadFileType_DangerLevel >(danger_level_);
}
void DownloadFileType_PlatformSettings::set_danger_level(::safe_browsing::DownloadFileType_DangerLevel value) {
  assert(::safe_browsing::DownloadFileType_DangerLevel_IsValid(value));
  set_has_danger_level();
  danger_level_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileType.PlatformSettings.danger_level)
}

// optional .safe_browsing.DownloadFileType.AutoOpenHint auto_open_hint = 3;
bool DownloadFileType_PlatformSettings::has_auto_open_hint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DownloadFileType_PlatformSettings::set_has_auto_open_hint() {
  _has_bits_[0] |= 0x00000004u;
}
void DownloadFileType_PlatformSettings::clear_has_auto_open_hint() {
  _has_bits_[0] &= ~0x00000004u;
}
void DownloadFileType_PlatformSettings::clear_auto_open_hint() {
  auto_open_hint_ = 0;
  clear_has_auto_open_hint();
}
::safe_browsing::DownloadFileType_AutoOpenHint DownloadFileType_PlatformSettings::auto_open_hint() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileType.PlatformSettings.auto_open_hint)
  return static_cast< ::safe_browsing::DownloadFileType_AutoOpenHint >(auto_open_hint_);
}
void DownloadFileType_PlatformSettings::set_auto_open_hint(::safe_browsing::DownloadFileType_AutoOpenHint value) {
  assert(::safe_browsing::DownloadFileType_AutoOpenHint_IsValid(value));
  set_has_auto_open_hint();
  auto_open_hint_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileType.PlatformSettings.auto_open_hint)
}

// optional uint64 max_file_size_to_analyze = 4 [default = 18446744073709551615];
bool DownloadFileType_PlatformSettings::has_max_file_size_to_analyze() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DownloadFileType_PlatformSettings::set_has_max_file_size_to_analyze() {
  _has_bits_[0] |= 0x00000008u;
}
void DownloadFileType_PlatformSettings::clear_has_max_file_size_to_analyze() {
  _has_bits_[0] &= ~0x00000008u;
}
void DownloadFileType_PlatformSettings::clear_max_file_size_to_analyze() {
  max_file_size_to_analyze_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_max_file_size_to_analyze();
}
::google::protobuf::uint64 DownloadFileType_PlatformSettings::max_file_size_to_analyze() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileType.PlatformSettings.max_file_size_to_analyze)
  return max_file_size_to_analyze_;
}
void DownloadFileType_PlatformSettings::set_max_file_size_to_analyze(::google::protobuf::uint64 value) {
  set_has_max_file_size_to_analyze();
  max_file_size_to_analyze_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileType.PlatformSettings.max_file_size_to_analyze)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadFileType::kExtensionFieldNumber;
const int DownloadFileType::kUmaValueFieldNumber;
const int DownloadFileType::kIsArchiveFieldNumber;
const int DownloadFileType::kPingSettingFieldNumber;
const int DownloadFileType::kPlatformSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadFileType::DownloadFileType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_download_5ffile_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DownloadFileType)
}
DownloadFileType::DownloadFileType(const DownloadFileType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      platform_settings_(from.platform_settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension()) {
    extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  ::memcpy(&uma_value_, &from.uma_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&ping_setting_) -
    reinterpret_cast<char*>(&uma_value_)) + sizeof(ping_setting_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DownloadFileType)
}

void DownloadFileType::SharedCtor() {
  _cached_size_ = 0;
  extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uma_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_setting_) -
      reinterpret_cast<char*>(&uma_value_)) + sizeof(ping_setting_));
}

DownloadFileType::~DownloadFileType() {
  // @@protoc_insertion_point(destructor:safe_browsing.DownloadFileType)
  SharedDtor();
}

void DownloadFileType::SharedDtor() {
  extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DownloadFileType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadFileType& DownloadFileType::default_instance() {
  protobuf_download_5ffile_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadFileType* DownloadFileType::New(::google::protobuf::Arena* arena) const {
  DownloadFileType* n = new DownloadFileType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadFileType::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DownloadFileType)
  platform_settings_.Clear();
  if (has_extension()) {
    GOOGLE_DCHECK(!extension_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*extension_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&uma_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_setting_) -
        reinterpret_cast<char*>(&uma_value_)) + sizeof(ping_setting_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DownloadFileType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DownloadFileType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string extension = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 uma_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uma_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uma_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_archive = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_archive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_archive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DownloadFileType.PingSetting ping_setting = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DownloadFileType_PingSetting_IsValid(value)) {
            set_ping_setting(static_cast< ::safe_browsing::DownloadFileType_PingSetting >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.DownloadFileType.PlatformSettings platform_settings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_platform_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DownloadFileType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DownloadFileType)
  return false;
#undef DO_
}

void DownloadFileType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DownloadFileType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string extension = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->extension(), output);
  }

  // optional int64 uma_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uma_value(), output);
  }

  // optional bool is_archive = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_archive(), output);
  }

  // optional .safe_browsing.DownloadFileType.PingSetting ping_setting = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ping_setting(), output);
  }

  // repeated .safe_browsing.DownloadFileType.PlatformSettings platform_settings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->platform_settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->platform_settings(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DownloadFileType)
}

size_t DownloadFileType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DownloadFileType)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .safe_browsing.DownloadFileType.PlatformSettings platform_settings = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->platform_settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->platform_settings(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string extension = 1;
    if (has_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension());
    }

    // optional int64 uma_value = 2;
    if (has_uma_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uma_value());
    }

    // optional bool is_archive = 3 [default = false];
    if (has_is_archive()) {
      total_size += 1 + 1;
    }

    // optional .safe_browsing.DownloadFileType.PingSetting ping_setting = 4;
    if (has_ping_setting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ping_setting());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFileType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadFileType*>(&from));
}

void DownloadFileType::MergeFrom(const DownloadFileType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DownloadFileType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  platform_settings_.MergeFrom(from.platform_settings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_extension();
      extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_);
    }
    if (cached_has_bits & 0x00000002u) {
      uma_value_ = from.uma_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_archive_ = from.is_archive_;
    }
    if (cached_has_bits & 0x00000008u) {
      ping_setting_ = from.ping_setting_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadFileType::CopyFrom(const DownloadFileType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DownloadFileType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileType::IsInitialized() const {
  return true;
}

void DownloadFileType::Swap(DownloadFileType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadFileType::InternalSwap(DownloadFileType* other) {
  platform_settings_.InternalSwap(&other->platform_settings_);
  extension_.Swap(&other->extension_);
  std::swap(uma_value_, other->uma_value_);
  std::swap(is_archive_, other->is_archive_);
  std::swap(ping_setting_, other->ping_setting_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DownloadFileType::GetTypeName() const {
  return "safe_browsing.DownloadFileType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadFileType

// optional string extension = 1;
bool DownloadFileType::has_extension() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DownloadFileType::set_has_extension() {
  _has_bits_[0] |= 0x00000001u;
}
void DownloadFileType::clear_has_extension() {
  _has_bits_[0] &= ~0x00000001u;
}
void DownloadFileType::clear_extension() {
  extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extension();
}
const ::std::string& DownloadFileType::extension() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileType.extension)
  return extension_.GetNoArena();
}
void DownloadFileType::set_extension(const ::std::string& value) {
  set_has_extension();
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileType.extension)
}
#if LANG_CXX11
void DownloadFileType::set_extension(::std::string&& value) {
  set_has_extension();
  extension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.DownloadFileType.extension)
}
#endif
void DownloadFileType::set_extension(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extension();
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.DownloadFileType.extension)
}
void DownloadFileType::set_extension(const char* value, size_t size) {
  set_has_extension();
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.DownloadFileType.extension)
}
::std::string* DownloadFileType::mutable_extension() {
  set_has_extension();
  // @@protoc_insertion_point(field_mutable:safe_browsing.DownloadFileType.extension)
  return extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadFileType::release_extension() {
  // @@protoc_insertion_point(field_release:safe_browsing.DownloadFileType.extension)
  clear_has_extension();
  return extension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadFileType::set_allocated_extension(::std::string* extension) {
  if (extension != NULL) {
    set_has_extension();
  } else {
    clear_has_extension();
  }
  extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DownloadFileType.extension)
}

// optional int64 uma_value = 2;
bool DownloadFileType::has_uma_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DownloadFileType::set_has_uma_value() {
  _has_bits_[0] |= 0x00000002u;
}
void DownloadFileType::clear_has_uma_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void DownloadFileType::clear_uma_value() {
  uma_value_ = GOOGLE_LONGLONG(0);
  clear_has_uma_value();
}
::google::protobuf::int64 DownloadFileType::uma_value() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileType.uma_value)
  return uma_value_;
}
void DownloadFileType::set_uma_value(::google::protobuf::int64 value) {
  set_has_uma_value();
  uma_value_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileType.uma_value)
}

// optional bool is_archive = 3 [default = false];
bool DownloadFileType::has_is_archive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DownloadFileType::set_has_is_archive() {
  _has_bits_[0] |= 0x00000004u;
}
void DownloadFileType::clear_has_is_archive() {
  _has_bits_[0] &= ~0x00000004u;
}
void DownloadFileType::clear_is_archive() {
  is_archive_ = false;
  clear_has_is_archive();
}
bool DownloadFileType::is_archive() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileType.is_archive)
  return is_archive_;
}
void DownloadFileType::set_is_archive(bool value) {
  set_has_is_archive();
  is_archive_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileType.is_archive)
}

// optional .safe_browsing.DownloadFileType.PingSetting ping_setting = 4;
bool DownloadFileType::has_ping_setting() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DownloadFileType::set_has_ping_setting() {
  _has_bits_[0] |= 0x00000008u;
}
void DownloadFileType::clear_has_ping_setting() {
  _has_bits_[0] &= ~0x00000008u;
}
void DownloadFileType::clear_ping_setting() {
  ping_setting_ = 0;
  clear_has_ping_setting();
}
::safe_browsing::DownloadFileType_PingSetting DownloadFileType::ping_setting() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileType.ping_setting)
  return static_cast< ::safe_browsing::DownloadFileType_PingSetting >(ping_setting_);
}
void DownloadFileType::set_ping_setting(::safe_browsing::DownloadFileType_PingSetting value) {
  assert(::safe_browsing::DownloadFileType_PingSetting_IsValid(value));
  set_has_ping_setting();
  ping_setting_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileType.ping_setting)
}

// repeated .safe_browsing.DownloadFileType.PlatformSettings platform_settings = 5;
int DownloadFileType::platform_settings_size() const {
  return platform_settings_.size();
}
void DownloadFileType::clear_platform_settings() {
  platform_settings_.Clear();
}
const ::safe_browsing::DownloadFileType_PlatformSettings& DownloadFileType::platform_settings(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileType.platform_settings)
  return platform_settings_.Get(index);
}
::safe_browsing::DownloadFileType_PlatformSettings* DownloadFileType::mutable_platform_settings(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.DownloadFileType.platform_settings)
  return platform_settings_.Mutable(index);
}
::safe_browsing::DownloadFileType_PlatformSettings* DownloadFileType::add_platform_settings() {
  // @@protoc_insertion_point(field_add:safe_browsing.DownloadFileType.platform_settings)
  return platform_settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::safe_browsing::DownloadFileType_PlatformSettings >*
DownloadFileType::mutable_platform_settings() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.DownloadFileType.platform_settings)
  return &platform_settings_;
}
const ::google::protobuf::RepeatedPtrField< ::safe_browsing::DownloadFileType_PlatformSettings >&
DownloadFileType::platform_settings() const {
  // @@protoc_insertion_point(field_list:safe_browsing.DownloadFileType.platform_settings)
  return platform_settings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadFileTypeConfig::kVersionIdFieldNumber;
const int DownloadFileTypeConfig::kSampledPingProbabilityFieldNumber;
const int DownloadFileTypeConfig::kFileTypesFieldNumber;
const int DownloadFileTypeConfig::kDefaultFileTypeFieldNumber;
const int DownloadFileTypeConfig::kMaxArchivedBinariesToReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadFileTypeConfig::DownloadFileTypeConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_download_5ffile_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DownloadFileTypeConfig)
}
DownloadFileTypeConfig::DownloadFileTypeConfig(const DownloadFileTypeConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      file_types_(from.file_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_file_type()) {
    default_file_type_ = new ::safe_browsing::DownloadFileType(*from.default_file_type_);
  } else {
    default_file_type_ = NULL;
  }
  ::memcpy(&version_id_, &from.version_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_archived_binaries_to_report_) -
    reinterpret_cast<char*>(&version_id_)) + sizeof(max_archived_binaries_to_report_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DownloadFileTypeConfig)
}

void DownloadFileTypeConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&default_file_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_archived_binaries_to_report_) -
      reinterpret_cast<char*>(&default_file_type_)) + sizeof(max_archived_binaries_to_report_));
}

DownloadFileTypeConfig::~DownloadFileTypeConfig() {
  // @@protoc_insertion_point(destructor:safe_browsing.DownloadFileTypeConfig)
  SharedDtor();
}

void DownloadFileTypeConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete default_file_type_;
  }
}

void DownloadFileTypeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadFileTypeConfig& DownloadFileTypeConfig::default_instance() {
  protobuf_download_5ffile_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadFileTypeConfig* DownloadFileTypeConfig::New(::google::protobuf::Arena* arena) const {
  DownloadFileTypeConfig* n = new DownloadFileTypeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadFileTypeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DownloadFileTypeConfig)
  file_types_.Clear();
  if (has_default_file_type()) {
    GOOGLE_DCHECK(default_file_type_ != NULL);
    default_file_type_->::safe_browsing::DownloadFileType::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&version_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_archived_binaries_to_report_) -
        reinterpret_cast<char*>(&version_id_)) + sizeof(max_archived_binaries_to_report_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DownloadFileTypeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DownloadFileTypeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_version_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sampled_ping_probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_sampled_ping_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sampled_ping_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.DownloadFileType file_types = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DownloadFileType default_file_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_file_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_archived_binaries_to_report = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_max_archived_binaries_to_report();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_archived_binaries_to_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DownloadFileTypeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DownloadFileTypeConfig)
  return false;
#undef DO_
}

void DownloadFileTypeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DownloadFileTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version_id(), output);
  }

  // optional float sampled_ping_probability = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sampled_ping_probability(), output);
  }

  // repeated .safe_browsing.DownloadFileType file_types = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->file_types(static_cast<int>(i)), output);
  }

  // optional .safe_browsing.DownloadFileType default_file_type = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->default_file_type_, output);
  }

  // optional uint64 max_archived_binaries_to_report = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->max_archived_binaries_to_report(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DownloadFileTypeConfig)
}

size_t DownloadFileTypeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DownloadFileTypeConfig)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .safe_browsing.DownloadFileType file_types = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->file_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_types(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .safe_browsing.DownloadFileType default_file_type = 4;
    if (has_default_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->default_file_type_);
    }

    // optional uint32 version_id = 1;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_id());
    }

    // optional float sampled_ping_probability = 2;
    if (has_sampled_ping_probability()) {
      total_size += 1 + 4;
    }

    // optional uint64 max_archived_binaries_to_report = 5;
    if (has_max_archived_binaries_to_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_archived_binaries_to_report());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFileTypeConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadFileTypeConfig*>(&from));
}

void DownloadFileTypeConfig::MergeFrom(const DownloadFileTypeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DownloadFileTypeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_types_.MergeFrom(from.file_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_file_type()->::safe_browsing::DownloadFileType::MergeFrom(from.default_file_type());
    }
    if (cached_has_bits & 0x00000002u) {
      version_id_ = from.version_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sampled_ping_probability_ = from.sampled_ping_probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_archived_binaries_to_report_ = from.max_archived_binaries_to_report_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadFileTypeConfig::CopyFrom(const DownloadFileTypeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DownloadFileTypeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileTypeConfig::IsInitialized() const {
  return true;
}

void DownloadFileTypeConfig::Swap(DownloadFileTypeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadFileTypeConfig::InternalSwap(DownloadFileTypeConfig* other) {
  file_types_.InternalSwap(&other->file_types_);
  std::swap(default_file_type_, other->default_file_type_);
  std::swap(version_id_, other->version_id_);
  std::swap(sampled_ping_probability_, other->sampled_ping_probability_);
  std::swap(max_archived_binaries_to_report_, other->max_archived_binaries_to_report_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DownloadFileTypeConfig::GetTypeName() const {
  return "safe_browsing.DownloadFileTypeConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadFileTypeConfig

// optional uint32 version_id = 1;
bool DownloadFileTypeConfig::has_version_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DownloadFileTypeConfig::set_has_version_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DownloadFileTypeConfig::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DownloadFileTypeConfig::clear_version_id() {
  version_id_ = 0u;
  clear_has_version_id();
}
::google::protobuf::uint32 DownloadFileTypeConfig::version_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileTypeConfig.version_id)
  return version_id_;
}
void DownloadFileTypeConfig::set_version_id(::google::protobuf::uint32 value) {
  set_has_version_id();
  version_id_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileTypeConfig.version_id)
}

// optional float sampled_ping_probability = 2;
bool DownloadFileTypeConfig::has_sampled_ping_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DownloadFileTypeConfig::set_has_sampled_ping_probability() {
  _has_bits_[0] |= 0x00000004u;
}
void DownloadFileTypeConfig::clear_has_sampled_ping_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
void DownloadFileTypeConfig::clear_sampled_ping_probability() {
  sampled_ping_probability_ = 0;
  clear_has_sampled_ping_probability();
}
float DownloadFileTypeConfig::sampled_ping_probability() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileTypeConfig.sampled_ping_probability)
  return sampled_ping_probability_;
}
void DownloadFileTypeConfig::set_sampled_ping_probability(float value) {
  set_has_sampled_ping_probability();
  sampled_ping_probability_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileTypeConfig.sampled_ping_probability)
}

// repeated .safe_browsing.DownloadFileType file_types = 3;
int DownloadFileTypeConfig::file_types_size() const {
  return file_types_.size();
}
void DownloadFileTypeConfig::clear_file_types() {
  file_types_.Clear();
}
const ::safe_browsing::DownloadFileType& DownloadFileTypeConfig::file_types(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileTypeConfig.file_types)
  return file_types_.Get(index);
}
::safe_browsing::DownloadFileType* DownloadFileTypeConfig::mutable_file_types(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.DownloadFileTypeConfig.file_types)
  return file_types_.Mutable(index);
}
::safe_browsing::DownloadFileType* DownloadFileTypeConfig::add_file_types() {
  // @@protoc_insertion_point(field_add:safe_browsing.DownloadFileTypeConfig.file_types)
  return file_types_.Add();
}
::google::protobuf::RepeatedPtrField< ::safe_browsing::DownloadFileType >*
DownloadFileTypeConfig::mutable_file_types() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.DownloadFileTypeConfig.file_types)
  return &file_types_;
}
const ::google::protobuf::RepeatedPtrField< ::safe_browsing::DownloadFileType >&
DownloadFileTypeConfig::file_types() const {
  // @@protoc_insertion_point(field_list:safe_browsing.DownloadFileTypeConfig.file_types)
  return file_types_;
}

// optional .safe_browsing.DownloadFileType default_file_type = 4;
bool DownloadFileTypeConfig::has_default_file_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DownloadFileTypeConfig::set_has_default_file_type() {
  _has_bits_[0] |= 0x00000001u;
}
void DownloadFileTypeConfig::clear_has_default_file_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void DownloadFileTypeConfig::clear_default_file_type() {
  if (default_file_type_ != NULL) default_file_type_->::safe_browsing::DownloadFileType::Clear();
  clear_has_default_file_type();
}
const ::safe_browsing::DownloadFileType& DownloadFileTypeConfig::default_file_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileTypeConfig.default_file_type)
  return default_file_type_ != NULL ? *default_file_type_
                         : *::safe_browsing::DownloadFileType::internal_default_instance();
}
::safe_browsing::DownloadFileType* DownloadFileTypeConfig::mutable_default_file_type() {
  set_has_default_file_type();
  if (default_file_type_ == NULL) {
    default_file_type_ = new ::safe_browsing::DownloadFileType;
  }
  // @@protoc_insertion_point(field_mutable:safe_browsing.DownloadFileTypeConfig.default_file_type)
  return default_file_type_;
}
::safe_browsing::DownloadFileType* DownloadFileTypeConfig::release_default_file_type() {
  // @@protoc_insertion_point(field_release:safe_browsing.DownloadFileTypeConfig.default_file_type)
  clear_has_default_file_type();
  ::safe_browsing::DownloadFileType* temp = default_file_type_;
  default_file_type_ = NULL;
  return temp;
}
void DownloadFileTypeConfig::set_allocated_default_file_type(::safe_browsing::DownloadFileType* default_file_type) {
  delete default_file_type_;
  default_file_type_ = default_file_type;
  if (default_file_type) {
    set_has_default_file_type();
  } else {
    clear_has_default_file_type();
  }
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DownloadFileTypeConfig.default_file_type)
}

// optional uint64 max_archived_binaries_to_report = 5;
bool DownloadFileTypeConfig::has_max_archived_binaries_to_report() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DownloadFileTypeConfig::set_has_max_archived_binaries_to_report() {
  _has_bits_[0] |= 0x00000008u;
}
void DownloadFileTypeConfig::clear_has_max_archived_binaries_to_report() {
  _has_bits_[0] &= ~0x00000008u;
}
void DownloadFileTypeConfig::clear_max_archived_binaries_to_report() {
  max_archived_binaries_to_report_ = GOOGLE_ULONGLONG(0);
  clear_has_max_archived_binaries_to_report();
}
::google::protobuf::uint64 DownloadFileTypeConfig::max_archived_binaries_to_report() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadFileTypeConfig.max_archived_binaries_to_report)
  return max_archived_binaries_to_report_;
}
void DownloadFileTypeConfig::set_max_archived_binaries_to_report(::google::protobuf::uint64 value) {
  set_has_max_archived_binaries_to_report();
  max_archived_binaries_to_report_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadFileTypeConfig.max_archived_binaries_to_report)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

// @@protoc_insertion_point(global_scope)
