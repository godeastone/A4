// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace safe_browsing {
class ClientSideModel_RuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientSideModel_Rule> {
} _ClientSideModel_Rule_default_instance_;
class ClientSideModel_IPSubnetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientSideModel_IPSubnet> {
} _ClientSideModel_IPSubnet_default_instance_;
class ClientSideModelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientSideModel> {
} _ClientSideModel_default_instance_;

namespace protobuf_client_5fmodel_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ClientSideModel_Rule_default_instance_.Shutdown();
  _ClientSideModel_IPSubnet_default_instance_.Shutdown();
  _ClientSideModel_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ClientSideModel_Rule_default_instance_.DefaultConstruct();
  _ClientSideModel_IPSubnet_default_instance_.DefaultConstruct();
  _ClientSideModel_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_client_5fmodel_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientSideModel_Rule::kFeatureFieldNumber;
const int ClientSideModel_Rule::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientSideModel_Rule::ClientSideModel_Rule()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fmodel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.ClientSideModel.Rule)
}
ClientSideModel_Rule::ClientSideModel_Rule(const ClientSideModel_Rule& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSideModel.Rule)
}

void ClientSideModel_Rule::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
}

ClientSideModel_Rule::~ClientSideModel_Rule() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSideModel.Rule)
  SharedDtor();
}

void ClientSideModel_Rule::SharedDtor() {
}

void ClientSideModel_Rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientSideModel_Rule& ClientSideModel_Rule::default_instance() {
  protobuf_client_5fmodel_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientSideModel_Rule* ClientSideModel_Rule::New(::google::protobuf::Arena* arena) const {
  ClientSideModel_Rule* n = new ClientSideModel_Rule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientSideModel_Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSideModel.Rule)
  feature_.Clear();
  weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientSideModel_Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.ClientSideModel.Rule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_feature())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_feature())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.ClientSideModel.Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.ClientSideModel.Rule)
  return false;
#undef DO_
}

void ClientSideModel_Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.ClientSideModel.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 feature = 1;
  for (int i = 0, n = this->feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->feature(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required float weight = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->weight(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.ClientSideModel.Rule)
}

size_t ClientSideModel_Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSideModel.Rule)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required float weight = 2;
  if (has_weight()) {
    total_size += 1 + 4;
  }
  // repeated int32 feature = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->feature_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->feature_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSideModel_Rule::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientSideModel_Rule*>(&from));
}

void ClientSideModel_Rule::MergeFrom(const ClientSideModel_Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSideModel.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.has_weight()) {
    set_weight(from.weight());
  }
}

void ClientSideModel_Rule::CopyFrom(const ClientSideModel_Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSideModel.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSideModel_Rule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ClientSideModel_Rule::Swap(ClientSideModel_Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientSideModel_Rule::InternalSwap(ClientSideModel_Rule* other) {
  feature_.InternalSwap(&other->feature_);
  std::swap(weight_, other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientSideModel_Rule::GetTypeName() const {
  return "safe_browsing.ClientSideModel.Rule";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientSideModel_Rule

// repeated int32 feature = 1;
int ClientSideModel_Rule::feature_size() const {
  return feature_.size();
}
void ClientSideModel_Rule::clear_feature() {
  feature_.Clear();
}
::google::protobuf::int32 ClientSideModel_Rule::feature(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.Rule.feature)
  return feature_.Get(index);
}
void ClientSideModel_Rule::set_feature(int index, ::google::protobuf::int32 value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.Rule.feature)
}
void ClientSideModel_Rule::add_feature(::google::protobuf::int32 value) {
  feature_.Add(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.Rule.feature)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientSideModel_Rule::feature() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.Rule.feature)
  return feature_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientSideModel_Rule::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.Rule.feature)
  return &feature_;
}

// required float weight = 2;
bool ClientSideModel_Rule::has_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientSideModel_Rule::set_has_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientSideModel_Rule::clear_has_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientSideModel_Rule::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
float ClientSideModel_Rule::weight() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.Rule.weight)
  return weight_;
}
void ClientSideModel_Rule::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.Rule.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientSideModel_IPSubnet::kPrefixFieldNumber;
const int ClientSideModel_IPSubnet::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientSideModel_IPSubnet::ClientSideModel_IPSubnet()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fmodel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.ClientSideModel.IPSubnet)
}
ClientSideModel_IPSubnet::ClientSideModel_IPSubnet(const ClientSideModel_IPSubnet& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix()) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSideModel.IPSubnet)
}

void ClientSideModel_IPSubnet::SharedCtor() {
  _cached_size_ = 0;
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 128;
}

ClientSideModel_IPSubnet::~ClientSideModel_IPSubnet() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSideModel.IPSubnet)
  SharedDtor();
}

void ClientSideModel_IPSubnet::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientSideModel_IPSubnet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientSideModel_IPSubnet& ClientSideModel_IPSubnet::default_instance() {
  protobuf_client_5fmodel_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientSideModel_IPSubnet* ClientSideModel_IPSubnet::New(::google::protobuf::Arena* arena) const {
  ClientSideModel_IPSubnet* n = new ClientSideModel_IPSubnet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientSideModel_IPSubnet::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSideModel.IPSubnet)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_prefix()) {
      GOOGLE_DCHECK(!prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*prefix_.UnsafeRawStringPointer())->clear();
    }
    size_ = 128;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientSideModel_IPSubnet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.ClientSideModel.IPSubnet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 2 [default = 128];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.ClientSideModel.IPSubnet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.ClientSideModel.IPSubnet)
  return false;
#undef DO_
}

void ClientSideModel_IPSubnet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.ClientSideModel.IPSubnet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->prefix(), output);
  }

  // optional int32 size = 2 [default = 128];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.ClientSideModel.IPSubnet)
}

size_t ClientSideModel_IPSubnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSideModel.IPSubnet)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required bytes prefix = 1;
  if (has_prefix()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->prefix());
  }
  // optional int32 size = 2 [default = 128];
  if (has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSideModel_IPSubnet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientSideModel_IPSubnet*>(&from));
}

void ClientSideModel_IPSubnet::MergeFrom(const ClientSideModel_IPSubnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSideModel.IPSubnet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_prefix();
      prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientSideModel_IPSubnet::CopyFrom(const ClientSideModel_IPSubnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSideModel.IPSubnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSideModel_IPSubnet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ClientSideModel_IPSubnet::Swap(ClientSideModel_IPSubnet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientSideModel_IPSubnet::InternalSwap(ClientSideModel_IPSubnet* other) {
  prefix_.Swap(&other->prefix_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientSideModel_IPSubnet::GetTypeName() const {
  return "safe_browsing.ClientSideModel.IPSubnet";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientSideModel_IPSubnet

// required bytes prefix = 1;
bool ClientSideModel_IPSubnet::has_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientSideModel_IPSubnet::set_has_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientSideModel_IPSubnet::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientSideModel_IPSubnet::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
const ::std::string& ClientSideModel_IPSubnet::prefix() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.IPSubnet.prefix)
  return prefix_.GetNoArena();
}
void ClientSideModel_IPSubnet::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.IPSubnet.prefix)
}
#if LANG_CXX11
void ClientSideModel_IPSubnet::set_prefix(::std::string&& value) {
  set_has_prefix();
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.ClientSideModel.IPSubnet.prefix)
}
#endif
void ClientSideModel_IPSubnet::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientSideModel.IPSubnet.prefix)
}
void ClientSideModel_IPSubnet::set_prefix(const void* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientSideModel.IPSubnet.prefix)
}
::std::string* ClientSideModel_IPSubnet::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.IPSubnet.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientSideModel_IPSubnet::release_prefix() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSideModel.IPSubnet.prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientSideModel_IPSubnet::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSideModel.IPSubnet.prefix)
}

// optional int32 size = 2 [default = 128];
bool ClientSideModel_IPSubnet::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientSideModel_IPSubnet::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientSideModel_IPSubnet::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientSideModel_IPSubnet::clear_size() {
  size_ = 128;
  clear_has_size();
}
::google::protobuf::int32 ClientSideModel_IPSubnet::size() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.IPSubnet.size)
  return size_;
}
void ClientSideModel_IPSubnet::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.IPSubnet.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientSideModel::kHashesFieldNumber;
const int ClientSideModel::kRuleFieldNumber;
const int ClientSideModel::kPageTermFieldNumber;
const int ClientSideModel::kPageWordFieldNumber;
const int ClientSideModel::kMaxWordsPerTermFieldNumber;
const int ClientSideModel::kVersionFieldNumber;
const int ClientSideModel::kBadSubnetFieldNumber;
const int ClientSideModel::kMurmurHashSeedFieldNumber;
const int ClientSideModel::kMaxShinglesPerPageFieldNumber;
const int ClientSideModel::kShingleSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientSideModel::ClientSideModel()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fmodel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.ClientSideModel)
}
ClientSideModel::ClientSideModel(const ClientSideModel& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hashes_(from.hashes_),
      rule_(from.rule_),
      page_term_(from.page_term_),
      page_word_(from.page_word_),
      bad_subnet_(from.bad_subnet_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_words_per_term_, &from.max_words_per_term_,
    static_cast<size_t>(reinterpret_cast<char*>(&shingle_size_) -
    reinterpret_cast<char*>(&max_words_per_term_)) + sizeof(shingle_size_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSideModel)
}

void ClientSideModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_words_per_term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&murmur_hash_seed_) -
      reinterpret_cast<char*>(&max_words_per_term_)) + sizeof(murmur_hash_seed_));
  max_shingles_per_page_ = 200;
  shingle_size_ = 4;
}

ClientSideModel::~ClientSideModel() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSideModel)
  SharedDtor();
}

void ClientSideModel::SharedDtor() {
}

void ClientSideModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientSideModel& ClientSideModel::default_instance() {
  protobuf_client_5fmodel_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientSideModel* ClientSideModel::New(::google::protobuf::Arena* arena) const {
  ClientSideModel* n = new ClientSideModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientSideModel::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSideModel)
  hashes_.Clear();
  rule_.Clear();
  page_term_.Clear();
  page_word_.Clear();
  bad_subnet_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&max_words_per_term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&murmur_hash_seed_) -
        reinterpret_cast<char*>(&max_words_per_term_)) + sizeof(murmur_hash_seed_));
    max_shingles_per_page_ = 200;
    shingle_size_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientSideModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.ClientSideModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes hashes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_hashes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.ClientSideModel.Rule rule = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 page_term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_page_term())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_page_term())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 page_word = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37u, input, this->mutable_page_word())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_page_word())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_words_per_term = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_max_words_per_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_words_per_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bad_subnet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 murmur_hash_seed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_murmur_hash_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &murmur_hash_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_shingles_per_page = 9 [default = 200];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_max_shingles_per_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_shingles_per_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shingle_size = 10 [default = 4];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_shingle_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shingle_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.ClientSideModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.ClientSideModel)
  return false;
#undef DO_
}

void ClientSideModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.ClientSideModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes hashes = 1;
  for (int i = 0, n = this->hashes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->hashes(i), output);
  }

  // repeated .safe_browsing.ClientSideModel.Rule rule = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rule_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->rule(static_cast<int>(i)), output);
  }

  // repeated int32 page_term = 3;
  for (int i = 0, n = this->page_term_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->page_term(i), output);
  }

  // repeated fixed32 page_word = 4;
  for (int i = 0, n = this->page_word_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->page_word(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 max_words_per_term = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_words_per_term(), output);
  }

  // optional int32 version = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->version(), output);
  }

  // repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bad_subnet_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->bad_subnet(static_cast<int>(i)), output);
  }

  // optional fixed32 murmur_hash_seed = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->murmur_hash_seed(), output);
  }

  // optional int32 max_shingles_per_page = 9 [default = 200];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_shingles_per_page(), output);
  }

  // optional int32 shingle_size = 10 [default = 4];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->shingle_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.ClientSideModel)
}

size_t ClientSideModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSideModel)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required int32 max_words_per_term = 5;
  if (has_max_words_per_term()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_words_per_term());
  }
  // repeated bytes hashes = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hashes_size());
  for (int i = 0, n = this->hashes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->hashes(i));
  }

  // repeated .safe_browsing.ClientSideModel.Rule rule = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rule_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rule(static_cast<int>(i)));
    }
  }

  // repeated int32 page_term = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->page_term_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->page_term_size());
    total_size += data_size;
  }

  // repeated fixed32 page_word = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->page_word_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->page_word_size());
    total_size += data_size;
  }

  // repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->bad_subnet_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bad_subnet(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 30u) {
    // optional int32 version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional fixed32 murmur_hash_seed = 8;
    if (has_murmur_hash_seed()) {
      total_size += 1 + 4;
    }

    // optional int32 max_shingles_per_page = 9 [default = 200];
    if (has_max_shingles_per_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_shingles_per_page());
    }

    // optional int32 shingle_size = 10 [default = 4];
    if (has_shingle_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shingle_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSideModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientSideModel*>(&from));
}

void ClientSideModel::MergeFrom(const ClientSideModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSideModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  rule_.MergeFrom(from.rule_);
  page_term_.MergeFrom(from.page_term_);
  page_word_.MergeFrom(from.page_word_);
  bad_subnet_.MergeFrom(from.bad_subnet_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      max_words_per_term_ = from.max_words_per_term_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      murmur_hash_seed_ = from.murmur_hash_seed_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_shingles_per_page_ = from.max_shingles_per_page_;
    }
    if (cached_has_bits & 0x00000010u) {
      shingle_size_ = from.shingle_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientSideModel::CopyFrom(const ClientSideModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSideModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSideModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rule())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bad_subnet())) return false;
  return true;
}

void ClientSideModel::Swap(ClientSideModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientSideModel::InternalSwap(ClientSideModel* other) {
  hashes_.InternalSwap(&other->hashes_);
  rule_.InternalSwap(&other->rule_);
  page_term_.InternalSwap(&other->page_term_);
  page_word_.InternalSwap(&other->page_word_);
  bad_subnet_.InternalSwap(&other->bad_subnet_);
  std::swap(max_words_per_term_, other->max_words_per_term_);
  std::swap(version_, other->version_);
  std::swap(murmur_hash_seed_, other->murmur_hash_seed_);
  std::swap(max_shingles_per_page_, other->max_shingles_per_page_);
  std::swap(shingle_size_, other->shingle_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientSideModel::GetTypeName() const {
  return "safe_browsing.ClientSideModel";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientSideModel

// repeated bytes hashes = 1;
int ClientSideModel::hashes_size() const {
  return hashes_.size();
}
void ClientSideModel::clear_hashes() {
  hashes_.Clear();
}
const ::std::string& ClientSideModel::hashes(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.hashes)
  return hashes_.Get(index);
}
::std::string* ClientSideModel::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.hashes)
  return hashes_.Mutable(index);
}
void ClientSideModel::set_hashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.hashes)
  hashes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ClientSideModel::set_hashes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.hashes)
  hashes_.Mutable(index)->assign(std::move(value));
}
#endif
void ClientSideModel::set_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientSideModel.hashes)
}
void ClientSideModel::set_hashes(int index, const void* value, size_t size) {
  hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientSideModel.hashes)
}
::std::string* ClientSideModel::add_hashes() {
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientSideModel.hashes)
  return hashes_.Add();
}
void ClientSideModel::add_hashes(const ::std::string& value) {
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.hashes)
}
#if LANG_CXX11
void ClientSideModel::add_hashes(::std::string&& value) {
  hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.hashes)
}
#endif
void ClientSideModel::add_hashes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientSideModel.hashes)
}
void ClientSideModel::add_hashes(const void* value, size_t size) {
  hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientSideModel.hashes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientSideModel::hashes() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.hashes)
  return hashes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ClientSideModel::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.hashes)
  return &hashes_;
}

// repeated .safe_browsing.ClientSideModel.Rule rule = 2;
int ClientSideModel::rule_size() const {
  return rule_.size();
}
void ClientSideModel::clear_rule() {
  rule_.Clear();
}
const ::safe_browsing::ClientSideModel_Rule& ClientSideModel::rule(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.rule)
  return rule_.Get(index);
}
::safe_browsing::ClientSideModel_Rule* ClientSideModel::mutable_rule(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.rule)
  return rule_.Mutable(index);
}
::safe_browsing::ClientSideModel_Rule* ClientSideModel::add_rule() {
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.rule)
  return rule_.Add();
}
::google::protobuf::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule >*
ClientSideModel::mutable_rule() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.rule)
  return &rule_;
}
const ::google::protobuf::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule >&
ClientSideModel::rule() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.rule)
  return rule_;
}

// repeated int32 page_term = 3;
int ClientSideModel::page_term_size() const {
  return page_term_.size();
}
void ClientSideModel::clear_page_term() {
  page_term_.Clear();
}
::google::protobuf::int32 ClientSideModel::page_term(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.page_term)
  return page_term_.Get(index);
}
void ClientSideModel::set_page_term(int index, ::google::protobuf::int32 value) {
  page_term_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.page_term)
}
void ClientSideModel::add_page_term(::google::protobuf::int32 value) {
  page_term_.Add(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.page_term)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientSideModel::page_term() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.page_term)
  return page_term_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientSideModel::mutable_page_term() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.page_term)
  return &page_term_;
}

// repeated fixed32 page_word = 4;
int ClientSideModel::page_word_size() const {
  return page_word_.size();
}
void ClientSideModel::clear_page_word() {
  page_word_.Clear();
}
::google::protobuf::uint32 ClientSideModel::page_word(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.page_word)
  return page_word_.Get(index);
}
void ClientSideModel::set_page_word(int index, ::google::protobuf::uint32 value) {
  page_word_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.page_word)
}
void ClientSideModel::add_page_word(::google::protobuf::uint32 value) {
  page_word_.Add(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.page_word)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ClientSideModel::page_word() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.page_word)
  return page_word_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ClientSideModel::mutable_page_word() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.page_word)
  return &page_word_;
}

// required int32 max_words_per_term = 5;
bool ClientSideModel::has_max_words_per_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientSideModel::set_has_max_words_per_term() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientSideModel::clear_has_max_words_per_term() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientSideModel::clear_max_words_per_term() {
  max_words_per_term_ = 0;
  clear_has_max_words_per_term();
}
::google::protobuf::int32 ClientSideModel::max_words_per_term() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.max_words_per_term)
  return max_words_per_term_;
}
void ClientSideModel::set_max_words_per_term(::google::protobuf::int32 value) {
  set_has_max_words_per_term();
  max_words_per_term_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.max_words_per_term)
}

// optional int32 version = 6;
bool ClientSideModel::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientSideModel::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientSideModel::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientSideModel::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 ClientSideModel::version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.version)
  return version_;
}
void ClientSideModel::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.version)
}

// repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
int ClientSideModel::bad_subnet_size() const {
  return bad_subnet_.size();
}
void ClientSideModel::clear_bad_subnet() {
  bad_subnet_.Clear();
}
const ::safe_browsing::ClientSideModel_IPSubnet& ClientSideModel::bad_subnet(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.bad_subnet)
  return bad_subnet_.Get(index);
}
::safe_browsing::ClientSideModel_IPSubnet* ClientSideModel::mutable_bad_subnet(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.bad_subnet)
  return bad_subnet_.Mutable(index);
}
::safe_browsing::ClientSideModel_IPSubnet* ClientSideModel::add_bad_subnet() {
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.bad_subnet)
  return bad_subnet_.Add();
}
::google::protobuf::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet >*
ClientSideModel::mutable_bad_subnet() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.bad_subnet)
  return &bad_subnet_;
}
const ::google::protobuf::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet >&
ClientSideModel::bad_subnet() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.bad_subnet)
  return bad_subnet_;
}

// optional fixed32 murmur_hash_seed = 8;
bool ClientSideModel::has_murmur_hash_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientSideModel::set_has_murmur_hash_seed() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientSideModel::clear_has_murmur_hash_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientSideModel::clear_murmur_hash_seed() {
  murmur_hash_seed_ = 0u;
  clear_has_murmur_hash_seed();
}
::google::protobuf::uint32 ClientSideModel::murmur_hash_seed() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.murmur_hash_seed)
  return murmur_hash_seed_;
}
void ClientSideModel::set_murmur_hash_seed(::google::protobuf::uint32 value) {
  set_has_murmur_hash_seed();
  murmur_hash_seed_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.murmur_hash_seed)
}

// optional int32 max_shingles_per_page = 9 [default = 200];
bool ClientSideModel::has_max_shingles_per_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientSideModel::set_has_max_shingles_per_page() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientSideModel::clear_has_max_shingles_per_page() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientSideModel::clear_max_shingles_per_page() {
  max_shingles_per_page_ = 200;
  clear_has_max_shingles_per_page();
}
::google::protobuf::int32 ClientSideModel::max_shingles_per_page() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.max_shingles_per_page)
  return max_shingles_per_page_;
}
void ClientSideModel::set_max_shingles_per_page(::google::protobuf::int32 value) {
  set_has_max_shingles_per_page();
  max_shingles_per_page_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.max_shingles_per_page)
}

// optional int32 shingle_size = 10 [default = 4];
bool ClientSideModel::has_shingle_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientSideModel::set_has_shingle_size() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientSideModel::clear_has_shingle_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientSideModel::clear_shingle_size() {
  shingle_size_ = 4;
  clear_has_shingle_size();
}
::google::protobuf::int32 ClientSideModel::shingle_size() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.shingle_size)
  return shingle_size_;
}
void ClientSideModel::set_shingle_size(::google::protobuf::int32 value) {
  set_has_shingle_size();
  shingle_size_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.shingle_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

// @@protoc_insertion_point(global_scope)
