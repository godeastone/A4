// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crx_info.proto

#ifndef PROTOBUF_crx_5finfo_2eproto__INCLUDED
#define PROTOBUF_crx_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace extensions {
class ClientCRXListInfoRequest;
class ClientCRXListInfoRequestDefaultTypeInternal;
extern ClientCRXListInfoRequestDefaultTypeInternal _ClientCRXListInfoRequest_default_instance_;
class ClientCRXListInfoResponse;
class ClientCRXListInfoResponseDefaultTypeInternal;
extern ClientCRXListInfoResponseDefaultTypeInternal _ClientCRXListInfoResponse_default_instance_;
class ClientCRXListInfoResponse_UserMessage;
class ClientCRXListInfoResponse_UserMessageDefaultTypeInternal;
extern ClientCRXListInfoResponse_UserMessageDefaultTypeInternal _ClientCRXListInfoResponse_UserMessage_default_instance_;
}  // namespace extensions

namespace extensions {

namespace protobuf_crx_5finfo_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_crx_5finfo_2eproto

enum ClientCRXListInfoResponse_Verdict {
  ClientCRXListInfoResponse_Verdict_NOT_IN_BLACKLIST = 0,
  ClientCRXListInfoResponse_Verdict_MALWARE = 1,
  ClientCRXListInfoResponse_Verdict_SECURITY_VULNERABILITY = 2,
  ClientCRXListInfoResponse_Verdict_CWS_POLICY_VIOLATION = 3,
  ClientCRXListInfoResponse_Verdict_POTENTIALLY_UNWANTED = 4
};
bool ClientCRXListInfoResponse_Verdict_IsValid(int value);
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse_Verdict_Verdict_MIN = ClientCRXListInfoResponse_Verdict_NOT_IN_BLACKLIST;
const ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse_Verdict_Verdict_MAX = ClientCRXListInfoResponse_Verdict_POTENTIALLY_UNWANTED;
const int ClientCRXListInfoResponse_Verdict_Verdict_ARRAYSIZE = ClientCRXListInfoResponse_Verdict_Verdict_MAX + 1;

// ===================================================================

class ClientCRXListInfoRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:extensions.ClientCRXListInfoRequest) */ {
 public:
  ClientCRXListInfoRequest();
  virtual ~ClientCRXListInfoRequest();

  ClientCRXListInfoRequest(const ClientCRXListInfoRequest& from);

  inline ClientCRXListInfoRequest& operator=(const ClientCRXListInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientCRXListInfoRequest& default_instance();

  static inline const ClientCRXListInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ClientCRXListInfoRequest*>(
               &_ClientCRXListInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ClientCRXListInfoRequest* other);

  // implements Message ----------------------------------------------

  inline ClientCRXListInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientCRXListInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClientCRXListInfoRequest& from);
  void MergeFrom(const ClientCRXListInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientCRXListInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string locale = 2;
  bool has_locale() const;
  void clear_locale();
  static const int kLocaleFieldNumber = 2;
  const ::std::string& locale() const;
  void set_locale(const ::std::string& value);
  #if LANG_CXX11
  void set_locale(::std::string&& value);
  #endif
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  ::std::string* mutable_locale();
  ::std::string* release_locale();
  void set_allocated_locale(::std::string* locale);

  // @@protoc_insertion_point(class_scope:extensions.ClientCRXListInfoRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_locale();
  void clear_has_locale();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr locale_;
  friend struct protobuf_crx_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientCRXListInfoResponse_UserMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:extensions.ClientCRXListInfoResponse.UserMessage) */ {
 public:
  ClientCRXListInfoResponse_UserMessage();
  virtual ~ClientCRXListInfoResponse_UserMessage();

  ClientCRXListInfoResponse_UserMessage(const ClientCRXListInfoResponse_UserMessage& from);

  inline ClientCRXListInfoResponse_UserMessage& operator=(const ClientCRXListInfoResponse_UserMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientCRXListInfoResponse_UserMessage& default_instance();

  static inline const ClientCRXListInfoResponse_UserMessage* internal_default_instance() {
    return reinterpret_cast<const ClientCRXListInfoResponse_UserMessage*>(
               &_ClientCRXListInfoResponse_UserMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ClientCRXListInfoResponse_UserMessage* other);

  // implements Message ----------------------------------------------

  inline ClientCRXListInfoResponse_UserMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientCRXListInfoResponse_UserMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClientCRXListInfoResponse_UserMessage& from);
  void MergeFrom(const ClientCRXListInfoResponse_UserMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientCRXListInfoResponse_UserMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string detail_message = 1;
  bool has_detail_message() const;
  void clear_detail_message();
  static const int kDetailMessageFieldNumber = 1;
  const ::std::string& detail_message() const;
  void set_detail_message(const ::std::string& value);
  #if LANG_CXX11
  void set_detail_message(::std::string&& value);
  #endif
  void set_detail_message(const char* value);
  void set_detail_message(const char* value, size_t size);
  ::std::string* mutable_detail_message();
  ::std::string* release_detail_message();
  void set_allocated_detail_message(::std::string* detail_message);

  // @@protoc_insertion_point(class_scope:extensions.ClientCRXListInfoResponse.UserMessage)
 private:
  void set_has_detail_message();
  void clear_has_detail_message();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr detail_message_;
  friend struct protobuf_crx_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientCRXListInfoResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:extensions.ClientCRXListInfoResponse) */ {
 public:
  ClientCRXListInfoResponse();
  virtual ~ClientCRXListInfoResponse();

  ClientCRXListInfoResponse(const ClientCRXListInfoResponse& from);

  inline ClientCRXListInfoResponse& operator=(const ClientCRXListInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientCRXListInfoResponse& default_instance();

  static inline const ClientCRXListInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ClientCRXListInfoResponse*>(
               &_ClientCRXListInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ClientCRXListInfoResponse* other);

  // implements Message ----------------------------------------------

  inline ClientCRXListInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientCRXListInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClientCRXListInfoResponse& from);
  void MergeFrom(const ClientCRXListInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientCRXListInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ClientCRXListInfoResponse_UserMessage UserMessage;

  typedef ClientCRXListInfoResponse_Verdict Verdict;
  static const Verdict NOT_IN_BLACKLIST =
    ClientCRXListInfoResponse_Verdict_NOT_IN_BLACKLIST;
  static const Verdict MALWARE =
    ClientCRXListInfoResponse_Verdict_MALWARE;
  static const Verdict SECURITY_VULNERABILITY =
    ClientCRXListInfoResponse_Verdict_SECURITY_VULNERABILITY;
  static const Verdict CWS_POLICY_VIOLATION =
    ClientCRXListInfoResponse_Verdict_CWS_POLICY_VIOLATION;
  static const Verdict POTENTIALLY_UNWANTED =
    ClientCRXListInfoResponse_Verdict_POTENTIALLY_UNWANTED;
  static inline bool Verdict_IsValid(int value) {
    return ClientCRXListInfoResponse_Verdict_IsValid(value);
  }
  static const Verdict Verdict_MIN =
    ClientCRXListInfoResponse_Verdict_Verdict_MIN;
  static const Verdict Verdict_MAX =
    ClientCRXListInfoResponse_Verdict_Verdict_MAX;
  static const int Verdict_ARRAYSIZE =
    ClientCRXListInfoResponse_Verdict_Verdict_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
  bool has_user_message() const;
  void clear_user_message();
  static const int kUserMessageFieldNumber = 2;
  const ::extensions::ClientCRXListInfoResponse_UserMessage& user_message() const;
  ::extensions::ClientCRXListInfoResponse_UserMessage* mutable_user_message();
  ::extensions::ClientCRXListInfoResponse_UserMessage* release_user_message();
  void set_allocated_user_message(::extensions::ClientCRXListInfoResponse_UserMessage* user_message);

  // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
  bool has_verdict() const;
  void clear_verdict();
  static const int kVerdictFieldNumber = 1;
  ::extensions::ClientCRXListInfoResponse_Verdict verdict() const;
  void set_verdict(::extensions::ClientCRXListInfoResponse_Verdict value);

  // @@protoc_insertion_point(class_scope:extensions.ClientCRXListInfoResponse)
 private:
  void set_has_verdict();
  void clear_has_verdict();
  void set_has_user_message();
  void clear_has_user_message();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::extensions::ClientCRXListInfoResponse_UserMessage* user_message_;
  int verdict_;
  friend struct protobuf_crx_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientCRXListInfoRequest

// required string id = 1;
inline bool ClientCRXListInfoRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientCRXListInfoRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientCRXListInfoRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientCRXListInfoRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ClientCRXListInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoRequest.id)
  return id_.GetNoArena();
}
inline void ClientCRXListInfoRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoRequest.id)
}
#if LANG_CXX11
inline void ClientCRXListInfoRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:extensions.ClientCRXListInfoRequest.id)
}
#endif
inline void ClientCRXListInfoRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.ClientCRXListInfoRequest.id)
}
inline void ClientCRXListInfoRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.ClientCRXListInfoRequest.id)
}
inline ::std::string* ClientCRXListInfoRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientCRXListInfoRequest::release_id() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoRequest.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientCRXListInfoRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoRequest.id)
}

// optional string locale = 2;
inline bool ClientCRXListInfoRequest::has_locale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientCRXListInfoRequest::set_has_locale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientCRXListInfoRequest::clear_has_locale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientCRXListInfoRequest::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locale();
}
inline const ::std::string& ClientCRXListInfoRequest::locale() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoRequest.locale)
  return locale_.GetNoArena();
}
inline void ClientCRXListInfoRequest::set_locale(const ::std::string& value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoRequest.locale)
}
#if LANG_CXX11
inline void ClientCRXListInfoRequest::set_locale(::std::string&& value) {
  set_has_locale();
  locale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:extensions.ClientCRXListInfoRequest.locale)
}
#endif
inline void ClientCRXListInfoRequest::set_locale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.ClientCRXListInfoRequest.locale)
}
inline void ClientCRXListInfoRequest::set_locale(const char* value, size_t size) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.ClientCRXListInfoRequest.locale)
}
inline ::std::string* ClientCRXListInfoRequest::mutable_locale() {
  set_has_locale();
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoRequest.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientCRXListInfoRequest::release_locale() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoRequest.locale)
  clear_has_locale();
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientCRXListInfoRequest::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoRequest.locale)
}

// -------------------------------------------------------------------

// ClientCRXListInfoResponse_UserMessage

// optional string detail_message = 1;
inline bool ClientCRXListInfoResponse_UserMessage::has_detail_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientCRXListInfoResponse_UserMessage::set_has_detail_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientCRXListInfoResponse_UserMessage::clear_has_detail_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientCRXListInfoResponse_UserMessage::clear_detail_message() {
  detail_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_detail_message();
}
inline const ::std::string& ClientCRXListInfoResponse_UserMessage::detail_message() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
  return detail_message_.GetNoArena();
}
inline void ClientCRXListInfoResponse_UserMessage::set_detail_message(const ::std::string& value) {
  set_has_detail_message();
  detail_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}
#if LANG_CXX11
inline void ClientCRXListInfoResponse_UserMessage::set_detail_message(::std::string&& value) {
  set_has_detail_message();
  detail_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}
#endif
inline void ClientCRXListInfoResponse_UserMessage::set_detail_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_detail_message();
  detail_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}
inline void ClientCRXListInfoResponse_UserMessage::set_detail_message(const char* value, size_t size) {
  set_has_detail_message();
  detail_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}
inline ::std::string* ClientCRXListInfoResponse_UserMessage::mutable_detail_message() {
  set_has_detail_message();
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
  return detail_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientCRXListInfoResponse_UserMessage::release_detail_message() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
  clear_has_detail_message();
  return detail_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientCRXListInfoResponse_UserMessage::set_allocated_detail_message(::std::string* detail_message) {
  if (detail_message != NULL) {
    set_has_detail_message();
  } else {
    clear_has_detail_message();
  }
  detail_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail_message);
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}

// -------------------------------------------------------------------

// ClientCRXListInfoResponse

// optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
inline bool ClientCRXListInfoResponse::has_verdict() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientCRXListInfoResponse::set_has_verdict() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientCRXListInfoResponse::clear_has_verdict() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientCRXListInfoResponse::clear_verdict() {
  verdict_ = 0;
  clear_has_verdict();
}
inline ::extensions::ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::verdict() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoResponse.verdict)
  return static_cast< ::extensions::ClientCRXListInfoResponse_Verdict >(verdict_);
}
inline void ClientCRXListInfoResponse::set_verdict(::extensions::ClientCRXListInfoResponse_Verdict value) {
  assert(::extensions::ClientCRXListInfoResponse_Verdict_IsValid(value));
  set_has_verdict();
  verdict_ = value;
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoResponse.verdict)
}

// optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
inline bool ClientCRXListInfoResponse::has_user_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientCRXListInfoResponse::set_has_user_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientCRXListInfoResponse::clear_has_user_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientCRXListInfoResponse::clear_user_message() {
  if (user_message_ != NULL) user_message_->::extensions::ClientCRXListInfoResponse_UserMessage::Clear();
  clear_has_user_message();
}
inline const ::extensions::ClientCRXListInfoResponse_UserMessage& ClientCRXListInfoResponse::user_message() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoResponse.user_message)
  return user_message_ != NULL ? *user_message_
                         : *::extensions::ClientCRXListInfoResponse_UserMessage::internal_default_instance();
}
inline ::extensions::ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse::mutable_user_message() {
  set_has_user_message();
  if (user_message_ == NULL) {
    user_message_ = new ::extensions::ClientCRXListInfoResponse_UserMessage;
  }
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoResponse.user_message)
  return user_message_;
}
inline ::extensions::ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse::release_user_message() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoResponse.user_message)
  clear_has_user_message();
  ::extensions::ClientCRXListInfoResponse_UserMessage* temp = user_message_;
  user_message_ = NULL;
  return temp;
}
inline void ClientCRXListInfoResponse::set_allocated_user_message(::extensions::ClientCRXListInfoResponse_UserMessage* user_message) {
  delete user_message_;
  user_message_ = user_message;
  if (user_message) {
    set_has_user_message();
  } else {
    clear_has_user_message();
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoResponse.user_message)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace extensions

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::extensions::ClientCRXListInfoResponse_Verdict> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_crx_5finfo_2eproto__INCLUDED
