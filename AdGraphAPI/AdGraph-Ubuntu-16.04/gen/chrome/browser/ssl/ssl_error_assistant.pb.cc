// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_error_assistant.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_error_assistant.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace chrome_browser_ssl {
class CaptivePortalCertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CaptivePortalCert> {
} _CaptivePortalCert_default_instance_;
class MITMSoftwareDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MITMSoftware> {
} _MITMSoftware_default_instance_;
class DynamicInterstitialDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DynamicInterstitial> {
} _DynamicInterstitial_default_instance_;
class SSLErrorAssistantConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSLErrorAssistantConfig> {
} _SSLErrorAssistantConfig_default_instance_;

namespace protobuf_ssl_5ferror_5fassistant_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _CaptivePortalCert_default_instance_.Shutdown();
  _MITMSoftware_default_instance_.Shutdown();
  _DynamicInterstitial_default_instance_.Shutdown();
  _SSLErrorAssistantConfig_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CaptivePortalCert_default_instance_.DefaultConstruct();
  _MITMSoftware_default_instance_.DefaultConstruct();
  _DynamicInterstitial_default_instance_.DefaultConstruct();
  _SSLErrorAssistantConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_ssl_5ferror_5fassistant_2eproto

bool DynamicInterstitial_InterstitialPageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_NONE;
const DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_SSL;
const DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_CAPTIVE_PORTAL;
const DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_MITM_SOFTWARE;
const DynamicInterstitial_InterstitialPageType DynamicInterstitial::InterstitialPageType_MIN;
const DynamicInterstitial_InterstitialPageType DynamicInterstitial::InterstitialPageType_MAX;
const int DynamicInterstitial::InterstitialPageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DynamicInterstitial_CertError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DynamicInterstitial_CertError DynamicInterstitial::UNKNOWN_CERT_ERROR;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_REVOKED;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_INVALID;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_AUTHORITY_INVALID;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_COMMON_NAME_INVALID;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_NAME_CONSTRAINT_VIOLATION;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_WEAK_KEY;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_DATE_INVALID;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_VALIDITY_TOO_LONG;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_NO_REVOCATION_MECHANISM;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_NON_UNIQUE_NAME;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
const DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_SYMANTEC_LEGACY;
const DynamicInterstitial_CertError DynamicInterstitial::CertError_MIN;
const DynamicInterstitial_CertError DynamicInterstitial::CertError_MAX;
const int DynamicInterstitial::CertError_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptivePortalCert::kSha256HashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptivePortalCert::CaptivePortalCert()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5ferror_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.CaptivePortalCert)
}
CaptivePortalCert::CaptivePortalCert(const CaptivePortalCert& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha256_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha256_hash()) {
    sha256_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.CaptivePortalCert)
}

void CaptivePortalCert::SharedCtor() {
  _cached_size_ = 0;
  sha256_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CaptivePortalCert::~CaptivePortalCert() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.CaptivePortalCert)
  SharedDtor();
}

void CaptivePortalCert::SharedDtor() {
  sha256_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CaptivePortalCert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CaptivePortalCert& CaptivePortalCert::default_instance() {
  protobuf_ssl_5ferror_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

CaptivePortalCert* CaptivePortalCert::New(::google::protobuf::Arena* arena) const {
  CaptivePortalCert* n = new CaptivePortalCert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CaptivePortalCert::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.CaptivePortalCert)
  if (has_sha256_hash()) {
    GOOGLE_DCHECK(!sha256_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sha256_hash_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CaptivePortalCert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.CaptivePortalCert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sha256_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sha256_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.CaptivePortalCert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.CaptivePortalCert)
  return false;
#undef DO_
}

void CaptivePortalCert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.CaptivePortalCert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sha256_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sha256_hash(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.CaptivePortalCert)
}

size_t CaptivePortalCert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.CaptivePortalCert)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string sha256_hash = 1;
  if (has_sha256_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sha256_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptivePortalCert::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CaptivePortalCert*>(&from));
}

void CaptivePortalCert::MergeFrom(const CaptivePortalCert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.CaptivePortalCert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sha256_hash()) {
    set_has_sha256_hash();
    sha256_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256_hash_);
  }
}

void CaptivePortalCert::CopyFrom(const CaptivePortalCert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.CaptivePortalCert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptivePortalCert::IsInitialized() const {
  return true;
}

void CaptivePortalCert::Swap(CaptivePortalCert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptivePortalCert::InternalSwap(CaptivePortalCert* other) {
  sha256_hash_.Swap(&other->sha256_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CaptivePortalCert::GetTypeName() const {
  return "chrome_browser_ssl.CaptivePortalCert";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CaptivePortalCert

// optional string sha256_hash = 1;
bool CaptivePortalCert::has_sha256_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CaptivePortalCert::set_has_sha256_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void CaptivePortalCert::clear_has_sha256_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void CaptivePortalCert::clear_sha256_hash() {
  sha256_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha256_hash();
}
const ::std::string& CaptivePortalCert::sha256_hash() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
  return sha256_hash_.GetNoArena();
}
void CaptivePortalCert::set_sha256_hash(const ::std::string& value) {
  set_has_sha256_hash();
  sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
#if LANG_CXX11
void CaptivePortalCert::set_sha256_hash(::std::string&& value) {
  set_has_sha256_hash();
  sha256_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
#endif
void CaptivePortalCert::set_sha256_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha256_hash();
  sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
void CaptivePortalCert::set_sha256_hash(const char* value, size_t size) {
  set_has_sha256_hash();
  sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
::std::string* CaptivePortalCert::mutable_sha256_hash() {
  set_has_sha256_hash();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
  return sha256_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CaptivePortalCert::release_sha256_hash() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
  clear_has_sha256_hash();
  return sha256_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CaptivePortalCert::set_allocated_sha256_hash(::std::string* sha256_hash) {
  if (sha256_hash != NULL) {
    set_has_sha256_hash();
  } else {
    clear_has_sha256_hash();
  }
  sha256_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256_hash);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MITMSoftware::kNameFieldNumber;
const int MITMSoftware::kIssuerCommonNameRegexFieldNumber;
const int MITMSoftware::kIssuerOrganizationRegexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MITMSoftware::MITMSoftware()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5ferror_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.MITMSoftware)
}
MITMSoftware::MITMSoftware(const MITMSoftware& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  issuer_common_name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuer_common_name_regex()) {
    issuer_common_name_regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_common_name_regex_);
  }
  issuer_organization_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuer_organization_regex()) {
    issuer_organization_regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_organization_regex_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.MITMSoftware)
}

void MITMSoftware::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_common_name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_organization_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MITMSoftware::~MITMSoftware() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.MITMSoftware)
  SharedDtor();
}

void MITMSoftware::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_common_name_regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_organization_regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MITMSoftware::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MITMSoftware& MITMSoftware::default_instance() {
  protobuf_ssl_5ferror_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

MITMSoftware* MITMSoftware::New(::google::protobuf::Arena* arena) const {
  MITMSoftware* n = new MITMSoftware;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MITMSoftware::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.MITMSoftware)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_issuer_common_name_regex()) {
      GOOGLE_DCHECK(!issuer_common_name_regex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*issuer_common_name_regex_.UnsafeRawStringPointer())->clear();
    }
    if (has_issuer_organization_regex()) {
      GOOGLE_DCHECK(!issuer_organization_regex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*issuer_organization_regex_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MITMSoftware::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.MITMSoftware)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuer_common_name_regex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer_common_name_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuer_organization_regex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer_organization_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.MITMSoftware)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.MITMSoftware)
  return false;
#undef DO_
}

void MITMSoftware::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.MITMSoftware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string issuer_common_name_regex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->issuer_common_name_regex(), output);
  }

  // optional string issuer_organization_regex = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->issuer_organization_regex(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.MITMSoftware)
}

size_t MITMSoftware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.MITMSoftware)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string issuer_common_name_regex = 2;
    if (has_issuer_common_name_regex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuer_common_name_regex());
    }

    // optional string issuer_organization_regex = 3;
    if (has_issuer_organization_regex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuer_organization_regex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MITMSoftware::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MITMSoftware*>(&from));
}

void MITMSoftware::MergeFrom(const MITMSoftware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.MITMSoftware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_issuer_common_name_regex();
      issuer_common_name_regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_common_name_regex_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_issuer_organization_regex();
      issuer_organization_regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_organization_regex_);
    }
  }
}

void MITMSoftware::CopyFrom(const MITMSoftware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.MITMSoftware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MITMSoftware::IsInitialized() const {
  return true;
}

void MITMSoftware::Swap(MITMSoftware* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MITMSoftware::InternalSwap(MITMSoftware* other) {
  name_.Swap(&other->name_);
  issuer_common_name_regex_.Swap(&other->issuer_common_name_regex_);
  issuer_organization_regex_.Swap(&other->issuer_organization_regex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MITMSoftware::GetTypeName() const {
  return "chrome_browser_ssl.MITMSoftware";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MITMSoftware

// optional string name = 1;
bool MITMSoftware::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MITMSoftware::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MITMSoftware::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MITMSoftware::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& MITMSoftware::name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MITMSoftware.name)
  return name_.GetNoArena();
}
void MITMSoftware::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MITMSoftware.name)
}
#if LANG_CXX11
void MITMSoftware::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.MITMSoftware.name)
}
#endif
void MITMSoftware::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.MITMSoftware.name)
}
void MITMSoftware::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.MITMSoftware.name)
}
::std::string* MITMSoftware::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.MITMSoftware.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MITMSoftware::release_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.MITMSoftware.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MITMSoftware::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.MITMSoftware.name)
}

// optional string issuer_common_name_regex = 2;
bool MITMSoftware::has_issuer_common_name_regex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MITMSoftware::set_has_issuer_common_name_regex() {
  _has_bits_[0] |= 0x00000002u;
}
void MITMSoftware::clear_has_issuer_common_name_regex() {
  _has_bits_[0] &= ~0x00000002u;
}
void MITMSoftware::clear_issuer_common_name_regex() {
  issuer_common_name_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer_common_name_regex();
}
const ::std::string& MITMSoftware::issuer_common_name_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
  return issuer_common_name_regex_.GetNoArena();
}
void MITMSoftware::set_issuer_common_name_regex(const ::std::string& value) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
#if LANG_CXX11
void MITMSoftware::set_issuer_common_name_regex(::std::string&& value) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
#endif
void MITMSoftware::set_issuer_common_name_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
void MITMSoftware::set_issuer_common_name_regex(const char* value, size_t size) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
::std::string* MITMSoftware::mutable_issuer_common_name_regex() {
  set_has_issuer_common_name_regex();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
  return issuer_common_name_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MITMSoftware::release_issuer_common_name_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
  clear_has_issuer_common_name_regex();
  return issuer_common_name_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MITMSoftware::set_allocated_issuer_common_name_regex(::std::string* issuer_common_name_regex) {
  if (issuer_common_name_regex != NULL) {
    set_has_issuer_common_name_regex();
  } else {
    clear_has_issuer_common_name_regex();
  }
  issuer_common_name_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer_common_name_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}

// optional string issuer_organization_regex = 3;
bool MITMSoftware::has_issuer_organization_regex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MITMSoftware::set_has_issuer_organization_regex() {
  _has_bits_[0] |= 0x00000004u;
}
void MITMSoftware::clear_has_issuer_organization_regex() {
  _has_bits_[0] &= ~0x00000004u;
}
void MITMSoftware::clear_issuer_organization_regex() {
  issuer_organization_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer_organization_regex();
}
const ::std::string& MITMSoftware::issuer_organization_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
  return issuer_organization_regex_.GetNoArena();
}
void MITMSoftware::set_issuer_organization_regex(const ::std::string& value) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
#if LANG_CXX11
void MITMSoftware::set_issuer_organization_regex(::std::string&& value) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
#endif
void MITMSoftware::set_issuer_organization_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
void MITMSoftware::set_issuer_organization_regex(const char* value, size_t size) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
::std::string* MITMSoftware::mutable_issuer_organization_regex() {
  set_has_issuer_organization_regex();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
  return issuer_organization_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MITMSoftware::release_issuer_organization_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
  clear_has_issuer_organization_regex();
  return issuer_organization_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MITMSoftware::set_allocated_issuer_organization_regex(::std::string* issuer_organization_regex) {
  if (issuer_organization_regex != NULL) {
    set_has_issuer_organization_regex();
  } else {
    clear_has_issuer_organization_regex();
  }
  issuer_organization_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer_organization_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicInterstitial::kSha256HashFieldNumber;
const int DynamicInterstitial::kIssuerCommonNameRegexFieldNumber;
const int DynamicInterstitial::kIssuerOrganizationRegexFieldNumber;
const int DynamicInterstitial::kMitmSoftwareNameFieldNumber;
const int DynamicInterstitial::kCertErrorFieldNumber;
const int DynamicInterstitial::kInterstitialTypeFieldNumber;
const int DynamicInterstitial::kSupportUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicInterstitial::DynamicInterstitial()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5ferror_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.DynamicInterstitial)
}
DynamicInterstitial::DynamicInterstitial(const DynamicInterstitial& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sha256_hash_(from.sha256_hash_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issuer_common_name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuer_common_name_regex()) {
    issuer_common_name_regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_common_name_regex_);
  }
  issuer_organization_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuer_organization_regex()) {
    issuer_organization_regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_organization_regex_);
  }
  mitm_software_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mitm_software_name()) {
    mitm_software_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mitm_software_name_);
  }
  support_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_support_url()) {
    support_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.support_url_);
  }
  ::memcpy(&cert_error_, &from.cert_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&interstitial_type_) -
    reinterpret_cast<char*>(&cert_error_)) + sizeof(interstitial_type_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.DynamicInterstitial)
}

void DynamicInterstitial::SharedCtor() {
  _cached_size_ = 0;
  issuer_common_name_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_organization_regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mitm_software_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  support_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cert_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interstitial_type_) -
      reinterpret_cast<char*>(&cert_error_)) + sizeof(interstitial_type_));
}

DynamicInterstitial::~DynamicInterstitial() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.DynamicInterstitial)
  SharedDtor();
}

void DynamicInterstitial::SharedDtor() {
  issuer_common_name_regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_organization_regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mitm_software_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  support_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DynamicInterstitial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DynamicInterstitial& DynamicInterstitial::default_instance() {
  protobuf_ssl_5ferror_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

DynamicInterstitial* DynamicInterstitial::New(::google::protobuf::Arena* arena) const {
  DynamicInterstitial* n = new DynamicInterstitial;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynamicInterstitial::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.DynamicInterstitial)
  sha256_hash_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_issuer_common_name_regex()) {
      GOOGLE_DCHECK(!issuer_common_name_regex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*issuer_common_name_regex_.UnsafeRawStringPointer())->clear();
    }
    if (has_issuer_organization_regex()) {
      GOOGLE_DCHECK(!issuer_organization_regex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*issuer_organization_regex_.UnsafeRawStringPointer())->clear();
    }
    if (has_mitm_software_name()) {
      GOOGLE_DCHECK(!mitm_software_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mitm_software_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_support_url()) {
      GOOGLE_DCHECK(!support_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*support_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&cert_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interstitial_type_) -
        reinterpret_cast<char*>(&cert_error_)) + sizeof(interstitial_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DynamicInterstitial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.DynamicInterstitial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string sha256_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sha256_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuer_common_name_regex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer_common_name_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuer_organization_regex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer_organization_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mitm_software_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mitm_software_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::DynamicInterstitial_CertError_IsValid(value)) {
            set_cert_error(static_cast< ::chrome_browser_ssl::DynamicInterstitial_CertError >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType_IsValid(value)) {
            set_interstitial_type(static_cast< ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string support_url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_support_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.DynamicInterstitial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.DynamicInterstitial)
  return false;
#undef DO_
}

void DynamicInterstitial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.DynamicInterstitial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sha256_hash = 1;
  for (int i = 0, n = this->sha256_hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sha256_hash(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string issuer_common_name_regex = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->issuer_common_name_regex(), output);
  }

  // optional string issuer_organization_regex = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->issuer_organization_regex(), output);
  }

  // optional string mitm_software_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mitm_software_name(), output);
  }

  // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->cert_error(), output);
  }

  // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->interstitial_type(), output);
  }

  // optional string support_url = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->support_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.DynamicInterstitial)
}

size_t DynamicInterstitial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.DynamicInterstitial)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string sha256_hash = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sha256_hash_size());
  for (int i = 0, n = this->sha256_hash_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sha256_hash(i));
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string issuer_common_name_regex = 2;
    if (has_issuer_common_name_regex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuer_common_name_regex());
    }

    // optional string issuer_organization_regex = 3;
    if (has_issuer_organization_regex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuer_organization_regex());
    }

    // optional string mitm_software_name = 4;
    if (has_mitm_software_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mitm_software_name());
    }

    // optional string support_url = 7;
    if (has_support_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->support_url());
    }

    // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
    if (has_cert_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cert_error());
    }

    // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
    if (has_interstitial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->interstitial_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicInterstitial::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DynamicInterstitial*>(&from));
}

void DynamicInterstitial::MergeFrom(const DynamicInterstitial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.DynamicInterstitial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sha256_hash_.MergeFrom(from.sha256_hash_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_issuer_common_name_regex();
      issuer_common_name_regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_common_name_regex_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_issuer_organization_regex();
      issuer_organization_regex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_organization_regex_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_mitm_software_name();
      mitm_software_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mitm_software_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_support_url();
      support_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.support_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      cert_error_ = from.cert_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      interstitial_type_ = from.interstitial_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DynamicInterstitial::CopyFrom(const DynamicInterstitial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.DynamicInterstitial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicInterstitial::IsInitialized() const {
  return true;
}

void DynamicInterstitial::Swap(DynamicInterstitial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicInterstitial::InternalSwap(DynamicInterstitial* other) {
  sha256_hash_.InternalSwap(&other->sha256_hash_);
  issuer_common_name_regex_.Swap(&other->issuer_common_name_regex_);
  issuer_organization_regex_.Swap(&other->issuer_organization_regex_);
  mitm_software_name_.Swap(&other->mitm_software_name_);
  support_url_.Swap(&other->support_url_);
  std::swap(cert_error_, other->cert_error_);
  std::swap(interstitial_type_, other->interstitial_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DynamicInterstitial::GetTypeName() const {
  return "chrome_browser_ssl.DynamicInterstitial";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DynamicInterstitial

// repeated string sha256_hash = 1;
int DynamicInterstitial::sha256_hash_size() const {
  return sha256_hash_.size();
}
void DynamicInterstitial::clear_sha256_hash() {
  sha256_hash_.Clear();
}
const ::std::string& DynamicInterstitial::sha256_hash(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_.Get(index);
}
::std::string* DynamicInterstitial::mutable_sha256_hash(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_.Mutable(index);
}
void DynamicInterstitial::set_sha256_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  sha256_hash_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DynamicInterstitial::set_sha256_hash(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  sha256_hash_.Mutable(index)->assign(std::move(value));
}
#endif
void DynamicInterstitial::set_sha256_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sha256_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
void DynamicInterstitial::set_sha256_hash(int index, const char* value, size_t size) {
  sha256_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
::std::string* DynamicInterstitial::add_sha256_hash() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_.Add();
}
void DynamicInterstitial::add_sha256_hash(const ::std::string& value) {
  sha256_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
#if LANG_CXX11
void DynamicInterstitial::add_sha256_hash(::std::string&& value) {
  sha256_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
#endif
void DynamicInterstitial::add_sha256_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sha256_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
void DynamicInterstitial::add_sha256_hash(const char* value, size_t size) {
  sha256_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DynamicInterstitial::sha256_hash() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DynamicInterstitial::mutable_sha256_hash() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return &sha256_hash_;
}

// optional string issuer_common_name_regex = 2;
bool DynamicInterstitial::has_issuer_common_name_regex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DynamicInterstitial::set_has_issuer_common_name_regex() {
  _has_bits_[0] |= 0x00000001u;
}
void DynamicInterstitial::clear_has_issuer_common_name_regex() {
  _has_bits_[0] &= ~0x00000001u;
}
void DynamicInterstitial::clear_issuer_common_name_regex() {
  issuer_common_name_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer_common_name_regex();
}
const ::std::string& DynamicInterstitial::issuer_common_name_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
  return issuer_common_name_regex_.GetNoArena();
}
void DynamicInterstitial::set_issuer_common_name_regex(const ::std::string& value) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
#if LANG_CXX11
void DynamicInterstitial::set_issuer_common_name_regex(::std::string&& value) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
#endif
void DynamicInterstitial::set_issuer_common_name_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
void DynamicInterstitial::set_issuer_common_name_regex(const char* value, size_t size) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
::std::string* DynamicInterstitial::mutable_issuer_common_name_regex() {
  set_has_issuer_common_name_regex();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
  return issuer_common_name_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DynamicInterstitial::release_issuer_common_name_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
  clear_has_issuer_common_name_regex();
  return issuer_common_name_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DynamicInterstitial::set_allocated_issuer_common_name_regex(::std::string* issuer_common_name_regex) {
  if (issuer_common_name_regex != NULL) {
    set_has_issuer_common_name_regex();
  } else {
    clear_has_issuer_common_name_regex();
  }
  issuer_common_name_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer_common_name_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}

// optional string issuer_organization_regex = 3;
bool DynamicInterstitial::has_issuer_organization_regex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DynamicInterstitial::set_has_issuer_organization_regex() {
  _has_bits_[0] |= 0x00000002u;
}
void DynamicInterstitial::clear_has_issuer_organization_regex() {
  _has_bits_[0] &= ~0x00000002u;
}
void DynamicInterstitial::clear_issuer_organization_regex() {
  issuer_organization_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer_organization_regex();
}
const ::std::string& DynamicInterstitial::issuer_organization_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
  return issuer_organization_regex_.GetNoArena();
}
void DynamicInterstitial::set_issuer_organization_regex(const ::std::string& value) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
#if LANG_CXX11
void DynamicInterstitial::set_issuer_organization_regex(::std::string&& value) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
#endif
void DynamicInterstitial::set_issuer_organization_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
void DynamicInterstitial::set_issuer_organization_regex(const char* value, size_t size) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
::std::string* DynamicInterstitial::mutable_issuer_organization_regex() {
  set_has_issuer_organization_regex();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
  return issuer_organization_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DynamicInterstitial::release_issuer_organization_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
  clear_has_issuer_organization_regex();
  return issuer_organization_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DynamicInterstitial::set_allocated_issuer_organization_regex(::std::string* issuer_organization_regex) {
  if (issuer_organization_regex != NULL) {
    set_has_issuer_organization_regex();
  } else {
    clear_has_issuer_organization_regex();
  }
  issuer_organization_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer_organization_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}

// optional string mitm_software_name = 4;
bool DynamicInterstitial::has_mitm_software_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DynamicInterstitial::set_has_mitm_software_name() {
  _has_bits_[0] |= 0x00000004u;
}
void DynamicInterstitial::clear_has_mitm_software_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void DynamicInterstitial::clear_mitm_software_name() {
  mitm_software_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mitm_software_name();
}
const ::std::string& DynamicInterstitial::mitm_software_name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
  return mitm_software_name_.GetNoArena();
}
void DynamicInterstitial::set_mitm_software_name(const ::std::string& value) {
  set_has_mitm_software_name();
  mitm_software_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
#if LANG_CXX11
void DynamicInterstitial::set_mitm_software_name(::std::string&& value) {
  set_has_mitm_software_name();
  mitm_software_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
#endif
void DynamicInterstitial::set_mitm_software_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mitm_software_name();
  mitm_software_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
void DynamicInterstitial::set_mitm_software_name(const char* value, size_t size) {
  set_has_mitm_software_name();
  mitm_software_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
::std::string* DynamicInterstitial::mutable_mitm_software_name() {
  set_has_mitm_software_name();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
  return mitm_software_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DynamicInterstitial::release_mitm_software_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
  clear_has_mitm_software_name();
  return mitm_software_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DynamicInterstitial::set_allocated_mitm_software_name(::std::string* mitm_software_name) {
  if (mitm_software_name != NULL) {
    set_has_mitm_software_name();
  } else {
    clear_has_mitm_software_name();
  }
  mitm_software_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mitm_software_name);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}

// optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
bool DynamicInterstitial::has_cert_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DynamicInterstitial::set_has_cert_error() {
  _has_bits_[0] |= 0x00000010u;
}
void DynamicInterstitial::clear_has_cert_error() {
  _has_bits_[0] &= ~0x00000010u;
}
void DynamicInterstitial::clear_cert_error() {
  cert_error_ = 0;
  clear_has_cert_error();
}
::chrome_browser_ssl::DynamicInterstitial_CertError DynamicInterstitial::cert_error() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.cert_error)
  return static_cast< ::chrome_browser_ssl::DynamicInterstitial_CertError >(cert_error_);
}
void DynamicInterstitial::set_cert_error(::chrome_browser_ssl::DynamicInterstitial_CertError value) {
  assert(::chrome_browser_ssl::DynamicInterstitial_CertError_IsValid(value));
  set_has_cert_error();
  cert_error_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.cert_error)
}

// optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
bool DynamicInterstitial::has_interstitial_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DynamicInterstitial::set_has_interstitial_type() {
  _has_bits_[0] |= 0x00000020u;
}
void DynamicInterstitial::clear_has_interstitial_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void DynamicInterstitial::clear_interstitial_type() {
  interstitial_type_ = 0;
  clear_has_interstitial_type();
}
::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType DynamicInterstitial::interstitial_type() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.interstitial_type)
  return static_cast< ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType >(interstitial_type_);
}
void DynamicInterstitial::set_interstitial_type(::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType value) {
  assert(::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType_IsValid(value));
  set_has_interstitial_type();
  interstitial_type_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.interstitial_type)
}

// optional string support_url = 7;
bool DynamicInterstitial::has_support_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DynamicInterstitial::set_has_support_url() {
  _has_bits_[0] |= 0x00000008u;
}
void DynamicInterstitial::clear_has_support_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void DynamicInterstitial::clear_support_url() {
  support_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_support_url();
}
const ::std::string& DynamicInterstitial::support_url() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.support_url)
  return support_url_.GetNoArena();
}
void DynamicInterstitial::set_support_url(const ::std::string& value) {
  set_has_support_url();
  support_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.support_url)
}
#if LANG_CXX11
void DynamicInterstitial::set_support_url(::std::string&& value) {
  set_has_support_url();
  support_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.support_url)
}
#endif
void DynamicInterstitial::set_support_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_support_url();
  support_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.support_url)
}
void DynamicInterstitial::set_support_url(const char* value, size_t size) {
  set_has_support_url();
  support_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.support_url)
}
::std::string* DynamicInterstitial::mutable_support_url() {
  set_has_support_url();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.support_url)
  return support_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DynamicInterstitial::release_support_url() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.support_url)
  clear_has_support_url();
  return support_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DynamicInterstitial::set_allocated_support_url(::std::string* support_url) {
  if (support_url != NULL) {
    set_has_support_url();
  } else {
    clear_has_support_url();
  }
  support_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), support_url);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.support_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSLErrorAssistantConfig::kVersionIdFieldNumber;
const int SSLErrorAssistantConfig::kCaptivePortalCertFieldNumber;
const int SSLErrorAssistantConfig::kMitmSoftwareFieldNumber;
const int SSLErrorAssistantConfig::kDynamicInterstitialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSLErrorAssistantConfig::SSLErrorAssistantConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ssl_5ferror_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.SSLErrorAssistantConfig)
}
SSLErrorAssistantConfig::SSLErrorAssistantConfig(const SSLErrorAssistantConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      captive_portal_cert_(from.captive_portal_cert_),
      mitm_software_(from.mitm_software_),
      dynamic_interstitial_(from.dynamic_interstitial_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_id_ = from.version_id_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.SSLErrorAssistantConfig)
}

void SSLErrorAssistantConfig::SharedCtor() {
  _cached_size_ = 0;
  version_id_ = 0u;
}

SSLErrorAssistantConfig::~SSLErrorAssistantConfig() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.SSLErrorAssistantConfig)
  SharedDtor();
}

void SSLErrorAssistantConfig::SharedDtor() {
}

void SSLErrorAssistantConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SSLErrorAssistantConfig& SSLErrorAssistantConfig::default_instance() {
  protobuf_ssl_5ferror_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSLErrorAssistantConfig* SSLErrorAssistantConfig::New(::google::protobuf::Arena* arena) const {
  SSLErrorAssistantConfig* n = new SSLErrorAssistantConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSLErrorAssistantConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  captive_portal_cert_.Clear();
  mitm_software_.Clear();
  dynamic_interstitial_.Clear();
  version_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSLErrorAssistantConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_version_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_captive_portal_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mitm_software()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dynamic_interstitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.SSLErrorAssistantConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.SSLErrorAssistantConfig)
  return false;
#undef DO_
}

void SSLErrorAssistantConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version_id(), output);
  }

  // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->captive_portal_cert_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->captive_portal_cert(static_cast<int>(i)), output);
  }

  // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mitm_software_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->mitm_software(static_cast<int>(i)), output);
  }

  // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_interstitial_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dynamic_interstitial(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.SSLErrorAssistantConfig)
}

size_t SSLErrorAssistantConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->captive_portal_cert_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->captive_portal_cert(static_cast<int>(i)));
    }
  }

  // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->mitm_software_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mitm_software(static_cast<int>(i)));
    }
  }

  // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->dynamic_interstitial_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dynamic_interstitial(static_cast<int>(i)));
    }
  }

  // optional uint32 version_id = 1;
  if (has_version_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSLErrorAssistantConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SSLErrorAssistantConfig*>(&from));
}

void SSLErrorAssistantConfig::MergeFrom(const SSLErrorAssistantConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  captive_portal_cert_.MergeFrom(from.captive_portal_cert_);
  mitm_software_.MergeFrom(from.mitm_software_);
  dynamic_interstitial_.MergeFrom(from.dynamic_interstitial_);
  if (from.has_version_id()) {
    set_version_id(from.version_id());
  }
}

void SSLErrorAssistantConfig::CopyFrom(const SSLErrorAssistantConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSLErrorAssistantConfig::IsInitialized() const {
  return true;
}

void SSLErrorAssistantConfig::Swap(SSLErrorAssistantConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSLErrorAssistantConfig::InternalSwap(SSLErrorAssistantConfig* other) {
  captive_portal_cert_.InternalSwap(&other->captive_portal_cert_);
  mitm_software_.InternalSwap(&other->mitm_software_);
  dynamic_interstitial_.InternalSwap(&other->dynamic_interstitial_);
  std::swap(version_id_, other->version_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SSLErrorAssistantConfig::GetTypeName() const {
  return "chrome_browser_ssl.SSLErrorAssistantConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSLErrorAssistantConfig

// optional uint32 version_id = 1;
bool SSLErrorAssistantConfig::has_version_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSLErrorAssistantConfig::set_has_version_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SSLErrorAssistantConfig::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSLErrorAssistantConfig::clear_version_id() {
  version_id_ = 0u;
  clear_has_version_id();
}
::google::protobuf::uint32 SSLErrorAssistantConfig::version_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.version_id)
  return version_id_;
}
void SSLErrorAssistantConfig::set_version_id(::google::protobuf::uint32 value) {
  set_has_version_id();
  version_id_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.SSLErrorAssistantConfig.version_id)
}

// repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
int SSLErrorAssistantConfig::captive_portal_cert_size() const {
  return captive_portal_cert_.size();
}
void SSLErrorAssistantConfig::clear_captive_portal_cert() {
  captive_portal_cert_.Clear();
}
const ::chrome_browser_ssl::CaptivePortalCert& SSLErrorAssistantConfig::captive_portal_cert(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_.Get(index);
}
::chrome_browser_ssl::CaptivePortalCert* SSLErrorAssistantConfig::mutable_captive_portal_cert(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_.Mutable(index);
}
::chrome_browser_ssl::CaptivePortalCert* SSLErrorAssistantConfig::add_captive_portal_cert() {
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_.Add();
}
::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert >*
SSLErrorAssistantConfig::mutable_captive_portal_cert() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return &captive_portal_cert_;
}
const ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert >&
SSLErrorAssistantConfig::captive_portal_cert() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_;
}

// repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
int SSLErrorAssistantConfig::mitm_software_size() const {
  return mitm_software_.size();
}
void SSLErrorAssistantConfig::clear_mitm_software() {
  mitm_software_.Clear();
}
const ::chrome_browser_ssl::MITMSoftware& SSLErrorAssistantConfig::mitm_software(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_.Get(index);
}
::chrome_browser_ssl::MITMSoftware* SSLErrorAssistantConfig::mutable_mitm_software(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_.Mutable(index);
}
::chrome_browser_ssl::MITMSoftware* SSLErrorAssistantConfig::add_mitm_software() {
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_.Add();
}
::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware >*
SSLErrorAssistantConfig::mutable_mitm_software() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return &mitm_software_;
}
const ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware >&
SSLErrorAssistantConfig::mitm_software() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_;
}

// repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
int SSLErrorAssistantConfig::dynamic_interstitial_size() const {
  return dynamic_interstitial_.size();
}
void SSLErrorAssistantConfig::clear_dynamic_interstitial() {
  dynamic_interstitial_.Clear();
}
const ::chrome_browser_ssl::DynamicInterstitial& SSLErrorAssistantConfig::dynamic_interstitial(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_.Get(index);
}
::chrome_browser_ssl::DynamicInterstitial* SSLErrorAssistantConfig::mutable_dynamic_interstitial(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_.Mutable(index);
}
::chrome_browser_ssl::DynamicInterstitial* SSLErrorAssistantConfig::add_dynamic_interstitial() {
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_.Add();
}
::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial >*
SSLErrorAssistantConfig::mutable_dynamic_interstitial() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return &dynamic_interstitial_;
}
const ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial >&
SSLErrorAssistantConfig::dynamic_interstitial() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_ssl

// @@protoc_insertion_point(global_scope)
