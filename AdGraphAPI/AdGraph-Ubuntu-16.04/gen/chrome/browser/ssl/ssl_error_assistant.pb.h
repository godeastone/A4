// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_error_assistant.proto

#ifndef PROTOBUF_ssl_5ferror_5fassistant_2eproto__INCLUDED
#define PROTOBUF_ssl_5ferror_5fassistant_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace chrome_browser_ssl {
class CaptivePortalCert;
class CaptivePortalCertDefaultTypeInternal;
extern CaptivePortalCertDefaultTypeInternal _CaptivePortalCert_default_instance_;
class DynamicInterstitial;
class DynamicInterstitialDefaultTypeInternal;
extern DynamicInterstitialDefaultTypeInternal _DynamicInterstitial_default_instance_;
class MITMSoftware;
class MITMSoftwareDefaultTypeInternal;
extern MITMSoftwareDefaultTypeInternal _MITMSoftware_default_instance_;
class SSLErrorAssistantConfig;
class SSLErrorAssistantConfigDefaultTypeInternal;
extern SSLErrorAssistantConfigDefaultTypeInternal _SSLErrorAssistantConfig_default_instance_;
}  // namespace chrome_browser_ssl

namespace chrome_browser_ssl {

namespace protobuf_ssl_5ferror_5fassistant_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ssl_5ferror_5fassistant_2eproto

enum DynamicInterstitial_InterstitialPageType {
  DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_NONE = 0,
  DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_SSL = 1,
  DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_CAPTIVE_PORTAL = 2,
  DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_MITM_SOFTWARE = 3
};
bool DynamicInterstitial_InterstitialPageType_IsValid(int value);
const DynamicInterstitial_InterstitialPageType DynamicInterstitial_InterstitialPageType_InterstitialPageType_MIN = DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_NONE;
const DynamicInterstitial_InterstitialPageType DynamicInterstitial_InterstitialPageType_InterstitialPageType_MAX = DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_MITM_SOFTWARE;
const int DynamicInterstitial_InterstitialPageType_InterstitialPageType_ARRAYSIZE = DynamicInterstitial_InterstitialPageType_InterstitialPageType_MAX + 1;

enum DynamicInterstitial_CertError {
  DynamicInterstitial_CertError_UNKNOWN_CERT_ERROR = 0,
  DynamicInterstitial_CertError_ERR_CERT_REVOKED = 1,
  DynamicInterstitial_CertError_ERR_CERT_INVALID = 2,
  DynamicInterstitial_CertError_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN = 3,
  DynamicInterstitial_CertError_ERR_CERT_AUTHORITY_INVALID = 4,
  DynamicInterstitial_CertError_ERR_CERT_COMMON_NAME_INVALID = 5,
  DynamicInterstitial_CertError_ERR_CERT_NAME_CONSTRAINT_VIOLATION = 6,
  DynamicInterstitial_CertError_ERR_CERT_WEAK_SIGNATURE_ALGORITHM = 7,
  DynamicInterstitial_CertError_ERR_CERT_WEAK_KEY = 8,
  DynamicInterstitial_CertError_ERR_CERT_DATE_INVALID = 9,
  DynamicInterstitial_CertError_ERR_CERT_VALIDITY_TOO_LONG = 10,
  DynamicInterstitial_CertError_ERR_CERT_UNABLE_TO_CHECK_REVOCATION = 11,
  DynamicInterstitial_CertError_ERR_CERT_NO_REVOCATION_MECHANISM = 12,
  DynamicInterstitial_CertError_ERR_CERT_NON_UNIQUE_NAME = 13,
  DynamicInterstitial_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED = 14,
  DynamicInterstitial_CertError_ERR_CERT_SYMANTEC_LEGACY = 15
};
bool DynamicInterstitial_CertError_IsValid(int value);
const DynamicInterstitial_CertError DynamicInterstitial_CertError_CertError_MIN = DynamicInterstitial_CertError_UNKNOWN_CERT_ERROR;
const DynamicInterstitial_CertError DynamicInterstitial_CertError_CertError_MAX = DynamicInterstitial_CertError_ERR_CERT_SYMANTEC_LEGACY;
const int DynamicInterstitial_CertError_CertError_ARRAYSIZE = DynamicInterstitial_CertError_CertError_MAX + 1;

// ===================================================================

class CaptivePortalCert : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.CaptivePortalCert) */ {
 public:
  CaptivePortalCert();
  virtual ~CaptivePortalCert();

  CaptivePortalCert(const CaptivePortalCert& from);

  inline CaptivePortalCert& operator=(const CaptivePortalCert& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CaptivePortalCert& default_instance();

  static inline const CaptivePortalCert* internal_default_instance() {
    return reinterpret_cast<const CaptivePortalCert*>(
               &_CaptivePortalCert_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CaptivePortalCert* other);

  // implements Message ----------------------------------------------

  inline CaptivePortalCert* New() const PROTOBUF_FINAL { return New(NULL); }

  CaptivePortalCert* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CaptivePortalCert& from);
  void MergeFrom(const CaptivePortalCert& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptivePortalCert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sha256_hash = 1;
  bool has_sha256_hash() const;
  void clear_sha256_hash();
  static const int kSha256HashFieldNumber = 1;
  const ::std::string& sha256_hash() const;
  void set_sha256_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_sha256_hash(::std::string&& value);
  #endif
  void set_sha256_hash(const char* value);
  void set_sha256_hash(const char* value, size_t size);
  ::std::string* mutable_sha256_hash();
  ::std::string* release_sha256_hash();
  void set_allocated_sha256_hash(::std::string* sha256_hash);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.CaptivePortalCert)
 private:
  void set_has_sha256_hash();
  void clear_has_sha256_hash();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sha256_hash_;
  friend struct protobuf_ssl_5ferror_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MITMSoftware : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.MITMSoftware) */ {
 public:
  MITMSoftware();
  virtual ~MITMSoftware();

  MITMSoftware(const MITMSoftware& from);

  inline MITMSoftware& operator=(const MITMSoftware& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MITMSoftware& default_instance();

  static inline const MITMSoftware* internal_default_instance() {
    return reinterpret_cast<const MITMSoftware*>(
               &_MITMSoftware_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MITMSoftware* other);

  // implements Message ----------------------------------------------

  inline MITMSoftware* New() const PROTOBUF_FINAL { return New(NULL); }

  MITMSoftware* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MITMSoftware& from);
  void MergeFrom(const MITMSoftware& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MITMSoftware* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string issuer_common_name_regex = 2;
  bool has_issuer_common_name_regex() const;
  void clear_issuer_common_name_regex();
  static const int kIssuerCommonNameRegexFieldNumber = 2;
  const ::std::string& issuer_common_name_regex() const;
  void set_issuer_common_name_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer_common_name_regex(::std::string&& value);
  #endif
  void set_issuer_common_name_regex(const char* value);
  void set_issuer_common_name_regex(const char* value, size_t size);
  ::std::string* mutable_issuer_common_name_regex();
  ::std::string* release_issuer_common_name_regex();
  void set_allocated_issuer_common_name_regex(::std::string* issuer_common_name_regex);

  // optional string issuer_organization_regex = 3;
  bool has_issuer_organization_regex() const;
  void clear_issuer_organization_regex();
  static const int kIssuerOrganizationRegexFieldNumber = 3;
  const ::std::string& issuer_organization_regex() const;
  void set_issuer_organization_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer_organization_regex(::std::string&& value);
  #endif
  void set_issuer_organization_regex(const char* value);
  void set_issuer_organization_regex(const char* value, size_t size);
  ::std::string* mutable_issuer_organization_regex();
  ::std::string* release_issuer_organization_regex();
  void set_allocated_issuer_organization_regex(::std::string* issuer_organization_regex);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.MITMSoftware)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_issuer_common_name_regex();
  void clear_has_issuer_common_name_regex();
  void set_has_issuer_organization_regex();
  void clear_has_issuer_organization_regex();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr issuer_common_name_regex_;
  ::google::protobuf::internal::ArenaStringPtr issuer_organization_regex_;
  friend struct protobuf_ssl_5ferror_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DynamicInterstitial : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.DynamicInterstitial) */ {
 public:
  DynamicInterstitial();
  virtual ~DynamicInterstitial();

  DynamicInterstitial(const DynamicInterstitial& from);

  inline DynamicInterstitial& operator=(const DynamicInterstitial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DynamicInterstitial& default_instance();

  static inline const DynamicInterstitial* internal_default_instance() {
    return reinterpret_cast<const DynamicInterstitial*>(
               &_DynamicInterstitial_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DynamicInterstitial* other);

  // implements Message ----------------------------------------------

  inline DynamicInterstitial* New() const PROTOBUF_FINAL { return New(NULL); }

  DynamicInterstitial* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DynamicInterstitial& from);
  void MergeFrom(const DynamicInterstitial& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DynamicInterstitial* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DynamicInterstitial_InterstitialPageType InterstitialPageType;
  static const InterstitialPageType INTERSTITIAL_PAGE_NONE =
    DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_NONE;
  static const InterstitialPageType INTERSTITIAL_PAGE_SSL =
    DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_SSL;
  static const InterstitialPageType INTERSTITIAL_PAGE_CAPTIVE_PORTAL =
    DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_CAPTIVE_PORTAL;
  static const InterstitialPageType INTERSTITIAL_PAGE_MITM_SOFTWARE =
    DynamicInterstitial_InterstitialPageType_INTERSTITIAL_PAGE_MITM_SOFTWARE;
  static inline bool InterstitialPageType_IsValid(int value) {
    return DynamicInterstitial_InterstitialPageType_IsValid(value);
  }
  static const InterstitialPageType InterstitialPageType_MIN =
    DynamicInterstitial_InterstitialPageType_InterstitialPageType_MIN;
  static const InterstitialPageType InterstitialPageType_MAX =
    DynamicInterstitial_InterstitialPageType_InterstitialPageType_MAX;
  static const int InterstitialPageType_ARRAYSIZE =
    DynamicInterstitial_InterstitialPageType_InterstitialPageType_ARRAYSIZE;

  typedef DynamicInterstitial_CertError CertError;
  static const CertError UNKNOWN_CERT_ERROR =
    DynamicInterstitial_CertError_UNKNOWN_CERT_ERROR;
  static const CertError ERR_CERT_REVOKED =
    DynamicInterstitial_CertError_ERR_CERT_REVOKED;
  static const CertError ERR_CERT_INVALID =
    DynamicInterstitial_CertError_ERR_CERT_INVALID;
  static const CertError ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN =
    DynamicInterstitial_CertError_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN;
  static const CertError ERR_CERT_AUTHORITY_INVALID =
    DynamicInterstitial_CertError_ERR_CERT_AUTHORITY_INVALID;
  static const CertError ERR_CERT_COMMON_NAME_INVALID =
    DynamicInterstitial_CertError_ERR_CERT_COMMON_NAME_INVALID;
  static const CertError ERR_CERT_NAME_CONSTRAINT_VIOLATION =
    DynamicInterstitial_CertError_ERR_CERT_NAME_CONSTRAINT_VIOLATION;
  static const CertError ERR_CERT_WEAK_SIGNATURE_ALGORITHM =
    DynamicInterstitial_CertError_ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
  static const CertError ERR_CERT_WEAK_KEY =
    DynamicInterstitial_CertError_ERR_CERT_WEAK_KEY;
  static const CertError ERR_CERT_DATE_INVALID =
    DynamicInterstitial_CertError_ERR_CERT_DATE_INVALID;
  static const CertError ERR_CERT_VALIDITY_TOO_LONG =
    DynamicInterstitial_CertError_ERR_CERT_VALIDITY_TOO_LONG;
  static const CertError ERR_CERT_UNABLE_TO_CHECK_REVOCATION =
    DynamicInterstitial_CertError_ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
  static const CertError ERR_CERT_NO_REVOCATION_MECHANISM =
    DynamicInterstitial_CertError_ERR_CERT_NO_REVOCATION_MECHANISM;
  static const CertError ERR_CERT_NON_UNIQUE_NAME =
    DynamicInterstitial_CertError_ERR_CERT_NON_UNIQUE_NAME;
  static const CertError ERR_CERTIFICATE_TRANSPARENCY_REQUIRED =
    DynamicInterstitial_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
  static const CertError ERR_CERT_SYMANTEC_LEGACY =
    DynamicInterstitial_CertError_ERR_CERT_SYMANTEC_LEGACY;
  static inline bool CertError_IsValid(int value) {
    return DynamicInterstitial_CertError_IsValid(value);
  }
  static const CertError CertError_MIN =
    DynamicInterstitial_CertError_CertError_MIN;
  static const CertError CertError_MAX =
    DynamicInterstitial_CertError_CertError_MAX;
  static const int CertError_ARRAYSIZE =
    DynamicInterstitial_CertError_CertError_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated string sha256_hash = 1;
  int sha256_hash_size() const;
  void clear_sha256_hash();
  static const int kSha256HashFieldNumber = 1;
  const ::std::string& sha256_hash(int index) const;
  ::std::string* mutable_sha256_hash(int index);
  void set_sha256_hash(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sha256_hash(int index, ::std::string&& value);
  #endif
  void set_sha256_hash(int index, const char* value);
  void set_sha256_hash(int index, const char* value, size_t size);
  ::std::string* add_sha256_hash();
  void add_sha256_hash(const ::std::string& value);
  #if LANG_CXX11
  void add_sha256_hash(::std::string&& value);
  #endif
  void add_sha256_hash(const char* value);
  void add_sha256_hash(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sha256_hash() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sha256_hash();

  // optional string issuer_common_name_regex = 2;
  bool has_issuer_common_name_regex() const;
  void clear_issuer_common_name_regex();
  static const int kIssuerCommonNameRegexFieldNumber = 2;
  const ::std::string& issuer_common_name_regex() const;
  void set_issuer_common_name_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer_common_name_regex(::std::string&& value);
  #endif
  void set_issuer_common_name_regex(const char* value);
  void set_issuer_common_name_regex(const char* value, size_t size);
  ::std::string* mutable_issuer_common_name_regex();
  ::std::string* release_issuer_common_name_regex();
  void set_allocated_issuer_common_name_regex(::std::string* issuer_common_name_regex);

  // optional string issuer_organization_regex = 3;
  bool has_issuer_organization_regex() const;
  void clear_issuer_organization_regex();
  static const int kIssuerOrganizationRegexFieldNumber = 3;
  const ::std::string& issuer_organization_regex() const;
  void set_issuer_organization_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer_organization_regex(::std::string&& value);
  #endif
  void set_issuer_organization_regex(const char* value);
  void set_issuer_organization_regex(const char* value, size_t size);
  ::std::string* mutable_issuer_organization_regex();
  ::std::string* release_issuer_organization_regex();
  void set_allocated_issuer_organization_regex(::std::string* issuer_organization_regex);

  // optional string mitm_software_name = 4;
  bool has_mitm_software_name() const;
  void clear_mitm_software_name();
  static const int kMitmSoftwareNameFieldNumber = 4;
  const ::std::string& mitm_software_name() const;
  void set_mitm_software_name(const ::std::string& value);
  #if LANG_CXX11
  void set_mitm_software_name(::std::string&& value);
  #endif
  void set_mitm_software_name(const char* value);
  void set_mitm_software_name(const char* value, size_t size);
  ::std::string* mutable_mitm_software_name();
  ::std::string* release_mitm_software_name();
  void set_allocated_mitm_software_name(::std::string* mitm_software_name);

  // optional string support_url = 7;
  bool has_support_url() const;
  void clear_support_url();
  static const int kSupportUrlFieldNumber = 7;
  const ::std::string& support_url() const;
  void set_support_url(const ::std::string& value);
  #if LANG_CXX11
  void set_support_url(::std::string&& value);
  #endif
  void set_support_url(const char* value);
  void set_support_url(const char* value, size_t size);
  ::std::string* mutable_support_url();
  ::std::string* release_support_url();
  void set_allocated_support_url(::std::string* support_url);

  // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
  bool has_cert_error() const;
  void clear_cert_error();
  static const int kCertErrorFieldNumber = 5;
  ::chrome_browser_ssl::DynamicInterstitial_CertError cert_error() const;
  void set_cert_error(::chrome_browser_ssl::DynamicInterstitial_CertError value);

  // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
  bool has_interstitial_type() const;
  void clear_interstitial_type();
  static const int kInterstitialTypeFieldNumber = 6;
  ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType interstitial_type() const;
  void set_interstitial_type(::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.DynamicInterstitial)
 private:
  void set_has_issuer_common_name_regex();
  void clear_has_issuer_common_name_regex();
  void set_has_issuer_organization_regex();
  void clear_has_issuer_organization_regex();
  void set_has_mitm_software_name();
  void clear_has_mitm_software_name();
  void set_has_cert_error();
  void clear_has_cert_error();
  void set_has_interstitial_type();
  void clear_has_interstitial_type();
  void set_has_support_url();
  void clear_has_support_url();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sha256_hash_;
  ::google::protobuf::internal::ArenaStringPtr issuer_common_name_regex_;
  ::google::protobuf::internal::ArenaStringPtr issuer_organization_regex_;
  ::google::protobuf::internal::ArenaStringPtr mitm_software_name_;
  ::google::protobuf::internal::ArenaStringPtr support_url_;
  int cert_error_;
  int interstitial_type_;
  friend struct protobuf_ssl_5ferror_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SSLErrorAssistantConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.SSLErrorAssistantConfig) */ {
 public:
  SSLErrorAssistantConfig();
  virtual ~SSLErrorAssistantConfig();

  SSLErrorAssistantConfig(const SSLErrorAssistantConfig& from);

  inline SSLErrorAssistantConfig& operator=(const SSLErrorAssistantConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SSLErrorAssistantConfig& default_instance();

  static inline const SSLErrorAssistantConfig* internal_default_instance() {
    return reinterpret_cast<const SSLErrorAssistantConfig*>(
               &_SSLErrorAssistantConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SSLErrorAssistantConfig* other);

  // implements Message ----------------------------------------------

  inline SSLErrorAssistantConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  SSLErrorAssistantConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SSLErrorAssistantConfig& from);
  void MergeFrom(const SSLErrorAssistantConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SSLErrorAssistantConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
  int captive_portal_cert_size() const;
  void clear_captive_portal_cert();
  static const int kCaptivePortalCertFieldNumber = 2;
  const ::chrome_browser_ssl::CaptivePortalCert& captive_portal_cert(int index) const;
  ::chrome_browser_ssl::CaptivePortalCert* mutable_captive_portal_cert(int index);
  ::chrome_browser_ssl::CaptivePortalCert* add_captive_portal_cert();
  ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert >*
      mutable_captive_portal_cert();
  const ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert >&
      captive_portal_cert() const;

  // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
  int mitm_software_size() const;
  void clear_mitm_software();
  static const int kMitmSoftwareFieldNumber = 3;
  const ::chrome_browser_ssl::MITMSoftware& mitm_software(int index) const;
  ::chrome_browser_ssl::MITMSoftware* mutable_mitm_software(int index);
  ::chrome_browser_ssl::MITMSoftware* add_mitm_software();
  ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware >*
      mutable_mitm_software();
  const ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware >&
      mitm_software() const;

  // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
  int dynamic_interstitial_size() const;
  void clear_dynamic_interstitial();
  static const int kDynamicInterstitialFieldNumber = 4;
  const ::chrome_browser_ssl::DynamicInterstitial& dynamic_interstitial(int index) const;
  ::chrome_browser_ssl::DynamicInterstitial* mutable_dynamic_interstitial(int index);
  ::chrome_browser_ssl::DynamicInterstitial* add_dynamic_interstitial();
  ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial >*
      mutable_dynamic_interstitial();
  const ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial >&
      dynamic_interstitial() const;

  // optional uint32 version_id = 1;
  bool has_version_id() const;
  void clear_version_id();
  static const int kVersionIdFieldNumber = 1;
  ::google::protobuf::uint32 version_id() const;
  void set_version_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.SSLErrorAssistantConfig)
 private:
  void set_has_version_id();
  void clear_has_version_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert > captive_portal_cert_;
  ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware > mitm_software_;
  ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial > dynamic_interstitial_;
  ::google::protobuf::uint32 version_id_;
  friend struct protobuf_ssl_5ferror_5fassistant_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CaptivePortalCert

// optional string sha256_hash = 1;
inline bool CaptivePortalCert::has_sha256_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaptivePortalCert::set_has_sha256_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaptivePortalCert::clear_has_sha256_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaptivePortalCert::clear_sha256_hash() {
  sha256_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha256_hash();
}
inline const ::std::string& CaptivePortalCert::sha256_hash() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
  return sha256_hash_.GetNoArena();
}
inline void CaptivePortalCert::set_sha256_hash(const ::std::string& value) {
  set_has_sha256_hash();
  sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
#if LANG_CXX11
inline void CaptivePortalCert::set_sha256_hash(::std::string&& value) {
  set_has_sha256_hash();
  sha256_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
#endif
inline void CaptivePortalCert::set_sha256_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha256_hash();
  sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
inline void CaptivePortalCert::set_sha256_hash(const char* value, size_t size) {
  set_has_sha256_hash();
  sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}
inline ::std::string* CaptivePortalCert::mutable_sha256_hash() {
  set_has_sha256_hash();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
  return sha256_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaptivePortalCert::release_sha256_hash() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
  clear_has_sha256_hash();
  return sha256_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaptivePortalCert::set_allocated_sha256_hash(::std::string* sha256_hash) {
  if (sha256_hash != NULL) {
    set_has_sha256_hash();
  } else {
    clear_has_sha256_hash();
  }
  sha256_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256_hash);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CaptivePortalCert.sha256_hash)
}

// -------------------------------------------------------------------

// MITMSoftware

// optional string name = 1;
inline bool MITMSoftware::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MITMSoftware::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MITMSoftware::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MITMSoftware::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MITMSoftware::name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MITMSoftware.name)
  return name_.GetNoArena();
}
inline void MITMSoftware::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MITMSoftware.name)
}
#if LANG_CXX11
inline void MITMSoftware::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.MITMSoftware.name)
}
#endif
inline void MITMSoftware::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.MITMSoftware.name)
}
inline void MITMSoftware::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.MITMSoftware.name)
}
inline ::std::string* MITMSoftware::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.MITMSoftware.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MITMSoftware::release_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.MITMSoftware.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MITMSoftware::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.MITMSoftware.name)
}

// optional string issuer_common_name_regex = 2;
inline bool MITMSoftware::has_issuer_common_name_regex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MITMSoftware::set_has_issuer_common_name_regex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MITMSoftware::clear_has_issuer_common_name_regex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MITMSoftware::clear_issuer_common_name_regex() {
  issuer_common_name_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer_common_name_regex();
}
inline const ::std::string& MITMSoftware::issuer_common_name_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
  return issuer_common_name_regex_.GetNoArena();
}
inline void MITMSoftware::set_issuer_common_name_regex(const ::std::string& value) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
#if LANG_CXX11
inline void MITMSoftware::set_issuer_common_name_regex(::std::string&& value) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
#endif
inline void MITMSoftware::set_issuer_common_name_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
inline void MITMSoftware::set_issuer_common_name_regex(const char* value, size_t size) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}
inline ::std::string* MITMSoftware::mutable_issuer_common_name_regex() {
  set_has_issuer_common_name_regex();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
  return issuer_common_name_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MITMSoftware::release_issuer_common_name_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
  clear_has_issuer_common_name_regex();
  return issuer_common_name_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MITMSoftware::set_allocated_issuer_common_name_regex(::std::string* issuer_common_name_regex) {
  if (issuer_common_name_regex != NULL) {
    set_has_issuer_common_name_regex();
  } else {
    clear_has_issuer_common_name_regex();
  }
  issuer_common_name_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer_common_name_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.MITMSoftware.issuer_common_name_regex)
}

// optional string issuer_organization_regex = 3;
inline bool MITMSoftware::has_issuer_organization_regex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MITMSoftware::set_has_issuer_organization_regex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MITMSoftware::clear_has_issuer_organization_regex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MITMSoftware::clear_issuer_organization_regex() {
  issuer_organization_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer_organization_regex();
}
inline const ::std::string& MITMSoftware::issuer_organization_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
  return issuer_organization_regex_.GetNoArena();
}
inline void MITMSoftware::set_issuer_organization_regex(const ::std::string& value) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
#if LANG_CXX11
inline void MITMSoftware::set_issuer_organization_regex(::std::string&& value) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
#endif
inline void MITMSoftware::set_issuer_organization_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
inline void MITMSoftware::set_issuer_organization_regex(const char* value, size_t size) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}
inline ::std::string* MITMSoftware::mutable_issuer_organization_regex() {
  set_has_issuer_organization_regex();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
  return issuer_organization_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MITMSoftware::release_issuer_organization_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
  clear_has_issuer_organization_regex();
  return issuer_organization_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MITMSoftware::set_allocated_issuer_organization_regex(::std::string* issuer_organization_regex) {
  if (issuer_organization_regex != NULL) {
    set_has_issuer_organization_regex();
  } else {
    clear_has_issuer_organization_regex();
  }
  issuer_organization_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer_organization_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.MITMSoftware.issuer_organization_regex)
}

// -------------------------------------------------------------------

// DynamicInterstitial

// repeated string sha256_hash = 1;
inline int DynamicInterstitial::sha256_hash_size() const {
  return sha256_hash_.size();
}
inline void DynamicInterstitial::clear_sha256_hash() {
  sha256_hash_.Clear();
}
inline const ::std::string& DynamicInterstitial::sha256_hash(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_.Get(index);
}
inline ::std::string* DynamicInterstitial::mutable_sha256_hash(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_.Mutable(index);
}
inline void DynamicInterstitial::set_sha256_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  sha256_hash_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DynamicInterstitial::set_sha256_hash(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  sha256_hash_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DynamicInterstitial::set_sha256_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sha256_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
inline void DynamicInterstitial::set_sha256_hash(int index, const char* value, size_t size) {
  sha256_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
inline ::std::string* DynamicInterstitial::add_sha256_hash() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_.Add();
}
inline void DynamicInterstitial::add_sha256_hash(const ::std::string& value) {
  sha256_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
#if LANG_CXX11
inline void DynamicInterstitial::add_sha256_hash(::std::string&& value) {
  sha256_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
#endif
inline void DynamicInterstitial::add_sha256_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sha256_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
inline void DynamicInterstitial::add_sha256_hash(const char* value, size_t size) {
  sha256_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DynamicInterstitial::sha256_hash() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return sha256_hash_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DynamicInterstitial::mutable_sha256_hash() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.DynamicInterstitial.sha256_hash)
  return &sha256_hash_;
}

// optional string issuer_common_name_regex = 2;
inline bool DynamicInterstitial::has_issuer_common_name_regex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DynamicInterstitial::set_has_issuer_common_name_regex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DynamicInterstitial::clear_has_issuer_common_name_regex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DynamicInterstitial::clear_issuer_common_name_regex() {
  issuer_common_name_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer_common_name_regex();
}
inline const ::std::string& DynamicInterstitial::issuer_common_name_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
  return issuer_common_name_regex_.GetNoArena();
}
inline void DynamicInterstitial::set_issuer_common_name_regex(const ::std::string& value) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
#if LANG_CXX11
inline void DynamicInterstitial::set_issuer_common_name_regex(::std::string&& value) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
#endif
inline void DynamicInterstitial::set_issuer_common_name_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
inline void DynamicInterstitial::set_issuer_common_name_regex(const char* value, size_t size) {
  set_has_issuer_common_name_regex();
  issuer_common_name_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}
inline ::std::string* DynamicInterstitial::mutable_issuer_common_name_regex() {
  set_has_issuer_common_name_regex();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
  return issuer_common_name_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DynamicInterstitial::release_issuer_common_name_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
  clear_has_issuer_common_name_regex();
  return issuer_common_name_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicInterstitial::set_allocated_issuer_common_name_regex(::std::string* issuer_common_name_regex) {
  if (issuer_common_name_regex != NULL) {
    set_has_issuer_common_name_regex();
  } else {
    clear_has_issuer_common_name_regex();
  }
  issuer_common_name_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer_common_name_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.issuer_common_name_regex)
}

// optional string issuer_organization_regex = 3;
inline bool DynamicInterstitial::has_issuer_organization_regex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DynamicInterstitial::set_has_issuer_organization_regex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DynamicInterstitial::clear_has_issuer_organization_regex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DynamicInterstitial::clear_issuer_organization_regex() {
  issuer_organization_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer_organization_regex();
}
inline const ::std::string& DynamicInterstitial::issuer_organization_regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
  return issuer_organization_regex_.GetNoArena();
}
inline void DynamicInterstitial::set_issuer_organization_regex(const ::std::string& value) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
#if LANG_CXX11
inline void DynamicInterstitial::set_issuer_organization_regex(::std::string&& value) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
#endif
inline void DynamicInterstitial::set_issuer_organization_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
inline void DynamicInterstitial::set_issuer_organization_regex(const char* value, size_t size) {
  set_has_issuer_organization_regex();
  issuer_organization_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}
inline ::std::string* DynamicInterstitial::mutable_issuer_organization_regex() {
  set_has_issuer_organization_regex();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
  return issuer_organization_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DynamicInterstitial::release_issuer_organization_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
  clear_has_issuer_organization_regex();
  return issuer_organization_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicInterstitial::set_allocated_issuer_organization_regex(::std::string* issuer_organization_regex) {
  if (issuer_organization_regex != NULL) {
    set_has_issuer_organization_regex();
  } else {
    clear_has_issuer_organization_regex();
  }
  issuer_organization_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer_organization_regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.issuer_organization_regex)
}

// optional string mitm_software_name = 4;
inline bool DynamicInterstitial::has_mitm_software_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DynamicInterstitial::set_has_mitm_software_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DynamicInterstitial::clear_has_mitm_software_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DynamicInterstitial::clear_mitm_software_name() {
  mitm_software_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mitm_software_name();
}
inline const ::std::string& DynamicInterstitial::mitm_software_name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
  return mitm_software_name_.GetNoArena();
}
inline void DynamicInterstitial::set_mitm_software_name(const ::std::string& value) {
  set_has_mitm_software_name();
  mitm_software_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
#if LANG_CXX11
inline void DynamicInterstitial::set_mitm_software_name(::std::string&& value) {
  set_has_mitm_software_name();
  mitm_software_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
#endif
inline void DynamicInterstitial::set_mitm_software_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mitm_software_name();
  mitm_software_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
inline void DynamicInterstitial::set_mitm_software_name(const char* value, size_t size) {
  set_has_mitm_software_name();
  mitm_software_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}
inline ::std::string* DynamicInterstitial::mutable_mitm_software_name() {
  set_has_mitm_software_name();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
  return mitm_software_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DynamicInterstitial::release_mitm_software_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
  clear_has_mitm_software_name();
  return mitm_software_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicInterstitial::set_allocated_mitm_software_name(::std::string* mitm_software_name) {
  if (mitm_software_name != NULL) {
    set_has_mitm_software_name();
  } else {
    clear_has_mitm_software_name();
  }
  mitm_software_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mitm_software_name);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.mitm_software_name)
}

// optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
inline bool DynamicInterstitial::has_cert_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DynamicInterstitial::set_has_cert_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DynamicInterstitial::clear_has_cert_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DynamicInterstitial::clear_cert_error() {
  cert_error_ = 0;
  clear_has_cert_error();
}
inline ::chrome_browser_ssl::DynamicInterstitial_CertError DynamicInterstitial::cert_error() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.cert_error)
  return static_cast< ::chrome_browser_ssl::DynamicInterstitial_CertError >(cert_error_);
}
inline void DynamicInterstitial::set_cert_error(::chrome_browser_ssl::DynamicInterstitial_CertError value) {
  assert(::chrome_browser_ssl::DynamicInterstitial_CertError_IsValid(value));
  set_has_cert_error();
  cert_error_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.cert_error)
}

// optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
inline bool DynamicInterstitial::has_interstitial_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DynamicInterstitial::set_has_interstitial_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DynamicInterstitial::clear_has_interstitial_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DynamicInterstitial::clear_interstitial_type() {
  interstitial_type_ = 0;
  clear_has_interstitial_type();
}
inline ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType DynamicInterstitial::interstitial_type() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.interstitial_type)
  return static_cast< ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType >(interstitial_type_);
}
inline void DynamicInterstitial::set_interstitial_type(::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType value) {
  assert(::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType_IsValid(value));
  set_has_interstitial_type();
  interstitial_type_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.interstitial_type)
}

// optional string support_url = 7;
inline bool DynamicInterstitial::has_support_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DynamicInterstitial::set_has_support_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DynamicInterstitial::clear_has_support_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DynamicInterstitial::clear_support_url() {
  support_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_support_url();
}
inline const ::std::string& DynamicInterstitial::support_url() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.DynamicInterstitial.support_url)
  return support_url_.GetNoArena();
}
inline void DynamicInterstitial::set_support_url(const ::std::string& value) {
  set_has_support_url();
  support_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.DynamicInterstitial.support_url)
}
#if LANG_CXX11
inline void DynamicInterstitial::set_support_url(::std::string&& value) {
  set_has_support_url();
  support_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.DynamicInterstitial.support_url)
}
#endif
inline void DynamicInterstitial::set_support_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_support_url();
  support_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.DynamicInterstitial.support_url)
}
inline void DynamicInterstitial::set_support_url(const char* value, size_t size) {
  set_has_support_url();
  support_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.DynamicInterstitial.support_url)
}
inline ::std::string* DynamicInterstitial::mutable_support_url() {
  set_has_support_url();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.DynamicInterstitial.support_url)
  return support_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DynamicInterstitial::release_support_url() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.DynamicInterstitial.support_url)
  clear_has_support_url();
  return support_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicInterstitial::set_allocated_support_url(::std::string* support_url) {
  if (support_url != NULL) {
    set_has_support_url();
  } else {
    clear_has_support_url();
  }
  support_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), support_url);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.DynamicInterstitial.support_url)
}

// -------------------------------------------------------------------

// SSLErrorAssistantConfig

// optional uint32 version_id = 1;
inline bool SSLErrorAssistantConfig::has_version_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSLErrorAssistantConfig::set_has_version_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSLErrorAssistantConfig::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSLErrorAssistantConfig::clear_version_id() {
  version_id_ = 0u;
  clear_has_version_id();
}
inline ::google::protobuf::uint32 SSLErrorAssistantConfig::version_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.version_id)
  return version_id_;
}
inline void SSLErrorAssistantConfig::set_version_id(::google::protobuf::uint32 value) {
  set_has_version_id();
  version_id_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.SSLErrorAssistantConfig.version_id)
}

// repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
inline int SSLErrorAssistantConfig::captive_portal_cert_size() const {
  return captive_portal_cert_.size();
}
inline void SSLErrorAssistantConfig::clear_captive_portal_cert() {
  captive_portal_cert_.Clear();
}
inline const ::chrome_browser_ssl::CaptivePortalCert& SSLErrorAssistantConfig::captive_portal_cert(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_.Get(index);
}
inline ::chrome_browser_ssl::CaptivePortalCert* SSLErrorAssistantConfig::mutable_captive_portal_cert(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_.Mutable(index);
}
inline ::chrome_browser_ssl::CaptivePortalCert* SSLErrorAssistantConfig::add_captive_portal_cert() {
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert >*
SSLErrorAssistantConfig::mutable_captive_portal_cert() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return &captive_portal_cert_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::CaptivePortalCert >&
SSLErrorAssistantConfig::captive_portal_cert() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.SSLErrorAssistantConfig.captive_portal_cert)
  return captive_portal_cert_;
}

// repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
inline int SSLErrorAssistantConfig::mitm_software_size() const {
  return mitm_software_.size();
}
inline void SSLErrorAssistantConfig::clear_mitm_software() {
  mitm_software_.Clear();
}
inline const ::chrome_browser_ssl::MITMSoftware& SSLErrorAssistantConfig::mitm_software(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_.Get(index);
}
inline ::chrome_browser_ssl::MITMSoftware* SSLErrorAssistantConfig::mutable_mitm_software(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_.Mutable(index);
}
inline ::chrome_browser_ssl::MITMSoftware* SSLErrorAssistantConfig::add_mitm_software() {
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware >*
SSLErrorAssistantConfig::mutable_mitm_software() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return &mitm_software_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::MITMSoftware >&
SSLErrorAssistantConfig::mitm_software() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.SSLErrorAssistantConfig.mitm_software)
  return mitm_software_;
}

// repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
inline int SSLErrorAssistantConfig::dynamic_interstitial_size() const {
  return dynamic_interstitial_.size();
}
inline void SSLErrorAssistantConfig::clear_dynamic_interstitial() {
  dynamic_interstitial_.Clear();
}
inline const ::chrome_browser_ssl::DynamicInterstitial& SSLErrorAssistantConfig::dynamic_interstitial(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_.Get(index);
}
inline ::chrome_browser_ssl::DynamicInterstitial* SSLErrorAssistantConfig::mutable_dynamic_interstitial(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_.Mutable(index);
}
inline ::chrome_browser_ssl::DynamicInterstitial* SSLErrorAssistantConfig::add_dynamic_interstitial() {
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial >*
SSLErrorAssistantConfig::mutable_dynamic_interstitial() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return &dynamic_interstitial_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_browser_ssl::DynamicInterstitial >&
SSLErrorAssistantConfig::dynamic_interstitial() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.SSLErrorAssistantConfig.dynamic_interstitial)
  return dynamic_interstitial_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace chrome_browser_ssl

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::DynamicInterstitial_CertError> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ssl_5ferror_5fassistant_2eproto__INCLUDED
