// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cert_logger.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cert_logger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace chrome_browser_ssl {
class CertLoggerInterstitialInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CertLoggerInterstitialInfo> {
} _CertLoggerInterstitialInfo_default_instance_;
class CertLoggerFeaturesInfo_NetworkTimeQueryingInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CertLoggerFeaturesInfo_NetworkTimeQueryingInfo> {
} _CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_default_instance_;
class CertLoggerFeaturesInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CertLoggerFeaturesInfo> {
} _CertLoggerFeaturesInfo_default_instance_;
class CertLoggerRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CertLoggerRequest> {
} _CertLoggerRequest_default_instance_;
class TrialVerificationInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrialVerificationInfo> {
} _TrialVerificationInfo_default_instance_;

namespace protobuf_cert_5flogger_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _CertLoggerInterstitialInfo_default_instance_.Shutdown();
  _CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_default_instance_.Shutdown();
  _CertLoggerFeaturesInfo_default_instance_.Shutdown();
  _CertLoggerRequest_default_instance_.Shutdown();
  _TrialVerificationInfo_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CertLoggerInterstitialInfo_default_instance_.DefaultConstruct();
  _CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_default_instance_.DefaultConstruct();
  _CertLoggerFeaturesInfo_default_instance_.DefaultConstruct();
  _CertLoggerRequest_default_instance_.DefaultConstruct();
  _TrialVerificationInfo_default_instance_.DefaultConstruct();
  _CertLoggerFeaturesInfo_default_instance_.get_mutable()->network_time_querying_info_ = const_cast< ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo*>(
      ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::internal_default_instance());
  _CertLoggerFeaturesInfo_default_instance_.get_mutable()->trial_verification_info_ = const_cast< ::chrome_browser_ssl::TrialVerificationInfo*>(
      ::chrome_browser_ssl::TrialVerificationInfo::internal_default_instance());
  _CertLoggerRequest_default_instance_.get_mutable()->interstitial_info_ = const_cast< ::chrome_browser_ssl::CertLoggerInterstitialInfo*>(
      ::chrome_browser_ssl::CertLoggerInterstitialInfo::internal_default_instance());
  _CertLoggerRequest_default_instance_.get_mutable()->features_info_ = const_cast< ::chrome_browser_ssl::CertLoggerFeaturesInfo*>(
      ::chrome_browser_ssl::CertLoggerFeaturesInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_cert_5flogger_2eproto

bool CertLoggerInterstitialInfo_InterstitialReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::UNKNOWN_INTERSTITIAL_REASON;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::INTERSTITIAL_SSL;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::INTERSTITIAL_CAPTIVE_PORTAL;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::INTERSTITIAL_CLOCK;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::INTERSTITIAL_SUPERFISH;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::INTERSTITIAL_MITM_SOFTWARE;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::InterstitialReason_MIN;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::InterstitialReason_MAX;
const int CertLoggerInterstitialInfo::InterstitialReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::NETWORK_TIME_FETCHES_UNKNOWN;
const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::NETWORK_TIME_FETCHES_BACKGROUND_ONLY;
const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::NETWORK_TIME_FETCHES_ON_DEMAND_ONLY;
const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::NETWORK_TIME_FETCHES_IN_BACKGROUND_AND_ON_DEMAND;
const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::NetworkTimeFetchBehavior_MIN;
const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::NetworkTimeFetchBehavior_MAX;
const int CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::NetworkTimeFetchBehavior_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo::ANDROID_AIA_FETCHING_UNKNOWN;
const CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo::ANDROID_AIA_FETCHING_ENABLED;
const CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo::ANDROID_AIA_FETCHING_DISABLED;
const CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo::AndroidAIAFetchingStatus_MIN;
const CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo::AndroidAIAFetchingStatus_MAX;
const int CertLoggerFeaturesInfo::AndroidAIAFetchingStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CertLoggerRequest_CertError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CertLoggerRequest_CertError CertLoggerRequest::UNKNOWN_CERT_ERROR;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_REVOKED;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_INVALID;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_AUTHORITY_INVALID;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_COMMON_NAME_INVALID;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_NAME_CONSTRAINT_VIOLATION;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_WEAK_KEY;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_DATE_INVALID;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_VALIDITY_TOO_LONG;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_NO_REVOCATION_MECHANISM;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_NON_UNIQUE_NAME;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
const CertLoggerRequest_CertError CertLoggerRequest::ERR_CERT_SYMANTEC_LEGACY;
const CertLoggerRequest_CertError CertLoggerRequest::CertError_MIN;
const CertLoggerRequest_CertError CertLoggerRequest::CertError_MAX;
const int CertLoggerRequest::CertError_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CertLoggerRequest_ChromeChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CertLoggerRequest_ChromeChannel CertLoggerRequest::CHROME_CHANNEL_NONE;
const CertLoggerRequest_ChromeChannel CertLoggerRequest::CHROME_CHANNEL_UNKNOWN;
const CertLoggerRequest_ChromeChannel CertLoggerRequest::CHROME_CHANNEL_DEV;
const CertLoggerRequest_ChromeChannel CertLoggerRequest::CHROME_CHANNEL_CANARY;
const CertLoggerRequest_ChromeChannel CertLoggerRequest::CHROME_CHANNEL_BETA;
const CertLoggerRequest_ChromeChannel CertLoggerRequest::CHROME_CHANNEL_STABLE;
const CertLoggerRequest_ChromeChannel CertLoggerRequest::ChromeChannel_MIN;
const CertLoggerRequest_ChromeChannel CertLoggerRequest::ChromeChannel_MAX;
const int CertLoggerRequest::ChromeChannel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CertLoggerRequest_CertStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CertLoggerRequest_CertStatus CertLoggerRequest::UNKNOWN_CERT_STATUS;
const CertLoggerRequest_CertStatus CertLoggerRequest::STATUS_IS_EV;
const CertLoggerRequest_CertStatus CertLoggerRequest::STATUS_REV_CHECKING_ENABLED;
const CertLoggerRequest_CertStatus CertLoggerRequest::STATUS_SHA1_SIGNATURE_PRESENT;
const CertLoggerRequest_CertStatus CertLoggerRequest::STATUS_CT_COMPLIANCE_FAILED;
const CertLoggerRequest_CertStatus CertLoggerRequest::CertStatus_MIN;
const CertLoggerRequest_CertStatus CertLoggerRequest::CertStatus_MAX;
const int CertLoggerRequest::CertStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TrialVerificationInfo_VerifyFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo::UNKNOWN_VERIFY_FLAG;
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo::VERIFY_REV_CHECKING_ENABLED;
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo::VERIFY_EV_CERT;
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo::VERIFY_CERT_IO_ENABLED;
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo::VERIFY_REV_CHECKING_ENABLED_EV_ONLY;
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo::VERIFY_REV_CHECKING_REQUIRED_LOCAL_ANCHORS;
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo::VERIFY_ENABLE_SHA1_LOCAL_ANCHORS;
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo::VERIFY_DISABLE_SYMANTEC_ENFORCEMENT;
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo::VerifyFlags_MIN;
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo::VerifyFlags_MAX;
const int TrialVerificationInfo::VerifyFlags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertLoggerInterstitialInfo::kInterstitialReasonFieldNumber;
const int CertLoggerInterstitialInfo::kUserProceededFieldNumber;
const int CertLoggerInterstitialInfo::kOverridableFieldNumber;
const int CertLoggerInterstitialInfo::kInterstitialCreatedTimeUsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertLoggerInterstitialInfo::CertLoggerInterstitialInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cert_5flogger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.CertLoggerInterstitialInfo)
}
CertLoggerInterstitialInfo::CertLoggerInterstitialInfo(const CertLoggerInterstitialInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interstitial_reason_, &from.interstitial_reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&interstitial_created_time_usec_) -
    reinterpret_cast<char*>(&interstitial_reason_)) + sizeof(interstitial_created_time_usec_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.CertLoggerInterstitialInfo)
}

void CertLoggerInterstitialInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&interstitial_reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interstitial_created_time_usec_) -
      reinterpret_cast<char*>(&interstitial_reason_)) + sizeof(interstitial_created_time_usec_));
}

CertLoggerInterstitialInfo::~CertLoggerInterstitialInfo() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.CertLoggerInterstitialInfo)
  SharedDtor();
}

void CertLoggerInterstitialInfo::SharedDtor() {
}

void CertLoggerInterstitialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CertLoggerInterstitialInfo& CertLoggerInterstitialInfo::default_instance() {
  protobuf_cert_5flogger_2eproto::InitDefaults();
  return *internal_default_instance();
}

CertLoggerInterstitialInfo* CertLoggerInterstitialInfo::New(::google::protobuf::Arena* arena) const {
  CertLoggerInterstitialInfo* n = new CertLoggerInterstitialInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertLoggerInterstitialInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.CertLoggerInterstitialInfo)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&interstitial_reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interstitial_created_time_usec_) -
        reinterpret_cast<char*>(&interstitial_reason_)) + sizeof(interstitial_created_time_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CertLoggerInterstitialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.CertLoggerInterstitialInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chrome_browser_ssl.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason_IsValid(value)) {
            set_interstitial_reason(static_cast< ::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool user_proceeded = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_proceeded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_proceeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool overridable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_overridable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overridable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 interstitial_created_time_usec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_interstitial_created_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interstitial_created_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.CertLoggerInterstitialInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.CertLoggerInterstitialInfo)
  return false;
#undef DO_
}

void CertLoggerInterstitialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.CertLoggerInterstitialInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chrome_browser_ssl.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->interstitial_reason(), output);
  }

  // optional bool user_proceeded = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->user_proceeded(), output);
  }

  // optional bool overridable = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->overridable(), output);
  }

  // optional int64 interstitial_created_time_usec = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->interstitial_created_time_usec(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.CertLoggerInterstitialInfo)
}

size_t CertLoggerInterstitialInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.CertLoggerInterstitialInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional .chrome_browser_ssl.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
    if (has_interstitial_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->interstitial_reason());
    }

    // optional bool user_proceeded = 2;
    if (has_user_proceeded()) {
      total_size += 1 + 1;
    }

    // optional bool overridable = 3;
    if (has_overridable()) {
      total_size += 1 + 1;
    }

    // optional int64 interstitial_created_time_usec = 4;
    if (has_interstitial_created_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->interstitial_created_time_usec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertLoggerInterstitialInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CertLoggerInterstitialInfo*>(&from));
}

void CertLoggerInterstitialInfo::MergeFrom(const CertLoggerInterstitialInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.CertLoggerInterstitialInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      interstitial_reason_ = from.interstitial_reason_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_proceeded_ = from.user_proceeded_;
    }
    if (cached_has_bits & 0x00000004u) {
      overridable_ = from.overridable_;
    }
    if (cached_has_bits & 0x00000008u) {
      interstitial_created_time_usec_ = from.interstitial_created_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CertLoggerInterstitialInfo::CopyFrom(const CertLoggerInterstitialInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.CertLoggerInterstitialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertLoggerInterstitialInfo::IsInitialized() const {
  return true;
}

void CertLoggerInterstitialInfo::Swap(CertLoggerInterstitialInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertLoggerInterstitialInfo::InternalSwap(CertLoggerInterstitialInfo* other) {
  std::swap(interstitial_reason_, other->interstitial_reason_);
  std::swap(user_proceeded_, other->user_proceeded_);
  std::swap(overridable_, other->overridable_);
  std::swap(interstitial_created_time_usec_, other->interstitial_created_time_usec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CertLoggerInterstitialInfo::GetTypeName() const {
  return "chrome_browser_ssl.CertLoggerInterstitialInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertLoggerInterstitialInfo

// optional .chrome_browser_ssl.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
bool CertLoggerInterstitialInfo::has_interstitial_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CertLoggerInterstitialInfo::set_has_interstitial_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void CertLoggerInterstitialInfo::clear_has_interstitial_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void CertLoggerInterstitialInfo::clear_interstitial_reason() {
  interstitial_reason_ = 0;
  clear_has_interstitial_reason();
}
::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::interstitial_reason() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_reason)
  return static_cast< ::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason >(interstitial_reason_);
}
void CertLoggerInterstitialInfo::set_interstitial_reason(::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason value) {
  assert(::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason_IsValid(value));
  set_has_interstitial_reason();
  interstitial_reason_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_reason)
}

// optional bool user_proceeded = 2;
bool CertLoggerInterstitialInfo::has_user_proceeded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CertLoggerInterstitialInfo::set_has_user_proceeded() {
  _has_bits_[0] |= 0x00000002u;
}
void CertLoggerInterstitialInfo::clear_has_user_proceeded() {
  _has_bits_[0] &= ~0x00000002u;
}
void CertLoggerInterstitialInfo::clear_user_proceeded() {
  user_proceeded_ = false;
  clear_has_user_proceeded();
}
bool CertLoggerInterstitialInfo::user_proceeded() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.user_proceeded)
  return user_proceeded_;
}
void CertLoggerInterstitialInfo::set_user_proceeded(bool value) {
  set_has_user_proceeded();
  user_proceeded_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.user_proceeded)
}

// optional bool overridable = 3;
bool CertLoggerInterstitialInfo::has_overridable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CertLoggerInterstitialInfo::set_has_overridable() {
  _has_bits_[0] |= 0x00000004u;
}
void CertLoggerInterstitialInfo::clear_has_overridable() {
  _has_bits_[0] &= ~0x00000004u;
}
void CertLoggerInterstitialInfo::clear_overridable() {
  overridable_ = false;
  clear_has_overridable();
}
bool CertLoggerInterstitialInfo::overridable() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.overridable)
  return overridable_;
}
void CertLoggerInterstitialInfo::set_overridable(bool value) {
  set_has_overridable();
  overridable_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.overridable)
}

// optional int64 interstitial_created_time_usec = 4;
bool CertLoggerInterstitialInfo::has_interstitial_created_time_usec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CertLoggerInterstitialInfo::set_has_interstitial_created_time_usec() {
  _has_bits_[0] |= 0x00000008u;
}
void CertLoggerInterstitialInfo::clear_has_interstitial_created_time_usec() {
  _has_bits_[0] &= ~0x00000008u;
}
void CertLoggerInterstitialInfo::clear_interstitial_created_time_usec() {
  interstitial_created_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_interstitial_created_time_usec();
}
::google::protobuf::int64 CertLoggerInterstitialInfo::interstitial_created_time_usec() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_created_time_usec)
  return interstitial_created_time_usec_;
}
void CertLoggerInterstitialInfo::set_interstitial_created_time_usec(::google::protobuf::int64 value) {
  set_has_interstitial_created_time_usec();
  interstitial_created_time_usec_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_created_time_usec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::kNetworkTimeQueriesEnabledFieldNumber;
const int CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::kNetworkTimeQueryBehaviorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cert_5flogger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
}
CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&network_time_queries_enabled_, &from.network_time_queries_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_time_query_behavior_) -
    reinterpret_cast<char*>(&network_time_queries_enabled_)) + sizeof(network_time_query_behavior_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
}

void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&network_time_queries_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_time_query_behavior_) -
      reinterpret_cast<char*>(&network_time_queries_enabled_)) + sizeof(network_time_query_behavior_));
}

CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::~CertLoggerFeaturesInfo_NetworkTimeQueryingInfo() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
  SharedDtor();
}

void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::SharedDtor() {
}

void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::default_instance() {
  protobuf_cert_5flogger_2eproto::InitDefaults();
  return *internal_default_instance();
}

CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::New(::google::protobuf::Arena* arena) const {
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* n = new CertLoggerFeaturesInfo_NetworkTimeQueryingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&network_time_queries_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&network_time_query_behavior_) -
        reinterpret_cast<char*>(&network_time_queries_enabled_)) + sizeof(network_time_query_behavior_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool network_time_queries_enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_network_time_queries_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &network_time_queries_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.NetworkTimeFetchBehavior network_time_query_behavior = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_IsValid(value)) {
            set_network_time_query_behavior(static_cast< ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
  return false;
#undef DO_
}

void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool network_time_queries_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->network_time_queries_enabled(), output);
  }

  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.NetworkTimeFetchBehavior network_time_query_behavior = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->network_time_query_behavior(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
}

size_t CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool network_time_queries_enabled = 1;
    if (has_network_time_queries_enabled()) {
      total_size += 1 + 1;
    }

    // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.NetworkTimeFetchBehavior network_time_query_behavior = 2;
    if (has_network_time_query_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_time_query_behavior());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo*>(&from));
}

void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::MergeFrom(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      network_time_queries_enabled_ = from.network_time_queries_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      network_time_query_behavior_ = from.network_time_query_behavior_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::CopyFrom(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::IsInitialized() const {
  return true;
}

void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::Swap(CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::InternalSwap(CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* other) {
  std::swap(network_time_queries_enabled_, other->network_time_queries_enabled_);
  std::swap(network_time_query_behavior_, other->network_time_query_behavior_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::GetTypeName() const {
  return "chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertLoggerFeaturesInfo_NetworkTimeQueryingInfo

// optional bool network_time_queries_enabled = 1;
bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::has_network_time_queries_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::set_has_network_time_queries_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::clear_has_network_time_queries_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::clear_network_time_queries_enabled() {
  network_time_queries_enabled_ = false;
  clear_has_network_time_queries_enabled();
}
bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::network_time_queries_enabled() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_queries_enabled)
  return network_time_queries_enabled_;
}
void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::set_network_time_queries_enabled(bool value) {
  set_has_network_time_queries_enabled();
  network_time_queries_enabled_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_queries_enabled)
}

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.NetworkTimeFetchBehavior network_time_query_behavior = 2;
bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::has_network_time_query_behavior() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::set_has_network_time_query_behavior() {
  _has_bits_[0] |= 0x00000002u;
}
void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::clear_has_network_time_query_behavior() {
  _has_bits_[0] &= ~0x00000002u;
}
void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::clear_network_time_query_behavior() {
  network_time_query_behavior_ = 0;
  clear_has_network_time_query_behavior();
}
::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::network_time_query_behavior() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_query_behavior)
  return static_cast< ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior >(network_time_query_behavior_);
}
void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::set_network_time_query_behavior(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior value) {
  assert(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_IsValid(value));
  set_has_network_time_query_behavior();
  network_time_query_behavior_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_query_behavior)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertLoggerFeaturesInfo::kNetworkTimeQueryingInfoFieldNumber;
const int CertLoggerFeaturesInfo::kAndroidAiaFetchingStatusFieldNumber;
const int CertLoggerFeaturesInfo::kTrialVerificationInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertLoggerFeaturesInfo::CertLoggerFeaturesInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cert_5flogger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.CertLoggerFeaturesInfo)
}
CertLoggerFeaturesInfo::CertLoggerFeaturesInfo(const CertLoggerFeaturesInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_network_time_querying_info()) {
    network_time_querying_info_ = new ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo(*from.network_time_querying_info_);
  } else {
    network_time_querying_info_ = NULL;
  }
  if (from.has_trial_verification_info()) {
    trial_verification_info_ = new ::chrome_browser_ssl::TrialVerificationInfo(*from.trial_verification_info_);
  } else {
    trial_verification_info_ = NULL;
  }
  android_aia_fetching_status_ = from.android_aia_fetching_status_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.CertLoggerFeaturesInfo)
}

void CertLoggerFeaturesInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&network_time_querying_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&android_aia_fetching_status_) -
      reinterpret_cast<char*>(&network_time_querying_info_)) + sizeof(android_aia_fetching_status_));
}

CertLoggerFeaturesInfo::~CertLoggerFeaturesInfo() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.CertLoggerFeaturesInfo)
  SharedDtor();
}

void CertLoggerFeaturesInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete network_time_querying_info_;
  }
  if (this != internal_default_instance()) {
    delete trial_verification_info_;
  }
}

void CertLoggerFeaturesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CertLoggerFeaturesInfo& CertLoggerFeaturesInfo::default_instance() {
  protobuf_cert_5flogger_2eproto::InitDefaults();
  return *internal_default_instance();
}

CertLoggerFeaturesInfo* CertLoggerFeaturesInfo::New(::google::protobuf::Arena* arena) const {
  CertLoggerFeaturesInfo* n = new CertLoggerFeaturesInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertLoggerFeaturesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.CertLoggerFeaturesInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_network_time_querying_info()) {
      GOOGLE_DCHECK(network_time_querying_info_ != NULL);
      network_time_querying_info_->::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::Clear();
    }
    if (has_trial_verification_info()) {
      GOOGLE_DCHECK(trial_verification_info_ != NULL);
      trial_verification_info_->::chrome_browser_ssl::TrialVerificationInfo::Clear();
    }
  }
  android_aia_fetching_status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CertLoggerFeaturesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.CertLoggerFeaturesInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo network_time_querying_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_time_querying_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.AndroidAIAFetchingStatus android_aia_fetching_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_IsValid(value)) {
            set_android_aia_fetching_status(static_cast< ::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_ssl.TrialVerificationInfo trial_verification_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trial_verification_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.CertLoggerFeaturesInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.CertLoggerFeaturesInfo)
  return false;
#undef DO_
}

void CertLoggerFeaturesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.CertLoggerFeaturesInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo network_time_querying_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->network_time_querying_info_, output);
  }

  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.AndroidAIAFetchingStatus android_aia_fetching_status = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->android_aia_fetching_status(), output);
  }

  // optional .chrome_browser_ssl.TrialVerificationInfo trial_verification_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->trial_verification_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.CertLoggerFeaturesInfo)
}

size_t CertLoggerFeaturesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.CertLoggerFeaturesInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo network_time_querying_info = 1;
    if (has_network_time_querying_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->network_time_querying_info_);
    }

    // optional .chrome_browser_ssl.TrialVerificationInfo trial_verification_info = 3;
    if (has_trial_verification_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trial_verification_info_);
    }

    // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.AndroidAIAFetchingStatus android_aia_fetching_status = 2;
    if (has_android_aia_fetching_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->android_aia_fetching_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertLoggerFeaturesInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CertLoggerFeaturesInfo*>(&from));
}

void CertLoggerFeaturesInfo::MergeFrom(const CertLoggerFeaturesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.CertLoggerFeaturesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_network_time_querying_info()->::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::MergeFrom(from.network_time_querying_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trial_verification_info()->::chrome_browser_ssl::TrialVerificationInfo::MergeFrom(from.trial_verification_info());
    }
    if (cached_has_bits & 0x00000004u) {
      android_aia_fetching_status_ = from.android_aia_fetching_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CertLoggerFeaturesInfo::CopyFrom(const CertLoggerFeaturesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.CertLoggerFeaturesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertLoggerFeaturesInfo::IsInitialized() const {
  if (has_trial_verification_info()) {
    if (!this->trial_verification_info_->IsInitialized()) return false;
  }
  return true;
}

void CertLoggerFeaturesInfo::Swap(CertLoggerFeaturesInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertLoggerFeaturesInfo::InternalSwap(CertLoggerFeaturesInfo* other) {
  std::swap(network_time_querying_info_, other->network_time_querying_info_);
  std::swap(trial_verification_info_, other->trial_verification_info_);
  std::swap(android_aia_fetching_status_, other->android_aia_fetching_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CertLoggerFeaturesInfo::GetTypeName() const {
  return "chrome_browser_ssl.CertLoggerFeaturesInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertLoggerFeaturesInfo

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo network_time_querying_info = 1;
bool CertLoggerFeaturesInfo::has_network_time_querying_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CertLoggerFeaturesInfo::set_has_network_time_querying_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CertLoggerFeaturesInfo::clear_has_network_time_querying_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CertLoggerFeaturesInfo::clear_network_time_querying_info() {
  if (network_time_querying_info_ != NULL) network_time_querying_info_->::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::Clear();
  clear_has_network_time_querying_info();
}
const ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& CertLoggerFeaturesInfo::network_time_querying_info() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
  return network_time_querying_info_ != NULL ? *network_time_querying_info_
                         : *::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::internal_default_instance();
}
::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* CertLoggerFeaturesInfo::mutable_network_time_querying_info() {
  set_has_network_time_querying_info();
  if (network_time_querying_info_ == NULL) {
    network_time_querying_info_ = new ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
  return network_time_querying_info_;
}
::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* CertLoggerFeaturesInfo::release_network_time_querying_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
  clear_has_network_time_querying_info();
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* temp = network_time_querying_info_;
  network_time_querying_info_ = NULL;
  return temp;
}
void CertLoggerFeaturesInfo::set_allocated_network_time_querying_info(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* network_time_querying_info) {
  delete network_time_querying_info_;
  network_time_querying_info_ = network_time_querying_info;
  if (network_time_querying_info) {
    set_has_network_time_querying_info();
  } else {
    clear_has_network_time_querying_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
}

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo.AndroidAIAFetchingStatus android_aia_fetching_status = 2;
bool CertLoggerFeaturesInfo::has_android_aia_fetching_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CertLoggerFeaturesInfo::set_has_android_aia_fetching_status() {
  _has_bits_[0] |= 0x00000004u;
}
void CertLoggerFeaturesInfo::clear_has_android_aia_fetching_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void CertLoggerFeaturesInfo::clear_android_aia_fetching_status() {
  android_aia_fetching_status_ = 0;
  clear_has_android_aia_fetching_status();
}
::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo::android_aia_fetching_status() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.android_aia_fetching_status)
  return static_cast< ::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus >(android_aia_fetching_status_);
}
void CertLoggerFeaturesInfo::set_android_aia_fetching_status(::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus value) {
  assert(::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_IsValid(value));
  set_has_android_aia_fetching_status();
  android_aia_fetching_status_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerFeaturesInfo.android_aia_fetching_status)
}

// optional .chrome_browser_ssl.TrialVerificationInfo trial_verification_info = 3;
bool CertLoggerFeaturesInfo::has_trial_verification_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CertLoggerFeaturesInfo::set_has_trial_verification_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CertLoggerFeaturesInfo::clear_has_trial_verification_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CertLoggerFeaturesInfo::clear_trial_verification_info() {
  if (trial_verification_info_ != NULL) trial_verification_info_->::chrome_browser_ssl::TrialVerificationInfo::Clear();
  clear_has_trial_verification_info();
}
const ::chrome_browser_ssl::TrialVerificationInfo& CertLoggerFeaturesInfo::trial_verification_info() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
  return trial_verification_info_ != NULL ? *trial_verification_info_
                         : *::chrome_browser_ssl::TrialVerificationInfo::internal_default_instance();
}
::chrome_browser_ssl::TrialVerificationInfo* CertLoggerFeaturesInfo::mutable_trial_verification_info() {
  set_has_trial_verification_info();
  if (trial_verification_info_ == NULL) {
    trial_verification_info_ = new ::chrome_browser_ssl::TrialVerificationInfo;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
  return trial_verification_info_;
}
::chrome_browser_ssl::TrialVerificationInfo* CertLoggerFeaturesInfo::release_trial_verification_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
  clear_has_trial_verification_info();
  ::chrome_browser_ssl::TrialVerificationInfo* temp = trial_verification_info_;
  trial_verification_info_ = NULL;
  return temp;
}
void CertLoggerFeaturesInfo::set_allocated_trial_verification_info(::chrome_browser_ssl::TrialVerificationInfo* trial_verification_info) {
  delete trial_verification_info_;
  trial_verification_info_ = trial_verification_info;
  if (trial_verification_info) {
    set_has_trial_verification_info();
  } else {
    clear_has_trial_verification_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertLoggerRequest::kHostnameFieldNumber;
const int CertLoggerRequest::kCertChainFieldNumber;
const int CertLoggerRequest::kTimeUsecFieldNumber;
const int CertLoggerRequest::kPublicKeyHashFieldNumber;
const int CertLoggerRequest::kPinFieldNumber;
const int CertLoggerRequest::kCertErrorFieldNumber;
const int CertLoggerRequest::kInterstitialInfoFieldNumber;
const int CertLoggerRequest::kUnverifiedCertChainFieldNumber;
const int CertLoggerRequest::kIsIssuedByKnownRootFieldNumber;
const int CertLoggerRequest::kFeaturesInfoFieldNumber;
const int CertLoggerRequest::kIsRetryUploadFieldNumber;
const int CertLoggerRequest::kChromeChannelFieldNumber;
const int CertLoggerRequest::kIsEnterpriseManagedFieldNumber;
const int CertLoggerRequest::kCertStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertLoggerRequest::CertLoggerRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cert_5flogger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.CertLoggerRequest)
}
CertLoggerRequest::CertLoggerRequest(const CertLoggerRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      public_key_hash_(from.public_key_hash_),
      pin_(from.pin_),
      cert_error_(from.cert_error_),
      cert_status_(from.cert_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  cert_chain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cert_chain()) {
    cert_chain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_chain_);
  }
  unverified_cert_chain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unverified_cert_chain()) {
    unverified_cert_chain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unverified_cert_chain_);
  }
  if (from.has_interstitial_info()) {
    interstitial_info_ = new ::chrome_browser_ssl::CertLoggerInterstitialInfo(*from.interstitial_info_);
  } else {
    interstitial_info_ = NULL;
  }
  if (from.has_features_info()) {
    features_info_ = new ::chrome_browser_ssl::CertLoggerFeaturesInfo(*from.features_info_);
  } else {
    features_info_ = NULL;
  }
  ::memcpy(&time_usec_, &from.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&chrome_channel_) -
    reinterpret_cast<char*>(&time_usec_)) + sizeof(chrome_channel_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.CertLoggerRequest)
}

void CertLoggerRequest::SharedCtor() {
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_chain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unverified_cert_chain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&interstitial_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chrome_channel_) -
      reinterpret_cast<char*>(&interstitial_info_)) + sizeof(chrome_channel_));
}

CertLoggerRequest::~CertLoggerRequest() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.CertLoggerRequest)
  SharedDtor();
}

void CertLoggerRequest::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_chain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unverified_cert_chain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete interstitial_info_;
  }
  if (this != internal_default_instance()) {
    delete features_info_;
  }
}

void CertLoggerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CertLoggerRequest& CertLoggerRequest::default_instance() {
  protobuf_cert_5flogger_2eproto::InitDefaults();
  return *internal_default_instance();
}

CertLoggerRequest* CertLoggerRequest::New(::google::protobuf::Arena* arena) const {
  CertLoggerRequest* n = new CertLoggerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertLoggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.CertLoggerRequest)
  public_key_hash_.Clear();
  pin_.Clear();
  cert_error_.Clear();
  cert_status_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_hostname()) {
      GOOGLE_DCHECK(!hostname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hostname_.UnsafeRawStringPointer())->clear();
    }
    if (has_cert_chain()) {
      GOOGLE_DCHECK(!cert_chain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cert_chain_.UnsafeRawStringPointer())->clear();
    }
    if (has_unverified_cert_chain()) {
      GOOGLE_DCHECK(!unverified_cert_chain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*unverified_cert_chain_.UnsafeRawStringPointer())->clear();
    }
    if (has_interstitial_info()) {
      GOOGLE_DCHECK(interstitial_info_ != NULL);
      interstitial_info_->::chrome_browser_ssl::CertLoggerInterstitialInfo::Clear();
    }
    if (has_features_info()) {
      GOOGLE_DCHECK(features_info_ != NULL);
      features_info_->::chrome_browser_ssl::CertLoggerFeaturesInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_retry_upload_) -
        reinterpret_cast<char*>(&time_usec_)) + sizeof(is_retry_upload_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&is_enterprise_managed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chrome_channel_) -
        reinterpret_cast<char*>(&is_enterprise_managed_)) + sizeof(chrome_channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CertLoggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.CertLoggerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string cert_chain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cert_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 time_usec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string public_key_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_public_key_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string pin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value)) {
            add_cert_error(static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertError >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 6,
                 ::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid,
                 &unknown_fields_stream,
                 this->mutable_cert_error())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_ssl.CertLoggerInterstitialInfo interstitial_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interstitial_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unverified_cert_chain = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unverified_cert_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_issued_by_known_root = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_issued_by_known_root();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_issued_by_known_root_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_ssl.CertLoggerFeaturesInfo features_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_features_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_retry_upload = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_is_retry_upload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_retry_upload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_ssl.CertLoggerRequest.ChromeChannel chrome_channel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::CertLoggerRequest_ChromeChannel_IsValid(value)) {
            set_chrome_channel(static_cast< ::chrome_browser_ssl::CertLoggerRequest_ChromeChannel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_enterprise_managed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_is_enterprise_managed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enterprise_managed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value)) {
            add_cert_status(static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(114u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 14,
                 ::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid,
                 &unknown_fields_stream,
                 this->mutable_cert_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.CertLoggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.CertLoggerRequest)
  return false;
#undef DO_
}

void CertLoggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.CertLoggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // required string cert_chain = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cert_chain(), output);
  }

  // required int64 time_usec = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_usec(), output);
  }

  // repeated string public_key_hash = 4;
  for (int i = 0, n = this->public_key_hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->public_key_hash(i), output);
  }

  // repeated string pin = 5;
  for (int i = 0, n = this->pin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pin(i), output);
  }

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 6;
  for (int i = 0, n = this->cert_error_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cert_error(i), output);
  }

  // optional .chrome_browser_ssl.CertLoggerInterstitialInfo interstitial_info = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->interstitial_info_, output);
  }

  // optional string unverified_cert_chain = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->unverified_cert_chain(), output);
  }

  // optional bool is_issued_by_known_root = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_issued_by_known_root(), output);
  }

  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo features_info = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->features_info_, output);
  }

  // optional bool is_retry_upload = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_retry_upload(), output);
  }

  // optional .chrome_browser_ssl.CertLoggerRequest.ChromeChannel chrome_channel = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->chrome_channel(), output);
  }

  // optional bool is_enterprise_managed = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_enterprise_managed(), output);
  }

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 14;
  for (int i = 0, n = this->cert_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->cert_status(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.CertLoggerRequest)
}

size_t CertLoggerRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chrome_browser_ssl.CertLoggerRequest)
  size_t total_size = 0;

  if (has_hostname()) {
    // required string hostname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  if (has_cert_chain()) {
    // required string cert_chain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cert_chain());
  }

  if (has_time_usec()) {
    // required int64 time_usec = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());
  }

  return total_size;
}
size_t CertLoggerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.CertLoggerRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required string hostname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());

    // required string cert_chain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cert_chain());

    // required int64 time_usec = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string public_key_hash = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->public_key_hash_size());
  for (int i = 0, n = this->public_key_hash_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->public_key_hash(i));
  }

  // repeated string pin = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pin_size());
  for (int i = 0, n = this->pin_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pin(i));
  }

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->cert_error_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cert_error(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 14;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->cert_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cert_status(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional string unverified_cert_chain = 8;
    if (has_unverified_cert_chain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unverified_cert_chain());
    }

    // optional .chrome_browser_ssl.CertLoggerInterstitialInfo interstitial_info = 7;
    if (has_interstitial_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->interstitial_info_);
    }

    // optional .chrome_browser_ssl.CertLoggerFeaturesInfo features_info = 10;
    if (has_features_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->features_info_);
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional bool is_issued_by_known_root = 9;
    if (has_is_issued_by_known_root()) {
      total_size += 1 + 1;
    }

    // optional bool is_retry_upload = 11;
    if (has_is_retry_upload()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool is_enterprise_managed = 13;
    if (has_is_enterprise_managed()) {
      total_size += 1 + 1;
    }

    // optional .chrome_browser_ssl.CertLoggerRequest.ChromeChannel chrome_channel = 12;
    if (has_chrome_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chrome_channel());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertLoggerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CertLoggerRequest*>(&from));
}

void CertLoggerRequest::MergeFrom(const CertLoggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.CertLoggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_key_hash_.MergeFrom(from.public_key_hash_);
  pin_.MergeFrom(from.pin_);
  cert_error_.MergeFrom(from.cert_error_);
  cert_status_.MergeFrom(from.cert_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_cert_chain();
      cert_chain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_chain_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_unverified_cert_chain();
      unverified_cert_chain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unverified_cert_chain_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_interstitial_info()->::chrome_browser_ssl::CertLoggerInterstitialInfo::MergeFrom(from.interstitial_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_features_info()->::chrome_browser_ssl::CertLoggerFeaturesInfo::MergeFrom(from.features_info());
    }
    if (cached_has_bits & 0x00000020u) {
      time_usec_ = from.time_usec_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_issued_by_known_root_ = from.is_issued_by_known_root_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_retry_upload_ = from.is_retry_upload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      is_enterprise_managed_ = from.is_enterprise_managed_;
    }
    if (cached_has_bits & 0x00000200u) {
      chrome_channel_ = from.chrome_channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CertLoggerRequest::CopyFrom(const CertLoggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.CertLoggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertLoggerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  if (has_features_info()) {
    if (!this->features_info_->IsInitialized()) return false;
  }
  return true;
}

void CertLoggerRequest::Swap(CertLoggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertLoggerRequest::InternalSwap(CertLoggerRequest* other) {
  public_key_hash_.InternalSwap(&other->public_key_hash_);
  pin_.InternalSwap(&other->pin_);
  cert_error_.InternalSwap(&other->cert_error_);
  cert_status_.InternalSwap(&other->cert_status_);
  hostname_.Swap(&other->hostname_);
  cert_chain_.Swap(&other->cert_chain_);
  unverified_cert_chain_.Swap(&other->unverified_cert_chain_);
  std::swap(interstitial_info_, other->interstitial_info_);
  std::swap(features_info_, other->features_info_);
  std::swap(time_usec_, other->time_usec_);
  std::swap(is_issued_by_known_root_, other->is_issued_by_known_root_);
  std::swap(is_retry_upload_, other->is_retry_upload_);
  std::swap(is_enterprise_managed_, other->is_enterprise_managed_);
  std::swap(chrome_channel_, other->chrome_channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CertLoggerRequest::GetTypeName() const {
  return "chrome_browser_ssl.CertLoggerRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertLoggerRequest

// required string hostname = 1;
bool CertLoggerRequest::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CertLoggerRequest::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void CertLoggerRequest::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CertLoggerRequest::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
const ::std::string& CertLoggerRequest::hostname() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.hostname)
  return hostname_.GetNoArena();
}
void CertLoggerRequest::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.hostname)
}
#if LANG_CXX11
void CertLoggerRequest::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CertLoggerRequest.hostname)
}
#endif
void CertLoggerRequest::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.hostname)
}
void CertLoggerRequest::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.hostname)
}
::std::string* CertLoggerRequest::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CertLoggerRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CertLoggerRequest::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.hostname)
}

// required string cert_chain = 2;
bool CertLoggerRequest::has_cert_chain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CertLoggerRequest::set_has_cert_chain() {
  _has_bits_[0] |= 0x00000002u;
}
void CertLoggerRequest::clear_has_cert_chain() {
  _has_bits_[0] &= ~0x00000002u;
}
void CertLoggerRequest::clear_cert_chain() {
  cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cert_chain();
}
const ::std::string& CertLoggerRequest::cert_chain() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.cert_chain)
  return cert_chain_.GetNoArena();
}
void CertLoggerRequest::set_cert_chain(const ::std::string& value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
#if LANG_CXX11
void CertLoggerRequest::set_cert_chain(::std::string&& value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
#endif
void CertLoggerRequest::set_cert_chain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
void CertLoggerRequest::set_cert_chain(const char* value, size_t size) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
::std::string* CertLoggerRequest::mutable_cert_chain() {
  set_has_cert_chain();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.cert_chain)
  return cert_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CertLoggerRequest::release_cert_chain() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.cert_chain)
  clear_has_cert_chain();
  return cert_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CertLoggerRequest::set_allocated_cert_chain(::std::string* cert_chain) {
  if (cert_chain != NULL) {
    set_has_cert_chain();
  } else {
    clear_has_cert_chain();
  }
  cert_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cert_chain);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}

// required int64 time_usec = 3;
bool CertLoggerRequest::has_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CertLoggerRequest::set_has_time_usec() {
  _has_bits_[0] |= 0x00000020u;
}
void CertLoggerRequest::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000020u;
}
void CertLoggerRequest::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
::google::protobuf::int64 CertLoggerRequest::time_usec() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.time_usec)
  return time_usec_;
}
void CertLoggerRequest::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.time_usec)
}

// repeated string public_key_hash = 4;
int CertLoggerRequest::public_key_hash_size() const {
  return public_key_hash_.size();
}
void CertLoggerRequest::clear_public_key_hash() {
  public_key_hash_.Clear();
}
const ::std::string& CertLoggerRequest::public_key_hash(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Get(index);
}
::std::string* CertLoggerRequest::mutable_public_key_hash(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Mutable(index);
}
void CertLoggerRequest::set_public_key_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  public_key_hash_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CertLoggerRequest::set_public_key_hash(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  public_key_hash_.Mutable(index)->assign(std::move(value));
}
#endif
void CertLoggerRequest::set_public_key_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  public_key_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
void CertLoggerRequest::set_public_key_hash(int index, const char* value, size_t size) {
  public_key_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
::std::string* CertLoggerRequest::add_public_key_hash() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Add();
}
void CertLoggerRequest::add_public_key_hash(const ::std::string& value) {
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
#if LANG_CXX11
void CertLoggerRequest::add_public_key_hash(::std::string&& value) {
  public_key_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
#endif
void CertLoggerRequest::add_public_key_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
void CertLoggerRequest::add_public_key_hash(const char* value, size_t size) {
  public_key_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertLoggerRequest::public_key_hash() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CertLoggerRequest::mutable_public_key_hash() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return &public_key_hash_;
}

// repeated string pin = 5;
int CertLoggerRequest::pin_size() const {
  return pin_.size();
}
void CertLoggerRequest::clear_pin() {
  pin_.Clear();
}
const ::std::string& CertLoggerRequest::pin(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_.Get(index);
}
::std::string* CertLoggerRequest::mutable_pin(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_.Mutable(index);
}
void CertLoggerRequest::set_pin(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.pin)
  pin_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CertLoggerRequest::set_pin(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.pin)
  pin_.Mutable(index)->assign(std::move(value));
}
#endif
void CertLoggerRequest::set_pin(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.pin)
}
void CertLoggerRequest::set_pin(int index, const char* value, size_t size) {
  pin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.pin)
}
::std::string* CertLoggerRequest::add_pin() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_.Add();
}
void CertLoggerRequest::add_pin(const ::std::string& value) {
  pin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.pin)
}
#if LANG_CXX11
void CertLoggerRequest::add_pin(::std::string&& value) {
  pin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.pin)
}
#endif
void CertLoggerRequest::add_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.CertLoggerRequest.pin)
}
void CertLoggerRequest::add_pin(const char* value, size_t size) {
  pin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.CertLoggerRequest.pin)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertLoggerRequest::pin() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CertLoggerRequest::mutable_pin() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.pin)
  return &pin_;
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 6;
int CertLoggerRequest::cert_error_size() const {
  return cert_error_.size();
}
void CertLoggerRequest::clear_cert_error() {
  cert_error_.Clear();
}
::chrome_browser_ssl::CertLoggerRequest_CertError CertLoggerRequest::cert_error(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.cert_error)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertError >(cert_error_.Get(index));
}
void CertLoggerRequest::set_cert_error(int index, ::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.cert_error)
}
void CertLoggerRequest::add_cert_error(::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.cert_error)
}
const ::google::protobuf::RepeatedField<int>&
CertLoggerRequest::cert_error() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.cert_error)
  return cert_error_;
}
::google::protobuf::RepeatedField<int>*
CertLoggerRequest::mutable_cert_error() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.cert_error)
  return &cert_error_;
}

// optional .chrome_browser_ssl.CertLoggerInterstitialInfo interstitial_info = 7;
bool CertLoggerRequest::has_interstitial_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CertLoggerRequest::set_has_interstitial_info() {
  _has_bits_[0] |= 0x00000008u;
}
void CertLoggerRequest::clear_has_interstitial_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void CertLoggerRequest::clear_interstitial_info() {
  if (interstitial_info_ != NULL) interstitial_info_->::chrome_browser_ssl::CertLoggerInterstitialInfo::Clear();
  clear_has_interstitial_info();
}
const ::chrome_browser_ssl::CertLoggerInterstitialInfo& CertLoggerRequest::interstitial_info() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
  return interstitial_info_ != NULL ? *interstitial_info_
                         : *::chrome_browser_ssl::CertLoggerInterstitialInfo::internal_default_instance();
}
::chrome_browser_ssl::CertLoggerInterstitialInfo* CertLoggerRequest::mutable_interstitial_info() {
  set_has_interstitial_info();
  if (interstitial_info_ == NULL) {
    interstitial_info_ = new ::chrome_browser_ssl::CertLoggerInterstitialInfo;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
  return interstitial_info_;
}
::chrome_browser_ssl::CertLoggerInterstitialInfo* CertLoggerRequest::release_interstitial_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
  clear_has_interstitial_info();
  ::chrome_browser_ssl::CertLoggerInterstitialInfo* temp = interstitial_info_;
  interstitial_info_ = NULL;
  return temp;
}
void CertLoggerRequest::set_allocated_interstitial_info(::chrome_browser_ssl::CertLoggerInterstitialInfo* interstitial_info) {
  delete interstitial_info_;
  interstitial_info_ = interstitial_info;
  if (interstitial_info) {
    set_has_interstitial_info();
  } else {
    clear_has_interstitial_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
}

// optional string unverified_cert_chain = 8;
bool CertLoggerRequest::has_unverified_cert_chain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CertLoggerRequest::set_has_unverified_cert_chain() {
  _has_bits_[0] |= 0x00000004u;
}
void CertLoggerRequest::clear_has_unverified_cert_chain() {
  _has_bits_[0] &= ~0x00000004u;
}
void CertLoggerRequest::clear_unverified_cert_chain() {
  unverified_cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unverified_cert_chain();
}
const ::std::string& CertLoggerRequest::unverified_cert_chain() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
  return unverified_cert_chain_.GetNoArena();
}
void CertLoggerRequest::set_unverified_cert_chain(const ::std::string& value) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
#if LANG_CXX11
void CertLoggerRequest::set_unverified_cert_chain(::std::string&& value) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
#endif
void CertLoggerRequest::set_unverified_cert_chain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
void CertLoggerRequest::set_unverified_cert_chain(const char* value, size_t size) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
::std::string* CertLoggerRequest::mutable_unverified_cert_chain() {
  set_has_unverified_cert_chain();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
  return unverified_cert_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CertLoggerRequest::release_unverified_cert_chain() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
  clear_has_unverified_cert_chain();
  return unverified_cert_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CertLoggerRequest::set_allocated_unverified_cert_chain(::std::string* unverified_cert_chain) {
  if (unverified_cert_chain != NULL) {
    set_has_unverified_cert_chain();
  } else {
    clear_has_unverified_cert_chain();
  }
  unverified_cert_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unverified_cert_chain);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}

// optional bool is_issued_by_known_root = 9;
bool CertLoggerRequest::has_is_issued_by_known_root() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CertLoggerRequest::set_has_is_issued_by_known_root() {
  _has_bits_[0] |= 0x00000040u;
}
void CertLoggerRequest::clear_has_is_issued_by_known_root() {
  _has_bits_[0] &= ~0x00000040u;
}
void CertLoggerRequest::clear_is_issued_by_known_root() {
  is_issued_by_known_root_ = false;
  clear_has_is_issued_by_known_root();
}
bool CertLoggerRequest::is_issued_by_known_root() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.is_issued_by_known_root)
  return is_issued_by_known_root_;
}
void CertLoggerRequest::set_is_issued_by_known_root(bool value) {
  set_has_is_issued_by_known_root();
  is_issued_by_known_root_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.is_issued_by_known_root)
}

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo features_info = 10;
bool CertLoggerRequest::has_features_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CertLoggerRequest::set_has_features_info() {
  _has_bits_[0] |= 0x00000010u;
}
void CertLoggerRequest::clear_has_features_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void CertLoggerRequest::clear_features_info() {
  if (features_info_ != NULL) features_info_->::chrome_browser_ssl::CertLoggerFeaturesInfo::Clear();
  clear_has_features_info();
}
const ::chrome_browser_ssl::CertLoggerFeaturesInfo& CertLoggerRequest::features_info() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.features_info)
  return features_info_ != NULL ? *features_info_
                         : *::chrome_browser_ssl::CertLoggerFeaturesInfo::internal_default_instance();
}
::chrome_browser_ssl::CertLoggerFeaturesInfo* CertLoggerRequest::mutable_features_info() {
  set_has_features_info();
  if (features_info_ == NULL) {
    features_info_ = new ::chrome_browser_ssl::CertLoggerFeaturesInfo;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.features_info)
  return features_info_;
}
::chrome_browser_ssl::CertLoggerFeaturesInfo* CertLoggerRequest::release_features_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.features_info)
  clear_has_features_info();
  ::chrome_browser_ssl::CertLoggerFeaturesInfo* temp = features_info_;
  features_info_ = NULL;
  return temp;
}
void CertLoggerRequest::set_allocated_features_info(::chrome_browser_ssl::CertLoggerFeaturesInfo* features_info) {
  delete features_info_;
  features_info_ = features_info;
  if (features_info) {
    set_has_features_info();
  } else {
    clear_has_features_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.features_info)
}

// optional bool is_retry_upload = 11;
bool CertLoggerRequest::has_is_retry_upload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CertLoggerRequest::set_has_is_retry_upload() {
  _has_bits_[0] |= 0x00000080u;
}
void CertLoggerRequest::clear_has_is_retry_upload() {
  _has_bits_[0] &= ~0x00000080u;
}
void CertLoggerRequest::clear_is_retry_upload() {
  is_retry_upload_ = false;
  clear_has_is_retry_upload();
}
bool CertLoggerRequest::is_retry_upload() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.is_retry_upload)
  return is_retry_upload_;
}
void CertLoggerRequest::set_is_retry_upload(bool value) {
  set_has_is_retry_upload();
  is_retry_upload_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.is_retry_upload)
}

// optional .chrome_browser_ssl.CertLoggerRequest.ChromeChannel chrome_channel = 12;
bool CertLoggerRequest::has_chrome_channel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CertLoggerRequest::set_has_chrome_channel() {
  _has_bits_[0] |= 0x00000200u;
}
void CertLoggerRequest::clear_has_chrome_channel() {
  _has_bits_[0] &= ~0x00000200u;
}
void CertLoggerRequest::clear_chrome_channel() {
  chrome_channel_ = 0;
  clear_has_chrome_channel();
}
::chrome_browser_ssl::CertLoggerRequest_ChromeChannel CertLoggerRequest::chrome_channel() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.chrome_channel)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_ChromeChannel >(chrome_channel_);
}
void CertLoggerRequest::set_chrome_channel(::chrome_browser_ssl::CertLoggerRequest_ChromeChannel value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_ChromeChannel_IsValid(value));
  set_has_chrome_channel();
  chrome_channel_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.chrome_channel)
}

// optional bool is_enterprise_managed = 13;
bool CertLoggerRequest::has_is_enterprise_managed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CertLoggerRequest::set_has_is_enterprise_managed() {
  _has_bits_[0] |= 0x00000100u;
}
void CertLoggerRequest::clear_has_is_enterprise_managed() {
  _has_bits_[0] &= ~0x00000100u;
}
void CertLoggerRequest::clear_is_enterprise_managed() {
  is_enterprise_managed_ = false;
  clear_has_is_enterprise_managed();
}
bool CertLoggerRequest::is_enterprise_managed() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.is_enterprise_managed)
  return is_enterprise_managed_;
}
void CertLoggerRequest::set_is_enterprise_managed(bool value) {
  set_has_is_enterprise_managed();
  is_enterprise_managed_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.is_enterprise_managed)
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 14;
int CertLoggerRequest::cert_status_size() const {
  return cert_status_.size();
}
void CertLoggerRequest::clear_cert_status() {
  cert_status_.Clear();
}
::chrome_browser_ssl::CertLoggerRequest_CertStatus CertLoggerRequest::cert_status(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.cert_status)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertStatus >(cert_status_.Get(index));
}
void CertLoggerRequest::set_cert_status(int index, ::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.cert_status)
}
void CertLoggerRequest::add_cert_status(::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.cert_status)
}
const ::google::protobuf::RepeatedField<int>&
CertLoggerRequest::cert_status() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.cert_status)
  return cert_status_;
}
::google::protobuf::RepeatedField<int>*
CertLoggerRequest::mutable_cert_status() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.cert_status)
  return &cert_status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrialVerificationInfo::kCertChainFieldNumber;
const int TrialVerificationInfo::kPublicKeyHashFieldNumber;
const int TrialVerificationInfo::kCertErrorFieldNumber;
const int TrialVerificationInfo::kIsIssuedByKnownRootFieldNumber;
const int TrialVerificationInfo::kCertStatusFieldNumber;
const int TrialVerificationInfo::kVerifyFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrialVerificationInfo::TrialVerificationInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cert_5flogger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_ssl.TrialVerificationInfo)
}
TrialVerificationInfo::TrialVerificationInfo(const TrialVerificationInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      public_key_hash_(from.public_key_hash_),
      cert_error_(from.cert_error_),
      cert_status_(from.cert_status_),
      verify_flags_(from.verify_flags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cert_chain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cert_chain()) {
    cert_chain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_chain_);
  }
  is_issued_by_known_root_ = from.is_issued_by_known_root_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.TrialVerificationInfo)
}

void TrialVerificationInfo::SharedCtor() {
  _cached_size_ = 0;
  cert_chain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_issued_by_known_root_ = false;
}

TrialVerificationInfo::~TrialVerificationInfo() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.TrialVerificationInfo)
  SharedDtor();
}

void TrialVerificationInfo::SharedDtor() {
  cert_chain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrialVerificationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrialVerificationInfo& TrialVerificationInfo::default_instance() {
  protobuf_cert_5flogger_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrialVerificationInfo* TrialVerificationInfo::New(::google::protobuf::Arena* arena) const {
  TrialVerificationInfo* n = new TrialVerificationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrialVerificationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.TrialVerificationInfo)
  public_key_hash_.Clear();
  cert_error_.Clear();
  cert_status_.Clear();
  verify_flags_.Clear();
  if (has_cert_chain()) {
    GOOGLE_DCHECK(!cert_chain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cert_chain_.UnsafeRawStringPointer())->clear();
  }
  is_issued_by_known_root_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrialVerificationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_ssl.TrialVerificationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cert_chain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cert_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string public_key_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_public_key_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value)) {
            add_cert_error(static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertError >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid,
                 &unknown_fields_stream,
                 this->mutable_cert_error())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_issued_by_known_root = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_issued_by_known_root();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_issued_by_known_root_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value)) {
            add_cert_status(static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid,
                 &unknown_fields_stream,
                 this->mutable_cert_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_browser_ssl.TrialVerificationInfo.VerifyFlags verify_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags_IsValid(value)) {
            add_verify_flags(static_cast< ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 6,
                 ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags_IsValid,
                 &unknown_fields_stream,
                 this->mutable_verify_flags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_ssl.TrialVerificationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_ssl.TrialVerificationInfo)
  return false;
#undef DO_
}

void TrialVerificationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_ssl.TrialVerificationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string cert_chain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cert_chain(), output);
  }

  // repeated string public_key_hash = 2;
  for (int i = 0, n = this->public_key_hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->public_key_hash(i), output);
  }

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 3;
  for (int i = 0, n = this->cert_error_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cert_error(i), output);
  }

  // optional bool is_issued_by_known_root = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_issued_by_known_root(), output);
  }

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 5;
  for (int i = 0, n = this->cert_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->cert_status(i), output);
  }

  // repeated .chrome_browser_ssl.TrialVerificationInfo.VerifyFlags verify_flags = 6;
  for (int i = 0, n = this->verify_flags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->verify_flags(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_ssl.TrialVerificationInfo)
}

size_t TrialVerificationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.TrialVerificationInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required string cert_chain = 1;
  if (has_cert_chain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cert_chain());
  }
  // repeated string public_key_hash = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->public_key_hash_size());
  for (int i = 0, n = this->public_key_hash_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->public_key_hash(i));
  }

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->cert_error_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cert_error(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->cert_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cert_status(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .chrome_browser_ssl.TrialVerificationInfo.VerifyFlags verify_flags = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->verify_flags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->verify_flags(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional bool is_issued_by_known_root = 4;
  if (has_is_issued_by_known_root()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialVerificationInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrialVerificationInfo*>(&from));
}

void TrialVerificationInfo::MergeFrom(const TrialVerificationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.TrialVerificationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_key_hash_.MergeFrom(from.public_key_hash_);
  cert_error_.MergeFrom(from.cert_error_);
  cert_status_.MergeFrom(from.cert_status_);
  verify_flags_.MergeFrom(from.verify_flags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cert_chain();
      cert_chain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_chain_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_issued_by_known_root_ = from.is_issued_by_known_root_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrialVerificationInfo::CopyFrom(const TrialVerificationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.TrialVerificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrialVerificationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TrialVerificationInfo::Swap(TrialVerificationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrialVerificationInfo::InternalSwap(TrialVerificationInfo* other) {
  public_key_hash_.InternalSwap(&other->public_key_hash_);
  cert_error_.InternalSwap(&other->cert_error_);
  cert_status_.InternalSwap(&other->cert_status_);
  verify_flags_.InternalSwap(&other->verify_flags_);
  cert_chain_.Swap(&other->cert_chain_);
  std::swap(is_issued_by_known_root_, other->is_issued_by_known_root_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TrialVerificationInfo::GetTypeName() const {
  return "chrome_browser_ssl.TrialVerificationInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrialVerificationInfo

// required string cert_chain = 1;
bool TrialVerificationInfo::has_cert_chain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrialVerificationInfo::set_has_cert_chain() {
  _has_bits_[0] |= 0x00000001u;
}
void TrialVerificationInfo::clear_has_cert_chain() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrialVerificationInfo::clear_cert_chain() {
  cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cert_chain();
}
const ::std::string& TrialVerificationInfo::cert_chain() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
  return cert_chain_.GetNoArena();
}
void TrialVerificationInfo::set_cert_chain(const ::std::string& value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
#if LANG_CXX11
void TrialVerificationInfo::set_cert_chain(::std::string&& value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
#endif
void TrialVerificationInfo::set_cert_chain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
void TrialVerificationInfo::set_cert_chain(const char* value, size_t size) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
::std::string* TrialVerificationInfo::mutable_cert_chain() {
  set_has_cert_chain();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
  return cert_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrialVerificationInfo::release_cert_chain() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
  clear_has_cert_chain();
  return cert_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrialVerificationInfo::set_allocated_cert_chain(::std::string* cert_chain) {
  if (cert_chain != NULL) {
    set_has_cert_chain();
  } else {
    clear_has_cert_chain();
  }
  cert_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cert_chain);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}

// repeated string public_key_hash = 2;
int TrialVerificationInfo::public_key_hash_size() const {
  return public_key_hash_.size();
}
void TrialVerificationInfo::clear_public_key_hash() {
  public_key_hash_.Clear();
}
const ::std::string& TrialVerificationInfo::public_key_hash(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_.Get(index);
}
::std::string* TrialVerificationInfo::mutable_public_key_hash(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_.Mutable(index);
}
void TrialVerificationInfo::set_public_key_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  public_key_hash_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TrialVerificationInfo::set_public_key_hash(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  public_key_hash_.Mutable(index)->assign(std::move(value));
}
#endif
void TrialVerificationInfo::set_public_key_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  public_key_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
void TrialVerificationInfo::set_public_key_hash(int index, const char* value, size_t size) {
  public_key_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
::std::string* TrialVerificationInfo::add_public_key_hash() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_.Add();
}
void TrialVerificationInfo::add_public_key_hash(const ::std::string& value) {
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
#if LANG_CXX11
void TrialVerificationInfo::add_public_key_hash(::std::string&& value) {
  public_key_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
#endif
void TrialVerificationInfo::add_public_key_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
void TrialVerificationInfo::add_public_key_hash(const char* value, size_t size) {
  public_key_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrialVerificationInfo::public_key_hash() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TrialVerificationInfo::mutable_public_key_hash() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return &public_key_hash_;
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 3;
int TrialVerificationInfo::cert_error_size() const {
  return cert_error_.size();
}
void TrialVerificationInfo::clear_cert_error() {
  cert_error_.Clear();
}
::chrome_browser_ssl::CertLoggerRequest_CertError TrialVerificationInfo::cert_error(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.cert_error)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertError >(cert_error_.Get(index));
}
void TrialVerificationInfo::set_cert_error(int index, ::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.cert_error)
}
void TrialVerificationInfo::add_cert_error(::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.cert_error)
}
const ::google::protobuf::RepeatedField<int>&
TrialVerificationInfo::cert_error() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.cert_error)
  return cert_error_;
}
::google::protobuf::RepeatedField<int>*
TrialVerificationInfo::mutable_cert_error() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.cert_error)
  return &cert_error_;
}

// optional bool is_issued_by_known_root = 4;
bool TrialVerificationInfo::has_is_issued_by_known_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrialVerificationInfo::set_has_is_issued_by_known_root() {
  _has_bits_[0] |= 0x00000002u;
}
void TrialVerificationInfo::clear_has_is_issued_by_known_root() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrialVerificationInfo::clear_is_issued_by_known_root() {
  is_issued_by_known_root_ = false;
  clear_has_is_issued_by_known_root();
}
bool TrialVerificationInfo::is_issued_by_known_root() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.is_issued_by_known_root)
  return is_issued_by_known_root_;
}
void TrialVerificationInfo::set_is_issued_by_known_root(bool value) {
  set_has_is_issued_by_known_root();
  is_issued_by_known_root_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.is_issued_by_known_root)
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 5;
int TrialVerificationInfo::cert_status_size() const {
  return cert_status_.size();
}
void TrialVerificationInfo::clear_cert_status() {
  cert_status_.Clear();
}
::chrome_browser_ssl::CertLoggerRequest_CertStatus TrialVerificationInfo::cert_status(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.cert_status)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertStatus >(cert_status_.Get(index));
}
void TrialVerificationInfo::set_cert_status(int index, ::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.cert_status)
}
void TrialVerificationInfo::add_cert_status(::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.cert_status)
}
const ::google::protobuf::RepeatedField<int>&
TrialVerificationInfo::cert_status() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.cert_status)
  return cert_status_;
}
::google::protobuf::RepeatedField<int>*
TrialVerificationInfo::mutable_cert_status() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.cert_status)
  return &cert_status_;
}

// repeated .chrome_browser_ssl.TrialVerificationInfo.VerifyFlags verify_flags = 6;
int TrialVerificationInfo::verify_flags_size() const {
  return verify_flags_.size();
}
void TrialVerificationInfo::clear_verify_flags() {
  verify_flags_.Clear();
}
::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags TrialVerificationInfo::verify_flags(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
  return static_cast< ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags >(verify_flags_.Get(index));
}
void TrialVerificationInfo::set_verify_flags(int index, ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags value) {
  assert(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags_IsValid(value));
  verify_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
}
void TrialVerificationInfo::add_verify_flags(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags value) {
  assert(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags_IsValid(value));
  verify_flags_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
}
const ::google::protobuf::RepeatedField<int>&
TrialVerificationInfo::verify_flags() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
  return verify_flags_;
}
::google::protobuf::RepeatedField<int>*
TrialVerificationInfo::mutable_verify_flags() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
  return &verify_flags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_ssl

// @@protoc_insertion_point(global_scope)
