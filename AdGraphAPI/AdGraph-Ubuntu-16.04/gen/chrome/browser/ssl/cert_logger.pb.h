// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cert_logger.proto

#ifndef PROTOBUF_cert_5flogger_2eproto__INCLUDED
#define PROTOBUF_cert_5flogger_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace chrome_browser_ssl {
class CertLoggerFeaturesInfo;
class CertLoggerFeaturesInfoDefaultTypeInternal;
extern CertLoggerFeaturesInfoDefaultTypeInternal _CertLoggerFeaturesInfo_default_instance_;
class CertLoggerFeaturesInfo_NetworkTimeQueryingInfo;
class CertLoggerFeaturesInfo_NetworkTimeQueryingInfoDefaultTypeInternal;
extern CertLoggerFeaturesInfo_NetworkTimeQueryingInfoDefaultTypeInternal _CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_default_instance_;
class CertLoggerInterstitialInfo;
class CertLoggerInterstitialInfoDefaultTypeInternal;
extern CertLoggerInterstitialInfoDefaultTypeInternal _CertLoggerInterstitialInfo_default_instance_;
class CertLoggerRequest;
class CertLoggerRequestDefaultTypeInternal;
extern CertLoggerRequestDefaultTypeInternal _CertLoggerRequest_default_instance_;
class TrialVerificationInfo;
class TrialVerificationInfoDefaultTypeInternal;
extern TrialVerificationInfoDefaultTypeInternal _TrialVerificationInfo_default_instance_;
}  // namespace chrome_browser_ssl

namespace chrome_browser_ssl {

namespace protobuf_cert_5flogger_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cert_5flogger_2eproto

enum CertLoggerInterstitialInfo_InterstitialReason {
  CertLoggerInterstitialInfo_InterstitialReason_UNKNOWN_INTERSTITIAL_REASON = 0,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_SSL = 1,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CAPTIVE_PORTAL = 2,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CLOCK = 3,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_SUPERFISH = 4,
  CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_MITM_SOFTWARE = 5
};
bool CertLoggerInterstitialInfo_InterstitialReason_IsValid(int value);
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MIN = CertLoggerInterstitialInfo_InterstitialReason_UNKNOWN_INTERSTITIAL_REASON;
const CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MAX = CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_MITM_SOFTWARE;
const int CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_ARRAYSIZE = CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MAX + 1;

enum CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior {
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_UNKNOWN = 0,
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_BACKGROUND_ONLY = 1,
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_ON_DEMAND_ONLY = 2,
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_IN_BACKGROUND_AND_ON_DEMAND = 3
};
bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_IsValid(int value);
const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_MIN = CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_UNKNOWN;
const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_MAX = CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_IN_BACKGROUND_AND_ON_DEMAND;
const int CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_ARRAYSIZE = CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_MAX + 1;

enum CertLoggerFeaturesInfo_AndroidAIAFetchingStatus {
  CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_UNKNOWN = 0,
  CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_ENABLED = 1,
  CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_DISABLED = 2
};
bool CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_IsValid(int value);
const CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_MIN = CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_UNKNOWN;
const CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_MAX = CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_DISABLED;
const int CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_ARRAYSIZE = CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_MAX + 1;

enum CertLoggerRequest_CertError {
  CertLoggerRequest_CertError_UNKNOWN_CERT_ERROR = 0,
  CertLoggerRequest_CertError_ERR_CERT_REVOKED = 1,
  CertLoggerRequest_CertError_ERR_CERT_INVALID = 2,
  CertLoggerRequest_CertError_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN = 3,
  CertLoggerRequest_CertError_ERR_CERT_AUTHORITY_INVALID = 4,
  CertLoggerRequest_CertError_ERR_CERT_COMMON_NAME_INVALID = 5,
  CertLoggerRequest_CertError_ERR_CERT_NAME_CONSTRAINT_VIOLATION = 6,
  CertLoggerRequest_CertError_ERR_CERT_WEAK_SIGNATURE_ALGORITHM = 7,
  CertLoggerRequest_CertError_ERR_CERT_WEAK_KEY = 8,
  CertLoggerRequest_CertError_ERR_CERT_DATE_INVALID = 9,
  CertLoggerRequest_CertError_ERR_CERT_VALIDITY_TOO_LONG = 10,
  CertLoggerRequest_CertError_ERR_CERT_UNABLE_TO_CHECK_REVOCATION = 11,
  CertLoggerRequest_CertError_ERR_CERT_NO_REVOCATION_MECHANISM = 12,
  CertLoggerRequest_CertError_ERR_CERT_NON_UNIQUE_NAME = 13,
  CertLoggerRequest_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED = 14,
  CertLoggerRequest_CertError_ERR_CERT_SYMANTEC_LEGACY = 15
};
bool CertLoggerRequest_CertError_IsValid(int value);
const CertLoggerRequest_CertError CertLoggerRequest_CertError_CertError_MIN = CertLoggerRequest_CertError_UNKNOWN_CERT_ERROR;
const CertLoggerRequest_CertError CertLoggerRequest_CertError_CertError_MAX = CertLoggerRequest_CertError_ERR_CERT_SYMANTEC_LEGACY;
const int CertLoggerRequest_CertError_CertError_ARRAYSIZE = CertLoggerRequest_CertError_CertError_MAX + 1;

enum CertLoggerRequest_ChromeChannel {
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_NONE = 0,
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_UNKNOWN = 1,
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_DEV = 2,
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_CANARY = 3,
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_BETA = 4,
  CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_STABLE = 5
};
bool CertLoggerRequest_ChromeChannel_IsValid(int value);
const CertLoggerRequest_ChromeChannel CertLoggerRequest_ChromeChannel_ChromeChannel_MIN = CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_NONE;
const CertLoggerRequest_ChromeChannel CertLoggerRequest_ChromeChannel_ChromeChannel_MAX = CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_STABLE;
const int CertLoggerRequest_ChromeChannel_ChromeChannel_ARRAYSIZE = CertLoggerRequest_ChromeChannel_ChromeChannel_MAX + 1;

enum CertLoggerRequest_CertStatus {
  CertLoggerRequest_CertStatus_UNKNOWN_CERT_STATUS = 0,
  CertLoggerRequest_CertStatus_STATUS_IS_EV = 1,
  CertLoggerRequest_CertStatus_STATUS_REV_CHECKING_ENABLED = 2,
  CertLoggerRequest_CertStatus_STATUS_SHA1_SIGNATURE_PRESENT = 3,
  CertLoggerRequest_CertStatus_STATUS_CT_COMPLIANCE_FAILED = 4
};
bool CertLoggerRequest_CertStatus_IsValid(int value);
const CertLoggerRequest_CertStatus CertLoggerRequest_CertStatus_CertStatus_MIN = CertLoggerRequest_CertStatus_UNKNOWN_CERT_STATUS;
const CertLoggerRequest_CertStatus CertLoggerRequest_CertStatus_CertStatus_MAX = CertLoggerRequest_CertStatus_STATUS_CT_COMPLIANCE_FAILED;
const int CertLoggerRequest_CertStatus_CertStatus_ARRAYSIZE = CertLoggerRequest_CertStatus_CertStatus_MAX + 1;

enum TrialVerificationInfo_VerifyFlags {
  TrialVerificationInfo_VerifyFlags_UNKNOWN_VERIFY_FLAG = 0,
  TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_ENABLED = 1,
  TrialVerificationInfo_VerifyFlags_VERIFY_EV_CERT PROTOBUF_DEPRECATED = 2,
  TrialVerificationInfo_VerifyFlags_VERIFY_CERT_IO_ENABLED PROTOBUF_DEPRECATED = 3,
  TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_ENABLED_EV_ONLY PROTOBUF_DEPRECATED = 4,
  TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_REQUIRED_LOCAL_ANCHORS = 5,
  TrialVerificationInfo_VerifyFlags_VERIFY_ENABLE_SHA1_LOCAL_ANCHORS = 6,
  TrialVerificationInfo_VerifyFlags_VERIFY_DISABLE_SYMANTEC_ENFORCEMENT = 7
};
bool TrialVerificationInfo_VerifyFlags_IsValid(int value);
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo_VerifyFlags_VerifyFlags_MIN = TrialVerificationInfo_VerifyFlags_UNKNOWN_VERIFY_FLAG;
const TrialVerificationInfo_VerifyFlags TrialVerificationInfo_VerifyFlags_VerifyFlags_MAX = TrialVerificationInfo_VerifyFlags_VERIFY_DISABLE_SYMANTEC_ENFORCEMENT;
const int TrialVerificationInfo_VerifyFlags_VerifyFlags_ARRAYSIZE = TrialVerificationInfo_VerifyFlags_VerifyFlags_MAX + 1;

// ===================================================================

class CertLoggerInterstitialInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.CertLoggerInterstitialInfo) */ {
 public:
  CertLoggerInterstitialInfo();
  virtual ~CertLoggerInterstitialInfo();

  CertLoggerInterstitialInfo(const CertLoggerInterstitialInfo& from);

  inline CertLoggerInterstitialInfo& operator=(const CertLoggerInterstitialInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CertLoggerInterstitialInfo& default_instance();

  static inline const CertLoggerInterstitialInfo* internal_default_instance() {
    return reinterpret_cast<const CertLoggerInterstitialInfo*>(
               &_CertLoggerInterstitialInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CertLoggerInterstitialInfo* other);

  // implements Message ----------------------------------------------

  inline CertLoggerInterstitialInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CertLoggerInterstitialInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CertLoggerInterstitialInfo& from);
  void MergeFrom(const CertLoggerInterstitialInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CertLoggerInterstitialInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CertLoggerInterstitialInfo_InterstitialReason InterstitialReason;
  static const InterstitialReason UNKNOWN_INTERSTITIAL_REASON =
    CertLoggerInterstitialInfo_InterstitialReason_UNKNOWN_INTERSTITIAL_REASON;
  static const InterstitialReason INTERSTITIAL_SSL =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_SSL;
  static const InterstitialReason INTERSTITIAL_CAPTIVE_PORTAL =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CAPTIVE_PORTAL;
  static const InterstitialReason INTERSTITIAL_CLOCK =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_CLOCK;
  static const InterstitialReason INTERSTITIAL_SUPERFISH =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_SUPERFISH;
  static const InterstitialReason INTERSTITIAL_MITM_SOFTWARE =
    CertLoggerInterstitialInfo_InterstitialReason_INTERSTITIAL_MITM_SOFTWARE;
  static inline bool InterstitialReason_IsValid(int value) {
    return CertLoggerInterstitialInfo_InterstitialReason_IsValid(value);
  }
  static const InterstitialReason InterstitialReason_MIN =
    CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MIN;
  static const InterstitialReason InterstitialReason_MAX =
    CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_MAX;
  static const int InterstitialReason_ARRAYSIZE =
    CertLoggerInterstitialInfo_InterstitialReason_InterstitialReason_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .chrome_browser_ssl.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
  bool has_interstitial_reason() const;
  void clear_interstitial_reason();
  static const int kInterstitialReasonFieldNumber = 1;
  ::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason interstitial_reason() const;
  void set_interstitial_reason(::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason value);

  // optional bool user_proceeded = 2;
  bool has_user_proceeded() const;
  void clear_user_proceeded();
  static const int kUserProceededFieldNumber = 2;
  bool user_proceeded() const;
  void set_user_proceeded(bool value);

  // optional bool overridable = 3;
  bool has_overridable() const;
  void clear_overridable();
  static const int kOverridableFieldNumber = 3;
  bool overridable() const;
  void set_overridable(bool value);

  // optional int64 interstitial_created_time_usec = 4;
  bool has_interstitial_created_time_usec() const;
  void clear_interstitial_created_time_usec();
  static const int kInterstitialCreatedTimeUsecFieldNumber = 4;
  ::google::protobuf::int64 interstitial_created_time_usec() const;
  void set_interstitial_created_time_usec(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.CertLoggerInterstitialInfo)
 private:
  void set_has_interstitial_reason();
  void clear_has_interstitial_reason();
  void set_has_user_proceeded();
  void clear_has_user_proceeded();
  void set_has_overridable();
  void clear_has_overridable();
  void set_has_interstitial_created_time_usec();
  void clear_has_interstitial_created_time_usec();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int interstitial_reason_;
  bool user_proceeded_;
  bool overridable_;
  ::google::protobuf::int64 interstitial_created_time_usec_;
  friend struct protobuf_cert_5flogger_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CertLoggerFeaturesInfo_NetworkTimeQueryingInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo) */ {
 public:
  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo();
  virtual ~CertLoggerFeaturesInfo_NetworkTimeQueryingInfo();

  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from);

  inline CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& operator=(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& default_instance();

  static inline const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* internal_default_instance() {
    return reinterpret_cast<const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo*>(
               &_CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* other);

  // implements Message ----------------------------------------------

  inline CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from);
  void MergeFrom(const CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior NetworkTimeFetchBehavior;
  static const NetworkTimeFetchBehavior NETWORK_TIME_FETCHES_UNKNOWN =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_UNKNOWN;
  static const NetworkTimeFetchBehavior NETWORK_TIME_FETCHES_BACKGROUND_ONLY =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_BACKGROUND_ONLY;
  static const NetworkTimeFetchBehavior NETWORK_TIME_FETCHES_ON_DEMAND_ONLY =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_ON_DEMAND_ONLY;
  static const NetworkTimeFetchBehavior NETWORK_TIME_FETCHES_IN_BACKGROUND_AND_ON_DEMAND =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NETWORK_TIME_FETCHES_IN_BACKGROUND_AND_ON_DEMAND;
  static inline bool NetworkTimeFetchBehavior_IsValid(int value) {
    return CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_IsValid(value);
  }
  static const NetworkTimeFetchBehavior NetworkTimeFetchBehavior_MIN =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_MIN;
  static const NetworkTimeFetchBehavior NetworkTimeFetchBehavior_MAX =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_MAX;
  static const int NetworkTimeFetchBehavior_ARRAYSIZE =
    CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_NetworkTimeFetchBehavior_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional bool network_time_queries_enabled = 1;
  bool has_network_time_queries_enabled() const;
  void clear_network_time_queries_enabled();
  static const int kNetworkTimeQueriesEnabledFieldNumber = 1;
  bool network_time_queries_enabled() const;
  void set_network_time_queries_enabled(bool value);

  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.NetworkTimeFetchBehavior network_time_query_behavior = 2;
  bool has_network_time_query_behavior() const;
  void clear_network_time_query_behavior();
  static const int kNetworkTimeQueryBehaviorFieldNumber = 2;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior network_time_query_behavior() const;
  void set_network_time_query_behavior(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo)
 private:
  void set_has_network_time_queries_enabled();
  void clear_has_network_time_queries_enabled();
  void set_has_network_time_query_behavior();
  void clear_has_network_time_query_behavior();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool network_time_queries_enabled_;
  int network_time_query_behavior_;
  friend struct protobuf_cert_5flogger_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CertLoggerFeaturesInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.CertLoggerFeaturesInfo) */ {
 public:
  CertLoggerFeaturesInfo();
  virtual ~CertLoggerFeaturesInfo();

  CertLoggerFeaturesInfo(const CertLoggerFeaturesInfo& from);

  inline CertLoggerFeaturesInfo& operator=(const CertLoggerFeaturesInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CertLoggerFeaturesInfo& default_instance();

  static inline const CertLoggerFeaturesInfo* internal_default_instance() {
    return reinterpret_cast<const CertLoggerFeaturesInfo*>(
               &_CertLoggerFeaturesInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CertLoggerFeaturesInfo* other);

  // implements Message ----------------------------------------------

  inline CertLoggerFeaturesInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CertLoggerFeaturesInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CertLoggerFeaturesInfo& from);
  void MergeFrom(const CertLoggerFeaturesInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CertLoggerFeaturesInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CertLoggerFeaturesInfo_NetworkTimeQueryingInfo NetworkTimeQueryingInfo;

  typedef CertLoggerFeaturesInfo_AndroidAIAFetchingStatus AndroidAIAFetchingStatus;
  static const AndroidAIAFetchingStatus ANDROID_AIA_FETCHING_UNKNOWN =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_UNKNOWN;
  static const AndroidAIAFetchingStatus ANDROID_AIA_FETCHING_ENABLED =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_ENABLED;
  static const AndroidAIAFetchingStatus ANDROID_AIA_FETCHING_DISABLED =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_ANDROID_AIA_FETCHING_DISABLED;
  static inline bool AndroidAIAFetchingStatus_IsValid(int value) {
    return CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_IsValid(value);
  }
  static const AndroidAIAFetchingStatus AndroidAIAFetchingStatus_MIN =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_MIN;
  static const AndroidAIAFetchingStatus AndroidAIAFetchingStatus_MAX =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_MAX;
  static const int AndroidAIAFetchingStatus_ARRAYSIZE =
    CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_AndroidAIAFetchingStatus_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo network_time_querying_info = 1;
  bool has_network_time_querying_info() const;
  void clear_network_time_querying_info();
  static const int kNetworkTimeQueryingInfoFieldNumber = 1;
  const ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& network_time_querying_info() const;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* mutable_network_time_querying_info();
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* release_network_time_querying_info();
  void set_allocated_network_time_querying_info(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* network_time_querying_info);

  // optional .chrome_browser_ssl.TrialVerificationInfo trial_verification_info = 3;
  bool has_trial_verification_info() const;
  void clear_trial_verification_info();
  static const int kTrialVerificationInfoFieldNumber = 3;
  const ::chrome_browser_ssl::TrialVerificationInfo& trial_verification_info() const;
  ::chrome_browser_ssl::TrialVerificationInfo* mutable_trial_verification_info();
  ::chrome_browser_ssl::TrialVerificationInfo* release_trial_verification_info();
  void set_allocated_trial_verification_info(::chrome_browser_ssl::TrialVerificationInfo* trial_verification_info);

  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo.AndroidAIAFetchingStatus android_aia_fetching_status = 2;
  bool has_android_aia_fetching_status() const;
  void clear_android_aia_fetching_status();
  static const int kAndroidAiaFetchingStatusFieldNumber = 2;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus android_aia_fetching_status() const;
  void set_android_aia_fetching_status(::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.CertLoggerFeaturesInfo)
 private:
  void set_has_network_time_querying_info();
  void clear_has_network_time_querying_info();
  void set_has_android_aia_fetching_status();
  void clear_has_android_aia_fetching_status();
  void set_has_trial_verification_info();
  void clear_has_trial_verification_info();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* network_time_querying_info_;
  ::chrome_browser_ssl::TrialVerificationInfo* trial_verification_info_;
  int android_aia_fetching_status_;
  friend struct protobuf_cert_5flogger_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CertLoggerRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.CertLoggerRequest) */ {
 public:
  CertLoggerRequest();
  virtual ~CertLoggerRequest();

  CertLoggerRequest(const CertLoggerRequest& from);

  inline CertLoggerRequest& operator=(const CertLoggerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CertLoggerRequest& default_instance();

  static inline const CertLoggerRequest* internal_default_instance() {
    return reinterpret_cast<const CertLoggerRequest*>(
               &_CertLoggerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CertLoggerRequest* other);

  // implements Message ----------------------------------------------

  inline CertLoggerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CertLoggerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CertLoggerRequest& from);
  void MergeFrom(const CertLoggerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CertLoggerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CertLoggerRequest_CertError CertError;
  static const CertError UNKNOWN_CERT_ERROR =
    CertLoggerRequest_CertError_UNKNOWN_CERT_ERROR;
  static const CertError ERR_CERT_REVOKED =
    CertLoggerRequest_CertError_ERR_CERT_REVOKED;
  static const CertError ERR_CERT_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_INVALID;
  static const CertError ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN =
    CertLoggerRequest_CertError_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN;
  static const CertError ERR_CERT_AUTHORITY_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_AUTHORITY_INVALID;
  static const CertError ERR_CERT_COMMON_NAME_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_COMMON_NAME_INVALID;
  static const CertError ERR_CERT_NAME_CONSTRAINT_VIOLATION =
    CertLoggerRequest_CertError_ERR_CERT_NAME_CONSTRAINT_VIOLATION;
  static const CertError ERR_CERT_WEAK_SIGNATURE_ALGORITHM =
    CertLoggerRequest_CertError_ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
  static const CertError ERR_CERT_WEAK_KEY =
    CertLoggerRequest_CertError_ERR_CERT_WEAK_KEY;
  static const CertError ERR_CERT_DATE_INVALID =
    CertLoggerRequest_CertError_ERR_CERT_DATE_INVALID;
  static const CertError ERR_CERT_VALIDITY_TOO_LONG =
    CertLoggerRequest_CertError_ERR_CERT_VALIDITY_TOO_LONG;
  static const CertError ERR_CERT_UNABLE_TO_CHECK_REVOCATION =
    CertLoggerRequest_CertError_ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
  static const CertError ERR_CERT_NO_REVOCATION_MECHANISM =
    CertLoggerRequest_CertError_ERR_CERT_NO_REVOCATION_MECHANISM;
  static const CertError ERR_CERT_NON_UNIQUE_NAME =
    CertLoggerRequest_CertError_ERR_CERT_NON_UNIQUE_NAME;
  static const CertError ERR_CERTIFICATE_TRANSPARENCY_REQUIRED =
    CertLoggerRequest_CertError_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
  static const CertError ERR_CERT_SYMANTEC_LEGACY =
    CertLoggerRequest_CertError_ERR_CERT_SYMANTEC_LEGACY;
  static inline bool CertError_IsValid(int value) {
    return CertLoggerRequest_CertError_IsValid(value);
  }
  static const CertError CertError_MIN =
    CertLoggerRequest_CertError_CertError_MIN;
  static const CertError CertError_MAX =
    CertLoggerRequest_CertError_CertError_MAX;
  static const int CertError_ARRAYSIZE =
    CertLoggerRequest_CertError_CertError_ARRAYSIZE;

  typedef CertLoggerRequest_ChromeChannel ChromeChannel;
  static const ChromeChannel CHROME_CHANNEL_NONE =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_NONE;
  static const ChromeChannel CHROME_CHANNEL_UNKNOWN =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_UNKNOWN;
  static const ChromeChannel CHROME_CHANNEL_DEV =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_DEV;
  static const ChromeChannel CHROME_CHANNEL_CANARY =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_CANARY;
  static const ChromeChannel CHROME_CHANNEL_BETA =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_BETA;
  static const ChromeChannel CHROME_CHANNEL_STABLE =
    CertLoggerRequest_ChromeChannel_CHROME_CHANNEL_STABLE;
  static inline bool ChromeChannel_IsValid(int value) {
    return CertLoggerRequest_ChromeChannel_IsValid(value);
  }
  static const ChromeChannel ChromeChannel_MIN =
    CertLoggerRequest_ChromeChannel_ChromeChannel_MIN;
  static const ChromeChannel ChromeChannel_MAX =
    CertLoggerRequest_ChromeChannel_ChromeChannel_MAX;
  static const int ChromeChannel_ARRAYSIZE =
    CertLoggerRequest_ChromeChannel_ChromeChannel_ARRAYSIZE;

  typedef CertLoggerRequest_CertStatus CertStatus;
  static const CertStatus UNKNOWN_CERT_STATUS =
    CertLoggerRequest_CertStatus_UNKNOWN_CERT_STATUS;
  static const CertStatus STATUS_IS_EV =
    CertLoggerRequest_CertStatus_STATUS_IS_EV;
  static const CertStatus STATUS_REV_CHECKING_ENABLED =
    CertLoggerRequest_CertStatus_STATUS_REV_CHECKING_ENABLED;
  static const CertStatus STATUS_SHA1_SIGNATURE_PRESENT =
    CertLoggerRequest_CertStatus_STATUS_SHA1_SIGNATURE_PRESENT;
  static const CertStatus STATUS_CT_COMPLIANCE_FAILED =
    CertLoggerRequest_CertStatus_STATUS_CT_COMPLIANCE_FAILED;
  static inline bool CertStatus_IsValid(int value) {
    return CertLoggerRequest_CertStatus_IsValid(value);
  }
  static const CertStatus CertStatus_MIN =
    CertLoggerRequest_CertStatus_CertStatus_MIN;
  static const CertStatus CertStatus_MAX =
    CertLoggerRequest_CertStatus_CertStatus_MAX;
  static const int CertStatus_ARRAYSIZE =
    CertLoggerRequest_CertStatus_CertStatus_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated string public_key_hash = 4;
  int public_key_hash_size() const;
  void clear_public_key_hash();
  static const int kPublicKeyHashFieldNumber = 4;
  const ::std::string& public_key_hash(int index) const;
  ::std::string* mutable_public_key_hash(int index);
  void set_public_key_hash(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_public_key_hash(int index, ::std::string&& value);
  #endif
  void set_public_key_hash(int index, const char* value);
  void set_public_key_hash(int index, const char* value, size_t size);
  ::std::string* add_public_key_hash();
  void add_public_key_hash(const ::std::string& value);
  #if LANG_CXX11
  void add_public_key_hash(::std::string&& value);
  #endif
  void add_public_key_hash(const char* value);
  void add_public_key_hash(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& public_key_hash() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_public_key_hash();

  // repeated string pin = 5;
  int pin_size() const;
  void clear_pin();
  static const int kPinFieldNumber = 5;
  const ::std::string& pin(int index) const;
  ::std::string* mutable_pin(int index);
  void set_pin(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pin(int index, ::std::string&& value);
  #endif
  void set_pin(int index, const char* value);
  void set_pin(int index, const char* value, size_t size);
  ::std::string* add_pin();
  void add_pin(const ::std::string& value);
  #if LANG_CXX11
  void add_pin(::std::string&& value);
  #endif
  void add_pin(const char* value);
  void add_pin(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pin() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pin();

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 6;
  int cert_error_size() const;
  void clear_cert_error();
  static const int kCertErrorFieldNumber = 6;
  ::chrome_browser_ssl::CertLoggerRequest_CertError cert_error(int index) const;
  void set_cert_error(int index, ::chrome_browser_ssl::CertLoggerRequest_CertError value);
  void add_cert_error(::chrome_browser_ssl::CertLoggerRequest_CertError value);
  const ::google::protobuf::RepeatedField<int>& cert_error() const;
  ::google::protobuf::RepeatedField<int>* mutable_cert_error();

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 14;
  int cert_status_size() const;
  void clear_cert_status();
  static const int kCertStatusFieldNumber = 14;
  ::chrome_browser_ssl::CertLoggerRequest_CertStatus cert_status(int index) const;
  void set_cert_status(int index, ::chrome_browser_ssl::CertLoggerRequest_CertStatus value);
  void add_cert_status(::chrome_browser_ssl::CertLoggerRequest_CertStatus value);
  const ::google::protobuf::RepeatedField<int>& cert_status() const;
  ::google::protobuf::RepeatedField<int>* mutable_cert_status();

  // required string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // required string cert_chain = 2;
  bool has_cert_chain() const;
  void clear_cert_chain();
  static const int kCertChainFieldNumber = 2;
  const ::std::string& cert_chain() const;
  void set_cert_chain(const ::std::string& value);
  #if LANG_CXX11
  void set_cert_chain(::std::string&& value);
  #endif
  void set_cert_chain(const char* value);
  void set_cert_chain(const char* value, size_t size);
  ::std::string* mutable_cert_chain();
  ::std::string* release_cert_chain();
  void set_allocated_cert_chain(::std::string* cert_chain);

  // optional string unverified_cert_chain = 8;
  bool has_unverified_cert_chain() const;
  void clear_unverified_cert_chain();
  static const int kUnverifiedCertChainFieldNumber = 8;
  const ::std::string& unverified_cert_chain() const;
  void set_unverified_cert_chain(const ::std::string& value);
  #if LANG_CXX11
  void set_unverified_cert_chain(::std::string&& value);
  #endif
  void set_unverified_cert_chain(const char* value);
  void set_unverified_cert_chain(const char* value, size_t size);
  ::std::string* mutable_unverified_cert_chain();
  ::std::string* release_unverified_cert_chain();
  void set_allocated_unverified_cert_chain(::std::string* unverified_cert_chain);

  // optional .chrome_browser_ssl.CertLoggerInterstitialInfo interstitial_info = 7;
  bool has_interstitial_info() const;
  void clear_interstitial_info();
  static const int kInterstitialInfoFieldNumber = 7;
  const ::chrome_browser_ssl::CertLoggerInterstitialInfo& interstitial_info() const;
  ::chrome_browser_ssl::CertLoggerInterstitialInfo* mutable_interstitial_info();
  ::chrome_browser_ssl::CertLoggerInterstitialInfo* release_interstitial_info();
  void set_allocated_interstitial_info(::chrome_browser_ssl::CertLoggerInterstitialInfo* interstitial_info);

  // optional .chrome_browser_ssl.CertLoggerFeaturesInfo features_info = 10;
  bool has_features_info() const;
  void clear_features_info();
  static const int kFeaturesInfoFieldNumber = 10;
  const ::chrome_browser_ssl::CertLoggerFeaturesInfo& features_info() const;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo* mutable_features_info();
  ::chrome_browser_ssl::CertLoggerFeaturesInfo* release_features_info();
  void set_allocated_features_info(::chrome_browser_ssl::CertLoggerFeaturesInfo* features_info);

  // required int64 time_usec = 3;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 3;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // optional bool is_issued_by_known_root = 9;
  bool has_is_issued_by_known_root() const;
  void clear_is_issued_by_known_root();
  static const int kIsIssuedByKnownRootFieldNumber = 9;
  bool is_issued_by_known_root() const;
  void set_is_issued_by_known_root(bool value);

  // optional bool is_retry_upload = 11;
  bool has_is_retry_upload() const;
  void clear_is_retry_upload();
  static const int kIsRetryUploadFieldNumber = 11;
  bool is_retry_upload() const;
  void set_is_retry_upload(bool value);

  // optional bool is_enterprise_managed = 13;
  bool has_is_enterprise_managed() const;
  void clear_is_enterprise_managed();
  static const int kIsEnterpriseManagedFieldNumber = 13;
  bool is_enterprise_managed() const;
  void set_is_enterprise_managed(bool value);

  // optional .chrome_browser_ssl.CertLoggerRequest.ChromeChannel chrome_channel = 12;
  bool has_chrome_channel() const;
  void clear_chrome_channel();
  static const int kChromeChannelFieldNumber = 12;
  ::chrome_browser_ssl::CertLoggerRequest_ChromeChannel chrome_channel() const;
  void set_chrome_channel(::chrome_browser_ssl::CertLoggerRequest_ChromeChannel value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.CertLoggerRequest)
 private:
  void set_has_hostname();
  void clear_has_hostname();
  void set_has_cert_chain();
  void clear_has_cert_chain();
  void set_has_time_usec();
  void clear_has_time_usec();
  void set_has_interstitial_info();
  void clear_has_interstitial_info();
  void set_has_unverified_cert_chain();
  void clear_has_unverified_cert_chain();
  void set_has_is_issued_by_known_root();
  void clear_has_is_issued_by_known_root();
  void set_has_features_info();
  void clear_has_features_info();
  void set_has_is_retry_upload();
  void clear_has_is_retry_upload();
  void set_has_chrome_channel();
  void clear_has_chrome_channel();
  void set_has_is_enterprise_managed();
  void clear_has_is_enterprise_managed();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> public_key_hash_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pin_;
  ::google::protobuf::RepeatedField<int> cert_error_;
  ::google::protobuf::RepeatedField<int> cert_status_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr cert_chain_;
  ::google::protobuf::internal::ArenaStringPtr unverified_cert_chain_;
  ::chrome_browser_ssl::CertLoggerInterstitialInfo* interstitial_info_;
  ::chrome_browser_ssl::CertLoggerFeaturesInfo* features_info_;
  ::google::protobuf::int64 time_usec_;
  bool is_issued_by_known_root_;
  bool is_retry_upload_;
  bool is_enterprise_managed_;
  int chrome_channel_;
  friend struct protobuf_cert_5flogger_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrialVerificationInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.TrialVerificationInfo) */ {
 public:
  TrialVerificationInfo();
  virtual ~TrialVerificationInfo();

  TrialVerificationInfo(const TrialVerificationInfo& from);

  inline TrialVerificationInfo& operator=(const TrialVerificationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrialVerificationInfo& default_instance();

  static inline const TrialVerificationInfo* internal_default_instance() {
    return reinterpret_cast<const TrialVerificationInfo*>(
               &_TrialVerificationInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(TrialVerificationInfo* other);

  // implements Message ----------------------------------------------

  inline TrialVerificationInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TrialVerificationInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TrialVerificationInfo& from);
  void MergeFrom(const TrialVerificationInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrialVerificationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TrialVerificationInfo_VerifyFlags VerifyFlags;
  static const VerifyFlags UNKNOWN_VERIFY_FLAG =
    TrialVerificationInfo_VerifyFlags_UNKNOWN_VERIFY_FLAG;
  static const VerifyFlags VERIFY_REV_CHECKING_ENABLED =
    TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_ENABLED;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const VerifyFlags VERIFY_EV_CERT =
    TrialVerificationInfo_VerifyFlags_VERIFY_EV_CERT;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const VerifyFlags VERIFY_CERT_IO_ENABLED =
    TrialVerificationInfo_VerifyFlags_VERIFY_CERT_IO_ENABLED;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const VerifyFlags VERIFY_REV_CHECKING_ENABLED_EV_ONLY =
    TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_ENABLED_EV_ONLY;
  static const VerifyFlags VERIFY_REV_CHECKING_REQUIRED_LOCAL_ANCHORS =
    TrialVerificationInfo_VerifyFlags_VERIFY_REV_CHECKING_REQUIRED_LOCAL_ANCHORS;
  static const VerifyFlags VERIFY_ENABLE_SHA1_LOCAL_ANCHORS =
    TrialVerificationInfo_VerifyFlags_VERIFY_ENABLE_SHA1_LOCAL_ANCHORS;
  static const VerifyFlags VERIFY_DISABLE_SYMANTEC_ENFORCEMENT =
    TrialVerificationInfo_VerifyFlags_VERIFY_DISABLE_SYMANTEC_ENFORCEMENT;
  static inline bool VerifyFlags_IsValid(int value) {
    return TrialVerificationInfo_VerifyFlags_IsValid(value);
  }
  static const VerifyFlags VerifyFlags_MIN =
    TrialVerificationInfo_VerifyFlags_VerifyFlags_MIN;
  static const VerifyFlags VerifyFlags_MAX =
    TrialVerificationInfo_VerifyFlags_VerifyFlags_MAX;
  static const int VerifyFlags_ARRAYSIZE =
    TrialVerificationInfo_VerifyFlags_VerifyFlags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated string public_key_hash = 2;
  int public_key_hash_size() const;
  void clear_public_key_hash();
  static const int kPublicKeyHashFieldNumber = 2;
  const ::std::string& public_key_hash(int index) const;
  ::std::string* mutable_public_key_hash(int index);
  void set_public_key_hash(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_public_key_hash(int index, ::std::string&& value);
  #endif
  void set_public_key_hash(int index, const char* value);
  void set_public_key_hash(int index, const char* value, size_t size);
  ::std::string* add_public_key_hash();
  void add_public_key_hash(const ::std::string& value);
  #if LANG_CXX11
  void add_public_key_hash(::std::string&& value);
  #endif
  void add_public_key_hash(const char* value);
  void add_public_key_hash(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& public_key_hash() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_public_key_hash();

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 3;
  int cert_error_size() const;
  void clear_cert_error();
  static const int kCertErrorFieldNumber = 3;
  ::chrome_browser_ssl::CertLoggerRequest_CertError cert_error(int index) const;
  void set_cert_error(int index, ::chrome_browser_ssl::CertLoggerRequest_CertError value);
  void add_cert_error(::chrome_browser_ssl::CertLoggerRequest_CertError value);
  const ::google::protobuf::RepeatedField<int>& cert_error() const;
  ::google::protobuf::RepeatedField<int>* mutable_cert_error();

  // repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 5;
  int cert_status_size() const;
  void clear_cert_status();
  static const int kCertStatusFieldNumber = 5;
  ::chrome_browser_ssl::CertLoggerRequest_CertStatus cert_status(int index) const;
  void set_cert_status(int index, ::chrome_browser_ssl::CertLoggerRequest_CertStatus value);
  void add_cert_status(::chrome_browser_ssl::CertLoggerRequest_CertStatus value);
  const ::google::protobuf::RepeatedField<int>& cert_status() const;
  ::google::protobuf::RepeatedField<int>* mutable_cert_status();

  // repeated .chrome_browser_ssl.TrialVerificationInfo.VerifyFlags verify_flags = 6;
  int verify_flags_size() const;
  void clear_verify_flags();
  static const int kVerifyFlagsFieldNumber = 6;
  ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags verify_flags(int index) const;
  void set_verify_flags(int index, ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags value);
  void add_verify_flags(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags value);
  const ::google::protobuf::RepeatedField<int>& verify_flags() const;
  ::google::protobuf::RepeatedField<int>* mutable_verify_flags();

  // required string cert_chain = 1;
  bool has_cert_chain() const;
  void clear_cert_chain();
  static const int kCertChainFieldNumber = 1;
  const ::std::string& cert_chain() const;
  void set_cert_chain(const ::std::string& value);
  #if LANG_CXX11
  void set_cert_chain(::std::string&& value);
  #endif
  void set_cert_chain(const char* value);
  void set_cert_chain(const char* value, size_t size);
  ::std::string* mutable_cert_chain();
  ::std::string* release_cert_chain();
  void set_allocated_cert_chain(::std::string* cert_chain);

  // optional bool is_issued_by_known_root = 4;
  bool has_is_issued_by_known_root() const;
  void clear_is_issued_by_known_root();
  static const int kIsIssuedByKnownRootFieldNumber = 4;
  bool is_issued_by_known_root() const;
  void set_is_issued_by_known_root(bool value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.TrialVerificationInfo)
 private:
  void set_has_cert_chain();
  void clear_has_cert_chain();
  void set_has_is_issued_by_known_root();
  void clear_has_is_issued_by_known_root();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> public_key_hash_;
  ::google::protobuf::RepeatedField<int> cert_error_;
  ::google::protobuf::RepeatedField<int> cert_status_;
  ::google::protobuf::RepeatedField<int> verify_flags_;
  ::google::protobuf::internal::ArenaStringPtr cert_chain_;
  bool is_issued_by_known_root_;
  friend struct protobuf_cert_5flogger_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CertLoggerInterstitialInfo

// optional .chrome_browser_ssl.CertLoggerInterstitialInfo.InterstitialReason interstitial_reason = 1;
inline bool CertLoggerInterstitialInfo::has_interstitial_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertLoggerInterstitialInfo::set_has_interstitial_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertLoggerInterstitialInfo::clear_has_interstitial_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertLoggerInterstitialInfo::clear_interstitial_reason() {
  interstitial_reason_ = 0;
  clear_has_interstitial_reason();
}
inline ::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason CertLoggerInterstitialInfo::interstitial_reason() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_reason)
  return static_cast< ::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason >(interstitial_reason_);
}
inline void CertLoggerInterstitialInfo::set_interstitial_reason(::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason value) {
  assert(::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason_IsValid(value));
  set_has_interstitial_reason();
  interstitial_reason_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_reason)
}

// optional bool user_proceeded = 2;
inline bool CertLoggerInterstitialInfo::has_user_proceeded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertLoggerInterstitialInfo::set_has_user_proceeded() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertLoggerInterstitialInfo::clear_has_user_proceeded() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertLoggerInterstitialInfo::clear_user_proceeded() {
  user_proceeded_ = false;
  clear_has_user_proceeded();
}
inline bool CertLoggerInterstitialInfo::user_proceeded() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.user_proceeded)
  return user_proceeded_;
}
inline void CertLoggerInterstitialInfo::set_user_proceeded(bool value) {
  set_has_user_proceeded();
  user_proceeded_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.user_proceeded)
}

// optional bool overridable = 3;
inline bool CertLoggerInterstitialInfo::has_overridable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertLoggerInterstitialInfo::set_has_overridable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CertLoggerInterstitialInfo::clear_has_overridable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CertLoggerInterstitialInfo::clear_overridable() {
  overridable_ = false;
  clear_has_overridable();
}
inline bool CertLoggerInterstitialInfo::overridable() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.overridable)
  return overridable_;
}
inline void CertLoggerInterstitialInfo::set_overridable(bool value) {
  set_has_overridable();
  overridable_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.overridable)
}

// optional int64 interstitial_created_time_usec = 4;
inline bool CertLoggerInterstitialInfo::has_interstitial_created_time_usec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CertLoggerInterstitialInfo::set_has_interstitial_created_time_usec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CertLoggerInterstitialInfo::clear_has_interstitial_created_time_usec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CertLoggerInterstitialInfo::clear_interstitial_created_time_usec() {
  interstitial_created_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_interstitial_created_time_usec();
}
inline ::google::protobuf::int64 CertLoggerInterstitialInfo::interstitial_created_time_usec() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_created_time_usec)
  return interstitial_created_time_usec_;
}
inline void CertLoggerInterstitialInfo::set_interstitial_created_time_usec(::google::protobuf::int64 value) {
  set_has_interstitial_created_time_usec();
  interstitial_created_time_usec_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerInterstitialInfo.interstitial_created_time_usec)
}

// -------------------------------------------------------------------

// CertLoggerFeaturesInfo_NetworkTimeQueryingInfo

// optional bool network_time_queries_enabled = 1;
inline bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::has_network_time_queries_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::set_has_network_time_queries_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::clear_has_network_time_queries_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::clear_network_time_queries_enabled() {
  network_time_queries_enabled_ = false;
  clear_has_network_time_queries_enabled();
}
inline bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::network_time_queries_enabled() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_queries_enabled)
  return network_time_queries_enabled_;
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::set_network_time_queries_enabled(bool value) {
  set_has_network_time_queries_enabled();
  network_time_queries_enabled_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_queries_enabled)
}

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.NetworkTimeFetchBehavior network_time_query_behavior = 2;
inline bool CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::has_network_time_query_behavior() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::set_has_network_time_query_behavior() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::clear_has_network_time_query_behavior() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::clear_network_time_query_behavior() {
  network_time_query_behavior_ = 0;
  clear_has_network_time_query_behavior();
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::network_time_query_behavior() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_query_behavior)
  return static_cast< ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior >(network_time_query_behavior_);
}
inline void CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::set_network_time_query_behavior(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior value) {
  assert(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior_IsValid(value));
  set_has_network_time_query_behavior();
  network_time_query_behavior_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo.network_time_query_behavior)
}

// -------------------------------------------------------------------

// CertLoggerFeaturesInfo

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo.NetworkTimeQueryingInfo network_time_querying_info = 1;
inline bool CertLoggerFeaturesInfo::has_network_time_querying_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertLoggerFeaturesInfo::set_has_network_time_querying_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertLoggerFeaturesInfo::clear_has_network_time_querying_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertLoggerFeaturesInfo::clear_network_time_querying_info() {
  if (network_time_querying_info_ != NULL) network_time_querying_info_->::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::Clear();
  clear_has_network_time_querying_info();
}
inline const ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo& CertLoggerFeaturesInfo::network_time_querying_info() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
  return network_time_querying_info_ != NULL ? *network_time_querying_info_
                         : *::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo::internal_default_instance();
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* CertLoggerFeaturesInfo::mutable_network_time_querying_info() {
  set_has_network_time_querying_info();
  if (network_time_querying_info_ == NULL) {
    network_time_querying_info_ = new ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
  return network_time_querying_info_;
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* CertLoggerFeaturesInfo::release_network_time_querying_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
  clear_has_network_time_querying_info();
  ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* temp = network_time_querying_info_;
  network_time_querying_info_ = NULL;
  return temp;
}
inline void CertLoggerFeaturesInfo::set_allocated_network_time_querying_info(::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo* network_time_querying_info) {
  delete network_time_querying_info_;
  network_time_querying_info_ = network_time_querying_info;
  if (network_time_querying_info) {
    set_has_network_time_querying_info();
  } else {
    clear_has_network_time_querying_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerFeaturesInfo.network_time_querying_info)
}

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo.AndroidAIAFetchingStatus android_aia_fetching_status = 2;
inline bool CertLoggerFeaturesInfo::has_android_aia_fetching_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertLoggerFeaturesInfo::set_has_android_aia_fetching_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CertLoggerFeaturesInfo::clear_has_android_aia_fetching_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CertLoggerFeaturesInfo::clear_android_aia_fetching_status() {
  android_aia_fetching_status_ = 0;
  clear_has_android_aia_fetching_status();
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus CertLoggerFeaturesInfo::android_aia_fetching_status() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.android_aia_fetching_status)
  return static_cast< ::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus >(android_aia_fetching_status_);
}
inline void CertLoggerFeaturesInfo::set_android_aia_fetching_status(::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus value) {
  assert(::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus_IsValid(value));
  set_has_android_aia_fetching_status();
  android_aia_fetching_status_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerFeaturesInfo.android_aia_fetching_status)
}

// optional .chrome_browser_ssl.TrialVerificationInfo trial_verification_info = 3;
inline bool CertLoggerFeaturesInfo::has_trial_verification_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertLoggerFeaturesInfo::set_has_trial_verification_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertLoggerFeaturesInfo::clear_has_trial_verification_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertLoggerFeaturesInfo::clear_trial_verification_info() {
  if (trial_verification_info_ != NULL) trial_verification_info_->::chrome_browser_ssl::TrialVerificationInfo::Clear();
  clear_has_trial_verification_info();
}
inline const ::chrome_browser_ssl::TrialVerificationInfo& CertLoggerFeaturesInfo::trial_verification_info() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
  return trial_verification_info_ != NULL ? *trial_verification_info_
                         : *::chrome_browser_ssl::TrialVerificationInfo::internal_default_instance();
}
inline ::chrome_browser_ssl::TrialVerificationInfo* CertLoggerFeaturesInfo::mutable_trial_verification_info() {
  set_has_trial_verification_info();
  if (trial_verification_info_ == NULL) {
    trial_verification_info_ = new ::chrome_browser_ssl::TrialVerificationInfo;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
  return trial_verification_info_;
}
inline ::chrome_browser_ssl::TrialVerificationInfo* CertLoggerFeaturesInfo::release_trial_verification_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
  clear_has_trial_verification_info();
  ::chrome_browser_ssl::TrialVerificationInfo* temp = trial_verification_info_;
  trial_verification_info_ = NULL;
  return temp;
}
inline void CertLoggerFeaturesInfo::set_allocated_trial_verification_info(::chrome_browser_ssl::TrialVerificationInfo* trial_verification_info) {
  delete trial_verification_info_;
  trial_verification_info_ = trial_verification_info;
  if (trial_verification_info) {
    set_has_trial_verification_info();
  } else {
    clear_has_trial_verification_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerFeaturesInfo.trial_verification_info)
}

// -------------------------------------------------------------------

// CertLoggerRequest

// required string hostname = 1;
inline bool CertLoggerRequest::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertLoggerRequest::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertLoggerRequest::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertLoggerRequest::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& CertLoggerRequest::hostname() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.hostname)
  return hostname_.GetNoArena();
}
inline void CertLoggerRequest::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.hostname)
}
#if LANG_CXX11
inline void CertLoggerRequest::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CertLoggerRequest.hostname)
}
#endif
inline void CertLoggerRequest::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.hostname)
}
inline void CertLoggerRequest::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.hostname)
}
inline ::std::string* CertLoggerRequest::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CertLoggerRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.hostname)
}

// required string cert_chain = 2;
inline bool CertLoggerRequest::has_cert_chain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertLoggerRequest::set_has_cert_chain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertLoggerRequest::clear_has_cert_chain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertLoggerRequest::clear_cert_chain() {
  cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cert_chain();
}
inline const ::std::string& CertLoggerRequest::cert_chain() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.cert_chain)
  return cert_chain_.GetNoArena();
}
inline void CertLoggerRequest::set_cert_chain(const ::std::string& value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
#if LANG_CXX11
inline void CertLoggerRequest::set_cert_chain(::std::string&& value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
#endif
inline void CertLoggerRequest::set_cert_chain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
inline void CertLoggerRequest::set_cert_chain(const char* value, size_t size) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}
inline ::std::string* CertLoggerRequest::mutable_cert_chain() {
  set_has_cert_chain();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.cert_chain)
  return cert_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CertLoggerRequest::release_cert_chain() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.cert_chain)
  clear_has_cert_chain();
  return cert_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_allocated_cert_chain(::std::string* cert_chain) {
  if (cert_chain != NULL) {
    set_has_cert_chain();
  } else {
    clear_has_cert_chain();
  }
  cert_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cert_chain);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.cert_chain)
}

// required int64 time_usec = 3;
inline bool CertLoggerRequest::has_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CertLoggerRequest::set_has_time_usec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CertLoggerRequest::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CertLoggerRequest::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 CertLoggerRequest::time_usec() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.time_usec)
  return time_usec_;
}
inline void CertLoggerRequest::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.time_usec)
}

// repeated string public_key_hash = 4;
inline int CertLoggerRequest::public_key_hash_size() const {
  return public_key_hash_.size();
}
inline void CertLoggerRequest::clear_public_key_hash() {
  public_key_hash_.Clear();
}
inline const ::std::string& CertLoggerRequest::public_key_hash(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Get(index);
}
inline ::std::string* CertLoggerRequest::mutable_public_key_hash(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Mutable(index);
}
inline void CertLoggerRequest::set_public_key_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  public_key_hash_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CertLoggerRequest::set_public_key_hash(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  public_key_hash_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CertLoggerRequest::set_public_key_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  public_key_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
inline void CertLoggerRequest::set_public_key_hash(int index, const char* value, size_t size) {
  public_key_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
inline ::std::string* CertLoggerRequest::add_public_key_hash() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_.Add();
}
inline void CertLoggerRequest::add_public_key_hash(const ::std::string& value) {
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
#if LANG_CXX11
inline void CertLoggerRequest::add_public_key_hash(::std::string&& value) {
  public_key_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
#endif
inline void CertLoggerRequest::add_public_key_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
inline void CertLoggerRequest::add_public_key_hash(const char* value, size_t size) {
  public_key_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertLoggerRequest::public_key_hash() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return public_key_hash_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CertLoggerRequest::mutable_public_key_hash() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.public_key_hash)
  return &public_key_hash_;
}

// repeated string pin = 5;
inline int CertLoggerRequest::pin_size() const {
  return pin_.size();
}
inline void CertLoggerRequest::clear_pin() {
  pin_.Clear();
}
inline const ::std::string& CertLoggerRequest::pin(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_.Get(index);
}
inline ::std::string* CertLoggerRequest::mutable_pin(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_.Mutable(index);
}
inline void CertLoggerRequest::set_pin(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.pin)
  pin_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CertLoggerRequest::set_pin(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.pin)
  pin_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CertLoggerRequest::set_pin(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.pin)
}
inline void CertLoggerRequest::set_pin(int index, const char* value, size_t size) {
  pin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.pin)
}
inline ::std::string* CertLoggerRequest::add_pin() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_.Add();
}
inline void CertLoggerRequest::add_pin(const ::std::string& value) {
  pin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.pin)
}
#if LANG_CXX11
inline void CertLoggerRequest::add_pin(::std::string&& value) {
  pin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.pin)
}
#endif
inline void CertLoggerRequest::add_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.CertLoggerRequest.pin)
}
inline void CertLoggerRequest::add_pin(const char* value, size_t size) {
  pin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.CertLoggerRequest.pin)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertLoggerRequest::pin() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.pin)
  return pin_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CertLoggerRequest::mutable_pin() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.pin)
  return &pin_;
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 6;
inline int CertLoggerRequest::cert_error_size() const {
  return cert_error_.size();
}
inline void CertLoggerRequest::clear_cert_error() {
  cert_error_.Clear();
}
inline ::chrome_browser_ssl::CertLoggerRequest_CertError CertLoggerRequest::cert_error(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.cert_error)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertError >(cert_error_.Get(index));
}
inline void CertLoggerRequest::set_cert_error(int index, ::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.cert_error)
}
inline void CertLoggerRequest::add_cert_error(::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.cert_error)
}
inline const ::google::protobuf::RepeatedField<int>&
CertLoggerRequest::cert_error() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.cert_error)
  return cert_error_;
}
inline ::google::protobuf::RepeatedField<int>*
CertLoggerRequest::mutable_cert_error() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.cert_error)
  return &cert_error_;
}

// optional .chrome_browser_ssl.CertLoggerInterstitialInfo interstitial_info = 7;
inline bool CertLoggerRequest::has_interstitial_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CertLoggerRequest::set_has_interstitial_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CertLoggerRequest::clear_has_interstitial_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CertLoggerRequest::clear_interstitial_info() {
  if (interstitial_info_ != NULL) interstitial_info_->::chrome_browser_ssl::CertLoggerInterstitialInfo::Clear();
  clear_has_interstitial_info();
}
inline const ::chrome_browser_ssl::CertLoggerInterstitialInfo& CertLoggerRequest::interstitial_info() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
  return interstitial_info_ != NULL ? *interstitial_info_
                         : *::chrome_browser_ssl::CertLoggerInterstitialInfo::internal_default_instance();
}
inline ::chrome_browser_ssl::CertLoggerInterstitialInfo* CertLoggerRequest::mutable_interstitial_info() {
  set_has_interstitial_info();
  if (interstitial_info_ == NULL) {
    interstitial_info_ = new ::chrome_browser_ssl::CertLoggerInterstitialInfo;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
  return interstitial_info_;
}
inline ::chrome_browser_ssl::CertLoggerInterstitialInfo* CertLoggerRequest::release_interstitial_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
  clear_has_interstitial_info();
  ::chrome_browser_ssl::CertLoggerInterstitialInfo* temp = interstitial_info_;
  interstitial_info_ = NULL;
  return temp;
}
inline void CertLoggerRequest::set_allocated_interstitial_info(::chrome_browser_ssl::CertLoggerInterstitialInfo* interstitial_info) {
  delete interstitial_info_;
  interstitial_info_ = interstitial_info;
  if (interstitial_info) {
    set_has_interstitial_info();
  } else {
    clear_has_interstitial_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.interstitial_info)
}

// optional string unverified_cert_chain = 8;
inline bool CertLoggerRequest::has_unverified_cert_chain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertLoggerRequest::set_has_unverified_cert_chain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CertLoggerRequest::clear_has_unverified_cert_chain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CertLoggerRequest::clear_unverified_cert_chain() {
  unverified_cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unverified_cert_chain();
}
inline const ::std::string& CertLoggerRequest::unverified_cert_chain() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
  return unverified_cert_chain_.GetNoArena();
}
inline void CertLoggerRequest::set_unverified_cert_chain(const ::std::string& value) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
#if LANG_CXX11
inline void CertLoggerRequest::set_unverified_cert_chain(::std::string&& value) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
#endif
inline void CertLoggerRequest::set_unverified_cert_chain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
inline void CertLoggerRequest::set_unverified_cert_chain(const char* value, size_t size) {
  set_has_unverified_cert_chain();
  unverified_cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}
inline ::std::string* CertLoggerRequest::mutable_unverified_cert_chain() {
  set_has_unverified_cert_chain();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
  return unverified_cert_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CertLoggerRequest::release_unverified_cert_chain() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
  clear_has_unverified_cert_chain();
  return unverified_cert_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertLoggerRequest::set_allocated_unverified_cert_chain(::std::string* unverified_cert_chain) {
  if (unverified_cert_chain != NULL) {
    set_has_unverified_cert_chain();
  } else {
    clear_has_unverified_cert_chain();
  }
  unverified_cert_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unverified_cert_chain);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.unverified_cert_chain)
}

// optional bool is_issued_by_known_root = 9;
inline bool CertLoggerRequest::has_is_issued_by_known_root() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CertLoggerRequest::set_has_is_issued_by_known_root() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CertLoggerRequest::clear_has_is_issued_by_known_root() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CertLoggerRequest::clear_is_issued_by_known_root() {
  is_issued_by_known_root_ = false;
  clear_has_is_issued_by_known_root();
}
inline bool CertLoggerRequest::is_issued_by_known_root() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.is_issued_by_known_root)
  return is_issued_by_known_root_;
}
inline void CertLoggerRequest::set_is_issued_by_known_root(bool value) {
  set_has_is_issued_by_known_root();
  is_issued_by_known_root_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.is_issued_by_known_root)
}

// optional .chrome_browser_ssl.CertLoggerFeaturesInfo features_info = 10;
inline bool CertLoggerRequest::has_features_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CertLoggerRequest::set_has_features_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CertLoggerRequest::clear_has_features_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CertLoggerRequest::clear_features_info() {
  if (features_info_ != NULL) features_info_->::chrome_browser_ssl::CertLoggerFeaturesInfo::Clear();
  clear_has_features_info();
}
inline const ::chrome_browser_ssl::CertLoggerFeaturesInfo& CertLoggerRequest::features_info() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.features_info)
  return features_info_ != NULL ? *features_info_
                         : *::chrome_browser_ssl::CertLoggerFeaturesInfo::internal_default_instance();
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo* CertLoggerRequest::mutable_features_info() {
  set_has_features_info();
  if (features_info_ == NULL) {
    features_info_ = new ::chrome_browser_ssl::CertLoggerFeaturesInfo;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.CertLoggerRequest.features_info)
  return features_info_;
}
inline ::chrome_browser_ssl::CertLoggerFeaturesInfo* CertLoggerRequest::release_features_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.CertLoggerRequest.features_info)
  clear_has_features_info();
  ::chrome_browser_ssl::CertLoggerFeaturesInfo* temp = features_info_;
  features_info_ = NULL;
  return temp;
}
inline void CertLoggerRequest::set_allocated_features_info(::chrome_browser_ssl::CertLoggerFeaturesInfo* features_info) {
  delete features_info_;
  features_info_ = features_info;
  if (features_info) {
    set_has_features_info();
  } else {
    clear_has_features_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.CertLoggerRequest.features_info)
}

// optional bool is_retry_upload = 11;
inline bool CertLoggerRequest::has_is_retry_upload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CertLoggerRequest::set_has_is_retry_upload() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CertLoggerRequest::clear_has_is_retry_upload() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CertLoggerRequest::clear_is_retry_upload() {
  is_retry_upload_ = false;
  clear_has_is_retry_upload();
}
inline bool CertLoggerRequest::is_retry_upload() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.is_retry_upload)
  return is_retry_upload_;
}
inline void CertLoggerRequest::set_is_retry_upload(bool value) {
  set_has_is_retry_upload();
  is_retry_upload_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.is_retry_upload)
}

// optional .chrome_browser_ssl.CertLoggerRequest.ChromeChannel chrome_channel = 12;
inline bool CertLoggerRequest::has_chrome_channel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CertLoggerRequest::set_has_chrome_channel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CertLoggerRequest::clear_has_chrome_channel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CertLoggerRequest::clear_chrome_channel() {
  chrome_channel_ = 0;
  clear_has_chrome_channel();
}
inline ::chrome_browser_ssl::CertLoggerRequest_ChromeChannel CertLoggerRequest::chrome_channel() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.chrome_channel)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_ChromeChannel >(chrome_channel_);
}
inline void CertLoggerRequest::set_chrome_channel(::chrome_browser_ssl::CertLoggerRequest_ChromeChannel value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_ChromeChannel_IsValid(value));
  set_has_chrome_channel();
  chrome_channel_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.chrome_channel)
}

// optional bool is_enterprise_managed = 13;
inline bool CertLoggerRequest::has_is_enterprise_managed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CertLoggerRequest::set_has_is_enterprise_managed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CertLoggerRequest::clear_has_is_enterprise_managed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CertLoggerRequest::clear_is_enterprise_managed() {
  is_enterprise_managed_ = false;
  clear_has_is_enterprise_managed();
}
inline bool CertLoggerRequest::is_enterprise_managed() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.is_enterprise_managed)
  return is_enterprise_managed_;
}
inline void CertLoggerRequest::set_is_enterprise_managed(bool value) {
  set_has_is_enterprise_managed();
  is_enterprise_managed_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.is_enterprise_managed)
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 14;
inline int CertLoggerRequest::cert_status_size() const {
  return cert_status_.size();
}
inline void CertLoggerRequest::clear_cert_status() {
  cert_status_.Clear();
}
inline ::chrome_browser_ssl::CertLoggerRequest_CertStatus CertLoggerRequest::cert_status(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.CertLoggerRequest.cert_status)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertStatus >(cert_status_.Get(index));
}
inline void CertLoggerRequest::set_cert_status(int index, ::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.CertLoggerRequest.cert_status)
}
inline void CertLoggerRequest::add_cert_status(::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.CertLoggerRequest.cert_status)
}
inline const ::google::protobuf::RepeatedField<int>&
CertLoggerRequest::cert_status() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.CertLoggerRequest.cert_status)
  return cert_status_;
}
inline ::google::protobuf::RepeatedField<int>*
CertLoggerRequest::mutable_cert_status() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.CertLoggerRequest.cert_status)
  return &cert_status_;
}

// -------------------------------------------------------------------

// TrialVerificationInfo

// required string cert_chain = 1;
inline bool TrialVerificationInfo::has_cert_chain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialVerificationInfo::set_has_cert_chain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialVerificationInfo::clear_has_cert_chain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialVerificationInfo::clear_cert_chain() {
  cert_chain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cert_chain();
}
inline const ::std::string& TrialVerificationInfo::cert_chain() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
  return cert_chain_.GetNoArena();
}
inline void TrialVerificationInfo::set_cert_chain(const ::std::string& value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
#if LANG_CXX11
inline void TrialVerificationInfo::set_cert_chain(::std::string&& value) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
#endif
inline void TrialVerificationInfo::set_cert_chain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
inline void TrialVerificationInfo::set_cert_chain(const char* value, size_t size) {
  set_has_cert_chain();
  cert_chain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}
inline ::std::string* TrialVerificationInfo::mutable_cert_chain() {
  set_has_cert_chain();
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
  return cert_chain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrialVerificationInfo::release_cert_chain() {
  // @@protoc_insertion_point(field_release:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
  clear_has_cert_chain();
  return cert_chain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrialVerificationInfo::set_allocated_cert_chain(::std::string* cert_chain) {
  if (cert_chain != NULL) {
    set_has_cert_chain();
  } else {
    clear_has_cert_chain();
  }
  cert_chain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cert_chain);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_ssl.TrialVerificationInfo.cert_chain)
}

// repeated string public_key_hash = 2;
inline int TrialVerificationInfo::public_key_hash_size() const {
  return public_key_hash_.size();
}
inline void TrialVerificationInfo::clear_public_key_hash() {
  public_key_hash_.Clear();
}
inline const ::std::string& TrialVerificationInfo::public_key_hash(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_.Get(index);
}
inline ::std::string* TrialVerificationInfo::mutable_public_key_hash(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_.Mutable(index);
}
inline void TrialVerificationInfo::set_public_key_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  public_key_hash_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TrialVerificationInfo::set_public_key_hash(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  public_key_hash_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TrialVerificationInfo::set_public_key_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  public_key_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
inline void TrialVerificationInfo::set_public_key_hash(int index, const char* value, size_t size) {
  public_key_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
inline ::std::string* TrialVerificationInfo::add_public_key_hash() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_.Add();
}
inline void TrialVerificationInfo::add_public_key_hash(const ::std::string& value) {
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
#if LANG_CXX11
inline void TrialVerificationInfo::add_public_key_hash(::std::string&& value) {
  public_key_hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
#endif
inline void TrialVerificationInfo::add_public_key_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  public_key_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
inline void TrialVerificationInfo::add_public_key_hash(const char* value, size_t size) {
  public_key_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrialVerificationInfo::public_key_hash() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return public_key_hash_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrialVerificationInfo::mutable_public_key_hash() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.public_key_hash)
  return &public_key_hash_;
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertError cert_error = 3;
inline int TrialVerificationInfo::cert_error_size() const {
  return cert_error_.size();
}
inline void TrialVerificationInfo::clear_cert_error() {
  cert_error_.Clear();
}
inline ::chrome_browser_ssl::CertLoggerRequest_CertError TrialVerificationInfo::cert_error(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.cert_error)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertError >(cert_error_.Get(index));
}
inline void TrialVerificationInfo::set_cert_error(int index, ::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.cert_error)
}
inline void TrialVerificationInfo::add_cert_error(::chrome_browser_ssl::CertLoggerRequest_CertError value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertError_IsValid(value));
  cert_error_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.cert_error)
}
inline const ::google::protobuf::RepeatedField<int>&
TrialVerificationInfo::cert_error() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.cert_error)
  return cert_error_;
}
inline ::google::protobuf::RepeatedField<int>*
TrialVerificationInfo::mutable_cert_error() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.cert_error)
  return &cert_error_;
}

// optional bool is_issued_by_known_root = 4;
inline bool TrialVerificationInfo::has_is_issued_by_known_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialVerificationInfo::set_has_is_issued_by_known_root() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialVerificationInfo::clear_has_is_issued_by_known_root() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialVerificationInfo::clear_is_issued_by_known_root() {
  is_issued_by_known_root_ = false;
  clear_has_is_issued_by_known_root();
}
inline bool TrialVerificationInfo::is_issued_by_known_root() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.is_issued_by_known_root)
  return is_issued_by_known_root_;
}
inline void TrialVerificationInfo::set_is_issued_by_known_root(bool value) {
  set_has_is_issued_by_known_root();
  is_issued_by_known_root_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.is_issued_by_known_root)
}

// repeated .chrome_browser_ssl.CertLoggerRequest.CertStatus cert_status = 5;
inline int TrialVerificationInfo::cert_status_size() const {
  return cert_status_.size();
}
inline void TrialVerificationInfo::clear_cert_status() {
  cert_status_.Clear();
}
inline ::chrome_browser_ssl::CertLoggerRequest_CertStatus TrialVerificationInfo::cert_status(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.cert_status)
  return static_cast< ::chrome_browser_ssl::CertLoggerRequest_CertStatus >(cert_status_.Get(index));
}
inline void TrialVerificationInfo::set_cert_status(int index, ::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.cert_status)
}
inline void TrialVerificationInfo::add_cert_status(::chrome_browser_ssl::CertLoggerRequest_CertStatus value) {
  assert(::chrome_browser_ssl::CertLoggerRequest_CertStatus_IsValid(value));
  cert_status_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.cert_status)
}
inline const ::google::protobuf::RepeatedField<int>&
TrialVerificationInfo::cert_status() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.cert_status)
  return cert_status_;
}
inline ::google::protobuf::RepeatedField<int>*
TrialVerificationInfo::mutable_cert_status() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.cert_status)
  return &cert_status_;
}

// repeated .chrome_browser_ssl.TrialVerificationInfo.VerifyFlags verify_flags = 6;
inline int TrialVerificationInfo::verify_flags_size() const {
  return verify_flags_.size();
}
inline void TrialVerificationInfo::clear_verify_flags() {
  verify_flags_.Clear();
}
inline ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags TrialVerificationInfo::verify_flags(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
  return static_cast< ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags >(verify_flags_.Get(index));
}
inline void TrialVerificationInfo::set_verify_flags(int index, ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags value) {
  assert(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags_IsValid(value));
  verify_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
}
inline void TrialVerificationInfo::add_verify_flags(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags value) {
  assert(::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags_IsValid(value));
  verify_flags_.Add(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
}
inline const ::google::protobuf::RepeatedField<int>&
TrialVerificationInfo::verify_flags() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
  return verify_flags_;
}
inline ::google::protobuf::RepeatedField<int>*
TrialVerificationInfo::mutable_verify_flags() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.TrialVerificationInfo.verify_flags)
  return &verify_flags_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace chrome_browser_ssl

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerInterstitialInfo_InterstitialReason> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerFeaturesInfo_NetworkTimeQueryingInfo_NetworkTimeFetchBehavior> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerFeaturesInfo_AndroidAIAFetchingStatus> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerRequest_CertError> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerRequest_ChromeChannel> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::CertLoggerRequest_CertStatus> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::chrome_browser_ssl::TrialVerificationInfo_VerifyFlags> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cert_5flogger_2eproto__INCLUDED
