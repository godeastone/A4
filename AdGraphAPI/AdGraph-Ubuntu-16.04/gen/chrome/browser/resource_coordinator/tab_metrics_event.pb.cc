// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tab_metrics_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tab_metrics_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace metrics {
class TabMetricsEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TabMetricsEvent> {
} _TabMetricsEvent_default_instance_;
class WindowMetricsEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WindowMetricsEvent> {
} _WindowMetricsEvent_default_instance_;

namespace protobuf_tab_5fmetrics_5fevent_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _TabMetricsEvent_default_instance_.Shutdown();
  _WindowMetricsEvent_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TabMetricsEvent_default_instance_.DefaultConstruct();
  _WindowMetricsEvent_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_tab_5fmetrics_5fevent_2eproto

bool TabMetricsEvent_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_UNKNOWN;
const TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_OTHER;
const TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_APPLICATION;
const TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_AUDIO;
const TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_IMAGE;
const TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_TEXT;
const TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_TEXT_HTML;
const TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_VIDEO;
const TabMetricsEvent_ContentType TabMetricsEvent::ContentType_MIN;
const TabMetricsEvent_ContentType TabMetricsEvent::ContentType_MAX;
const int TabMetricsEvent::ContentType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool WindowMetricsEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WindowMetricsEvent_Type WindowMetricsEvent::TYPE_UNKNOWN;
const WindowMetricsEvent_Type WindowMetricsEvent::TYPE_TABBED;
const WindowMetricsEvent_Type WindowMetricsEvent::TYPE_POPUP;
const WindowMetricsEvent_Type WindowMetricsEvent::TYPE_EXTENSION;
const WindowMetricsEvent_Type WindowMetricsEvent::TYPE_APP;
const WindowMetricsEvent_Type WindowMetricsEvent::Type_MIN;
const WindowMetricsEvent_Type WindowMetricsEvent::Type_MAX;
const int WindowMetricsEvent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool WindowMetricsEvent_ShowState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WindowMetricsEvent_ShowState WindowMetricsEvent::SHOW_STATE_UNKNOWN;
const WindowMetricsEvent_ShowState WindowMetricsEvent::SHOW_STATE_NORMAL;
const WindowMetricsEvent_ShowState WindowMetricsEvent::SHOW_STATE_MINIMIZED;
const WindowMetricsEvent_ShowState WindowMetricsEvent::SHOW_STATE_MAXIMIZED;
const WindowMetricsEvent_ShowState WindowMetricsEvent::SHOW_STATE_FULLSCREEN;
const WindowMetricsEvent_ShowState WindowMetricsEvent::ShowState_MIN;
const WindowMetricsEvent_ShowState WindowMetricsEvent::ShowState_MAX;
const int WindowMetricsEvent::ShowState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TabMetricsEvent::kContentTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TabMetricsEvent::TabMetricsEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tab_5fmetrics_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.TabMetricsEvent)
}
TabMetricsEvent::TabMetricsEvent(const TabMetricsEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:metrics.TabMetricsEvent)
}

void TabMetricsEvent::SharedCtor() {
  _cached_size_ = 0;
  content_type_ = 0;
}

TabMetricsEvent::~TabMetricsEvent() {
  // @@protoc_insertion_point(destructor:metrics.TabMetricsEvent)
  SharedDtor();
}

void TabMetricsEvent::SharedDtor() {
}

void TabMetricsEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TabMetricsEvent& TabMetricsEvent::default_instance() {
  protobuf_tab_5fmetrics_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

TabMetricsEvent* TabMetricsEvent::New(::google::protobuf::Arena* arena) const {
  TabMetricsEvent* n = new TabMetricsEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TabMetricsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.TabMetricsEvent)
  content_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TabMetricsEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.TabMetricsEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.TabMetricsEvent.ContentType content_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::TabMetricsEvent_ContentType_IsValid(value)) {
            set_content_type(static_cast< ::metrics::TabMetricsEvent_ContentType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.TabMetricsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.TabMetricsEvent)
  return false;
#undef DO_
}

void TabMetricsEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.TabMetricsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.TabMetricsEvent.ContentType content_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->content_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.TabMetricsEvent)
}

size_t TabMetricsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.TabMetricsEvent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .metrics.TabMetricsEvent.ContentType content_type = 1;
  if (has_content_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->content_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TabMetricsEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TabMetricsEvent*>(&from));
}

void TabMetricsEvent::MergeFrom(const TabMetricsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.TabMetricsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_content_type()) {
    set_content_type(from.content_type());
  }
}

void TabMetricsEvent::CopyFrom(const TabMetricsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.TabMetricsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabMetricsEvent::IsInitialized() const {
  return true;
}

void TabMetricsEvent::Swap(TabMetricsEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TabMetricsEvent::InternalSwap(TabMetricsEvent* other) {
  std::swap(content_type_, other->content_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TabMetricsEvent::GetTypeName() const {
  return "metrics.TabMetricsEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TabMetricsEvent

// optional .metrics.TabMetricsEvent.ContentType content_type = 1;
bool TabMetricsEvent::has_content_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TabMetricsEvent::set_has_content_type() {
  _has_bits_[0] |= 0x00000001u;
}
void TabMetricsEvent::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void TabMetricsEvent::clear_content_type() {
  content_type_ = 0;
  clear_has_content_type();
}
::metrics::TabMetricsEvent_ContentType TabMetricsEvent::content_type() const {
  // @@protoc_insertion_point(field_get:metrics.TabMetricsEvent.content_type)
  return static_cast< ::metrics::TabMetricsEvent_ContentType >(content_type_);
}
void TabMetricsEvent::set_content_type(::metrics::TabMetricsEvent_ContentType value) {
  assert(::metrics::TabMetricsEvent_ContentType_IsValid(value));
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.TabMetricsEvent.content_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindowMetricsEvent::kTypeFieldNumber;
const int WindowMetricsEvent::kShowStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindowMetricsEvent::WindowMetricsEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tab_5fmetrics_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.WindowMetricsEvent)
}
WindowMetricsEvent::WindowMetricsEvent(const WindowMetricsEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(show_state_));
  // @@protoc_insertion_point(copy_constructor:metrics.WindowMetricsEvent)
}

void WindowMetricsEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(show_state_));
}

WindowMetricsEvent::~WindowMetricsEvent() {
  // @@protoc_insertion_point(destructor:metrics.WindowMetricsEvent)
  SharedDtor();
}

void WindowMetricsEvent::SharedDtor() {
}

void WindowMetricsEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WindowMetricsEvent& WindowMetricsEvent::default_instance() {
  protobuf_tab_5fmetrics_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

WindowMetricsEvent* WindowMetricsEvent::New(::google::protobuf::Arena* arena) const {
  WindowMetricsEvent* n = new WindowMetricsEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindowMetricsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.WindowMetricsEvent)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_state_) -
        reinterpret_cast<char*>(&type_)) + sizeof(show_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WindowMetricsEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:metrics.WindowMetricsEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.WindowMetricsEvent.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::WindowMetricsEvent_Type_IsValid(value)) {
            set_type(static_cast< ::metrics::WindowMetricsEvent_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.WindowMetricsEvent.ShowState show_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::WindowMetricsEvent_ShowState_IsValid(value)) {
            set_show_state(static_cast< ::metrics::WindowMetricsEvent_ShowState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.WindowMetricsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.WindowMetricsEvent)
  return false;
#undef DO_
}

void WindowMetricsEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.WindowMetricsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.WindowMetricsEvent.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .metrics.WindowMetricsEvent.ShowState show_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->show_state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.WindowMetricsEvent)
}

size_t WindowMetricsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.WindowMetricsEvent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .metrics.WindowMetricsEvent.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .metrics.WindowMetricsEvent.ShowState show_state = 2;
    if (has_show_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->show_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindowMetricsEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WindowMetricsEvent*>(&from));
}

void WindowMetricsEvent::MergeFrom(const WindowMetricsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.WindowMetricsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_state_ = from.show_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WindowMetricsEvent::CopyFrom(const WindowMetricsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.WindowMetricsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowMetricsEvent::IsInitialized() const {
  return true;
}

void WindowMetricsEvent::Swap(WindowMetricsEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindowMetricsEvent::InternalSwap(WindowMetricsEvent* other) {
  std::swap(type_, other->type_);
  std::swap(show_state_, other->show_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string WindowMetricsEvent::GetTypeName() const {
  return "metrics.WindowMetricsEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindowMetricsEvent

// optional .metrics.WindowMetricsEvent.Type type = 1;
bool WindowMetricsEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WindowMetricsEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void WindowMetricsEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void WindowMetricsEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
::metrics::WindowMetricsEvent_Type WindowMetricsEvent::type() const {
  // @@protoc_insertion_point(field_get:metrics.WindowMetricsEvent.type)
  return static_cast< ::metrics::WindowMetricsEvent_Type >(type_);
}
void WindowMetricsEvent::set_type(::metrics::WindowMetricsEvent_Type value) {
  assert(::metrics::WindowMetricsEvent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:metrics.WindowMetricsEvent.type)
}

// optional .metrics.WindowMetricsEvent.ShowState show_state = 2;
bool WindowMetricsEvent::has_show_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WindowMetricsEvent::set_has_show_state() {
  _has_bits_[0] |= 0x00000002u;
}
void WindowMetricsEvent::clear_has_show_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void WindowMetricsEvent::clear_show_state() {
  show_state_ = 0;
  clear_has_show_state();
}
::metrics::WindowMetricsEvent_ShowState WindowMetricsEvent::show_state() const {
  // @@protoc_insertion_point(field_get:metrics.WindowMetricsEvent.show_state)
  return static_cast< ::metrics::WindowMetricsEvent_ShowState >(show_state_);
}
void WindowMetricsEvent::set_show_state(::metrics::WindowMetricsEvent_ShowState value) {
  assert(::metrics::WindowMetricsEvent_ShowState_IsValid(value));
  set_has_show_state();
  show_state_ = value;
  // @@protoc_insertion_point(field_set:metrics.WindowMetricsEvent.show_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
