// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: site_characteristics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "site_characteristics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
class SiteCharacteristicsFeatureProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SiteCharacteristicsFeatureProto> {
} _SiteCharacteristicsFeatureProto_default_instance_;
class SiteCharacteristicsProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SiteCharacteristicsProto> {
} _SiteCharacteristicsProto_default_instance_;

namespace protobuf_site_5fcharacteristics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SiteCharacteristicsFeatureProto_default_instance_.Shutdown();
  _SiteCharacteristicsProto_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SiteCharacteristicsFeatureProto_default_instance_.DefaultConstruct();
  _SiteCharacteristicsProto_default_instance_.DefaultConstruct();
  _SiteCharacteristicsProto_default_instance_.get_mutable()->updates_favicon_in_background_ = const_cast< ::SiteCharacteristicsFeatureProto*>(
      ::SiteCharacteristicsFeatureProto::internal_default_instance());
  _SiteCharacteristicsProto_default_instance_.get_mutable()->updates_title_in_background_ = const_cast< ::SiteCharacteristicsFeatureProto*>(
      ::SiteCharacteristicsFeatureProto::internal_default_instance());
  _SiteCharacteristicsProto_default_instance_.get_mutable()->uses_audio_in_background_ = const_cast< ::SiteCharacteristicsFeatureProto*>(
      ::SiteCharacteristicsFeatureProto::internal_default_instance());
  _SiteCharacteristicsProto_default_instance_.get_mutable()->uses_notifications_in_background_ = const_cast< ::SiteCharacteristicsFeatureProto*>(
      ::SiteCharacteristicsFeatureProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_site_5fcharacteristics_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteCharacteristicsFeatureProto::kObservationDurationFieldNumber;
const int SiteCharacteristicsFeatureProto::kUseTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteCharacteristicsFeatureProto::SiteCharacteristicsFeatureProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_site_5fcharacteristics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SiteCharacteristicsFeatureProto)
}
SiteCharacteristicsFeatureProto::SiteCharacteristicsFeatureProto(const SiteCharacteristicsFeatureProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&observation_duration_, &from.observation_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_timestamp_) -
    reinterpret_cast<char*>(&observation_duration_)) + sizeof(use_timestamp_));
  // @@protoc_insertion_point(copy_constructor:SiteCharacteristicsFeatureProto)
}

void SiteCharacteristicsFeatureProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&observation_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_timestamp_) -
      reinterpret_cast<char*>(&observation_duration_)) + sizeof(use_timestamp_));
}

SiteCharacteristicsFeatureProto::~SiteCharacteristicsFeatureProto() {
  // @@protoc_insertion_point(destructor:SiteCharacteristicsFeatureProto)
  SharedDtor();
}

void SiteCharacteristicsFeatureProto::SharedDtor() {
}

void SiteCharacteristicsFeatureProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SiteCharacteristicsFeatureProto& SiteCharacteristicsFeatureProto::default_instance() {
  protobuf_site_5fcharacteristics_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiteCharacteristicsFeatureProto* SiteCharacteristicsFeatureProto::New(::google::protobuf::Arena* arena) const {
  SiteCharacteristicsFeatureProto* n = new SiteCharacteristicsFeatureProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiteCharacteristicsFeatureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteCharacteristicsFeatureProto)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&observation_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_timestamp_) -
        reinterpret_cast<char*>(&observation_duration_)) + sizeof(use_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiteCharacteristicsFeatureProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:SiteCharacteristicsFeatureProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 observation_duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_observation_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &observation_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 use_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_use_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SiteCharacteristicsFeatureProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SiteCharacteristicsFeatureProto)
  return false;
#undef DO_
}

void SiteCharacteristicsFeatureProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SiteCharacteristicsFeatureProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 observation_duration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->observation_duration(), output);
  }

  // required int64 use_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->use_timestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SiteCharacteristicsFeatureProto)
}

size_t SiteCharacteristicsFeatureProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SiteCharacteristicsFeatureProto)
  size_t total_size = 0;

  if (has_observation_duration()) {
    // required int64 observation_duration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->observation_duration());
  }

  if (has_use_timestamp()) {
    // required int64 use_timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->use_timestamp());
  }

  return total_size;
}
size_t SiteCharacteristicsFeatureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteCharacteristicsFeatureProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 observation_duration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->observation_duration());

    // required int64 use_timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->use_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiteCharacteristicsFeatureProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SiteCharacteristicsFeatureProto*>(&from));
}

void SiteCharacteristicsFeatureProto::MergeFrom(const SiteCharacteristicsFeatureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteCharacteristicsFeatureProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      observation_duration_ = from.observation_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_timestamp_ = from.use_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteCharacteristicsFeatureProto::CopyFrom(const SiteCharacteristicsFeatureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteCharacteristicsFeatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteCharacteristicsFeatureProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SiteCharacteristicsFeatureProto::Swap(SiteCharacteristicsFeatureProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteCharacteristicsFeatureProto::InternalSwap(SiteCharacteristicsFeatureProto* other) {
  std::swap(observation_duration_, other->observation_duration_);
  std::swap(use_timestamp_, other->use_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SiteCharacteristicsFeatureProto::GetTypeName() const {
  return "SiteCharacteristicsFeatureProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiteCharacteristicsFeatureProto

// required int64 observation_duration = 1;
bool SiteCharacteristicsFeatureProto::has_observation_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiteCharacteristicsFeatureProto::set_has_observation_duration() {
  _has_bits_[0] |= 0x00000001u;
}
void SiteCharacteristicsFeatureProto::clear_has_observation_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiteCharacteristicsFeatureProto::clear_observation_duration() {
  observation_duration_ = GOOGLE_LONGLONG(0);
  clear_has_observation_duration();
}
::google::protobuf::int64 SiteCharacteristicsFeatureProto::observation_duration() const {
  // @@protoc_insertion_point(field_get:SiteCharacteristicsFeatureProto.observation_duration)
  return observation_duration_;
}
void SiteCharacteristicsFeatureProto::set_observation_duration(::google::protobuf::int64 value) {
  set_has_observation_duration();
  observation_duration_ = value;
  // @@protoc_insertion_point(field_set:SiteCharacteristicsFeatureProto.observation_duration)
}

// required int64 use_timestamp = 2;
bool SiteCharacteristicsFeatureProto::has_use_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiteCharacteristicsFeatureProto::set_has_use_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void SiteCharacteristicsFeatureProto::clear_has_use_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiteCharacteristicsFeatureProto::clear_use_timestamp() {
  use_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_use_timestamp();
}
::google::protobuf::int64 SiteCharacteristicsFeatureProto::use_timestamp() const {
  // @@protoc_insertion_point(field_get:SiteCharacteristicsFeatureProto.use_timestamp)
  return use_timestamp_;
}
void SiteCharacteristicsFeatureProto::set_use_timestamp(::google::protobuf::int64 value) {
  set_has_use_timestamp();
  use_timestamp_ = value;
  // @@protoc_insertion_point(field_set:SiteCharacteristicsFeatureProto.use_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteCharacteristicsProto::kLastLoadedFieldNumber;
const int SiteCharacteristicsProto::kUpdatesFaviconInBackgroundFieldNumber;
const int SiteCharacteristicsProto::kUpdatesTitleInBackgroundFieldNumber;
const int SiteCharacteristicsProto::kUsesAudioInBackgroundFieldNumber;
const int SiteCharacteristicsProto::kUsesNotificationsInBackgroundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteCharacteristicsProto::SiteCharacteristicsProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_site_5fcharacteristics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SiteCharacteristicsProto)
}
SiteCharacteristicsProto::SiteCharacteristicsProto(const SiteCharacteristicsProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_updates_favicon_in_background()) {
    updates_favicon_in_background_ = new ::SiteCharacteristicsFeatureProto(*from.updates_favicon_in_background_);
  } else {
    updates_favicon_in_background_ = NULL;
  }
  if (from.has_updates_title_in_background()) {
    updates_title_in_background_ = new ::SiteCharacteristicsFeatureProto(*from.updates_title_in_background_);
  } else {
    updates_title_in_background_ = NULL;
  }
  if (from.has_uses_audio_in_background()) {
    uses_audio_in_background_ = new ::SiteCharacteristicsFeatureProto(*from.uses_audio_in_background_);
  } else {
    uses_audio_in_background_ = NULL;
  }
  if (from.has_uses_notifications_in_background()) {
    uses_notifications_in_background_ = new ::SiteCharacteristicsFeatureProto(*from.uses_notifications_in_background_);
  } else {
    uses_notifications_in_background_ = NULL;
  }
  last_loaded_ = from.last_loaded_;
  // @@protoc_insertion_point(copy_constructor:SiteCharacteristicsProto)
}

void SiteCharacteristicsProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&updates_favicon_in_background_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_loaded_) -
      reinterpret_cast<char*>(&updates_favicon_in_background_)) + sizeof(last_loaded_));
}

SiteCharacteristicsProto::~SiteCharacteristicsProto() {
  // @@protoc_insertion_point(destructor:SiteCharacteristicsProto)
  SharedDtor();
}

void SiteCharacteristicsProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete updates_favicon_in_background_;
  }
  if (this != internal_default_instance()) {
    delete updates_title_in_background_;
  }
  if (this != internal_default_instance()) {
    delete uses_audio_in_background_;
  }
  if (this != internal_default_instance()) {
    delete uses_notifications_in_background_;
  }
}

void SiteCharacteristicsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SiteCharacteristicsProto& SiteCharacteristicsProto::default_instance() {
  protobuf_site_5fcharacteristics_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiteCharacteristicsProto* SiteCharacteristicsProto::New(::google::protobuf::Arena* arena) const {
  SiteCharacteristicsProto* n = new SiteCharacteristicsProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiteCharacteristicsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteCharacteristicsProto)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_updates_favicon_in_background()) {
      GOOGLE_DCHECK(updates_favicon_in_background_ != NULL);
      updates_favicon_in_background_->::SiteCharacteristicsFeatureProto::Clear();
    }
    if (has_updates_title_in_background()) {
      GOOGLE_DCHECK(updates_title_in_background_ != NULL);
      updates_title_in_background_->::SiteCharacteristicsFeatureProto::Clear();
    }
    if (has_uses_audio_in_background()) {
      GOOGLE_DCHECK(uses_audio_in_background_ != NULL);
      uses_audio_in_background_->::SiteCharacteristicsFeatureProto::Clear();
    }
    if (has_uses_notifications_in_background()) {
      GOOGLE_DCHECK(uses_notifications_in_background_ != NULL);
      uses_notifications_in_background_->::SiteCharacteristicsFeatureProto::Clear();
    }
  }
  last_loaded_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiteCharacteristicsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:SiteCharacteristicsProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 last_loaded = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_last_loaded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_loaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SiteCharacteristicsFeatureProto updates_favicon_in_background = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updates_favicon_in_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SiteCharacteristicsFeatureProto updates_title_in_background = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updates_title_in_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SiteCharacteristicsFeatureProto uses_audio_in_background = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uses_audio_in_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SiteCharacteristicsFeatureProto uses_notifications_in_background = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uses_notifications_in_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SiteCharacteristicsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SiteCharacteristicsProto)
  return false;
#undef DO_
}

void SiteCharacteristicsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SiteCharacteristicsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 last_loaded = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_loaded(), output);
  }

  // required .SiteCharacteristicsFeatureProto updates_favicon_in_background = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->updates_favicon_in_background_, output);
  }

  // required .SiteCharacteristicsFeatureProto updates_title_in_background = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->updates_title_in_background_, output);
  }

  // required .SiteCharacteristicsFeatureProto uses_audio_in_background = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->uses_audio_in_background_, output);
  }

  // required .SiteCharacteristicsFeatureProto uses_notifications_in_background = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->uses_notifications_in_background_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SiteCharacteristicsProto)
}

size_t SiteCharacteristicsProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SiteCharacteristicsProto)
  size_t total_size = 0;

  if (has_updates_favicon_in_background()) {
    // required .SiteCharacteristicsFeatureProto updates_favicon_in_background = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->updates_favicon_in_background_);
  }

  if (has_updates_title_in_background()) {
    // required .SiteCharacteristicsFeatureProto updates_title_in_background = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->updates_title_in_background_);
  }

  if (has_uses_audio_in_background()) {
    // required .SiteCharacteristicsFeatureProto uses_audio_in_background = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uses_audio_in_background_);
  }

  if (has_uses_notifications_in_background()) {
    // required .SiteCharacteristicsFeatureProto uses_notifications_in_background = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uses_notifications_in_background_);
  }

  if (has_last_loaded()) {
    // required uint32 last_loaded = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_loaded());
  }

  return total_size;
}
size_t SiteCharacteristicsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteCharacteristicsProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .SiteCharacteristicsFeatureProto updates_favicon_in_background = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->updates_favicon_in_background_);

    // required .SiteCharacteristicsFeatureProto updates_title_in_background = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->updates_title_in_background_);

    // required .SiteCharacteristicsFeatureProto uses_audio_in_background = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uses_audio_in_background_);

    // required .SiteCharacteristicsFeatureProto uses_notifications_in_background = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uses_notifications_in_background_);

    // required uint32 last_loaded = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_loaded());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiteCharacteristicsProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SiteCharacteristicsProto*>(&from));
}

void SiteCharacteristicsProto::MergeFrom(const SiteCharacteristicsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteCharacteristicsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_updates_favicon_in_background()->::SiteCharacteristicsFeatureProto::MergeFrom(from.updates_favicon_in_background());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_updates_title_in_background()->::SiteCharacteristicsFeatureProto::MergeFrom(from.updates_title_in_background());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_uses_audio_in_background()->::SiteCharacteristicsFeatureProto::MergeFrom(from.uses_audio_in_background());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_uses_notifications_in_background()->::SiteCharacteristicsFeatureProto::MergeFrom(from.uses_notifications_in_background());
    }
    if (cached_has_bits & 0x00000010u) {
      last_loaded_ = from.last_loaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteCharacteristicsProto::CopyFrom(const SiteCharacteristicsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteCharacteristicsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteCharacteristicsProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_updates_favicon_in_background()) {
    if (!this->updates_favicon_in_background_->IsInitialized()) return false;
  }
  if (has_updates_title_in_background()) {
    if (!this->updates_title_in_background_->IsInitialized()) return false;
  }
  if (has_uses_audio_in_background()) {
    if (!this->uses_audio_in_background_->IsInitialized()) return false;
  }
  if (has_uses_notifications_in_background()) {
    if (!this->uses_notifications_in_background_->IsInitialized()) return false;
  }
  return true;
}

void SiteCharacteristicsProto::Swap(SiteCharacteristicsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteCharacteristicsProto::InternalSwap(SiteCharacteristicsProto* other) {
  std::swap(updates_favicon_in_background_, other->updates_favicon_in_background_);
  std::swap(updates_title_in_background_, other->updates_title_in_background_);
  std::swap(uses_audio_in_background_, other->uses_audio_in_background_);
  std::swap(uses_notifications_in_background_, other->uses_notifications_in_background_);
  std::swap(last_loaded_, other->last_loaded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SiteCharacteristicsProto::GetTypeName() const {
  return "SiteCharacteristicsProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiteCharacteristicsProto

// required uint32 last_loaded = 1;
bool SiteCharacteristicsProto::has_last_loaded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SiteCharacteristicsProto::set_has_last_loaded() {
  _has_bits_[0] |= 0x00000010u;
}
void SiteCharacteristicsProto::clear_has_last_loaded() {
  _has_bits_[0] &= ~0x00000010u;
}
void SiteCharacteristicsProto::clear_last_loaded() {
  last_loaded_ = 0u;
  clear_has_last_loaded();
}
::google::protobuf::uint32 SiteCharacteristicsProto::last_loaded() const {
  // @@protoc_insertion_point(field_get:SiteCharacteristicsProto.last_loaded)
  return last_loaded_;
}
void SiteCharacteristicsProto::set_last_loaded(::google::protobuf::uint32 value) {
  set_has_last_loaded();
  last_loaded_ = value;
  // @@protoc_insertion_point(field_set:SiteCharacteristicsProto.last_loaded)
}

// required .SiteCharacteristicsFeatureProto updates_favicon_in_background = 2;
bool SiteCharacteristicsProto::has_updates_favicon_in_background() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiteCharacteristicsProto::set_has_updates_favicon_in_background() {
  _has_bits_[0] |= 0x00000001u;
}
void SiteCharacteristicsProto::clear_has_updates_favicon_in_background() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiteCharacteristicsProto::clear_updates_favicon_in_background() {
  if (updates_favicon_in_background_ != NULL) updates_favicon_in_background_->::SiteCharacteristicsFeatureProto::Clear();
  clear_has_updates_favicon_in_background();
}
const ::SiteCharacteristicsFeatureProto& SiteCharacteristicsProto::updates_favicon_in_background() const {
  // @@protoc_insertion_point(field_get:SiteCharacteristicsProto.updates_favicon_in_background)
  return updates_favicon_in_background_ != NULL ? *updates_favicon_in_background_
                         : *::SiteCharacteristicsFeatureProto::internal_default_instance();
}
::SiteCharacteristicsFeatureProto* SiteCharacteristicsProto::mutable_updates_favicon_in_background() {
  set_has_updates_favicon_in_background();
  if (updates_favicon_in_background_ == NULL) {
    updates_favicon_in_background_ = new ::SiteCharacteristicsFeatureProto;
  }
  // @@protoc_insertion_point(field_mutable:SiteCharacteristicsProto.updates_favicon_in_background)
  return updates_favicon_in_background_;
}
::SiteCharacteristicsFeatureProto* SiteCharacteristicsProto::release_updates_favicon_in_background() {
  // @@protoc_insertion_point(field_release:SiteCharacteristicsProto.updates_favicon_in_background)
  clear_has_updates_favicon_in_background();
  ::SiteCharacteristicsFeatureProto* temp = updates_favicon_in_background_;
  updates_favicon_in_background_ = NULL;
  return temp;
}
void SiteCharacteristicsProto::set_allocated_updates_favicon_in_background(::SiteCharacteristicsFeatureProto* updates_favicon_in_background) {
  delete updates_favicon_in_background_;
  updates_favicon_in_background_ = updates_favicon_in_background;
  if (updates_favicon_in_background) {
    set_has_updates_favicon_in_background();
  } else {
    clear_has_updates_favicon_in_background();
  }
  // @@protoc_insertion_point(field_set_allocated:SiteCharacteristicsProto.updates_favicon_in_background)
}

// required .SiteCharacteristicsFeatureProto updates_title_in_background = 3;
bool SiteCharacteristicsProto::has_updates_title_in_background() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiteCharacteristicsProto::set_has_updates_title_in_background() {
  _has_bits_[0] |= 0x00000002u;
}
void SiteCharacteristicsProto::clear_has_updates_title_in_background() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiteCharacteristicsProto::clear_updates_title_in_background() {
  if (updates_title_in_background_ != NULL) updates_title_in_background_->::SiteCharacteristicsFeatureProto::Clear();
  clear_has_updates_title_in_background();
}
const ::SiteCharacteristicsFeatureProto& SiteCharacteristicsProto::updates_title_in_background() const {
  // @@protoc_insertion_point(field_get:SiteCharacteristicsProto.updates_title_in_background)
  return updates_title_in_background_ != NULL ? *updates_title_in_background_
                         : *::SiteCharacteristicsFeatureProto::internal_default_instance();
}
::SiteCharacteristicsFeatureProto* SiteCharacteristicsProto::mutable_updates_title_in_background() {
  set_has_updates_title_in_background();
  if (updates_title_in_background_ == NULL) {
    updates_title_in_background_ = new ::SiteCharacteristicsFeatureProto;
  }
  // @@protoc_insertion_point(field_mutable:SiteCharacteristicsProto.updates_title_in_background)
  return updates_title_in_background_;
}
::SiteCharacteristicsFeatureProto* SiteCharacteristicsProto::release_updates_title_in_background() {
  // @@protoc_insertion_point(field_release:SiteCharacteristicsProto.updates_title_in_background)
  clear_has_updates_title_in_background();
  ::SiteCharacteristicsFeatureProto* temp = updates_title_in_background_;
  updates_title_in_background_ = NULL;
  return temp;
}
void SiteCharacteristicsProto::set_allocated_updates_title_in_background(::SiteCharacteristicsFeatureProto* updates_title_in_background) {
  delete updates_title_in_background_;
  updates_title_in_background_ = updates_title_in_background;
  if (updates_title_in_background) {
    set_has_updates_title_in_background();
  } else {
    clear_has_updates_title_in_background();
  }
  // @@protoc_insertion_point(field_set_allocated:SiteCharacteristicsProto.updates_title_in_background)
}

// required .SiteCharacteristicsFeatureProto uses_audio_in_background = 4;
bool SiteCharacteristicsProto::has_uses_audio_in_background() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SiteCharacteristicsProto::set_has_uses_audio_in_background() {
  _has_bits_[0] |= 0x00000004u;
}
void SiteCharacteristicsProto::clear_has_uses_audio_in_background() {
  _has_bits_[0] &= ~0x00000004u;
}
void SiteCharacteristicsProto::clear_uses_audio_in_background() {
  if (uses_audio_in_background_ != NULL) uses_audio_in_background_->::SiteCharacteristicsFeatureProto::Clear();
  clear_has_uses_audio_in_background();
}
const ::SiteCharacteristicsFeatureProto& SiteCharacteristicsProto::uses_audio_in_background() const {
  // @@protoc_insertion_point(field_get:SiteCharacteristicsProto.uses_audio_in_background)
  return uses_audio_in_background_ != NULL ? *uses_audio_in_background_
                         : *::SiteCharacteristicsFeatureProto::internal_default_instance();
}
::SiteCharacteristicsFeatureProto* SiteCharacteristicsProto::mutable_uses_audio_in_background() {
  set_has_uses_audio_in_background();
  if (uses_audio_in_background_ == NULL) {
    uses_audio_in_background_ = new ::SiteCharacteristicsFeatureProto;
  }
  // @@protoc_insertion_point(field_mutable:SiteCharacteristicsProto.uses_audio_in_background)
  return uses_audio_in_background_;
}
::SiteCharacteristicsFeatureProto* SiteCharacteristicsProto::release_uses_audio_in_background() {
  // @@protoc_insertion_point(field_release:SiteCharacteristicsProto.uses_audio_in_background)
  clear_has_uses_audio_in_background();
  ::SiteCharacteristicsFeatureProto* temp = uses_audio_in_background_;
  uses_audio_in_background_ = NULL;
  return temp;
}
void SiteCharacteristicsProto::set_allocated_uses_audio_in_background(::SiteCharacteristicsFeatureProto* uses_audio_in_background) {
  delete uses_audio_in_background_;
  uses_audio_in_background_ = uses_audio_in_background;
  if (uses_audio_in_background) {
    set_has_uses_audio_in_background();
  } else {
    clear_has_uses_audio_in_background();
  }
  // @@protoc_insertion_point(field_set_allocated:SiteCharacteristicsProto.uses_audio_in_background)
}

// required .SiteCharacteristicsFeatureProto uses_notifications_in_background = 5;
bool SiteCharacteristicsProto::has_uses_notifications_in_background() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SiteCharacteristicsProto::set_has_uses_notifications_in_background() {
  _has_bits_[0] |= 0x00000008u;
}
void SiteCharacteristicsProto::clear_has_uses_notifications_in_background() {
  _has_bits_[0] &= ~0x00000008u;
}
void SiteCharacteristicsProto::clear_uses_notifications_in_background() {
  if (uses_notifications_in_background_ != NULL) uses_notifications_in_background_->::SiteCharacteristicsFeatureProto::Clear();
  clear_has_uses_notifications_in_background();
}
const ::SiteCharacteristicsFeatureProto& SiteCharacteristicsProto::uses_notifications_in_background() const {
  // @@protoc_insertion_point(field_get:SiteCharacteristicsProto.uses_notifications_in_background)
  return uses_notifications_in_background_ != NULL ? *uses_notifications_in_background_
                         : *::SiteCharacteristicsFeatureProto::internal_default_instance();
}
::SiteCharacteristicsFeatureProto* SiteCharacteristicsProto::mutable_uses_notifications_in_background() {
  set_has_uses_notifications_in_background();
  if (uses_notifications_in_background_ == NULL) {
    uses_notifications_in_background_ = new ::SiteCharacteristicsFeatureProto;
  }
  // @@protoc_insertion_point(field_mutable:SiteCharacteristicsProto.uses_notifications_in_background)
  return uses_notifications_in_background_;
}
::SiteCharacteristicsFeatureProto* SiteCharacteristicsProto::release_uses_notifications_in_background() {
  // @@protoc_insertion_point(field_release:SiteCharacteristicsProto.uses_notifications_in_background)
  clear_has_uses_notifications_in_background();
  ::SiteCharacteristicsFeatureProto* temp = uses_notifications_in_background_;
  uses_notifications_in_background_ = NULL;
  return temp;
}
void SiteCharacteristicsProto::set_allocated_uses_notifications_in_background(::SiteCharacteristicsFeatureProto* uses_notifications_in_background) {
  delete uses_notifications_in_background_;
  uses_notifications_in_background_ = uses_notifications_in_background;
  if (uses_notifications_in_background) {
    set_has_uses_notifications_in_background();
  } else {
    clear_has_uses_notifications_in_background();
  }
  // @@protoc_insertion_point(field_set_allocated:SiteCharacteristicsProto.uses_notifications_in_background)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
