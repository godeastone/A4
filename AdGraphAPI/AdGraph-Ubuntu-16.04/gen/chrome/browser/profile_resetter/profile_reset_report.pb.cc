// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profile_reset_report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "profile_reset_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace reset_report {
class ChromeResetReport_ExtensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeResetReport_Extension> {
} _ChromeResetReport_Extension_default_instance_;
class ChromeResetReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeResetReport> {
} _ChromeResetReport_default_instance_;

namespace protobuf_profile_5freset_5freport_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ChromeResetReport_Extension_default_instance_.Shutdown();
  _ChromeResetReport_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ChromeResetReport_Extension_default_instance_.DefaultConstruct();
  _ChromeResetReport_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_profile_5freset_5freport_2eproto

bool ChromeResetReport_SessionStartupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeResetReport_SessionStartupType ChromeResetReport::DEFAULT;
const ChromeResetReport_SessionStartupType ChromeResetReport::HOMEPAGE;
const ChromeResetReport_SessionStartupType ChromeResetReport::LAST;
const ChromeResetReport_SessionStartupType ChromeResetReport::URLS;
const ChromeResetReport_SessionStartupType ChromeResetReport::SessionStartupType_MIN;
const ChromeResetReport_SessionStartupType ChromeResetReport::SessionStartupType_MAX;
const int ChromeResetReport::SessionStartupType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ChromeResetReport_ResetRequestOrigin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeResetReport_ResetRequestOrigin ChromeResetReport::RESET_REQUEST_ORIGIN_UNSPECIFIED;
const ChromeResetReport_ResetRequestOrigin ChromeResetReport::RESET_REQUEST_ORIGIN_UNKNOWN;
const ChromeResetReport_ResetRequestOrigin ChromeResetReport::RESET_REQUEST_ORIGIN_USER_CLICK;
const ChromeResetReport_ResetRequestOrigin ChromeResetReport::RESET_REQUEST_ORIGIN_CCT;
const ChromeResetReport_ResetRequestOrigin ChromeResetReport::RESET_REQUEST_ORIGIN_TRIGGERED_RESET;
const ChromeResetReport_ResetRequestOrigin ChromeResetReport::ResetRequestOrigin_MIN;
const ChromeResetReport_ResetRequestOrigin ChromeResetReport::ResetRequestOrigin_MAX;
const int ChromeResetReport::ResetRequestOrigin_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeResetReport_Extension::kExtensionIdFieldNumber;
const int ChromeResetReport_Extension::kExtensionNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeResetReport_Extension::ChromeResetReport_Extension()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_profile_5freset_5freport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:reset_report.ChromeResetReport.Extension)
}
ChromeResetReport_Extension::ChromeResetReport_Extension(const ChromeResetReport_Extension& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extension_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_id()) {
    extension_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
  }
  extension_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_name()) {
    extension_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_name_);
  }
  // @@protoc_insertion_point(copy_constructor:reset_report.ChromeResetReport.Extension)
}

void ChromeResetReport_Extension::SharedCtor() {
  _cached_size_ = 0;
  extension_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChromeResetReport_Extension::~ChromeResetReport_Extension() {
  // @@protoc_insertion_point(destructor:reset_report.ChromeResetReport.Extension)
  SharedDtor();
}

void ChromeResetReport_Extension::SharedDtor() {
  extension_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChromeResetReport_Extension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeResetReport_Extension& ChromeResetReport_Extension::default_instance() {
  protobuf_profile_5freset_5freport_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeResetReport_Extension* ChromeResetReport_Extension::New(::google::protobuf::Arena* arena) const {
  ChromeResetReport_Extension* n = new ChromeResetReport_Extension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeResetReport_Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:reset_report.ChromeResetReport.Extension)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_extension_id()) {
      GOOGLE_DCHECK(!extension_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extension_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_extension_name()) {
      GOOGLE_DCHECK(!extension_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extension_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeResetReport_Extension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:reset_report.ChromeResetReport.Extension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string extension_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extension_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:reset_report.ChromeResetReport.Extension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:reset_report.ChromeResetReport.Extension)
  return false;
#undef DO_
}

void ChromeResetReport_Extension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:reset_report.ChromeResetReport.Extension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string extension_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->extension_id(), output);
  }

  // optional string extension_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extension_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:reset_report.ChromeResetReport.Extension)
}

size_t ChromeResetReport_Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reset_report.ChromeResetReport.Extension)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string extension_id = 1;
    if (has_extension_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension_id());
    }

    // optional string extension_name = 2;
    if (has_extension_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeResetReport_Extension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeResetReport_Extension*>(&from));
}

void ChromeResetReport_Extension::MergeFrom(const ChromeResetReport_Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reset_report.ChromeResetReport.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_extension_id();
      extension_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_extension_name();
      extension_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_name_);
    }
  }
}

void ChromeResetReport_Extension::CopyFrom(const ChromeResetReport_Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reset_report.ChromeResetReport.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeResetReport_Extension::IsInitialized() const {
  return true;
}

void ChromeResetReport_Extension::Swap(ChromeResetReport_Extension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeResetReport_Extension::InternalSwap(ChromeResetReport_Extension* other) {
  extension_id_.Swap(&other->extension_id_);
  extension_name_.Swap(&other->extension_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeResetReport_Extension::GetTypeName() const {
  return "reset_report.ChromeResetReport.Extension";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeResetReport_Extension

// optional string extension_id = 1;
bool ChromeResetReport_Extension::has_extension_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeResetReport_Extension::set_has_extension_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeResetReport_Extension::clear_has_extension_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeResetReport_Extension::clear_extension_id() {
  extension_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extension_id();
}
const ::std::string& ChromeResetReport_Extension::extension_id() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.Extension.extension_id)
  return extension_id_.GetNoArena();
}
void ChromeResetReport_Extension::set_extension_id(const ::std::string& value) {
  set_has_extension_id();
  extension_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.Extension.extension_id)
}
#if LANG_CXX11
void ChromeResetReport_Extension::set_extension_id(::std::string&& value) {
  set_has_extension_id();
  extension_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reset_report.ChromeResetReport.Extension.extension_id)
}
#endif
void ChromeResetReport_Extension::set_extension_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extension_id();
  extension_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.Extension.extension_id)
}
void ChromeResetReport_Extension::set_extension_id(const char* value, size_t size) {
  set_has_extension_id();
  extension_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.Extension.extension_id)
}
::std::string* ChromeResetReport_Extension::mutable_extension_id() {
  set_has_extension_id();
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.Extension.extension_id)
  return extension_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeResetReport_Extension::release_extension_id() {
  // @@protoc_insertion_point(field_release:reset_report.ChromeResetReport.Extension.extension_id)
  clear_has_extension_id();
  return extension_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeResetReport_Extension::set_allocated_extension_id(::std::string* extension_id) {
  if (extension_id != NULL) {
    set_has_extension_id();
  } else {
    clear_has_extension_id();
  }
  extension_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_id);
  // @@protoc_insertion_point(field_set_allocated:reset_report.ChromeResetReport.Extension.extension_id)
}

// optional string extension_name = 2;
bool ChromeResetReport_Extension::has_extension_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeResetReport_Extension::set_has_extension_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromeResetReport_Extension::clear_has_extension_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromeResetReport_Extension::clear_extension_name() {
  extension_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extension_name();
}
const ::std::string& ChromeResetReport_Extension::extension_name() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.Extension.extension_name)
  return extension_name_.GetNoArena();
}
void ChromeResetReport_Extension::set_extension_name(const ::std::string& value) {
  set_has_extension_name();
  extension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.Extension.extension_name)
}
#if LANG_CXX11
void ChromeResetReport_Extension::set_extension_name(::std::string&& value) {
  set_has_extension_name();
  extension_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reset_report.ChromeResetReport.Extension.extension_name)
}
#endif
void ChromeResetReport_Extension::set_extension_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extension_name();
  extension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.Extension.extension_name)
}
void ChromeResetReport_Extension::set_extension_name(const char* value, size_t size) {
  set_has_extension_name();
  extension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.Extension.extension_name)
}
::std::string* ChromeResetReport_Extension::mutable_extension_name() {
  set_has_extension_name();
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.Extension.extension_name)
  return extension_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeResetReport_Extension::release_extension_name() {
  // @@protoc_insertion_point(field_release:reset_report.ChromeResetReport.Extension.extension_name)
  clear_has_extension_name();
  return extension_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeResetReport_Extension::set_allocated_extension_name(::std::string* extension_name) {
  if (extension_name != NULL) {
    set_has_extension_name();
  } else {
    clear_has_extension_name();
  }
  extension_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_name);
  // @@protoc_insertion_point(field_set_allocated:reset_report.ChromeResetReport.Extension.extension_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeResetReport::kGuidFieldNumber;
const int ChromeResetReport::kStartupTypeFieldNumber;
const int ChromeResetReport::kStartupUrlPathFieldNumber;
const int ChromeResetReport::kShowHomeButtonFieldNumber;
const int ChromeResetReport::kHomepageIsNewTabPageFieldNumber;
const int ChromeResetReport::kHomepagePathFieldNumber;
const int ChromeResetReport::kDefaultSearchEnginePathFieldNumber;
const int ChromeResetReport::kEnabledExtensionsFieldNumber;
const int ChromeResetReport::kShortcutsFieldNumber;
const int ChromeResetReport::kResetRequestOriginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeResetReport::ChromeResetReport()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_profile_5freset_5freport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:reset_report.ChromeResetReport)
}
ChromeResetReport::ChromeResetReport(const ChromeResetReport& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      startup_url_path_(from.startup_url_path_),
      enabled_extensions_(from.enabled_extensions_),
      shortcuts_(from.shortcuts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guid()) {
    guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  homepage_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_homepage_path()) {
    homepage_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.homepage_path_);
  }
  default_search_engine_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_search_engine_path()) {
    default_search_engine_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_search_engine_path_);
  }
  ::memcpy(&reset_request_origin_, &from.reset_request_origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&homepage_is_new_tab_page_) -
    reinterpret_cast<char*>(&reset_request_origin_)) + sizeof(homepage_is_new_tab_page_));
  // @@protoc_insertion_point(copy_constructor:reset_report.ChromeResetReport)
}

void ChromeResetReport::SharedCtor() {
  _cached_size_ = 0;
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  homepage_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_search_engine_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reset_request_origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&homepage_is_new_tab_page_) -
      reinterpret_cast<char*>(&reset_request_origin_)) + sizeof(homepage_is_new_tab_page_));
}

ChromeResetReport::~ChromeResetReport() {
  // @@protoc_insertion_point(destructor:reset_report.ChromeResetReport)
  SharedDtor();
}

void ChromeResetReport::SharedDtor() {
  guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  homepage_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_search_engine_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChromeResetReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeResetReport& ChromeResetReport::default_instance() {
  protobuf_profile_5freset_5freport_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeResetReport* ChromeResetReport::New(::google::protobuf::Arena* arena) const {
  ChromeResetReport* n = new ChromeResetReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeResetReport::Clear() {
// @@protoc_insertion_point(message_clear_start:reset_report.ChromeResetReport)
  startup_url_path_.Clear();
  enabled_extensions_.Clear();
  shortcuts_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_guid()) {
      GOOGLE_DCHECK(!guid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*guid_.UnsafeRawStringPointer())->clear();
    }
    if (has_homepage_path()) {
      GOOGLE_DCHECK(!homepage_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*homepage_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_default_search_engine_path()) {
      GOOGLE_DCHECK(!default_search_engine_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*default_search_engine_path_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&reset_request_origin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&homepage_is_new_tab_page_) -
        reinterpret_cast<char*>(&reset_request_origin_)) + sizeof(homepage_is_new_tab_page_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeResetReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:reset_report.ChromeResetReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .reset_report.ChromeResetReport.SessionStartupType startup_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::reset_report::ChromeResetReport_SessionStartupType_IsValid(value)) {
            set_startup_type(static_cast< ::reset_report::ChromeResetReport_SessionStartupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string startup_url_path = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_startup_url_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_home_button = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_show_home_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_home_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool homepage_is_new_tab_page = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_homepage_is_new_tab_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &homepage_is_new_tab_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string homepage_path = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_homepage_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default_search_engine_path = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_search_engine_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .reset_report.ChromeResetReport.Extension enabled_extensions = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enabled_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string shortcuts = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shortcuts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .reset_report.ChromeResetReport.ResetRequestOrigin reset_request_origin = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::reset_report::ChromeResetReport_ResetRequestOrigin_IsValid(value)) {
            set_reset_request_origin(static_cast< ::reset_report::ChromeResetReport_ResetRequestOrigin >(value));
          } else {
            unknown_fields_stream.WriteVarint32(152u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:reset_report.ChromeResetReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:reset_report.ChromeResetReport)
  return false;
#undef DO_
}

void ChromeResetReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:reset_report.ChromeResetReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->guid(), output);
  }

  // optional .reset_report.ChromeResetReport.SessionStartupType startup_type = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->startup_type(), output);
  }

  // repeated string startup_url_path = 12;
  for (int i = 0, n = this->startup_url_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->startup_url_path(i), output);
  }

  // optional bool show_home_button = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->show_home_button(), output);
  }

  // optional bool homepage_is_new_tab_page = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->homepage_is_new_tab_page(), output);
  }

  // optional string homepage_path = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->homepage_path(), output);
  }

  // optional string default_search_engine_path = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->default_search_engine_path(), output);
  }

  // repeated .reset_report.ChromeResetReport.Extension enabled_extensions = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enabled_extensions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->enabled_extensions(static_cast<int>(i)), output);
  }

  // repeated string shortcuts = 18;
  for (int i = 0, n = this->shortcuts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->shortcuts(i), output);
  }

  // optional .reset_report.ChromeResetReport.ResetRequestOrigin reset_request_origin = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->reset_request_origin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:reset_report.ChromeResetReport)
}

size_t ChromeResetReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reset_report.ChromeResetReport)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string startup_url_path = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->startup_url_path_size());
  for (int i = 0, n = this->startup_url_path_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->startup_url_path(i));
  }

  // repeated .reset_report.ChromeResetReport.Extension enabled_extensions = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->enabled_extensions_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enabled_extensions(static_cast<int>(i)));
    }
  }

  // repeated string shortcuts = 18;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->shortcuts_size());
  for (int i = 0, n = this->shortcuts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shortcuts(i));
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string guid = 10;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string homepage_path = 15;
    if (has_homepage_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->homepage_path());
    }

    // optional string default_search_engine_path = 16;
    if (has_default_search_engine_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_search_engine_path());
    }

    // optional .reset_report.ChromeResetReport.ResetRequestOrigin reset_request_origin = 19;
    if (has_reset_request_origin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reset_request_origin());
    }

    // optional .reset_report.ChromeResetReport.SessionStartupType startup_type = 11;
    if (has_startup_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->startup_type());
    }

    // optional bool show_home_button = 13;
    if (has_show_home_button()) {
      total_size += 1 + 1;
    }

    // optional bool homepage_is_new_tab_page = 14;
    if (has_homepage_is_new_tab_page()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeResetReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeResetReport*>(&from));
}

void ChromeResetReport::MergeFrom(const ChromeResetReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reset_report.ChromeResetReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  startup_url_path_.MergeFrom(from.startup_url_path_);
  enabled_extensions_.MergeFrom(from.enabled_extensions_);
  shortcuts_.MergeFrom(from.shortcuts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_guid();
      guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_homepage_path();
      homepage_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.homepage_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_default_search_engine_path();
      default_search_engine_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_search_engine_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      reset_request_origin_ = from.reset_request_origin_;
    }
    if (cached_has_bits & 0x00000010u) {
      startup_type_ = from.startup_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_home_button_ = from.show_home_button_;
    }
    if (cached_has_bits & 0x00000040u) {
      homepage_is_new_tab_page_ = from.homepage_is_new_tab_page_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeResetReport::CopyFrom(const ChromeResetReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reset_report.ChromeResetReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeResetReport::IsInitialized() const {
  return true;
}

void ChromeResetReport::Swap(ChromeResetReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeResetReport::InternalSwap(ChromeResetReport* other) {
  startup_url_path_.InternalSwap(&other->startup_url_path_);
  enabled_extensions_.InternalSwap(&other->enabled_extensions_);
  shortcuts_.InternalSwap(&other->shortcuts_);
  guid_.Swap(&other->guid_);
  homepage_path_.Swap(&other->homepage_path_);
  default_search_engine_path_.Swap(&other->default_search_engine_path_);
  std::swap(reset_request_origin_, other->reset_request_origin_);
  std::swap(startup_type_, other->startup_type_);
  std::swap(show_home_button_, other->show_home_button_);
  std::swap(homepage_is_new_tab_page_, other->homepage_is_new_tab_page_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeResetReport::GetTypeName() const {
  return "reset_report.ChromeResetReport";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeResetReport

// optional string guid = 10;
bool ChromeResetReport::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeResetReport::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeResetReport::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeResetReport::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guid();
}
const ::std::string& ChromeResetReport::guid() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.guid)
  return guid_.GetNoArena();
}
void ChromeResetReport::set_guid(const ::std::string& value) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.guid)
}
#if LANG_CXX11
void ChromeResetReport::set_guid(::std::string&& value) {
  set_has_guid();
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reset_report.ChromeResetReport.guid)
}
#endif
void ChromeResetReport::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.guid)
}
void ChromeResetReport::set_guid(const char* value, size_t size) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.guid)
}
::std::string* ChromeResetReport::mutable_guid() {
  set_has_guid();
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeResetReport::release_guid() {
  // @@protoc_insertion_point(field_release:reset_report.ChromeResetReport.guid)
  clear_has_guid();
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeResetReport::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    set_has_guid();
  } else {
    clear_has_guid();
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:reset_report.ChromeResetReport.guid)
}

// optional .reset_report.ChromeResetReport.SessionStartupType startup_type = 11;
bool ChromeResetReport::has_startup_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChromeResetReport::set_has_startup_type() {
  _has_bits_[0] |= 0x00000010u;
}
void ChromeResetReport::clear_has_startup_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChromeResetReport::clear_startup_type() {
  startup_type_ = 0;
  clear_has_startup_type();
}
::reset_report::ChromeResetReport_SessionStartupType ChromeResetReport::startup_type() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.startup_type)
  return static_cast< ::reset_report::ChromeResetReport_SessionStartupType >(startup_type_);
}
void ChromeResetReport::set_startup_type(::reset_report::ChromeResetReport_SessionStartupType value) {
  assert(::reset_report::ChromeResetReport_SessionStartupType_IsValid(value));
  set_has_startup_type();
  startup_type_ = value;
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.startup_type)
}

// repeated string startup_url_path = 12;
int ChromeResetReport::startup_url_path_size() const {
  return startup_url_path_.size();
}
void ChromeResetReport::clear_startup_url_path() {
  startup_url_path_.Clear();
}
const ::std::string& ChromeResetReport::startup_url_path(int index) const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.startup_url_path)
  return startup_url_path_.Get(index);
}
::std::string* ChromeResetReport::mutable_startup_url_path(int index) {
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.startup_url_path)
  return startup_url_path_.Mutable(index);
}
void ChromeResetReport::set_startup_url_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.startup_url_path)
  startup_url_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ChromeResetReport::set_startup_url_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.startup_url_path)
  startup_url_path_.Mutable(index)->assign(std::move(value));
}
#endif
void ChromeResetReport::set_startup_url_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  startup_url_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.startup_url_path)
}
void ChromeResetReport::set_startup_url_path(int index, const char* value, size_t size) {
  startup_url_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.startup_url_path)
}
::std::string* ChromeResetReport::add_startup_url_path() {
  // @@protoc_insertion_point(field_add_mutable:reset_report.ChromeResetReport.startup_url_path)
  return startup_url_path_.Add();
}
void ChromeResetReport::add_startup_url_path(const ::std::string& value) {
  startup_url_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:reset_report.ChromeResetReport.startup_url_path)
}
#if LANG_CXX11
void ChromeResetReport::add_startup_url_path(::std::string&& value) {
  startup_url_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:reset_report.ChromeResetReport.startup_url_path)
}
#endif
void ChromeResetReport::add_startup_url_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  startup_url_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:reset_report.ChromeResetReport.startup_url_path)
}
void ChromeResetReport::add_startup_url_path(const char* value, size_t size) {
  startup_url_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:reset_report.ChromeResetReport.startup_url_path)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChromeResetReport::startup_url_path() const {
  // @@protoc_insertion_point(field_list:reset_report.ChromeResetReport.startup_url_path)
  return startup_url_path_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ChromeResetReport::mutable_startup_url_path() {
  // @@protoc_insertion_point(field_mutable_list:reset_report.ChromeResetReport.startup_url_path)
  return &startup_url_path_;
}

// optional bool show_home_button = 13;
bool ChromeResetReport::has_show_home_button() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChromeResetReport::set_has_show_home_button() {
  _has_bits_[0] |= 0x00000020u;
}
void ChromeResetReport::clear_has_show_home_button() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChromeResetReport::clear_show_home_button() {
  show_home_button_ = false;
  clear_has_show_home_button();
}
bool ChromeResetReport::show_home_button() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.show_home_button)
  return show_home_button_;
}
void ChromeResetReport::set_show_home_button(bool value) {
  set_has_show_home_button();
  show_home_button_ = value;
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.show_home_button)
}

// optional bool homepage_is_new_tab_page = 14;
bool ChromeResetReport::has_homepage_is_new_tab_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChromeResetReport::set_has_homepage_is_new_tab_page() {
  _has_bits_[0] |= 0x00000040u;
}
void ChromeResetReport::clear_has_homepage_is_new_tab_page() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChromeResetReport::clear_homepage_is_new_tab_page() {
  homepage_is_new_tab_page_ = false;
  clear_has_homepage_is_new_tab_page();
}
bool ChromeResetReport::homepage_is_new_tab_page() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.homepage_is_new_tab_page)
  return homepage_is_new_tab_page_;
}
void ChromeResetReport::set_homepage_is_new_tab_page(bool value) {
  set_has_homepage_is_new_tab_page();
  homepage_is_new_tab_page_ = value;
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.homepage_is_new_tab_page)
}

// optional string homepage_path = 15;
bool ChromeResetReport::has_homepage_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeResetReport::set_has_homepage_path() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromeResetReport::clear_has_homepage_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromeResetReport::clear_homepage_path() {
  homepage_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_homepage_path();
}
const ::std::string& ChromeResetReport::homepage_path() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.homepage_path)
  return homepage_path_.GetNoArena();
}
void ChromeResetReport::set_homepage_path(const ::std::string& value) {
  set_has_homepage_path();
  homepage_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.homepage_path)
}
#if LANG_CXX11
void ChromeResetReport::set_homepage_path(::std::string&& value) {
  set_has_homepage_path();
  homepage_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reset_report.ChromeResetReport.homepage_path)
}
#endif
void ChromeResetReport::set_homepage_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_homepage_path();
  homepage_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.homepage_path)
}
void ChromeResetReport::set_homepage_path(const char* value, size_t size) {
  set_has_homepage_path();
  homepage_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.homepage_path)
}
::std::string* ChromeResetReport::mutable_homepage_path() {
  set_has_homepage_path();
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.homepage_path)
  return homepage_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeResetReport::release_homepage_path() {
  // @@protoc_insertion_point(field_release:reset_report.ChromeResetReport.homepage_path)
  clear_has_homepage_path();
  return homepage_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeResetReport::set_allocated_homepage_path(::std::string* homepage_path) {
  if (homepage_path != NULL) {
    set_has_homepage_path();
  } else {
    clear_has_homepage_path();
  }
  homepage_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homepage_path);
  // @@protoc_insertion_point(field_set_allocated:reset_report.ChromeResetReport.homepage_path)
}

// optional string default_search_engine_path = 16;
bool ChromeResetReport::has_default_search_engine_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChromeResetReport::set_has_default_search_engine_path() {
  _has_bits_[0] |= 0x00000004u;
}
void ChromeResetReport::clear_has_default_search_engine_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChromeResetReport::clear_default_search_engine_path() {
  default_search_engine_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_search_engine_path();
}
const ::std::string& ChromeResetReport::default_search_engine_path() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.default_search_engine_path)
  return default_search_engine_path_.GetNoArena();
}
void ChromeResetReport::set_default_search_engine_path(const ::std::string& value) {
  set_has_default_search_engine_path();
  default_search_engine_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.default_search_engine_path)
}
#if LANG_CXX11
void ChromeResetReport::set_default_search_engine_path(::std::string&& value) {
  set_has_default_search_engine_path();
  default_search_engine_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reset_report.ChromeResetReport.default_search_engine_path)
}
#endif
void ChromeResetReport::set_default_search_engine_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_search_engine_path();
  default_search_engine_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.default_search_engine_path)
}
void ChromeResetReport::set_default_search_engine_path(const char* value, size_t size) {
  set_has_default_search_engine_path();
  default_search_engine_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.default_search_engine_path)
}
::std::string* ChromeResetReport::mutable_default_search_engine_path() {
  set_has_default_search_engine_path();
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.default_search_engine_path)
  return default_search_engine_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeResetReport::release_default_search_engine_path() {
  // @@protoc_insertion_point(field_release:reset_report.ChromeResetReport.default_search_engine_path)
  clear_has_default_search_engine_path();
  return default_search_engine_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeResetReport::set_allocated_default_search_engine_path(::std::string* default_search_engine_path) {
  if (default_search_engine_path != NULL) {
    set_has_default_search_engine_path();
  } else {
    clear_has_default_search_engine_path();
  }
  default_search_engine_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_search_engine_path);
  // @@protoc_insertion_point(field_set_allocated:reset_report.ChromeResetReport.default_search_engine_path)
}

// repeated .reset_report.ChromeResetReport.Extension enabled_extensions = 17;
int ChromeResetReport::enabled_extensions_size() const {
  return enabled_extensions_.size();
}
void ChromeResetReport::clear_enabled_extensions() {
  enabled_extensions_.Clear();
}
const ::reset_report::ChromeResetReport_Extension& ChromeResetReport::enabled_extensions(int index) const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.enabled_extensions)
  return enabled_extensions_.Get(index);
}
::reset_report::ChromeResetReport_Extension* ChromeResetReport::mutable_enabled_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.enabled_extensions)
  return enabled_extensions_.Mutable(index);
}
::reset_report::ChromeResetReport_Extension* ChromeResetReport::add_enabled_extensions() {
  // @@protoc_insertion_point(field_add:reset_report.ChromeResetReport.enabled_extensions)
  return enabled_extensions_.Add();
}
::google::protobuf::RepeatedPtrField< ::reset_report::ChromeResetReport_Extension >*
ChromeResetReport::mutable_enabled_extensions() {
  // @@protoc_insertion_point(field_mutable_list:reset_report.ChromeResetReport.enabled_extensions)
  return &enabled_extensions_;
}
const ::google::protobuf::RepeatedPtrField< ::reset_report::ChromeResetReport_Extension >&
ChromeResetReport::enabled_extensions() const {
  // @@protoc_insertion_point(field_list:reset_report.ChromeResetReport.enabled_extensions)
  return enabled_extensions_;
}

// repeated string shortcuts = 18;
int ChromeResetReport::shortcuts_size() const {
  return shortcuts_.size();
}
void ChromeResetReport::clear_shortcuts() {
  shortcuts_.Clear();
}
const ::std::string& ChromeResetReport::shortcuts(int index) const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.shortcuts)
  return shortcuts_.Get(index);
}
::std::string* ChromeResetReport::mutable_shortcuts(int index) {
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.shortcuts)
  return shortcuts_.Mutable(index);
}
void ChromeResetReport::set_shortcuts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.shortcuts)
  shortcuts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ChromeResetReport::set_shortcuts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.shortcuts)
  shortcuts_.Mutable(index)->assign(std::move(value));
}
#endif
void ChromeResetReport::set_shortcuts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  shortcuts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.shortcuts)
}
void ChromeResetReport::set_shortcuts(int index, const char* value, size_t size) {
  shortcuts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.shortcuts)
}
::std::string* ChromeResetReport::add_shortcuts() {
  // @@protoc_insertion_point(field_add_mutable:reset_report.ChromeResetReport.shortcuts)
  return shortcuts_.Add();
}
void ChromeResetReport::add_shortcuts(const ::std::string& value) {
  shortcuts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:reset_report.ChromeResetReport.shortcuts)
}
#if LANG_CXX11
void ChromeResetReport::add_shortcuts(::std::string&& value) {
  shortcuts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:reset_report.ChromeResetReport.shortcuts)
}
#endif
void ChromeResetReport::add_shortcuts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  shortcuts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:reset_report.ChromeResetReport.shortcuts)
}
void ChromeResetReport::add_shortcuts(const char* value, size_t size) {
  shortcuts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:reset_report.ChromeResetReport.shortcuts)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChromeResetReport::shortcuts() const {
  // @@protoc_insertion_point(field_list:reset_report.ChromeResetReport.shortcuts)
  return shortcuts_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ChromeResetReport::mutable_shortcuts() {
  // @@protoc_insertion_point(field_mutable_list:reset_report.ChromeResetReport.shortcuts)
  return &shortcuts_;
}

// optional .reset_report.ChromeResetReport.ResetRequestOrigin reset_request_origin = 19;
bool ChromeResetReport::has_reset_request_origin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChromeResetReport::set_has_reset_request_origin() {
  _has_bits_[0] |= 0x00000008u;
}
void ChromeResetReport::clear_has_reset_request_origin() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChromeResetReport::clear_reset_request_origin() {
  reset_request_origin_ = 0;
  clear_has_reset_request_origin();
}
::reset_report::ChromeResetReport_ResetRequestOrigin ChromeResetReport::reset_request_origin() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.reset_request_origin)
  return static_cast< ::reset_report::ChromeResetReport_ResetRequestOrigin >(reset_request_origin_);
}
void ChromeResetReport::set_reset_request_origin(::reset_report::ChromeResetReport_ResetRequestOrigin value) {
  assert(::reset_report::ChromeResetReport_ResetRequestOrigin_IsValid(value));
  set_has_reset_request_origin();
  reset_request_origin_ = value;
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.reset_request_origin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace reset_report

// @@protoc_insertion_point(global_scope)
