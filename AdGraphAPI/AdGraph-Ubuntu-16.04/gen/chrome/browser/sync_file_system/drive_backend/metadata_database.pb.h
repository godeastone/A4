// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata_database.proto

#ifndef PROTOBUF_metadata_5fdatabase_2eproto__INCLUDED
#define PROTOBUF_metadata_5fdatabase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace sync_file_system {
namespace drive_backend {
class FileDetails;
class FileDetailsDefaultTypeInternal;
extern FileDetailsDefaultTypeInternal _FileDetails_default_instance_;
class FileMetadata;
class FileMetadataDefaultTypeInternal;
extern FileMetadataDefaultTypeInternal _FileMetadata_default_instance_;
class FileTracker;
class FileTrackerDefaultTypeInternal;
extern FileTrackerDefaultTypeInternal _FileTracker_default_instance_;
class ServiceMetadata;
class ServiceMetadataDefaultTypeInternal;
extern ServiceMetadataDefaultTypeInternal _ServiceMetadata_default_instance_;
}  // namespace drive_backend
}  // namespace sync_file_system

namespace sync_file_system {
namespace drive_backend {

namespace protobuf_metadata_5fdatabase_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_metadata_5fdatabase_2eproto

enum FileKind {
  FILE_KIND_UNSUPPORTED = 0,
  FILE_KIND_FILE = 1,
  FILE_KIND_FOLDER = 2
};
bool FileKind_IsValid(int value);
const FileKind FileKind_MIN = FILE_KIND_UNSUPPORTED;
const FileKind FileKind_MAX = FILE_KIND_FOLDER;
const int FileKind_ARRAYSIZE = FileKind_MAX + 1;

enum TrackerKind {
  TRACKER_KIND_REGULAR = 0,
  TRACKER_KIND_APP_ROOT = 1,
  TRACKER_KIND_DISABLED_APP_ROOT = 2
};
bool TrackerKind_IsValid(int value);
const TrackerKind TrackerKind_MIN = TRACKER_KIND_REGULAR;
const TrackerKind TrackerKind_MAX = TRACKER_KIND_DISABLED_APP_ROOT;
const int TrackerKind_ARRAYSIZE = TrackerKind_MAX + 1;

// ===================================================================

class ServiceMetadata : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_file_system.drive_backend.ServiceMetadata) */ {
 public:
  ServiceMetadata();
  virtual ~ServiceMetadata();

  ServiceMetadata(const ServiceMetadata& from);

  inline ServiceMetadata& operator=(const ServiceMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceMetadata& default_instance();

  static inline const ServiceMetadata* internal_default_instance() {
    return reinterpret_cast<const ServiceMetadata*>(
               &_ServiceMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ServiceMetadata* other);

  // implements Message ----------------------------------------------

  inline ServiceMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServiceMetadata& from);
  void MergeFrom(const ServiceMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 largest_change_id = 1;
  bool has_largest_change_id() const;
  void clear_largest_change_id();
  static const int kLargestChangeIdFieldNumber = 1;
  ::google::protobuf::int64 largest_change_id() const;
  void set_largest_change_id(::google::protobuf::int64 value);

  // optional int64 sync_root_tracker_id = 2;
  bool has_sync_root_tracker_id() const;
  void clear_sync_root_tracker_id();
  static const int kSyncRootTrackerIdFieldNumber = 2;
  ::google::protobuf::int64 sync_root_tracker_id() const;
  void set_sync_root_tracker_id(::google::protobuf::int64 value);

  // optional int64 next_tracker_id = 3;
  bool has_next_tracker_id() const;
  void clear_next_tracker_id();
  static const int kNextTrackerIdFieldNumber = 3;
  ::google::protobuf::int64 next_tracker_id() const;
  void set_next_tracker_id(::google::protobuf::int64 value);

  // optional bool sync_root_revalidated = 4;
  bool has_sync_root_revalidated() const;
  void clear_sync_root_revalidated();
  static const int kSyncRootRevalidatedFieldNumber = 4;
  bool sync_root_revalidated() const;
  void set_sync_root_revalidated(bool value);

  // @@protoc_insertion_point(class_scope:sync_file_system.drive_backend.ServiceMetadata)
 private:
  void set_has_largest_change_id();
  void clear_has_largest_change_id();
  void set_has_sync_root_tracker_id();
  void clear_has_sync_root_tracker_id();
  void set_has_next_tracker_id();
  void clear_has_next_tracker_id();
  void set_has_sync_root_revalidated();
  void clear_has_sync_root_revalidated();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 largest_change_id_;
  ::google::protobuf::int64 sync_root_tracker_id_;
  ::google::protobuf::int64 next_tracker_id_;
  bool sync_root_revalidated_;
  friend struct protobuf_metadata_5fdatabase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileDetails : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_file_system.drive_backend.FileDetails) */ {
 public:
  FileDetails();
  virtual ~FileDetails();

  FileDetails(const FileDetails& from);

  inline FileDetails& operator=(const FileDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileDetails& default_instance();

  static inline const FileDetails* internal_default_instance() {
    return reinterpret_cast<const FileDetails*>(
               &_FileDetails_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FileDetails* other);

  // implements Message ----------------------------------------------

  inline FileDetails* New() const PROTOBUF_FINAL { return New(NULL); }

  FileDetails* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FileDetails& from);
  void MergeFrom(const FileDetails& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string parent_folder_ids = 1;
  int parent_folder_ids_size() const;
  void clear_parent_folder_ids();
  static const int kParentFolderIdsFieldNumber = 1;
  const ::std::string& parent_folder_ids(int index) const;
  ::std::string* mutable_parent_folder_ids(int index);
  void set_parent_folder_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_parent_folder_ids(int index, ::std::string&& value);
  #endif
  void set_parent_folder_ids(int index, const char* value);
  void set_parent_folder_ids(int index, const char* value, size_t size);
  ::std::string* add_parent_folder_ids();
  void add_parent_folder_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_parent_folder_ids(::std::string&& value);
  #endif
  void add_parent_folder_ids(const char* value);
  void add_parent_folder_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& parent_folder_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parent_folder_ids();

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string md5 = 4;
  bool has_md5() const;
  void clear_md5();
  static const int kMd5FieldNumber = 4;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // optional string etag = 5;
  bool has_etag() const;
  void clear_etag();
  static const int kEtagFieldNumber = 5;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  #if LANG_CXX11
  void set_etag(::std::string&& value);
  #endif
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);

  // optional .sync_file_system.drive_backend.FileKind file_kind = 3;
  bool has_file_kind() const;
  void clear_file_kind();
  static const int kFileKindFieldNumber = 3;
  ::sync_file_system::drive_backend::FileKind file_kind() const;
  void set_file_kind(::sync_file_system::drive_backend::FileKind value);

  // optional bool missing = 8;
  bool has_missing() const;
  void clear_missing();
  static const int kMissingFieldNumber = 8;
  bool missing() const;
  void set_missing(bool value);

  // optional int64 creation_time = 6;
  bool has_creation_time() const;
  void clear_creation_time();
  static const int kCreationTimeFieldNumber = 6;
  ::google::protobuf::int64 creation_time() const;
  void set_creation_time(::google::protobuf::int64 value);

  // optional int64 modification_time = 7;
  bool has_modification_time() const;
  void clear_modification_time();
  static const int kModificationTimeFieldNumber = 7;
  ::google::protobuf::int64 modification_time() const;
  void set_modification_time(::google::protobuf::int64 value);

  // optional int64 change_id = 9;
  bool has_change_id() const;
  void clear_change_id();
  static const int kChangeIdFieldNumber = 9;
  ::google::protobuf::int64 change_id() const;
  void set_change_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sync_file_system.drive_backend.FileDetails)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_file_kind();
  void clear_has_file_kind();
  void set_has_md5();
  void clear_has_md5();
  void set_has_etag();
  void clear_has_etag();
  void set_has_creation_time();
  void clear_has_creation_time();
  void set_has_modification_time();
  void clear_has_modification_time();
  void set_has_missing();
  void clear_has_missing();
  void set_has_change_id();
  void clear_has_change_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parent_folder_ids_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  int file_kind_;
  bool missing_;
  ::google::protobuf::int64 creation_time_;
  ::google::protobuf::int64 modification_time_;
  ::google::protobuf::int64 change_id_;
  friend struct protobuf_metadata_5fdatabase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileMetadata : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_file_system.drive_backend.FileMetadata) */ {
 public:
  FileMetadata();
  virtual ~FileMetadata();

  FileMetadata(const FileMetadata& from);

  inline FileMetadata& operator=(const FileMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileMetadata& default_instance();

  static inline const FileMetadata* internal_default_instance() {
    return reinterpret_cast<const FileMetadata*>(
               &_FileMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FileMetadata* other);

  // implements Message ----------------------------------------------

  inline FileMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  FileMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FileMetadata& from);
  void MergeFrom(const FileMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_id = 1;
  bool has_file_id() const;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // optional .sync_file_system.drive_backend.FileDetails details = 2;
  bool has_details() const;
  void clear_details();
  static const int kDetailsFieldNumber = 2;
  const ::sync_file_system::drive_backend::FileDetails& details() const;
  ::sync_file_system::drive_backend::FileDetails* mutable_details();
  ::sync_file_system::drive_backend::FileDetails* release_details();
  void set_allocated_details(::sync_file_system::drive_backend::FileDetails* details);

  // @@protoc_insertion_point(class_scope:sync_file_system.drive_backend.FileMetadata)
 private:
  void set_has_file_id();
  void clear_has_file_id();
  void set_has_details();
  void clear_has_details();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::sync_file_system::drive_backend::FileDetails* details_;
  friend struct protobuf_metadata_5fdatabase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileTracker : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_file_system.drive_backend.FileTracker) */ {
 public:
  FileTracker();
  virtual ~FileTracker();

  FileTracker(const FileTracker& from);

  inline FileTracker& operator=(const FileTracker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileTracker& default_instance();

  static inline const FileTracker* internal_default_instance() {
    return reinterpret_cast<const FileTracker*>(
               &_FileTracker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FileTracker* other);

  // implements Message ----------------------------------------------

  inline FileTracker* New() const PROTOBUF_FINAL { return New(NULL); }

  FileTracker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FileTracker& from);
  void MergeFrom(const FileTracker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileTracker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_id = 3;
  bool has_file_id() const;
  void clear_file_id();
  static const int kFileIdFieldNumber = 3;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // optional string app_id = 4;
  bool has_app_id() const;
  void clear_app_id();
  static const int kAppIdFieldNumber = 4;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  #if LANG_CXX11
  void set_app_id(::std::string&& value);
  #endif
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);

  // optional .sync_file_system.drive_backend.FileDetails synced_details = 6;
  bool has_synced_details() const;
  void clear_synced_details();
  static const int kSyncedDetailsFieldNumber = 6;
  const ::sync_file_system::drive_backend::FileDetails& synced_details() const;
  ::sync_file_system::drive_backend::FileDetails* mutable_synced_details();
  ::sync_file_system::drive_backend::FileDetails* release_synced_details();
  void set_allocated_synced_details(::sync_file_system::drive_backend::FileDetails* synced_details);

  // required int64 tracker_id = 1;
  bool has_tracker_id() const;
  void clear_tracker_id();
  static const int kTrackerIdFieldNumber = 1;
  ::google::protobuf::int64 tracker_id() const;
  void set_tracker_id(::google::protobuf::int64 value);

  // required int64 parent_tracker_id = 2;
  bool has_parent_tracker_id() const;
  void clear_parent_tracker_id();
  static const int kParentTrackerIdFieldNumber = 2;
  ::google::protobuf::int64 parent_tracker_id() const;
  void set_parent_tracker_id(::google::protobuf::int64 value);

  // optional .sync_file_system.drive_backend.TrackerKind tracker_kind = 5;
  bool has_tracker_kind() const;
  void clear_tracker_kind();
  static const int kTrackerKindFieldNumber = 5;
  ::sync_file_system::drive_backend::TrackerKind tracker_kind() const;
  void set_tracker_kind(::sync_file_system::drive_backend::TrackerKind value);

  // optional bool dirty = 7;
  bool has_dirty() const;
  void clear_dirty();
  static const int kDirtyFieldNumber = 7;
  bool dirty() const;
  void set_dirty(bool value);

  // optional bool active = 8;
  bool has_active() const;
  void clear_active();
  static const int kActiveFieldNumber = 8;
  bool active() const;
  void set_active(bool value);

  // optional bool needs_folder_listing = 9;
  bool has_needs_folder_listing() const;
  void clear_needs_folder_listing();
  static const int kNeedsFolderListingFieldNumber = 9;
  bool needs_folder_listing() const;
  void set_needs_folder_listing(bool value);

  // @@protoc_insertion_point(class_scope:sync_file_system.drive_backend.FileTracker)
 private:
  void set_has_tracker_id();
  void clear_has_tracker_id();
  void set_has_parent_tracker_id();
  void clear_has_parent_tracker_id();
  void set_has_file_id();
  void clear_has_file_id();
  void set_has_app_id();
  void clear_has_app_id();
  void set_has_tracker_kind();
  void clear_has_tracker_kind();
  void set_has_synced_details();
  void clear_has_synced_details();
  void set_has_dirty();
  void clear_has_dirty();
  void set_has_active();
  void clear_has_active();
  void set_has_needs_folder_listing();
  void clear_has_needs_folder_listing();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::sync_file_system::drive_backend::FileDetails* synced_details_;
  ::google::protobuf::int64 tracker_id_;
  ::google::protobuf::int64 parent_tracker_id_;
  int tracker_kind_;
  bool dirty_;
  bool active_;
  bool needs_folder_listing_;
  friend struct protobuf_metadata_5fdatabase_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceMetadata

// optional int64 largest_change_id = 1;
inline bool ServiceMetadata::has_largest_change_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceMetadata::set_has_largest_change_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceMetadata::clear_has_largest_change_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceMetadata::clear_largest_change_id() {
  largest_change_id_ = GOOGLE_LONGLONG(0);
  clear_has_largest_change_id();
}
inline ::google::protobuf::int64 ServiceMetadata::largest_change_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.largest_change_id)
  return largest_change_id_;
}
inline void ServiceMetadata::set_largest_change_id(::google::protobuf::int64 value) {
  set_has_largest_change_id();
  largest_change_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.largest_change_id)
}

// optional int64 sync_root_tracker_id = 2;
inline bool ServiceMetadata::has_sync_root_tracker_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceMetadata::set_has_sync_root_tracker_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceMetadata::clear_has_sync_root_tracker_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceMetadata::clear_sync_root_tracker_id() {
  sync_root_tracker_id_ = GOOGLE_LONGLONG(0);
  clear_has_sync_root_tracker_id();
}
inline ::google::protobuf::int64 ServiceMetadata::sync_root_tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.sync_root_tracker_id)
  return sync_root_tracker_id_;
}
inline void ServiceMetadata::set_sync_root_tracker_id(::google::protobuf::int64 value) {
  set_has_sync_root_tracker_id();
  sync_root_tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.sync_root_tracker_id)
}

// optional int64 next_tracker_id = 3;
inline bool ServiceMetadata::has_next_tracker_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceMetadata::set_has_next_tracker_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceMetadata::clear_has_next_tracker_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceMetadata::clear_next_tracker_id() {
  next_tracker_id_ = GOOGLE_LONGLONG(0);
  clear_has_next_tracker_id();
}
inline ::google::protobuf::int64 ServiceMetadata::next_tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.next_tracker_id)
  return next_tracker_id_;
}
inline void ServiceMetadata::set_next_tracker_id(::google::protobuf::int64 value) {
  set_has_next_tracker_id();
  next_tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.next_tracker_id)
}

// optional bool sync_root_revalidated = 4;
inline bool ServiceMetadata::has_sync_root_revalidated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceMetadata::set_has_sync_root_revalidated() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceMetadata::clear_has_sync_root_revalidated() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceMetadata::clear_sync_root_revalidated() {
  sync_root_revalidated_ = false;
  clear_has_sync_root_revalidated();
}
inline bool ServiceMetadata::sync_root_revalidated() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.sync_root_revalidated)
  return sync_root_revalidated_;
}
inline void ServiceMetadata::set_sync_root_revalidated(bool value) {
  set_has_sync_root_revalidated();
  sync_root_revalidated_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.sync_root_revalidated)
}

// -------------------------------------------------------------------

// FileDetails

// repeated string parent_folder_ids = 1;
inline int FileDetails::parent_folder_ids_size() const {
  return parent_folder_ids_.size();
}
inline void FileDetails::clear_parent_folder_ids() {
  parent_folder_ids_.Clear();
}
inline const ::std::string& FileDetails::parent_folder_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_.Get(index);
}
inline ::std::string* FileDetails::mutable_parent_folder_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_.Mutable(index);
}
inline void FileDetails::set_parent_folder_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  parent_folder_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FileDetails::set_parent_folder_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  parent_folder_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FileDetails::set_parent_folder_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  parent_folder_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
inline void FileDetails::set_parent_folder_ids(int index, const char* value, size_t size) {
  parent_folder_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
inline ::std::string* FileDetails::add_parent_folder_ids() {
  // @@protoc_insertion_point(field_add_mutable:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_.Add();
}
inline void FileDetails::add_parent_folder_ids(const ::std::string& value) {
  parent_folder_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
#if LANG_CXX11
inline void FileDetails::add_parent_folder_ids(::std::string&& value) {
  parent_folder_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
#endif
inline void FileDetails::add_parent_folder_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  parent_folder_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
inline void FileDetails::add_parent_folder_ids(const char* value, size_t size) {
  parent_folder_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FileDetails::parent_folder_ids() const {
  // @@protoc_insertion_point(field_list:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FileDetails::mutable_parent_folder_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return &parent_folder_ids_;
}

// optional string title = 2;
inline bool FileDetails::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileDetails::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileDetails::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileDetails::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& FileDetails::title() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.title)
  return title_.GetNoArena();
}
inline void FileDetails::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.title)
}
#if LANG_CXX11
inline void FileDetails::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileDetails.title)
}
#endif
inline void FileDetails::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.title)
}
inline void FileDetails::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.title)
}
inline ::std::string* FileDetails::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDetails::release_title() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileDetails.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDetails::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileDetails.title)
}

// optional .sync_file_system.drive_backend.FileKind file_kind = 3;
inline bool FileDetails::has_file_kind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileDetails::set_has_file_kind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileDetails::clear_has_file_kind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileDetails::clear_file_kind() {
  file_kind_ = 0;
  clear_has_file_kind();
}
inline ::sync_file_system::drive_backend::FileKind FileDetails::file_kind() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.file_kind)
  return static_cast< ::sync_file_system::drive_backend::FileKind >(file_kind_);
}
inline void FileDetails::set_file_kind(::sync_file_system::drive_backend::FileKind value) {
  assert(::sync_file_system::drive_backend::FileKind_IsValid(value));
  set_has_file_kind();
  file_kind_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.file_kind)
}

// optional string md5 = 4;
inline bool FileDetails::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileDetails::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileDetails::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileDetails::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& FileDetails::md5() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.md5)
  return md5_.GetNoArena();
}
inline void FileDetails::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.md5)
}
#if LANG_CXX11
inline void FileDetails::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileDetails.md5)
}
#endif
inline void FileDetails::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.md5)
}
inline void FileDetails::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.md5)
}
inline ::std::string* FileDetails::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDetails::release_md5() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileDetails.md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDetails::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileDetails.md5)
}

// optional string etag = 5;
inline bool FileDetails::has_etag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileDetails::set_has_etag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileDetails::clear_has_etag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileDetails::clear_etag() {
  etag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_etag();
}
inline const ::std::string& FileDetails::etag() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.etag)
  return etag_.GetNoArena();
}
inline void FileDetails::set_etag(const ::std::string& value) {
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.etag)
}
#if LANG_CXX11
inline void FileDetails::set_etag(::std::string&& value) {
  set_has_etag();
  etag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileDetails.etag)
}
#endif
inline void FileDetails::set_etag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.etag)
}
inline void FileDetails::set_etag(const char* value, size_t size) {
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.etag)
}
inline ::std::string* FileDetails::mutable_etag() {
  set_has_etag();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.etag)
  return etag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDetails::release_etag() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileDetails.etag)
  clear_has_etag();
  return etag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDetails::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    set_has_etag();
  } else {
    clear_has_etag();
  }
  etag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileDetails.etag)
}

// optional int64 creation_time = 6;
inline bool FileDetails::has_creation_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileDetails::set_has_creation_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileDetails::clear_has_creation_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileDetails::clear_creation_time() {
  creation_time_ = GOOGLE_LONGLONG(0);
  clear_has_creation_time();
}
inline ::google::protobuf::int64 FileDetails::creation_time() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.creation_time)
  return creation_time_;
}
inline void FileDetails::set_creation_time(::google::protobuf::int64 value) {
  set_has_creation_time();
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.creation_time)
}

// optional int64 modification_time = 7;
inline bool FileDetails::has_modification_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileDetails::set_has_modification_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FileDetails::clear_has_modification_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FileDetails::clear_modification_time() {
  modification_time_ = GOOGLE_LONGLONG(0);
  clear_has_modification_time();
}
inline ::google::protobuf::int64 FileDetails::modification_time() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.modification_time)
  return modification_time_;
}
inline void FileDetails::set_modification_time(::google::protobuf::int64 value) {
  set_has_modification_time();
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.modification_time)
}

// optional bool missing = 8;
inline bool FileDetails::has_missing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileDetails::set_has_missing() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileDetails::clear_has_missing() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileDetails::clear_missing() {
  missing_ = false;
  clear_has_missing();
}
inline bool FileDetails::missing() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.missing)
  return missing_;
}
inline void FileDetails::set_missing(bool value) {
  set_has_missing();
  missing_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.missing)
}

// optional int64 change_id = 9;
inline bool FileDetails::has_change_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FileDetails::set_has_change_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FileDetails::clear_has_change_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FileDetails::clear_change_id() {
  change_id_ = GOOGLE_LONGLONG(0);
  clear_has_change_id();
}
inline ::google::protobuf::int64 FileDetails::change_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.change_id)
  return change_id_;
}
inline void FileDetails::set_change_id(::google::protobuf::int64 value) {
  set_has_change_id();
  change_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.change_id)
}

// -------------------------------------------------------------------

// FileMetadata

// required string file_id = 1;
inline bool FileMetadata::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileMetadata::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileMetadata::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileMetadata::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
inline const ::std::string& FileMetadata::file_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileMetadata.file_id)
  return file_id_.GetNoArena();
}
inline void FileMetadata::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileMetadata.file_id)
}
#if LANG_CXX11
inline void FileMetadata::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileMetadata.file_id)
}
#endif
inline void FileMetadata::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileMetadata.file_id)
}
inline void FileMetadata::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileMetadata.file_id)
}
inline ::std::string* FileMetadata::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileMetadata.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileMetadata::release_file_id() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileMetadata.file_id)
  clear_has_file_id();
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileMetadata::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileMetadata.file_id)
}

// optional .sync_file_system.drive_backend.FileDetails details = 2;
inline bool FileMetadata::has_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileMetadata::set_has_details() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileMetadata::clear_has_details() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileMetadata::clear_details() {
  if (details_ != NULL) details_->::sync_file_system::drive_backend::FileDetails::Clear();
  clear_has_details();
}
inline const ::sync_file_system::drive_backend::FileDetails& FileMetadata::details() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileMetadata.details)
  return details_ != NULL ? *details_
                         : *::sync_file_system::drive_backend::FileDetails::internal_default_instance();
}
inline ::sync_file_system::drive_backend::FileDetails* FileMetadata::mutable_details() {
  set_has_details();
  if (details_ == NULL) {
    details_ = new ::sync_file_system::drive_backend::FileDetails;
  }
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileMetadata.details)
  return details_;
}
inline ::sync_file_system::drive_backend::FileDetails* FileMetadata::release_details() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileMetadata.details)
  clear_has_details();
  ::sync_file_system::drive_backend::FileDetails* temp = details_;
  details_ = NULL;
  return temp;
}
inline void FileMetadata::set_allocated_details(::sync_file_system::drive_backend::FileDetails* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileMetadata.details)
}

// -------------------------------------------------------------------

// FileTracker

// required int64 tracker_id = 1;
inline bool FileTracker::has_tracker_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileTracker::set_has_tracker_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileTracker::clear_has_tracker_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileTracker::clear_tracker_id() {
  tracker_id_ = GOOGLE_LONGLONG(0);
  clear_has_tracker_id();
}
inline ::google::protobuf::int64 FileTracker::tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.tracker_id)
  return tracker_id_;
}
inline void FileTracker::set_tracker_id(::google::protobuf::int64 value) {
  set_has_tracker_id();
  tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.tracker_id)
}

// required int64 parent_tracker_id = 2;
inline bool FileTracker::has_parent_tracker_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileTracker::set_has_parent_tracker_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileTracker::clear_has_parent_tracker_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileTracker::clear_parent_tracker_id() {
  parent_tracker_id_ = GOOGLE_LONGLONG(0);
  clear_has_parent_tracker_id();
}
inline ::google::protobuf::int64 FileTracker::parent_tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.parent_tracker_id)
  return parent_tracker_id_;
}
inline void FileTracker::set_parent_tracker_id(::google::protobuf::int64 value) {
  set_has_parent_tracker_id();
  parent_tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.parent_tracker_id)
}

// required string file_id = 3;
inline bool FileTracker::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileTracker::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileTracker::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileTracker::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
inline const ::std::string& FileTracker::file_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.file_id)
  return file_id_.GetNoArena();
}
inline void FileTracker::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.file_id)
}
#if LANG_CXX11
inline void FileTracker::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileTracker.file_id)
}
#endif
inline void FileTracker::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileTracker.file_id)
}
inline void FileTracker::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileTracker.file_id)
}
inline ::std::string* FileTracker::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileTracker.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileTracker::release_file_id() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileTracker.file_id)
  clear_has_file_id();
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileTracker::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileTracker.file_id)
}

// optional string app_id = 4;
inline bool FileTracker::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileTracker::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileTracker::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileTracker::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_id();
}
inline const ::std::string& FileTracker::app_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.app_id)
  return app_id_.GetNoArena();
}
inline void FileTracker::set_app_id(const ::std::string& value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.app_id)
}
#if LANG_CXX11
inline void FileTracker::set_app_id(::std::string&& value) {
  set_has_app_id();
  app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileTracker.app_id)
}
#endif
inline void FileTracker::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileTracker.app_id)
}
inline void FileTracker::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileTracker.app_id)
}
inline ::std::string* FileTracker::mutable_app_id() {
  set_has_app_id();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileTracker.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileTracker::release_app_id() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileTracker.app_id)
  clear_has_app_id();
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileTracker::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    set_has_app_id();
  } else {
    clear_has_app_id();
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileTracker.app_id)
}

// optional .sync_file_system.drive_backend.TrackerKind tracker_kind = 5;
inline bool FileTracker::has_tracker_kind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileTracker::set_has_tracker_kind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileTracker::clear_has_tracker_kind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileTracker::clear_tracker_kind() {
  tracker_kind_ = 0;
  clear_has_tracker_kind();
}
inline ::sync_file_system::drive_backend::TrackerKind FileTracker::tracker_kind() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.tracker_kind)
  return static_cast< ::sync_file_system::drive_backend::TrackerKind >(tracker_kind_);
}
inline void FileTracker::set_tracker_kind(::sync_file_system::drive_backend::TrackerKind value) {
  assert(::sync_file_system::drive_backend::TrackerKind_IsValid(value));
  set_has_tracker_kind();
  tracker_kind_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.tracker_kind)
}

// optional .sync_file_system.drive_backend.FileDetails synced_details = 6;
inline bool FileTracker::has_synced_details() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileTracker::set_has_synced_details() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileTracker::clear_has_synced_details() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileTracker::clear_synced_details() {
  if (synced_details_ != NULL) synced_details_->::sync_file_system::drive_backend::FileDetails::Clear();
  clear_has_synced_details();
}
inline const ::sync_file_system::drive_backend::FileDetails& FileTracker::synced_details() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.synced_details)
  return synced_details_ != NULL ? *synced_details_
                         : *::sync_file_system::drive_backend::FileDetails::internal_default_instance();
}
inline ::sync_file_system::drive_backend::FileDetails* FileTracker::mutable_synced_details() {
  set_has_synced_details();
  if (synced_details_ == NULL) {
    synced_details_ = new ::sync_file_system::drive_backend::FileDetails;
  }
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileTracker.synced_details)
  return synced_details_;
}
inline ::sync_file_system::drive_backend::FileDetails* FileTracker::release_synced_details() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileTracker.synced_details)
  clear_has_synced_details();
  ::sync_file_system::drive_backend::FileDetails* temp = synced_details_;
  synced_details_ = NULL;
  return temp;
}
inline void FileTracker::set_allocated_synced_details(::sync_file_system::drive_backend::FileDetails* synced_details) {
  delete synced_details_;
  synced_details_ = synced_details;
  if (synced_details) {
    set_has_synced_details();
  } else {
    clear_has_synced_details();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileTracker.synced_details)
}

// optional bool dirty = 7;
inline bool FileTracker::has_dirty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileTracker::set_has_dirty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FileTracker::clear_has_dirty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FileTracker::clear_dirty() {
  dirty_ = false;
  clear_has_dirty();
}
inline bool FileTracker::dirty() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.dirty)
  return dirty_;
}
inline void FileTracker::set_dirty(bool value) {
  set_has_dirty();
  dirty_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.dirty)
}

// optional bool active = 8;
inline bool FileTracker::has_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FileTracker::set_has_active() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FileTracker::clear_has_active() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FileTracker::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool FileTracker::active() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.active)
  return active_;
}
inline void FileTracker::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.active)
}

// optional bool needs_folder_listing = 9;
inline bool FileTracker::has_needs_folder_listing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FileTracker::set_has_needs_folder_listing() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FileTracker::clear_has_needs_folder_listing() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FileTracker::clear_needs_folder_listing() {
  needs_folder_listing_ = false;
  clear_has_needs_folder_listing();
}
inline bool FileTracker::needs_folder_listing() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.needs_folder_listing)
  return needs_folder_listing_;
}
inline void FileTracker::set_needs_folder_listing(bool value) {
  set_has_needs_folder_listing();
  needs_folder_listing_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.needs_folder_listing)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace drive_backend
}  // namespace sync_file_system

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sync_file_system::drive_backend::FileKind> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::sync_file_system::drive_backend::TrackerKind> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_metadata_5fdatabase_2eproto__INCLUDED
