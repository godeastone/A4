// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata_database.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "metadata_database.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_file_system {
namespace drive_backend {
class ServiceMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceMetadata> {
} _ServiceMetadata_default_instance_;
class FileDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileDetails> {
} _FileDetails_default_instance_;
class FileMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileMetadata> {
} _FileMetadata_default_instance_;
class FileTrackerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileTracker> {
} _FileTracker_default_instance_;

namespace protobuf_metadata_5fdatabase_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ServiceMetadata_default_instance_.Shutdown();
  _FileDetails_default_instance_.Shutdown();
  _FileMetadata_default_instance_.Shutdown();
  _FileTracker_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ServiceMetadata_default_instance_.DefaultConstruct();
  _FileDetails_default_instance_.DefaultConstruct();
  _FileMetadata_default_instance_.DefaultConstruct();
  _FileTracker_default_instance_.DefaultConstruct();
  _FileMetadata_default_instance_.get_mutable()->details_ = const_cast< ::sync_file_system::drive_backend::FileDetails*>(
      ::sync_file_system::drive_backend::FileDetails::internal_default_instance());
  _FileTracker_default_instance_.get_mutable()->synced_details_ = const_cast< ::sync_file_system::drive_backend::FileDetails*>(
      ::sync_file_system::drive_backend::FileDetails::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_metadata_5fdatabase_2eproto

bool FileKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool TrackerKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceMetadata::kLargestChangeIdFieldNumber;
const int ServiceMetadata::kSyncRootTrackerIdFieldNumber;
const int ServiceMetadata::kNextTrackerIdFieldNumber;
const int ServiceMetadata::kSyncRootRevalidatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceMetadata::ServiceMetadata()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_metadata_5fdatabase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_file_system.drive_backend.ServiceMetadata)
}
ServiceMetadata::ServiceMetadata(const ServiceMetadata& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&largest_change_id_, &from.largest_change_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_root_revalidated_) -
    reinterpret_cast<char*>(&largest_change_id_)) + sizeof(sync_root_revalidated_));
  // @@protoc_insertion_point(copy_constructor:sync_file_system.drive_backend.ServiceMetadata)
}

void ServiceMetadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&largest_change_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_root_revalidated_) -
      reinterpret_cast<char*>(&largest_change_id_)) + sizeof(sync_root_revalidated_));
}

ServiceMetadata::~ServiceMetadata() {
  // @@protoc_insertion_point(destructor:sync_file_system.drive_backend.ServiceMetadata)
  SharedDtor();
}

void ServiceMetadata::SharedDtor() {
}

void ServiceMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceMetadata& ServiceMetadata::default_instance() {
  protobuf_metadata_5fdatabase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceMetadata* ServiceMetadata::New(::google::protobuf::Arena* arena) const {
  ServiceMetadata* n = new ServiceMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_file_system.drive_backend.ServiceMetadata)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&largest_change_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_root_revalidated_) -
        reinterpret_cast<char*>(&largest_change_id_)) + sizeof(sync_root_revalidated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServiceMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_file_system.drive_backend.ServiceMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 largest_change_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_largest_change_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &largest_change_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sync_root_tracker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sync_root_tracker_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sync_root_tracker_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 next_tracker_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_next_tracker_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_tracker_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sync_root_revalidated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sync_root_revalidated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_root_revalidated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_file_system.drive_backend.ServiceMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_file_system.drive_backend.ServiceMetadata)
  return false;
#undef DO_
}

void ServiceMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_file_system.drive_backend.ServiceMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 largest_change_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->largest_change_id(), output);
  }

  // optional int64 sync_root_tracker_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sync_root_tracker_id(), output);
  }

  // optional int64 next_tracker_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->next_tracker_id(), output);
  }

  // optional bool sync_root_revalidated = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sync_root_revalidated(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_file_system.drive_backend.ServiceMetadata)
}

size_t ServiceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_file_system.drive_backend.ServiceMetadata)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 largest_change_id = 1;
    if (has_largest_change_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->largest_change_id());
    }

    // optional int64 sync_root_tracker_id = 2;
    if (has_sync_root_tracker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sync_root_tracker_id());
    }

    // optional int64 next_tracker_id = 3;
    if (has_next_tracker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_tracker_id());
    }

    // optional bool sync_root_revalidated = 4;
    if (has_sync_root_revalidated()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceMetadata*>(&from));
}

void ServiceMetadata::MergeFrom(const ServiceMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_file_system.drive_backend.ServiceMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      largest_change_id_ = from.largest_change_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sync_root_tracker_id_ = from.sync_root_tracker_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      next_tracker_id_ = from.next_tracker_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      sync_root_revalidated_ = from.sync_root_revalidated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceMetadata::CopyFrom(const ServiceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_file_system.drive_backend.ServiceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMetadata::IsInitialized() const {
  return true;
}

void ServiceMetadata::Swap(ServiceMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceMetadata::InternalSwap(ServiceMetadata* other) {
  std::swap(largest_change_id_, other->largest_change_id_);
  std::swap(sync_root_tracker_id_, other->sync_root_tracker_id_);
  std::swap(next_tracker_id_, other->next_tracker_id_);
  std::swap(sync_root_revalidated_, other->sync_root_revalidated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceMetadata::GetTypeName() const {
  return "sync_file_system.drive_backend.ServiceMetadata";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceMetadata

// optional int64 largest_change_id = 1;
bool ServiceMetadata::has_largest_change_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceMetadata::set_has_largest_change_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ServiceMetadata::clear_has_largest_change_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServiceMetadata::clear_largest_change_id() {
  largest_change_id_ = GOOGLE_LONGLONG(0);
  clear_has_largest_change_id();
}
::google::protobuf::int64 ServiceMetadata::largest_change_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.largest_change_id)
  return largest_change_id_;
}
void ServiceMetadata::set_largest_change_id(::google::protobuf::int64 value) {
  set_has_largest_change_id();
  largest_change_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.largest_change_id)
}

// optional int64 sync_root_tracker_id = 2;
bool ServiceMetadata::has_sync_root_tracker_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServiceMetadata::set_has_sync_root_tracker_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ServiceMetadata::clear_has_sync_root_tracker_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServiceMetadata::clear_sync_root_tracker_id() {
  sync_root_tracker_id_ = GOOGLE_LONGLONG(0);
  clear_has_sync_root_tracker_id();
}
::google::protobuf::int64 ServiceMetadata::sync_root_tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.sync_root_tracker_id)
  return sync_root_tracker_id_;
}
void ServiceMetadata::set_sync_root_tracker_id(::google::protobuf::int64 value) {
  set_has_sync_root_tracker_id();
  sync_root_tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.sync_root_tracker_id)
}

// optional int64 next_tracker_id = 3;
bool ServiceMetadata::has_next_tracker_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServiceMetadata::set_has_next_tracker_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ServiceMetadata::clear_has_next_tracker_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServiceMetadata::clear_next_tracker_id() {
  next_tracker_id_ = GOOGLE_LONGLONG(0);
  clear_has_next_tracker_id();
}
::google::protobuf::int64 ServiceMetadata::next_tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.next_tracker_id)
  return next_tracker_id_;
}
void ServiceMetadata::set_next_tracker_id(::google::protobuf::int64 value) {
  set_has_next_tracker_id();
  next_tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.next_tracker_id)
}

// optional bool sync_root_revalidated = 4;
bool ServiceMetadata::has_sync_root_revalidated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServiceMetadata::set_has_sync_root_revalidated() {
  _has_bits_[0] |= 0x00000008u;
}
void ServiceMetadata::clear_has_sync_root_revalidated() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServiceMetadata::clear_sync_root_revalidated() {
  sync_root_revalidated_ = false;
  clear_has_sync_root_revalidated();
}
bool ServiceMetadata::sync_root_revalidated() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.sync_root_revalidated)
  return sync_root_revalidated_;
}
void ServiceMetadata::set_sync_root_revalidated(bool value) {
  set_has_sync_root_revalidated();
  sync_root_revalidated_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.sync_root_revalidated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileDetails::kParentFolderIdsFieldNumber;
const int FileDetails::kTitleFieldNumber;
const int FileDetails::kFileKindFieldNumber;
const int FileDetails::kMd5FieldNumber;
const int FileDetails::kEtagFieldNumber;
const int FileDetails::kCreationTimeFieldNumber;
const int FileDetails::kModificationTimeFieldNumber;
const int FileDetails::kMissingFieldNumber;
const int FileDetails::kChangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileDetails::FileDetails()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_metadata_5fdatabase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_file_system.drive_backend.FileDetails)
}
FileDetails::FileDetails(const FileDetails& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      parent_folder_ids_(from.parent_folder_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_etag()) {
    etag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  ::memcpy(&file_kind_, &from.file_kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_id_) -
    reinterpret_cast<char*>(&file_kind_)) + sizeof(change_id_));
  // @@protoc_insertion_point(copy_constructor:sync_file_system.drive_backend.FileDetails)
}

void FileDetails::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_id_) -
      reinterpret_cast<char*>(&file_kind_)) + sizeof(change_id_));
}

FileDetails::~FileDetails() {
  // @@protoc_insertion_point(destructor:sync_file_system.drive_backend.FileDetails)
  SharedDtor();
}

void FileDetails::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileDetails& FileDetails::default_instance() {
  protobuf_metadata_5fdatabase_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileDetails* FileDetails::New(::google::protobuf::Arena* arena) const {
  FileDetails* n = new FileDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_file_system.drive_backend.FileDetails)
  parent_folder_ids_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_md5()) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
    if (has_etag()) {
      GOOGLE_DCHECK(!etag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*etag_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&file_kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_id_) -
        reinterpret_cast<char*>(&file_kind_)) + sizeof(change_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FileDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_file_system.drive_backend.FileDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string parent_folder_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_parent_folder_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_file_system.drive_backend.FileKind file_kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_file_system::drive_backend::FileKind_IsValid(value)) {
            set_file_kind(static_cast< ::sync_file_system::drive_backend::FileKind >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string md5 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string etag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_etag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 creation_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_creation_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 modification_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_modification_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modification_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool missing = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_missing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 change_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_change_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_file_system.drive_backend.FileDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_file_system.drive_backend.FileDetails)
  return false;
#undef DO_
}

void FileDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_file_system.drive_backend.FileDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string parent_folder_ids = 1;
  for (int i = 0, n = this->parent_folder_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parent_folder_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional .sync_file_system.drive_backend.FileKind file_kind = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->file_kind(), output);
  }

  // optional string md5 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->md5(), output);
  }

  // optional string etag = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->etag(), output);
  }

  // optional int64 creation_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->creation_time(), output);
  }

  // optional int64 modification_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->modification_time(), output);
  }

  // optional bool missing = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->missing(), output);
  }

  // optional int64 change_id = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->change_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_file_system.drive_backend.FileDetails)
}

size_t FileDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_file_system.drive_backend.FileDetails)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string parent_folder_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->parent_folder_ids_size());
  for (int i = 0, n = this->parent_folder_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parent_folder_ids(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string md5 = 4;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional string etag = 5;
    if (has_etag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->etag());
    }

    // optional .sync_file_system.drive_backend.FileKind file_kind = 3;
    if (has_file_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_kind());
    }

    // optional bool missing = 8;
    if (has_missing()) {
      total_size += 1 + 1;
    }

    // optional int64 creation_time = 6;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_time());
    }

    // optional int64 modification_time = 7;
    if (has_modification_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->modification_time());
    }

    // optional int64 change_id = 9;
    if (has_change_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->change_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileDetails*>(&from));
}

void FileDetails::MergeFrom(const FileDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_file_system.drive_backend.FileDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parent_folder_ids_.MergeFrom(from.parent_folder_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_etag();
      etag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag_);
    }
    if (cached_has_bits & 0x00000008u) {
      file_kind_ = from.file_kind_;
    }
    if (cached_has_bits & 0x00000010u) {
      missing_ = from.missing_;
    }
    if (cached_has_bits & 0x00000020u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      modification_time_ = from.modification_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      change_id_ = from.change_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FileDetails::CopyFrom(const FileDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_file_system.drive_backend.FileDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDetails::IsInitialized() const {
  return true;
}

void FileDetails::Swap(FileDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileDetails::InternalSwap(FileDetails* other) {
  parent_folder_ids_.InternalSwap(&other->parent_folder_ids_);
  title_.Swap(&other->title_);
  md5_.Swap(&other->md5_);
  etag_.Swap(&other->etag_);
  std::swap(file_kind_, other->file_kind_);
  std::swap(missing_, other->missing_);
  std::swap(creation_time_, other->creation_time_);
  std::swap(modification_time_, other->modification_time_);
  std::swap(change_id_, other->change_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileDetails::GetTypeName() const {
  return "sync_file_system.drive_backend.FileDetails";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileDetails

// repeated string parent_folder_ids = 1;
int FileDetails::parent_folder_ids_size() const {
  return parent_folder_ids_.size();
}
void FileDetails::clear_parent_folder_ids() {
  parent_folder_ids_.Clear();
}
const ::std::string& FileDetails::parent_folder_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_.Get(index);
}
::std::string* FileDetails::mutable_parent_folder_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_.Mutable(index);
}
void FileDetails::set_parent_folder_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  parent_folder_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void FileDetails::set_parent_folder_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  parent_folder_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void FileDetails::set_parent_folder_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  parent_folder_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
void FileDetails::set_parent_folder_ids(int index, const char* value, size_t size) {
  parent_folder_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
::std::string* FileDetails::add_parent_folder_ids() {
  // @@protoc_insertion_point(field_add_mutable:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_.Add();
}
void FileDetails::add_parent_folder_ids(const ::std::string& value) {
  parent_folder_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
#if LANG_CXX11
void FileDetails::add_parent_folder_ids(::std::string&& value) {
  parent_folder_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
#endif
void FileDetails::add_parent_folder_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  parent_folder_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
void FileDetails::add_parent_folder_ids(const char* value, size_t size) {
  parent_folder_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FileDetails::parent_folder_ids() const {
  // @@protoc_insertion_point(field_list:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FileDetails::mutable_parent_folder_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return &parent_folder_ids_;
}

// optional string title = 2;
bool FileDetails::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FileDetails::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void FileDetails::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void FileDetails::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& FileDetails::title() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.title)
  return title_.GetNoArena();
}
void FileDetails::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.title)
}
#if LANG_CXX11
void FileDetails::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileDetails.title)
}
#endif
void FileDetails::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.title)
}
void FileDetails::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.title)
}
::std::string* FileDetails::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileDetails::release_title() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileDetails.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileDetails::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileDetails.title)
}

// optional .sync_file_system.drive_backend.FileKind file_kind = 3;
bool FileDetails::has_file_kind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FileDetails::set_has_file_kind() {
  _has_bits_[0] |= 0x00000008u;
}
void FileDetails::clear_has_file_kind() {
  _has_bits_[0] &= ~0x00000008u;
}
void FileDetails::clear_file_kind() {
  file_kind_ = 0;
  clear_has_file_kind();
}
::sync_file_system::drive_backend::FileKind FileDetails::file_kind() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.file_kind)
  return static_cast< ::sync_file_system::drive_backend::FileKind >(file_kind_);
}
void FileDetails::set_file_kind(::sync_file_system::drive_backend::FileKind value) {
  assert(::sync_file_system::drive_backend::FileKind_IsValid(value));
  set_has_file_kind();
  file_kind_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.file_kind)
}

// optional string md5 = 4;
bool FileDetails::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FileDetails::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
void FileDetails::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
void FileDetails::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& FileDetails::md5() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.md5)
  return md5_.GetNoArena();
}
void FileDetails::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.md5)
}
#if LANG_CXX11
void FileDetails::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileDetails.md5)
}
#endif
void FileDetails::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.md5)
}
void FileDetails::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.md5)
}
::std::string* FileDetails::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileDetails::release_md5() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileDetails.md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileDetails::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileDetails.md5)
}

// optional string etag = 5;
bool FileDetails::has_etag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FileDetails::set_has_etag() {
  _has_bits_[0] |= 0x00000004u;
}
void FileDetails::clear_has_etag() {
  _has_bits_[0] &= ~0x00000004u;
}
void FileDetails::clear_etag() {
  etag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_etag();
}
const ::std::string& FileDetails::etag() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.etag)
  return etag_.GetNoArena();
}
void FileDetails::set_etag(const ::std::string& value) {
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.etag)
}
#if LANG_CXX11
void FileDetails::set_etag(::std::string&& value) {
  set_has_etag();
  etag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileDetails.etag)
}
#endif
void FileDetails::set_etag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.etag)
}
void FileDetails::set_etag(const char* value, size_t size) {
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.etag)
}
::std::string* FileDetails::mutable_etag() {
  set_has_etag();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.etag)
  return etag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileDetails::release_etag() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileDetails.etag)
  clear_has_etag();
  return etag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileDetails::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    set_has_etag();
  } else {
    clear_has_etag();
  }
  etag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileDetails.etag)
}

// optional int64 creation_time = 6;
bool FileDetails::has_creation_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FileDetails::set_has_creation_time() {
  _has_bits_[0] |= 0x00000020u;
}
void FileDetails::clear_has_creation_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void FileDetails::clear_creation_time() {
  creation_time_ = GOOGLE_LONGLONG(0);
  clear_has_creation_time();
}
::google::protobuf::int64 FileDetails::creation_time() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.creation_time)
  return creation_time_;
}
void FileDetails::set_creation_time(::google::protobuf::int64 value) {
  set_has_creation_time();
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.creation_time)
}

// optional int64 modification_time = 7;
bool FileDetails::has_modification_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FileDetails::set_has_modification_time() {
  _has_bits_[0] |= 0x00000040u;
}
void FileDetails::clear_has_modification_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void FileDetails::clear_modification_time() {
  modification_time_ = GOOGLE_LONGLONG(0);
  clear_has_modification_time();
}
::google::protobuf::int64 FileDetails::modification_time() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.modification_time)
  return modification_time_;
}
void FileDetails::set_modification_time(::google::protobuf::int64 value) {
  set_has_modification_time();
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.modification_time)
}

// optional bool missing = 8;
bool FileDetails::has_missing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FileDetails::set_has_missing() {
  _has_bits_[0] |= 0x00000010u;
}
void FileDetails::clear_has_missing() {
  _has_bits_[0] &= ~0x00000010u;
}
void FileDetails::clear_missing() {
  missing_ = false;
  clear_has_missing();
}
bool FileDetails::missing() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.missing)
  return missing_;
}
void FileDetails::set_missing(bool value) {
  set_has_missing();
  missing_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.missing)
}

// optional int64 change_id = 9;
bool FileDetails::has_change_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FileDetails::set_has_change_id() {
  _has_bits_[0] |= 0x00000080u;
}
void FileDetails::clear_has_change_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void FileDetails::clear_change_id() {
  change_id_ = GOOGLE_LONGLONG(0);
  clear_has_change_id();
}
::google::protobuf::int64 FileDetails::change_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.change_id)
  return change_id_;
}
void FileDetails::set_change_id(::google::protobuf::int64 value) {
  set_has_change_id();
  change_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.change_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileMetadata::kFileIdFieldNumber;
const int FileMetadata::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileMetadata::FileMetadata()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_metadata_5fdatabase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_file_system.drive_backend.FileMetadata)
}
FileMetadata::FileMetadata(const FileMetadata& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_id()) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  if (from.has_details()) {
    details_ = new ::sync_file_system::drive_backend::FileDetails(*from.details_);
  } else {
    details_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sync_file_system.drive_backend.FileMetadata)
}

void FileMetadata::SharedCtor() {
  _cached_size_ = 0;
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  details_ = NULL;
}

FileMetadata::~FileMetadata() {
  // @@protoc_insertion_point(destructor:sync_file_system.drive_backend.FileMetadata)
  SharedDtor();
}

void FileMetadata::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete details_;
  }
}

void FileMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileMetadata& FileMetadata::default_instance() {
  protobuf_metadata_5fdatabase_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileMetadata* FileMetadata::New(::google::protobuf::Arena* arena) const {
  FileMetadata* n = new FileMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_file_system.drive_backend.FileMetadata)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_id()) {
      GOOGLE_DCHECK(!file_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_details()) {
      GOOGLE_DCHECK(details_ != NULL);
      details_->::sync_file_system::drive_backend::FileDetails::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FileMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_file_system.drive_backend.FileMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_file_system.drive_backend.FileDetails details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_file_system.drive_backend.FileMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_file_system.drive_backend.FileMetadata)
  return false;
#undef DO_
}

void FileMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_file_system.drive_backend.FileMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  // optional .sync_file_system.drive_backend.FileDetails details = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->details_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_file_system.drive_backend.FileMetadata)
}

size_t FileMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_file_system.drive_backend.FileMetadata)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required string file_id = 1;
  if (has_file_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }
  // optional .sync_file_system.drive_backend.FileDetails details = 2;
  if (has_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileMetadata*>(&from));
}

void FileMetadata::MergeFrom(const FileMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_file_system.drive_backend.FileMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_id();
      file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_details()->::sync_file_system::drive_backend::FileDetails::MergeFrom(from.details());
    }
  }
}

void FileMetadata::CopyFrom(const FileMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_file_system.drive_backend.FileMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FileMetadata::Swap(FileMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileMetadata::InternalSwap(FileMetadata* other) {
  file_id_.Swap(&other->file_id_);
  std::swap(details_, other->details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileMetadata::GetTypeName() const {
  return "sync_file_system.drive_backend.FileMetadata";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileMetadata

// required string file_id = 1;
bool FileMetadata::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FileMetadata::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FileMetadata::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FileMetadata::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
const ::std::string& FileMetadata::file_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileMetadata.file_id)
  return file_id_.GetNoArena();
}
void FileMetadata::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileMetadata.file_id)
}
#if LANG_CXX11
void FileMetadata::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileMetadata.file_id)
}
#endif
void FileMetadata::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileMetadata.file_id)
}
void FileMetadata::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileMetadata.file_id)
}
::std::string* FileMetadata::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileMetadata.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileMetadata::release_file_id() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileMetadata.file_id)
  clear_has_file_id();
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileMetadata::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileMetadata.file_id)
}

// optional .sync_file_system.drive_backend.FileDetails details = 2;
bool FileMetadata::has_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FileMetadata::set_has_details() {
  _has_bits_[0] |= 0x00000002u;
}
void FileMetadata::clear_has_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void FileMetadata::clear_details() {
  if (details_ != NULL) details_->::sync_file_system::drive_backend::FileDetails::Clear();
  clear_has_details();
}
const ::sync_file_system::drive_backend::FileDetails& FileMetadata::details() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileMetadata.details)
  return details_ != NULL ? *details_
                         : *::sync_file_system::drive_backend::FileDetails::internal_default_instance();
}
::sync_file_system::drive_backend::FileDetails* FileMetadata::mutable_details() {
  set_has_details();
  if (details_ == NULL) {
    details_ = new ::sync_file_system::drive_backend::FileDetails;
  }
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileMetadata.details)
  return details_;
}
::sync_file_system::drive_backend::FileDetails* FileMetadata::release_details() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileMetadata.details)
  clear_has_details();
  ::sync_file_system::drive_backend::FileDetails* temp = details_;
  details_ = NULL;
  return temp;
}
void FileMetadata::set_allocated_details(::sync_file_system::drive_backend::FileDetails* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileMetadata.details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTracker::kTrackerIdFieldNumber;
const int FileTracker::kParentTrackerIdFieldNumber;
const int FileTracker::kFileIdFieldNumber;
const int FileTracker::kAppIdFieldNumber;
const int FileTracker::kTrackerKindFieldNumber;
const int FileTracker::kSyncedDetailsFieldNumber;
const int FileTracker::kDirtyFieldNumber;
const int FileTracker::kActiveFieldNumber;
const int FileTracker::kNeedsFolderListingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTracker::FileTracker()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_metadata_5fdatabase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_file_system.drive_backend.FileTracker)
}
FileTracker::FileTracker(const FileTracker& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_id()) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_id()) {
    app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.has_synced_details()) {
    synced_details_ = new ::sync_file_system::drive_backend::FileDetails(*from.synced_details_);
  } else {
    synced_details_ = NULL;
  }
  ::memcpy(&tracker_id_, &from.tracker_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&needs_folder_listing_) -
    reinterpret_cast<char*>(&tracker_id_)) + sizeof(needs_folder_listing_));
  // @@protoc_insertion_point(copy_constructor:sync_file_system.drive_backend.FileTracker)
}

void FileTracker::SharedCtor() {
  _cached_size_ = 0;
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&synced_details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needs_folder_listing_) -
      reinterpret_cast<char*>(&synced_details_)) + sizeof(needs_folder_listing_));
}

FileTracker::~FileTracker() {
  // @@protoc_insertion_point(destructor:sync_file_system.drive_backend.FileTracker)
  SharedDtor();
}

void FileTracker::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete synced_details_;
  }
}

void FileTracker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileTracker& FileTracker::default_instance() {
  protobuf_metadata_5fdatabase_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileTracker* FileTracker::New(::google::protobuf::Arena* arena) const {
  FileTracker* n = new FileTracker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileTracker::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_file_system.drive_backend.FileTracker)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_file_id()) {
      GOOGLE_DCHECK(!file_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_app_id()) {
      GOOGLE_DCHECK(!app_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*app_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_synced_details()) {
      GOOGLE_DCHECK(synced_details_ != NULL);
      synced_details_->::sync_file_system::drive_backend::FileDetails::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&tracker_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&tracker_id_)) + sizeof(active_));
  }
  needs_folder_listing_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FileTracker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_file_system.drive_backend.FileTracker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tracker_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tracker_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tracker_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 parent_tracker_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_parent_tracker_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_tracker_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string file_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_file_system.drive_backend.TrackerKind tracker_kind = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_file_system::drive_backend::TrackerKind_IsValid(value)) {
            set_tracker_kind(static_cast< ::sync_file_system::drive_backend::TrackerKind >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_file_system.drive_backend.FileDetails synced_details = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_synced_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dirty = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_dirty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dirty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_folder_listing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_needs_folder_listing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_folder_listing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_file_system.drive_backend.FileTracker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_file_system.drive_backend.FileTracker)
  return false;
#undef DO_
}

void FileTracker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_file_system.drive_backend.FileTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 tracker_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tracker_id(), output);
  }

  // required int64 parent_tracker_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->parent_tracker_id(), output);
  }

  // required string file_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_id(), output);
  }

  // optional string app_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->app_id(), output);
  }

  // optional .sync_file_system.drive_backend.TrackerKind tracker_kind = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tracker_kind(), output);
  }

  // optional .sync_file_system.drive_backend.FileDetails synced_details = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->synced_details_, output);
  }

  // optional bool dirty = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->dirty(), output);
  }

  // optional bool active = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->active(), output);
  }

  // optional bool needs_folder_listing = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->needs_folder_listing(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_file_system.drive_backend.FileTracker)
}

size_t FileTracker::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sync_file_system.drive_backend.FileTracker)
  size_t total_size = 0;

  if (has_file_id()) {
    // required string file_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  if (has_tracker_id()) {
    // required int64 tracker_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tracker_id());
  }

  if (has_parent_tracker_id()) {
    // required int64 parent_tracker_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parent_tracker_id());
  }

  return total_size;
}
size_t FileTracker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_file_system.drive_backend.FileTracker)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required string file_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());

    // required int64 tracker_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tracker_id());

    // required int64 parent_tracker_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parent_tracker_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string app_id = 4;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional .sync_file_system.drive_backend.FileDetails synced_details = 6;
    if (has_synced_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->synced_details_);
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional .sync_file_system.drive_backend.TrackerKind tracker_kind = 5;
    if (has_tracker_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tracker_kind());
    }

    // optional bool dirty = 7;
    if (has_dirty()) {
      total_size += 1 + 1;
    }

    // optional bool active = 8;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  // optional bool needs_folder_listing = 9;
  if (has_needs_folder_listing()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileTracker::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileTracker*>(&from));
}

void FileTracker::MergeFrom(const FileTracker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_file_system.drive_backend.FileTracker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_id();
      file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_app_id();
      app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_synced_details()->::sync_file_system::drive_backend::FileDetails::MergeFrom(from.synced_details());
    }
    if (cached_has_bits & 0x00000008u) {
      tracker_id_ = from.tracker_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      parent_tracker_id_ = from.parent_tracker_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      tracker_kind_ = from.tracker_kind_;
    }
    if (cached_has_bits & 0x00000040u) {
      dirty_ = from.dirty_;
    }
    if (cached_has_bits & 0x00000080u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_needs_folder_listing(from.needs_folder_listing());
  }
}

void FileTracker::CopyFrom(const FileTracker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_file_system.drive_backend.FileTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTracker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  return true;
}

void FileTracker::Swap(FileTracker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTracker::InternalSwap(FileTracker* other) {
  file_id_.Swap(&other->file_id_);
  app_id_.Swap(&other->app_id_);
  std::swap(synced_details_, other->synced_details_);
  std::swap(tracker_id_, other->tracker_id_);
  std::swap(parent_tracker_id_, other->parent_tracker_id_);
  std::swap(tracker_kind_, other->tracker_kind_);
  std::swap(dirty_, other->dirty_);
  std::swap(active_, other->active_);
  std::swap(needs_folder_listing_, other->needs_folder_listing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileTracker::GetTypeName() const {
  return "sync_file_system.drive_backend.FileTracker";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileTracker

// required int64 tracker_id = 1;
bool FileTracker::has_tracker_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FileTracker::set_has_tracker_id() {
  _has_bits_[0] |= 0x00000008u;
}
void FileTracker::clear_has_tracker_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void FileTracker::clear_tracker_id() {
  tracker_id_ = GOOGLE_LONGLONG(0);
  clear_has_tracker_id();
}
::google::protobuf::int64 FileTracker::tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.tracker_id)
  return tracker_id_;
}
void FileTracker::set_tracker_id(::google::protobuf::int64 value) {
  set_has_tracker_id();
  tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.tracker_id)
}

// required int64 parent_tracker_id = 2;
bool FileTracker::has_parent_tracker_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FileTracker::set_has_parent_tracker_id() {
  _has_bits_[0] |= 0x00000010u;
}
void FileTracker::clear_has_parent_tracker_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void FileTracker::clear_parent_tracker_id() {
  parent_tracker_id_ = GOOGLE_LONGLONG(0);
  clear_has_parent_tracker_id();
}
::google::protobuf::int64 FileTracker::parent_tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.parent_tracker_id)
  return parent_tracker_id_;
}
void FileTracker::set_parent_tracker_id(::google::protobuf::int64 value) {
  set_has_parent_tracker_id();
  parent_tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.parent_tracker_id)
}

// required string file_id = 3;
bool FileTracker::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FileTracker::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FileTracker::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FileTracker::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
const ::std::string& FileTracker::file_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.file_id)
  return file_id_.GetNoArena();
}
void FileTracker::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.file_id)
}
#if LANG_CXX11
void FileTracker::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileTracker.file_id)
}
#endif
void FileTracker::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileTracker.file_id)
}
void FileTracker::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileTracker.file_id)
}
::std::string* FileTracker::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileTracker.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileTracker::release_file_id() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileTracker.file_id)
  clear_has_file_id();
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileTracker::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileTracker.file_id)
}

// optional string app_id = 4;
bool FileTracker::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FileTracker::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void FileTracker::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void FileTracker::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_id();
}
const ::std::string& FileTracker::app_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.app_id)
  return app_id_.GetNoArena();
}
void FileTracker::set_app_id(const ::std::string& value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.app_id)
}
#if LANG_CXX11
void FileTracker::set_app_id(::std::string&& value) {
  set_has_app_id();
  app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileTracker.app_id)
}
#endif
void FileTracker::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileTracker.app_id)
}
void FileTracker::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileTracker.app_id)
}
::std::string* FileTracker::mutable_app_id() {
  set_has_app_id();
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileTracker.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileTracker::release_app_id() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileTracker.app_id)
  clear_has_app_id();
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileTracker::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    set_has_app_id();
  } else {
    clear_has_app_id();
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileTracker.app_id)
}

// optional .sync_file_system.drive_backend.TrackerKind tracker_kind = 5;
bool FileTracker::has_tracker_kind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FileTracker::set_has_tracker_kind() {
  _has_bits_[0] |= 0x00000020u;
}
void FileTracker::clear_has_tracker_kind() {
  _has_bits_[0] &= ~0x00000020u;
}
void FileTracker::clear_tracker_kind() {
  tracker_kind_ = 0;
  clear_has_tracker_kind();
}
::sync_file_system::drive_backend::TrackerKind FileTracker::tracker_kind() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.tracker_kind)
  return static_cast< ::sync_file_system::drive_backend::TrackerKind >(tracker_kind_);
}
void FileTracker::set_tracker_kind(::sync_file_system::drive_backend::TrackerKind value) {
  assert(::sync_file_system::drive_backend::TrackerKind_IsValid(value));
  set_has_tracker_kind();
  tracker_kind_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.tracker_kind)
}

// optional .sync_file_system.drive_backend.FileDetails synced_details = 6;
bool FileTracker::has_synced_details() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FileTracker::set_has_synced_details() {
  _has_bits_[0] |= 0x00000004u;
}
void FileTracker::clear_has_synced_details() {
  _has_bits_[0] &= ~0x00000004u;
}
void FileTracker::clear_synced_details() {
  if (synced_details_ != NULL) synced_details_->::sync_file_system::drive_backend::FileDetails::Clear();
  clear_has_synced_details();
}
const ::sync_file_system::drive_backend::FileDetails& FileTracker::synced_details() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.synced_details)
  return synced_details_ != NULL ? *synced_details_
                         : *::sync_file_system::drive_backend::FileDetails::internal_default_instance();
}
::sync_file_system::drive_backend::FileDetails* FileTracker::mutable_synced_details() {
  set_has_synced_details();
  if (synced_details_ == NULL) {
    synced_details_ = new ::sync_file_system::drive_backend::FileDetails;
  }
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileTracker.synced_details)
  return synced_details_;
}
::sync_file_system::drive_backend::FileDetails* FileTracker::release_synced_details() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileTracker.synced_details)
  clear_has_synced_details();
  ::sync_file_system::drive_backend::FileDetails* temp = synced_details_;
  synced_details_ = NULL;
  return temp;
}
void FileTracker::set_allocated_synced_details(::sync_file_system::drive_backend::FileDetails* synced_details) {
  delete synced_details_;
  synced_details_ = synced_details;
  if (synced_details) {
    set_has_synced_details();
  } else {
    clear_has_synced_details();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileTracker.synced_details)
}

// optional bool dirty = 7;
bool FileTracker::has_dirty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FileTracker::set_has_dirty() {
  _has_bits_[0] |= 0x00000040u;
}
void FileTracker::clear_has_dirty() {
  _has_bits_[0] &= ~0x00000040u;
}
void FileTracker::clear_dirty() {
  dirty_ = false;
  clear_has_dirty();
}
bool FileTracker::dirty() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.dirty)
  return dirty_;
}
void FileTracker::set_dirty(bool value) {
  set_has_dirty();
  dirty_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.dirty)
}

// optional bool active = 8;
bool FileTracker::has_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FileTracker::set_has_active() {
  _has_bits_[0] |= 0x00000080u;
}
void FileTracker::clear_has_active() {
  _has_bits_[0] &= ~0x00000080u;
}
void FileTracker::clear_active() {
  active_ = false;
  clear_has_active();
}
bool FileTracker::active() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.active)
  return active_;
}
void FileTracker::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.active)
}

// optional bool needs_folder_listing = 9;
bool FileTracker::has_needs_folder_listing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FileTracker::set_has_needs_folder_listing() {
  _has_bits_[0] |= 0x00000100u;
}
void FileTracker::clear_has_needs_folder_listing() {
  _has_bits_[0] &= ~0x00000100u;
}
void FileTracker::clear_needs_folder_listing() {
  needs_folder_listing_ = false;
  clear_has_needs_folder_listing();
}
bool FileTracker::needs_folder_listing() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.needs_folder_listing)
  return needs_folder_listing_;
}
void FileTracker::set_needs_folder_listing(bool value) {
  set_has_needs_folder_listing();
  needs_folder_listing_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.needs_folder_listing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drive_backend
}  // namespace sync_file_system

// @@protoc_insertion_point(global_scope)
