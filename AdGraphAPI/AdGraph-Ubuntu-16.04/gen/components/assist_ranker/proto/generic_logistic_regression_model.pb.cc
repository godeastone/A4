// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generic_logistic_regression_model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "generic_logistic_regression_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace assist_ranker {
class SparseWeights_WeightsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SparseWeights::SparseWeights_WeightsEntry> {
} _SparseWeights_WeightsEntry_default_instance_;
class SparseWeightsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SparseWeights> {
} _SparseWeights_default_instance_;
class BucketizedWeightsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BucketizedWeights> {
} _BucketizedWeights_default_instance_;
class FeatureWeightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FeatureWeight> {
  public:
  float scalar_;
  const ::assist_ranker::SparseWeights* one_hot_;
  const ::assist_ranker::SparseWeights* sparse_;
  const ::assist_ranker::BucketizedWeights* bucketized_;
} _FeatureWeight_default_instance_;
class GenericLogisticRegressionModel_WeightsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenericLogisticRegressionModel::GenericLogisticRegressionModel_WeightsEntry> {
} _GenericLogisticRegressionModel_WeightsEntry_default_instance_;
class GenericLogisticRegressionModel_FullnameWeightsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenericLogisticRegressionModel::GenericLogisticRegressionModel_FullnameWeightsEntry> {
} _GenericLogisticRegressionModel_FullnameWeightsEntry_default_instance_;
class GenericLogisticRegressionModelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenericLogisticRegressionModel> {
} _GenericLogisticRegressionModel_default_instance_;

namespace protobuf_generic_5flogistic_5fregression_5fmodel_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SparseWeights_default_instance_.Shutdown();
  _BucketizedWeights_default_instance_.Shutdown();
  _FeatureWeight_default_instance_.Shutdown();
  _GenericLogisticRegressionModel_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::assist_ranker::protobuf_example_5fpreprocessor_2eproto::InitDefaults();
  _SparseWeights_WeightsEntry_default_instance_.DefaultConstruct();
  _SparseWeights_default_instance_.DefaultConstruct();
  _BucketizedWeights_default_instance_.DefaultConstruct();
  _FeatureWeight_default_instance_.DefaultConstruct();
  _GenericLogisticRegressionModel_WeightsEntry_default_instance_.DefaultConstruct();
  _GenericLogisticRegressionModel_FullnameWeightsEntry_default_instance_.DefaultConstruct();
  _GenericLogisticRegressionModel_default_instance_.DefaultConstruct();
  _SparseWeights_WeightsEntry_default_instance_.get_mutable()->set_default_instance(_SparseWeights_WeightsEntry_default_instance_.get_mutable());
  _SparseWeights_WeightsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _GenericLogisticRegressionModel_WeightsEntry_default_instance_.get_mutable()->set_default_instance(_GenericLogisticRegressionModel_WeightsEntry_default_instance_.get_mutable());
  _GenericLogisticRegressionModel_WeightsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _GenericLogisticRegressionModel_FullnameWeightsEntry_default_instance_.get_mutable()->set_default_instance(_GenericLogisticRegressionModel_FullnameWeightsEntry_default_instance_.get_mutable());
  _GenericLogisticRegressionModel_FullnameWeightsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _GenericLogisticRegressionModel_default_instance_.get_mutable()->preprocessor_config_ = const_cast< ::assist_ranker::ExamplePreprocessorConfig*>(
      ::assist_ranker::ExamplePreprocessorConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::assist_ranker::protobuf_example_5fpreprocessor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_generic_5flogistic_5fregression_5fmodel_2eproto


// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseWeights::kWeightsFieldNumber;
const int SparseWeights::kDefaultWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseWeights::SparseWeights()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_generic_5flogistic_5fregression_5fmodel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.SparseWeights)
}
SparseWeights::SparseWeights(const SparseWeights& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weights_.MergeFrom(from.weights_);
  default_weight_ = from.default_weight_;
  // @@protoc_insertion_point(copy_constructor:assist_ranker.SparseWeights)
}

void SparseWeights::SharedCtor() {
  _cached_size_ = 0;
  default_weight_ = 0;
}

SparseWeights::~SparseWeights() {
  // @@protoc_insertion_point(destructor:assist_ranker.SparseWeights)
  SharedDtor();
}

void SparseWeights::SharedDtor() {
}

void SparseWeights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SparseWeights& SparseWeights::default_instance() {
  protobuf_generic_5flogistic_5fregression_5fmodel_2eproto::InitDefaults();
  return *internal_default_instance();
}

SparseWeights* SparseWeights::New(::google::protobuf::Arena* arena) const {
  SparseWeights* n = new SparseWeights;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparseWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.SparseWeights)
  weights_.Clear();
  default_weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SparseWeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.SparseWeights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, float> weights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          SparseWeights_WeightsEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              SparseWeights_WeightsEntry,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&weights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float default_weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_default_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.SparseWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.SparseWeights)
  return false;
#undef DO_
}

void SparseWeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.SparseWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> weights = 1;
  if (!this->weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->weights().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SparseWeights_WeightsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparseWeights_WeightsEntry> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it) {
        entry.reset(weights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional float default_weight = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->default_weight(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.SparseWeights)
}

size_t SparseWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.SparseWeights)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // map<string, float> weights = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->weights_size());
  {
    ::google::protobuf::scoped_ptr<SparseWeights_WeightsEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->weights().begin();
        it != this->weights().end(); ++it) {
      entry.reset(weights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // optional float default_weight = 2;
  if (has_default_weight()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseWeights::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SparseWeights*>(&from));
}

void SparseWeights::MergeFrom(const SparseWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.SparseWeights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  if (from.has_default_weight()) {
    set_default_weight(from.default_weight());
  }
}

void SparseWeights::CopyFrom(const SparseWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.SparseWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseWeights::IsInitialized() const {
  return true;
}

void SparseWeights::Swap(SparseWeights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparseWeights::InternalSwap(SparseWeights* other) {
  weights_.Swap(&other->weights_);
  std::swap(default_weight_, other->default_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SparseWeights::GetTypeName() const {
  return "assist_ranker.SparseWeights";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparseWeights

// map<string, float> weights = 1;
int SparseWeights::weights_size() const {
  return weights_.size();
}
void SparseWeights::clear_weights() {
  weights_.Clear();
}
 const ::google::protobuf::Map< ::std::string, float >&
SparseWeights::weights() const {
  // @@protoc_insertion_point(field_map:assist_ranker.SparseWeights.weights)
  return weights_.GetMap();
}
 ::google::protobuf::Map< ::std::string, float >*
SparseWeights::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_map:assist_ranker.SparseWeights.weights)
  return weights_.MutableMap();
}

// optional float default_weight = 2;
bool SparseWeights::has_default_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SparseWeights::set_has_default_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void SparseWeights::clear_has_default_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void SparseWeights::clear_default_weight() {
  default_weight_ = 0;
  clear_has_default_weight();
}
float SparseWeights::default_weight() const {
  // @@protoc_insertion_point(field_get:assist_ranker.SparseWeights.default_weight)
  return default_weight_;
}
void SparseWeights::set_default_weight(float value) {
  set_has_default_weight();
  default_weight_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.SparseWeights.default_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BucketizedWeights::kBoundariesFieldNumber;
const int BucketizedWeights::kWeightsFieldNumber;
const int BucketizedWeights::kDefaultWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BucketizedWeights::BucketizedWeights()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_generic_5flogistic_5fregression_5fmodel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.BucketizedWeights)
}
BucketizedWeights::BucketizedWeights(const BucketizedWeights& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      boundaries_(from.boundaries_),
      weights_(from.weights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  default_weight_ = from.default_weight_;
  // @@protoc_insertion_point(copy_constructor:assist_ranker.BucketizedWeights)
}

void BucketizedWeights::SharedCtor() {
  _cached_size_ = 0;
  default_weight_ = 0;
}

BucketizedWeights::~BucketizedWeights() {
  // @@protoc_insertion_point(destructor:assist_ranker.BucketizedWeights)
  SharedDtor();
}

void BucketizedWeights::SharedDtor() {
}

void BucketizedWeights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BucketizedWeights& BucketizedWeights::default_instance() {
  protobuf_generic_5flogistic_5fregression_5fmodel_2eproto::InitDefaults();
  return *internal_default_instance();
}

BucketizedWeights* BucketizedWeights::New(::google::protobuf::Arena* arena) const {
  BucketizedWeights* n = new BucketizedWeights;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BucketizedWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.BucketizedWeights)
  boundaries_.Clear();
  weights_.Clear();
  default_weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BucketizedWeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.BucketizedWeights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float boundaries = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_boundaries())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_boundaries())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float weights = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weights())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float default_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_default_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.BucketizedWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.BucketizedWeights)
  return false;
#undef DO_
}

void BucketizedWeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.BucketizedWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float boundaries = 1 [packed = true];
  if (this->boundaries_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _boundaries_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->boundaries().data(), this->boundaries_size(), output);
  }

  // repeated float weights = 2 [packed = true];
  if (this->weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _weights_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->weights().data(), this->weights_size(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float default_weight = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->default_weight(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.BucketizedWeights)
}

size_t BucketizedWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.BucketizedWeights)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated float boundaries = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->boundaries_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _boundaries_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float weights = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->weights_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _weights_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional float default_weight = 3;
  if (has_default_weight()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BucketizedWeights::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BucketizedWeights*>(&from));
}

void BucketizedWeights::MergeFrom(const BucketizedWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.BucketizedWeights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundaries_.MergeFrom(from.boundaries_);
  weights_.MergeFrom(from.weights_);
  if (from.has_default_weight()) {
    set_default_weight(from.default_weight());
  }
}

void BucketizedWeights::CopyFrom(const BucketizedWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.BucketizedWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketizedWeights::IsInitialized() const {
  return true;
}

void BucketizedWeights::Swap(BucketizedWeights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BucketizedWeights::InternalSwap(BucketizedWeights* other) {
  boundaries_.InternalSwap(&other->boundaries_);
  weights_.InternalSwap(&other->weights_);
  std::swap(default_weight_, other->default_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BucketizedWeights::GetTypeName() const {
  return "assist_ranker.BucketizedWeights";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BucketizedWeights

// repeated float boundaries = 1 [packed = true];
int BucketizedWeights::boundaries_size() const {
  return boundaries_.size();
}
void BucketizedWeights::clear_boundaries() {
  boundaries_.Clear();
}
float BucketizedWeights::boundaries(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.BucketizedWeights.boundaries)
  return boundaries_.Get(index);
}
void BucketizedWeights::set_boundaries(int index, float value) {
  boundaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:assist_ranker.BucketizedWeights.boundaries)
}
void BucketizedWeights::add_boundaries(float value) {
  boundaries_.Add(value);
  // @@protoc_insertion_point(field_add:assist_ranker.BucketizedWeights.boundaries)
}
const ::google::protobuf::RepeatedField< float >&
BucketizedWeights::boundaries() const {
  // @@protoc_insertion_point(field_list:assist_ranker.BucketizedWeights.boundaries)
  return boundaries_;
}
::google::protobuf::RepeatedField< float >*
BucketizedWeights::mutable_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.BucketizedWeights.boundaries)
  return &boundaries_;
}

// repeated float weights = 2 [packed = true];
int BucketizedWeights::weights_size() const {
  return weights_.size();
}
void BucketizedWeights::clear_weights() {
  weights_.Clear();
}
float BucketizedWeights::weights(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.BucketizedWeights.weights)
  return weights_.Get(index);
}
void BucketizedWeights::set_weights(int index, float value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:assist_ranker.BucketizedWeights.weights)
}
void BucketizedWeights::add_weights(float value) {
  weights_.Add(value);
  // @@protoc_insertion_point(field_add:assist_ranker.BucketizedWeights.weights)
}
const ::google::protobuf::RepeatedField< float >&
BucketizedWeights::weights() const {
  // @@protoc_insertion_point(field_list:assist_ranker.BucketizedWeights.weights)
  return weights_;
}
::google::protobuf::RepeatedField< float >*
BucketizedWeights::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.BucketizedWeights.weights)
  return &weights_;
}

// optional float default_weight = 3;
bool BucketizedWeights::has_default_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BucketizedWeights::set_has_default_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void BucketizedWeights::clear_has_default_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void BucketizedWeights::clear_default_weight() {
  default_weight_ = 0;
  clear_has_default_weight();
}
float BucketizedWeights::default_weight() const {
  // @@protoc_insertion_point(field_get:assist_ranker.BucketizedWeights.default_weight)
  return default_weight_;
}
void BucketizedWeights::set_default_weight(float value) {
  set_has_default_weight();
  default_weight_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.BucketizedWeights.default_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureWeight::kScalarFieldNumber;
const int FeatureWeight::kOneHotFieldNumber;
const int FeatureWeight::kSparseFieldNumber;
const int FeatureWeight::kBucketizedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureWeight::FeatureWeight()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_generic_5flogistic_5fregression_5fmodel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.FeatureWeight)
}
FeatureWeight::FeatureWeight(const FeatureWeight& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_feature_type();
  switch (from.feature_type_case()) {
    case kScalar: {
      set_scalar(from.scalar());
      break;
    }
    case kOneHot: {
      mutable_one_hot()->::assist_ranker::SparseWeights::MergeFrom(from.one_hot());
      break;
    }
    case kSparse: {
      mutable_sparse()->::assist_ranker::SparseWeights::MergeFrom(from.sparse());
      break;
    }
    case kBucketized: {
      mutable_bucketized()->::assist_ranker::BucketizedWeights::MergeFrom(from.bucketized());
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.FeatureWeight)
}

void FeatureWeight::SharedCtor() {
  _cached_size_ = 0;
  clear_has_feature_type();
}

FeatureWeight::~FeatureWeight() {
  // @@protoc_insertion_point(destructor:assist_ranker.FeatureWeight)
  SharedDtor();
}

void FeatureWeight::SharedDtor() {
  if (has_feature_type()) {
    clear_feature_type();
  }
}

void FeatureWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FeatureWeight& FeatureWeight::default_instance() {
  protobuf_generic_5flogistic_5fregression_5fmodel_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeatureWeight* FeatureWeight::New(::google::protobuf::Arena* arena) const {
  FeatureWeight* n = new FeatureWeight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureWeight::clear_feature_type() {
// @@protoc_insertion_point(one_of_clear_start:assist_ranker.FeatureWeight)
  switch (feature_type_case()) {
    case kScalar: {
      // No need to clear
      break;
    }
    case kOneHot: {
      delete feature_type_.one_hot_;
      break;
    }
    case kSparse: {
      delete feature_type_.sparse_;
      break;
    }
    case kBucketized: {
      delete feature_type_.bucketized_;
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURE_TYPE_NOT_SET;
}


void FeatureWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.FeatureWeight)
  clear_feature_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeatureWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.FeatureWeight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scalar = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          clear_feature_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_type_.scalar_)));
          set_has_scalar();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.SparseWeights one_hot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_one_hot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.SparseWeights sparse = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sparse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.BucketizedWeights bucketized = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bucketized()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.FeatureWeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.FeatureWeight)
  return false;
#undef DO_
}

void FeatureWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.FeatureWeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (feature_type_case()) {
    case kScalar:
      ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scalar(), output);
      break;
    case kOneHot:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        2, *feature_type_.one_hot_, output);
      break;
    case kSparse:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        3, *feature_type_.sparse_, output);
      break;
    case kBucketized:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        4, *feature_type_.bucketized_, output);
      break;
    default: ;
  }
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.FeatureWeight)
}

size_t FeatureWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.FeatureWeight)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  switch (feature_type_case()) {
    // optional float scalar = 1;
    case kScalar: {
      total_size += 1 + 4;
      break;
    }
    // optional .assist_ranker.SparseWeights one_hot = 2;
    case kOneHot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *feature_type_.one_hot_);
      break;
    }
    // optional .assist_ranker.SparseWeights sparse = 3;
    case kSparse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *feature_type_.sparse_);
      break;
    }
    // optional .assist_ranker.BucketizedWeights bucketized = 4;
    case kBucketized: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *feature_type_.bucketized_);
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureWeight::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FeatureWeight*>(&from));
}

void FeatureWeight::MergeFrom(const FeatureWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.FeatureWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.feature_type_case()) {
    case kScalar: {
      set_scalar(from.scalar());
      break;
    }
    case kOneHot: {
      mutable_one_hot()->::assist_ranker::SparseWeights::MergeFrom(from.one_hot());
      break;
    }
    case kSparse: {
      mutable_sparse()->::assist_ranker::SparseWeights::MergeFrom(from.sparse());
      break;
    }
    case kBucketized: {
      mutable_bucketized()->::assist_ranker::BucketizedWeights::MergeFrom(from.bucketized());
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
}

void FeatureWeight::CopyFrom(const FeatureWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.FeatureWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureWeight::IsInitialized() const {
  return true;
}

void FeatureWeight::Swap(FeatureWeight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureWeight::InternalSwap(FeatureWeight* other) {
  std::swap(feature_type_, other->feature_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FeatureWeight::GetTypeName() const {
  return "assist_ranker.FeatureWeight";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureWeight

// optional float scalar = 1;
bool FeatureWeight::has_scalar() const {
  return feature_type_case() == kScalar;
}
void FeatureWeight::set_has_scalar() {
  _oneof_case_[0] = kScalar;
}
void FeatureWeight::clear_scalar() {
  if (has_scalar()) {
    feature_type_.scalar_ = 0;
    clear_has_feature_type();
  }
}
float FeatureWeight::scalar() const {
  // @@protoc_insertion_point(field_get:assist_ranker.FeatureWeight.scalar)
  if (has_scalar()) {
    return feature_type_.scalar_;
  }
  return 0;
}
void FeatureWeight::set_scalar(float value) {
  if (!has_scalar()) {
    clear_feature_type();
    set_has_scalar();
  }
  feature_type_.scalar_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.FeatureWeight.scalar)
}

// optional .assist_ranker.SparseWeights one_hot = 2;
bool FeatureWeight::has_one_hot() const {
  return feature_type_case() == kOneHot;
}
void FeatureWeight::set_has_one_hot() {
  _oneof_case_[0] = kOneHot;
}
void FeatureWeight::clear_one_hot() {
  if (has_one_hot()) {
    delete feature_type_.one_hot_;
    clear_has_feature_type();
  }
}
 const ::assist_ranker::SparseWeights& FeatureWeight::one_hot() const {
  // @@protoc_insertion_point(field_get:assist_ranker.FeatureWeight.one_hot)
  return has_one_hot()
      ? *feature_type_.one_hot_
      : ::assist_ranker::SparseWeights::default_instance();
}
::assist_ranker::SparseWeights* FeatureWeight::mutable_one_hot() {
  if (!has_one_hot()) {
    clear_feature_type();
    set_has_one_hot();
    feature_type_.one_hot_ = new ::assist_ranker::SparseWeights;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.FeatureWeight.one_hot)
  return feature_type_.one_hot_;
}
::assist_ranker::SparseWeights* FeatureWeight::release_one_hot() {
  // @@protoc_insertion_point(field_release:assist_ranker.FeatureWeight.one_hot)
  if (has_one_hot()) {
    clear_has_feature_type();
    ::assist_ranker::SparseWeights* temp = feature_type_.one_hot_;
    feature_type_.one_hot_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FeatureWeight::set_allocated_one_hot(::assist_ranker::SparseWeights* one_hot) {
  clear_feature_type();
  if (one_hot) {
    set_has_one_hot();
    feature_type_.one_hot_ = one_hot;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.FeatureWeight.one_hot)
}

// optional .assist_ranker.SparseWeights sparse = 3;
bool FeatureWeight::has_sparse() const {
  return feature_type_case() == kSparse;
}
void FeatureWeight::set_has_sparse() {
  _oneof_case_[0] = kSparse;
}
void FeatureWeight::clear_sparse() {
  if (has_sparse()) {
    delete feature_type_.sparse_;
    clear_has_feature_type();
  }
}
 const ::assist_ranker::SparseWeights& FeatureWeight::sparse() const {
  // @@protoc_insertion_point(field_get:assist_ranker.FeatureWeight.sparse)
  return has_sparse()
      ? *feature_type_.sparse_
      : ::assist_ranker::SparseWeights::default_instance();
}
::assist_ranker::SparseWeights* FeatureWeight::mutable_sparse() {
  if (!has_sparse()) {
    clear_feature_type();
    set_has_sparse();
    feature_type_.sparse_ = new ::assist_ranker::SparseWeights;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.FeatureWeight.sparse)
  return feature_type_.sparse_;
}
::assist_ranker::SparseWeights* FeatureWeight::release_sparse() {
  // @@protoc_insertion_point(field_release:assist_ranker.FeatureWeight.sparse)
  if (has_sparse()) {
    clear_has_feature_type();
    ::assist_ranker::SparseWeights* temp = feature_type_.sparse_;
    feature_type_.sparse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FeatureWeight::set_allocated_sparse(::assist_ranker::SparseWeights* sparse) {
  clear_feature_type();
  if (sparse) {
    set_has_sparse();
    feature_type_.sparse_ = sparse;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.FeatureWeight.sparse)
}

// optional .assist_ranker.BucketizedWeights bucketized = 4;
bool FeatureWeight::has_bucketized() const {
  return feature_type_case() == kBucketized;
}
void FeatureWeight::set_has_bucketized() {
  _oneof_case_[0] = kBucketized;
}
void FeatureWeight::clear_bucketized() {
  if (has_bucketized()) {
    delete feature_type_.bucketized_;
    clear_has_feature_type();
  }
}
 const ::assist_ranker::BucketizedWeights& FeatureWeight::bucketized() const {
  // @@protoc_insertion_point(field_get:assist_ranker.FeatureWeight.bucketized)
  return has_bucketized()
      ? *feature_type_.bucketized_
      : ::assist_ranker::BucketizedWeights::default_instance();
}
::assist_ranker::BucketizedWeights* FeatureWeight::mutable_bucketized() {
  if (!has_bucketized()) {
    clear_feature_type();
    set_has_bucketized();
    feature_type_.bucketized_ = new ::assist_ranker::BucketizedWeights;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.FeatureWeight.bucketized)
  return feature_type_.bucketized_;
}
::assist_ranker::BucketizedWeights* FeatureWeight::release_bucketized() {
  // @@protoc_insertion_point(field_release:assist_ranker.FeatureWeight.bucketized)
  if (has_bucketized()) {
    clear_has_feature_type();
    ::assist_ranker::BucketizedWeights* temp = feature_type_.bucketized_;
    feature_type_.bucketized_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FeatureWeight::set_allocated_bucketized(::assist_ranker::BucketizedWeights* bucketized) {
  clear_feature_type();
  if (bucketized) {
    set_has_bucketized();
    feature_type_.bucketized_ = bucketized;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.FeatureWeight.bucketized)
}

bool FeatureWeight::has_feature_type() const {
  return feature_type_case() != FEATURE_TYPE_NOT_SET;
}
void FeatureWeight::clear_has_feature_type() {
  _oneof_case_[0] = FEATURE_TYPE_NOT_SET;
}
FeatureWeight::FeatureTypeCase FeatureWeight::feature_type_case() const {
  return FeatureWeight::FeatureTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericLogisticRegressionModel::kThresholdFieldNumber;
const int GenericLogisticRegressionModel::kBiasFieldNumber;
const int GenericLogisticRegressionModel::kWeightsFieldNumber;
const int GenericLogisticRegressionModel::kIsPreprocessedModelFieldNumber;
const int GenericLogisticRegressionModel::kFullnameWeightsFieldNumber;
const int GenericLogisticRegressionModel::kPreprocessorConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericLogisticRegressionModel::GenericLogisticRegressionModel()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_generic_5flogistic_5fregression_5fmodel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.GenericLogisticRegressionModel)
}
GenericLogisticRegressionModel::GenericLogisticRegressionModel(const GenericLogisticRegressionModel& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weights_.MergeFrom(from.weights_);
  fullname_weights_.MergeFrom(from.fullname_weights_);
  if (from.has_preprocessor_config()) {
    preprocessor_config_ = new ::assist_ranker::ExamplePreprocessorConfig(*from.preprocessor_config_);
  } else {
    preprocessor_config_ = NULL;
  }
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_preprocessed_model_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(is_preprocessed_model_));
  // @@protoc_insertion_point(copy_constructor:assist_ranker.GenericLogisticRegressionModel)
}

void GenericLogisticRegressionModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&preprocessor_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_preprocessed_model_) -
      reinterpret_cast<char*>(&preprocessor_config_)) + sizeof(is_preprocessed_model_));
}

GenericLogisticRegressionModel::~GenericLogisticRegressionModel() {
  // @@protoc_insertion_point(destructor:assist_ranker.GenericLogisticRegressionModel)
  SharedDtor();
}

void GenericLogisticRegressionModel::SharedDtor() {
  if (this != internal_default_instance()) {
    delete preprocessor_config_;
  }
}

void GenericLogisticRegressionModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GenericLogisticRegressionModel& GenericLogisticRegressionModel::default_instance() {
  protobuf_generic_5flogistic_5fregression_5fmodel_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenericLogisticRegressionModel* GenericLogisticRegressionModel::New(::google::protobuf::Arena* arena) const {
  GenericLogisticRegressionModel* n = new GenericLogisticRegressionModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericLogisticRegressionModel::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.GenericLogisticRegressionModel)
  weights_.Clear();
  fullname_weights_.Clear();
  if (has_preprocessor_config()) {
    GOOGLE_DCHECK(preprocessor_config_ != NULL);
    preprocessor_config_->::assist_ranker::ExamplePreprocessorConfig::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_preprocessed_model_) -
        reinterpret_cast<char*>(&threshold_)) + sizeof(is_preprocessed_model_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GenericLogisticRegressionModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.GenericLogisticRegressionModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float threshold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_bias();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .assist_ranker.FeatureWeight> weights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          GenericLogisticRegressionModel_WeightsEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              GenericLogisticRegressionModel_WeightsEntry,
              ::std::string, ::assist_ranker::FeatureWeight,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::assist_ranker::FeatureWeight > > parser(&weights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_preprocessed_model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_preprocessed_model();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_preprocessed_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> fullname_weights = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          GenericLogisticRegressionModel_FullnameWeightsEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              GenericLogisticRegressionModel_FullnameWeightsEntry,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&fullname_weights_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preprocessor_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.GenericLogisticRegressionModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.GenericLogisticRegressionModel)
  return false;
#undef DO_
}

void GenericLogisticRegressionModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.GenericLogisticRegressionModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->threshold(), output);
  }

  // optional float bias = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bias(), output);
  }

  // map<string, .assist_ranker.FeatureWeight> weights = 3;
  if (!this->weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::assist_ranker::FeatureWeight >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->weights().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::assist_ranker::FeatureWeight >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::assist_ranker::FeatureWeight >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GenericLogisticRegressionModel_WeightsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GenericLogisticRegressionModel_WeightsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::assist_ranker::FeatureWeight >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it) {
        entry.reset(weights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional bool is_preprocessed_model = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_preprocessed_model(), output);
  }

  // map<string, float> fullname_weights = 5;
  if (!this->fullname_weights().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->fullname_weights().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fullname_weights().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->fullname_weights().begin();
          it != this->fullname_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GenericLogisticRegressionModel_FullnameWeightsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fullname_weights_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GenericLogisticRegressionModel_FullnameWeightsEntry> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->fullname_weights().begin();
          it != this->fullname_weights().end(); ++it) {
        entry.reset(fullname_weights_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->preprocessor_config_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.GenericLogisticRegressionModel)
}

size_t GenericLogisticRegressionModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.GenericLogisticRegressionModel)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // map<string, .assist_ranker.FeatureWeight> weights = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->weights_size());
  {
    ::google::protobuf::scoped_ptr<GenericLogisticRegressionModel_WeightsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::assist_ranker::FeatureWeight >::const_iterator
        it = this->weights().begin();
        it != this->weights().end(); ++it) {
      entry.reset(weights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, float> fullname_weights = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fullname_weights_size());
  {
    ::google::protobuf::scoped_ptr<GenericLogisticRegressionModel_FullnameWeightsEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->fullname_weights().begin();
        it != this->fullname_weights().end(); ++it) {
      entry.reset(fullname_weights_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
    if (has_preprocessor_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preprocessor_config_);
    }

    // optional float threshold = 1;
    if (has_threshold()) {
      total_size += 1 + 4;
    }

    // optional float bias = 2;
    if (has_bias()) {
      total_size += 1 + 4;
    }

    // optional bool is_preprocessed_model = 4;
    if (has_is_preprocessed_model()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericLogisticRegressionModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GenericLogisticRegressionModel*>(&from));
}

void GenericLogisticRegressionModel::MergeFrom(const GenericLogisticRegressionModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.GenericLogisticRegressionModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  fullname_weights_.MergeFrom(from.fullname_weights_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_preprocessor_config()->::assist_ranker::ExamplePreprocessorConfig::MergeFrom(from.preprocessor_config());
    }
    if (cached_has_bits & 0x00000002u) {
      threshold_ = from.threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      bias_ = from.bias_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_preprocessed_model_ = from.is_preprocessed_model_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericLogisticRegressionModel::CopyFrom(const GenericLogisticRegressionModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.GenericLogisticRegressionModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericLogisticRegressionModel::IsInitialized() const {
  return true;
}

void GenericLogisticRegressionModel::Swap(GenericLogisticRegressionModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericLogisticRegressionModel::InternalSwap(GenericLogisticRegressionModel* other) {
  weights_.Swap(&other->weights_);
  fullname_weights_.Swap(&other->fullname_weights_);
  std::swap(preprocessor_config_, other->preprocessor_config_);
  std::swap(threshold_, other->threshold_);
  std::swap(bias_, other->bias_);
  std::swap(is_preprocessed_model_, other->is_preprocessed_model_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GenericLogisticRegressionModel::GetTypeName() const {
  return "assist_ranker.GenericLogisticRegressionModel";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericLogisticRegressionModel

// optional float threshold = 1;
bool GenericLogisticRegressionModel::has_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GenericLogisticRegressionModel::set_has_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
void GenericLogisticRegressionModel::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
void GenericLogisticRegressionModel::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
float GenericLogisticRegressionModel::threshold() const {
  // @@protoc_insertion_point(field_get:assist_ranker.GenericLogisticRegressionModel.threshold)
  return threshold_;
}
void GenericLogisticRegressionModel::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.GenericLogisticRegressionModel.threshold)
}

// optional float bias = 2;
bool GenericLogisticRegressionModel::has_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GenericLogisticRegressionModel::set_has_bias() {
  _has_bits_[0] |= 0x00000004u;
}
void GenericLogisticRegressionModel::clear_has_bias() {
  _has_bits_[0] &= ~0x00000004u;
}
void GenericLogisticRegressionModel::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
float GenericLogisticRegressionModel::bias() const {
  // @@protoc_insertion_point(field_get:assist_ranker.GenericLogisticRegressionModel.bias)
  return bias_;
}
void GenericLogisticRegressionModel::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.GenericLogisticRegressionModel.bias)
}

// map<string, .assist_ranker.FeatureWeight> weights = 3;
int GenericLogisticRegressionModel::weights_size() const {
  return weights_.size();
}
void GenericLogisticRegressionModel::clear_weights() {
  weights_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::assist_ranker::FeatureWeight >&
GenericLogisticRegressionModel::weights() const {
  // @@protoc_insertion_point(field_map:assist_ranker.GenericLogisticRegressionModel.weights)
  return weights_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::assist_ranker::FeatureWeight >*
GenericLogisticRegressionModel::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_map:assist_ranker.GenericLogisticRegressionModel.weights)
  return weights_.MutableMap();
}

// optional bool is_preprocessed_model = 4;
bool GenericLogisticRegressionModel::has_is_preprocessed_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GenericLogisticRegressionModel::set_has_is_preprocessed_model() {
  _has_bits_[0] |= 0x00000008u;
}
void GenericLogisticRegressionModel::clear_has_is_preprocessed_model() {
  _has_bits_[0] &= ~0x00000008u;
}
void GenericLogisticRegressionModel::clear_is_preprocessed_model() {
  is_preprocessed_model_ = false;
  clear_has_is_preprocessed_model();
}
bool GenericLogisticRegressionModel::is_preprocessed_model() const {
  // @@protoc_insertion_point(field_get:assist_ranker.GenericLogisticRegressionModel.is_preprocessed_model)
  return is_preprocessed_model_;
}
void GenericLogisticRegressionModel::set_is_preprocessed_model(bool value) {
  set_has_is_preprocessed_model();
  is_preprocessed_model_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.GenericLogisticRegressionModel.is_preprocessed_model)
}

// map<string, float> fullname_weights = 5;
int GenericLogisticRegressionModel::fullname_weights_size() const {
  return fullname_weights_.size();
}
void GenericLogisticRegressionModel::clear_fullname_weights() {
  fullname_weights_.Clear();
}
 const ::google::protobuf::Map< ::std::string, float >&
GenericLogisticRegressionModel::fullname_weights() const {
  // @@protoc_insertion_point(field_map:assist_ranker.GenericLogisticRegressionModel.fullname_weights)
  return fullname_weights_.GetMap();
}
 ::google::protobuf::Map< ::std::string, float >*
GenericLogisticRegressionModel::mutable_fullname_weights() {
  // @@protoc_insertion_point(field_mutable_map:assist_ranker.GenericLogisticRegressionModel.fullname_weights)
  return fullname_weights_.MutableMap();
}

// optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
bool GenericLogisticRegressionModel::has_preprocessor_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GenericLogisticRegressionModel::set_has_preprocessor_config() {
  _has_bits_[0] |= 0x00000001u;
}
void GenericLogisticRegressionModel::clear_has_preprocessor_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void GenericLogisticRegressionModel::clear_preprocessor_config() {
  if (preprocessor_config_ != NULL) preprocessor_config_->::assist_ranker::ExamplePreprocessorConfig::Clear();
  clear_has_preprocessor_config();
}
const ::assist_ranker::ExamplePreprocessorConfig& GenericLogisticRegressionModel::preprocessor_config() const {
  // @@protoc_insertion_point(field_get:assist_ranker.GenericLogisticRegressionModel.preprocessor_config)
  return preprocessor_config_ != NULL ? *preprocessor_config_
                         : *::assist_ranker::ExamplePreprocessorConfig::internal_default_instance();
}
::assist_ranker::ExamplePreprocessorConfig* GenericLogisticRegressionModel::mutable_preprocessor_config() {
  set_has_preprocessor_config();
  if (preprocessor_config_ == NULL) {
    preprocessor_config_ = new ::assist_ranker::ExamplePreprocessorConfig;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.GenericLogisticRegressionModel.preprocessor_config)
  return preprocessor_config_;
}
::assist_ranker::ExamplePreprocessorConfig* GenericLogisticRegressionModel::release_preprocessor_config() {
  // @@protoc_insertion_point(field_release:assist_ranker.GenericLogisticRegressionModel.preprocessor_config)
  clear_has_preprocessor_config();
  ::assist_ranker::ExamplePreprocessorConfig* temp = preprocessor_config_;
  preprocessor_config_ = NULL;
  return temp;
}
void GenericLogisticRegressionModel::set_allocated_preprocessor_config(::assist_ranker::ExamplePreprocessorConfig* preprocessor_config) {
  delete preprocessor_config_;
  preprocessor_config_ = preprocessor_config;
  if (preprocessor_config) {
    set_has_preprocessor_config();
  } else {
    clear_has_preprocessor_config();
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.GenericLogisticRegressionModel.preprocessor_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace assist_ranker

// @@protoc_insertion_point(global_scope)
