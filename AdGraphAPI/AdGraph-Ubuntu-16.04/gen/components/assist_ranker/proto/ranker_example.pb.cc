// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ranker_example.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ranker_example.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace assist_ranker {
class StringListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StringList> {
} _StringList_default_instance_;
class FloatListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FloatList> {
} _FloatList_default_instance_;
class FeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Feature> {
  public:
  bool bool_value_;
  float float_value_;
  ::google::protobuf::int32 int32_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  const ::assist_ranker::StringList* string_list_;
  const ::assist_ranker::FloatList* float_list_;
} _Feature_default_instance_;
class RankerExample_FeaturesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RankerExample::RankerExample_FeaturesEntry> {
} _RankerExample_FeaturesEntry_default_instance_;
class RankerExampleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RankerExample> {
} _RankerExample_default_instance_;

namespace protobuf_ranker_5fexample_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _StringList_default_instance_.Shutdown();
  _FloatList_default_instance_.Shutdown();
  _Feature_default_instance_.Shutdown();
  _RankerExample_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _StringList_default_instance_.DefaultConstruct();
  _FloatList_default_instance_.DefaultConstruct();
  _Feature_default_instance_.DefaultConstruct();
  _RankerExample_FeaturesEntry_default_instance_.DefaultConstruct();
  _RankerExample_default_instance_.DefaultConstruct();
  _RankerExample_FeaturesEntry_default_instance_.get_mutable()->set_default_instance(_RankerExample_FeaturesEntry_default_instance_.get_mutable());
  _RankerExample_FeaturesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _RankerExample_default_instance_.get_mutable()->target_ = const_cast< ::assist_ranker::Feature*>(
      ::assist_ranker::Feature::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_ranker_5fexample_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringList::kStringValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringList::StringList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ranker_5fexample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.StringList)
}
StringList::StringList(const StringList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      string_value_(from.string_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:assist_ranker.StringList)
}

void StringList::SharedCtor() {
  _cached_size_ = 0;
}

StringList::~StringList() {
  // @@protoc_insertion_point(destructor:assist_ranker.StringList)
  SharedDtor();
}

void StringList::SharedDtor() {
}

void StringList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StringList& StringList::default_instance() {
  protobuf_ranker_5fexample_2eproto::InitDefaults();
  return *internal_default_instance();
}

StringList* StringList::New(::google::protobuf::Arena* arena) const {
  StringList* n = new StringList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringList::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.StringList)
  string_value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StringList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.StringList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes string_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_string_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.StringList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.StringList)
  return false;
#undef DO_
}

void StringList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.StringList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes string_value = 1;
  for (int i = 0, n = this->string_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->string_value(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.StringList)
}

size_t StringList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.StringList)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated bytes string_value = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_value_size());
  for (int i = 0, n = this->string_value_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->string_value(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StringList*>(&from));
}

void StringList::MergeFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.StringList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_value_.MergeFrom(from.string_value_);
}

void StringList::CopyFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.StringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringList::IsInitialized() const {
  return true;
}

void StringList::Swap(StringList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringList::InternalSwap(StringList* other) {
  string_value_.InternalSwap(&other->string_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StringList::GetTypeName() const {
  return "assist_ranker.StringList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringList

// repeated bytes string_value = 1;
int StringList::string_value_size() const {
  return string_value_.size();
}
void StringList::clear_string_value() {
  string_value_.Clear();
}
const ::std::string& StringList::string_value(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.StringList.string_value)
  return string_value_.Get(index);
}
::std::string* StringList::mutable_string_value(int index) {
  // @@protoc_insertion_point(field_mutable:assist_ranker.StringList.string_value)
  return string_value_.Mutable(index);
}
void StringList::set_string_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:assist_ranker.StringList.string_value)
  string_value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void StringList::set_string_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:assist_ranker.StringList.string_value)
  string_value_.Mutable(index)->assign(std::move(value));
}
#endif
void StringList::set_string_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:assist_ranker.StringList.string_value)
}
void StringList::set_string_value(int index, const void* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:assist_ranker.StringList.string_value)
}
::std::string* StringList::add_string_value() {
  // @@protoc_insertion_point(field_add_mutable:assist_ranker.StringList.string_value)
  return string_value_.Add();
}
void StringList::add_string_value(const ::std::string& value) {
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:assist_ranker.StringList.string_value)
}
#if LANG_CXX11
void StringList::add_string_value(::std::string&& value) {
  string_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:assist_ranker.StringList.string_value)
}
#endif
void StringList::add_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:assist_ranker.StringList.string_value)
}
void StringList::add_string_value(const void* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:assist_ranker.StringList.string_value)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringList::string_value() const {
  // @@protoc_insertion_point(field_list:assist_ranker.StringList.string_value)
  return string_value_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StringList::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.StringList.string_value)
  return &string_value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatList::kFloatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatList::FloatList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ranker_5fexample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.FloatList)
}
FloatList::FloatList(const FloatList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      float_value_(from.float_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:assist_ranker.FloatList)
}

void FloatList::SharedCtor() {
  _cached_size_ = 0;
}

FloatList::~FloatList() {
  // @@protoc_insertion_point(destructor:assist_ranker.FloatList)
  SharedDtor();
}

void FloatList::SharedDtor() {
}

void FloatList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FloatList& FloatList::default_instance() {
  protobuf_ranker_5fexample_2eproto::InitDefaults();
  return *internal_default_instance();
}

FloatList* FloatList::New(::google::protobuf::Arena* arena) const {
  FloatList* n = new FloatList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.FloatList)
  float_value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FloatList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.FloatList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float float_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_float_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.FloatList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.FloatList)
  return false;
#undef DO_
}

void FloatList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.FloatList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float float_value = 1;
  for (int i = 0, n = this->float_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->float_value(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.FloatList)
}

size_t FloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.FloatList)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated float float_value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->float_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->float_value_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FloatList*>(&from));
}

void FloatList::MergeFrom(const FloatList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.FloatList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_value_.MergeFrom(from.float_value_);
}

void FloatList::CopyFrom(const FloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.FloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatList::IsInitialized() const {
  return true;
}

void FloatList::Swap(FloatList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatList::InternalSwap(FloatList* other) {
  float_value_.InternalSwap(&other->float_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FloatList::GetTypeName() const {
  return "assist_ranker.FloatList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatList

// repeated float float_value = 1;
int FloatList::float_value_size() const {
  return float_value_.size();
}
void FloatList::clear_float_value() {
  float_value_.Clear();
}
float FloatList::float_value(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.FloatList.float_value)
  return float_value_.Get(index);
}
void FloatList::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:assist_ranker.FloatList.float_value)
}
void FloatList::add_float_value(float value) {
  float_value_.Add(value);
  // @@protoc_insertion_point(field_add:assist_ranker.FloatList.float_value)
}
const ::google::protobuf::RepeatedField< float >&
FloatList::float_value() const {
  // @@protoc_insertion_point(field_list:assist_ranker.FloatList.float_value)
  return float_value_;
}
::google::protobuf::RepeatedField< float >*
FloatList::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.FloatList.float_value)
  return &float_value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kBoolValueFieldNumber;
const int Feature::kFloatValueFieldNumber;
const int Feature::kInt32ValueFieldNumber;
const int Feature::kStringValueFieldNumber;
const int Feature::kStringListFieldNumber;
const int Feature::kFloatListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ranker_5fexample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.Feature)
}
Feature::Feature(const Feature& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_feature_type();
  switch (from.feature_type_case()) {
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kInt32Value: {
      set_int32_value(from.int32_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kStringList: {
      mutable_string_list()->::assist_ranker::StringList::MergeFrom(from.string_list());
      break;
    }
    case kFloatList: {
      mutable_float_list()->::assist_ranker::FloatList::MergeFrom(from.float_list());
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.Feature)
}

void Feature::SharedCtor() {
  _cached_size_ = 0;
  clear_has_feature_type();
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:assist_ranker.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  if (has_feature_type()) {
    clear_feature_type();
  }
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Feature& Feature::default_instance() {
  protobuf_ranker_5fexample_2eproto::InitDefaults();
  return *internal_default_instance();
}

Feature* Feature::New(::google::protobuf::Arena* arena) const {
  Feature* n = new Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feature::clear_feature_type() {
// @@protoc_insertion_point(one_of_clear_start:assist_ranker.Feature)
  switch (feature_type_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kInt32Value: {
      // No need to clear
      break;
    }
    case kStringValue: {
      feature_type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kStringList: {
      delete feature_type_.string_list_;
      break;
    }
    case kFloatList: {
      delete feature_type_.float_list_;
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURE_TYPE_NOT_SET;
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.Feature)
  clear_feature_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bool_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          clear_feature_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_type_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          clear_feature_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_type_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 int32_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          clear_feature_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_type_.int32_value_)));
          set_has_int32_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes string_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_string_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.StringList string_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.FloatList float_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (feature_type_case()) {
    case kBoolValue:
      ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bool_value(), output);
      break;
    case kFloatValue:
      ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_value(), output);
      break;
    case kInt32Value:
      ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int32_value(), output);
      break;
    case kStringValue:
      ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        4, this->string_value(), output);
      break;
    case kStringList:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        5, *feature_type_.string_list_, output);
      break;
    case kFloatList:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        6, *feature_type_.float_list_, output);
      break;
    default: ;
  }
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.Feature)
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.Feature)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  switch (feature_type_case()) {
    // optional bool bool_value = 1;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // optional float float_value = 2;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // optional int32 int32_value = 3;
    case kInt32Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_value());
      break;
    }
    // optional bytes string_value = 4;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->string_value());
      break;
    }
    // optional .assist_ranker.StringList string_list = 5;
    case kStringList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *feature_type_.string_list_);
      break;
    }
    // optional .assist_ranker.FloatList float_list = 6;
    case kFloatList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *feature_type_.float_list_);
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Feature*>(&from));
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.feature_type_case()) {
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kInt32Value: {
      set_int32_value(from.int32_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kStringList: {
      mutable_string_list()->::assist_ranker::StringList::MergeFrom(from.string_list());
      break;
    }
    case kFloatList: {
      mutable_float_list()->::assist_ranker::FloatList::MergeFrom(from.float_list());
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  std::swap(feature_type_, other->feature_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Feature::GetTypeName() const {
  return "assist_ranker.Feature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// optional bool bool_value = 1;
bool Feature::has_bool_value() const {
  return feature_type_case() == kBoolValue;
}
void Feature::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
void Feature::clear_bool_value() {
  if (has_bool_value()) {
    feature_type_.bool_value_ = false;
    clear_has_feature_type();
  }
}
bool Feature::bool_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.bool_value)
  if (has_bool_value()) {
    return feature_type_.bool_value_;
  }
  return false;
}
void Feature::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_feature_type();
    set_has_bool_value();
  }
  feature_type_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.bool_value)
}

// optional float float_value = 2;
bool Feature::has_float_value() const {
  return feature_type_case() == kFloatValue;
}
void Feature::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
void Feature::clear_float_value() {
  if (has_float_value()) {
    feature_type_.float_value_ = 0;
    clear_has_feature_type();
  }
}
float Feature::float_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.float_value)
  if (has_float_value()) {
    return feature_type_.float_value_;
  }
  return 0;
}
void Feature::set_float_value(float value) {
  if (!has_float_value()) {
    clear_feature_type();
    set_has_float_value();
  }
  feature_type_.float_value_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.float_value)
}

// optional int32 int32_value = 3;
bool Feature::has_int32_value() const {
  return feature_type_case() == kInt32Value;
}
void Feature::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
void Feature::clear_int32_value() {
  if (has_int32_value()) {
    feature_type_.int32_value_ = 0;
    clear_has_feature_type();
  }
}
::google::protobuf::int32 Feature::int32_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.int32_value)
  if (has_int32_value()) {
    return feature_type_.int32_value_;
  }
  return 0;
}
void Feature::set_int32_value(::google::protobuf::int32 value) {
  if (!has_int32_value()) {
    clear_feature_type();
    set_has_int32_value();
  }
  feature_type_.int32_value_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.int32_value)
}

// optional bytes string_value = 4;
bool Feature::has_string_value() const {
  return feature_type_case() == kStringValue;
}
void Feature::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
void Feature::clear_string_value() {
  if (has_string_value()) {
    feature_type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_feature_type();
  }
}
const ::std::string& Feature::string_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.string_value)
  if (has_string_value()) {
    return feature_type_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Feature::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.string_value)
  if (!has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  feature_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.string_value)
}
#if LANG_CXX11
void Feature::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.string_value)
  if (!has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  feature_type_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assist_ranker.Feature.string_value)
}
#endif
void Feature::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  feature_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assist_ranker.Feature.string_value)
}
void Feature::set_string_value(const void* value, size_t size) {
  if (!has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  feature_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assist_ranker.Feature.string_value)
}
::std::string* Feature::mutable_string_value() {
  if (!has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.Feature.string_value)
  return feature_type_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Feature::release_string_value() {
  // @@protoc_insertion_point(field_release:assist_ranker.Feature.string_value)
  if (has_string_value()) {
    clear_has_feature_type();
    return feature_type_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Feature::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_feature_type();
  if (string_value != NULL) {
    set_has_string_value();
    feature_type_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.Feature.string_value)
}

// optional .assist_ranker.StringList string_list = 5;
bool Feature::has_string_list() const {
  return feature_type_case() == kStringList;
}
void Feature::set_has_string_list() {
  _oneof_case_[0] = kStringList;
}
void Feature::clear_string_list() {
  if (has_string_list()) {
    delete feature_type_.string_list_;
    clear_has_feature_type();
  }
}
 const ::assist_ranker::StringList& Feature::string_list() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.string_list)
  return has_string_list()
      ? *feature_type_.string_list_
      : ::assist_ranker::StringList::default_instance();
}
::assist_ranker::StringList* Feature::mutable_string_list() {
  if (!has_string_list()) {
    clear_feature_type();
    set_has_string_list();
    feature_type_.string_list_ = new ::assist_ranker::StringList;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.Feature.string_list)
  return feature_type_.string_list_;
}
::assist_ranker::StringList* Feature::release_string_list() {
  // @@protoc_insertion_point(field_release:assist_ranker.Feature.string_list)
  if (has_string_list()) {
    clear_has_feature_type();
    ::assist_ranker::StringList* temp = feature_type_.string_list_;
    feature_type_.string_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Feature::set_allocated_string_list(::assist_ranker::StringList* string_list) {
  clear_feature_type();
  if (string_list) {
    set_has_string_list();
    feature_type_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.Feature.string_list)
}

// optional .assist_ranker.FloatList float_list = 6;
bool Feature::has_float_list() const {
  return feature_type_case() == kFloatList;
}
void Feature::set_has_float_list() {
  _oneof_case_[0] = kFloatList;
}
void Feature::clear_float_list() {
  if (has_float_list()) {
    delete feature_type_.float_list_;
    clear_has_feature_type();
  }
}
 const ::assist_ranker::FloatList& Feature::float_list() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.float_list)
  return has_float_list()
      ? *feature_type_.float_list_
      : ::assist_ranker::FloatList::default_instance();
}
::assist_ranker::FloatList* Feature::mutable_float_list() {
  if (!has_float_list()) {
    clear_feature_type();
    set_has_float_list();
    feature_type_.float_list_ = new ::assist_ranker::FloatList;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.Feature.float_list)
  return feature_type_.float_list_;
}
::assist_ranker::FloatList* Feature::release_float_list() {
  // @@protoc_insertion_point(field_release:assist_ranker.Feature.float_list)
  if (has_float_list()) {
    clear_has_feature_type();
    ::assist_ranker::FloatList* temp = feature_type_.float_list_;
    feature_type_.float_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Feature::set_allocated_float_list(::assist_ranker::FloatList* float_list) {
  clear_feature_type();
  if (float_list) {
    set_has_float_list();
    feature_type_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.Feature.float_list)
}

bool Feature::has_feature_type() const {
  return feature_type_case() != FEATURE_TYPE_NOT_SET;
}
void Feature::clear_has_feature_type() {
  _oneof_case_[0] = FEATURE_TYPE_NOT_SET;
}
Feature::FeatureTypeCase Feature::feature_type_case() const {
  return Feature::FeatureTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankerExample::kFeaturesFieldNumber;
const int RankerExample::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankerExample::RankerExample()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ranker_5fexample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.RankerExample)
}
RankerExample::RankerExample(const RankerExample& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  if (from.has_target()) {
    target_ = new ::assist_ranker::Feature(*from.target_);
  } else {
    target_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.RankerExample)
}

void RankerExample::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
}

RankerExample::~RankerExample() {
  // @@protoc_insertion_point(destructor:assist_ranker.RankerExample)
  SharedDtor();
}

void RankerExample::SharedDtor() {
  if (this != internal_default_instance()) {
    delete target_;
  }
}

void RankerExample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankerExample& RankerExample::default_instance() {
  protobuf_ranker_5fexample_2eproto::InitDefaults();
  return *internal_default_instance();
}

RankerExample* RankerExample::New(::google::protobuf::Arena* arena) const {
  RankerExample* n = new RankerExample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankerExample::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.RankerExample)
  features_.Clear();
  if (has_target()) {
    GOOGLE_DCHECK(target_ != NULL);
    target_->::assist_ranker::Feature::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankerExample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.RankerExample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .assist_ranker.Feature> features = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          RankerExample_FeaturesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              RankerExample_FeaturesEntry,
              ::std::string, ::assist_ranker::Feature,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::assist_ranker::Feature > > parser(&features_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.Feature target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.RankerExample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.RankerExample)
  return false;
#undef DO_
}

void RankerExample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.RankerExample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .assist_ranker.Feature> features = 1;
  if (!this->features().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->features().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->features().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<RankerExample_FeaturesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(features_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RankerExample_FeaturesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it) {
        entry.reset(features_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional .assist_ranker.Feature target = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->target_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.RankerExample)
}

size_t RankerExample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.RankerExample)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // map<string, .assist_ranker.Feature> features = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->features_size());
  {
    ::google::protobuf::scoped_ptr<RankerExample_FeaturesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >::const_iterator
        it = this->features().begin();
        it != this->features().end(); ++it) {
      entry.reset(features_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // optional .assist_ranker.Feature target = 2;
  if (has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankerExample::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankerExample*>(&from));
}

void RankerExample::MergeFrom(const RankerExample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.RankerExample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.has_target()) {
    mutable_target()->::assist_ranker::Feature::MergeFrom(from.target());
  }
}

void RankerExample::CopyFrom(const RankerExample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.RankerExample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankerExample::IsInitialized() const {
  return true;
}

void RankerExample::Swap(RankerExample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankerExample::InternalSwap(RankerExample* other) {
  features_.Swap(&other->features_);
  std::swap(target_, other->target_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RankerExample::GetTypeName() const {
  return "assist_ranker.RankerExample";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankerExample

// map<string, .assist_ranker.Feature> features = 1;
int RankerExample::features_size() const {
  return features_.size();
}
void RankerExample::clear_features() {
  features_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >&
RankerExample::features() const {
  // @@protoc_insertion_point(field_map:assist_ranker.RankerExample.features)
  return features_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >*
RankerExample::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:assist_ranker.RankerExample.features)
  return features_.MutableMap();
}

// optional .assist_ranker.Feature target = 2;
bool RankerExample::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RankerExample::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
void RankerExample::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void RankerExample::clear_target() {
  if (target_ != NULL) target_->::assist_ranker::Feature::Clear();
  clear_has_target();
}
const ::assist_ranker::Feature& RankerExample::target() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerExample.target)
  return target_ != NULL ? *target_
                         : *::assist_ranker::Feature::internal_default_instance();
}
::assist_ranker::Feature* RankerExample::mutable_target() {
  set_has_target();
  if (target_ == NULL) {
    target_ = new ::assist_ranker::Feature;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.RankerExample.target)
  return target_;
}
::assist_ranker::Feature* RankerExample::release_target() {
  // @@protoc_insertion_point(field_release:assist_ranker.RankerExample.target)
  clear_has_target();
  ::assist_ranker::Feature* temp = target_;
  target_ = NULL;
  return temp;
}
void RankerExample::set_allocated_target(::assist_ranker::Feature* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerExample.target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace assist_ranker

// @@protoc_insertion_point(global_scope)
