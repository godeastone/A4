// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ranker_example.proto

#ifndef PROTOBUF_ranker_5fexample_2eproto__INCLUDED
#define PROTOBUF_ranker_5fexample_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
namespace assist_ranker {
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class FloatList;
class FloatListDefaultTypeInternal;
extern FloatListDefaultTypeInternal _FloatList_default_instance_;
class RankerExample;
class RankerExampleDefaultTypeInternal;
extern RankerExampleDefaultTypeInternal _RankerExample_default_instance_;
class RankerExample_FeaturesEntry;
class RankerExample_FeaturesEntryDefaultTypeInternal;
extern RankerExample_FeaturesEntryDefaultTypeInternal _RankerExample_FeaturesEntry_default_instance_;
class StringList;
class StringListDefaultTypeInternal;
extern StringListDefaultTypeInternal _StringList_default_instance_;
}  // namespace assist_ranker

namespace assist_ranker {

namespace protobuf_ranker_5fexample_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ranker_5fexample_2eproto

// ===================================================================

class StringList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.StringList) */ {
 public:
  StringList();
  virtual ~StringList();

  StringList(const StringList& from);

  inline StringList& operator=(const StringList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StringList& default_instance();

  static inline const StringList* internal_default_instance() {
    return reinterpret_cast<const StringList*>(
               &_StringList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(StringList* other);

  // implements Message ----------------------------------------------

  inline StringList* New() const PROTOBUF_FINAL { return New(NULL); }

  StringList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StringList& from);
  void MergeFrom(const StringList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes string_value = 1;
  int string_value_size() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 1;
  const ::std::string& string_value(int index) const;
  ::std::string* mutable_string_value(int index);
  void set_string_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(int index, ::std::string&& value);
  #endif
  void set_string_value(int index, const char* value);
  void set_string_value(int index, const void* value, size_t size);
  ::std::string* add_string_value();
  void add_string_value(const ::std::string& value);
  #if LANG_CXX11
  void add_string_value(::std::string&& value);
  #endif
  void add_string_value(const char* value);
  void add_string_value(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_value();

  // @@protoc_insertion_point(class_scope:assist_ranker.StringList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_value_;
  friend struct protobuf_ranker_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FloatList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.FloatList) */ {
 public:
  FloatList();
  virtual ~FloatList();

  FloatList(const FloatList& from);

  inline FloatList& operator=(const FloatList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FloatList& default_instance();

  static inline const FloatList* internal_default_instance() {
    return reinterpret_cast<const FloatList*>(
               &_FloatList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FloatList* other);

  // implements Message ----------------------------------------------

  inline FloatList* New() const PROTOBUF_FINAL { return New(NULL); }

  FloatList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FloatList& from);
  void MergeFrom(const FloatList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float float_value = 1;
  int float_value_size() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 1;
  float float_value(int index) const;
  void set_float_value(int index, float value);
  void add_float_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_value();

  // @@protoc_insertion_point(class_scope:assist_ranker.FloatList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > float_value_;
  friend struct protobuf_ranker_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Feature : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Feature& default_instance();

  enum FeatureTypeCase {
    kBoolValue = 1,
    kFloatValue = 2,
    kInt32Value = 3,
    kStringValue = 4,
    kStringList = 5,
    kFloatList = 6,
    FEATURE_TYPE_NOT_SET = 0,
  };

  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Feature* other);

  // implements Message ----------------------------------------------

  inline Feature* New() const PROTOBUF_FINAL { return New(NULL); }

  Feature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool bool_value = 1;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 1;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional float float_value = 2;
  bool has_float_value() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  float float_value() const;
  void set_float_value(float value);

  // optional int32 int32_value = 3;
  bool has_int32_value() const;
  void clear_int32_value();
  static const int kInt32ValueFieldNumber = 3;
  ::google::protobuf::int32 int32_value() const;
  void set_int32_value(::google::protobuf::int32 value);

  // optional bytes string_value = 4;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 4;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const void* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional .assist_ranker.StringList string_list = 5;
  bool has_string_list() const;
  void clear_string_list();
  static const int kStringListFieldNumber = 5;
  const ::assist_ranker::StringList& string_list() const;
  ::assist_ranker::StringList* mutable_string_list();
  ::assist_ranker::StringList* release_string_list();
  void set_allocated_string_list(::assist_ranker::StringList* string_list);

  // optional .assist_ranker.FloatList float_list = 6;
  bool has_float_list() const;
  void clear_float_list();
  static const int kFloatListFieldNumber = 6;
  const ::assist_ranker::FloatList& float_list() const;
  ::assist_ranker::FloatList* mutable_float_list();
  ::assist_ranker::FloatList* release_float_list();
  void set_allocated_float_list(::assist_ranker::FloatList* float_list);

  FeatureTypeCase feature_type_case() const;
  // @@protoc_insertion_point(class_scope:assist_ranker.Feature)
 private:
  void set_has_bool_value();
  void set_has_float_value();
  void set_has_int32_value();
  void set_has_string_value();
  void set_has_string_list();
  void set_has_float_list();

  inline bool has_feature_type() const;
  void clear_feature_type();
  inline void clear_has_feature_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  union FeatureTypeUnion {
    FeatureTypeUnion() {}
    bool bool_value_;
    float float_value_;
    ::google::protobuf::int32 int32_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    ::assist_ranker::StringList* string_list_;
    ::assist_ranker::FloatList* float_list_;
  } feature_type_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_ranker_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class RankerExample : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.RankerExample) */ {
 public:
  RankerExample();
  virtual ~RankerExample();

  RankerExample(const RankerExample& from);

  inline RankerExample& operator=(const RankerExample& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RankerExample& default_instance();

  static inline const RankerExample* internal_default_instance() {
    return reinterpret_cast<const RankerExample*>(
               &_RankerExample_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RankerExample* other);

  // implements Message ----------------------------------------------

  inline RankerExample* New() const PROTOBUF_FINAL { return New(NULL); }

  RankerExample* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RankerExample& from);
  void MergeFrom(const RankerExample& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RankerExample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .assist_ranker.Feature> features = 1;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >&
      features() const;
  ::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >*
      mutable_features();

  // optional .assist_ranker.Feature target = 2;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  const ::assist_ranker::Feature& target() const;
  ::assist_ranker::Feature* mutable_target();
  ::assist_ranker::Feature* release_target();
  void set_allocated_target(::assist_ranker::Feature* target);

  // @@protoc_insertion_point(class_scope:assist_ranker.RankerExample)
 private:
  void set_has_target();
  void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  public:
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::assist_ranker::Feature,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      RankerExample_FeaturesEntry;
  ::google::protobuf::internal::MapFieldLite<
      RankerExample_FeaturesEntry,
      ::std::string, ::assist_ranker::Feature,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > features_;
  private:
  ::assist_ranker::Feature* target_;
  friend struct protobuf_ranker_5fexample_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StringList

// repeated bytes string_value = 1;
inline int StringList::string_value_size() const {
  return string_value_.size();
}
inline void StringList::clear_string_value() {
  string_value_.Clear();
}
inline const ::std::string& StringList::string_value(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.StringList.string_value)
  return string_value_.Get(index);
}
inline ::std::string* StringList::mutable_string_value(int index) {
  // @@protoc_insertion_point(field_mutable:assist_ranker.StringList.string_value)
  return string_value_.Mutable(index);
}
inline void StringList::set_string_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:assist_ranker.StringList.string_value)
  string_value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringList::set_string_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:assist_ranker.StringList.string_value)
  string_value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringList::set_string_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:assist_ranker.StringList.string_value)
}
inline void StringList::set_string_value(int index, const void* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:assist_ranker.StringList.string_value)
}
inline ::std::string* StringList::add_string_value() {
  // @@protoc_insertion_point(field_add_mutable:assist_ranker.StringList.string_value)
  return string_value_.Add();
}
inline void StringList::add_string_value(const ::std::string& value) {
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:assist_ranker.StringList.string_value)
}
#if LANG_CXX11
inline void StringList::add_string_value(::std::string&& value) {
  string_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:assist_ranker.StringList.string_value)
}
#endif
inline void StringList::add_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:assist_ranker.StringList.string_value)
}
inline void StringList::add_string_value(const void* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:assist_ranker.StringList.string_value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringList::string_value() const {
  // @@protoc_insertion_point(field_list:assist_ranker.StringList.string_value)
  return string_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringList::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.StringList.string_value)
  return &string_value_;
}

// -------------------------------------------------------------------

// FloatList

// repeated float float_value = 1;
inline int FloatList::float_value_size() const {
  return float_value_.size();
}
inline void FloatList::clear_float_value() {
  float_value_.Clear();
}
inline float FloatList::float_value(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.FloatList.float_value)
  return float_value_.Get(index);
}
inline void FloatList::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:assist_ranker.FloatList.float_value)
}
inline void FloatList::add_float_value(float value) {
  float_value_.Add(value);
  // @@protoc_insertion_point(field_add:assist_ranker.FloatList.float_value)
}
inline const ::google::protobuf::RepeatedField< float >&
FloatList::float_value() const {
  // @@protoc_insertion_point(field_list:assist_ranker.FloatList.float_value)
  return float_value_;
}
inline ::google::protobuf::RepeatedField< float >*
FloatList::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.FloatList.float_value)
  return &float_value_;
}

// -------------------------------------------------------------------

// Feature

// optional bool bool_value = 1;
inline bool Feature::has_bool_value() const {
  return feature_type_case() == kBoolValue;
}
inline void Feature::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Feature::clear_bool_value() {
  if (has_bool_value()) {
    feature_type_.bool_value_ = false;
    clear_has_feature_type();
  }
}
inline bool Feature::bool_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.bool_value)
  if (has_bool_value()) {
    return feature_type_.bool_value_;
  }
  return false;
}
inline void Feature::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_feature_type();
    set_has_bool_value();
  }
  feature_type_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.bool_value)
}

// optional float float_value = 2;
inline bool Feature::has_float_value() const {
  return feature_type_case() == kFloatValue;
}
inline void Feature::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Feature::clear_float_value() {
  if (has_float_value()) {
    feature_type_.float_value_ = 0;
    clear_has_feature_type();
  }
}
inline float Feature::float_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.float_value)
  if (has_float_value()) {
    return feature_type_.float_value_;
  }
  return 0;
}
inline void Feature::set_float_value(float value) {
  if (!has_float_value()) {
    clear_feature_type();
    set_has_float_value();
  }
  feature_type_.float_value_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.float_value)
}

// optional int32 int32_value = 3;
inline bool Feature::has_int32_value() const {
  return feature_type_case() == kInt32Value;
}
inline void Feature::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void Feature::clear_int32_value() {
  if (has_int32_value()) {
    feature_type_.int32_value_ = 0;
    clear_has_feature_type();
  }
}
inline ::google::protobuf::int32 Feature::int32_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.int32_value)
  if (has_int32_value()) {
    return feature_type_.int32_value_;
  }
  return 0;
}
inline void Feature::set_int32_value(::google::protobuf::int32 value) {
  if (!has_int32_value()) {
    clear_feature_type();
    set_has_int32_value();
  }
  feature_type_.int32_value_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.int32_value)
}

// optional bytes string_value = 4;
inline bool Feature::has_string_value() const {
  return feature_type_case() == kStringValue;
}
inline void Feature::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Feature::clear_string_value() {
  if (has_string_value()) {
    feature_type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_feature_type();
  }
}
inline const ::std::string& Feature::string_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.string_value)
  if (has_string_value()) {
    return feature_type_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Feature::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.string_value)
  if (!has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  feature_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.string_value)
}
#if LANG_CXX11
inline void Feature::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.string_value)
  if (!has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  feature_type_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assist_ranker.Feature.string_value)
}
#endif
inline void Feature::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  feature_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assist_ranker.Feature.string_value)
}
inline void Feature::set_string_value(const void* value, size_t size) {
  if (!has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  feature_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assist_ranker.Feature.string_value)
}
inline ::std::string* Feature::mutable_string_value() {
  if (!has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.Feature.string_value)
  return feature_type_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_string_value() {
  // @@protoc_insertion_point(field_release:assist_ranker.Feature.string_value)
  if (has_string_value()) {
    clear_has_feature_type();
    return feature_type_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Feature::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    feature_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_feature_type();
  if (string_value != NULL) {
    set_has_string_value();
    feature_type_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.Feature.string_value)
}

// optional .assist_ranker.StringList string_list = 5;
inline bool Feature::has_string_list() const {
  return feature_type_case() == kStringList;
}
inline void Feature::set_has_string_list() {
  _oneof_case_[0] = kStringList;
}
inline void Feature::clear_string_list() {
  if (has_string_list()) {
    delete feature_type_.string_list_;
    clear_has_feature_type();
  }
}
inline  const ::assist_ranker::StringList& Feature::string_list() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.string_list)
  return has_string_list()
      ? *feature_type_.string_list_
      : ::assist_ranker::StringList::default_instance();
}
inline ::assist_ranker::StringList* Feature::mutable_string_list() {
  if (!has_string_list()) {
    clear_feature_type();
    set_has_string_list();
    feature_type_.string_list_ = new ::assist_ranker::StringList;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.Feature.string_list)
  return feature_type_.string_list_;
}
inline ::assist_ranker::StringList* Feature::release_string_list() {
  // @@protoc_insertion_point(field_release:assist_ranker.Feature.string_list)
  if (has_string_list()) {
    clear_has_feature_type();
    ::assist_ranker::StringList* temp = feature_type_.string_list_;
    feature_type_.string_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Feature::set_allocated_string_list(::assist_ranker::StringList* string_list) {
  clear_feature_type();
  if (string_list) {
    set_has_string_list();
    feature_type_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.Feature.string_list)
}

// optional .assist_ranker.FloatList float_list = 6;
inline bool Feature::has_float_list() const {
  return feature_type_case() == kFloatList;
}
inline void Feature::set_has_float_list() {
  _oneof_case_[0] = kFloatList;
}
inline void Feature::clear_float_list() {
  if (has_float_list()) {
    delete feature_type_.float_list_;
    clear_has_feature_type();
  }
}
inline  const ::assist_ranker::FloatList& Feature::float_list() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.float_list)
  return has_float_list()
      ? *feature_type_.float_list_
      : ::assist_ranker::FloatList::default_instance();
}
inline ::assist_ranker::FloatList* Feature::mutable_float_list() {
  if (!has_float_list()) {
    clear_feature_type();
    set_has_float_list();
    feature_type_.float_list_ = new ::assist_ranker::FloatList;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.Feature.float_list)
  return feature_type_.float_list_;
}
inline ::assist_ranker::FloatList* Feature::release_float_list() {
  // @@protoc_insertion_point(field_release:assist_ranker.Feature.float_list)
  if (has_float_list()) {
    clear_has_feature_type();
    ::assist_ranker::FloatList* temp = feature_type_.float_list_;
    feature_type_.float_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Feature::set_allocated_float_list(::assist_ranker::FloatList* float_list) {
  clear_feature_type();
  if (float_list) {
    set_has_float_list();
    feature_type_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.Feature.float_list)
}

inline bool Feature::has_feature_type() const {
  return feature_type_case() != FEATURE_TYPE_NOT_SET;
}
inline void Feature::clear_has_feature_type() {
  _oneof_case_[0] = FEATURE_TYPE_NOT_SET;
}
inline Feature::FeatureTypeCase Feature::feature_type_case() const {
  return Feature::FeatureTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RankerExample

// map<string, .assist_ranker.Feature> features = 1;
inline int RankerExample::features_size() const {
  return features_.size();
}
inline void RankerExample::clear_features() {
  features_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >&
RankerExample::features() const {
  // @@protoc_insertion_point(field_map:assist_ranker.RankerExample.features)
  return features_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::assist_ranker::Feature >*
RankerExample::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:assist_ranker.RankerExample.features)
  return features_.MutableMap();
}

// optional .assist_ranker.Feature target = 2;
inline bool RankerExample::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankerExample::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankerExample::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankerExample::clear_target() {
  if (target_ != NULL) target_->::assist_ranker::Feature::Clear();
  clear_has_target();
}
inline const ::assist_ranker::Feature& RankerExample::target() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerExample.target)
  return target_ != NULL ? *target_
                         : *::assist_ranker::Feature::internal_default_instance();
}
inline ::assist_ranker::Feature* RankerExample::mutable_target() {
  set_has_target();
  if (target_ == NULL) {
    target_ = new ::assist_ranker::Feature;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.RankerExample.target)
  return target_;
}
inline ::assist_ranker::Feature* RankerExample::release_target() {
  // @@protoc_insertion_point(field_release:assist_ranker.RankerExample.target)
  clear_has_target();
  ::assist_ranker::Feature* temp = target_;
  target_ = NULL;
  return temp;
}
inline void RankerExample::set_allocated_target(::assist_ranker::Feature* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerExample.target)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace assist_ranker

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ranker_5fexample_2eproto__INCLUDED
