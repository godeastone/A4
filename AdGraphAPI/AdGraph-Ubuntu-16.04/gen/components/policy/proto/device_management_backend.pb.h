// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_management_backend.proto

#ifndef PROTOBUF_device_5fmanagement_5fbackend_2eproto__INCLUDED
#define PROTOBUF_device_5fmanagement_5fbackend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include "components/policy/proto/policy_proto_export.h"
namespace enterprise_management {
class ActiveDirectoryEnrollPlayUserRequest;
class ActiveDirectoryEnrollPlayUserRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ActiveDirectoryEnrollPlayUserRequestDefaultTypeInternal _ActiveDirectoryEnrollPlayUserRequest_default_instance_;
class ActiveDirectoryEnrollPlayUserResponse;
class ActiveDirectoryEnrollPlayUserResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ActiveDirectoryEnrollPlayUserResponseDefaultTypeInternal _ActiveDirectoryEnrollPlayUserResponse_default_instance_;
class ActiveDirectoryPlayActivityRequest;
class ActiveDirectoryPlayActivityRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ActiveDirectoryPlayActivityRequestDefaultTypeInternal _ActiveDirectoryPlayActivityRequest_default_instance_;
class ActiveDirectoryPlayActivityResponse;
class ActiveDirectoryPlayActivityResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ActiveDirectoryPlayActivityResponseDefaultTypeInternal _ActiveDirectoryPlayActivityResponse_default_instance_;
class ActiveDirectoryUserSigninRequest;
class ActiveDirectoryUserSigninRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ActiveDirectoryUserSigninRequestDefaultTypeInternal _ActiveDirectoryUserSigninRequest_default_instance_;
class ActiveDirectoryUserSigninResponse;
class ActiveDirectoryUserSigninResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ActiveDirectoryUserSigninResponseDefaultTypeInternal _ActiveDirectoryUserSigninResponse_default_instance_;
class ActiveTimePeriod;
class ActiveTimePeriodDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ActiveTimePeriodDefaultTypeInternal _ActiveTimePeriod_default_instance_;
class AndroidStatus;
class AndroidStatusDefaultTypeInternal;
POLICY_PROTO_EXPORT extern AndroidStatusDefaultTypeInternal _AndroidStatus_default_instance_;
class AppInstallReport;
class AppInstallReportDefaultTypeInternal;
POLICY_PROTO_EXPORT extern AppInstallReportDefaultTypeInternal _AppInstallReport_default_instance_;
class AppInstallReportLogEvent;
class AppInstallReportLogEventDefaultTypeInternal;
POLICY_PROTO_EXPORT extern AppInstallReportLogEventDefaultTypeInternal _AppInstallReportLogEvent_default_instance_;
class AppInstallReportRequest;
class AppInstallReportRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern AppInstallReportRequestDefaultTypeInternal _AppInstallReportRequest_default_instance_;
class AppInstallReportResponse;
class AppInstallReportResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern AppInstallReportResponseDefaultTypeInternal _AppInstallReportResponse_default_instance_;
class AppStatus;
class AppStatusDefaultTypeInternal;
POLICY_PROTO_EXPORT extern AppStatusDefaultTypeInternal _AppStatus_default_instance_;
class BrowserReport;
class BrowserReportDefaultTypeInternal;
POLICY_PROTO_EXPORT extern BrowserReportDefaultTypeInternal _BrowserReport_default_instance_;
class CPUTempInfo;
class CPUTempInfoDefaultTypeInternal;
POLICY_PROTO_EXPORT extern CPUTempInfoDefaultTypeInternal _CPUTempInfo_default_instance_;
class CertificateBasedDeviceRegisterRequest;
class CertificateBasedDeviceRegisterRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern CertificateBasedDeviceRegisterRequestDefaultTypeInternal _CertificateBasedDeviceRegisterRequest_default_instance_;
class CertificateBasedDeviceRegistrationData;
class CertificateBasedDeviceRegistrationDataDefaultTypeInternal;
POLICY_PROTO_EXPORT extern CertificateBasedDeviceRegistrationDataDefaultTypeInternal _CertificateBasedDeviceRegistrationData_default_instance_;
class CheckAndroidManagementRequest;
class CheckAndroidManagementRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern CheckAndroidManagementRequestDefaultTypeInternal _CheckAndroidManagementRequest_default_instance_;
class CheckAndroidManagementResponse;
class CheckAndroidManagementResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern CheckAndroidManagementResponseDefaultTypeInternal _CheckAndroidManagementResponse_default_instance_;
class CheckDeviceLicenseRequest;
class CheckDeviceLicenseRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern CheckDeviceLicenseRequestDefaultTypeInternal _CheckDeviceLicenseRequest_default_instance_;
class CheckDeviceLicenseResponse;
class CheckDeviceLicenseResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern CheckDeviceLicenseResponseDefaultTypeInternal _CheckDeviceLicenseResponse_default_instance_;
class CheckDevicePairingRequest;
class CheckDevicePairingRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern CheckDevicePairingRequestDefaultTypeInternal _CheckDevicePairingRequest_default_instance_;
class CheckDevicePairingResponse;
class CheckDevicePairingResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern CheckDevicePairingResponseDefaultTypeInternal _CheckDevicePairingResponse_default_instance_;
class ChromeDesktopReportRequest;
class ChromeDesktopReportRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ChromeDesktopReportRequestDefaultTypeInternal _ChromeDesktopReportRequest_default_instance_;
class ChromeDesktopReportResponse;
class ChromeDesktopReportResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ChromeDesktopReportResponseDefaultTypeInternal _ChromeDesktopReportResponse_default_instance_;
class ChromeUserProfileReport;
class ChromeUserProfileReportDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ChromeUserProfileReportDefaultTypeInternal _ChromeUserProfileReport_default_instance_;
class DEPRECATEDPolicyPublicKeyAndDomain;
class DEPRECATEDPolicyPublicKeyAndDomainDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DEPRECATEDPolicyPublicKeyAndDomainDefaultTypeInternal _DEPRECATEDPolicyPublicKeyAndDomain_default_instance_;
class DeviceAttributeUpdatePermissionRequest;
class DeviceAttributeUpdatePermissionRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceAttributeUpdatePermissionRequestDefaultTypeInternal _DeviceAttributeUpdatePermissionRequest_default_instance_;
class DeviceAttributeUpdatePermissionResponse;
class DeviceAttributeUpdatePermissionResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceAttributeUpdatePermissionResponseDefaultTypeInternal _DeviceAttributeUpdatePermissionResponse_default_instance_;
class DeviceAttributeUpdateRequest;
class DeviceAttributeUpdateRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceAttributeUpdateRequestDefaultTypeInternal _DeviceAttributeUpdateRequest_default_instance_;
class DeviceAttributeUpdateResponse;
class DeviceAttributeUpdateResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceAttributeUpdateResponseDefaultTypeInternal _DeviceAttributeUpdateResponse_default_instance_;
class DeviceAutoEnrollmentRequest;
class DeviceAutoEnrollmentRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceAutoEnrollmentRequestDefaultTypeInternal _DeviceAutoEnrollmentRequest_default_instance_;
class DeviceAutoEnrollmentResponse;
class DeviceAutoEnrollmentResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceAutoEnrollmentResponseDefaultTypeInternal _DeviceAutoEnrollmentResponse_default_instance_;
class DeviceCertUploadRequest;
class DeviceCertUploadRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceCertUploadRequestDefaultTypeInternal _DeviceCertUploadRequest_default_instance_;
class DeviceCertUploadResponse;
class DeviceCertUploadResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceCertUploadResponseDefaultTypeInternal _DeviceCertUploadResponse_default_instance_;
class DeviceInitialEnrollmentStateRequest;
class DeviceInitialEnrollmentStateRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceInitialEnrollmentStateRequestDefaultTypeInternal _DeviceInitialEnrollmentStateRequest_default_instance_;
class DeviceInitialEnrollmentStateResponse;
class DeviceInitialEnrollmentStateResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceInitialEnrollmentStateResponseDefaultTypeInternal _DeviceInitialEnrollmentStateResponse_default_instance_;
class DeviceManagementRequest;
class DeviceManagementRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceManagementRequestDefaultTypeInternal _DeviceManagementRequest_default_instance_;
class DeviceManagementResponse;
class DeviceManagementResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceManagementResponseDefaultTypeInternal _DeviceManagementResponse_default_instance_;
class DevicePairingRequest;
class DevicePairingRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DevicePairingRequestDefaultTypeInternal _DevicePairingRequest_default_instance_;
class DevicePairingResponse;
class DevicePairingResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DevicePairingResponseDefaultTypeInternal _DevicePairingResponse_default_instance_;
class DevicePolicyRequest;
class DevicePolicyRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DevicePolicyRequestDefaultTypeInternal _DevicePolicyRequest_default_instance_;
class DevicePolicyResponse;
class DevicePolicyResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DevicePolicyResponseDefaultTypeInternal _DevicePolicyResponse_default_instance_;
class DeviceRegisterRequest;
class DeviceRegisterRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceRegisterRequestDefaultTypeInternal _DeviceRegisterRequest_default_instance_;
class DeviceRegisterResponse;
class DeviceRegisterResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceRegisterResponseDefaultTypeInternal _DeviceRegisterResponse_default_instance_;
class DeviceRemoteCommandRequest;
class DeviceRemoteCommandRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceRemoteCommandRequestDefaultTypeInternal _DeviceRemoteCommandRequest_default_instance_;
class DeviceRemoteCommandResponse;
class DeviceRemoteCommandResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceRemoteCommandResponseDefaultTypeInternal _DeviceRemoteCommandResponse_default_instance_;
class DeviceServiceApiAccessRequest;
class DeviceServiceApiAccessRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceServiceApiAccessRequestDefaultTypeInternal _DeviceServiceApiAccessRequest_default_instance_;
class DeviceServiceApiAccessResponse;
class DeviceServiceApiAccessResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceServiceApiAccessResponseDefaultTypeInternal _DeviceServiceApiAccessResponse_default_instance_;
class DeviceState;
class DeviceStateDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceStateDefaultTypeInternal _DeviceState_default_instance_;
class DeviceStateKeyUpdateRequest;
class DeviceStateKeyUpdateRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceStateKeyUpdateRequestDefaultTypeInternal _DeviceStateKeyUpdateRequest_default_instance_;
class DeviceStateRetrievalRequest;
class DeviceStateRetrievalRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceStateRetrievalRequestDefaultTypeInternal _DeviceStateRetrievalRequest_default_instance_;
class DeviceStateRetrievalResponse;
class DeviceStateRetrievalResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceStateRetrievalResponseDefaultTypeInternal _DeviceStateRetrievalResponse_default_instance_;
class DeviceStatusReportRequest;
class DeviceStatusReportRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceStatusReportRequestDefaultTypeInternal _DeviceStatusReportRequest_default_instance_;
class DeviceStatusReportResponse;
class DeviceStatusReportResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceStatusReportResponseDefaultTypeInternal _DeviceStatusReportResponse_default_instance_;
class DeviceUnregisterRequest;
class DeviceUnregisterRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceUnregisterRequestDefaultTypeInternal _DeviceUnregisterRequest_default_instance_;
class DeviceUnregisterResponse;
class DeviceUnregisterResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceUnregisterResponseDefaultTypeInternal _DeviceUnregisterResponse_default_instance_;
class DeviceUser;
class DeviceUserDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DeviceUserDefaultTypeInternal _DeviceUser_default_instance_;
class DisabledState;
class DisabledStateDefaultTypeInternal;
POLICY_PROTO_EXPORT extern DisabledStateDefaultTypeInternal _DisabledState_default_instance_;
class GcmIdUpdateRequest;
class GcmIdUpdateRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern GcmIdUpdateRequestDefaultTypeInternal _GcmIdUpdateRequest_default_instance_;
class GcmIdUpdateResponse;
class GcmIdUpdateResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern GcmIdUpdateResponseDefaultTypeInternal _GcmIdUpdateResponse_default_instance_;
class LicenseAvailability;
class LicenseAvailabilityDefaultTypeInternal;
POLICY_PROTO_EXPORT extern LicenseAvailabilityDefaultTypeInternal _LicenseAvailability_default_instance_;
class LicenseType;
class LicenseTypeDefaultTypeInternal;
POLICY_PROTO_EXPORT extern LicenseTypeDefaultTypeInternal _LicenseType_default_instance_;
class NetworkInterface;
class NetworkInterfaceDefaultTypeInternal;
POLICY_PROTO_EXPORT extern NetworkInterfaceDefaultTypeInternal _NetworkInterface_default_instance_;
class NetworkState;
class NetworkStateDefaultTypeInternal;
POLICY_PROTO_EXPORT extern NetworkStateDefaultTypeInternal _NetworkState_default_instance_;
class OsUpdateStatus;
class OsUpdateStatusDefaultTypeInternal;
POLICY_PROTO_EXPORT extern OsUpdateStatusDefaultTypeInternal _OsUpdateStatus_default_instance_;
class PolicyData;
class PolicyDataDefaultTypeInternal;
POLICY_PROTO_EXPORT extern PolicyDataDefaultTypeInternal _PolicyData_default_instance_;
class PolicyFetchRequest;
class PolicyFetchRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern PolicyFetchRequestDefaultTypeInternal _PolicyFetchRequest_default_instance_;
class PolicyFetchResponse;
class PolicyFetchResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern PolicyFetchResponseDefaultTypeInternal _PolicyFetchResponse_default_instance_;
class PolicyValidationReportRequest;
class PolicyValidationReportRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern PolicyValidationReportRequestDefaultTypeInternal _PolicyValidationReportRequest_default_instance_;
class PolicyValidationReportResponse;
class PolicyValidationReportResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern PolicyValidationReportResponseDefaultTypeInternal _PolicyValidationReportResponse_default_instance_;
class PolicyValueValidationResult;
class PolicyValueValidationResultDefaultTypeInternal;
POLICY_PROTO_EXPORT extern PolicyValueValidationResultDefaultTypeInternal _PolicyValueValidationResult_default_instance_;
class PublicKeyVerificationData;
class PublicKeyVerificationDataDefaultTypeInternal;
POLICY_PROTO_EXPORT extern PublicKeyVerificationDataDefaultTypeInternal _PublicKeyVerificationData_default_instance_;
class RegisterBrowserRequest;
class RegisterBrowserRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern RegisterBrowserRequestDefaultTypeInternal _RegisterBrowserRequest_default_instance_;
class RemoteCommand;
class RemoteCommandDefaultTypeInternal;
POLICY_PROTO_EXPORT extern RemoteCommandDefaultTypeInternal _RemoteCommand_default_instance_;
class RemoteCommandResult;
class RemoteCommandResultDefaultTypeInternal;
POLICY_PROTO_EXPORT extern RemoteCommandResultDefaultTypeInternal _RemoteCommandResult_default_instance_;
class SamlParametersProto;
class SamlParametersProtoDefaultTypeInternal;
POLICY_PROTO_EXPORT extern SamlParametersProtoDefaultTypeInternal _SamlParametersProto_default_instance_;
class SessionStatusReportRequest;
class SessionStatusReportRequestDefaultTypeInternal;
POLICY_PROTO_EXPORT extern SessionStatusReportRequestDefaultTypeInternal _SessionStatusReportRequest_default_instance_;
class SessionStatusReportResponse;
class SessionStatusReportResponseDefaultTypeInternal;
POLICY_PROTO_EXPORT extern SessionStatusReportResponseDefaultTypeInternal _SessionStatusReportResponse_default_instance_;
class SignedData;
class SignedDataDefaultTypeInternal;
POLICY_PROTO_EXPORT extern SignedDataDefaultTypeInternal _SignedData_default_instance_;
class SystemState;
class SystemStateDefaultTypeInternal;
POLICY_PROTO_EXPORT extern SystemStateDefaultTypeInternal _SystemState_default_instance_;
class TimePeriod;
class TimePeriodDefaultTypeInternal;
POLICY_PROTO_EXPORT extern TimePeriodDefaultTypeInternal _TimePeriod_default_instance_;
class TpmVersionInfo;
class TpmVersionInfoDefaultTypeInternal;
POLICY_PROTO_EXPORT extern TpmVersionInfoDefaultTypeInternal _TpmVersionInfo_default_instance_;
class VolumeInfo;
class VolumeInfoDefaultTypeInternal;
POLICY_PROTO_EXPORT extern VolumeInfoDefaultTypeInternal _VolumeInfo_default_instance_;
}  // namespace enterprise_management

namespace enterprise_management {

namespace protobuf_device_5fmanagement_5fbackend_2eproto {
// Internal implementation detail -- do not call these.
struct POLICY_PROTO_EXPORT TableStruct {
static const ::google::protobuf::internal::ParseTableField entries[];
static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
static const ::google::protobuf::internal::ParseTable schema[];
static const ::google::protobuf::uint32 offsets[];
static void InitDefaultsImpl();
static void Shutdown();
};
void POLICY_PROTO_EXPORT AddDescriptors();
void POLICY_PROTO_EXPORT InitDefaults();
}  // namespace protobuf_device_5fmanagement_5fbackend_2eproto

enum LicenseType_LicenseTypeEnum {
LicenseType_LicenseTypeEnum_UNDEFINED = 0,
LicenseType_LicenseTypeEnum_CDM_PERPETUAL = 1,
LicenseType_LicenseTypeEnum_CDM_ANNUAL = 2,
LicenseType_LicenseTypeEnum_KIOSK = 3
};
POLICY_PROTO_EXPORT bool LicenseType_LicenseTypeEnum_IsValid(int value);
const LicenseType_LicenseTypeEnum LicenseType_LicenseTypeEnum_LicenseTypeEnum_MIN = LicenseType_LicenseTypeEnum_UNDEFINED;
const LicenseType_LicenseTypeEnum LicenseType_LicenseTypeEnum_LicenseTypeEnum_MAX = LicenseType_LicenseTypeEnum_KIOSK;
const int LicenseType_LicenseTypeEnum_LicenseTypeEnum_ARRAYSIZE = LicenseType_LicenseTypeEnum_LicenseTypeEnum_MAX + 1;

enum DeviceRegisterRequest_Type {
DeviceRegisterRequest_Type_TT = 0,
DeviceRegisterRequest_Type_USER = 1,
DeviceRegisterRequest_Type_DEVICE = 2,
DeviceRegisterRequest_Type_BROWSER = 3,
DeviceRegisterRequest_Type_ANDROID_BROWSER = 4,
DeviceRegisterRequest_Type_IOS_BROWSER = 5
};
POLICY_PROTO_EXPORT bool DeviceRegisterRequest_Type_IsValid(int value);
const DeviceRegisterRequest_Type DeviceRegisterRequest_Type_Type_MIN = DeviceRegisterRequest_Type_TT;
const DeviceRegisterRequest_Type DeviceRegisterRequest_Type_Type_MAX = DeviceRegisterRequest_Type_IOS_BROWSER;
const int DeviceRegisterRequest_Type_Type_ARRAYSIZE = DeviceRegisterRequest_Type_Type_MAX + 1;

enum DeviceRegisterRequest_Flavor {
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_MANUAL = 0,
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_MANUAL_RENEW = 1,
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_LOCAL_FORCED = 2,
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_LOCAL_ADVERTISED = 3,
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_SERVER_FORCED = 4,
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_SERVER_ADVERTISED = 5,
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_RECOVERY = 6,
DeviceRegisterRequest_Flavor_FLAVOR_USER_REGISTRATION = 7,
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_ATTESTATION = 8,
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_ATTESTATION_LOCAL_FORCED = 9,
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_ATTESTATION_SERVER_FORCED = 10,
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_ATTESTATION_MANUAL_FALLBACK = 11
};
POLICY_PROTO_EXPORT bool DeviceRegisterRequest_Flavor_IsValid(int value);
const DeviceRegisterRequest_Flavor DeviceRegisterRequest_Flavor_Flavor_MIN = DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_MANUAL;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest_Flavor_Flavor_MAX = DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_ATTESTATION_MANUAL_FALLBACK;
const int DeviceRegisterRequest_Flavor_Flavor_ARRAYSIZE = DeviceRegisterRequest_Flavor_Flavor_MAX + 1;

enum DeviceRegisterRequest_Lifetime {
DeviceRegisterRequest_Lifetime_LIFETIME_UNDEFINED = 0,
DeviceRegisterRequest_Lifetime_LIFETIME_INDEFINITE = 1,
DeviceRegisterRequest_Lifetime_LIFETIME_EPHEMERAL_USER = 2
};
POLICY_PROTO_EXPORT bool DeviceRegisterRequest_Lifetime_IsValid(int value);
const DeviceRegisterRequest_Lifetime DeviceRegisterRequest_Lifetime_Lifetime_MIN = DeviceRegisterRequest_Lifetime_LIFETIME_UNDEFINED;
const DeviceRegisterRequest_Lifetime DeviceRegisterRequest_Lifetime_Lifetime_MAX = DeviceRegisterRequest_Lifetime_LIFETIME_EPHEMERAL_USER;
const int DeviceRegisterRequest_Lifetime_Lifetime_ARRAYSIZE = DeviceRegisterRequest_Lifetime_Lifetime_MAX + 1;

enum DeviceRegisterResponse_DeviceMode {
DeviceRegisterResponse_DeviceMode_ENTERPRISE = 0,
DeviceRegisterResponse_DeviceMode_RETAIL = 1,
DeviceRegisterResponse_DeviceMode_CHROME_AD = 2
};
POLICY_PROTO_EXPORT bool DeviceRegisterResponse_DeviceMode_IsValid(int value);
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse_DeviceMode_DeviceMode_MIN = DeviceRegisterResponse_DeviceMode_ENTERPRISE;
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse_DeviceMode_DeviceMode_MAX = DeviceRegisterResponse_DeviceMode_CHROME_AD;
const int DeviceRegisterResponse_DeviceMode_DeviceMode_ARRAYSIZE = DeviceRegisterResponse_DeviceMode_DeviceMode_MAX + 1;

enum DeviceCertUploadRequest_CertificateType {
DeviceCertUploadRequest_CertificateType_CERTIFICATE_TYPE_UNSPECIFIED = 0,
DeviceCertUploadRequest_CertificateType_ENTERPRISE_MACHINE_CERTIFICATE = 1,
DeviceCertUploadRequest_CertificateType_ENTERPRISE_ENROLLMENT_CERTIFICATE = 2
};
POLICY_PROTO_EXPORT bool DeviceCertUploadRequest_CertificateType_IsValid(int value);
const DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest_CertificateType_CertificateType_MIN = DeviceCertUploadRequest_CertificateType_CERTIFICATE_TYPE_UNSPECIFIED;
const DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest_CertificateType_CertificateType_MAX = DeviceCertUploadRequest_CertificateType_ENTERPRISE_ENROLLMENT_CERTIFICATE;
const int DeviceCertUploadRequest_CertificateType_CertificateType_ARRAYSIZE = DeviceCertUploadRequest_CertificateType_CertificateType_MAX + 1;

enum DeviceServiceApiAccessRequest_DeviceType {
DeviceServiceApiAccessRequest_DeviceType_CHROME_OS = 0,
DeviceServiceApiAccessRequest_DeviceType_ANDROID_OS = 1
};
POLICY_PROTO_EXPORT bool DeviceServiceApiAccessRequest_DeviceType_IsValid(int value);
const DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest_DeviceType_DeviceType_MIN = DeviceServiceApiAccessRequest_DeviceType_CHROME_OS;
const DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest_DeviceType_DeviceType_MAX = DeviceServiceApiAccessRequest_DeviceType_ANDROID_OS;
const int DeviceServiceApiAccessRequest_DeviceType_DeviceType_ARRAYSIZE = DeviceServiceApiAccessRequest_DeviceType_DeviceType_MAX + 1;

enum PolicyFetchRequest_SignatureType {
PolicyFetchRequest_SignatureType_NONE = 0,
PolicyFetchRequest_SignatureType_SHA1_RSA = 1
};
POLICY_PROTO_EXPORT bool PolicyFetchRequest_SignatureType_IsValid(int value);
const PolicyFetchRequest_SignatureType PolicyFetchRequest_SignatureType_SignatureType_MIN = PolicyFetchRequest_SignatureType_NONE;
const PolicyFetchRequest_SignatureType PolicyFetchRequest_SignatureType_SignatureType_MAX = PolicyFetchRequest_SignatureType_SHA1_RSA;
const int PolicyFetchRequest_SignatureType_SignatureType_ARRAYSIZE = PolicyFetchRequest_SignatureType_SignatureType_MAX + 1;

enum DeviceState_DeviceMode {
DeviceState_DeviceMode_DEVICE_MODE_NORMAL = 0,
DeviceState_DeviceMode_DEVICE_MODE_DISABLED = 1
};
POLICY_PROTO_EXPORT bool DeviceState_DeviceMode_IsValid(int value);
const DeviceState_DeviceMode DeviceState_DeviceMode_DeviceMode_MIN = DeviceState_DeviceMode_DEVICE_MODE_NORMAL;
const DeviceState_DeviceMode DeviceState_DeviceMode_DeviceMode_MAX = DeviceState_DeviceMode_DEVICE_MODE_DISABLED;
const int DeviceState_DeviceMode_DeviceMode_ARRAYSIZE = DeviceState_DeviceMode_DeviceMode_MAX + 1;

enum PolicyData_AssociationState {
PolicyData_AssociationState_ACTIVE = 0,
PolicyData_AssociationState_UNMANAGED = 1,
PolicyData_AssociationState_DEPROVISIONED = 2
};
POLICY_PROTO_EXPORT bool PolicyData_AssociationState_IsValid(int value);
const PolicyData_AssociationState PolicyData_AssociationState_AssociationState_MIN = PolicyData_AssociationState_ACTIVE;
const PolicyData_AssociationState PolicyData_AssociationState_AssociationState_MAX = PolicyData_AssociationState_DEPROVISIONED;
const int PolicyData_AssociationState_AssociationState_ARRAYSIZE = PolicyData_AssociationState_AssociationState_MAX + 1;

enum PolicyData_ManagementMode {
PolicyData_ManagementMode_LOCAL_OWNER = 0,
PolicyData_ManagementMode_ENTERPRISE_MANAGED = 1,
PolicyData_ManagementMode_OBSOLETE_CONSUMER_MANAGED = 2
};
POLICY_PROTO_EXPORT bool PolicyData_ManagementMode_IsValid(int value);
const PolicyData_ManagementMode PolicyData_ManagementMode_ManagementMode_MIN = PolicyData_ManagementMode_LOCAL_OWNER;
const PolicyData_ManagementMode PolicyData_ManagementMode_ManagementMode_MAX = PolicyData_ManagementMode_OBSOLETE_CONSUMER_MANAGED;
const int PolicyData_ManagementMode_ManagementMode_ARRAYSIZE = PolicyData_ManagementMode_ManagementMode_MAX + 1;

enum NetworkInterface_NetworkDeviceType {
NetworkInterface_NetworkDeviceType_TYPE_ETHERNET = 0,
NetworkInterface_NetworkDeviceType_TYPE_WIFI = 1,
NetworkInterface_NetworkDeviceType_TYPE_WIMAX = 2,
NetworkInterface_NetworkDeviceType_TYPE_BLUETOOTH = 3,
NetworkInterface_NetworkDeviceType_TYPE_CELLULAR = 4
};
POLICY_PROTO_EXPORT bool NetworkInterface_NetworkDeviceType_IsValid(int value);
const NetworkInterface_NetworkDeviceType NetworkInterface_NetworkDeviceType_NetworkDeviceType_MIN = NetworkInterface_NetworkDeviceType_TYPE_ETHERNET;
const NetworkInterface_NetworkDeviceType NetworkInterface_NetworkDeviceType_NetworkDeviceType_MAX = NetworkInterface_NetworkDeviceType_TYPE_CELLULAR;
const int NetworkInterface_NetworkDeviceType_NetworkDeviceType_ARRAYSIZE = NetworkInterface_NetworkDeviceType_NetworkDeviceType_MAX + 1;

enum NetworkState_ConnectionState {
NetworkState_ConnectionState_IDLE = 0,
NetworkState_ConnectionState_CARRIER = 1,
NetworkState_ConnectionState_ASSOCIATION = 2,
NetworkState_ConnectionState_CONFIGURATION = 3,
NetworkState_ConnectionState_READY = 4,
NetworkState_ConnectionState_PORTAL = 5,
NetworkState_ConnectionState_OFFLINE = 6,
NetworkState_ConnectionState_ONLINE = 7,
NetworkState_ConnectionState_DISCONNECT = 8,
NetworkState_ConnectionState_FAILURE = 9,
NetworkState_ConnectionState_ACTIVATION_FAILURE = 10,
NetworkState_ConnectionState_UNKNOWN = 11
};
POLICY_PROTO_EXPORT bool NetworkState_ConnectionState_IsValid(int value);
const NetworkState_ConnectionState NetworkState_ConnectionState_ConnectionState_MIN = NetworkState_ConnectionState_IDLE;
const NetworkState_ConnectionState NetworkState_ConnectionState_ConnectionState_MAX = NetworkState_ConnectionState_UNKNOWN;
const int NetworkState_ConnectionState_ConnectionState_ARRAYSIZE = NetworkState_ConnectionState_ConnectionState_MAX + 1;

enum DeviceUser_UserType {
DeviceUser_UserType_USER_TYPE_MANAGED = 0,
DeviceUser_UserType_USER_TYPE_UNMANAGED = 1
};
POLICY_PROTO_EXPORT bool DeviceUser_UserType_IsValid(int value);
const DeviceUser_UserType DeviceUser_UserType_UserType_MIN = DeviceUser_UserType_USER_TYPE_MANAGED;
const DeviceUser_UserType DeviceUser_UserType_UserType_MAX = DeviceUser_UserType_USER_TYPE_UNMANAGED;
const int DeviceUser_UserType_UserType_ARRAYSIZE = DeviceUser_UserType_UserType_MAX + 1;

enum OsUpdateStatus_UpdateStatus {
OsUpdateStatus_UpdateStatus_OS_UP_TO_DATE = 0,
OsUpdateStatus_UpdateStatus_OS_IMAGE_DOWNLOAD_NOT_STARTED = 1,
OsUpdateStatus_UpdateStatus_OS_IMAGE_DOWNLOAD_IN_PROGRESS = 2,
OsUpdateStatus_UpdateStatus_OS_UPDATE_NEED_REBOOT = 3
};
POLICY_PROTO_EXPORT bool OsUpdateStatus_UpdateStatus_IsValid(int value);
const OsUpdateStatus_UpdateStatus OsUpdateStatus_UpdateStatus_UpdateStatus_MIN = OsUpdateStatus_UpdateStatus_OS_UP_TO_DATE;
const OsUpdateStatus_UpdateStatus OsUpdateStatus_UpdateStatus_UpdateStatus_MAX = OsUpdateStatus_UpdateStatus_OS_UPDATE_NEED_REBOOT;
const int OsUpdateStatus_UpdateStatus_UpdateStatus_ARRAYSIZE = OsUpdateStatus_UpdateStatus_UpdateStatus_MAX + 1;

enum BrowserReport_Channel {
BrowserReport_Channel_UNKNOWN = 0,
BrowserReport_Channel_CANARY = 1,
BrowserReport_Channel_DEV = 2,
BrowserReport_Channel_BETA = 3,
BrowserReport_Channel_STABLE = 4
};
POLICY_PROTO_EXPORT bool BrowserReport_Channel_IsValid(int value);
const BrowserReport_Channel BrowserReport_Channel_Channel_MIN = BrowserReport_Channel_UNKNOWN;
const BrowserReport_Channel BrowserReport_Channel_Channel_MAX = BrowserReport_Channel_STABLE;
const int BrowserReport_Channel_Channel_ARRAYSIZE = BrowserReport_Channel_Channel_MAX + 1;

enum PolicyValueValidationResult_ValidationResultSeverity {
PolicyValueValidationResult_ValidationResultSeverity_VALIDATION_RESULT_SEVERITY_UNSPECIFIED = 0,
PolicyValueValidationResult_ValidationResultSeverity_VALIDATION_RESULT_SEVERITY_WARNING = 1,
PolicyValueValidationResult_ValidationResultSeverity_VALIDATION_RESULT_SEVERITY_ERROR = 2
};
POLICY_PROTO_EXPORT bool PolicyValueValidationResult_ValidationResultSeverity_IsValid(int value);
const PolicyValueValidationResult_ValidationResultSeverity PolicyValueValidationResult_ValidationResultSeverity_ValidationResultSeverity_MIN = PolicyValueValidationResult_ValidationResultSeverity_VALIDATION_RESULT_SEVERITY_UNSPECIFIED;
const PolicyValueValidationResult_ValidationResultSeverity PolicyValueValidationResult_ValidationResultSeverity_ValidationResultSeverity_MAX = PolicyValueValidationResult_ValidationResultSeverity_VALIDATION_RESULT_SEVERITY_ERROR;
const int PolicyValueValidationResult_ValidationResultSeverity_ValidationResultSeverity_ARRAYSIZE = PolicyValueValidationResult_ValidationResultSeverity_ValidationResultSeverity_MAX + 1;

enum PolicyValueValidationResult_ErrorType {
PolicyValueValidationResult_ErrorType_ERROR_TYPE_UNSPECIFIED = 0,
PolicyValueValidationResult_ErrorType_ERROR_TYPE_PARSE_ERROR = 1,
PolicyValueValidationResult_ErrorType_ERROR_TYPE_INVALID_TYPE = 3,
PolicyValueValidationResult_ErrorType_ERROR_TYPE_MISSING_FIELD = 4,
PolicyValueValidationResult_ErrorType_ERROR_TYPE_UNKNOWN_ENUM_VALUE = 5,
PolicyValueValidationResult_ErrorType_ERROR_TYPE_OUT_OF_BOUNDS = 6,
PolicyValueValidationResult_ErrorType_ERROR_TYPE_INVALID_REFERENCE = 7
};
POLICY_PROTO_EXPORT bool PolicyValueValidationResult_ErrorType_IsValid(int value);
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult_ErrorType_ErrorType_MIN = PolicyValueValidationResult_ErrorType_ERROR_TYPE_UNSPECIFIED;
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult_ErrorType_ErrorType_MAX = PolicyValueValidationResult_ErrorType_ERROR_TYPE_INVALID_REFERENCE;
const int PolicyValueValidationResult_ErrorType_ErrorType_ARRAYSIZE = PolicyValueValidationResult_ErrorType_ErrorType_MAX + 1;

enum PolicyValidationReportRequest_ValidationResultType {
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_ERROR_UNSPECIFIED = 0,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_SUCCESS = 1,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_INITIAL_SIGNATURE = 2,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_SIGNATURE = 3,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_ERROR_CODE_PRESENT = 4,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_PAYLOAD_PARSE_ERROR = 5,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_WRONG_POLICY_TYPE = 6,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_WRONG_SETTINGS_ENTITY_ID = 7,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_TIMESTAMP = 8,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_DM_TOKEN = 9,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_DEVICE_ID = 10,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_USER_MISMATCH = 11,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_POLICY_PARSE_ERROR = 12,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_KEY_VERIFICATION_SIGNATURE = 13,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_POLICY_VALUE_WARNINGS = 14,
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_POLICY_VALUE_ERRORS = 15
};
POLICY_PROTO_EXPORT bool PolicyValidationReportRequest_ValidationResultType_IsValid(int value);
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest_ValidationResultType_ValidationResultType_MIN = PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_ERROR_UNSPECIFIED;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest_ValidationResultType_ValidationResultType_MAX = PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_POLICY_VALUE_ERRORS;
const int PolicyValidationReportRequest_ValidationResultType_ValidationResultType_ARRAYSIZE = PolicyValidationReportRequest_ValidationResultType_ValidationResultType_MAX + 1;

enum DeviceAutoEnrollmentRequest_EnrollmentCheckType {
DeviceAutoEnrollmentRequest_EnrollmentCheckType_ENROLLMENT_CHECK_TYPE_UNSPECIFIED = 0,
DeviceAutoEnrollmentRequest_EnrollmentCheckType_ENROLLMENT_CHECK_TYPE_FRE = 1,
DeviceAutoEnrollmentRequest_EnrollmentCheckType_ENROLLMENT_CHECK_TYPE_FORCED_ENROLLMENT = 2
};
POLICY_PROTO_EXPORT bool DeviceAutoEnrollmentRequest_EnrollmentCheckType_IsValid(int value);
const DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest_EnrollmentCheckType_EnrollmentCheckType_MIN = DeviceAutoEnrollmentRequest_EnrollmentCheckType_ENROLLMENT_CHECK_TYPE_UNSPECIFIED;
const DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest_EnrollmentCheckType_EnrollmentCheckType_MAX = DeviceAutoEnrollmentRequest_EnrollmentCheckType_ENROLLMENT_CHECK_TYPE_FORCED_ENROLLMENT;
const int DeviceAutoEnrollmentRequest_EnrollmentCheckType_EnrollmentCheckType_ARRAYSIZE = DeviceAutoEnrollmentRequest_EnrollmentCheckType_EnrollmentCheckType_MAX + 1;

enum DeviceStateRetrievalResponse_RestoreMode {
DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_NONE = 0,
DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_REENROLLMENT_REQUESTED = 1,
DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_REENROLLMENT_ENFORCED = 2,
DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_DISABLED = 3,
DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_REENROLLMENT_ZERO_TOUCH = 4
};
POLICY_PROTO_EXPORT bool DeviceStateRetrievalResponse_RestoreMode_IsValid(int value);
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse_RestoreMode_RestoreMode_MIN = DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_NONE;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse_RestoreMode_RestoreMode_MAX = DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_REENROLLMENT_ZERO_TOUCH;
const int DeviceStateRetrievalResponse_RestoreMode_RestoreMode_ARRAYSIZE = DeviceStateRetrievalResponse_RestoreMode_RestoreMode_MAX + 1;

enum DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode {
DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_INITIAL_ENROLLMENT_MODE_NONE = 0,
DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_INITIAL_ENROLLMENT_MODE_ENROLLMENT_ENFORCED = 1
};
POLICY_PROTO_EXPORT bool DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_IsValid(int value);
const DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_InitialEnrollmentMode_MIN = DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_INITIAL_ENROLLMENT_MODE_NONE;
const DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_InitialEnrollmentMode_MAX = DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_INITIAL_ENROLLMENT_MODE_ENROLLMENT_ENFORCED;
const int DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_InitialEnrollmentMode_ARRAYSIZE = DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_InitialEnrollmentMode_MAX + 1;

enum DevicePairingResponse_StatusCode {
DevicePairingResponse_StatusCode_SUCCESS = 0,
DevicePairingResponse_StatusCode_FAILED = 1,
DevicePairingResponse_StatusCode_HOST_DEVICE_NOT_FOUND = 2,
DevicePairingResponse_StatusCode_CONTROLLER_DEVICE_NOT_FOUND = 3,
DevicePairingResponse_StatusCode_HOST_DEVICE_DEPROVISIONED = 4,
DevicePairingResponse_StatusCode_CONTROLLER_DEVICE_DEPROVISIONED = 5
};
POLICY_PROTO_EXPORT bool DevicePairingResponse_StatusCode_IsValid(int value);
const DevicePairingResponse_StatusCode DevicePairingResponse_StatusCode_StatusCode_MIN = DevicePairingResponse_StatusCode_SUCCESS;
const DevicePairingResponse_StatusCode DevicePairingResponse_StatusCode_StatusCode_MAX = DevicePairingResponse_StatusCode_CONTROLLER_DEVICE_DEPROVISIONED;
const int DevicePairingResponse_StatusCode_StatusCode_ARRAYSIZE = DevicePairingResponse_StatusCode_StatusCode_MAX + 1;

enum CheckDevicePairingResponse_StatusCode {
CheckDevicePairingResponse_StatusCode_PAIRED = 0,
CheckDevicePairingResponse_StatusCode_NOT_PAIRED = 1,
CheckDevicePairingResponse_StatusCode_HOST_DEVICE_NOT_FOUND = 2,
CheckDevicePairingResponse_StatusCode_CONTROLLER_DEVICE_NOT_FOUND = 3,
CheckDevicePairingResponse_StatusCode_HOST_DEVICE_DEPROVISIONED = 4,
CheckDevicePairingResponse_StatusCode_CONTROLLER_DEVICE_DEPROVISIONED = 5,
CheckDevicePairingResponse_StatusCode_INVALID_CONTROLLER_DEVICE_IDENTITY = 6
};
POLICY_PROTO_EXPORT bool CheckDevicePairingResponse_StatusCode_IsValid(int value);
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse_StatusCode_StatusCode_MIN = CheckDevicePairingResponse_StatusCode_PAIRED;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse_StatusCode_StatusCode_MAX = CheckDevicePairingResponse_StatusCode_INVALID_CONTROLLER_DEVICE_IDENTITY;
const int CheckDevicePairingResponse_StatusCode_StatusCode_ARRAYSIZE = CheckDevicePairingResponse_StatusCode_StatusCode_MAX + 1;

enum RemoteCommand_Type {
RemoteCommand_Type_COMMAND_ECHO_TEST = -1,
RemoteCommand_Type_DEVICE_REBOOT = 0,
RemoteCommand_Type_DEVICE_SCREENSHOT = 1,
RemoteCommand_Type_DEVICE_SET_VOLUME = 2,
RemoteCommand_Type_DEVICE_FETCH_STATUS = 3,
RemoteCommand_Type_USER_ARC_COMMAND = 4
};
POLICY_PROTO_EXPORT bool RemoteCommand_Type_IsValid(int value);
const RemoteCommand_Type RemoteCommand_Type_Type_MIN = RemoteCommand_Type_COMMAND_ECHO_TEST;
const RemoteCommand_Type RemoteCommand_Type_Type_MAX = RemoteCommand_Type_USER_ARC_COMMAND;
const int RemoteCommand_Type_Type_ARRAYSIZE = RemoteCommand_Type_Type_MAX + 1;

enum RemoteCommandResult_ResultType {
RemoteCommandResult_ResultType_RESULT_IGNORED = 0,
RemoteCommandResult_ResultType_RESULT_FAILURE = 1,
RemoteCommandResult_ResultType_RESULT_SUCCESS = 2
};
POLICY_PROTO_EXPORT bool RemoteCommandResult_ResultType_IsValid(int value);
const RemoteCommandResult_ResultType RemoteCommandResult_ResultType_ResultType_MIN = RemoteCommandResult_ResultType_RESULT_IGNORED;
const RemoteCommandResult_ResultType RemoteCommandResult_ResultType_ResultType_MAX = RemoteCommandResult_ResultType_RESULT_SUCCESS;
const int RemoteCommandResult_ResultType_ResultType_ARRAYSIZE = RemoteCommandResult_ResultType_ResultType_MAX + 1;

enum DeviceAttributeUpdatePermissionResponse_ResultType {
DeviceAttributeUpdatePermissionResponse_ResultType_ATTRIBUTE_UPDATE_DISALLOWED = 0,
DeviceAttributeUpdatePermissionResponse_ResultType_ATTRIBUTE_UPDATE_ALLOWED = 1
};
POLICY_PROTO_EXPORT bool DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(int value);
const DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse_ResultType_ResultType_MIN = DeviceAttributeUpdatePermissionResponse_ResultType_ATTRIBUTE_UPDATE_DISALLOWED;
const DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse_ResultType_ResultType_MAX = DeviceAttributeUpdatePermissionResponse_ResultType_ATTRIBUTE_UPDATE_ALLOWED;
const int DeviceAttributeUpdatePermissionResponse_ResultType_ResultType_ARRAYSIZE = DeviceAttributeUpdatePermissionResponse_ResultType_ResultType_MAX + 1;

enum DeviceAttributeUpdateResponse_ResultType {
DeviceAttributeUpdateResponse_ResultType_ATTRIBUTE_UPDATE_ERROR = 0,
DeviceAttributeUpdateResponse_ResultType_ATTRIBUTE_UPDATE_SUCCESS = 1
};
POLICY_PROTO_EXPORT bool DeviceAttributeUpdateResponse_ResultType_IsValid(int value);
const DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse_ResultType_ResultType_MIN = DeviceAttributeUpdateResponse_ResultType_ATTRIBUTE_UPDATE_ERROR;
const DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse_ResultType_ResultType_MAX = DeviceAttributeUpdateResponse_ResultType_ATTRIBUTE_UPDATE_SUCCESS;
const int DeviceAttributeUpdateResponse_ResultType_ResultType_ARRAYSIZE = DeviceAttributeUpdateResponse_ResultType_ResultType_MAX + 1;

enum CertificateBasedDeviceRegistrationData_CertificateType {
CertificateBasedDeviceRegistrationData_CertificateType_UNKNOWN = 0,
CertificateBasedDeviceRegistrationData_CertificateType_ENTERPRISE_ENROLLMENT_CERTIFICATE = 1
};
POLICY_PROTO_EXPORT bool CertificateBasedDeviceRegistrationData_CertificateType_IsValid(int value);
const CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData_CertificateType_CertificateType_MIN = CertificateBasedDeviceRegistrationData_CertificateType_UNKNOWN;
const CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData_CertificateType_CertificateType_MAX = CertificateBasedDeviceRegistrationData_CertificateType_ENTERPRISE_ENROLLMENT_CERTIFICATE;
const int CertificateBasedDeviceRegistrationData_CertificateType_CertificateType_ARRAYSIZE = CertificateBasedDeviceRegistrationData_CertificateType_CertificateType_MAX + 1;

enum CheckDeviceLicenseResponse_LicenseSelectionMode {
CheckDeviceLicenseResponse_LicenseSelectionMode_UNDEFINED = 0,
CheckDeviceLicenseResponse_LicenseSelectionMode_USER_SELECTION = 1,
CheckDeviceLicenseResponse_LicenseSelectionMode_ADMIN_SELECTION = 2
};
POLICY_PROTO_EXPORT bool CheckDeviceLicenseResponse_LicenseSelectionMode_IsValid(int value);
const CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse_LicenseSelectionMode_LicenseSelectionMode_MIN = CheckDeviceLicenseResponse_LicenseSelectionMode_UNDEFINED;
const CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse_LicenseSelectionMode_LicenseSelectionMode_MAX = CheckDeviceLicenseResponse_LicenseSelectionMode_ADMIN_SELECTION;
const int CheckDeviceLicenseResponse_LicenseSelectionMode_LicenseSelectionMode_ARRAYSIZE = CheckDeviceLicenseResponse_LicenseSelectionMode_LicenseSelectionMode_MAX + 1;

enum AppInstallReportLogEvent_EventType {
AppInstallReportLogEvent_EventType_LOG_EVENT_TYPE_UNKNOWN = 0,
AppInstallReportLogEvent_EventType_SERVER_REQUEST = 1,
AppInstallReportLogEvent_EventType_CLOUDDPC_REQUEST = 2,
AppInstallReportLogEvent_EventType_CLOUDDPS_REQUEST = 3,
AppInstallReportLogEvent_EventType_CLOUDDPS_RESPONSE = 4,
AppInstallReportLogEvent_EventType_PHONESKY_LOG = 5,
AppInstallReportLogEvent_EventType_SUCCESS = 6,
AppInstallReportLogEvent_EventType_CANCELED = 7,
AppInstallReportLogEvent_EventType_CONNECTIVITY_CHANGE = 8,
AppInstallReportLogEvent_EventType_SESSION_STATE_CHANGE = 9,
AppInstallReportLogEvent_EventType_INSTALLATION_STARTED = 10,
AppInstallReportLogEvent_EventType_INSTALLATION_FINISHED = 11,
AppInstallReportLogEvent_EventType_INSTALLATION_FAILED = 12
};
POLICY_PROTO_EXPORT bool AppInstallReportLogEvent_EventType_IsValid(int value);
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent_EventType_EventType_MIN = AppInstallReportLogEvent_EventType_LOG_EVENT_TYPE_UNKNOWN;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent_EventType_EventType_MAX = AppInstallReportLogEvent_EventType_INSTALLATION_FAILED;
const int AppInstallReportLogEvent_EventType_EventType_ARRAYSIZE = AppInstallReportLogEvent_EventType_EventType_MAX + 1;

enum AppInstallReportLogEvent_SessionStateChangeType {
AppInstallReportLogEvent_SessionStateChangeType_SESSION_STATE_CHANGE_TYPE_UNKNOWN = 0,
AppInstallReportLogEvent_SessionStateChangeType_LOGIN = 1,
AppInstallReportLogEvent_SessionStateChangeType_LOGOUT = 2,
AppInstallReportLogEvent_SessionStateChangeType_SUSPEND = 3,
AppInstallReportLogEvent_SessionStateChangeType_RESUME = 4
};
POLICY_PROTO_EXPORT bool AppInstallReportLogEvent_SessionStateChangeType_IsValid(int value);
const AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent_SessionStateChangeType_SessionStateChangeType_MIN = AppInstallReportLogEvent_SessionStateChangeType_SESSION_STATE_CHANGE_TYPE_UNKNOWN;
const AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent_SessionStateChangeType_SessionStateChangeType_MAX = AppInstallReportLogEvent_SessionStateChangeType_RESUME;
const int AppInstallReportLogEvent_SessionStateChangeType_SessionStateChangeType_ARRAYSIZE = AppInstallReportLogEvent_SessionStateChangeType_SessionStateChangeType_MAX + 1;

enum DeviceManagementResponse_ErrorCode {
DeviceManagementResponse_ErrorCode_SUCCESS = 0,
DeviceManagementResponse_ErrorCode_DEVICE_MANAGEMENT_NOT_SUPPORTED = 1,
DeviceManagementResponse_ErrorCode_DEVICE_NOT_FOUND = 2,
DeviceManagementResponse_ErrorCode_DEVICE_MANAGEMENT_TOKEN_INVALID = 3,
DeviceManagementResponse_ErrorCode_ACTIVATION_PENDING = 4,
DeviceManagementResponse_ErrorCode_POLICY_NOT_FOUND = 5
};
POLICY_PROTO_EXPORT bool DeviceManagementResponse_ErrorCode_IsValid(int value);
const DeviceManagementResponse_ErrorCode DeviceManagementResponse_ErrorCode_ErrorCode_MIN = DeviceManagementResponse_ErrorCode_SUCCESS;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse_ErrorCode_ErrorCode_MAX = DeviceManagementResponse_ErrorCode_POLICY_NOT_FOUND;
const int DeviceManagementResponse_ErrorCode_ErrorCode_ARRAYSIZE = DeviceManagementResponse_ErrorCode_ErrorCode_MAX + 1;

// ===================================================================

class POLICY_PROTO_EXPORT LicenseType : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.LicenseType) */ {
public:
LicenseType();
virtual ~LicenseType();

LicenseType(const LicenseType& from);

inline LicenseType& operator=(const LicenseType& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const LicenseType& default_instance();

static inline const LicenseType* internal_default_instance() {
return reinterpret_cast<const LicenseType*>(
&_LicenseType_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
0;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(LicenseType* other);

// implements Message ----------------------------------------------

inline LicenseType* New() const PROTOBUF_FINAL { return New(NULL); }

LicenseType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const LicenseType& from);
void MergeFrom(const LicenseType& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(LicenseType* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef LicenseType_LicenseTypeEnum LicenseTypeEnum;
static const LicenseTypeEnum UNDEFINED =
LicenseType_LicenseTypeEnum_UNDEFINED;
static const LicenseTypeEnum CDM_PERPETUAL =
LicenseType_LicenseTypeEnum_CDM_PERPETUAL;
static const LicenseTypeEnum CDM_ANNUAL =
LicenseType_LicenseTypeEnum_CDM_ANNUAL;
static const LicenseTypeEnum KIOSK =
LicenseType_LicenseTypeEnum_KIOSK;
static inline bool LicenseTypeEnum_IsValid(int value) {
return LicenseType_LicenseTypeEnum_IsValid(value);
}
static const LicenseTypeEnum LicenseTypeEnum_MIN =
LicenseType_LicenseTypeEnum_LicenseTypeEnum_MIN;
static const LicenseTypeEnum LicenseTypeEnum_MAX =
LicenseType_LicenseTypeEnum_LicenseTypeEnum_MAX;
static const int LicenseTypeEnum_ARRAYSIZE =
LicenseType_LicenseTypeEnum_LicenseTypeEnum_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional .enterprise_management.LicenseType.LicenseTypeEnum license_type = 1;
bool has_license_type() const;
void clear_license_type();
static const int kLicenseTypeFieldNumber = 1;
::enterprise_management::LicenseType_LicenseTypeEnum license_type() const;
void set_license_type(::enterprise_management::LicenseType_LicenseTypeEnum value);

// @@protoc_insertion_point(class_scope:enterprise_management.LicenseType)
private:
void set_has_license_type();
void clear_has_license_type();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
int license_type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT SignedData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SignedData) */ {
public:
SignedData();
virtual ~SignedData();

SignedData(const SignedData& from);

inline SignedData& operator=(const SignedData& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const SignedData& default_instance();

static inline const SignedData* internal_default_instance() {
return reinterpret_cast<const SignedData*>(
&_SignedData_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
1;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(SignedData* other);

// implements Message ----------------------------------------------

inline SignedData* New() const PROTOBUF_FINAL { return New(NULL); }

SignedData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const SignedData& from);
void MergeFrom(const SignedData& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(SignedData* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional bytes data = 1;
bool has_data() const;
void clear_data();
static const int kDataFieldNumber = 1;
const ::std::string& data() const;
void set_data(const ::std::string& value);
#if LANG_CXX11
void set_data(::std::string&& value);
#endif
void set_data(const char* value);
void set_data(const void* value, size_t size);
::std::string* mutable_data();
::std::string* release_data();
void set_allocated_data(::std::string* data);

// optional bytes signature = 2;
bool has_signature() const;
void clear_signature();
static const int kSignatureFieldNumber = 2;
const ::std::string& signature() const;
void set_signature(const ::std::string& value);
#if LANG_CXX11
void set_signature(::std::string&& value);
#endif
void set_signature(const char* value);
void set_signature(const void* value, size_t size);
::std::string* mutable_signature();
::std::string* release_signature();
void set_allocated_signature(::std::string* signature);

// optional int32 extra_data_bytes = 3;
bool has_extra_data_bytes() const;
void clear_extra_data_bytes();
static const int kExtraDataBytesFieldNumber = 3;
::google::protobuf::int32 extra_data_bytes() const;
void set_extra_data_bytes(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.SignedData)
private:
void set_has_data();
void clear_has_data();
void set_has_signature();
void clear_has_signature();
void set_has_extra_data_bytes();
void clear_has_extra_data_bytes();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr data_;
::google::protobuf::internal::ArenaStringPtr signature_;
::google::protobuf::int32 extra_data_bytes_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceRegisterRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceRegisterRequest) */ {
public:
DeviceRegisterRequest();
virtual ~DeviceRegisterRequest();

DeviceRegisterRequest(const DeviceRegisterRequest& from);

inline DeviceRegisterRequest& operator=(const DeviceRegisterRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceRegisterRequest& default_instance();

static inline const DeviceRegisterRequest* internal_default_instance() {
return reinterpret_cast<const DeviceRegisterRequest*>(
&_DeviceRegisterRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
2;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceRegisterRequest* other);

// implements Message ----------------------------------------------

inline DeviceRegisterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceRegisterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceRegisterRequest& from);
void MergeFrom(const DeviceRegisterRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceRegisterRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceRegisterRequest_Type Type;
static const Type TT =
DeviceRegisterRequest_Type_TT;
static const Type USER =
DeviceRegisterRequest_Type_USER;
static const Type DEVICE =
DeviceRegisterRequest_Type_DEVICE;
static const Type BROWSER =
DeviceRegisterRequest_Type_BROWSER;
static const Type ANDROID_BROWSER =
DeviceRegisterRequest_Type_ANDROID_BROWSER;
static const Type IOS_BROWSER =
DeviceRegisterRequest_Type_IOS_BROWSER;
static inline bool Type_IsValid(int value) {
return DeviceRegisterRequest_Type_IsValid(value);
}
static const Type Type_MIN =
DeviceRegisterRequest_Type_Type_MIN;
static const Type Type_MAX =
DeviceRegisterRequest_Type_Type_MAX;
static const int Type_ARRAYSIZE =
DeviceRegisterRequest_Type_Type_ARRAYSIZE;

typedef DeviceRegisterRequest_Flavor Flavor;
static const Flavor FLAVOR_ENROLLMENT_MANUAL =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_MANUAL;
static const Flavor FLAVOR_ENROLLMENT_MANUAL_RENEW =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_MANUAL_RENEW;
static const Flavor FLAVOR_ENROLLMENT_LOCAL_FORCED =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_LOCAL_FORCED;
static const Flavor FLAVOR_ENROLLMENT_LOCAL_ADVERTISED =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_LOCAL_ADVERTISED;
static const Flavor FLAVOR_ENROLLMENT_SERVER_FORCED =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_SERVER_FORCED;
static const Flavor FLAVOR_ENROLLMENT_SERVER_ADVERTISED =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_SERVER_ADVERTISED;
static const Flavor FLAVOR_ENROLLMENT_RECOVERY =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_RECOVERY;
static const Flavor FLAVOR_USER_REGISTRATION =
DeviceRegisterRequest_Flavor_FLAVOR_USER_REGISTRATION;
static const Flavor FLAVOR_ENROLLMENT_ATTESTATION =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_ATTESTATION;
static const Flavor FLAVOR_ENROLLMENT_ATTESTATION_LOCAL_FORCED =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_ATTESTATION_LOCAL_FORCED;
static const Flavor FLAVOR_ENROLLMENT_ATTESTATION_SERVER_FORCED =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_ATTESTATION_SERVER_FORCED;
static const Flavor FLAVOR_ENROLLMENT_ATTESTATION_MANUAL_FALLBACK =
DeviceRegisterRequest_Flavor_FLAVOR_ENROLLMENT_ATTESTATION_MANUAL_FALLBACK;
static inline bool Flavor_IsValid(int value) {
return DeviceRegisterRequest_Flavor_IsValid(value);
}
static const Flavor Flavor_MIN =
DeviceRegisterRequest_Flavor_Flavor_MIN;
static const Flavor Flavor_MAX =
DeviceRegisterRequest_Flavor_Flavor_MAX;
static const int Flavor_ARRAYSIZE =
DeviceRegisterRequest_Flavor_Flavor_ARRAYSIZE;

typedef DeviceRegisterRequest_Lifetime Lifetime;
static const Lifetime LIFETIME_UNDEFINED =
DeviceRegisterRequest_Lifetime_LIFETIME_UNDEFINED;
static const Lifetime LIFETIME_INDEFINITE =
DeviceRegisterRequest_Lifetime_LIFETIME_INDEFINITE;
static const Lifetime LIFETIME_EPHEMERAL_USER =
DeviceRegisterRequest_Lifetime_LIFETIME_EPHEMERAL_USER;
static inline bool Lifetime_IsValid(int value) {
return DeviceRegisterRequest_Lifetime_IsValid(value);
}
static const Lifetime Lifetime_MIN =
DeviceRegisterRequest_Lifetime_Lifetime_MIN;
static const Lifetime Lifetime_MAX =
DeviceRegisterRequest_Lifetime_Lifetime_MAX;
static const int Lifetime_ARRAYSIZE =
DeviceRegisterRequest_Lifetime_Lifetime_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string machine_id = 3;
bool has_machine_id() const;
void clear_machine_id();
static const int kMachineIdFieldNumber = 3;
const ::std::string& machine_id() const;
void set_machine_id(const ::std::string& value);
#if LANG_CXX11
void set_machine_id(::std::string&& value);
#endif
void set_machine_id(const char* value);
void set_machine_id(const char* value, size_t size);
::std::string* mutable_machine_id();
::std::string* release_machine_id();
void set_allocated_machine_id(::std::string* machine_id);

// optional string machine_model = 4;
bool has_machine_model() const;
void clear_machine_model();
static const int kMachineModelFieldNumber = 4;
const ::std::string& machine_model() const;
void set_machine_model(const ::std::string& value);
#if LANG_CXX11
void set_machine_model(::std::string&& value);
#endif
void set_machine_model(const char* value);
void set_machine_model(const char* value, size_t size);
::std::string* mutable_machine_model();
::std::string* release_machine_model();
void set_allocated_machine_model(::std::string* machine_model);

// optional string requisition = 6;
bool has_requisition() const;
void clear_requisition();
static const int kRequisitionFieldNumber = 6;
const ::std::string& requisition() const;
void set_requisition(const ::std::string& value);
#if LANG_CXX11
void set_requisition(::std::string&& value);
#endif
void set_requisition(const char* value);
void set_requisition(const char* value, size_t size);
::std::string* mutable_requisition();
::std::string* release_requisition();
void set_allocated_requisition(::std::string* requisition);

// optional bytes server_backed_state_key = 7;
bool has_server_backed_state_key() const;
void clear_server_backed_state_key();
static const int kServerBackedStateKeyFieldNumber = 7;
const ::std::string& server_backed_state_key() const;
void set_server_backed_state_key(const ::std::string& value);
#if LANG_CXX11
void set_server_backed_state_key(::std::string&& value);
#endif
void set_server_backed_state_key(const char* value);
void set_server_backed_state_key(const void* value, size_t size);
::std::string* mutable_server_backed_state_key();
::std::string* release_server_backed_state_key();
void set_allocated_server_backed_state_key(::std::string* server_backed_state_key);

// optional string brand_code = 12;
bool has_brand_code() const;
void clear_brand_code();
static const int kBrandCodeFieldNumber = 12;
const ::std::string& brand_code() const;
void set_brand_code(const ::std::string& value);
#if LANG_CXX11
void set_brand_code(::std::string&& value);
#endif
void set_brand_code(const char* value);
void set_brand_code(const char* value, size_t size);
::std::string* mutable_brand_code();
::std::string* release_brand_code();
void set_allocated_brand_code(::std::string* brand_code);

// optional .enterprise_management.LicenseType license_type = 9;
bool has_license_type() const;
void clear_license_type();
static const int kLicenseTypeFieldNumber = 9;
const ::enterprise_management::LicenseType& license_type() const;
::enterprise_management::LicenseType* mutable_license_type();
::enterprise_management::LicenseType* release_license_type();
void set_allocated_license_type(::enterprise_management::LicenseType* license_type);

// optional bool reregister = 1;
bool has_reregister() const;
void clear_reregister();
static const int kReregisterFieldNumber = 1;
bool reregister() const;
void set_reregister(bool value);

// optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
bool has_type() const;
void clear_type();
static const int kTypeFieldNumber = 2;
::enterprise_management::DeviceRegisterRequest_Type type() const;
void set_type(::enterprise_management::DeviceRegisterRequest_Type value);

// optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
bool has_flavor() const;
void clear_flavor();
static const int kFlavorFieldNumber = 8;
::enterprise_management::DeviceRegisterRequest_Flavor flavor() const;
void set_flavor(::enterprise_management::DeviceRegisterRequest_Flavor value);

// optional .enterprise_management.DeviceRegisterRequest.Lifetime lifetime = 11 [default = LIFETIME_INDEFINITE];
bool has_lifetime() const;
void clear_lifetime();
static const int kLifetimeFieldNumber = 11;
::enterprise_management::DeviceRegisterRequest_Lifetime lifetime() const;
void set_lifetime(::enterprise_management::DeviceRegisterRequest_Lifetime value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceRegisterRequest)
private:
void set_has_reregister();
void clear_has_reregister();
void set_has_type();
void clear_has_type();
void set_has_machine_id();
void clear_has_machine_id();
void set_has_machine_model();
void clear_has_machine_model();
void set_has_requisition();
void clear_has_requisition();
void set_has_server_backed_state_key();
void clear_has_server_backed_state_key();
void set_has_flavor();
void clear_has_flavor();
void set_has_license_type();
void clear_has_license_type();
void set_has_lifetime();
void clear_has_lifetime();
void set_has_brand_code();
void clear_has_brand_code();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr machine_id_;
::google::protobuf::internal::ArenaStringPtr machine_model_;
::google::protobuf::internal::ArenaStringPtr requisition_;
::google::protobuf::internal::ArenaStringPtr server_backed_state_key_;
::google::protobuf::internal::ArenaStringPtr brand_code_;
::enterprise_management::LicenseType* license_type_;
bool reregister_;
int type_;
int flavor_;
int lifetime_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceRegisterResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceRegisterResponse) */ {
public:
DeviceRegisterResponse();
virtual ~DeviceRegisterResponse();

DeviceRegisterResponse(const DeviceRegisterResponse& from);

inline DeviceRegisterResponse& operator=(const DeviceRegisterResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceRegisterResponse& default_instance();

static inline const DeviceRegisterResponse* internal_default_instance() {
return reinterpret_cast<const DeviceRegisterResponse*>(
&_DeviceRegisterResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
3;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceRegisterResponse* other);

// implements Message ----------------------------------------------

inline DeviceRegisterResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceRegisterResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceRegisterResponse& from);
void MergeFrom(const DeviceRegisterResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceRegisterResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceRegisterResponse_DeviceMode DeviceMode;
static const DeviceMode ENTERPRISE =
DeviceRegisterResponse_DeviceMode_ENTERPRISE;
static const DeviceMode RETAIL =
DeviceRegisterResponse_DeviceMode_RETAIL;
static const DeviceMode CHROME_AD =
DeviceRegisterResponse_DeviceMode_CHROME_AD;
static inline bool DeviceMode_IsValid(int value) {
return DeviceRegisterResponse_DeviceMode_IsValid(value);
}
static const DeviceMode DeviceMode_MIN =
DeviceRegisterResponse_DeviceMode_DeviceMode_MIN;
static const DeviceMode DeviceMode_MAX =
DeviceRegisterResponse_DeviceMode_DeviceMode_MAX;
static const int DeviceMode_ARRAYSIZE =
DeviceRegisterResponse_DeviceMode_DeviceMode_ARRAYSIZE;

// accessors -------------------------------------------------------

// repeated string user_affiliation_ids = 5;
int user_affiliation_ids_size() const;
void clear_user_affiliation_ids();
static const int kUserAffiliationIdsFieldNumber = 5;
const ::std::string& user_affiliation_ids(int index) const;
::std::string* mutable_user_affiliation_ids(int index);
void set_user_affiliation_ids(int index, const ::std::string& value);
#if LANG_CXX11
void set_user_affiliation_ids(int index, ::std::string&& value);
#endif
void set_user_affiliation_ids(int index, const char* value);
void set_user_affiliation_ids(int index, const char* value, size_t size);
::std::string* add_user_affiliation_ids();
void add_user_affiliation_ids(const ::std::string& value);
#if LANG_CXX11
void add_user_affiliation_ids(::std::string&& value);
#endif
void add_user_affiliation_ids(const char* value);
void add_user_affiliation_ids(const char* value, size_t size);
const ::google::protobuf::RepeatedPtrField< ::std::string>& user_affiliation_ids() const;
::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_affiliation_ids();

// required string device_management_token = 1;
bool has_device_management_token() const;
void clear_device_management_token();
static const int kDeviceManagementTokenFieldNumber = 1;
const ::std::string& device_management_token() const;
void set_device_management_token(const ::std::string& value);
#if LANG_CXX11
void set_device_management_token(::std::string&& value);
#endif
void set_device_management_token(const char* value);
void set_device_management_token(const char* value, size_t size);
::std::string* mutable_device_management_token();
::std::string* release_device_management_token();
void set_allocated_device_management_token(::std::string* device_management_token);

// optional string machine_name = 2;
bool has_machine_name() const;
void clear_machine_name();
static const int kMachineNameFieldNumber = 2;
const ::std::string& machine_name() const;
void set_machine_name(const ::std::string& value);
#if LANG_CXX11
void set_machine_name(::std::string&& value);
#endif
void set_machine_name(const char* value);
void set_machine_name(const char* value, size_t size);
::std::string* mutable_machine_name();
::std::string* release_machine_name();
void set_allocated_machine_name(::std::string* machine_name);

// optional string configuration_seed = 4;
bool has_configuration_seed() const;
void clear_configuration_seed();
static const int kConfigurationSeedFieldNumber = 4;
const ::std::string& configuration_seed() const;
void set_configuration_seed(const ::std::string& value);
#if LANG_CXX11
void set_configuration_seed(::std::string&& value);
#endif
void set_configuration_seed(const char* value);
void set_configuration_seed(const char* value, size_t size);
::std::string* mutable_configuration_seed();
::std::string* release_configuration_seed();
void set_allocated_configuration_seed(::std::string* configuration_seed);

// optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
bool has_enrollment_type() const;
void clear_enrollment_type();
static const int kEnrollmentTypeFieldNumber = 3;
::enterprise_management::DeviceRegisterResponse_DeviceMode enrollment_type() const;
void set_enrollment_type(::enterprise_management::DeviceRegisterResponse_DeviceMode value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceRegisterResponse)
private:
void set_has_device_management_token();
void clear_has_device_management_token();
void set_has_machine_name();
void clear_has_machine_name();
void set_has_enrollment_type();
void clear_has_enrollment_type();
void set_has_configuration_seed();
void clear_has_configuration_seed();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::std::string> user_affiliation_ids_;
::google::protobuf::internal::ArenaStringPtr device_management_token_;
::google::protobuf::internal::ArenaStringPtr machine_name_;
::google::protobuf::internal::ArenaStringPtr configuration_seed_;
int enrollment_type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceUnregisterRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceUnregisterRequest) */ {
public:
DeviceUnregisterRequest();
virtual ~DeviceUnregisterRequest();

DeviceUnregisterRequest(const DeviceUnregisterRequest& from);

inline DeviceUnregisterRequest& operator=(const DeviceUnregisterRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceUnregisterRequest& default_instance();

static inline const DeviceUnregisterRequest* internal_default_instance() {
return reinterpret_cast<const DeviceUnregisterRequest*>(
&_DeviceUnregisterRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
4;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceUnregisterRequest* other);

// implements Message ----------------------------------------------

inline DeviceUnregisterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceUnregisterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceUnregisterRequest& from);
void MergeFrom(const DeviceUnregisterRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceUnregisterRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceUnregisterRequest)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceUnregisterResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceUnregisterResponse) */ {
public:
DeviceUnregisterResponse();
virtual ~DeviceUnregisterResponse();

DeviceUnregisterResponse(const DeviceUnregisterResponse& from);

inline DeviceUnregisterResponse& operator=(const DeviceUnregisterResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceUnregisterResponse& default_instance();

static inline const DeviceUnregisterResponse* internal_default_instance() {
return reinterpret_cast<const DeviceUnregisterResponse*>(
&_DeviceUnregisterResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
5;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceUnregisterResponse* other);

// implements Message ----------------------------------------------

inline DeviceUnregisterResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceUnregisterResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceUnregisterResponse& from);
void MergeFrom(const DeviceUnregisterResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceUnregisterResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceUnregisterResponse)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceCertUploadRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceCertUploadRequest) */ {
public:
DeviceCertUploadRequest();
virtual ~DeviceCertUploadRequest();

DeviceCertUploadRequest(const DeviceCertUploadRequest& from);

inline DeviceCertUploadRequest& operator=(const DeviceCertUploadRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceCertUploadRequest& default_instance();

static inline const DeviceCertUploadRequest* internal_default_instance() {
return reinterpret_cast<const DeviceCertUploadRequest*>(
&_DeviceCertUploadRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
6;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceCertUploadRequest* other);

// implements Message ----------------------------------------------

inline DeviceCertUploadRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceCertUploadRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceCertUploadRequest& from);
void MergeFrom(const DeviceCertUploadRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceCertUploadRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceCertUploadRequest_CertificateType CertificateType;
static const CertificateType CERTIFICATE_TYPE_UNSPECIFIED =
DeviceCertUploadRequest_CertificateType_CERTIFICATE_TYPE_UNSPECIFIED;
static const CertificateType ENTERPRISE_MACHINE_CERTIFICATE =
DeviceCertUploadRequest_CertificateType_ENTERPRISE_MACHINE_CERTIFICATE;
static const CertificateType ENTERPRISE_ENROLLMENT_CERTIFICATE =
DeviceCertUploadRequest_CertificateType_ENTERPRISE_ENROLLMENT_CERTIFICATE;
static inline bool CertificateType_IsValid(int value) {
return DeviceCertUploadRequest_CertificateType_IsValid(value);
}
static const CertificateType CertificateType_MIN =
DeviceCertUploadRequest_CertificateType_CertificateType_MIN;
static const CertificateType CertificateType_MAX =
DeviceCertUploadRequest_CertificateType_CertificateType_MAX;
static const int CertificateType_ARRAYSIZE =
DeviceCertUploadRequest_CertificateType_CertificateType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional bytes device_certificate = 1;
bool has_device_certificate() const;
void clear_device_certificate();
static const int kDeviceCertificateFieldNumber = 1;
const ::std::string& device_certificate() const;
void set_device_certificate(const ::std::string& value);
#if LANG_CXX11
void set_device_certificate(::std::string&& value);
#endif
void set_device_certificate(const char* value);
void set_device_certificate(const void* value, size_t size);
::std::string* mutable_device_certificate();
::std::string* release_device_certificate();
void set_allocated_device_certificate(::std::string* device_certificate);

// optional string enrollment_id = 3;
bool has_enrollment_id() const;
void clear_enrollment_id();
static const int kEnrollmentIdFieldNumber = 3;
const ::std::string& enrollment_id() const;
void set_enrollment_id(const ::std::string& value);
#if LANG_CXX11
void set_enrollment_id(::std::string&& value);
#endif
void set_enrollment_id(const char* value);
void set_enrollment_id(const char* value, size_t size);
::std::string* mutable_enrollment_id();
::std::string* release_enrollment_id();
void set_allocated_enrollment_id(::std::string* enrollment_id);

// optional .enterprise_management.DeviceCertUploadRequest.CertificateType certificate_type = 2;
bool has_certificate_type() const;
void clear_certificate_type();
static const int kCertificateTypeFieldNumber = 2;
::enterprise_management::DeviceCertUploadRequest_CertificateType certificate_type() const;
void set_certificate_type(::enterprise_management::DeviceCertUploadRequest_CertificateType value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceCertUploadRequest)
private:
void set_has_device_certificate();
void clear_has_device_certificate();
void set_has_certificate_type();
void clear_has_certificate_type();
void set_has_enrollment_id();
void clear_has_enrollment_id();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr device_certificate_;
::google::protobuf::internal::ArenaStringPtr enrollment_id_;
int certificate_type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceCertUploadResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceCertUploadResponse) */ {
public:
DeviceCertUploadResponse();
virtual ~DeviceCertUploadResponse();

DeviceCertUploadResponse(const DeviceCertUploadResponse& from);

inline DeviceCertUploadResponse& operator=(const DeviceCertUploadResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceCertUploadResponse& default_instance();

static inline const DeviceCertUploadResponse* internal_default_instance() {
return reinterpret_cast<const DeviceCertUploadResponse*>(
&_DeviceCertUploadResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
7;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceCertUploadResponse* other);

// implements Message ----------------------------------------------

inline DeviceCertUploadResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceCertUploadResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceCertUploadResponse& from);
void MergeFrom(const DeviceCertUploadResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceCertUploadResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceCertUploadResponse)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceServiceApiAccessRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceServiceApiAccessRequest) */ {
public:
DeviceServiceApiAccessRequest();
virtual ~DeviceServiceApiAccessRequest();

DeviceServiceApiAccessRequest(const DeviceServiceApiAccessRequest& from);

inline DeviceServiceApiAccessRequest& operator=(const DeviceServiceApiAccessRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceServiceApiAccessRequest& default_instance();

static inline const DeviceServiceApiAccessRequest* internal_default_instance() {
return reinterpret_cast<const DeviceServiceApiAccessRequest*>(
&_DeviceServiceApiAccessRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
8;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceServiceApiAccessRequest* other);

// implements Message ----------------------------------------------

inline DeviceServiceApiAccessRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceServiceApiAccessRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceServiceApiAccessRequest& from);
void MergeFrom(const DeviceServiceApiAccessRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceServiceApiAccessRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceServiceApiAccessRequest_DeviceType DeviceType;
static const DeviceType CHROME_OS =
DeviceServiceApiAccessRequest_DeviceType_CHROME_OS;
static const DeviceType ANDROID_OS =
DeviceServiceApiAccessRequest_DeviceType_ANDROID_OS;
static inline bool DeviceType_IsValid(int value) {
return DeviceServiceApiAccessRequest_DeviceType_IsValid(value);
}
static const DeviceType DeviceType_MIN =
DeviceServiceApiAccessRequest_DeviceType_DeviceType_MIN;
static const DeviceType DeviceType_MAX =
DeviceServiceApiAccessRequest_DeviceType_DeviceType_MAX;
static const int DeviceType_ARRAYSIZE =
DeviceServiceApiAccessRequest_DeviceType_DeviceType_ARRAYSIZE;

// accessors -------------------------------------------------------

// repeated string auth_scope = 1;
int auth_scope_size() const;
void clear_auth_scope();
static const int kAuthScopeFieldNumber = 1;
const ::std::string& auth_scope(int index) const;
::std::string* mutable_auth_scope(int index);
void set_auth_scope(int index, const ::std::string& value);
#if LANG_CXX11
void set_auth_scope(int index, ::std::string&& value);
#endif
void set_auth_scope(int index, const char* value);
void set_auth_scope(int index, const char* value, size_t size);
::std::string* add_auth_scope();
void add_auth_scope(const ::std::string& value);
#if LANG_CXX11
void add_auth_scope(::std::string&& value);
#endif
void add_auth_scope(const char* value);
void add_auth_scope(const char* value, size_t size);
const ::google::protobuf::RepeatedPtrField< ::std::string>& auth_scope() const;
::google::protobuf::RepeatedPtrField< ::std::string>* mutable_auth_scope();

// optional string oauth2_client_id = 2;
bool has_oauth2_client_id() const;
void clear_oauth2_client_id();
static const int kOauth2ClientIdFieldNumber = 2;
const ::std::string& oauth2_client_id() const;
void set_oauth2_client_id(const ::std::string& value);
#if LANG_CXX11
void set_oauth2_client_id(::std::string&& value);
#endif
void set_oauth2_client_id(const char* value);
void set_oauth2_client_id(const char* value, size_t size);
::std::string* mutable_oauth2_client_id();
::std::string* release_oauth2_client_id();
void set_allocated_oauth2_client_id(::std::string* oauth2_client_id);

// optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
bool has_device_type() const;
void clear_device_type();
static const int kDeviceTypeFieldNumber = 3;
::enterprise_management::DeviceServiceApiAccessRequest_DeviceType device_type() const;
void set_device_type(::enterprise_management::DeviceServiceApiAccessRequest_DeviceType value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceServiceApiAccessRequest)
private:
void set_has_oauth2_client_id();
void clear_has_oauth2_client_id();
void set_has_device_type();
void clear_has_device_type();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::std::string> auth_scope_;
::google::protobuf::internal::ArenaStringPtr oauth2_client_id_;
int device_type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceServiceApiAccessResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceServiceApiAccessResponse) */ {
public:
DeviceServiceApiAccessResponse();
virtual ~DeviceServiceApiAccessResponse();

DeviceServiceApiAccessResponse(const DeviceServiceApiAccessResponse& from);

inline DeviceServiceApiAccessResponse& operator=(const DeviceServiceApiAccessResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceServiceApiAccessResponse& default_instance();

static inline const DeviceServiceApiAccessResponse* internal_default_instance() {
return reinterpret_cast<const DeviceServiceApiAccessResponse*>(
&_DeviceServiceApiAccessResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
9;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceServiceApiAccessResponse* other);

// implements Message ----------------------------------------------

inline DeviceServiceApiAccessResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceServiceApiAccessResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceServiceApiAccessResponse& from);
void MergeFrom(const DeviceServiceApiAccessResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceServiceApiAccessResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string auth_code = 1;
bool has_auth_code() const;
void clear_auth_code();
static const int kAuthCodeFieldNumber = 1;
const ::std::string& auth_code() const;
void set_auth_code(const ::std::string& value);
#if LANG_CXX11
void set_auth_code(::std::string&& value);
#endif
void set_auth_code(const char* value);
void set_auth_code(const char* value, size_t size);
::std::string* mutable_auth_code();
::std::string* release_auth_code();
void set_allocated_auth_code(::std::string* auth_code);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceServiceApiAccessResponse)
private:
void set_has_auth_code();
void clear_has_auth_code();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr auth_code_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT PolicyFetchRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PolicyFetchRequest) */ {
public:
PolicyFetchRequest();
virtual ~PolicyFetchRequest();

PolicyFetchRequest(const PolicyFetchRequest& from);

inline PolicyFetchRequest& operator=(const PolicyFetchRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const PolicyFetchRequest& default_instance();

static inline const PolicyFetchRequest* internal_default_instance() {
return reinterpret_cast<const PolicyFetchRequest*>(
&_PolicyFetchRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
10;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(PolicyFetchRequest* other);

// implements Message ----------------------------------------------

inline PolicyFetchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

PolicyFetchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const PolicyFetchRequest& from);
void MergeFrom(const PolicyFetchRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PolicyFetchRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef PolicyFetchRequest_SignatureType SignatureType;
static const SignatureType NONE =
PolicyFetchRequest_SignatureType_NONE;
static const SignatureType SHA1_RSA =
PolicyFetchRequest_SignatureType_SHA1_RSA;
static inline bool SignatureType_IsValid(int value) {
return PolicyFetchRequest_SignatureType_IsValid(value);
}
static const SignatureType SignatureType_MIN =
PolicyFetchRequest_SignatureType_SignatureType_MIN;
static const SignatureType SignatureType_MAX =
PolicyFetchRequest_SignatureType_SignatureType_MAX;
static const int SignatureType_ARRAYSIZE =
PolicyFetchRequest_SignatureType_SignatureType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string policy_type = 1;
bool has_policy_type() const;
void clear_policy_type();
static const int kPolicyTypeFieldNumber = 1;
const ::std::string& policy_type() const;
void set_policy_type(const ::std::string& value);
#if LANG_CXX11
void set_policy_type(::std::string&& value);
#endif
void set_policy_type(const char* value);
void set_policy_type(const char* value, size_t size);
::std::string* mutable_policy_type();
::std::string* release_policy_type();
void set_allocated_policy_type(::std::string* policy_type);

// optional string settings_entity_id = 6;
bool has_settings_entity_id() const;
void clear_settings_entity_id();
static const int kSettingsEntityIdFieldNumber = 6;
const ::std::string& settings_entity_id() const;
void set_settings_entity_id(const ::std::string& value);
#if LANG_CXX11
void set_settings_entity_id(::std::string&& value);
#endif
void set_settings_entity_id(const char* value);
void set_settings_entity_id(const char* value, size_t size);
::std::string* mutable_settings_entity_id();
::std::string* release_settings_entity_id();
void set_allocated_settings_entity_id(::std::string* settings_entity_id);

// optional bytes invalidation_payload = 8;
bool has_invalidation_payload() const;
void clear_invalidation_payload();
static const int kInvalidationPayloadFieldNumber = 8;
const ::std::string& invalidation_payload() const;
void set_invalidation_payload(const ::std::string& value);
#if LANG_CXX11
void set_invalidation_payload(::std::string&& value);
#endif
void set_invalidation_payload(const char* value);
void set_invalidation_payload(const void* value, size_t size);
::std::string* mutable_invalidation_payload();
::std::string* release_invalidation_payload();
void set_allocated_invalidation_payload(::std::string* invalidation_payload);

// optional string verification_key_hash = 9;
bool has_verification_key_hash() const;
void clear_verification_key_hash();
static const int kVerificationKeyHashFieldNumber = 9;
const ::std::string& verification_key_hash() const;
void set_verification_key_hash(const ::std::string& value);
#if LANG_CXX11
void set_verification_key_hash(::std::string&& value);
#endif
void set_verification_key_hash(const char* value);
void set_verification_key_hash(const char* value, size_t size);
::std::string* mutable_verification_key_hash();
::std::string* release_verification_key_hash();
void set_allocated_verification_key_hash(::std::string* verification_key_hash);

// optional string policy_invalidation_info = 10;
bool has_policy_invalidation_info() const;
void clear_policy_invalidation_info();
static const int kPolicyInvalidationInfoFieldNumber = 10;
const ::std::string& policy_invalidation_info() const;
void set_policy_invalidation_info(const ::std::string& value);
#if LANG_CXX11
void set_policy_invalidation_info(::std::string&& value);
#endif
void set_policy_invalidation_info(const char* value);
void set_policy_invalidation_info(const char* value, size_t size);
::std::string* mutable_policy_invalidation_info();
::std::string* release_policy_invalidation_info();
void set_allocated_policy_invalidation_info(::std::string* policy_invalidation_info);

// optional string device_dm_token = 12;
bool has_device_dm_token() const;
void clear_device_dm_token();
static const int kDeviceDmTokenFieldNumber = 12;
const ::std::string& device_dm_token() const;
void set_device_dm_token(const ::std::string& value);
#if LANG_CXX11
void set_device_dm_token(::std::string&& value);
#endif
void set_device_dm_token(const char* value);
void set_device_dm_token(const char* value, size_t size);
::std::string* mutable_device_dm_token();
::std::string* release_device_dm_token();
void set_allocated_device_dm_token(::std::string* device_dm_token);

// optional int64 timestamp = 2;
bool has_timestamp() const;
void clear_timestamp();
static const int kTimestampFieldNumber = 2;
::google::protobuf::int64 timestamp() const;
void set_timestamp(::google::protobuf::int64 value);

// optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
bool has_signature_type() const;
void clear_signature_type();
static const int kSignatureTypeFieldNumber = 3;
::enterprise_management::PolicyFetchRequest_SignatureType signature_type() const;
void set_signature_type(::enterprise_management::PolicyFetchRequest_SignatureType value);

// optional int32 public_key_version = 4;
bool has_public_key_version() const;
void clear_public_key_version();
static const int kPublicKeyVersionFieldNumber = 4;
::google::protobuf::int32 public_key_version() const;
void set_public_key_version(::google::protobuf::int32 value);

// optional int64 invalidation_version = 7;
bool has_invalidation_version() const;
void clear_invalidation_version();
static const int kInvalidationVersionFieldNumber = 7;
::google::protobuf::int64 invalidation_version() const;
void set_invalidation_version(::google::protobuf::int64 value);

// optional bool invalidation_topics_only = 11;
bool has_invalidation_topics_only() const;
void clear_invalidation_topics_only();
static const int kInvalidationTopicsOnlyFieldNumber = 11;
bool invalidation_topics_only() const;
void set_invalidation_topics_only(bool value);

// @@protoc_insertion_point(class_scope:enterprise_management.PolicyFetchRequest)
private:
void set_has_policy_type();
void clear_has_policy_type();
void set_has_timestamp();
void clear_has_timestamp();
void set_has_signature_type();
void clear_has_signature_type();
void set_has_public_key_version();
void clear_has_public_key_version();
void set_has_settings_entity_id();
void clear_has_settings_entity_id();
void set_has_invalidation_version();
void clear_has_invalidation_version();
void set_has_invalidation_payload();
void clear_has_invalidation_payload();
void set_has_verification_key_hash();
void clear_has_verification_key_hash();
void set_has_policy_invalidation_info();
void clear_has_policy_invalidation_info();
void set_has_invalidation_topics_only();
void clear_has_invalidation_topics_only();
void set_has_device_dm_token();
void clear_has_device_dm_token();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr policy_type_;
::google::protobuf::internal::ArenaStringPtr settings_entity_id_;
::google::protobuf::internal::ArenaStringPtr invalidation_payload_;
::google::protobuf::internal::ArenaStringPtr verification_key_hash_;
::google::protobuf::internal::ArenaStringPtr policy_invalidation_info_;
::google::protobuf::internal::ArenaStringPtr device_dm_token_;
::google::protobuf::int64 timestamp_;
int signature_type_;
::google::protobuf::int32 public_key_version_;
::google::protobuf::int64 invalidation_version_;
bool invalidation_topics_only_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DisabledState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DisabledState) */ {
public:
DisabledState();
virtual ~DisabledState();

DisabledState(const DisabledState& from);

inline DisabledState& operator=(const DisabledState& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DisabledState& default_instance();

static inline const DisabledState* internal_default_instance() {
return reinterpret_cast<const DisabledState*>(
&_DisabledState_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
11;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DisabledState* other);

// implements Message ----------------------------------------------

inline DisabledState* New() const PROTOBUF_FINAL { return New(NULL); }

DisabledState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DisabledState& from);
void MergeFrom(const DisabledState& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DisabledState* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string message = 1;
bool has_message() const;
void clear_message();
static const int kMessageFieldNumber = 1;
const ::std::string& message() const;
void set_message(const ::std::string& value);
#if LANG_CXX11
void set_message(::std::string&& value);
#endif
void set_message(const char* value);
void set_message(const char* value, size_t size);
::std::string* mutable_message();
::std::string* release_message();
void set_allocated_message(::std::string* message);

// @@protoc_insertion_point(class_scope:enterprise_management.DisabledState)
private:
void set_has_message();
void clear_has_message();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr message_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceState) */ {
public:
DeviceState();
virtual ~DeviceState();

DeviceState(const DeviceState& from);

inline DeviceState& operator=(const DeviceState& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceState& default_instance();

static inline const DeviceState* internal_default_instance() {
return reinterpret_cast<const DeviceState*>(
&_DeviceState_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
12;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceState* other);

// implements Message ----------------------------------------------

inline DeviceState* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceState& from);
void MergeFrom(const DeviceState& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceState* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceState_DeviceMode DeviceMode;
static const DeviceMode DEVICE_MODE_NORMAL =
DeviceState_DeviceMode_DEVICE_MODE_NORMAL;
static const DeviceMode DEVICE_MODE_DISABLED =
DeviceState_DeviceMode_DEVICE_MODE_DISABLED;
static inline bool DeviceMode_IsValid(int value) {
return DeviceState_DeviceMode_IsValid(value);
}
static const DeviceMode DeviceMode_MIN =
DeviceState_DeviceMode_DeviceMode_MIN;
static const DeviceMode DeviceMode_MAX =
DeviceState_DeviceMode_DeviceMode_MAX;
static const int DeviceMode_ARRAYSIZE =
DeviceState_DeviceMode_DeviceMode_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional .enterprise_management.DisabledState disabled_state = 2;
bool has_disabled_state() const;
void clear_disabled_state();
static const int kDisabledStateFieldNumber = 2;
const ::enterprise_management::DisabledState& disabled_state() const;
::enterprise_management::DisabledState* mutable_disabled_state();
::enterprise_management::DisabledState* release_disabled_state();
void set_allocated_disabled_state(::enterprise_management::DisabledState* disabled_state);

// optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
bool has_device_mode() const;
void clear_device_mode();
static const int kDeviceModeFieldNumber = 1;
::enterprise_management::DeviceState_DeviceMode device_mode() const;
void set_device_mode(::enterprise_management::DeviceState_DeviceMode value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceState)
private:
void set_has_device_mode();
void clear_has_device_mode();
void set_has_disabled_state();
void clear_has_disabled_state();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::enterprise_management::DisabledState* disabled_state_;
int device_mode_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT PolicyData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PolicyData) */ {
public:
PolicyData();
virtual ~PolicyData();

PolicyData(const PolicyData& from);

inline PolicyData& operator=(const PolicyData& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const PolicyData& default_instance();

static inline const PolicyData* internal_default_instance() {
return reinterpret_cast<const PolicyData*>(
&_PolicyData_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
13;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(PolicyData* other);

// implements Message ----------------------------------------------

inline PolicyData* New() const PROTOBUF_FINAL { return New(NULL); }

PolicyData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const PolicyData& from);
void MergeFrom(const PolicyData& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PolicyData* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef PolicyData_AssociationState AssociationState;
static const AssociationState ACTIVE =
PolicyData_AssociationState_ACTIVE;
static const AssociationState UNMANAGED =
PolicyData_AssociationState_UNMANAGED;
static const AssociationState DEPROVISIONED =
PolicyData_AssociationState_DEPROVISIONED;
static inline bool AssociationState_IsValid(int value) {
return PolicyData_AssociationState_IsValid(value);
}
static const AssociationState AssociationState_MIN =
PolicyData_AssociationState_AssociationState_MIN;
static const AssociationState AssociationState_MAX =
PolicyData_AssociationState_AssociationState_MAX;
static const int AssociationState_ARRAYSIZE =
PolicyData_AssociationState_AssociationState_ARRAYSIZE;

typedef PolicyData_ManagementMode ManagementMode;
static const ManagementMode LOCAL_OWNER =
PolicyData_ManagementMode_LOCAL_OWNER;
static const ManagementMode ENTERPRISE_MANAGED =
PolicyData_ManagementMode_ENTERPRISE_MANAGED;
static const ManagementMode OBSOLETE_CONSUMER_MANAGED =
PolicyData_ManagementMode_OBSOLETE_CONSUMER_MANAGED;
static inline bool ManagementMode_IsValid(int value) {
return PolicyData_ManagementMode_IsValid(value);
}
static const ManagementMode ManagementMode_MIN =
PolicyData_ManagementMode_ManagementMode_MIN;
static const ManagementMode ManagementMode_MAX =
PolicyData_ManagementMode_ManagementMode_MAX;
static const int ManagementMode_ARRAYSIZE =
PolicyData_ManagementMode_ManagementMode_ARRAYSIZE;

// accessors -------------------------------------------------------

// repeated string device_affiliation_ids = 23;
int device_affiliation_ids_size() const;
void clear_device_affiliation_ids();
static const int kDeviceAffiliationIdsFieldNumber = 23;
const ::std::string& device_affiliation_ids(int index) const;
::std::string* mutable_device_affiliation_ids(int index);
void set_device_affiliation_ids(int index, const ::std::string& value);
#if LANG_CXX11
void set_device_affiliation_ids(int index, ::std::string&& value);
#endif
void set_device_affiliation_ids(int index, const char* value);
void set_device_affiliation_ids(int index, const char* value, size_t size);
::std::string* add_device_affiliation_ids();
void add_device_affiliation_ids(const ::std::string& value);
#if LANG_CXX11
void add_device_affiliation_ids(::std::string&& value);
#endif
void add_device_affiliation_ids(const char* value);
void add_device_affiliation_ids(const char* value, size_t size);
const ::google::protobuf::RepeatedPtrField< ::std::string>& device_affiliation_ids() const;
::google::protobuf::RepeatedPtrField< ::std::string>* mutable_device_affiliation_ids();

// repeated string user_affiliation_ids = 24;
int user_affiliation_ids_size() const;
void clear_user_affiliation_ids();
static const int kUserAffiliationIdsFieldNumber = 24;
const ::std::string& user_affiliation_ids(int index) const;
::std::string* mutable_user_affiliation_ids(int index);
void set_user_affiliation_ids(int index, const ::std::string& value);
#if LANG_CXX11
void set_user_affiliation_ids(int index, ::std::string&& value);
#endif
void set_user_affiliation_ids(int index, const char* value);
void set_user_affiliation_ids(int index, const char* value, size_t size);
::std::string* add_user_affiliation_ids();
void add_user_affiliation_ids(const ::std::string& value);
#if LANG_CXX11
void add_user_affiliation_ids(::std::string&& value);
#endif
void add_user_affiliation_ids(const char* value);
void add_user_affiliation_ids(const char* value, size_t size);
const ::google::protobuf::RepeatedPtrField< ::std::string>& user_affiliation_ids() const;
::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_affiliation_ids();

// optional string policy_type = 1;
bool has_policy_type() const;
void clear_policy_type();
static const int kPolicyTypeFieldNumber = 1;
const ::std::string& policy_type() const;
void set_policy_type(const ::std::string& value);
#if LANG_CXX11
void set_policy_type(::std::string&& value);
#endif
void set_policy_type(const char* value);
void set_policy_type(const char* value, size_t size);
::std::string* mutable_policy_type();
::std::string* release_policy_type();
void set_allocated_policy_type(::std::string* policy_type);

// optional string request_token = 3;
bool has_request_token() const;
void clear_request_token();
static const int kRequestTokenFieldNumber = 3;
const ::std::string& request_token() const;
void set_request_token(const ::std::string& value);
#if LANG_CXX11
void set_request_token(::std::string&& value);
#endif
void set_request_token(const char* value);
void set_request_token(const char* value, size_t size);
::std::string* mutable_request_token();
::std::string* release_request_token();
void set_allocated_request_token(::std::string* request_token);

// optional bytes policy_value = 4;
bool has_policy_value() const;
void clear_policy_value();
static const int kPolicyValueFieldNumber = 4;
const ::std::string& policy_value() const;
void set_policy_value(const ::std::string& value);
#if LANG_CXX11
void set_policy_value(::std::string&& value);
#endif
void set_policy_value(const char* value);
void set_policy_value(const void* value, size_t size);
::std::string* mutable_policy_value();
::std::string* release_policy_value();
void set_allocated_policy_value(::std::string* policy_value);

// optional string machine_name = 5;
bool has_machine_name() const;
void clear_machine_name();
static const int kMachineNameFieldNumber = 5;
const ::std::string& machine_name() const;
void set_machine_name(const ::std::string& value);
#if LANG_CXX11
void set_machine_name(::std::string&& value);
#endif
void set_machine_name(const char* value);
void set_machine_name(const char* value, size_t size);
::std::string* mutable_machine_name();
::std::string* release_machine_name();
void set_allocated_machine_name(::std::string* machine_name);

// optional string username = 7;
bool has_username() const;
void clear_username();
static const int kUsernameFieldNumber = 7;
const ::std::string& username() const;
void set_username(const ::std::string& value);
#if LANG_CXX11
void set_username(::std::string&& value);
#endif
void set_username(const char* value);
void set_username(const char* value, size_t size);
::std::string* mutable_username();
::std::string* release_username();
void set_allocated_username(::std::string* username);

// optional string device_id = 8;
bool has_device_id() const;
void clear_device_id();
static const int kDeviceIdFieldNumber = 8;
const ::std::string& device_id() const;
void set_device_id(const ::std::string& value);
#if LANG_CXX11
void set_device_id(::std::string&& value);
#endif
void set_device_id(const char* value);
void set_device_id(const char* value, size_t size);
::std::string* mutable_device_id();
::std::string* release_device_id();
void set_allocated_device_id(::std::string* device_id);

// optional string settings_entity_id = 11;
bool has_settings_entity_id() const;
void clear_settings_entity_id();
static const int kSettingsEntityIdFieldNumber = 11;
const ::std::string& settings_entity_id() const;
void set_settings_entity_id(const ::std::string& value);
#if LANG_CXX11
void set_settings_entity_id(::std::string&& value);
#endif
void set_settings_entity_id(const char* value);
void set_settings_entity_id(const char* value, size_t size);
::std::string* mutable_settings_entity_id();
::std::string* release_settings_entity_id();
void set_allocated_settings_entity_id(::std::string* settings_entity_id);

// optional string service_account_identity = 12;
bool has_service_account_identity() const;
void clear_service_account_identity();
static const int kServiceAccountIdentityFieldNumber = 12;
const ::std::string& service_account_identity() const;
void set_service_account_identity(const ::std::string& value);
#if LANG_CXX11
void set_service_account_identity(::std::string&& value);
#endif
void set_service_account_identity(const char* value);
void set_service_account_identity(const char* value, size_t size);
::std::string* mutable_service_account_identity();
::std::string* release_service_account_identity();
void set_allocated_service_account_identity(::std::string* service_account_identity);

// optional bytes invalidation_name = 14;
bool has_invalidation_name() const;
void clear_invalidation_name();
static const int kInvalidationNameFieldNumber = 14;
const ::std::string& invalidation_name() const;
void set_invalidation_name(const ::std::string& value);
#if LANG_CXX11
void set_invalidation_name(::std::string&& value);
#endif
void set_invalidation_name(const char* value);
void set_invalidation_name(const void* value, size_t size);
::std::string* mutable_invalidation_name();
::std::string* release_invalidation_name();
void set_allocated_invalidation_name(::std::string* invalidation_name);

// optional string policy_token = 15;
bool has_policy_token() const;
void clear_policy_token();
static const int kPolicyTokenFieldNumber = 15;
const ::std::string& policy_token() const;
void set_policy_token(const ::std::string& value);
#if LANG_CXX11
void set_policy_token(::std::string&& value);
#endif
void set_policy_token(const char* value);
void set_policy_token(const char* value, size_t size);
::std::string* mutable_policy_token();
::std::string* release_policy_token();
void set_allocated_policy_token(::std::string* policy_token);

// optional bytes command_invalidation_name = 19;
bool has_command_invalidation_name() const;
void clear_command_invalidation_name();
static const int kCommandInvalidationNameFieldNumber = 19;
const ::std::string& command_invalidation_name() const;
void set_command_invalidation_name(const ::std::string& value);
#if LANG_CXX11
void set_command_invalidation_name(::std::string&& value);
#endif
void set_command_invalidation_name(const char* value);
void set_command_invalidation_name(const void* value, size_t size);
::std::string* mutable_command_invalidation_name();
::std::string* release_command_invalidation_name();
void set_allocated_command_invalidation_name(::std::string* command_invalidation_name);

// optional string annotated_location = 20;
bool has_annotated_location() const;
void clear_annotated_location();
static const int kAnnotatedLocationFieldNumber = 20;
const ::std::string& annotated_location() const;
void set_annotated_location(const ::std::string& value);
#if LANG_CXX11
void set_annotated_location(::std::string&& value);
#endif
void set_annotated_location(const char* value);
void set_annotated_location(const char* value, size_t size);
::std::string* mutable_annotated_location();
::std::string* release_annotated_location();
void set_allocated_annotated_location(::std::string* annotated_location);

// optional string annotated_asset_id = 21;
bool has_annotated_asset_id() const;
void clear_annotated_asset_id();
static const int kAnnotatedAssetIdFieldNumber = 21;
const ::std::string& annotated_asset_id() const;
void set_annotated_asset_id(const ::std::string& value);
#if LANG_CXX11
void set_annotated_asset_id(::std::string&& value);
#endif
void set_annotated_asset_id(const char* value);
void set_annotated_asset_id(const char* value, size_t size);
::std::string* mutable_annotated_asset_id();
::std::string* release_annotated_asset_id();
void set_allocated_annotated_asset_id(::std::string* annotated_asset_id);

// optional string directory_api_id = 22;
bool has_directory_api_id() const;
void clear_directory_api_id();
static const int kDirectoryApiIdFieldNumber = 22;
const ::std::string& directory_api_id() const;
void set_directory_api_id(const ::std::string& value);
#if LANG_CXX11
void set_directory_api_id(::std::string&& value);
#endif
void set_directory_api_id(const char* value);
void set_directory_api_id(const char* value, size_t size);
::std::string* mutable_directory_api_id();
::std::string* release_directory_api_id();
void set_allocated_directory_api_id(::std::string* directory_api_id);

// optional string display_domain = 25;
bool has_display_domain() const;
void clear_display_domain();
static const int kDisplayDomainFieldNumber = 25;
const ::std::string& display_domain() const;
void set_display_domain(const ::std::string& value);
#if LANG_CXX11
void set_display_domain(::std::string&& value);
#endif
void set_display_domain(const char* value);
void set_display_domain(const char* value, size_t size);
::std::string* mutable_display_domain();
::std::string* release_display_domain();
void set_allocated_display_domain(::std::string* display_domain);

// optional string policy_invalidation_topic = 26;
bool has_policy_invalidation_topic() const;
void clear_policy_invalidation_topic();
static const int kPolicyInvalidationTopicFieldNumber = 26;
const ::std::string& policy_invalidation_topic() const;
void set_policy_invalidation_topic(const ::std::string& value);
#if LANG_CXX11
void set_policy_invalidation_topic(::std::string&& value);
#endif
void set_policy_invalidation_topic(const char* value);
void set_policy_invalidation_topic(const char* value, size_t size);
::std::string* mutable_policy_invalidation_topic();
::std::string* release_policy_invalidation_topic();
void set_allocated_policy_invalidation_topic(::std::string* policy_invalidation_topic);

// optional string command_invalidation_topic = 27;
bool has_command_invalidation_topic() const;
void clear_command_invalidation_topic();
static const int kCommandInvalidationTopicFieldNumber = 27;
const ::std::string& command_invalidation_topic() const;
void set_command_invalidation_topic(const ::std::string& value);
#if LANG_CXX11
void set_command_invalidation_topic(::std::string&& value);
#endif
void set_command_invalidation_topic(const char* value);
void set_command_invalidation_topic(const char* value, size_t size);
::std::string* mutable_command_invalidation_topic();
::std::string* release_command_invalidation_topic();
void set_allocated_command_invalidation_topic(::std::string* command_invalidation_topic);

// optional string gaia_id = 29;
bool has_gaia_id() const;
void clear_gaia_id();
static const int kGaiaIdFieldNumber = 29;
const ::std::string& gaia_id() const;
void set_gaia_id(const ::std::string& value);
#if LANG_CXX11
void set_gaia_id(::std::string&& value);
#endif
void set_gaia_id(const char* value);
void set_gaia_id(const char* value, size_t size);
::std::string* mutable_gaia_id();
::std::string* release_gaia_id();
void set_allocated_gaia_id(::std::string* gaia_id);

// optional .enterprise_management.DeviceState device_state = 17;
bool has_device_state() const;
void clear_device_state();
static const int kDeviceStateFieldNumber = 17;
const ::enterprise_management::DeviceState& device_state() const;
::enterprise_management::DeviceState* mutable_device_state();
::enterprise_management::DeviceState* release_device_state();
void set_allocated_device_state(::enterprise_management::DeviceState* device_state);

// optional int64 timestamp = 2;
bool has_timestamp() const;
void clear_timestamp();
static const int kTimestampFieldNumber = 2;
::google::protobuf::int64 timestamp() const;
void set_timestamp(::google::protobuf::int64 value);

// optional int32 public_key_version = 6;
bool has_public_key_version() const;
void clear_public_key_version();
static const int kPublicKeyVersionFieldNumber = 6;
::google::protobuf::int32 public_key_version() const;
void set_public_key_version(::google::protobuf::int32 value);

// optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
bool has_state() const;
void clear_state();
static const int kStateFieldNumber = 9;
::enterprise_management::PolicyData_AssociationState state() const;
void set_state(::enterprise_management::PolicyData_AssociationState value);

// optional int32 invalidation_source = 13;
bool has_invalidation_source() const;
void clear_invalidation_source();
static const int kInvalidationSourceFieldNumber = 13;
::google::protobuf::int32 invalidation_source() const;
void set_invalidation_source(::google::protobuf::int32 value);

// optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
bool has_management_mode() const;
void clear_management_mode();
static const int kManagementModeFieldNumber = 16;
::enterprise_management::PolicyData_ManagementMode management_mode() const;
void set_management_mode(::enterprise_management::PolicyData_ManagementMode value);

// optional int32 command_invalidation_source = 18;
bool has_command_invalidation_source() const;
void clear_command_invalidation_source();
static const int kCommandInvalidationSourceFieldNumber = 18;
::google::protobuf::int32 command_invalidation_source() const;
void set_command_invalidation_source(::google::protobuf::int32 value);

// optional bool enrollment_id_needed = 28;
bool has_enrollment_id_needed() const;
void clear_enrollment_id_needed();
static const int kEnrollmentIdNeededFieldNumber = 28;
bool enrollment_id_needed() const;
void set_enrollment_id_needed(bool value);

// @@protoc_insertion_point(class_scope:enterprise_management.PolicyData)
private:
void set_has_policy_type();
void clear_has_policy_type();
void set_has_timestamp();
void clear_has_timestamp();
void set_has_request_token();
void clear_has_request_token();
void set_has_policy_value();
void clear_has_policy_value();
void set_has_machine_name();
void clear_has_machine_name();
void set_has_public_key_version();
void clear_has_public_key_version();
void set_has_username();
void clear_has_username();
void set_has_device_id();
void clear_has_device_id();
void set_has_state();
void clear_has_state();
void set_has_settings_entity_id();
void clear_has_settings_entity_id();
void set_has_service_account_identity();
void clear_has_service_account_identity();
void set_has_invalidation_source();
void clear_has_invalidation_source();
void set_has_invalidation_name();
void clear_has_invalidation_name();
void set_has_policy_token();
void clear_has_policy_token();
void set_has_management_mode();
void clear_has_management_mode();
void set_has_device_state();
void clear_has_device_state();
void set_has_command_invalidation_source();
void clear_has_command_invalidation_source();
void set_has_command_invalidation_name();
void clear_has_command_invalidation_name();
void set_has_annotated_location();
void clear_has_annotated_location();
void set_has_annotated_asset_id();
void clear_has_annotated_asset_id();
void set_has_directory_api_id();
void clear_has_directory_api_id();
void set_has_display_domain();
void clear_has_display_domain();
void set_has_policy_invalidation_topic();
void clear_has_policy_invalidation_topic();
void set_has_command_invalidation_topic();
void clear_has_command_invalidation_topic();
void set_has_enrollment_id_needed();
void clear_has_enrollment_id_needed();
void set_has_gaia_id();
void clear_has_gaia_id();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::std::string> device_affiliation_ids_;
::google::protobuf::RepeatedPtrField< ::std::string> user_affiliation_ids_;
::google::protobuf::internal::ArenaStringPtr policy_type_;
::google::protobuf::internal::ArenaStringPtr request_token_;
::google::protobuf::internal::ArenaStringPtr policy_value_;
::google::protobuf::internal::ArenaStringPtr machine_name_;
::google::protobuf::internal::ArenaStringPtr username_;
::google::protobuf::internal::ArenaStringPtr device_id_;
::google::protobuf::internal::ArenaStringPtr settings_entity_id_;
::google::protobuf::internal::ArenaStringPtr service_account_identity_;
::google::protobuf::internal::ArenaStringPtr invalidation_name_;
::google::protobuf::internal::ArenaStringPtr policy_token_;
::google::protobuf::internal::ArenaStringPtr command_invalidation_name_;
::google::protobuf::internal::ArenaStringPtr annotated_location_;
::google::protobuf::internal::ArenaStringPtr annotated_asset_id_;
::google::protobuf::internal::ArenaStringPtr directory_api_id_;
::google::protobuf::internal::ArenaStringPtr display_domain_;
::google::protobuf::internal::ArenaStringPtr policy_invalidation_topic_;
::google::protobuf::internal::ArenaStringPtr command_invalidation_topic_;
::google::protobuf::internal::ArenaStringPtr gaia_id_;
::enterprise_management::DeviceState* device_state_;
::google::protobuf::int64 timestamp_;
::google::protobuf::int32 public_key_version_;
int state_;
::google::protobuf::int32 invalidation_source_;
int management_mode_;
::google::protobuf::int32 command_invalidation_source_;
bool enrollment_id_needed_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT PolicyFetchResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PolicyFetchResponse) */ {
public:
PolicyFetchResponse();
virtual ~PolicyFetchResponse();

PolicyFetchResponse(const PolicyFetchResponse& from);

inline PolicyFetchResponse& operator=(const PolicyFetchResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const PolicyFetchResponse& default_instance();

static inline const PolicyFetchResponse* internal_default_instance() {
return reinterpret_cast<const PolicyFetchResponse*>(
&_PolicyFetchResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
14;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(PolicyFetchResponse* other);

// implements Message ----------------------------------------------

inline PolicyFetchResponse* New() const PROTOBUF_FINAL { return New(NULL); }

PolicyFetchResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const PolicyFetchResponse& from);
void MergeFrom(const PolicyFetchResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PolicyFetchResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string error_message = 2;
bool has_error_message() const;
void clear_error_message();
static const int kErrorMessageFieldNumber = 2;
const ::std::string& error_message() const;
void set_error_message(const ::std::string& value);
#if LANG_CXX11
void set_error_message(::std::string&& value);
#endif
void set_error_message(const char* value);
void set_error_message(const char* value, size_t size);
::std::string* mutable_error_message();
::std::string* release_error_message();
void set_allocated_error_message(::std::string* error_message);

// optional bytes policy_data = 3;
bool has_policy_data() const;
void clear_policy_data();
static const int kPolicyDataFieldNumber = 3;
const ::std::string& policy_data() const;
void set_policy_data(const ::std::string& value);
#if LANG_CXX11
void set_policy_data(::std::string&& value);
#endif
void set_policy_data(const char* value);
void set_policy_data(const void* value, size_t size);
::std::string* mutable_policy_data();
::std::string* release_policy_data();
void set_allocated_policy_data(::std::string* policy_data);

// optional bytes policy_data_signature = 4;
bool has_policy_data_signature() const;
void clear_policy_data_signature();
static const int kPolicyDataSignatureFieldNumber = 4;
const ::std::string& policy_data_signature() const;
void set_policy_data_signature(const ::std::string& value);
#if LANG_CXX11
void set_policy_data_signature(::std::string&& value);
#endif
void set_policy_data_signature(const char* value);
void set_policy_data_signature(const void* value, size_t size);
::std::string* mutable_policy_data_signature();
::std::string* release_policy_data_signature();
void set_allocated_policy_data_signature(::std::string* policy_data_signature);

// optional bytes new_public_key = 5;
bool has_new_public_key() const;
void clear_new_public_key();
static const int kNewPublicKeyFieldNumber = 5;
const ::std::string& new_public_key() const;
void set_new_public_key(const ::std::string& value);
#if LANG_CXX11
void set_new_public_key(::std::string&& value);
#endif
void set_new_public_key(const char* value);
void set_new_public_key(const void* value, size_t size);
::std::string* mutable_new_public_key();
::std::string* release_new_public_key();
void set_allocated_new_public_key(::std::string* new_public_key);

// optional bytes new_public_key_signature = 6;
bool has_new_public_key_signature() const;
void clear_new_public_key_signature();
static const int kNewPublicKeySignatureFieldNumber = 6;
const ::std::string& new_public_key_signature() const;
void set_new_public_key_signature(const ::std::string& value);
#if LANG_CXX11
void set_new_public_key_signature(::std::string&& value);
#endif
void set_new_public_key_signature(const char* value);
void set_new_public_key_signature(const void* value, size_t size);
::std::string* mutable_new_public_key_signature();
::std::string* release_new_public_key_signature();
void set_allocated_new_public_key_signature(::std::string* new_public_key_signature);

// optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_new_public_key_verification_signature_deprecated() const;
GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_new_public_key_verification_signature_deprecated();
GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kNewPublicKeyVerificationSignatureDeprecatedFieldNumber = 7;
GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& new_public_key_verification_signature_deprecated() const;
GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_new_public_key_verification_signature_deprecated(const ::std::string& value);
#if LANG_CXX11
GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_new_public_key_verification_signature_deprecated(::std::string&& value);
#endif
GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_new_public_key_verification_signature_deprecated(const char* value);
GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_new_public_key_verification_signature_deprecated(const void* value, size_t size);
GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_new_public_key_verification_signature_deprecated();
GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_new_public_key_verification_signature_deprecated();
GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_new_public_key_verification_signature_deprecated(::std::string* new_public_key_verification_signature_deprecated);

// optional bytes new_public_key_verification_data = 8;
bool has_new_public_key_verification_data() const;
void clear_new_public_key_verification_data();
static const int kNewPublicKeyVerificationDataFieldNumber = 8;
const ::std::string& new_public_key_verification_data() const;
void set_new_public_key_verification_data(const ::std::string& value);
#if LANG_CXX11
void set_new_public_key_verification_data(::std::string&& value);
#endif
void set_new_public_key_verification_data(const char* value);
void set_new_public_key_verification_data(const void* value, size_t size);
::std::string* mutable_new_public_key_verification_data();
::std::string* release_new_public_key_verification_data();
void set_allocated_new_public_key_verification_data(::std::string* new_public_key_verification_data);

// optional bytes new_public_key_verification_data_signature = 9;
bool has_new_public_key_verification_data_signature() const;
void clear_new_public_key_verification_data_signature();
static const int kNewPublicKeyVerificationDataSignatureFieldNumber = 9;
const ::std::string& new_public_key_verification_data_signature() const;
void set_new_public_key_verification_data_signature(const ::std::string& value);
#if LANG_CXX11
void set_new_public_key_verification_data_signature(::std::string&& value);
#endif
void set_new_public_key_verification_data_signature(const char* value);
void set_new_public_key_verification_data_signature(const void* value, size_t size);
::std::string* mutable_new_public_key_verification_data_signature();
::std::string* release_new_public_key_verification_data_signature();
void set_allocated_new_public_key_verification_data_signature(::std::string* new_public_key_verification_data_signature);

// optional int32 error_code = 1;
bool has_error_code() const;
void clear_error_code();
static const int kErrorCodeFieldNumber = 1;
::google::protobuf::int32 error_code() const;
void set_error_code(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.PolicyFetchResponse)
private:
void set_has_error_code();
void clear_has_error_code();
void set_has_error_message();
void clear_has_error_message();
void set_has_policy_data();
void clear_has_policy_data();
void set_has_policy_data_signature();
void clear_has_policy_data_signature();
void set_has_new_public_key();
void clear_has_new_public_key();
void set_has_new_public_key_signature();
void clear_has_new_public_key_signature();
void set_has_new_public_key_verification_signature_deprecated();
void clear_has_new_public_key_verification_signature_deprecated();
void set_has_new_public_key_verification_data();
void clear_has_new_public_key_verification_data();
void set_has_new_public_key_verification_data_signature();
void clear_has_new_public_key_verification_data_signature();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr error_message_;
::google::protobuf::internal::ArenaStringPtr policy_data_;
::google::protobuf::internal::ArenaStringPtr policy_data_signature_;
::google::protobuf::internal::ArenaStringPtr new_public_key_;
::google::protobuf::internal::ArenaStringPtr new_public_key_signature_;
::google::protobuf::internal::ArenaStringPtr new_public_key_verification_signature_deprecated_;
::google::protobuf::internal::ArenaStringPtr new_public_key_verification_data_;
::google::protobuf::internal::ArenaStringPtr new_public_key_verification_data_signature_;
::google::protobuf::int32 error_code_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DEPRECATEDPolicyPublicKeyAndDomain : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain) */ {
public:
DEPRECATEDPolicyPublicKeyAndDomain();
virtual ~DEPRECATEDPolicyPublicKeyAndDomain();

DEPRECATEDPolicyPublicKeyAndDomain(const DEPRECATEDPolicyPublicKeyAndDomain& from);

inline DEPRECATEDPolicyPublicKeyAndDomain& operator=(const DEPRECATEDPolicyPublicKeyAndDomain& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DEPRECATEDPolicyPublicKeyAndDomain& default_instance();

static inline const DEPRECATEDPolicyPublicKeyAndDomain* internal_default_instance() {
return reinterpret_cast<const DEPRECATEDPolicyPublicKeyAndDomain*>(
&_DEPRECATEDPolicyPublicKeyAndDomain_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
15;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DEPRECATEDPolicyPublicKeyAndDomain* other);

// implements Message ----------------------------------------------

inline DEPRECATEDPolicyPublicKeyAndDomain* New() const PROTOBUF_FINAL { return New(NULL); }

DEPRECATEDPolicyPublicKeyAndDomain* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DEPRECATEDPolicyPublicKeyAndDomain& from);
void MergeFrom(const DEPRECATEDPolicyPublicKeyAndDomain& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DEPRECATEDPolicyPublicKeyAndDomain* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional bytes new_public_key = 1;
bool has_new_public_key() const;
void clear_new_public_key();
static const int kNewPublicKeyFieldNumber = 1;
const ::std::string& new_public_key() const;
void set_new_public_key(const ::std::string& value);
#if LANG_CXX11
void set_new_public_key(::std::string&& value);
#endif
void set_new_public_key(const char* value);
void set_new_public_key(const void* value, size_t size);
::std::string* mutable_new_public_key();
::std::string* release_new_public_key();
void set_allocated_new_public_key(::std::string* new_public_key);

// optional string domain = 2;
bool has_domain() const;
void clear_domain();
static const int kDomainFieldNumber = 2;
const ::std::string& domain() const;
void set_domain(const ::std::string& value);
#if LANG_CXX11
void set_domain(::std::string&& value);
#endif
void set_domain(const char* value);
void set_domain(const char* value, size_t size);
::std::string* mutable_domain();
::std::string* release_domain();
void set_allocated_domain(::std::string* domain);

// @@protoc_insertion_point(class_scope:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
private:
void set_has_new_public_key();
void clear_has_new_public_key();
void set_has_domain();
void clear_has_domain();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr new_public_key_;
::google::protobuf::internal::ArenaStringPtr domain_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT PublicKeyVerificationData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PublicKeyVerificationData) */ {
public:
PublicKeyVerificationData();
virtual ~PublicKeyVerificationData();

PublicKeyVerificationData(const PublicKeyVerificationData& from);

inline PublicKeyVerificationData& operator=(const PublicKeyVerificationData& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const PublicKeyVerificationData& default_instance();

static inline const PublicKeyVerificationData* internal_default_instance() {
return reinterpret_cast<const PublicKeyVerificationData*>(
&_PublicKeyVerificationData_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
16;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(PublicKeyVerificationData* other);

// implements Message ----------------------------------------------

inline PublicKeyVerificationData* New() const PROTOBUF_FINAL { return New(NULL); }

PublicKeyVerificationData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const PublicKeyVerificationData& from);
void MergeFrom(const PublicKeyVerificationData& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PublicKeyVerificationData* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional bytes new_public_key = 1;
bool has_new_public_key() const;
void clear_new_public_key();
static const int kNewPublicKeyFieldNumber = 1;
const ::std::string& new_public_key() const;
void set_new_public_key(const ::std::string& value);
#if LANG_CXX11
void set_new_public_key(::std::string&& value);
#endif
void set_new_public_key(const char* value);
void set_new_public_key(const void* value, size_t size);
::std::string* mutable_new_public_key();
::std::string* release_new_public_key();
void set_allocated_new_public_key(::std::string* new_public_key);

// optional string domain = 2;
bool has_domain() const;
void clear_domain();
static const int kDomainFieldNumber = 2;
const ::std::string& domain() const;
void set_domain(const ::std::string& value);
#if LANG_CXX11
void set_domain(::std::string&& value);
#endif
void set_domain(const char* value);
void set_domain(const char* value, size_t size);
::std::string* mutable_domain();
::std::string* release_domain();
void set_allocated_domain(::std::string* domain);

// optional int32 new_public_key_version = 3;
bool has_new_public_key_version() const;
void clear_new_public_key_version();
static const int kNewPublicKeyVersionFieldNumber = 3;
::google::protobuf::int32 new_public_key_version() const;
void set_new_public_key_version(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.PublicKeyVerificationData)
private:
void set_has_new_public_key();
void clear_has_new_public_key();
void set_has_domain();
void clear_has_domain();
void set_has_new_public_key_version();
void clear_has_new_public_key_version();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr new_public_key_;
::google::protobuf::internal::ArenaStringPtr domain_;
::google::protobuf::int32 new_public_key_version_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DevicePolicyRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DevicePolicyRequest) */ {
public:
DevicePolicyRequest();
virtual ~DevicePolicyRequest();

DevicePolicyRequest(const DevicePolicyRequest& from);

inline DevicePolicyRequest& operator=(const DevicePolicyRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DevicePolicyRequest& default_instance();

static inline const DevicePolicyRequest* internal_default_instance() {
return reinterpret_cast<const DevicePolicyRequest*>(
&_DevicePolicyRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
17;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DevicePolicyRequest* other);

// implements Message ----------------------------------------------

inline DevicePolicyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DevicePolicyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DevicePolicyRequest& from);
void MergeFrom(const DevicePolicyRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DevicePolicyRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated .enterprise_management.PolicyFetchRequest request = 3;
int request_size() const;
void clear_request();
static const int kRequestFieldNumber = 3;
const ::enterprise_management::PolicyFetchRequest& request(int index) const;
::enterprise_management::PolicyFetchRequest* mutable_request(int index);
::enterprise_management::PolicyFetchRequest* add_request();
::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchRequest >*
mutable_request();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchRequest >&
request() const;

// @@protoc_insertion_point(class_scope:enterprise_management.DevicePolicyRequest)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchRequest > request_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DevicePolicyResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DevicePolicyResponse) */ {
public:
DevicePolicyResponse();
virtual ~DevicePolicyResponse();

DevicePolicyResponse(const DevicePolicyResponse& from);

inline DevicePolicyResponse& operator=(const DevicePolicyResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DevicePolicyResponse& default_instance();

static inline const DevicePolicyResponse* internal_default_instance() {
return reinterpret_cast<const DevicePolicyResponse*>(
&_DevicePolicyResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
18;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DevicePolicyResponse* other);

// implements Message ----------------------------------------------

inline DevicePolicyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DevicePolicyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DevicePolicyResponse& from);
void MergeFrom(const DevicePolicyResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DevicePolicyResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated .enterprise_management.PolicyFetchResponse response = 3;
int response_size() const;
void clear_response();
static const int kResponseFieldNumber = 3;
const ::enterprise_management::PolicyFetchResponse& response(int index) const;
::enterprise_management::PolicyFetchResponse* mutable_response(int index);
::enterprise_management::PolicyFetchResponse* add_response();
::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchResponse >*
mutable_response();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchResponse >&
response() const;

// @@protoc_insertion_point(class_scope:enterprise_management.DevicePolicyResponse)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchResponse > response_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT TimePeriod : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.TimePeriod) */ {
public:
TimePeriod();
virtual ~TimePeriod();

TimePeriod(const TimePeriod& from);

inline TimePeriod& operator=(const TimePeriod& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const TimePeriod& default_instance();

static inline const TimePeriod* internal_default_instance() {
return reinterpret_cast<const TimePeriod*>(
&_TimePeriod_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
19;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(TimePeriod* other);

// implements Message ----------------------------------------------

inline TimePeriod* New() const PROTOBUF_FINAL { return New(NULL); }

TimePeriod* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const TimePeriod& from);
void MergeFrom(const TimePeriod& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(TimePeriod* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional int64 start_timestamp = 1;
bool has_start_timestamp() const;
void clear_start_timestamp();
static const int kStartTimestampFieldNumber = 1;
::google::protobuf::int64 start_timestamp() const;
void set_start_timestamp(::google::protobuf::int64 value);

// optional int64 end_timestamp = 2;
bool has_end_timestamp() const;
void clear_end_timestamp();
static const int kEndTimestampFieldNumber = 2;
::google::protobuf::int64 end_timestamp() const;
void set_end_timestamp(::google::protobuf::int64 value);

// @@protoc_insertion_point(class_scope:enterprise_management.TimePeriod)
private:
void set_has_start_timestamp();
void clear_has_start_timestamp();
void set_has_end_timestamp();
void clear_has_end_timestamp();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::int64 start_timestamp_;
::google::protobuf::int64 end_timestamp_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT ActiveTimePeriod : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ActiveTimePeriod) */ {
public:
ActiveTimePeriod();
virtual ~ActiveTimePeriod();

ActiveTimePeriod(const ActiveTimePeriod& from);

inline ActiveTimePeriod& operator=(const ActiveTimePeriod& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ActiveTimePeriod& default_instance();

static inline const ActiveTimePeriod* internal_default_instance() {
return reinterpret_cast<const ActiveTimePeriod*>(
&_ActiveTimePeriod_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
20;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(ActiveTimePeriod* other);

// implements Message ----------------------------------------------

inline ActiveTimePeriod* New() const PROTOBUF_FINAL { return New(NULL); }

ActiveTimePeriod* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const ActiveTimePeriod& from);
void MergeFrom(const ActiveTimePeriod& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ActiveTimePeriod* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string user_email = 3;
bool has_user_email() const;
void clear_user_email();
static const int kUserEmailFieldNumber = 3;
const ::std::string& user_email() const;
void set_user_email(const ::std::string& value);
#if LANG_CXX11
void set_user_email(::std::string&& value);
#endif
void set_user_email(const char* value);
void set_user_email(const char* value, size_t size);
::std::string* mutable_user_email();
::std::string* release_user_email();
void set_allocated_user_email(::std::string* user_email);

// optional .enterprise_management.TimePeriod time_period = 1;
bool has_time_period() const;
void clear_time_period();
static const int kTimePeriodFieldNumber = 1;
const ::enterprise_management::TimePeriod& time_period() const;
::enterprise_management::TimePeriod* mutable_time_period();
::enterprise_management::TimePeriod* release_time_period();
void set_allocated_time_period(::enterprise_management::TimePeriod* time_period);

// optional int32 active_duration = 2;
bool has_active_duration() const;
void clear_active_duration();
static const int kActiveDurationFieldNumber = 2;
::google::protobuf::int32 active_duration() const;
void set_active_duration(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.ActiveTimePeriod)
private:
void set_has_time_period();
void clear_has_time_period();
void set_has_active_duration();
void clear_has_active_duration();
void set_has_user_email();
void clear_has_user_email();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr user_email_;
::enterprise_management::TimePeriod* time_period_;
::google::protobuf::int32 active_duration_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT NetworkInterface : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.NetworkInterface) */ {
public:
NetworkInterface();
virtual ~NetworkInterface();

NetworkInterface(const NetworkInterface& from);

inline NetworkInterface& operator=(const NetworkInterface& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const NetworkInterface& default_instance();

static inline const NetworkInterface* internal_default_instance() {
return reinterpret_cast<const NetworkInterface*>(
&_NetworkInterface_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
21;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(NetworkInterface* other);

// implements Message ----------------------------------------------

inline NetworkInterface* New() const PROTOBUF_FINAL { return New(NULL); }

NetworkInterface* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const NetworkInterface& from);
void MergeFrom(const NetworkInterface& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(NetworkInterface* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef NetworkInterface_NetworkDeviceType NetworkDeviceType;
static const NetworkDeviceType TYPE_ETHERNET =
NetworkInterface_NetworkDeviceType_TYPE_ETHERNET;
static const NetworkDeviceType TYPE_WIFI =
NetworkInterface_NetworkDeviceType_TYPE_WIFI;
static const NetworkDeviceType TYPE_WIMAX =
NetworkInterface_NetworkDeviceType_TYPE_WIMAX;
static const NetworkDeviceType TYPE_BLUETOOTH =
NetworkInterface_NetworkDeviceType_TYPE_BLUETOOTH;
static const NetworkDeviceType TYPE_CELLULAR =
NetworkInterface_NetworkDeviceType_TYPE_CELLULAR;
static inline bool NetworkDeviceType_IsValid(int value) {
return NetworkInterface_NetworkDeviceType_IsValid(value);
}
static const NetworkDeviceType NetworkDeviceType_MIN =
NetworkInterface_NetworkDeviceType_NetworkDeviceType_MIN;
static const NetworkDeviceType NetworkDeviceType_MAX =
NetworkInterface_NetworkDeviceType_NetworkDeviceType_MAX;
static const int NetworkDeviceType_ARRAYSIZE =
NetworkInterface_NetworkDeviceType_NetworkDeviceType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string mac_address = 2;
bool has_mac_address() const;
void clear_mac_address();
static const int kMacAddressFieldNumber = 2;
const ::std::string& mac_address() const;
void set_mac_address(const ::std::string& value);
#if LANG_CXX11
void set_mac_address(::std::string&& value);
#endif
void set_mac_address(const char* value);
void set_mac_address(const char* value, size_t size);
::std::string* mutable_mac_address();
::std::string* release_mac_address();
void set_allocated_mac_address(::std::string* mac_address);

// optional string meid = 3;
bool has_meid() const;
void clear_meid();
static const int kMeidFieldNumber = 3;
const ::std::string& meid() const;
void set_meid(const ::std::string& value);
#if LANG_CXX11
void set_meid(::std::string&& value);
#endif
void set_meid(const char* value);
void set_meid(const char* value, size_t size);
::std::string* mutable_meid();
::std::string* release_meid();
void set_allocated_meid(::std::string* meid);

// optional string imei = 4;
bool has_imei() const;
void clear_imei();
static const int kImeiFieldNumber = 4;
const ::std::string& imei() const;
void set_imei(const ::std::string& value);
#if LANG_CXX11
void set_imei(::std::string&& value);
#endif
void set_imei(const char* value);
void set_imei(const char* value, size_t size);
::std::string* mutable_imei();
::std::string* release_imei();
void set_allocated_imei(::std::string* imei);

// optional string device_path = 5;
bool has_device_path() const;
void clear_device_path();
static const int kDevicePathFieldNumber = 5;
const ::std::string& device_path() const;
void set_device_path(const ::std::string& value);
#if LANG_CXX11
void set_device_path(::std::string&& value);
#endif
void set_device_path(const char* value);
void set_device_path(const char* value, size_t size);
::std::string* mutable_device_path();
::std::string* release_device_path();
void set_allocated_device_path(::std::string* device_path);

// optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
bool has_type() const;
void clear_type();
static const int kTypeFieldNumber = 1;
::enterprise_management::NetworkInterface_NetworkDeviceType type() const;
void set_type(::enterprise_management::NetworkInterface_NetworkDeviceType value);

// @@protoc_insertion_point(class_scope:enterprise_management.NetworkInterface)
private:
void set_has_type();
void clear_has_type();
void set_has_mac_address();
void clear_has_mac_address();
void set_has_meid();
void clear_has_meid();
void set_has_imei();
void clear_has_imei();
void set_has_device_path();
void clear_has_device_path();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr mac_address_;
::google::protobuf::internal::ArenaStringPtr meid_;
::google::protobuf::internal::ArenaStringPtr imei_;
::google::protobuf::internal::ArenaStringPtr device_path_;
int type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT NetworkState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.NetworkState) */ {
public:
NetworkState();
virtual ~NetworkState();

NetworkState(const NetworkState& from);

inline NetworkState& operator=(const NetworkState& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const NetworkState& default_instance();

static inline const NetworkState* internal_default_instance() {
return reinterpret_cast<const NetworkState*>(
&_NetworkState_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
22;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(NetworkState* other);

// implements Message ----------------------------------------------

inline NetworkState* New() const PROTOBUF_FINAL { return New(NULL); }

NetworkState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const NetworkState& from);
void MergeFrom(const NetworkState& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(NetworkState* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef NetworkState_ConnectionState ConnectionState;
static const ConnectionState IDLE =
NetworkState_ConnectionState_IDLE;
static const ConnectionState CARRIER =
NetworkState_ConnectionState_CARRIER;
static const ConnectionState ASSOCIATION =
NetworkState_ConnectionState_ASSOCIATION;
static const ConnectionState CONFIGURATION =
NetworkState_ConnectionState_CONFIGURATION;
static const ConnectionState READY =
NetworkState_ConnectionState_READY;
static const ConnectionState PORTAL =
NetworkState_ConnectionState_PORTAL;
static const ConnectionState OFFLINE =
NetworkState_ConnectionState_OFFLINE;
static const ConnectionState ONLINE =
NetworkState_ConnectionState_ONLINE;
static const ConnectionState DISCONNECT =
NetworkState_ConnectionState_DISCONNECT;
static const ConnectionState FAILURE =
NetworkState_ConnectionState_FAILURE;
static const ConnectionState ACTIVATION_FAILURE =
NetworkState_ConnectionState_ACTIVATION_FAILURE;
static const ConnectionState UNKNOWN =
NetworkState_ConnectionState_UNKNOWN;
static inline bool ConnectionState_IsValid(int value) {
return NetworkState_ConnectionState_IsValid(value);
}
static const ConnectionState ConnectionState_MIN =
NetworkState_ConnectionState_ConnectionState_MIN;
static const ConnectionState ConnectionState_MAX =
NetworkState_ConnectionState_ConnectionState_MAX;
static const int ConnectionState_ARRAYSIZE =
NetworkState_ConnectionState_ConnectionState_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string device_path = 1;
bool has_device_path() const;
void clear_device_path();
static const int kDevicePathFieldNumber = 1;
const ::std::string& device_path() const;
void set_device_path(const ::std::string& value);
#if LANG_CXX11
void set_device_path(::std::string&& value);
#endif
void set_device_path(const char* value);
void set_device_path(const char* value, size_t size);
::std::string* mutable_device_path();
::std::string* release_device_path();
void set_allocated_device_path(::std::string* device_path);

// optional string ip_address = 4;
bool has_ip_address() const;
void clear_ip_address();
static const int kIpAddressFieldNumber = 4;
const ::std::string& ip_address() const;
void set_ip_address(const ::std::string& value);
#if LANG_CXX11
void set_ip_address(::std::string&& value);
#endif
void set_ip_address(const char* value);
void set_ip_address(const char* value, size_t size);
::std::string* mutable_ip_address();
::std::string* release_ip_address();
void set_allocated_ip_address(::std::string* ip_address);

// optional string gateway = 5;
bool has_gateway() const;
void clear_gateway();
static const int kGatewayFieldNumber = 5;
const ::std::string& gateway() const;
void set_gateway(const ::std::string& value);
#if LANG_CXX11
void set_gateway(::std::string&& value);
#endif
void set_gateway(const char* value);
void set_gateway(const char* value, size_t size);
::std::string* mutable_gateway();
::std::string* release_gateway();
void set_allocated_gateway(::std::string* gateway);

// optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
bool has_connection_state() const;
void clear_connection_state();
static const int kConnectionStateFieldNumber = 2;
::enterprise_management::NetworkState_ConnectionState connection_state() const;
void set_connection_state(::enterprise_management::NetworkState_ConnectionState value);

// optional int32 signal_strength = 3;
bool has_signal_strength() const;
void clear_signal_strength();
static const int kSignalStrengthFieldNumber = 3;
::google::protobuf::int32 signal_strength() const;
void set_signal_strength(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.NetworkState)
private:
void set_has_device_path();
void clear_has_device_path();
void set_has_connection_state();
void clear_has_connection_state();
void set_has_signal_strength();
void clear_has_signal_strength();
void set_has_ip_address();
void clear_has_ip_address();
void set_has_gateway();
void clear_has_gateway();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr device_path_;
::google::protobuf::internal::ArenaStringPtr ip_address_;
::google::protobuf::internal::ArenaStringPtr gateway_;
int connection_state_;
::google::protobuf::int32 signal_strength_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceUser : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceUser) */ {
public:
DeviceUser();
virtual ~DeviceUser();

DeviceUser(const DeviceUser& from);

inline DeviceUser& operator=(const DeviceUser& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceUser& default_instance();

static inline const DeviceUser* internal_default_instance() {
return reinterpret_cast<const DeviceUser*>(
&_DeviceUser_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
23;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceUser* other);

// implements Message ----------------------------------------------

inline DeviceUser* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceUser& from);
void MergeFrom(const DeviceUser& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceUser* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceUser_UserType UserType;
static const UserType USER_TYPE_MANAGED =
DeviceUser_UserType_USER_TYPE_MANAGED;
static const UserType USER_TYPE_UNMANAGED =
DeviceUser_UserType_USER_TYPE_UNMANAGED;
static inline bool UserType_IsValid(int value) {
return DeviceUser_UserType_IsValid(value);
}
static const UserType UserType_MIN =
DeviceUser_UserType_UserType_MIN;
static const UserType UserType_MAX =
DeviceUser_UserType_UserType_MAX;
static const int UserType_ARRAYSIZE =
DeviceUser_UserType_UserType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string email = 2;
bool has_email() const;
void clear_email();
static const int kEmailFieldNumber = 2;
const ::std::string& email() const;
void set_email(const ::std::string& value);
#if LANG_CXX11
void set_email(::std::string&& value);
#endif
void set_email(const char* value);
void set_email(const char* value, size_t size);
::std::string* mutable_email();
::std::string* release_email();
void set_allocated_email(::std::string* email);

// required .enterprise_management.DeviceUser.UserType type = 1;
bool has_type() const;
void clear_type();
static const int kTypeFieldNumber = 1;
::enterprise_management::DeviceUser_UserType type() const;
void set_type(::enterprise_management::DeviceUser_UserType value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceUser)
private:
void set_has_type();
void clear_has_type();
void set_has_email();
void clear_has_email();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr email_;
int type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT VolumeInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.VolumeInfo) */ {
public:
VolumeInfo();
virtual ~VolumeInfo();

VolumeInfo(const VolumeInfo& from);

inline VolumeInfo& operator=(const VolumeInfo& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const VolumeInfo& default_instance();

static inline const VolumeInfo* internal_default_instance() {
return reinterpret_cast<const VolumeInfo*>(
&_VolumeInfo_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
24;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(VolumeInfo* other);

// implements Message ----------------------------------------------

inline VolumeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

VolumeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const VolumeInfo& from);
void MergeFrom(const VolumeInfo& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(VolumeInfo* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string volume_id = 1;
bool has_volume_id() const;
void clear_volume_id();
static const int kVolumeIdFieldNumber = 1;
const ::std::string& volume_id() const;
void set_volume_id(const ::std::string& value);
#if LANG_CXX11
void set_volume_id(::std::string&& value);
#endif
void set_volume_id(const char* value);
void set_volume_id(const char* value, size_t size);
::std::string* mutable_volume_id();
::std::string* release_volume_id();
void set_allocated_volume_id(::std::string* volume_id);

// optional int64 storage_total = 2;
bool has_storage_total() const;
void clear_storage_total();
static const int kStorageTotalFieldNumber = 2;
::google::protobuf::int64 storage_total() const;
void set_storage_total(::google::protobuf::int64 value);

// optional int64 storage_free = 3;
bool has_storage_free() const;
void clear_storage_free();
static const int kStorageFreeFieldNumber = 3;
::google::protobuf::int64 storage_free() const;
void set_storage_free(::google::protobuf::int64 value);

// @@protoc_insertion_point(class_scope:enterprise_management.VolumeInfo)
private:
void set_has_volume_id();
void clear_has_volume_id();
void set_has_storage_total();
void clear_has_storage_total();
void set_has_storage_free();
void clear_has_storage_free();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr volume_id_;
::google::protobuf::int64 storage_total_;
::google::protobuf::int64 storage_free_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT CPUTempInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CPUTempInfo) */ {
public:
CPUTempInfo();
virtual ~CPUTempInfo();

CPUTempInfo(const CPUTempInfo& from);

inline CPUTempInfo& operator=(const CPUTempInfo& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const CPUTempInfo& default_instance();

static inline const CPUTempInfo* internal_default_instance() {
return reinterpret_cast<const CPUTempInfo*>(
&_CPUTempInfo_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
25;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(CPUTempInfo* other);

// implements Message ----------------------------------------------

inline CPUTempInfo* New() const PROTOBUF_FINAL { return New(NULL); }

CPUTempInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const CPUTempInfo& from);
void MergeFrom(const CPUTempInfo& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CPUTempInfo* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string cpu_label = 1;
bool has_cpu_label() const;
void clear_cpu_label();
static const int kCpuLabelFieldNumber = 1;
const ::std::string& cpu_label() const;
void set_cpu_label(const ::std::string& value);
#if LANG_CXX11
void set_cpu_label(::std::string&& value);
#endif
void set_cpu_label(const char* value);
void set_cpu_label(const char* value, size_t size);
::std::string* mutable_cpu_label();
::std::string* release_cpu_label();
void set_allocated_cpu_label(::std::string* cpu_label);

// optional int32 cpu_temp = 2;
bool has_cpu_temp() const;
void clear_cpu_temp();
static const int kCpuTempFieldNumber = 2;
::google::protobuf::int32 cpu_temp() const;
void set_cpu_temp(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.CPUTempInfo)
private:
void set_has_cpu_label();
void clear_has_cpu_label();
void set_has_cpu_temp();
void clear_has_cpu_temp();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr cpu_label_;
::google::protobuf::int32 cpu_temp_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceStatusReportRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceStatusReportRequest) */ {
public:
DeviceStatusReportRequest();
virtual ~DeviceStatusReportRequest();

DeviceStatusReportRequest(const DeviceStatusReportRequest& from);

inline DeviceStatusReportRequest& operator=(const DeviceStatusReportRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceStatusReportRequest& default_instance();

static inline const DeviceStatusReportRequest* internal_default_instance() {
return reinterpret_cast<const DeviceStatusReportRequest*>(
&_DeviceStatusReportRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
26;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceStatusReportRequest* other);

// implements Message ----------------------------------------------

inline DeviceStatusReportRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceStatusReportRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceStatusReportRequest& from);
void MergeFrom(const DeviceStatusReportRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceStatusReportRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated .enterprise_management.ActiveTimePeriod active_period = 6;
int active_period_size() const;
void clear_active_period();
static const int kActivePeriodFieldNumber = 6;
const ::enterprise_management::ActiveTimePeriod& active_period(int index) const;
::enterprise_management::ActiveTimePeriod* mutable_active_period(int index);
::enterprise_management::ActiveTimePeriod* add_active_period();
::google::protobuf::RepeatedPtrField< ::enterprise_management::ActiveTimePeriod >*
mutable_active_period();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::ActiveTimePeriod >&
active_period() const;

// repeated .enterprise_management.NetworkInterface network_interface = 8;
int network_interface_size() const;
void clear_network_interface();
static const int kNetworkInterfaceFieldNumber = 8;
const ::enterprise_management::NetworkInterface& network_interface(int index) const;
::enterprise_management::NetworkInterface* mutable_network_interface(int index);
::enterprise_management::NetworkInterface* add_network_interface();
::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkInterface >*
mutable_network_interface();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkInterface >&
network_interface() const;

// repeated .enterprise_management.DeviceUser user = 9;
int user_size() const;
void clear_user();
static const int kUserFieldNumber = 9;
const ::enterprise_management::DeviceUser& user(int index) const;
::enterprise_management::DeviceUser* mutable_user(int index);
::enterprise_management::DeviceUser* add_user();
::google::protobuf::RepeatedPtrField< ::enterprise_management::DeviceUser >*
mutable_user();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::DeviceUser >&
user() const;

// repeated .enterprise_management.VolumeInfo volume_info = 10;
int volume_info_size() const;
void clear_volume_info();
static const int kVolumeInfoFieldNumber = 10;
const ::enterprise_management::VolumeInfo& volume_info(int index) const;
::enterprise_management::VolumeInfo* mutable_volume_info(int index);
::enterprise_management::VolumeInfo* add_volume_info();
::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >*
mutable_volume_info();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >&
volume_info() const;

// repeated .enterprise_management.NetworkState network_state = 11;
int network_state_size() const;
void clear_network_state();
static const int kNetworkStateFieldNumber = 11;
const ::enterprise_management::NetworkState& network_state(int index) const;
::enterprise_management::NetworkState* mutable_network_state(int index);
::enterprise_management::NetworkState* add_network_state();
::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkState >*
mutable_network_state();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkState >&
network_state() const;

// repeated int32 cpu_utilization_pct = 12;
int cpu_utilization_pct_size() const;
void clear_cpu_utilization_pct();
static const int kCpuUtilizationPctFieldNumber = 12;
::google::protobuf::int32 cpu_utilization_pct(int index) const;
void set_cpu_utilization_pct(int index, ::google::protobuf::int32 value);
void add_cpu_utilization_pct(::google::protobuf::int32 value);
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cpu_utilization_pct() const;
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
mutable_cpu_utilization_pct();

// repeated int64 system_ram_free = 15;
int system_ram_free_size() const;
void clear_system_ram_free();
static const int kSystemRamFreeFieldNumber = 15;
::google::protobuf::int64 system_ram_free(int index) const;
void set_system_ram_free(int index, ::google::protobuf::int64 value);
void add_system_ram_free(::google::protobuf::int64 value);
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
system_ram_free() const;
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
mutable_system_ram_free();

// repeated .enterprise_management.CPUTempInfo cpu_temp_info = 16;
int cpu_temp_info_size() const;
void clear_cpu_temp_info();
static const int kCpuTempInfoFieldNumber = 16;
const ::enterprise_management::CPUTempInfo& cpu_temp_info(int index) const;
::enterprise_management::CPUTempInfo* mutable_cpu_temp_info(int index);
::enterprise_management::CPUTempInfo* add_cpu_temp_info();
::google::protobuf::RepeatedPtrField< ::enterprise_management::CPUTempInfo >*
mutable_cpu_temp_info();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::CPUTempInfo >&
cpu_temp_info() const;

// optional string os_version = 1;
bool has_os_version() const;
void clear_os_version();
static const int kOsVersionFieldNumber = 1;
const ::std::string& os_version() const;
void set_os_version(const ::std::string& value);
#if LANG_CXX11
void set_os_version(::std::string&& value);
#endif
void set_os_version(const char* value);
void set_os_version(const char* value, size_t size);
::std::string* mutable_os_version();
::std::string* release_os_version();
void set_allocated_os_version(::std::string* os_version);

// optional string firmware_version = 2;
bool has_firmware_version() const;
void clear_firmware_version();
static const int kFirmwareVersionFieldNumber = 2;
const ::std::string& firmware_version() const;
void set_firmware_version(const ::std::string& value);
#if LANG_CXX11
void set_firmware_version(::std::string&& value);
#endif
void set_firmware_version(const char* value);
void set_firmware_version(const char* value, size_t size);
::std::string* mutable_firmware_version();
::std::string* release_firmware_version();
void set_allocated_firmware_version(::std::string* firmware_version);

// optional string boot_mode = 3;
bool has_boot_mode() const;
void clear_boot_mode();
static const int kBootModeFieldNumber = 3;
const ::std::string& boot_mode() const;
void set_boot_mode(const ::std::string& value);
#if LANG_CXX11
void set_boot_mode(::std::string&& value);
#endif
void set_boot_mode(const char* value);
void set_boot_mode(const char* value, size_t size);
::std::string* mutable_boot_mode();
::std::string* release_boot_mode();
void set_allocated_boot_mode(::std::string* boot_mode);

// optional string browser_version = 5;
bool has_browser_version() const;
void clear_browser_version();
static const int kBrowserVersionFieldNumber = 5;
const ::std::string& browser_version() const;
void set_browser_version(const ::std::string& value);
#if LANG_CXX11
void set_browser_version(::std::string&& value);
#endif
void set_browser_version(const char* value);
void set_browser_version(const char* value, size_t size);
::std::string* mutable_browser_version();
::std::string* release_browser_version();
void set_allocated_browser_version(::std::string* browser_version);

// optional .enterprise_management.OsUpdateStatus os_update_status = 17;
bool has_os_update_status() const;
void clear_os_update_status();
static const int kOsUpdateStatusFieldNumber = 17;
const ::enterprise_management::OsUpdateStatus& os_update_status() const;
::enterprise_management::OsUpdateStatus* mutable_os_update_status();
::enterprise_management::OsUpdateStatus* release_os_update_status();
void set_allocated_os_update_status(::enterprise_management::OsUpdateStatus* os_update_status);

// optional .enterprise_management.AppStatus running_kiosk_app = 18;
bool has_running_kiosk_app() const;
void clear_running_kiosk_app();
static const int kRunningKioskAppFieldNumber = 18;
const ::enterprise_management::AppStatus& running_kiosk_app() const;
::enterprise_management::AppStatus* mutable_running_kiosk_app();
::enterprise_management::AppStatus* release_running_kiosk_app();
void set_allocated_running_kiosk_app(::enterprise_management::AppStatus* running_kiosk_app);

// optional .enterprise_management.TpmVersionInfo tpm_version_info = 21;
bool has_tpm_version_info() const;
void clear_tpm_version_info();
static const int kTpmVersionInfoFieldNumber = 21;
const ::enterprise_management::TpmVersionInfo& tpm_version_info() const;
::enterprise_management::TpmVersionInfo* mutable_tpm_version_info();
::enterprise_management::TpmVersionInfo* release_tpm_version_info();
void set_allocated_tpm_version_info(::enterprise_management::TpmVersionInfo* tpm_version_info);

// optional int64 system_ram_total = 14;
bool has_system_ram_total() const;
void clear_system_ram_total();
static const int kSystemRamTotalFieldNumber = 14;
::google::protobuf::int64 system_ram_total() const;
void set_system_ram_total(::google::protobuf::int64 value);

// optional int32 sound_volume = 19;
bool has_sound_volume() const;
void clear_sound_volume();
static const int kSoundVolumeFieldNumber = 19;
::google::protobuf::int32 sound_volume() const;
void set_sound_volume(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceStatusReportRequest)
private:
void set_has_os_version();
void clear_has_os_version();
void set_has_firmware_version();
void clear_has_firmware_version();
void set_has_boot_mode();
void clear_has_boot_mode();
void set_has_browser_version();
void clear_has_browser_version();
void set_has_system_ram_total();
void clear_has_system_ram_total();
void set_has_os_update_status();
void clear_has_os_update_status();
void set_has_running_kiosk_app();
void clear_has_running_kiosk_app();
void set_has_sound_volume();
void clear_has_sound_volume();
void set_has_tpm_version_info();
void clear_has_tpm_version_info();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::ActiveTimePeriod > active_period_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkInterface > network_interface_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::DeviceUser > user_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo > volume_info_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkState > network_state_;
::google::protobuf::RepeatedField< ::google::protobuf::int32 > cpu_utilization_pct_;
::google::protobuf::RepeatedField< ::google::protobuf::int64 > system_ram_free_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::CPUTempInfo > cpu_temp_info_;
::google::protobuf::internal::ArenaStringPtr os_version_;
::google::protobuf::internal::ArenaStringPtr firmware_version_;
::google::protobuf::internal::ArenaStringPtr boot_mode_;
::google::protobuf::internal::ArenaStringPtr browser_version_;
::enterprise_management::OsUpdateStatus* os_update_status_;
::enterprise_management::AppStatus* running_kiosk_app_;
::enterprise_management::TpmVersionInfo* tpm_version_info_;
::google::protobuf::int64 system_ram_total_;
::google::protobuf::int32 sound_volume_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT OsUpdateStatus : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.OsUpdateStatus) */ {
public:
OsUpdateStatus();
virtual ~OsUpdateStatus();

OsUpdateStatus(const OsUpdateStatus& from);

inline OsUpdateStatus& operator=(const OsUpdateStatus& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const OsUpdateStatus& default_instance();

static inline const OsUpdateStatus* internal_default_instance() {
return reinterpret_cast<const OsUpdateStatus*>(
&_OsUpdateStatus_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
27;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(OsUpdateStatus* other);

// implements Message ----------------------------------------------

inline OsUpdateStatus* New() const PROTOBUF_FINAL { return New(NULL); }

OsUpdateStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const OsUpdateStatus& from);
void MergeFrom(const OsUpdateStatus& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(OsUpdateStatus* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef OsUpdateStatus_UpdateStatus UpdateStatus;
static const UpdateStatus OS_UP_TO_DATE =
OsUpdateStatus_UpdateStatus_OS_UP_TO_DATE;
static const UpdateStatus OS_IMAGE_DOWNLOAD_NOT_STARTED =
OsUpdateStatus_UpdateStatus_OS_IMAGE_DOWNLOAD_NOT_STARTED;
static const UpdateStatus OS_IMAGE_DOWNLOAD_IN_PROGRESS =
OsUpdateStatus_UpdateStatus_OS_IMAGE_DOWNLOAD_IN_PROGRESS;
static const UpdateStatus OS_UPDATE_NEED_REBOOT =
OsUpdateStatus_UpdateStatus_OS_UPDATE_NEED_REBOOT;
static inline bool UpdateStatus_IsValid(int value) {
return OsUpdateStatus_UpdateStatus_IsValid(value);
}
static const UpdateStatus UpdateStatus_MIN =
OsUpdateStatus_UpdateStatus_UpdateStatus_MIN;
static const UpdateStatus UpdateStatus_MAX =
OsUpdateStatus_UpdateStatus_UpdateStatus_MAX;
static const int UpdateStatus_ARRAYSIZE =
OsUpdateStatus_UpdateStatus_UpdateStatus_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string new_platform_version = 2;
bool has_new_platform_version() const;
void clear_new_platform_version();
static const int kNewPlatformVersionFieldNumber = 2;
const ::std::string& new_platform_version() const;
void set_new_platform_version(const ::std::string& value);
#if LANG_CXX11
void set_new_platform_version(::std::string&& value);
#endif
void set_new_platform_version(const char* value);
void set_new_platform_version(const char* value, size_t size);
::std::string* mutable_new_platform_version();
::std::string* release_new_platform_version();
void set_allocated_new_platform_version(::std::string* new_platform_version);

// optional string new_required_platform_version = 3;
bool has_new_required_platform_version() const;
void clear_new_required_platform_version();
static const int kNewRequiredPlatformVersionFieldNumber = 3;
const ::std::string& new_required_platform_version() const;
void set_new_required_platform_version(const ::std::string& value);
#if LANG_CXX11
void set_new_required_platform_version(::std::string&& value);
#endif
void set_new_required_platform_version(const char* value);
void set_new_required_platform_version(const char* value, size_t size);
::std::string* mutable_new_required_platform_version();
::std::string* release_new_required_platform_version();
void set_allocated_new_required_platform_version(::std::string* new_required_platform_version);

// optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
bool has_update_status() const;
void clear_update_status();
static const int kUpdateStatusFieldNumber = 1;
::enterprise_management::OsUpdateStatus_UpdateStatus update_status() const;
void set_update_status(::enterprise_management::OsUpdateStatus_UpdateStatus value);

// @@protoc_insertion_point(class_scope:enterprise_management.OsUpdateStatus)
private:
void set_has_update_status();
void clear_has_update_status();
void set_has_new_platform_version();
void clear_has_new_platform_version();
void set_has_new_required_platform_version();
void clear_has_new_required_platform_version();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr new_platform_version_;
::google::protobuf::internal::ArenaStringPtr new_required_platform_version_;
int update_status_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT AppStatus : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AppStatus) */ {
public:
AppStatus();
virtual ~AppStatus();

AppStatus(const AppStatus& from);

inline AppStatus& operator=(const AppStatus& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const AppStatus& default_instance();

static inline const AppStatus* internal_default_instance() {
return reinterpret_cast<const AppStatus*>(
&_AppStatus_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
28;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(AppStatus* other);

// implements Message ----------------------------------------------

inline AppStatus* New() const PROTOBUF_FINAL { return New(NULL); }

AppStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const AppStatus& from);
void MergeFrom(const AppStatus& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(AppStatus* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string app_id = 1;
bool has_app_id() const;
void clear_app_id();
static const int kAppIdFieldNumber = 1;
const ::std::string& app_id() const;
void set_app_id(const ::std::string& value);
#if LANG_CXX11
void set_app_id(::std::string&& value);
#endif
void set_app_id(const char* value);
void set_app_id(const char* value, size_t size);
::std::string* mutable_app_id();
::std::string* release_app_id();
void set_allocated_app_id(::std::string* app_id);

// optional string extension_version = 2;
bool has_extension_version() const;
void clear_extension_version();
static const int kExtensionVersionFieldNumber = 2;
const ::std::string& extension_version() const;
void set_extension_version(const ::std::string& value);
#if LANG_CXX11
void set_extension_version(::std::string&& value);
#endif
void set_extension_version(const char* value);
void set_extension_version(const char* value, size_t size);
::std::string* mutable_extension_version();
::std::string* release_extension_version();
void set_allocated_extension_version(::std::string* extension_version);

// optional string status = 3;
bool has_status() const;
void clear_status();
static const int kStatusFieldNumber = 3;
const ::std::string& status() const;
void set_status(const ::std::string& value);
#if LANG_CXX11
void set_status(::std::string&& value);
#endif
void set_status(const char* value);
void set_status(const char* value, size_t size);
::std::string* mutable_status();
::std::string* release_status();
void set_allocated_status(::std::string* status);

// optional string required_platform_version = 5;
bool has_required_platform_version() const;
void clear_required_platform_version();
static const int kRequiredPlatformVersionFieldNumber = 5;
const ::std::string& required_platform_version() const;
void set_required_platform_version(const ::std::string& value);
#if LANG_CXX11
void set_required_platform_version(::std::string&& value);
#endif
void set_required_platform_version(const char* value);
void set_required_platform_version(const char* value, size_t size);
::std::string* mutable_required_platform_version();
::std::string* release_required_platform_version();
void set_allocated_required_platform_version(::std::string* required_platform_version);

// optional bool error = 4;
bool has_error() const;
void clear_error();
static const int kErrorFieldNumber = 4;
bool error() const;
void set_error(bool value);

// @@protoc_insertion_point(class_scope:enterprise_management.AppStatus)
private:
void set_has_app_id();
void clear_has_app_id();
void set_has_extension_version();
void clear_has_extension_version();
void set_has_status();
void clear_has_status();
void set_has_error();
void clear_has_error();
void set_has_required_platform_version();
void clear_has_required_platform_version();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr app_id_;
::google::protobuf::internal::ArenaStringPtr extension_version_;
::google::protobuf::internal::ArenaStringPtr status_;
::google::protobuf::internal::ArenaStringPtr required_platform_version_;
bool error_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT ChromeUserProfileReport : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ChromeUserProfileReport) */ {
public:
ChromeUserProfileReport();
virtual ~ChromeUserProfileReport();

ChromeUserProfileReport(const ChromeUserProfileReport& from);

inline ChromeUserProfileReport& operator=(const ChromeUserProfileReport& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ChromeUserProfileReport& default_instance();

static inline const ChromeUserProfileReport* internal_default_instance() {
return reinterpret_cast<const ChromeUserProfileReport*>(
&_ChromeUserProfileReport_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
29;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeUserProfileReport* other);

// implements Message ----------------------------------------------

inline ChromeUserProfileReport* New() const PROTOBUF_FINAL { return New(NULL); }

ChromeUserProfileReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const ChromeUserProfileReport& from);
void MergeFrom(const ChromeUserProfileReport& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ChromeUserProfileReport* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string id = 1;
bool has_id() const;
void clear_id();
static const int kIdFieldNumber = 1;
const ::std::string& id() const;
void set_id(const ::std::string& value);
#if LANG_CXX11
void set_id(::std::string&& value);
#endif
void set_id(const char* value);
void set_id(const char* value, size_t size);
::std::string* mutable_id();
::std::string* release_id();
void set_allocated_id(::std::string* id);

// optional string chrome_signed_in_user = 2;
bool has_chrome_signed_in_user() const;
void clear_chrome_signed_in_user();
static const int kChromeSignedInUserFieldNumber = 2;
const ::std::string& chrome_signed_in_user() const;
void set_chrome_signed_in_user(const ::std::string& value);
#if LANG_CXX11
void set_chrome_signed_in_user(::std::string&& value);
#endif
void set_chrome_signed_in_user(const char* value);
void set_chrome_signed_in_user(const char* value, size_t size);
::std::string* mutable_chrome_signed_in_user();
::std::string* release_chrome_signed_in_user();
void set_allocated_chrome_signed_in_user(::std::string* chrome_signed_in_user);

// optional string extension_data = 3;
bool has_extension_data() const;
void clear_extension_data();
static const int kExtensionDataFieldNumber = 3;
const ::std::string& extension_data() const;
void set_extension_data(const ::std::string& value);
#if LANG_CXX11
void set_extension_data(::std::string&& value);
#endif
void set_extension_data(const char* value);
void set_extension_data(const char* value, size_t size);
::std::string* mutable_extension_data();
::std::string* release_extension_data();
void set_allocated_extension_data(::std::string* extension_data);

// optional string plugins = 4;
bool has_plugins() const;
void clear_plugins();
static const int kPluginsFieldNumber = 4;
const ::std::string& plugins() const;
void set_plugins(const ::std::string& value);
#if LANG_CXX11
void set_plugins(::std::string&& value);
#endif
void set_plugins(const char* value);
void set_plugins(const char* value, size_t size);
::std::string* mutable_plugins();
::std::string* release_plugins();
void set_allocated_plugins(::std::string* plugins);

// optional string policy_data = 5;
bool has_policy_data() const;
void clear_policy_data();
static const int kPolicyDataFieldNumber = 5;
const ::std::string& policy_data() const;
void set_policy_data(const ::std::string& value);
#if LANG_CXX11
void set_policy_data(::std::string&& value);
#endif
void set_policy_data(const char* value);
void set_policy_data(const char* value, size_t size);
::std::string* mutable_policy_data();
::std::string* release_policy_data();
void set_allocated_policy_data(::std::string* policy_data);

// optional string name = 9;
bool has_name() const;
void clear_name();
static const int kNameFieldNumber = 9;
const ::std::string& name() const;
void set_name(const ::std::string& value);
#if LANG_CXX11
void set_name(::std::string&& value);
#endif
void set_name(const char* value);
void set_name(const char* value, size_t size);
::std::string* mutable_name();
::std::string* release_name();
void set_allocated_name(::std::string* name);

// optional int64 policy_fetched_timestamp = 6;
bool has_policy_fetched_timestamp() const;
void clear_policy_fetched_timestamp();
static const int kPolicyFetchedTimestampFieldNumber = 6;
::google::protobuf::int64 policy_fetched_timestamp() const;
void set_policy_fetched_timestamp(::google::protobuf::int64 value);

// optional uint64 safe_browsing_warnings = 7;
bool has_safe_browsing_warnings() const;
void clear_safe_browsing_warnings();
static const int kSafeBrowsingWarningsFieldNumber = 7;
::google::protobuf::uint64 safe_browsing_warnings() const;
void set_safe_browsing_warnings(::google::protobuf::uint64 value);

// optional uint64 safe_browsing_warnings_click_through = 8;
bool has_safe_browsing_warnings_click_through() const;
void clear_safe_browsing_warnings_click_through();
static const int kSafeBrowsingWarningsClickThroughFieldNumber = 8;
::google::protobuf::uint64 safe_browsing_warnings_click_through() const;
void set_safe_browsing_warnings_click_through(::google::protobuf::uint64 value);

// @@protoc_insertion_point(class_scope:enterprise_management.ChromeUserProfileReport)
private:
void set_has_id();
void clear_has_id();
void set_has_chrome_signed_in_user();
void clear_has_chrome_signed_in_user();
void set_has_extension_data();
void clear_has_extension_data();
void set_has_plugins();
void clear_has_plugins();
void set_has_policy_data();
void clear_has_policy_data();
void set_has_policy_fetched_timestamp();
void clear_has_policy_fetched_timestamp();
void set_has_safe_browsing_warnings();
void clear_has_safe_browsing_warnings();
void set_has_safe_browsing_warnings_click_through();
void clear_has_safe_browsing_warnings_click_through();
void set_has_name();
void clear_has_name();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr id_;
::google::protobuf::internal::ArenaStringPtr chrome_signed_in_user_;
::google::protobuf::internal::ArenaStringPtr extension_data_;
::google::protobuf::internal::ArenaStringPtr plugins_;
::google::protobuf::internal::ArenaStringPtr policy_data_;
::google::protobuf::internal::ArenaStringPtr name_;
::google::protobuf::int64 policy_fetched_timestamp_;
::google::protobuf::uint64 safe_browsing_warnings_;
::google::protobuf::uint64 safe_browsing_warnings_click_through_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT BrowserReport : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.BrowserReport) */ {
public:
BrowserReport();
virtual ~BrowserReport();

BrowserReport(const BrowserReport& from);

inline BrowserReport& operator=(const BrowserReport& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const BrowserReport& default_instance();

static inline const BrowserReport* internal_default_instance() {
return reinterpret_cast<const BrowserReport*>(
&_BrowserReport_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
30;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(BrowserReport* other);

// implements Message ----------------------------------------------

inline BrowserReport* New() const PROTOBUF_FINAL { return New(NULL); }

BrowserReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const BrowserReport& from);
void MergeFrom(const BrowserReport& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(BrowserReport* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef BrowserReport_Channel Channel;
static const Channel UNKNOWN =
BrowserReport_Channel_UNKNOWN;
static const Channel CANARY =
BrowserReport_Channel_CANARY;
static const Channel DEV =
BrowserReport_Channel_DEV;
static const Channel BETA =
BrowserReport_Channel_BETA;
static const Channel STABLE =
BrowserReport_Channel_STABLE;
static inline bool Channel_IsValid(int value) {
return BrowserReport_Channel_IsValid(value);
}
static const Channel Channel_MIN =
BrowserReport_Channel_Channel_MIN;
static const Channel Channel_MAX =
BrowserReport_Channel_Channel_MAX;
static const int Channel_ARRAYSIZE =
BrowserReport_Channel_Channel_ARRAYSIZE;

// accessors -------------------------------------------------------

// repeated .enterprise_management.ChromeUserProfileReport chrome_user_profile_reports = 4;
int chrome_user_profile_reports_size() const;
void clear_chrome_user_profile_reports();
static const int kChromeUserProfileReportsFieldNumber = 4;
const ::enterprise_management::ChromeUserProfileReport& chrome_user_profile_reports(int index) const;
::enterprise_management::ChromeUserProfileReport* mutable_chrome_user_profile_reports(int index);
::enterprise_management::ChromeUserProfileReport* add_chrome_user_profile_reports();
::google::protobuf::RepeatedPtrField< ::enterprise_management::ChromeUserProfileReport >*
mutable_chrome_user_profile_reports();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::ChromeUserProfileReport >&
chrome_user_profile_reports() const;

// optional string browser_version = 1;
bool has_browser_version() const;
void clear_browser_version();
static const int kBrowserVersionFieldNumber = 1;
const ::std::string& browser_version() const;
void set_browser_version(const ::std::string& value);
#if LANG_CXX11
void set_browser_version(::std::string&& value);
#endif
void set_browser_version(const char* value);
void set_browser_version(const char* value, size_t size);
::std::string* mutable_browser_version();
::std::string* release_browser_version();
void set_allocated_browser_version(::std::string* browser_version);

// optional string executable_path = 3;
bool has_executable_path() const;
void clear_executable_path();
static const int kExecutablePathFieldNumber = 3;
const ::std::string& executable_path() const;
void set_executable_path(const ::std::string& value);
#if LANG_CXX11
void set_executable_path(::std::string&& value);
#endif
void set_executable_path(const char* value);
void set_executable_path(const char* value, size_t size);
::std::string* mutable_executable_path();
::std::string* release_executable_path();
void set_allocated_executable_path(::std::string* executable_path);

// optional .enterprise_management.BrowserReport.Channel channel = 2;
bool has_channel() const;
void clear_channel();
static const int kChannelFieldNumber = 2;
::enterprise_management::BrowserReport_Channel channel() const;
void set_channel(::enterprise_management::BrowserReport_Channel value);

// @@protoc_insertion_point(class_scope:enterprise_management.BrowserReport)
private:
void set_has_browser_version();
void clear_has_browser_version();
void set_has_channel();
void clear_has_channel();
void set_has_executable_path();
void clear_has_executable_path();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::ChromeUserProfileReport > chrome_user_profile_reports_;
::google::protobuf::internal::ArenaStringPtr browser_version_;
::google::protobuf::internal::ArenaStringPtr executable_path_;
int channel_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT ChromeDesktopReportRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ChromeDesktopReportRequest) */ {
public:
ChromeDesktopReportRequest();
virtual ~ChromeDesktopReportRequest();

ChromeDesktopReportRequest(const ChromeDesktopReportRequest& from);

inline ChromeDesktopReportRequest& operator=(const ChromeDesktopReportRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ChromeDesktopReportRequest& default_instance();

static inline const ChromeDesktopReportRequest* internal_default_instance() {
return reinterpret_cast<const ChromeDesktopReportRequest*>(
&_ChromeDesktopReportRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
31;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeDesktopReportRequest* other);

// implements Message ----------------------------------------------

inline ChromeDesktopReportRequest* New() const PROTOBUF_FINAL { return New(NULL); }

ChromeDesktopReportRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const ChromeDesktopReportRequest& from);
void MergeFrom(const ChromeDesktopReportRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ChromeDesktopReportRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string machine_name = 1;
bool has_machine_name() const;
void clear_machine_name();
static const int kMachineNameFieldNumber = 1;
const ::std::string& machine_name() const;
void set_machine_name(const ::std::string& value);
#if LANG_CXX11
void set_machine_name(::std::string&& value);
#endif
void set_machine_name(const char* value);
void set_machine_name(const char* value, size_t size);
::std::string* mutable_machine_name();
::std::string* release_machine_name();
void set_allocated_machine_name(::std::string* machine_name);

// optional string os_info = 2;
bool has_os_info() const;
void clear_os_info();
static const int kOsInfoFieldNumber = 2;
const ::std::string& os_info() const;
void set_os_info(const ::std::string& value);
#if LANG_CXX11
void set_os_info(::std::string&& value);
#endif
void set_os_info(const char* value);
void set_os_info(const char* value, size_t size);
::std::string* mutable_os_info();
::std::string* release_os_info();
void set_allocated_os_info(::std::string* os_info);

// optional string os_user = 3;
bool has_os_user() const;
void clear_os_user();
static const int kOsUserFieldNumber = 3;
const ::std::string& os_user() const;
void set_os_user(const ::std::string& value);
#if LANG_CXX11
void set_os_user(::std::string&& value);
#endif
void set_os_user(const char* value);
void set_os_user(const char* value, size_t size);
::std::string* mutable_os_user();
::std::string* release_os_user();
void set_allocated_os_user(::std::string* os_user);

// optional .enterprise_management.BrowserReport browser_report = 4;
bool has_browser_report() const;
void clear_browser_report();
static const int kBrowserReportFieldNumber = 4;
const ::enterprise_management::BrowserReport& browser_report() const;
::enterprise_management::BrowserReport* mutable_browser_report();
::enterprise_management::BrowserReport* release_browser_report();
void set_allocated_browser_report(::enterprise_management::BrowserReport* browser_report);

// @@protoc_insertion_point(class_scope:enterprise_management.ChromeDesktopReportRequest)
private:
void set_has_machine_name();
void clear_has_machine_name();
void set_has_os_info();
void clear_has_os_info();
void set_has_os_user();
void clear_has_os_user();
void set_has_browser_report();
void clear_has_browser_report();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr machine_name_;
::google::protobuf::internal::ArenaStringPtr os_info_;
::google::protobuf::internal::ArenaStringPtr os_user_;
::enterprise_management::BrowserReport* browser_report_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT PolicyValueValidationResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PolicyValueValidationResult) */ {
public:
PolicyValueValidationResult();
virtual ~PolicyValueValidationResult();

PolicyValueValidationResult(const PolicyValueValidationResult& from);

inline PolicyValueValidationResult& operator=(const PolicyValueValidationResult& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const PolicyValueValidationResult& default_instance();

static inline const PolicyValueValidationResult* internal_default_instance() {
return reinterpret_cast<const PolicyValueValidationResult*>(
&_PolicyValueValidationResult_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
32;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(PolicyValueValidationResult* other);

// implements Message ----------------------------------------------

inline PolicyValueValidationResult* New() const PROTOBUF_FINAL { return New(NULL); }

PolicyValueValidationResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const PolicyValueValidationResult& from);
void MergeFrom(const PolicyValueValidationResult& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PolicyValueValidationResult* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef PolicyValueValidationResult_ValidationResultSeverity ValidationResultSeverity;
static const ValidationResultSeverity VALIDATION_RESULT_SEVERITY_UNSPECIFIED =
PolicyValueValidationResult_ValidationResultSeverity_VALIDATION_RESULT_SEVERITY_UNSPECIFIED;
static const ValidationResultSeverity VALIDATION_RESULT_SEVERITY_WARNING =
PolicyValueValidationResult_ValidationResultSeverity_VALIDATION_RESULT_SEVERITY_WARNING;
static const ValidationResultSeverity VALIDATION_RESULT_SEVERITY_ERROR =
PolicyValueValidationResult_ValidationResultSeverity_VALIDATION_RESULT_SEVERITY_ERROR;
static inline bool ValidationResultSeverity_IsValid(int value) {
return PolicyValueValidationResult_ValidationResultSeverity_IsValid(value);
}
static const ValidationResultSeverity ValidationResultSeverity_MIN =
PolicyValueValidationResult_ValidationResultSeverity_ValidationResultSeverity_MIN;
static const ValidationResultSeverity ValidationResultSeverity_MAX =
PolicyValueValidationResult_ValidationResultSeverity_ValidationResultSeverity_MAX;
static const int ValidationResultSeverity_ARRAYSIZE =
PolicyValueValidationResult_ValidationResultSeverity_ValidationResultSeverity_ARRAYSIZE;

typedef PolicyValueValidationResult_ErrorType ErrorType;
static const ErrorType ERROR_TYPE_UNSPECIFIED =
PolicyValueValidationResult_ErrorType_ERROR_TYPE_UNSPECIFIED;
static const ErrorType ERROR_TYPE_PARSE_ERROR =
PolicyValueValidationResult_ErrorType_ERROR_TYPE_PARSE_ERROR;
static const ErrorType ERROR_TYPE_INVALID_TYPE =
PolicyValueValidationResult_ErrorType_ERROR_TYPE_INVALID_TYPE;
static const ErrorType ERROR_TYPE_MISSING_FIELD =
PolicyValueValidationResult_ErrorType_ERROR_TYPE_MISSING_FIELD;
static const ErrorType ERROR_TYPE_UNKNOWN_ENUM_VALUE =
PolicyValueValidationResult_ErrorType_ERROR_TYPE_UNKNOWN_ENUM_VALUE;
static const ErrorType ERROR_TYPE_OUT_OF_BOUNDS =
PolicyValueValidationResult_ErrorType_ERROR_TYPE_OUT_OF_BOUNDS;
static const ErrorType ERROR_TYPE_INVALID_REFERENCE =
PolicyValueValidationResult_ErrorType_ERROR_TYPE_INVALID_REFERENCE;
static inline bool ErrorType_IsValid(int value) {
return PolicyValueValidationResult_ErrorType_IsValid(value);
}
static const ErrorType ErrorType_MIN =
PolicyValueValidationResult_ErrorType_ErrorType_MIN;
static const ErrorType ErrorType_MAX =
PolicyValueValidationResult_ErrorType_ErrorType_MAX;
static const int ErrorType_ARRAYSIZE =
PolicyValueValidationResult_ErrorType_ErrorType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string detailed_error_path = 3;
bool has_detailed_error_path() const;
void clear_detailed_error_path();
static const int kDetailedErrorPathFieldNumber = 3;
const ::std::string& detailed_error_path() const;
void set_detailed_error_path(const ::std::string& value);
#if LANG_CXX11
void set_detailed_error_path(::std::string&& value);
#endif
void set_detailed_error_path(const char* value);
void set_detailed_error_path(const char* value, size_t size);
::std::string* mutable_detailed_error_path();
::std::string* release_detailed_error_path();
void set_allocated_detailed_error_path(::std::string* detailed_error_path);

// optional string error_debug_info = 5;
bool has_error_debug_info() const;
void clear_error_debug_info();
static const int kErrorDebugInfoFieldNumber = 5;
const ::std::string& error_debug_info() const;
void set_error_debug_info(const ::std::string& value);
#if LANG_CXX11
void set_error_debug_info(::std::string&& value);
#endif
void set_error_debug_info(const char* value);
void set_error_debug_info(const char* value, size_t size);
::std::string* mutable_error_debug_info();
::std::string* release_error_debug_info();
void set_allocated_error_debug_info(::std::string* error_debug_info);

// optional int32 policy_proto_tag = 1;
bool has_policy_proto_tag() const;
void clear_policy_proto_tag();
static const int kPolicyProtoTagFieldNumber = 1;
::google::protobuf::int32 policy_proto_tag() const;
void set_policy_proto_tag(::google::protobuf::int32 value);

// optional .enterprise_management.PolicyValueValidationResult.ValidationResultSeverity severity = 2;
bool has_severity() const;
void clear_severity();
static const int kSeverityFieldNumber = 2;
::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity severity() const;
void set_severity(::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity value);

// optional .enterprise_management.PolicyValueValidationResult.ErrorType error_type = 4;
bool has_error_type() const;
void clear_error_type();
static const int kErrorTypeFieldNumber = 4;
::enterprise_management::PolicyValueValidationResult_ErrorType error_type() const;
void set_error_type(::enterprise_management::PolicyValueValidationResult_ErrorType value);

// @@protoc_insertion_point(class_scope:enterprise_management.PolicyValueValidationResult)
private:
void set_has_policy_proto_tag();
void clear_has_policy_proto_tag();
void set_has_severity();
void clear_has_severity();
void set_has_detailed_error_path();
void clear_has_detailed_error_path();
void set_has_error_type();
void clear_has_error_type();
void set_has_error_debug_info();
void clear_has_error_debug_info();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr detailed_error_path_;
::google::protobuf::internal::ArenaStringPtr error_debug_info_;
::google::protobuf::int32 policy_proto_tag_;
int severity_;
int error_type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT PolicyValidationReportRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PolicyValidationReportRequest) */ {
public:
PolicyValidationReportRequest();
virtual ~PolicyValidationReportRequest();

PolicyValidationReportRequest(const PolicyValidationReportRequest& from);

inline PolicyValidationReportRequest& operator=(const PolicyValidationReportRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const PolicyValidationReportRequest& default_instance();

static inline const PolicyValidationReportRequest* internal_default_instance() {
return reinterpret_cast<const PolicyValidationReportRequest*>(
&_PolicyValidationReportRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
33;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(PolicyValidationReportRequest* other);

// implements Message ----------------------------------------------

inline PolicyValidationReportRequest* New() const PROTOBUF_FINAL { return New(NULL); }

PolicyValidationReportRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const PolicyValidationReportRequest& from);
void MergeFrom(const PolicyValidationReportRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PolicyValidationReportRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef PolicyValidationReportRequest_ValidationResultType ValidationResultType;
static const ValidationResultType VALIDATION_RESULT_TYPE_ERROR_UNSPECIFIED =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_ERROR_UNSPECIFIED;
static const ValidationResultType VALIDATION_RESULT_TYPE_SUCCESS =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_SUCCESS;
static const ValidationResultType VALIDATION_RESULT_TYPE_BAD_INITIAL_SIGNATURE =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_INITIAL_SIGNATURE;
static const ValidationResultType VALIDATION_RESULT_TYPE_BAD_SIGNATURE =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_SIGNATURE;
static const ValidationResultType VALIDATION_RESULT_TYPE_ERROR_CODE_PRESENT =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_ERROR_CODE_PRESENT;
static const ValidationResultType VALIDATION_RESULT_TYPE_PAYLOAD_PARSE_ERROR =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_PAYLOAD_PARSE_ERROR;
static const ValidationResultType VALIDATION_RESULT_TYPE_WRONG_POLICY_TYPE =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_WRONG_POLICY_TYPE;
static const ValidationResultType VALIDATION_RESULT_TYPE_WRONG_SETTINGS_ENTITY_ID =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_WRONG_SETTINGS_ENTITY_ID;
static const ValidationResultType VALIDATION_RESULT_TYPE_BAD_TIMESTAMP =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_TIMESTAMP;
static const ValidationResultType VALIDATION_RESULT_TYPE_BAD_DM_TOKEN =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_DM_TOKEN;
static const ValidationResultType VALIDATION_RESULT_TYPE_BAD_DEVICE_ID =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_DEVICE_ID;
static const ValidationResultType VALIDATION_RESULT_TYPE_USER_MISMATCH =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_USER_MISMATCH;
static const ValidationResultType VALIDATION_RESULT_TYPE_POLICY_PARSE_ERROR =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_POLICY_PARSE_ERROR;
static const ValidationResultType VALIDATION_RESULT_TYPE_BAD_KEY_VERIFICATION_SIGNATURE =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_BAD_KEY_VERIFICATION_SIGNATURE;
static const ValidationResultType VALIDATION_RESULT_TYPE_POLICY_VALUE_WARNINGS =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_POLICY_VALUE_WARNINGS;
static const ValidationResultType VALIDATION_RESULT_TYPE_POLICY_VALUE_ERRORS =
PolicyValidationReportRequest_ValidationResultType_VALIDATION_RESULT_TYPE_POLICY_VALUE_ERRORS;
static inline bool ValidationResultType_IsValid(int value) {
return PolicyValidationReportRequest_ValidationResultType_IsValid(value);
}
static const ValidationResultType ValidationResultType_MIN =
PolicyValidationReportRequest_ValidationResultType_ValidationResultType_MIN;
static const ValidationResultType ValidationResultType_MAX =
PolicyValidationReportRequest_ValidationResultType_ValidationResultType_MAX;
static const int ValidationResultType_ARRAYSIZE =
PolicyValidationReportRequest_ValidationResultType_ValidationResultType_ARRAYSIZE;

// accessors -------------------------------------------------------

// repeated .enterprise_management.PolicyValueValidationResult policy_value_validation_results = 4;
int policy_value_validation_results_size() const;
void clear_policy_value_validation_results();
static const int kPolicyValueValidationResultsFieldNumber = 4;
const ::enterprise_management::PolicyValueValidationResult& policy_value_validation_results(int index) const;
::enterprise_management::PolicyValueValidationResult* mutable_policy_value_validation_results(int index);
::enterprise_management::PolicyValueValidationResult* add_policy_value_validation_results();
::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyValueValidationResult >*
mutable_policy_value_validation_results();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyValueValidationResult >&
policy_value_validation_results() const;

// optional string policy_type = 1;
bool has_policy_type() const;
void clear_policy_type();
static const int kPolicyTypeFieldNumber = 1;
const ::std::string& policy_type() const;
void set_policy_type(const ::std::string& value);
#if LANG_CXX11
void set_policy_type(::std::string&& value);
#endif
void set_policy_type(const char* value);
void set_policy_type(const char* value, size_t size);
::std::string* mutable_policy_type();
::std::string* release_policy_type();
void set_allocated_policy_type(::std::string* policy_type);

// optional string policy_token = 2;
bool has_policy_token() const;
void clear_policy_token();
static const int kPolicyTokenFieldNumber = 2;
const ::std::string& policy_token() const;
void set_policy_token(const ::std::string& value);
#if LANG_CXX11
void set_policy_token(::std::string&& value);
#endif
void set_policy_token(const char* value);
void set_policy_token(const char* value, size_t size);
::std::string* mutable_policy_token();
::std::string* release_policy_token();
void set_allocated_policy_token(::std::string* policy_token);

// optional .enterprise_management.PolicyValidationReportRequest.ValidationResultType validation_result_type = 3;
bool has_validation_result_type() const;
void clear_validation_result_type();
static const int kValidationResultTypeFieldNumber = 3;
::enterprise_management::PolicyValidationReportRequest_ValidationResultType validation_result_type() const;
void set_validation_result_type(::enterprise_management::PolicyValidationReportRequest_ValidationResultType value);

// @@protoc_insertion_point(class_scope:enterprise_management.PolicyValidationReportRequest)
private:
void set_has_policy_type();
void clear_has_policy_type();
void set_has_policy_token();
void clear_has_policy_token();
void set_has_validation_result_type();
void clear_has_validation_result_type();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyValueValidationResult > policy_value_validation_results_;
::google::protobuf::internal::ArenaStringPtr policy_type_;
::google::protobuf::internal::ArenaStringPtr policy_token_;
int validation_result_type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT PolicyValidationReportResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PolicyValidationReportResponse) */ {
public:
PolicyValidationReportResponse();
virtual ~PolicyValidationReportResponse();

PolicyValidationReportResponse(const PolicyValidationReportResponse& from);

inline PolicyValidationReportResponse& operator=(const PolicyValidationReportResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const PolicyValidationReportResponse& default_instance();

static inline const PolicyValidationReportResponse* internal_default_instance() {
return reinterpret_cast<const PolicyValidationReportResponse*>(
&_PolicyValidationReportResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
34;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(PolicyValidationReportResponse* other);

// implements Message ----------------------------------------------

inline PolicyValidationReportResponse* New() const PROTOBUF_FINAL { return New(NULL); }

PolicyValidationReportResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const PolicyValidationReportResponse& from);
void MergeFrom(const PolicyValidationReportResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PolicyValidationReportResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.PolicyValidationReportResponse)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT AndroidStatus : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AndroidStatus) */ {
public:
AndroidStatus();
virtual ~AndroidStatus();

AndroidStatus(const AndroidStatus& from);

inline AndroidStatus& operator=(const AndroidStatus& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const AndroidStatus& default_instance();

static inline const AndroidStatus* internal_default_instance() {
return reinterpret_cast<const AndroidStatus*>(
&_AndroidStatus_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
35;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(AndroidStatus* other);

// implements Message ----------------------------------------------

inline AndroidStatus* New() const PROTOBUF_FINAL { return New(NULL); }

AndroidStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const AndroidStatus& from);
void MergeFrom(const AndroidStatus& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(AndroidStatus* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string status_payload = 1;
bool has_status_payload() const;
void clear_status_payload();
static const int kStatusPayloadFieldNumber = 1;
const ::std::string& status_payload() const;
void set_status_payload(const ::std::string& value);
#if LANG_CXX11
void set_status_payload(::std::string&& value);
#endif
void set_status_payload(const char* value);
void set_status_payload(const char* value, size_t size);
::std::string* mutable_status_payload();
::std::string* release_status_payload();
void set_allocated_status_payload(::std::string* status_payload);

// optional string droid_guard_info = 2;
bool has_droid_guard_info() const;
void clear_droid_guard_info();
static const int kDroidGuardInfoFieldNumber = 2;
const ::std::string& droid_guard_info() const;
void set_droid_guard_info(const ::std::string& value);
#if LANG_CXX11
void set_droid_guard_info(::std::string&& value);
#endif
void set_droid_guard_info(const char* value);
void set_droid_guard_info(const char* value, size_t size);
::std::string* mutable_droid_guard_info();
::std::string* release_droid_guard_info();
void set_allocated_droid_guard_info(::std::string* droid_guard_info);

// @@protoc_insertion_point(class_scope:enterprise_management.AndroidStatus)
private:
void set_has_status_payload();
void clear_has_status_payload();
void set_has_droid_guard_info();
void clear_has_droid_guard_info();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr status_payload_;
::google::protobuf::internal::ArenaStringPtr droid_guard_info_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT SessionStatusReportRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SessionStatusReportRequest) */ {
public:
SessionStatusReportRequest();
virtual ~SessionStatusReportRequest();

SessionStatusReportRequest(const SessionStatusReportRequest& from);

inline SessionStatusReportRequest& operator=(const SessionStatusReportRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const SessionStatusReportRequest& default_instance();

static inline const SessionStatusReportRequest* internal_default_instance() {
return reinterpret_cast<const SessionStatusReportRequest*>(
&_SessionStatusReportRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
36;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(SessionStatusReportRequest* other);

// implements Message ----------------------------------------------

inline SessionStatusReportRequest* New() const PROTOBUF_FINAL { return New(NULL); }

SessionStatusReportRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const SessionStatusReportRequest& from);
void MergeFrom(const SessionStatusReportRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(SessionStatusReportRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated .enterprise_management.AppStatus installed_apps = 5;
int installed_apps_size() const;
void clear_installed_apps();
static const int kInstalledAppsFieldNumber = 5;
const ::enterprise_management::AppStatus& installed_apps(int index) const;
::enterprise_management::AppStatus* mutable_installed_apps(int index);
::enterprise_management::AppStatus* add_installed_apps();
::google::protobuf::RepeatedPtrField< ::enterprise_management::AppStatus >*
mutable_installed_apps();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppStatus >&
installed_apps() const;

// optional string device_local_account_id = 4;
bool has_device_local_account_id() const;
void clear_device_local_account_id();
static const int kDeviceLocalAccountIdFieldNumber = 4;
const ::std::string& device_local_account_id() const;
void set_device_local_account_id(const ::std::string& value);
#if LANG_CXX11
void set_device_local_account_id(::std::string&& value);
#endif
void set_device_local_account_id(const char* value);
void set_device_local_account_id(const char* value, size_t size);
::std::string* mutable_device_local_account_id();
::std::string* release_device_local_account_id();
void set_allocated_device_local_account_id(::std::string* device_local_account_id);

// optional string user_dm_token = 8;
bool has_user_dm_token() const;
void clear_user_dm_token();
static const int kUserDmTokenFieldNumber = 8;
const ::std::string& user_dm_token() const;
void set_user_dm_token(const ::std::string& value);
#if LANG_CXX11
void set_user_dm_token(::std::string&& value);
#endif
void set_user_dm_token(const char* value);
void set_user_dm_token(const char* value, size_t size);
::std::string* mutable_user_dm_token();
::std::string* release_user_dm_token();
void set_allocated_user_dm_token(::std::string* user_dm_token);

// optional string time_zone = 9;
bool has_time_zone() const;
void clear_time_zone();
static const int kTimeZoneFieldNumber = 9;
const ::std::string& time_zone() const;
void set_time_zone(const ::std::string& value);
#if LANG_CXX11
void set_time_zone(::std::string&& value);
#endif
void set_time_zone(const char* value);
void set_time_zone(const char* value, size_t size);
::std::string* mutable_time_zone();
::std::string* release_time_zone();
void set_allocated_time_zone(::std::string* time_zone);

// optional .enterprise_management.AndroidStatus android_status = 7;
bool has_android_status() const;
void clear_android_status();
static const int kAndroidStatusFieldNumber = 7;
const ::enterprise_management::AndroidStatus& android_status() const;
::enterprise_management::AndroidStatus* mutable_android_status();
::enterprise_management::AndroidStatus* release_android_status();
void set_allocated_android_status(::enterprise_management::AndroidStatus* android_status);

// @@protoc_insertion_point(class_scope:enterprise_management.SessionStatusReportRequest)
private:
void set_has_device_local_account_id();
void clear_has_device_local_account_id();
void set_has_android_status();
void clear_has_android_status();
void set_has_user_dm_token();
void clear_has_user_dm_token();
void set_has_time_zone();
void clear_has_time_zone();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::AppStatus > installed_apps_;
::google::protobuf::internal::ArenaStringPtr device_local_account_id_;
::google::protobuf::internal::ArenaStringPtr user_dm_token_;
::google::protobuf::internal::ArenaStringPtr time_zone_;
::enterprise_management::AndroidStatus* android_status_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceStatusReportResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceStatusReportResponse) */ {
public:
DeviceStatusReportResponse();
virtual ~DeviceStatusReportResponse();

DeviceStatusReportResponse(const DeviceStatusReportResponse& from);

inline DeviceStatusReportResponse& operator=(const DeviceStatusReportResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceStatusReportResponse& default_instance();

static inline const DeviceStatusReportResponse* internal_default_instance() {
return reinterpret_cast<const DeviceStatusReportResponse*>(
&_DeviceStatusReportResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
37;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceStatusReportResponse* other);

// implements Message ----------------------------------------------

inline DeviceStatusReportResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceStatusReportResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceStatusReportResponse& from);
void MergeFrom(const DeviceStatusReportResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceStatusReportResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string error_message = 2;
bool has_error_message() const;
void clear_error_message();
static const int kErrorMessageFieldNumber = 2;
const ::std::string& error_message() const;
void set_error_message(const ::std::string& value);
#if LANG_CXX11
void set_error_message(::std::string&& value);
#endif
void set_error_message(const char* value);
void set_error_message(const char* value, size_t size);
::std::string* mutable_error_message();
::std::string* release_error_message();
void set_allocated_error_message(::std::string* error_message);

// optional int32 error_code = 1;
bool has_error_code() const;
void clear_error_code();
static const int kErrorCodeFieldNumber = 1;
::google::protobuf::int32 error_code() const;
void set_error_code(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceStatusReportResponse)
private:
void set_has_error_code();
void clear_has_error_code();
void set_has_error_message();
void clear_has_error_message();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr error_message_;
::google::protobuf::int32 error_code_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT ChromeDesktopReportResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ChromeDesktopReportResponse) */ {
public:
ChromeDesktopReportResponse();
virtual ~ChromeDesktopReportResponse();

ChromeDesktopReportResponse(const ChromeDesktopReportResponse& from);

inline ChromeDesktopReportResponse& operator=(const ChromeDesktopReportResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ChromeDesktopReportResponse& default_instance();

static inline const ChromeDesktopReportResponse* internal_default_instance() {
return reinterpret_cast<const ChromeDesktopReportResponse*>(
&_ChromeDesktopReportResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
38;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeDesktopReportResponse* other);

// implements Message ----------------------------------------------

inline ChromeDesktopReportResponse* New() const PROTOBUF_FINAL { return New(NULL); }

ChromeDesktopReportResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const ChromeDesktopReportResponse& from);
void MergeFrom(const ChromeDesktopReportResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ChromeDesktopReportResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.ChromeDesktopReportResponse)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT SessionStatusReportResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SessionStatusReportResponse) */ {
public:
SessionStatusReportResponse();
virtual ~SessionStatusReportResponse();

SessionStatusReportResponse(const SessionStatusReportResponse& from);

inline SessionStatusReportResponse& operator=(const SessionStatusReportResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const SessionStatusReportResponse& default_instance();

static inline const SessionStatusReportResponse* internal_default_instance() {
return reinterpret_cast<const SessionStatusReportResponse*>(
&_SessionStatusReportResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
39;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(SessionStatusReportResponse* other);

// implements Message ----------------------------------------------

inline SessionStatusReportResponse* New() const PROTOBUF_FINAL { return New(NULL); }

SessionStatusReportResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const SessionStatusReportResponse& from);
void MergeFrom(const SessionStatusReportResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(SessionStatusReportResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string error_message = 2;
bool has_error_message() const;
void clear_error_message();
static const int kErrorMessageFieldNumber = 2;
const ::std::string& error_message() const;
void set_error_message(const ::std::string& value);
#if LANG_CXX11
void set_error_message(::std::string&& value);
#endif
void set_error_message(const char* value);
void set_error_message(const char* value, size_t size);
::std::string* mutable_error_message();
::std::string* release_error_message();
void set_allocated_error_message(::std::string* error_message);

// optional int32 error_code = 1;
bool has_error_code() const;
void clear_error_code();
static const int kErrorCodeFieldNumber = 1;
::google::protobuf::int32 error_code() const;
void set_error_code(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.SessionStatusReportResponse)
private:
void set_has_error_code();
void clear_has_error_code();
void set_has_error_message();
void clear_has_error_message();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr error_message_;
::google::protobuf::int32 error_code_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceAutoEnrollmentRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceAutoEnrollmentRequest) */ {
public:
DeviceAutoEnrollmentRequest();
virtual ~DeviceAutoEnrollmentRequest();

DeviceAutoEnrollmentRequest(const DeviceAutoEnrollmentRequest& from);

inline DeviceAutoEnrollmentRequest& operator=(const DeviceAutoEnrollmentRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceAutoEnrollmentRequest& default_instance();

static inline const DeviceAutoEnrollmentRequest* internal_default_instance() {
return reinterpret_cast<const DeviceAutoEnrollmentRequest*>(
&_DeviceAutoEnrollmentRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
40;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceAutoEnrollmentRequest* other);

// implements Message ----------------------------------------------

inline DeviceAutoEnrollmentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceAutoEnrollmentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceAutoEnrollmentRequest& from);
void MergeFrom(const DeviceAutoEnrollmentRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceAutoEnrollmentRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceAutoEnrollmentRequest_EnrollmentCheckType EnrollmentCheckType;
static const EnrollmentCheckType ENROLLMENT_CHECK_TYPE_UNSPECIFIED =
DeviceAutoEnrollmentRequest_EnrollmentCheckType_ENROLLMENT_CHECK_TYPE_UNSPECIFIED;
static const EnrollmentCheckType ENROLLMENT_CHECK_TYPE_FRE =
DeviceAutoEnrollmentRequest_EnrollmentCheckType_ENROLLMENT_CHECK_TYPE_FRE;
static const EnrollmentCheckType ENROLLMENT_CHECK_TYPE_FORCED_ENROLLMENT =
DeviceAutoEnrollmentRequest_EnrollmentCheckType_ENROLLMENT_CHECK_TYPE_FORCED_ENROLLMENT;
static inline bool EnrollmentCheckType_IsValid(int value) {
return DeviceAutoEnrollmentRequest_EnrollmentCheckType_IsValid(value);
}
static const EnrollmentCheckType EnrollmentCheckType_MIN =
DeviceAutoEnrollmentRequest_EnrollmentCheckType_EnrollmentCheckType_MIN;
static const EnrollmentCheckType EnrollmentCheckType_MAX =
DeviceAutoEnrollmentRequest_EnrollmentCheckType_EnrollmentCheckType_MAX;
static const int EnrollmentCheckType_ARRAYSIZE =
DeviceAutoEnrollmentRequest_EnrollmentCheckType_EnrollmentCheckType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional int64 remainder = 1;
bool has_remainder() const;
void clear_remainder();
static const int kRemainderFieldNumber = 1;
::google::protobuf::int64 remainder() const;
void set_remainder(::google::protobuf::int64 value);

// optional int64 modulus = 2;
bool has_modulus() const;
void clear_modulus();
static const int kModulusFieldNumber = 2;
::google::protobuf::int64 modulus() const;
void set_modulus(::google::protobuf::int64 value);

// optional .enterprise_management.DeviceAutoEnrollmentRequest.EnrollmentCheckType enrollment_check_type = 3 [default = ENROLLMENT_CHECK_TYPE_FRE];
bool has_enrollment_check_type() const;
void clear_enrollment_check_type();
static const int kEnrollmentCheckTypeFieldNumber = 3;
::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType enrollment_check_type() const;
void set_enrollment_check_type(::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceAutoEnrollmentRequest)
private:
void set_has_remainder();
void clear_has_remainder();
void set_has_modulus();
void clear_has_modulus();
void set_has_enrollment_check_type();
void clear_has_enrollment_check_type();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::int64 remainder_;
::google::protobuf::int64 modulus_;
int enrollment_check_type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceAutoEnrollmentResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceAutoEnrollmentResponse) */ {
public:
DeviceAutoEnrollmentResponse();
virtual ~DeviceAutoEnrollmentResponse();

DeviceAutoEnrollmentResponse(const DeviceAutoEnrollmentResponse& from);

inline DeviceAutoEnrollmentResponse& operator=(const DeviceAutoEnrollmentResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceAutoEnrollmentResponse& default_instance();

static inline const DeviceAutoEnrollmentResponse* internal_default_instance() {
return reinterpret_cast<const DeviceAutoEnrollmentResponse*>(
&_DeviceAutoEnrollmentResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
41;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceAutoEnrollmentResponse* other);

// implements Message ----------------------------------------------

inline DeviceAutoEnrollmentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceAutoEnrollmentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceAutoEnrollmentResponse& from);
void MergeFrom(const DeviceAutoEnrollmentResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceAutoEnrollmentResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated bytes hash = 2;
int hash_size() const;
void clear_hash();
static const int kHashFieldNumber = 2;
const ::std::string& hash(int index) const;
::std::string* mutable_hash(int index);
void set_hash(int index, const ::std::string& value);
#if LANG_CXX11
void set_hash(int index, ::std::string&& value);
#endif
void set_hash(int index, const char* value);
void set_hash(int index, const void* value, size_t size);
::std::string* add_hash();
void add_hash(const ::std::string& value);
#if LANG_CXX11
void add_hash(::std::string&& value);
#endif
void add_hash(const char* value);
void add_hash(const void* value, size_t size);
const ::google::protobuf::RepeatedPtrField< ::std::string>& hash() const;
::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hash();

// optional int64 expected_modulus = 1;
bool has_expected_modulus() const;
void clear_expected_modulus();
static const int kExpectedModulusFieldNumber = 1;
::google::protobuf::int64 expected_modulus() const;
void set_expected_modulus(::google::protobuf::int64 value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceAutoEnrollmentResponse)
private:
void set_has_expected_modulus();
void clear_has_expected_modulus();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::std::string> hash_;
::google::protobuf::int64 expected_modulus_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceStateRetrievalRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceStateRetrievalRequest) */ {
public:
DeviceStateRetrievalRequest();
virtual ~DeviceStateRetrievalRequest();

DeviceStateRetrievalRequest(const DeviceStateRetrievalRequest& from);

inline DeviceStateRetrievalRequest& operator=(const DeviceStateRetrievalRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceStateRetrievalRequest& default_instance();

static inline const DeviceStateRetrievalRequest* internal_default_instance() {
return reinterpret_cast<const DeviceStateRetrievalRequest*>(
&_DeviceStateRetrievalRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
42;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceStateRetrievalRequest* other);

// implements Message ----------------------------------------------

inline DeviceStateRetrievalRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceStateRetrievalRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceStateRetrievalRequest& from);
void MergeFrom(const DeviceStateRetrievalRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceStateRetrievalRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional bytes server_backed_state_key = 1;
bool has_server_backed_state_key() const;
void clear_server_backed_state_key();
static const int kServerBackedStateKeyFieldNumber = 1;
const ::std::string& server_backed_state_key() const;
void set_server_backed_state_key(const ::std::string& value);
#if LANG_CXX11
void set_server_backed_state_key(::std::string&& value);
#endif
void set_server_backed_state_key(const char* value);
void set_server_backed_state_key(const void* value, size_t size);
::std::string* mutable_server_backed_state_key();
::std::string* release_server_backed_state_key();
void set_allocated_server_backed_state_key(::std::string* server_backed_state_key);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceStateRetrievalRequest)
private:
void set_has_server_backed_state_key();
void clear_has_server_backed_state_key();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr server_backed_state_key_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceStateKeyUpdateRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceStateKeyUpdateRequest) */ {
public:
DeviceStateKeyUpdateRequest();
virtual ~DeviceStateKeyUpdateRequest();

DeviceStateKeyUpdateRequest(const DeviceStateKeyUpdateRequest& from);

inline DeviceStateKeyUpdateRequest& operator=(const DeviceStateKeyUpdateRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceStateKeyUpdateRequest& default_instance();

static inline const DeviceStateKeyUpdateRequest* internal_default_instance() {
return reinterpret_cast<const DeviceStateKeyUpdateRequest*>(
&_DeviceStateKeyUpdateRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
43;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceStateKeyUpdateRequest* other);

// implements Message ----------------------------------------------

inline DeviceStateKeyUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceStateKeyUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceStateKeyUpdateRequest& from);
void MergeFrom(const DeviceStateKeyUpdateRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceStateKeyUpdateRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated bytes server_backed_state_key = 1;
int server_backed_state_key_size() const;
void clear_server_backed_state_key();
static const int kServerBackedStateKeyFieldNumber = 1;
const ::std::string& server_backed_state_key(int index) const;
::std::string* mutable_server_backed_state_key(int index);
void set_server_backed_state_key(int index, const ::std::string& value);
#if LANG_CXX11
void set_server_backed_state_key(int index, ::std::string&& value);
#endif
void set_server_backed_state_key(int index, const char* value);
void set_server_backed_state_key(int index, const void* value, size_t size);
::std::string* add_server_backed_state_key();
void add_server_backed_state_key(const ::std::string& value);
#if LANG_CXX11
void add_server_backed_state_key(::std::string&& value);
#endif
void add_server_backed_state_key(const char* value);
void add_server_backed_state_key(const void* value, size_t size);
const ::google::protobuf::RepeatedPtrField< ::std::string>& server_backed_state_key() const;
::google::protobuf::RepeatedPtrField< ::std::string>* mutable_server_backed_state_key();

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceStateKeyUpdateRequest)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::std::string> server_backed_state_key_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceStateRetrievalResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceStateRetrievalResponse) */ {
public:
DeviceStateRetrievalResponse();
virtual ~DeviceStateRetrievalResponse();

DeviceStateRetrievalResponse(const DeviceStateRetrievalResponse& from);

inline DeviceStateRetrievalResponse& operator=(const DeviceStateRetrievalResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceStateRetrievalResponse& default_instance();

static inline const DeviceStateRetrievalResponse* internal_default_instance() {
return reinterpret_cast<const DeviceStateRetrievalResponse*>(
&_DeviceStateRetrievalResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
44;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceStateRetrievalResponse* other);

// implements Message ----------------------------------------------

inline DeviceStateRetrievalResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceStateRetrievalResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceStateRetrievalResponse& from);
void MergeFrom(const DeviceStateRetrievalResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceStateRetrievalResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceStateRetrievalResponse_RestoreMode RestoreMode;
static const RestoreMode RESTORE_MODE_NONE =
DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_NONE;
static const RestoreMode RESTORE_MODE_REENROLLMENT_REQUESTED =
DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_REENROLLMENT_REQUESTED;
static const RestoreMode RESTORE_MODE_REENROLLMENT_ENFORCED =
DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_REENROLLMENT_ENFORCED;
static const RestoreMode RESTORE_MODE_DISABLED =
DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_DISABLED;
static const RestoreMode RESTORE_MODE_REENROLLMENT_ZERO_TOUCH =
DeviceStateRetrievalResponse_RestoreMode_RESTORE_MODE_REENROLLMENT_ZERO_TOUCH;
static inline bool RestoreMode_IsValid(int value) {
return DeviceStateRetrievalResponse_RestoreMode_IsValid(value);
}
static const RestoreMode RestoreMode_MIN =
DeviceStateRetrievalResponse_RestoreMode_RestoreMode_MIN;
static const RestoreMode RestoreMode_MAX =
DeviceStateRetrievalResponse_RestoreMode_RestoreMode_MAX;
static const int RestoreMode_ARRAYSIZE =
DeviceStateRetrievalResponse_RestoreMode_RestoreMode_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string management_domain = 2;
bool has_management_domain() const;
void clear_management_domain();
static const int kManagementDomainFieldNumber = 2;
const ::std::string& management_domain() const;
void set_management_domain(const ::std::string& value);
#if LANG_CXX11
void set_management_domain(::std::string&& value);
#endif
void set_management_domain(const char* value);
void set_management_domain(const char* value, size_t size);
::std::string* mutable_management_domain();
::std::string* release_management_domain();
void set_allocated_management_domain(::std::string* management_domain);

// optional .enterprise_management.DisabledState disabled_state = 3;
bool has_disabled_state() const;
void clear_disabled_state();
static const int kDisabledStateFieldNumber = 3;
const ::enterprise_management::DisabledState& disabled_state() const;
::enterprise_management::DisabledState* mutable_disabled_state();
::enterprise_management::DisabledState* release_disabled_state();
void set_allocated_disabled_state(::enterprise_management::DisabledState* disabled_state);

// optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
bool has_restore_mode() const;
void clear_restore_mode();
static const int kRestoreModeFieldNumber = 1;
::enterprise_management::DeviceStateRetrievalResponse_RestoreMode restore_mode() const;
void set_restore_mode(::enterprise_management::DeviceStateRetrievalResponse_RestoreMode value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceStateRetrievalResponse)
private:
void set_has_restore_mode();
void clear_has_restore_mode();
void set_has_management_domain();
void clear_has_management_domain();
void set_has_disabled_state();
void clear_has_disabled_state();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr management_domain_;
::enterprise_management::DisabledState* disabled_state_;
int restore_mode_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceInitialEnrollmentStateRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceInitialEnrollmentStateRequest) */ {
public:
DeviceInitialEnrollmentStateRequest();
virtual ~DeviceInitialEnrollmentStateRequest();

DeviceInitialEnrollmentStateRequest(const DeviceInitialEnrollmentStateRequest& from);

inline DeviceInitialEnrollmentStateRequest& operator=(const DeviceInitialEnrollmentStateRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceInitialEnrollmentStateRequest& default_instance();

static inline const DeviceInitialEnrollmentStateRequest* internal_default_instance() {
return reinterpret_cast<const DeviceInitialEnrollmentStateRequest*>(
&_DeviceInitialEnrollmentStateRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
45;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceInitialEnrollmentStateRequest* other);

// implements Message ----------------------------------------------

inline DeviceInitialEnrollmentStateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceInitialEnrollmentStateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceInitialEnrollmentStateRequest& from);
void MergeFrom(const DeviceInitialEnrollmentStateRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceInitialEnrollmentStateRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string serial_number = 1;
bool has_serial_number() const;
void clear_serial_number();
static const int kSerialNumberFieldNumber = 1;
const ::std::string& serial_number() const;
void set_serial_number(const ::std::string& value);
#if LANG_CXX11
void set_serial_number(::std::string&& value);
#endif
void set_serial_number(const char* value);
void set_serial_number(const char* value, size_t size);
::std::string* mutable_serial_number();
::std::string* release_serial_number();
void set_allocated_serial_number(::std::string* serial_number);

// optional string brand_code = 2;
bool has_brand_code() const;
void clear_brand_code();
static const int kBrandCodeFieldNumber = 2;
const ::std::string& brand_code() const;
void set_brand_code(const ::std::string& value);
#if LANG_CXX11
void set_brand_code(::std::string&& value);
#endif
void set_brand_code(const char* value);
void set_brand_code(const char* value, size_t size);
::std::string* mutable_brand_code();
::std::string* release_brand_code();
void set_allocated_brand_code(::std::string* brand_code);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceInitialEnrollmentStateRequest)
private:
void set_has_serial_number();
void clear_has_serial_number();
void set_has_brand_code();
void clear_has_brand_code();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr serial_number_;
::google::protobuf::internal::ArenaStringPtr brand_code_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceInitialEnrollmentStateResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceInitialEnrollmentStateResponse) */ {
public:
DeviceInitialEnrollmentStateResponse();
virtual ~DeviceInitialEnrollmentStateResponse();

DeviceInitialEnrollmentStateResponse(const DeviceInitialEnrollmentStateResponse& from);

inline DeviceInitialEnrollmentStateResponse& operator=(const DeviceInitialEnrollmentStateResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceInitialEnrollmentStateResponse& default_instance();

static inline const DeviceInitialEnrollmentStateResponse* internal_default_instance() {
return reinterpret_cast<const DeviceInitialEnrollmentStateResponse*>(
&_DeviceInitialEnrollmentStateResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
46;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceInitialEnrollmentStateResponse* other);

// implements Message ----------------------------------------------

inline DeviceInitialEnrollmentStateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceInitialEnrollmentStateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceInitialEnrollmentStateResponse& from);
void MergeFrom(const DeviceInitialEnrollmentStateResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceInitialEnrollmentStateResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode InitialEnrollmentMode;
static const InitialEnrollmentMode INITIAL_ENROLLMENT_MODE_NONE =
DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_INITIAL_ENROLLMENT_MODE_NONE;
static const InitialEnrollmentMode INITIAL_ENROLLMENT_MODE_ENROLLMENT_ENFORCED =
DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_INITIAL_ENROLLMENT_MODE_ENROLLMENT_ENFORCED;
static inline bool InitialEnrollmentMode_IsValid(int value) {
return DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_IsValid(value);
}
static const InitialEnrollmentMode InitialEnrollmentMode_MIN =
DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_InitialEnrollmentMode_MIN;
static const InitialEnrollmentMode InitialEnrollmentMode_MAX =
DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_InitialEnrollmentMode_MAX;
static const int InitialEnrollmentMode_ARRAYSIZE =
DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_InitialEnrollmentMode_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string management_domain = 2;
bool has_management_domain() const;
void clear_management_domain();
static const int kManagementDomainFieldNumber = 2;
const ::std::string& management_domain() const;
void set_management_domain(const ::std::string& value);
#if LANG_CXX11
void set_management_domain(::std::string&& value);
#endif
void set_management_domain(const char* value);
void set_management_domain(const char* value, size_t size);
::std::string* mutable_management_domain();
::std::string* release_management_domain();
void set_allocated_management_domain(::std::string* management_domain);

// optional .enterprise_management.DeviceInitialEnrollmentStateResponse.InitialEnrollmentMode initial_enrollment_mode = 1 [default = INITIAL_ENROLLMENT_MODE_NONE];
bool has_initial_enrollment_mode() const;
void clear_initial_enrollment_mode();
static const int kInitialEnrollmentModeFieldNumber = 1;
::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode initial_enrollment_mode() const;
void set_initial_enrollment_mode(::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceInitialEnrollmentStateResponse)
private:
void set_has_initial_enrollment_mode();
void clear_has_initial_enrollment_mode();
void set_has_management_domain();
void clear_has_management_domain();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr management_domain_;
int initial_enrollment_mode_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DevicePairingRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DevicePairingRequest) */ {
public:
DevicePairingRequest();
virtual ~DevicePairingRequest();

DevicePairingRequest(const DevicePairingRequest& from);

inline DevicePairingRequest& operator=(const DevicePairingRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DevicePairingRequest& default_instance();

static inline const DevicePairingRequest* internal_default_instance() {
return reinterpret_cast<const DevicePairingRequest*>(
&_DevicePairingRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
47;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DevicePairingRequest* other);

// implements Message ----------------------------------------------

inline DevicePairingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DevicePairingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DevicePairingRequest& from);
void MergeFrom(const DevicePairingRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DevicePairingRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string host_device_id = 1;
bool has_host_device_id() const;
void clear_host_device_id();
static const int kHostDeviceIdFieldNumber = 1;
const ::std::string& host_device_id() const;
void set_host_device_id(const ::std::string& value);
#if LANG_CXX11
void set_host_device_id(::std::string&& value);
#endif
void set_host_device_id(const char* value);
void set_host_device_id(const char* value, size_t size);
::std::string* mutable_host_device_id();
::std::string* release_host_device_id();
void set_allocated_host_device_id(::std::string* host_device_id);

// optional string controller_device_id = 2;
bool has_controller_device_id() const;
void clear_controller_device_id();
static const int kControllerDeviceIdFieldNumber = 2;
const ::std::string& controller_device_id() const;
void set_controller_device_id(const ::std::string& value);
#if LANG_CXX11
void set_controller_device_id(::std::string&& value);
#endif
void set_controller_device_id(const char* value);
void set_controller_device_id(const char* value, size_t size);
::std::string* mutable_controller_device_id();
::std::string* release_controller_device_id();
void set_allocated_controller_device_id(::std::string* controller_device_id);

// @@protoc_insertion_point(class_scope:enterprise_management.DevicePairingRequest)
private:
void set_has_host_device_id();
void clear_has_host_device_id();
void set_has_controller_device_id();
void clear_has_controller_device_id();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr host_device_id_;
::google::protobuf::internal::ArenaStringPtr controller_device_id_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DevicePairingResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DevicePairingResponse) */ {
public:
DevicePairingResponse();
virtual ~DevicePairingResponse();

DevicePairingResponse(const DevicePairingResponse& from);

inline DevicePairingResponse& operator=(const DevicePairingResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DevicePairingResponse& default_instance();

static inline const DevicePairingResponse* internal_default_instance() {
return reinterpret_cast<const DevicePairingResponse*>(
&_DevicePairingResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
48;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DevicePairingResponse* other);

// implements Message ----------------------------------------------

inline DevicePairingResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DevicePairingResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DevicePairingResponse& from);
void MergeFrom(const DevicePairingResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DevicePairingResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DevicePairingResponse_StatusCode StatusCode;
static const StatusCode SUCCESS =
DevicePairingResponse_StatusCode_SUCCESS;
static const StatusCode FAILED =
DevicePairingResponse_StatusCode_FAILED;
static const StatusCode HOST_DEVICE_NOT_FOUND =
DevicePairingResponse_StatusCode_HOST_DEVICE_NOT_FOUND;
static const StatusCode CONTROLLER_DEVICE_NOT_FOUND =
DevicePairingResponse_StatusCode_CONTROLLER_DEVICE_NOT_FOUND;
static const StatusCode HOST_DEVICE_DEPROVISIONED =
DevicePairingResponse_StatusCode_HOST_DEVICE_DEPROVISIONED;
static const StatusCode CONTROLLER_DEVICE_DEPROVISIONED =
DevicePairingResponse_StatusCode_CONTROLLER_DEVICE_DEPROVISIONED;
static inline bool StatusCode_IsValid(int value) {
return DevicePairingResponse_StatusCode_IsValid(value);
}
static const StatusCode StatusCode_MIN =
DevicePairingResponse_StatusCode_StatusCode_MIN;
static const StatusCode StatusCode_MAX =
DevicePairingResponse_StatusCode_StatusCode_MAX;
static const int StatusCode_ARRAYSIZE =
DevicePairingResponse_StatusCode_StatusCode_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
bool has_status_code() const;
void clear_status_code();
static const int kStatusCodeFieldNumber = 1;
::enterprise_management::DevicePairingResponse_StatusCode status_code() const;
void set_status_code(::enterprise_management::DevicePairingResponse_StatusCode value);

// @@protoc_insertion_point(class_scope:enterprise_management.DevicePairingResponse)
private:
void set_has_status_code();
void clear_has_status_code();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
int status_code_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT CheckDevicePairingRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CheckDevicePairingRequest) */ {
public:
CheckDevicePairingRequest();
virtual ~CheckDevicePairingRequest();

CheckDevicePairingRequest(const CheckDevicePairingRequest& from);

inline CheckDevicePairingRequest& operator=(const CheckDevicePairingRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const CheckDevicePairingRequest& default_instance();

static inline const CheckDevicePairingRequest* internal_default_instance() {
return reinterpret_cast<const CheckDevicePairingRequest*>(
&_CheckDevicePairingRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
49;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(CheckDevicePairingRequest* other);

// implements Message ----------------------------------------------

inline CheckDevicePairingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

CheckDevicePairingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const CheckDevicePairingRequest& from);
void MergeFrom(const CheckDevicePairingRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CheckDevicePairingRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string host_device_id = 1;
bool has_host_device_id() const;
void clear_host_device_id();
static const int kHostDeviceIdFieldNumber = 1;
const ::std::string& host_device_id() const;
void set_host_device_id(const ::std::string& value);
#if LANG_CXX11
void set_host_device_id(::std::string&& value);
#endif
void set_host_device_id(const char* value);
void set_host_device_id(const char* value, size_t size);
::std::string* mutable_host_device_id();
::std::string* release_host_device_id();
void set_allocated_host_device_id(::std::string* host_device_id);

// optional string controller_device_id = 2;
bool has_controller_device_id() const;
void clear_controller_device_id();
static const int kControllerDeviceIdFieldNumber = 2;
const ::std::string& controller_device_id() const;
void set_controller_device_id(const ::std::string& value);
#if LANG_CXX11
void set_controller_device_id(::std::string&& value);
#endif
void set_controller_device_id(const char* value);
void set_controller_device_id(const char* value, size_t size);
::std::string* mutable_controller_device_id();
::std::string* release_controller_device_id();
void set_allocated_controller_device_id(::std::string* controller_device_id);

// @@protoc_insertion_point(class_scope:enterprise_management.CheckDevicePairingRequest)
private:
void set_has_host_device_id();
void clear_has_host_device_id();
void set_has_controller_device_id();
void clear_has_controller_device_id();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr host_device_id_;
::google::protobuf::internal::ArenaStringPtr controller_device_id_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT CheckDevicePairingResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CheckDevicePairingResponse) */ {
public:
CheckDevicePairingResponse();
virtual ~CheckDevicePairingResponse();

CheckDevicePairingResponse(const CheckDevicePairingResponse& from);

inline CheckDevicePairingResponse& operator=(const CheckDevicePairingResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const CheckDevicePairingResponse& default_instance();

static inline const CheckDevicePairingResponse* internal_default_instance() {
return reinterpret_cast<const CheckDevicePairingResponse*>(
&_CheckDevicePairingResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
50;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(CheckDevicePairingResponse* other);

// implements Message ----------------------------------------------

inline CheckDevicePairingResponse* New() const PROTOBUF_FINAL { return New(NULL); }

CheckDevicePairingResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const CheckDevicePairingResponse& from);
void MergeFrom(const CheckDevicePairingResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CheckDevicePairingResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef CheckDevicePairingResponse_StatusCode StatusCode;
static const StatusCode PAIRED =
CheckDevicePairingResponse_StatusCode_PAIRED;
static const StatusCode NOT_PAIRED =
CheckDevicePairingResponse_StatusCode_NOT_PAIRED;
static const StatusCode HOST_DEVICE_NOT_FOUND =
CheckDevicePairingResponse_StatusCode_HOST_DEVICE_NOT_FOUND;
static const StatusCode CONTROLLER_DEVICE_NOT_FOUND =
CheckDevicePairingResponse_StatusCode_CONTROLLER_DEVICE_NOT_FOUND;
static const StatusCode HOST_DEVICE_DEPROVISIONED =
CheckDevicePairingResponse_StatusCode_HOST_DEVICE_DEPROVISIONED;
static const StatusCode CONTROLLER_DEVICE_DEPROVISIONED =
CheckDevicePairingResponse_StatusCode_CONTROLLER_DEVICE_DEPROVISIONED;
static const StatusCode INVALID_CONTROLLER_DEVICE_IDENTITY =
CheckDevicePairingResponse_StatusCode_INVALID_CONTROLLER_DEVICE_IDENTITY;
static inline bool StatusCode_IsValid(int value) {
return CheckDevicePairingResponse_StatusCode_IsValid(value);
}
static const StatusCode StatusCode_MIN =
CheckDevicePairingResponse_StatusCode_StatusCode_MIN;
static const StatusCode StatusCode_MAX =
CheckDevicePairingResponse_StatusCode_StatusCode_MAX;
static const int StatusCode_ARRAYSIZE =
CheckDevicePairingResponse_StatusCode_StatusCode_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
bool has_status_code() const;
void clear_status_code();
static const int kStatusCodeFieldNumber = 1;
::enterprise_management::CheckDevicePairingResponse_StatusCode status_code() const;
void set_status_code(::enterprise_management::CheckDevicePairingResponse_StatusCode value);

// @@protoc_insertion_point(class_scope:enterprise_management.CheckDevicePairingResponse)
private:
void set_has_status_code();
void clear_has_status_code();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
int status_code_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT RemoteCommand : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.RemoteCommand) */ {
public:
RemoteCommand();
virtual ~RemoteCommand();

RemoteCommand(const RemoteCommand& from);

inline RemoteCommand& operator=(const RemoteCommand& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const RemoteCommand& default_instance();

static inline const RemoteCommand* internal_default_instance() {
return reinterpret_cast<const RemoteCommand*>(
&_RemoteCommand_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
51;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(RemoteCommand* other);

// implements Message ----------------------------------------------

inline RemoteCommand* New() const PROTOBUF_FINAL { return New(NULL); }

RemoteCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const RemoteCommand& from);
void MergeFrom(const RemoteCommand& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(RemoteCommand* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef RemoteCommand_Type Type;
static const Type COMMAND_ECHO_TEST =
RemoteCommand_Type_COMMAND_ECHO_TEST;
static const Type DEVICE_REBOOT =
RemoteCommand_Type_DEVICE_REBOOT;
static const Type DEVICE_SCREENSHOT =
RemoteCommand_Type_DEVICE_SCREENSHOT;
static const Type DEVICE_SET_VOLUME =
RemoteCommand_Type_DEVICE_SET_VOLUME;
static const Type DEVICE_FETCH_STATUS =
RemoteCommand_Type_DEVICE_FETCH_STATUS;
static const Type USER_ARC_COMMAND =
RemoteCommand_Type_USER_ARC_COMMAND;
static inline bool Type_IsValid(int value) {
return RemoteCommand_Type_IsValid(value);
}
static const Type Type_MIN =
RemoteCommand_Type_Type_MIN;
static const Type Type_MAX =
RemoteCommand_Type_Type_MAX;
static const int Type_ARRAYSIZE =
RemoteCommand_Type_Type_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string payload = 4;
bool has_payload() const;
void clear_payload();
static const int kPayloadFieldNumber = 4;
const ::std::string& payload() const;
void set_payload(const ::std::string& value);
#if LANG_CXX11
void set_payload(::std::string&& value);
#endif
void set_payload(const char* value);
void set_payload(const char* value, size_t size);
::std::string* mutable_payload();
::std::string* release_payload();
void set_allocated_payload(::std::string* payload);

// optional int64 command_id = 2;
bool has_command_id() const;
void clear_command_id();
static const int kCommandIdFieldNumber = 2;
::google::protobuf::int64 command_id() const;
void set_command_id(::google::protobuf::int64 value);

// optional int64 age_of_command = 3;
bool has_age_of_command() const;
void clear_age_of_command();
static const int kAgeOfCommandFieldNumber = 3;
::google::protobuf::int64 age_of_command() const;
void set_age_of_command(::google::protobuf::int64 value);

// optional .enterprise_management.RemoteCommand.Type type = 1;
bool has_type() const;
void clear_type();
static const int kTypeFieldNumber = 1;
::enterprise_management::RemoteCommand_Type type() const;
void set_type(::enterprise_management::RemoteCommand_Type value);

// @@protoc_insertion_point(class_scope:enterprise_management.RemoteCommand)
private:
void set_has_type();
void clear_has_type();
void set_has_command_id();
void clear_has_command_id();
void set_has_age_of_command();
void clear_has_age_of_command();
void set_has_payload();
void clear_has_payload();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr payload_;
::google::protobuf::int64 command_id_;
::google::protobuf::int64 age_of_command_;
int type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT RemoteCommandResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.RemoteCommandResult) */ {
public:
RemoteCommandResult();
virtual ~RemoteCommandResult();

RemoteCommandResult(const RemoteCommandResult& from);

inline RemoteCommandResult& operator=(const RemoteCommandResult& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const RemoteCommandResult& default_instance();

static inline const RemoteCommandResult* internal_default_instance() {
return reinterpret_cast<const RemoteCommandResult*>(
&_RemoteCommandResult_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
52;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(RemoteCommandResult* other);

// implements Message ----------------------------------------------

inline RemoteCommandResult* New() const PROTOBUF_FINAL { return New(NULL); }

RemoteCommandResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const RemoteCommandResult& from);
void MergeFrom(const RemoteCommandResult& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(RemoteCommandResult* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef RemoteCommandResult_ResultType ResultType;
static const ResultType RESULT_IGNORED =
RemoteCommandResult_ResultType_RESULT_IGNORED;
static const ResultType RESULT_FAILURE =
RemoteCommandResult_ResultType_RESULT_FAILURE;
static const ResultType RESULT_SUCCESS =
RemoteCommandResult_ResultType_RESULT_SUCCESS;
static inline bool ResultType_IsValid(int value) {
return RemoteCommandResult_ResultType_IsValid(value);
}
static const ResultType ResultType_MIN =
RemoteCommandResult_ResultType_ResultType_MIN;
static const ResultType ResultType_MAX =
RemoteCommandResult_ResultType_ResultType_MAX;
static const int ResultType_ARRAYSIZE =
RemoteCommandResult_ResultType_ResultType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string payload = 4;
bool has_payload() const;
void clear_payload();
static const int kPayloadFieldNumber = 4;
const ::std::string& payload() const;
void set_payload(const ::std::string& value);
#if LANG_CXX11
void set_payload(::std::string&& value);
#endif
void set_payload(const char* value);
void set_payload(const char* value, size_t size);
::std::string* mutable_payload();
::std::string* release_payload();
void set_allocated_payload(::std::string* payload);

// optional int64 command_id = 2;
bool has_command_id() const;
void clear_command_id();
static const int kCommandIdFieldNumber = 2;
::google::protobuf::int64 command_id() const;
void set_command_id(::google::protobuf::int64 value);

// optional int64 timestamp = 3;
bool has_timestamp() const;
void clear_timestamp();
static const int kTimestampFieldNumber = 3;
::google::protobuf::int64 timestamp() const;
void set_timestamp(::google::protobuf::int64 value);

// optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
bool has_result() const;
void clear_result();
static const int kResultFieldNumber = 1;
::enterprise_management::RemoteCommandResult_ResultType result() const;
void set_result(::enterprise_management::RemoteCommandResult_ResultType value);

// @@protoc_insertion_point(class_scope:enterprise_management.RemoteCommandResult)
private:
void set_has_result();
void clear_has_result();
void set_has_command_id();
void clear_has_command_id();
void set_has_timestamp();
void clear_has_timestamp();
void set_has_payload();
void clear_has_payload();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr payload_;
::google::protobuf::int64 command_id_;
::google::protobuf::int64 timestamp_;
int result_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceRemoteCommandRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceRemoteCommandRequest) */ {
public:
DeviceRemoteCommandRequest();
virtual ~DeviceRemoteCommandRequest();

DeviceRemoteCommandRequest(const DeviceRemoteCommandRequest& from);

inline DeviceRemoteCommandRequest& operator=(const DeviceRemoteCommandRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceRemoteCommandRequest& default_instance();

static inline const DeviceRemoteCommandRequest* internal_default_instance() {
return reinterpret_cast<const DeviceRemoteCommandRequest*>(
&_DeviceRemoteCommandRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
53;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceRemoteCommandRequest* other);

// implements Message ----------------------------------------------

inline DeviceRemoteCommandRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceRemoteCommandRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceRemoteCommandRequest& from);
void MergeFrom(const DeviceRemoteCommandRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceRemoteCommandRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated .enterprise_management.RemoteCommandResult command_results = 2;
int command_results_size() const;
void clear_command_results();
static const int kCommandResultsFieldNumber = 2;
const ::enterprise_management::RemoteCommandResult& command_results(int index) const;
::enterprise_management::RemoteCommandResult* mutable_command_results(int index);
::enterprise_management::RemoteCommandResult* add_command_results();
::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommandResult >*
mutable_command_results();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommandResult >&
command_results() const;

// optional int64 last_command_unique_id = 1;
bool has_last_command_unique_id() const;
void clear_last_command_unique_id();
static const int kLastCommandUniqueIdFieldNumber = 1;
::google::protobuf::int64 last_command_unique_id() const;
void set_last_command_unique_id(::google::protobuf::int64 value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceRemoteCommandRequest)
private:
void set_has_last_command_unique_id();
void clear_has_last_command_unique_id();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommandResult > command_results_;
::google::protobuf::int64 last_command_unique_id_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceRemoteCommandResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceRemoteCommandResponse) */ {
public:
DeviceRemoteCommandResponse();
virtual ~DeviceRemoteCommandResponse();

DeviceRemoteCommandResponse(const DeviceRemoteCommandResponse& from);

inline DeviceRemoteCommandResponse& operator=(const DeviceRemoteCommandResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceRemoteCommandResponse& default_instance();

static inline const DeviceRemoteCommandResponse* internal_default_instance() {
return reinterpret_cast<const DeviceRemoteCommandResponse*>(
&_DeviceRemoteCommandResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
54;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceRemoteCommandResponse* other);

// implements Message ----------------------------------------------

inline DeviceRemoteCommandResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceRemoteCommandResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceRemoteCommandResponse& from);
void MergeFrom(const DeviceRemoteCommandResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceRemoteCommandResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated .enterprise_management.RemoteCommand commands = 1;
int commands_size() const;
void clear_commands();
static const int kCommandsFieldNumber = 1;
const ::enterprise_management::RemoteCommand& commands(int index) const;
::enterprise_management::RemoteCommand* mutable_commands(int index);
::enterprise_management::RemoteCommand* add_commands();
::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommand >*
mutable_commands();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommand >&
commands() const;

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceRemoteCommandResponse)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommand > commands_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceAttributeUpdatePermissionRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceAttributeUpdatePermissionRequest) */ {
public:
DeviceAttributeUpdatePermissionRequest();
virtual ~DeviceAttributeUpdatePermissionRequest();

DeviceAttributeUpdatePermissionRequest(const DeviceAttributeUpdatePermissionRequest& from);

inline DeviceAttributeUpdatePermissionRequest& operator=(const DeviceAttributeUpdatePermissionRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceAttributeUpdatePermissionRequest& default_instance();

static inline const DeviceAttributeUpdatePermissionRequest* internal_default_instance() {
return reinterpret_cast<const DeviceAttributeUpdatePermissionRequest*>(
&_DeviceAttributeUpdatePermissionRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
55;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceAttributeUpdatePermissionRequest* other);

// implements Message ----------------------------------------------

inline DeviceAttributeUpdatePermissionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceAttributeUpdatePermissionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceAttributeUpdatePermissionRequest& from);
void MergeFrom(const DeviceAttributeUpdatePermissionRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceAttributeUpdatePermissionRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceAttributeUpdatePermissionRequest)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceAttributeUpdatePermissionResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceAttributeUpdatePermissionResponse) */ {
public:
DeviceAttributeUpdatePermissionResponse();
virtual ~DeviceAttributeUpdatePermissionResponse();

DeviceAttributeUpdatePermissionResponse(const DeviceAttributeUpdatePermissionResponse& from);

inline DeviceAttributeUpdatePermissionResponse& operator=(const DeviceAttributeUpdatePermissionResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceAttributeUpdatePermissionResponse& default_instance();

static inline const DeviceAttributeUpdatePermissionResponse* internal_default_instance() {
return reinterpret_cast<const DeviceAttributeUpdatePermissionResponse*>(
&_DeviceAttributeUpdatePermissionResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
56;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceAttributeUpdatePermissionResponse* other);

// implements Message ----------------------------------------------

inline DeviceAttributeUpdatePermissionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceAttributeUpdatePermissionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceAttributeUpdatePermissionResponse& from);
void MergeFrom(const DeviceAttributeUpdatePermissionResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceAttributeUpdatePermissionResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceAttributeUpdatePermissionResponse_ResultType ResultType;
static const ResultType ATTRIBUTE_UPDATE_DISALLOWED =
DeviceAttributeUpdatePermissionResponse_ResultType_ATTRIBUTE_UPDATE_DISALLOWED;
static const ResultType ATTRIBUTE_UPDATE_ALLOWED =
DeviceAttributeUpdatePermissionResponse_ResultType_ATTRIBUTE_UPDATE_ALLOWED;
static inline bool ResultType_IsValid(int value) {
return DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(value);
}
static const ResultType ResultType_MIN =
DeviceAttributeUpdatePermissionResponse_ResultType_ResultType_MIN;
static const ResultType ResultType_MAX =
DeviceAttributeUpdatePermissionResponse_ResultType_ResultType_MAX;
static const int ResultType_ARRAYSIZE =
DeviceAttributeUpdatePermissionResponse_ResultType_ResultType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
bool has_result() const;
void clear_result();
static const int kResultFieldNumber = 1;
::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType result() const;
void set_result(::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceAttributeUpdatePermissionResponse)
private:
void set_has_result();
void clear_has_result();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
int result_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceAttributeUpdateRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceAttributeUpdateRequest) */ {
public:
DeviceAttributeUpdateRequest();
virtual ~DeviceAttributeUpdateRequest();

DeviceAttributeUpdateRequest(const DeviceAttributeUpdateRequest& from);

inline DeviceAttributeUpdateRequest& operator=(const DeviceAttributeUpdateRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceAttributeUpdateRequest& default_instance();

static inline const DeviceAttributeUpdateRequest* internal_default_instance() {
return reinterpret_cast<const DeviceAttributeUpdateRequest*>(
&_DeviceAttributeUpdateRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
57;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceAttributeUpdateRequest* other);

// implements Message ----------------------------------------------

inline DeviceAttributeUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceAttributeUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceAttributeUpdateRequest& from);
void MergeFrom(const DeviceAttributeUpdateRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceAttributeUpdateRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string asset_id = 1;
bool has_asset_id() const;
void clear_asset_id();
static const int kAssetIdFieldNumber = 1;
const ::std::string& asset_id() const;
void set_asset_id(const ::std::string& value);
#if LANG_CXX11
void set_asset_id(::std::string&& value);
#endif
void set_asset_id(const char* value);
void set_asset_id(const char* value, size_t size);
::std::string* mutable_asset_id();
::std::string* release_asset_id();
void set_allocated_asset_id(::std::string* asset_id);

// optional string location = 2;
bool has_location() const;
void clear_location();
static const int kLocationFieldNumber = 2;
const ::std::string& location() const;
void set_location(const ::std::string& value);
#if LANG_CXX11
void set_location(::std::string&& value);
#endif
void set_location(const char* value);
void set_location(const char* value, size_t size);
::std::string* mutable_location();
::std::string* release_location();
void set_allocated_location(::std::string* location);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceAttributeUpdateRequest)
private:
void set_has_asset_id();
void clear_has_asset_id();
void set_has_location();
void clear_has_location();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr asset_id_;
::google::protobuf::internal::ArenaStringPtr location_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceAttributeUpdateResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceAttributeUpdateResponse) */ {
public:
DeviceAttributeUpdateResponse();
virtual ~DeviceAttributeUpdateResponse();

DeviceAttributeUpdateResponse(const DeviceAttributeUpdateResponse& from);

inline DeviceAttributeUpdateResponse& operator=(const DeviceAttributeUpdateResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceAttributeUpdateResponse& default_instance();

static inline const DeviceAttributeUpdateResponse* internal_default_instance() {
return reinterpret_cast<const DeviceAttributeUpdateResponse*>(
&_DeviceAttributeUpdateResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
58;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceAttributeUpdateResponse* other);

// implements Message ----------------------------------------------

inline DeviceAttributeUpdateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceAttributeUpdateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceAttributeUpdateResponse& from);
void MergeFrom(const DeviceAttributeUpdateResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceAttributeUpdateResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceAttributeUpdateResponse_ResultType ResultType;
static const ResultType ATTRIBUTE_UPDATE_ERROR =
DeviceAttributeUpdateResponse_ResultType_ATTRIBUTE_UPDATE_ERROR;
static const ResultType ATTRIBUTE_UPDATE_SUCCESS =
DeviceAttributeUpdateResponse_ResultType_ATTRIBUTE_UPDATE_SUCCESS;
static inline bool ResultType_IsValid(int value) {
return DeviceAttributeUpdateResponse_ResultType_IsValid(value);
}
static const ResultType ResultType_MIN =
DeviceAttributeUpdateResponse_ResultType_ResultType_MIN;
static const ResultType ResultType_MAX =
DeviceAttributeUpdateResponse_ResultType_ResultType_MAX;
static const int ResultType_ARRAYSIZE =
DeviceAttributeUpdateResponse_ResultType_ResultType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
bool has_result() const;
void clear_result();
static const int kResultFieldNumber = 1;
::enterprise_management::DeviceAttributeUpdateResponse_ResultType result() const;
void set_result(::enterprise_management::DeviceAttributeUpdateResponse_ResultType value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceAttributeUpdateResponse)
private:
void set_has_result();
void clear_has_result();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
int result_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT GcmIdUpdateRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.GcmIdUpdateRequest) */ {
public:
GcmIdUpdateRequest();
virtual ~GcmIdUpdateRequest();

GcmIdUpdateRequest(const GcmIdUpdateRequest& from);

inline GcmIdUpdateRequest& operator=(const GcmIdUpdateRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const GcmIdUpdateRequest& default_instance();

static inline const GcmIdUpdateRequest* internal_default_instance() {
return reinterpret_cast<const GcmIdUpdateRequest*>(
&_GcmIdUpdateRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
59;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(GcmIdUpdateRequest* other);

// implements Message ----------------------------------------------

inline GcmIdUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

GcmIdUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const GcmIdUpdateRequest& from);
void MergeFrom(const GcmIdUpdateRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(GcmIdUpdateRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string gcm_id = 1;
bool has_gcm_id() const;
void clear_gcm_id();
static const int kGcmIdFieldNumber = 1;
const ::std::string& gcm_id() const;
void set_gcm_id(const ::std::string& value);
#if LANG_CXX11
void set_gcm_id(::std::string&& value);
#endif
void set_gcm_id(const char* value);
void set_gcm_id(const char* value, size_t size);
::std::string* mutable_gcm_id();
::std::string* release_gcm_id();
void set_allocated_gcm_id(::std::string* gcm_id);

// @@protoc_insertion_point(class_scope:enterprise_management.GcmIdUpdateRequest)
private:
void set_has_gcm_id();
void clear_has_gcm_id();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr gcm_id_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT GcmIdUpdateResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.GcmIdUpdateResponse) */ {
public:
GcmIdUpdateResponse();
virtual ~GcmIdUpdateResponse();

GcmIdUpdateResponse(const GcmIdUpdateResponse& from);

inline GcmIdUpdateResponse& operator=(const GcmIdUpdateResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const GcmIdUpdateResponse& default_instance();

static inline const GcmIdUpdateResponse* internal_default_instance() {
return reinterpret_cast<const GcmIdUpdateResponse*>(
&_GcmIdUpdateResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
60;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(GcmIdUpdateResponse* other);

// implements Message ----------------------------------------------

inline GcmIdUpdateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

GcmIdUpdateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const GcmIdUpdateResponse& from);
void MergeFrom(const GcmIdUpdateResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(GcmIdUpdateResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.GcmIdUpdateResponse)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT CheckAndroidManagementRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CheckAndroidManagementRequest) */ {
public:
CheckAndroidManagementRequest();
virtual ~CheckAndroidManagementRequest();

CheckAndroidManagementRequest(const CheckAndroidManagementRequest& from);

inline CheckAndroidManagementRequest& operator=(const CheckAndroidManagementRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const CheckAndroidManagementRequest& default_instance();

static inline const CheckAndroidManagementRequest* internal_default_instance() {
return reinterpret_cast<const CheckAndroidManagementRequest*>(
&_CheckAndroidManagementRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
61;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(CheckAndroidManagementRequest* other);

// implements Message ----------------------------------------------

inline CheckAndroidManagementRequest* New() const PROTOBUF_FINAL { return New(NULL); }

CheckAndroidManagementRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const CheckAndroidManagementRequest& from);
void MergeFrom(const CheckAndroidManagementRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CheckAndroidManagementRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.CheckAndroidManagementRequest)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT CheckAndroidManagementResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CheckAndroidManagementResponse) */ {
public:
CheckAndroidManagementResponse();
virtual ~CheckAndroidManagementResponse();

CheckAndroidManagementResponse(const CheckAndroidManagementResponse& from);

inline CheckAndroidManagementResponse& operator=(const CheckAndroidManagementResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const CheckAndroidManagementResponse& default_instance();

static inline const CheckAndroidManagementResponse* internal_default_instance() {
return reinterpret_cast<const CheckAndroidManagementResponse*>(
&_CheckAndroidManagementResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
62;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(CheckAndroidManagementResponse* other);

// implements Message ----------------------------------------------

inline CheckAndroidManagementResponse* New() const PROTOBUF_FINAL { return New(NULL); }

CheckAndroidManagementResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const CheckAndroidManagementResponse& from);
void MergeFrom(const CheckAndroidManagementResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CheckAndroidManagementResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.CheckAndroidManagementResponse)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT CertificateBasedDeviceRegisterRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CertificateBasedDeviceRegisterRequest) */ {
public:
CertificateBasedDeviceRegisterRequest();
virtual ~CertificateBasedDeviceRegisterRequest();

CertificateBasedDeviceRegisterRequest(const CertificateBasedDeviceRegisterRequest& from);

inline CertificateBasedDeviceRegisterRequest& operator=(const CertificateBasedDeviceRegisterRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const CertificateBasedDeviceRegisterRequest& default_instance();

static inline const CertificateBasedDeviceRegisterRequest* internal_default_instance() {
return reinterpret_cast<const CertificateBasedDeviceRegisterRequest*>(
&_CertificateBasedDeviceRegisterRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
63;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(CertificateBasedDeviceRegisterRequest* other);

// implements Message ----------------------------------------------

inline CertificateBasedDeviceRegisterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

CertificateBasedDeviceRegisterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const CertificateBasedDeviceRegisterRequest& from);
void MergeFrom(const CertificateBasedDeviceRegisterRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CertificateBasedDeviceRegisterRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional .enterprise_management.SignedData signed_request = 1;
bool has_signed_request() const;
void clear_signed_request();
static const int kSignedRequestFieldNumber = 1;
const ::enterprise_management::SignedData& signed_request() const;
::enterprise_management::SignedData* mutable_signed_request();
::enterprise_management::SignedData* release_signed_request();
void set_allocated_signed_request(::enterprise_management::SignedData* signed_request);

// @@protoc_insertion_point(class_scope:enterprise_management.CertificateBasedDeviceRegisterRequest)
private:
void set_has_signed_request();
void clear_has_signed_request();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::enterprise_management::SignedData* signed_request_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT CertificateBasedDeviceRegistrationData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CertificateBasedDeviceRegistrationData) */ {
public:
CertificateBasedDeviceRegistrationData();
virtual ~CertificateBasedDeviceRegistrationData();

CertificateBasedDeviceRegistrationData(const CertificateBasedDeviceRegistrationData& from);

inline CertificateBasedDeviceRegistrationData& operator=(const CertificateBasedDeviceRegistrationData& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const CertificateBasedDeviceRegistrationData& default_instance();

static inline const CertificateBasedDeviceRegistrationData* internal_default_instance() {
return reinterpret_cast<const CertificateBasedDeviceRegistrationData*>(
&_CertificateBasedDeviceRegistrationData_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
64;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(CertificateBasedDeviceRegistrationData* other);

// implements Message ----------------------------------------------

inline CertificateBasedDeviceRegistrationData* New() const PROTOBUF_FINAL { return New(NULL); }

CertificateBasedDeviceRegistrationData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const CertificateBasedDeviceRegistrationData& from);
void MergeFrom(const CertificateBasedDeviceRegistrationData& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CertificateBasedDeviceRegistrationData* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef CertificateBasedDeviceRegistrationData_CertificateType CertificateType;
static const CertificateType UNKNOWN =
CertificateBasedDeviceRegistrationData_CertificateType_UNKNOWN;
static const CertificateType ENTERPRISE_ENROLLMENT_CERTIFICATE =
CertificateBasedDeviceRegistrationData_CertificateType_ENTERPRISE_ENROLLMENT_CERTIFICATE;
static inline bool CertificateType_IsValid(int value) {
return CertificateBasedDeviceRegistrationData_CertificateType_IsValid(value);
}
static const CertificateType CertificateType_MIN =
CertificateBasedDeviceRegistrationData_CertificateType_CertificateType_MIN;
static const CertificateType CertificateType_MAX =
CertificateBasedDeviceRegistrationData_CertificateType_CertificateType_MAX;
static const int CertificateType_ARRAYSIZE =
CertificateBasedDeviceRegistrationData_CertificateType_CertificateType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional bytes device_certificate = 2;
bool has_device_certificate() const;
void clear_device_certificate();
static const int kDeviceCertificateFieldNumber = 2;
const ::std::string& device_certificate() const;
void set_device_certificate(const ::std::string& value);
#if LANG_CXX11
void set_device_certificate(::std::string&& value);
#endif
void set_device_certificate(const char* value);
void set_device_certificate(const void* value, size_t size);
::std::string* mutable_device_certificate();
::std::string* release_device_certificate();
void set_allocated_device_certificate(::std::string* device_certificate);

// optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
bool has_device_register_request() const;
void clear_device_register_request();
static const int kDeviceRegisterRequestFieldNumber = 3;
const ::enterprise_management::DeviceRegisterRequest& device_register_request() const;
::enterprise_management::DeviceRegisterRequest* mutable_device_register_request();
::enterprise_management::DeviceRegisterRequest* release_device_register_request();
void set_allocated_device_register_request(::enterprise_management::DeviceRegisterRequest* device_register_request);

// optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
bool has_certificate_type() const;
void clear_certificate_type();
static const int kCertificateTypeFieldNumber = 1;
::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType certificate_type() const;
void set_certificate_type(::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType value);

// @@protoc_insertion_point(class_scope:enterprise_management.CertificateBasedDeviceRegistrationData)
private:
void set_has_certificate_type();
void clear_has_certificate_type();
void set_has_device_certificate();
void clear_has_device_certificate();
void set_has_device_register_request();
void clear_has_device_register_request();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr device_certificate_;
::enterprise_management::DeviceRegisterRequest* device_register_request_;
int certificate_type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT RegisterBrowserRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.RegisterBrowserRequest) */ {
public:
RegisterBrowserRequest();
virtual ~RegisterBrowserRequest();

RegisterBrowserRequest(const RegisterBrowserRequest& from);

inline RegisterBrowserRequest& operator=(const RegisterBrowserRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const RegisterBrowserRequest& default_instance();

static inline const RegisterBrowserRequest* internal_default_instance() {
return reinterpret_cast<const RegisterBrowserRequest*>(
&_RegisterBrowserRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
65;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(RegisterBrowserRequest* other);

// implements Message ----------------------------------------------

inline RegisterBrowserRequest* New() const PROTOBUF_FINAL { return New(NULL); }

RegisterBrowserRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const RegisterBrowserRequest& from);
void MergeFrom(const RegisterBrowserRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(RegisterBrowserRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string machine_name = 1;
bool has_machine_name() const;
void clear_machine_name();
static const int kMachineNameFieldNumber = 1;
const ::std::string& machine_name() const;
void set_machine_name(const ::std::string& value);
#if LANG_CXX11
void set_machine_name(::std::string&& value);
#endif
void set_machine_name(const char* value);
void set_machine_name(const char* value, size_t size);
::std::string* mutable_machine_name();
::std::string* release_machine_name();
void set_allocated_machine_name(::std::string* machine_name);

// optional string os_platform = 2;
bool has_os_platform() const;
void clear_os_platform();
static const int kOsPlatformFieldNumber = 2;
const ::std::string& os_platform() const;
void set_os_platform(const ::std::string& value);
#if LANG_CXX11
void set_os_platform(::std::string&& value);
#endif
void set_os_platform(const char* value);
void set_os_platform(const char* value, size_t size);
::std::string* mutable_os_platform();
::std::string* release_os_platform();
void set_allocated_os_platform(::std::string* os_platform);

// optional string os_version = 3;
bool has_os_version() const;
void clear_os_version();
static const int kOsVersionFieldNumber = 3;
const ::std::string& os_version() const;
void set_os_version(const ::std::string& value);
#if LANG_CXX11
void set_os_version(::std::string&& value);
#endif
void set_os_version(const char* value);
void set_os_version(const char* value, size_t size);
::std::string* mutable_os_version();
::std::string* release_os_version();
void set_allocated_os_version(::std::string* os_version);

// @@protoc_insertion_point(class_scope:enterprise_management.RegisterBrowserRequest)
private:
void set_has_machine_name();
void clear_has_machine_name();
void set_has_os_platform();
void clear_has_os_platform();
void set_has_os_version();
void clear_has_os_version();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr machine_name_;
::google::protobuf::internal::ArenaStringPtr os_platform_;
::google::protobuf::internal::ArenaStringPtr os_version_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT ActiveDirectoryEnrollPlayUserRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ActiveDirectoryEnrollPlayUserRequest) */ {
public:
ActiveDirectoryEnrollPlayUserRequest();
virtual ~ActiveDirectoryEnrollPlayUserRequest();

ActiveDirectoryEnrollPlayUserRequest(const ActiveDirectoryEnrollPlayUserRequest& from);

inline ActiveDirectoryEnrollPlayUserRequest& operator=(const ActiveDirectoryEnrollPlayUserRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ActiveDirectoryEnrollPlayUserRequest& default_instance();

static inline const ActiveDirectoryEnrollPlayUserRequest* internal_default_instance() {
return reinterpret_cast<const ActiveDirectoryEnrollPlayUserRequest*>(
&_ActiveDirectoryEnrollPlayUserRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
66;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(ActiveDirectoryEnrollPlayUserRequest* other);

// implements Message ----------------------------------------------

inline ActiveDirectoryEnrollPlayUserRequest* New() const PROTOBUF_FINAL { return New(NULL); }

ActiveDirectoryEnrollPlayUserRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const ActiveDirectoryEnrollPlayUserRequest& from);
void MergeFrom(const ActiveDirectoryEnrollPlayUserRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ActiveDirectoryEnrollPlayUserRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string auth_session_id = 1;
bool has_auth_session_id() const;
void clear_auth_session_id();
static const int kAuthSessionIdFieldNumber = 1;
const ::std::string& auth_session_id() const;
void set_auth_session_id(const ::std::string& value);
#if LANG_CXX11
void set_auth_session_id(::std::string&& value);
#endif
void set_auth_session_id(const char* value);
void set_auth_session_id(const char* value, size_t size);
::std::string* mutable_auth_session_id();
::std::string* release_auth_session_id();
void set_allocated_auth_session_id(::std::string* auth_session_id);

// @@protoc_insertion_point(class_scope:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
private:
void set_has_auth_session_id();
void clear_has_auth_session_id();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr auth_session_id_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT ActiveDirectoryEnrollPlayUserResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ActiveDirectoryEnrollPlayUserResponse) */ {
public:
ActiveDirectoryEnrollPlayUserResponse();
virtual ~ActiveDirectoryEnrollPlayUserResponse();

ActiveDirectoryEnrollPlayUserResponse(const ActiveDirectoryEnrollPlayUserResponse& from);

inline ActiveDirectoryEnrollPlayUserResponse& operator=(const ActiveDirectoryEnrollPlayUserResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ActiveDirectoryEnrollPlayUserResponse& default_instance();

static inline const ActiveDirectoryEnrollPlayUserResponse* internal_default_instance() {
return reinterpret_cast<const ActiveDirectoryEnrollPlayUserResponse*>(
&_ActiveDirectoryEnrollPlayUserResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
67;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(ActiveDirectoryEnrollPlayUserResponse* other);

// implements Message ----------------------------------------------

inline ActiveDirectoryEnrollPlayUserResponse* New() const PROTOBUF_FINAL { return New(NULL); }

ActiveDirectoryEnrollPlayUserResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const ActiveDirectoryEnrollPlayUserResponse& from);
void MergeFrom(const ActiveDirectoryEnrollPlayUserResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ActiveDirectoryEnrollPlayUserResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string enrollment_token = 1;
bool has_enrollment_token() const;
void clear_enrollment_token();
static const int kEnrollmentTokenFieldNumber = 1;
const ::std::string& enrollment_token() const;
void set_enrollment_token(const ::std::string& value);
#if LANG_CXX11
void set_enrollment_token(::std::string&& value);
#endif
void set_enrollment_token(const char* value);
void set_enrollment_token(const char* value, size_t size);
::std::string* mutable_enrollment_token();
::std::string* release_enrollment_token();
void set_allocated_enrollment_token(::std::string* enrollment_token);

// optional string user_id = 2;
bool has_user_id() const;
void clear_user_id();
static const int kUserIdFieldNumber = 2;
const ::std::string& user_id() const;
void set_user_id(const ::std::string& value);
#if LANG_CXX11
void set_user_id(::std::string&& value);
#endif
void set_user_id(const char* value);
void set_user_id(const char* value, size_t size);
::std::string* mutable_user_id();
::std::string* release_user_id();
void set_allocated_user_id(::std::string* user_id);

// optional .enterprise_management.SamlParametersProto saml_parameters = 3;
bool has_saml_parameters() const;
void clear_saml_parameters();
static const int kSamlParametersFieldNumber = 3;
const ::enterprise_management::SamlParametersProto& saml_parameters() const;
::enterprise_management::SamlParametersProto* mutable_saml_parameters();
::enterprise_management::SamlParametersProto* release_saml_parameters();
void set_allocated_saml_parameters(::enterprise_management::SamlParametersProto* saml_parameters);

// @@protoc_insertion_point(class_scope:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
private:
void set_has_enrollment_token();
void clear_has_enrollment_token();
void set_has_user_id();
void clear_has_user_id();
void set_has_saml_parameters();
void clear_has_saml_parameters();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr enrollment_token_;
::google::protobuf::internal::ArenaStringPtr user_id_;
::enterprise_management::SamlParametersProto* saml_parameters_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT SamlParametersProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SamlParametersProto) */ {
public:
SamlParametersProto();
virtual ~SamlParametersProto();

SamlParametersProto(const SamlParametersProto& from);

inline SamlParametersProto& operator=(const SamlParametersProto& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const SamlParametersProto& default_instance();

static inline const SamlParametersProto* internal_default_instance() {
return reinterpret_cast<const SamlParametersProto*>(
&_SamlParametersProto_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
68;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(SamlParametersProto* other);

// implements Message ----------------------------------------------

inline SamlParametersProto* New() const PROTOBUF_FINAL { return New(NULL); }

SamlParametersProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const SamlParametersProto& from);
void MergeFrom(const SamlParametersProto& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(SamlParametersProto* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string auth_redirect_url = 1;
bool has_auth_redirect_url() const;
void clear_auth_redirect_url();
static const int kAuthRedirectUrlFieldNumber = 1;
const ::std::string& auth_redirect_url() const;
void set_auth_redirect_url(const ::std::string& value);
#if LANG_CXX11
void set_auth_redirect_url(::std::string&& value);
#endif
void set_auth_redirect_url(const char* value);
void set_auth_redirect_url(const char* value, size_t size);
::std::string* mutable_auth_redirect_url();
::std::string* release_auth_redirect_url();
void set_allocated_auth_redirect_url(::std::string* auth_redirect_url);

// optional string auth_session_id = 2;
bool has_auth_session_id() const;
void clear_auth_session_id();
static const int kAuthSessionIdFieldNumber = 2;
const ::std::string& auth_session_id() const;
void set_auth_session_id(const ::std::string& value);
#if LANG_CXX11
void set_auth_session_id(::std::string&& value);
#endif
void set_auth_session_id(const char* value);
void set_auth_session_id(const char* value, size_t size);
::std::string* mutable_auth_session_id();
::std::string* release_auth_session_id();
void set_allocated_auth_session_id(::std::string* auth_session_id);

// @@protoc_insertion_point(class_scope:enterprise_management.SamlParametersProto)
private:
void set_has_auth_redirect_url();
void clear_has_auth_redirect_url();
void set_has_auth_session_id();
void clear_has_auth_session_id();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr auth_redirect_url_;
::google::protobuf::internal::ArenaStringPtr auth_session_id_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT ActiveDirectoryPlayActivityRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ActiveDirectoryPlayActivityRequest) */ {
public:
ActiveDirectoryPlayActivityRequest();
virtual ~ActiveDirectoryPlayActivityRequest();

ActiveDirectoryPlayActivityRequest(const ActiveDirectoryPlayActivityRequest& from);

inline ActiveDirectoryPlayActivityRequest& operator=(const ActiveDirectoryPlayActivityRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ActiveDirectoryPlayActivityRequest& default_instance();

static inline const ActiveDirectoryPlayActivityRequest* internal_default_instance() {
return reinterpret_cast<const ActiveDirectoryPlayActivityRequest*>(
&_ActiveDirectoryPlayActivityRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
69;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(ActiveDirectoryPlayActivityRequest* other);

// implements Message ----------------------------------------------

inline ActiveDirectoryPlayActivityRequest* New() const PROTOBUF_FINAL { return New(NULL); }

ActiveDirectoryPlayActivityRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const ActiveDirectoryPlayActivityRequest& from);
void MergeFrom(const ActiveDirectoryPlayActivityRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ActiveDirectoryPlayActivityRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string user_id = 1;
bool has_user_id() const;
void clear_user_id();
static const int kUserIdFieldNumber = 1;
const ::std::string& user_id() const;
void set_user_id(const ::std::string& value);
#if LANG_CXX11
void set_user_id(::std::string&& value);
#endif
void set_user_id(const char* value);
void set_user_id(const char* value, size_t size);
::std::string* mutable_user_id();
::std::string* release_user_id();
void set_allocated_user_id(::std::string* user_id);

// @@protoc_insertion_point(class_scope:enterprise_management.ActiveDirectoryPlayActivityRequest)
private:
void set_has_user_id();
void clear_has_user_id();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr user_id_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT ActiveDirectoryPlayActivityResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ActiveDirectoryPlayActivityResponse) */ {
public:
ActiveDirectoryPlayActivityResponse();
virtual ~ActiveDirectoryPlayActivityResponse();

ActiveDirectoryPlayActivityResponse(const ActiveDirectoryPlayActivityResponse& from);

inline ActiveDirectoryPlayActivityResponse& operator=(const ActiveDirectoryPlayActivityResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ActiveDirectoryPlayActivityResponse& default_instance();

static inline const ActiveDirectoryPlayActivityResponse* internal_default_instance() {
return reinterpret_cast<const ActiveDirectoryPlayActivityResponse*>(
&_ActiveDirectoryPlayActivityResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
70;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(ActiveDirectoryPlayActivityResponse* other);

// implements Message ----------------------------------------------

inline ActiveDirectoryPlayActivityResponse* New() const PROTOBUF_FINAL { return New(NULL); }

ActiveDirectoryPlayActivityResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const ActiveDirectoryPlayActivityResponse& from);
void MergeFrom(const ActiveDirectoryPlayActivityResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ActiveDirectoryPlayActivityResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.ActiveDirectoryPlayActivityResponse)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT CheckDeviceLicenseRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CheckDeviceLicenseRequest) */ {
public:
CheckDeviceLicenseRequest();
virtual ~CheckDeviceLicenseRequest();

CheckDeviceLicenseRequest(const CheckDeviceLicenseRequest& from);

inline CheckDeviceLicenseRequest& operator=(const CheckDeviceLicenseRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const CheckDeviceLicenseRequest& default_instance();

static inline const CheckDeviceLicenseRequest* internal_default_instance() {
return reinterpret_cast<const CheckDeviceLicenseRequest*>(
&_CheckDeviceLicenseRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
71;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(CheckDeviceLicenseRequest* other);

// implements Message ----------------------------------------------

inline CheckDeviceLicenseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

CheckDeviceLicenseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const CheckDeviceLicenseRequest& from);
void MergeFrom(const CheckDeviceLicenseRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CheckDeviceLicenseRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.CheckDeviceLicenseRequest)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT LicenseAvailability : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.LicenseAvailability) */ {
public:
LicenseAvailability();
virtual ~LicenseAvailability();

LicenseAvailability(const LicenseAvailability& from);

inline LicenseAvailability& operator=(const LicenseAvailability& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const LicenseAvailability& default_instance();

static inline const LicenseAvailability* internal_default_instance() {
return reinterpret_cast<const LicenseAvailability*>(
&_LicenseAvailability_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
72;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(LicenseAvailability* other);

// implements Message ----------------------------------------------

inline LicenseAvailability* New() const PROTOBUF_FINAL { return New(NULL); }

LicenseAvailability* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const LicenseAvailability& from);
void MergeFrom(const LicenseAvailability& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(LicenseAvailability* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional .enterprise_management.LicenseType license_type = 1;
bool has_license_type() const;
void clear_license_type();
static const int kLicenseTypeFieldNumber = 1;
const ::enterprise_management::LicenseType& license_type() const;
::enterprise_management::LicenseType* mutable_license_type();
::enterprise_management::LicenseType* release_license_type();
void set_allocated_license_type(::enterprise_management::LicenseType* license_type);

// optional int32 available_licenses = 2;
bool has_available_licenses() const;
void clear_available_licenses();
static const int kAvailableLicensesFieldNumber = 2;
::google::protobuf::int32 available_licenses() const;
void set_available_licenses(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.LicenseAvailability)
private:
void set_has_license_type();
void clear_has_license_type();
void set_has_available_licenses();
void clear_has_available_licenses();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::enterprise_management::LicenseType* license_type_;
::google::protobuf::int32 available_licenses_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT CheckDeviceLicenseResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CheckDeviceLicenseResponse) */ {
public:
CheckDeviceLicenseResponse();
virtual ~CheckDeviceLicenseResponse();

CheckDeviceLicenseResponse(const CheckDeviceLicenseResponse& from);

inline CheckDeviceLicenseResponse& operator=(const CheckDeviceLicenseResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const CheckDeviceLicenseResponse& default_instance();

static inline const CheckDeviceLicenseResponse* internal_default_instance() {
return reinterpret_cast<const CheckDeviceLicenseResponse*>(
&_CheckDeviceLicenseResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
73;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(CheckDeviceLicenseResponse* other);

// implements Message ----------------------------------------------

inline CheckDeviceLicenseResponse* New() const PROTOBUF_FINAL { return New(NULL); }

CheckDeviceLicenseResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const CheckDeviceLicenseResponse& from);
void MergeFrom(const CheckDeviceLicenseResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CheckDeviceLicenseResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef CheckDeviceLicenseResponse_LicenseSelectionMode LicenseSelectionMode;
static const LicenseSelectionMode UNDEFINED =
CheckDeviceLicenseResponse_LicenseSelectionMode_UNDEFINED;
static const LicenseSelectionMode USER_SELECTION =
CheckDeviceLicenseResponse_LicenseSelectionMode_USER_SELECTION;
static const LicenseSelectionMode ADMIN_SELECTION =
CheckDeviceLicenseResponse_LicenseSelectionMode_ADMIN_SELECTION;
static inline bool LicenseSelectionMode_IsValid(int value) {
return CheckDeviceLicenseResponse_LicenseSelectionMode_IsValid(value);
}
static const LicenseSelectionMode LicenseSelectionMode_MIN =
CheckDeviceLicenseResponse_LicenseSelectionMode_LicenseSelectionMode_MIN;
static const LicenseSelectionMode LicenseSelectionMode_MAX =
CheckDeviceLicenseResponse_LicenseSelectionMode_LicenseSelectionMode_MAX;
static const int LicenseSelectionMode_ARRAYSIZE =
CheckDeviceLicenseResponse_LicenseSelectionMode_LicenseSelectionMode_ARRAYSIZE;

// accessors -------------------------------------------------------

// repeated .enterprise_management.LicenseAvailability license_availability = 2;
int license_availability_size() const;
void clear_license_availability();
static const int kLicenseAvailabilityFieldNumber = 2;
const ::enterprise_management::LicenseAvailability& license_availability(int index) const;
::enterprise_management::LicenseAvailability* mutable_license_availability(int index);
::enterprise_management::LicenseAvailability* add_license_availability();
::google::protobuf::RepeatedPtrField< ::enterprise_management::LicenseAvailability >*
mutable_license_availability();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::LicenseAvailability >&
license_availability() const;

// optional .enterprise_management.CheckDeviceLicenseResponse.LicenseSelectionMode license_selection_mode = 1;
bool has_license_selection_mode() const;
void clear_license_selection_mode();
static const int kLicenseSelectionModeFieldNumber = 1;
::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode license_selection_mode() const;
void set_license_selection_mode(::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode value);

// @@protoc_insertion_point(class_scope:enterprise_management.CheckDeviceLicenseResponse)
private:
void set_has_license_selection_mode();
void clear_has_license_selection_mode();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::LicenseAvailability > license_availability_;
int license_selection_mode_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT ActiveDirectoryUserSigninRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ActiveDirectoryUserSigninRequest) */ {
public:
ActiveDirectoryUserSigninRequest();
virtual ~ActiveDirectoryUserSigninRequest();

ActiveDirectoryUserSigninRequest(const ActiveDirectoryUserSigninRequest& from);

inline ActiveDirectoryUserSigninRequest& operator=(const ActiveDirectoryUserSigninRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ActiveDirectoryUserSigninRequest& default_instance();

static inline const ActiveDirectoryUserSigninRequest* internal_default_instance() {
return reinterpret_cast<const ActiveDirectoryUserSigninRequest*>(
&_ActiveDirectoryUserSigninRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
74;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(ActiveDirectoryUserSigninRequest* other);

// implements Message ----------------------------------------------

inline ActiveDirectoryUserSigninRequest* New() const PROTOBUF_FINAL { return New(NULL); }

ActiveDirectoryUserSigninRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const ActiveDirectoryUserSigninRequest& from);
void MergeFrom(const ActiveDirectoryUserSigninRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ActiveDirectoryUserSigninRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.ActiveDirectoryUserSigninRequest)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT ActiveDirectoryUserSigninResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ActiveDirectoryUserSigninResponse) */ {
public:
ActiveDirectoryUserSigninResponse();
virtual ~ActiveDirectoryUserSigninResponse();

ActiveDirectoryUserSigninResponse(const ActiveDirectoryUserSigninResponse& from);

inline ActiveDirectoryUserSigninResponse& operator=(const ActiveDirectoryUserSigninResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ActiveDirectoryUserSigninResponse& default_instance();

static inline const ActiveDirectoryUserSigninResponse* internal_default_instance() {
return reinterpret_cast<const ActiveDirectoryUserSigninResponse*>(
&_ActiveDirectoryUserSigninResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
75;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(ActiveDirectoryUserSigninResponse* other);

// implements Message ----------------------------------------------

inline ActiveDirectoryUserSigninResponse* New() const PROTOBUF_FINAL { return New(NULL); }

ActiveDirectoryUserSigninResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const ActiveDirectoryUserSigninResponse& from);
void MergeFrom(const ActiveDirectoryUserSigninResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ActiveDirectoryUserSigninResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string auth_redirect_url = 1;
bool has_auth_redirect_url() const;
void clear_auth_redirect_url();
static const int kAuthRedirectUrlFieldNumber = 1;
const ::std::string& auth_redirect_url() const;
void set_auth_redirect_url(const ::std::string& value);
#if LANG_CXX11
void set_auth_redirect_url(::std::string&& value);
#endif
void set_auth_redirect_url(const char* value);
void set_auth_redirect_url(const char* value, size_t size);
::std::string* mutable_auth_redirect_url();
::std::string* release_auth_redirect_url();
void set_allocated_auth_redirect_url(::std::string* auth_redirect_url);

// @@protoc_insertion_point(class_scope:enterprise_management.ActiveDirectoryUserSigninResponse)
private:
void set_has_auth_redirect_url();
void clear_has_auth_redirect_url();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr auth_redirect_url_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT TpmVersionInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.TpmVersionInfo) */ {
public:
TpmVersionInfo();
virtual ~TpmVersionInfo();

TpmVersionInfo(const TpmVersionInfo& from);

inline TpmVersionInfo& operator=(const TpmVersionInfo& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const TpmVersionInfo& default_instance();

static inline const TpmVersionInfo* internal_default_instance() {
return reinterpret_cast<const TpmVersionInfo*>(
&_TpmVersionInfo_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
76;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(TpmVersionInfo* other);

// implements Message ----------------------------------------------

inline TpmVersionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

TpmVersionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const TpmVersionInfo& from);
void MergeFrom(const TpmVersionInfo& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(TpmVersionInfo* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string vendor_specific = 6;
bool has_vendor_specific() const;
void clear_vendor_specific();
static const int kVendorSpecificFieldNumber = 6;
const ::std::string& vendor_specific() const;
void set_vendor_specific(const ::std::string& value);
#if LANG_CXX11
void set_vendor_specific(::std::string&& value);
#endif
void set_vendor_specific(const char* value);
void set_vendor_specific(const char* value, size_t size);
::std::string* mutable_vendor_specific();
::std::string* release_vendor_specific();
void set_allocated_vendor_specific(::std::string* vendor_specific);

// optional uint64 spec_level = 2;
bool has_spec_level() const;
void clear_spec_level();
static const int kSpecLevelFieldNumber = 2;
::google::protobuf::uint64 spec_level() const;
void set_spec_level(::google::protobuf::uint64 value);

// optional uint32 family = 1;
bool has_family() const;
void clear_family();
static const int kFamilyFieldNumber = 1;
::google::protobuf::uint32 family() const;
void set_family(::google::protobuf::uint32 value);

// optional uint32 manufacturer = 3;
bool has_manufacturer() const;
void clear_manufacturer();
static const int kManufacturerFieldNumber = 3;
::google::protobuf::uint32 manufacturer() const;
void set_manufacturer(::google::protobuf::uint32 value);

// optional uint64 firmware_version = 5;
bool has_firmware_version() const;
void clear_firmware_version();
static const int kFirmwareVersionFieldNumber = 5;
::google::protobuf::uint64 firmware_version() const;
void set_firmware_version(::google::protobuf::uint64 value);

// optional uint32 tpm_model = 4;
bool has_tpm_model() const;
void clear_tpm_model();
static const int kTpmModelFieldNumber = 4;
::google::protobuf::uint32 tpm_model() const;
void set_tpm_model(::google::protobuf::uint32 value);

// @@protoc_insertion_point(class_scope:enterprise_management.TpmVersionInfo)
private:
void set_has_family();
void clear_has_family();
void set_has_spec_level();
void clear_has_spec_level();
void set_has_manufacturer();
void clear_has_manufacturer();
void set_has_tpm_model();
void clear_has_tpm_model();
void set_has_firmware_version();
void clear_has_firmware_version();
void set_has_vendor_specific();
void clear_has_vendor_specific();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr vendor_specific_;
::google::protobuf::uint64 spec_level_;
::google::protobuf::uint32 family_;
::google::protobuf::uint32 manufacturer_;
::google::protobuf::uint64 firmware_version_;
::google::protobuf::uint32 tpm_model_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT SystemState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SystemState) */ {
public:
SystemState();
virtual ~SystemState();

SystemState(const SystemState& from);

inline SystemState& operator=(const SystemState& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const SystemState& default_instance();

static inline const SystemState* internal_default_instance() {
return reinterpret_cast<const SystemState*>(
&_SystemState_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
77;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(SystemState* other);

// implements Message ----------------------------------------------

inline SystemState* New() const PROTOBUF_FINAL { return New(NULL); }

SystemState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const SystemState& from);
void MergeFrom(const SystemState& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(SystemState* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated .enterprise_management.VolumeInfo volume_info = 1;
int volume_info_size() const;
void clear_volume_info();
static const int kVolumeInfoFieldNumber = 1;
const ::enterprise_management::VolumeInfo& volume_info(int index) const;
::enterprise_management::VolumeInfo* mutable_volume_info(int index);
::enterprise_management::VolumeInfo* add_volume_info();
::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >*
mutable_volume_info();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >&
volume_info() const;

// @@protoc_insertion_point(class_scope:enterprise_management.SystemState)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo > volume_info_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT AppInstallReportLogEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AppInstallReportLogEvent) */ {
public:
AppInstallReportLogEvent();
virtual ~AppInstallReportLogEvent();

AppInstallReportLogEvent(const AppInstallReportLogEvent& from);

inline AppInstallReportLogEvent& operator=(const AppInstallReportLogEvent& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const AppInstallReportLogEvent& default_instance();

static inline const AppInstallReportLogEvent* internal_default_instance() {
return reinterpret_cast<const AppInstallReportLogEvent*>(
&_AppInstallReportLogEvent_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
78;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(AppInstallReportLogEvent* other);

// implements Message ----------------------------------------------

inline AppInstallReportLogEvent* New() const PROTOBUF_FINAL { return New(NULL); }

AppInstallReportLogEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const AppInstallReportLogEvent& from);
void MergeFrom(const AppInstallReportLogEvent& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(AppInstallReportLogEvent* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef AppInstallReportLogEvent_EventType EventType;
static const EventType LOG_EVENT_TYPE_UNKNOWN =
AppInstallReportLogEvent_EventType_LOG_EVENT_TYPE_UNKNOWN;
static const EventType SERVER_REQUEST =
AppInstallReportLogEvent_EventType_SERVER_REQUEST;
static const EventType CLOUDDPC_REQUEST =
AppInstallReportLogEvent_EventType_CLOUDDPC_REQUEST;
static const EventType CLOUDDPS_REQUEST =
AppInstallReportLogEvent_EventType_CLOUDDPS_REQUEST;
static const EventType CLOUDDPS_RESPONSE =
AppInstallReportLogEvent_EventType_CLOUDDPS_RESPONSE;
static const EventType PHONESKY_LOG =
AppInstallReportLogEvent_EventType_PHONESKY_LOG;
static const EventType SUCCESS =
AppInstallReportLogEvent_EventType_SUCCESS;
static const EventType CANCELED =
AppInstallReportLogEvent_EventType_CANCELED;
static const EventType CONNECTIVITY_CHANGE =
AppInstallReportLogEvent_EventType_CONNECTIVITY_CHANGE;
static const EventType SESSION_STATE_CHANGE =
AppInstallReportLogEvent_EventType_SESSION_STATE_CHANGE;
static const EventType INSTALLATION_STARTED =
AppInstallReportLogEvent_EventType_INSTALLATION_STARTED;
static const EventType INSTALLATION_FINISHED =
AppInstallReportLogEvent_EventType_INSTALLATION_FINISHED;
static const EventType INSTALLATION_FAILED =
AppInstallReportLogEvent_EventType_INSTALLATION_FAILED;
static inline bool EventType_IsValid(int value) {
return AppInstallReportLogEvent_EventType_IsValid(value);
}
static const EventType EventType_MIN =
AppInstallReportLogEvent_EventType_EventType_MIN;
static const EventType EventType_MAX =
AppInstallReportLogEvent_EventType_EventType_MAX;
static const int EventType_ARRAYSIZE =
AppInstallReportLogEvent_EventType_EventType_ARRAYSIZE;

typedef AppInstallReportLogEvent_SessionStateChangeType SessionStateChangeType;
static const SessionStateChangeType SESSION_STATE_CHANGE_TYPE_UNKNOWN =
AppInstallReportLogEvent_SessionStateChangeType_SESSION_STATE_CHANGE_TYPE_UNKNOWN;
static const SessionStateChangeType LOGIN =
AppInstallReportLogEvent_SessionStateChangeType_LOGIN;
static const SessionStateChangeType LOGOUT =
AppInstallReportLogEvent_SessionStateChangeType_LOGOUT;
static const SessionStateChangeType SUSPEND =
AppInstallReportLogEvent_SessionStateChangeType_SUSPEND;
static const SessionStateChangeType RESUME =
AppInstallReportLogEvent_SessionStateChangeType_RESUME;
static inline bool SessionStateChangeType_IsValid(int value) {
return AppInstallReportLogEvent_SessionStateChangeType_IsValid(value);
}
static const SessionStateChangeType SessionStateChangeType_MIN =
AppInstallReportLogEvent_SessionStateChangeType_SessionStateChangeType_MIN;
static const SessionStateChangeType SessionStateChangeType_MAX =
AppInstallReportLogEvent_SessionStateChangeType_SessionStateChangeType_MAX;
static const int SessionStateChangeType_ARRAYSIZE =
AppInstallReportLogEvent_SessionStateChangeType_SessionStateChangeType_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string phonesky_log = 6;
bool has_phonesky_log() const;
void clear_phonesky_log();
static const int kPhoneskyLogFieldNumber = 6;
const ::std::string& phonesky_log() const;
void set_phonesky_log(const ::std::string& value);
#if LANG_CXX11
void set_phonesky_log(::std::string&& value);
#endif
void set_phonesky_log(const char* value);
void set_phonesky_log(const char* value, size_t size);
::std::string* mutable_phonesky_log();
::std::string* release_phonesky_log();
void set_allocated_phonesky_log(::std::string* phonesky_log);

// optional int64 timestamp = 1;
bool has_timestamp() const;
void clear_timestamp();
static const int kTimestampFieldNumber = 1;
::google::protobuf::int64 timestamp() const;
void set_timestamp(::google::protobuf::int64 value);

// optional int64 stateful_total = 3;
bool has_stateful_total() const;
void clear_stateful_total();
static const int kStatefulTotalFieldNumber = 3;
::google::protobuf::int64 stateful_total() const;
void set_stateful_total(::google::protobuf::int64 value);

// optional .enterprise_management.AppInstallReportLogEvent.EventType event_type = 2;
bool has_event_type() const;
void clear_event_type();
static const int kEventTypeFieldNumber = 2;
::enterprise_management::AppInstallReportLogEvent_EventType event_type() const;
void set_event_type(::enterprise_management::AppInstallReportLogEvent_EventType value);

// optional int32 clouddps_response = 5;
bool has_clouddps_response() const;
void clear_clouddps_response();
static const int kClouddpsResponseFieldNumber = 5;
::google::protobuf::int32 clouddps_response() const;
void set_clouddps_response(::google::protobuf::int32 value);

// optional int64 stateful_free = 4;
bool has_stateful_free() const;
void clear_stateful_free();
static const int kStatefulFreeFieldNumber = 4;
::google::protobuf::int64 stateful_free() const;
void set_stateful_free(::google::protobuf::int64 value);

// optional bool online = 7;
bool has_online() const;
void clear_online();
static const int kOnlineFieldNumber = 7;
bool online() const;
void set_online(bool value);

// optional .enterprise_management.AppInstallReportLogEvent.SessionStateChangeType session_state_change_type = 8;
bool has_session_state_change_type() const;
void clear_session_state_change_type();
static const int kSessionStateChangeTypeFieldNumber = 8;
::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType session_state_change_type() const;
void set_session_state_change_type(::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType value);

// @@protoc_insertion_point(class_scope:enterprise_management.AppInstallReportLogEvent)
private:
void set_has_timestamp();
void clear_has_timestamp();
void set_has_event_type();
void clear_has_event_type();
void set_has_stateful_total();
void clear_has_stateful_total();
void set_has_stateful_free();
void clear_has_stateful_free();
void set_has_clouddps_response();
void clear_has_clouddps_response();
void set_has_phonesky_log();
void clear_has_phonesky_log();
void set_has_online();
void clear_has_online();
void set_has_session_state_change_type();
void clear_has_session_state_change_type();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr phonesky_log_;
::google::protobuf::int64 timestamp_;
::google::protobuf::int64 stateful_total_;
int event_type_;
::google::protobuf::int32 clouddps_response_;
::google::protobuf::int64 stateful_free_;
bool online_;
int session_state_change_type_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT AppInstallReport : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AppInstallReport) */ {
public:
AppInstallReport();
virtual ~AppInstallReport();

AppInstallReport(const AppInstallReport& from);

inline AppInstallReport& operator=(const AppInstallReport& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const AppInstallReport& default_instance();

static inline const AppInstallReport* internal_default_instance() {
return reinterpret_cast<const AppInstallReport*>(
&_AppInstallReport_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
79;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(AppInstallReport* other);

// implements Message ----------------------------------------------

inline AppInstallReport* New() const PROTOBUF_FINAL { return New(NULL); }

AppInstallReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const AppInstallReport& from);
void MergeFrom(const AppInstallReport& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(AppInstallReport* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated .enterprise_management.AppInstallReportLogEvent log = 3;
int log_size() const;
void clear_log();
static const int kLogFieldNumber = 3;
const ::enterprise_management::AppInstallReportLogEvent& log(int index) const;
::enterprise_management::AppInstallReportLogEvent* mutable_log(int index);
::enterprise_management::AppInstallReportLogEvent* add_log();
::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReportLogEvent >*
mutable_log();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReportLogEvent >&
log() const;

// optional string package = 1;
bool has_package() const;
void clear_package();
static const int kPackageFieldNumber = 1;
const ::std::string& package() const;
void set_package(const ::std::string& value);
#if LANG_CXX11
void set_package(::std::string&& value);
#endif
void set_package(const char* value);
void set_package(const char* value, size_t size);
::std::string* mutable_package();
::std::string* release_package();
void set_allocated_package(::std::string* package);

// optional bool incomplete = 2;
bool has_incomplete() const;
void clear_incomplete();
static const int kIncompleteFieldNumber = 2;
bool incomplete() const;
void set_incomplete(bool value);

// @@protoc_insertion_point(class_scope:enterprise_management.AppInstallReport)
private:
void set_has_package();
void clear_has_package();
void set_has_incomplete();
void clear_has_incomplete();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReportLogEvent > log_;
::google::protobuf::internal::ArenaStringPtr package_;
bool incomplete_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT AppInstallReportRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AppInstallReportRequest) */ {
public:
AppInstallReportRequest();
virtual ~AppInstallReportRequest();

AppInstallReportRequest(const AppInstallReportRequest& from);

inline AppInstallReportRequest& operator=(const AppInstallReportRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const AppInstallReportRequest& default_instance();

static inline const AppInstallReportRequest* internal_default_instance() {
return reinterpret_cast<const AppInstallReportRequest*>(
&_AppInstallReportRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
80;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(AppInstallReportRequest* other);

// implements Message ----------------------------------------------

inline AppInstallReportRequest* New() const PROTOBUF_FINAL { return New(NULL); }

AppInstallReportRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const AppInstallReportRequest& from);
void MergeFrom(const AppInstallReportRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(AppInstallReportRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// repeated .enterprise_management.AppInstallReport app_install_report = 1;
int app_install_report_size() const;
void clear_app_install_report();
static const int kAppInstallReportFieldNumber = 1;
const ::enterprise_management::AppInstallReport& app_install_report(int index) const;
::enterprise_management::AppInstallReport* mutable_app_install_report(int index);
::enterprise_management::AppInstallReport* add_app_install_report();
::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReport >*
mutable_app_install_report();
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReport >&
app_install_report() const;

// @@protoc_insertion_point(class_scope:enterprise_management.AppInstallReportRequest)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReport > app_install_report_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT AppInstallReportResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AppInstallReportResponse) */ {
public:
AppInstallReportResponse();
virtual ~AppInstallReportResponse();

AppInstallReportResponse(const AppInstallReportResponse& from);

inline AppInstallReportResponse& operator=(const AppInstallReportResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const AppInstallReportResponse& default_instance();

static inline const AppInstallReportResponse* internal_default_instance() {
return reinterpret_cast<const AppInstallReportResponse*>(
&_AppInstallReportResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
81;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(AppInstallReportResponse* other);

// implements Message ----------------------------------------------

inline AppInstallReportResponse* New() const PROTOBUF_FINAL { return New(NULL); }

AppInstallReportResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const AppInstallReportResponse& from);
void MergeFrom(const AppInstallReportResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(AppInstallReportResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// @@protoc_insertion_point(class_scope:enterprise_management.AppInstallReportResponse)
private:

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceManagementRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceManagementRequest) */ {
public:
DeviceManagementRequest();
virtual ~DeviceManagementRequest();

DeviceManagementRequest(const DeviceManagementRequest& from);

inline DeviceManagementRequest& operator=(const DeviceManagementRequest& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceManagementRequest& default_instance();

static inline const DeviceManagementRequest* internal_default_instance() {
return reinterpret_cast<const DeviceManagementRequest*>(
&_DeviceManagementRequest_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
82;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceManagementRequest* other);

// implements Message ----------------------------------------------

inline DeviceManagementRequest* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceManagementRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceManagementRequest& from);
void MergeFrom(const DeviceManagementRequest& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceManagementRequest* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional .enterprise_management.DeviceRegisterRequest register_request = 1;
bool has_register_request() const;
void clear_register_request();
static const int kRegisterRequestFieldNumber = 1;
const ::enterprise_management::DeviceRegisterRequest& register_request() const;
::enterprise_management::DeviceRegisterRequest* mutable_register_request();
::enterprise_management::DeviceRegisterRequest* release_register_request();
void set_allocated_register_request(::enterprise_management::DeviceRegisterRequest* register_request);

// optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
bool has_unregister_request() const;
void clear_unregister_request();
static const int kUnregisterRequestFieldNumber = 2;
const ::enterprise_management::DeviceUnregisterRequest& unregister_request() const;
::enterprise_management::DeviceUnregisterRequest* mutable_unregister_request();
::enterprise_management::DeviceUnregisterRequest* release_unregister_request();
void set_allocated_unregister_request(::enterprise_management::DeviceUnregisterRequest* unregister_request);

// optional .enterprise_management.DevicePolicyRequest policy_request = 3;
bool has_policy_request() const;
void clear_policy_request();
static const int kPolicyRequestFieldNumber = 3;
const ::enterprise_management::DevicePolicyRequest& policy_request() const;
::enterprise_management::DevicePolicyRequest* mutable_policy_request();
::enterprise_management::DevicePolicyRequest* release_policy_request();
void set_allocated_policy_request(::enterprise_management::DevicePolicyRequest* policy_request);

// optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
bool has_device_status_report_request() const;
void clear_device_status_report_request();
static const int kDeviceStatusReportRequestFieldNumber = 4;
const ::enterprise_management::DeviceStatusReportRequest& device_status_report_request() const;
::enterprise_management::DeviceStatusReportRequest* mutable_device_status_report_request();
::enterprise_management::DeviceStatusReportRequest* release_device_status_report_request();
void set_allocated_device_status_report_request(::enterprise_management::DeviceStatusReportRequest* device_status_report_request);

// optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
bool has_session_status_report_request() const;
void clear_session_status_report_request();
static const int kSessionStatusReportRequestFieldNumber = 5;
const ::enterprise_management::SessionStatusReportRequest& session_status_report_request() const;
::enterprise_management::SessionStatusReportRequest* mutable_session_status_report_request();
::enterprise_management::SessionStatusReportRequest* release_session_status_report_request();
void set_allocated_session_status_report_request(::enterprise_management::SessionStatusReportRequest* session_status_report_request);

// optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
bool has_auto_enrollment_request() const;
void clear_auto_enrollment_request();
static const int kAutoEnrollmentRequestFieldNumber = 6;
const ::enterprise_management::DeviceAutoEnrollmentRequest& auto_enrollment_request() const;
::enterprise_management::DeviceAutoEnrollmentRequest* mutable_auto_enrollment_request();
::enterprise_management::DeviceAutoEnrollmentRequest* release_auto_enrollment_request();
void set_allocated_auto_enrollment_request(::enterprise_management::DeviceAutoEnrollmentRequest* auto_enrollment_request);

// optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
bool has_cert_upload_request() const;
void clear_cert_upload_request();
static const int kCertUploadRequestFieldNumber = 7;
const ::enterprise_management::DeviceCertUploadRequest& cert_upload_request() const;
::enterprise_management::DeviceCertUploadRequest* mutable_cert_upload_request();
::enterprise_management::DeviceCertUploadRequest* release_cert_upload_request();
void set_allocated_cert_upload_request(::enterprise_management::DeviceCertUploadRequest* cert_upload_request);

// optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
bool has_service_api_access_request() const;
void clear_service_api_access_request();
static const int kServiceApiAccessRequestFieldNumber = 8;
const ::enterprise_management::DeviceServiceApiAccessRequest& service_api_access_request() const;
::enterprise_management::DeviceServiceApiAccessRequest* mutable_service_api_access_request();
::enterprise_management::DeviceServiceApiAccessRequest* release_service_api_access_request();
void set_allocated_service_api_access_request(::enterprise_management::DeviceServiceApiAccessRequest* service_api_access_request);

// optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
bool has_device_state_retrieval_request() const;
void clear_device_state_retrieval_request();
static const int kDeviceStateRetrievalRequestFieldNumber = 9;
const ::enterprise_management::DeviceStateRetrievalRequest& device_state_retrieval_request() const;
::enterprise_management::DeviceStateRetrievalRequest* mutable_device_state_retrieval_request();
::enterprise_management::DeviceStateRetrievalRequest* release_device_state_retrieval_request();
void set_allocated_device_state_retrieval_request(::enterprise_management::DeviceStateRetrievalRequest* device_state_retrieval_request);

// optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
bool has_device_state_key_update_request() const;
void clear_device_state_key_update_request();
static const int kDeviceStateKeyUpdateRequestFieldNumber = 10;
const ::enterprise_management::DeviceStateKeyUpdateRequest& device_state_key_update_request() const;
::enterprise_management::DeviceStateKeyUpdateRequest* mutable_device_state_key_update_request();
::enterprise_management::DeviceStateKeyUpdateRequest* release_device_state_key_update_request();
void set_allocated_device_state_key_update_request(::enterprise_management::DeviceStateKeyUpdateRequest* device_state_key_update_request);

// optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
bool has_device_pairing_request() const;
void clear_device_pairing_request();
static const int kDevicePairingRequestFieldNumber = 11;
const ::enterprise_management::DevicePairingRequest& device_pairing_request() const;
::enterprise_management::DevicePairingRequest* mutable_device_pairing_request();
::enterprise_management::DevicePairingRequest* release_device_pairing_request();
void set_allocated_device_pairing_request(::enterprise_management::DevicePairingRequest* device_pairing_request);

// optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
bool has_check_device_pairing_request() const;
void clear_check_device_pairing_request();
static const int kCheckDevicePairingRequestFieldNumber = 12;
const ::enterprise_management::CheckDevicePairingRequest& check_device_pairing_request() const;
::enterprise_management::CheckDevicePairingRequest* mutable_check_device_pairing_request();
::enterprise_management::CheckDevicePairingRequest* release_check_device_pairing_request();
void set_allocated_check_device_pairing_request(::enterprise_management::CheckDevicePairingRequest* check_device_pairing_request);

// optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
bool has_remote_command_request() const;
void clear_remote_command_request();
static const int kRemoteCommandRequestFieldNumber = 13;
const ::enterprise_management::DeviceRemoteCommandRequest& remote_command_request() const;
::enterprise_management::DeviceRemoteCommandRequest* mutable_remote_command_request();
::enterprise_management::DeviceRemoteCommandRequest* release_remote_command_request();
void set_allocated_remote_command_request(::enterprise_management::DeviceRemoteCommandRequest* remote_command_request);

// optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
bool has_device_attribute_update_permission_request() const;
void clear_device_attribute_update_permission_request();
static const int kDeviceAttributeUpdatePermissionRequestFieldNumber = 14;
const ::enterprise_management::DeviceAttributeUpdatePermissionRequest& device_attribute_update_permission_request() const;
::enterprise_management::DeviceAttributeUpdatePermissionRequest* mutable_device_attribute_update_permission_request();
::enterprise_management::DeviceAttributeUpdatePermissionRequest* release_device_attribute_update_permission_request();
void set_allocated_device_attribute_update_permission_request(::enterprise_management::DeviceAttributeUpdatePermissionRequest* device_attribute_update_permission_request);

// optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
bool has_device_attribute_update_request() const;
void clear_device_attribute_update_request();
static const int kDeviceAttributeUpdateRequestFieldNumber = 15;
const ::enterprise_management::DeviceAttributeUpdateRequest& device_attribute_update_request() const;
::enterprise_management::DeviceAttributeUpdateRequest* mutable_device_attribute_update_request();
::enterprise_management::DeviceAttributeUpdateRequest* release_device_attribute_update_request();
void set_allocated_device_attribute_update_request(::enterprise_management::DeviceAttributeUpdateRequest* device_attribute_update_request);

// optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
bool has_gcm_id_update_request() const;
void clear_gcm_id_update_request();
static const int kGcmIdUpdateRequestFieldNumber = 16;
const ::enterprise_management::GcmIdUpdateRequest& gcm_id_update_request() const;
::enterprise_management::GcmIdUpdateRequest* mutable_gcm_id_update_request();
::enterprise_management::GcmIdUpdateRequest* release_gcm_id_update_request();
void set_allocated_gcm_id_update_request(::enterprise_management::GcmIdUpdateRequest* gcm_id_update_request);

// optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
bool has_check_android_management_request() const;
void clear_check_android_management_request();
static const int kCheckAndroidManagementRequestFieldNumber = 17;
const ::enterprise_management::CheckAndroidManagementRequest& check_android_management_request() const;
::enterprise_management::CheckAndroidManagementRequest* mutable_check_android_management_request();
::enterprise_management::CheckAndroidManagementRequest* release_check_android_management_request();
void set_allocated_check_android_management_request(::enterprise_management::CheckAndroidManagementRequest* check_android_management_request);

// optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
bool has_certificate_based_register_request() const;
void clear_certificate_based_register_request();
static const int kCertificateBasedRegisterRequestFieldNumber = 18;
const ::enterprise_management::CertificateBasedDeviceRegisterRequest& certificate_based_register_request() const;
::enterprise_management::CertificateBasedDeviceRegisterRequest* mutable_certificate_based_register_request();
::enterprise_management::CertificateBasedDeviceRegisterRequest* release_certificate_based_register_request();
void set_allocated_certificate_based_register_request(::enterprise_management::CertificateBasedDeviceRegisterRequest* certificate_based_register_request);

// optional .enterprise_management.ActiveDirectoryEnrollPlayUserRequest active_directory_enroll_play_user_request = 19;
bool has_active_directory_enroll_play_user_request() const;
void clear_active_directory_enroll_play_user_request();
static const int kActiveDirectoryEnrollPlayUserRequestFieldNumber = 19;
const ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest& active_directory_enroll_play_user_request() const;
::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* mutable_active_directory_enroll_play_user_request();
::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* release_active_directory_enroll_play_user_request();
void set_allocated_active_directory_enroll_play_user_request(::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* active_directory_enroll_play_user_request);

// optional .enterprise_management.ActiveDirectoryPlayActivityRequest active_directory_play_activity_request = 20;
bool has_active_directory_play_activity_request() const;
void clear_active_directory_play_activity_request();
static const int kActiveDirectoryPlayActivityRequestFieldNumber = 20;
const ::enterprise_management::ActiveDirectoryPlayActivityRequest& active_directory_play_activity_request() const;
::enterprise_management::ActiveDirectoryPlayActivityRequest* mutable_active_directory_play_activity_request();
::enterprise_management::ActiveDirectoryPlayActivityRequest* release_active_directory_play_activity_request();
void set_allocated_active_directory_play_activity_request(::enterprise_management::ActiveDirectoryPlayActivityRequest* active_directory_play_activity_request);

// optional .enterprise_management.CheckDeviceLicenseRequest check_device_license_request = 21;
bool has_check_device_license_request() const;
void clear_check_device_license_request();
static const int kCheckDeviceLicenseRequestFieldNumber = 21;
const ::enterprise_management::CheckDeviceLicenseRequest& check_device_license_request() const;
::enterprise_management::CheckDeviceLicenseRequest* mutable_check_device_license_request();
::enterprise_management::CheckDeviceLicenseRequest* release_check_device_license_request();
void set_allocated_check_device_license_request(::enterprise_management::CheckDeviceLicenseRequest* check_device_license_request);

// optional .enterprise_management.ActiveDirectoryUserSigninRequest active_directory_user_signin_request = 22;
bool has_active_directory_user_signin_request() const;
void clear_active_directory_user_signin_request();
static const int kActiveDirectoryUserSigninRequestFieldNumber = 22;
const ::enterprise_management::ActiveDirectoryUserSigninRequest& active_directory_user_signin_request() const;
::enterprise_management::ActiveDirectoryUserSigninRequest* mutable_active_directory_user_signin_request();
::enterprise_management::ActiveDirectoryUserSigninRequest* release_active_directory_user_signin_request();
void set_allocated_active_directory_user_signin_request(::enterprise_management::ActiveDirectoryUserSigninRequest* active_directory_user_signin_request);

// optional .enterprise_management.RegisterBrowserRequest register_browser_request = 23;
bool has_register_browser_request() const;
void clear_register_browser_request();
static const int kRegisterBrowserRequestFieldNumber = 23;
const ::enterprise_management::RegisterBrowserRequest& register_browser_request() const;
::enterprise_management::RegisterBrowserRequest* mutable_register_browser_request();
::enterprise_management::RegisterBrowserRequest* release_register_browser_request();
void set_allocated_register_browser_request(::enterprise_management::RegisterBrowserRequest* register_browser_request);

// optional .enterprise_management.AppInstallReportRequest app_install_report_request = 25;
bool has_app_install_report_request() const;
void clear_app_install_report_request();
static const int kAppInstallReportRequestFieldNumber = 25;
const ::enterprise_management::AppInstallReportRequest& app_install_report_request() const;
::enterprise_management::AppInstallReportRequest* mutable_app_install_report_request();
::enterprise_management::AppInstallReportRequest* release_app_install_report_request();
void set_allocated_app_install_report_request(::enterprise_management::AppInstallReportRequest* app_install_report_request);

// optional .enterprise_management.ChromeDesktopReportRequest chrome_desktop_report_request = 26;
bool has_chrome_desktop_report_request() const;
void clear_chrome_desktop_report_request();
static const int kChromeDesktopReportRequestFieldNumber = 26;
const ::enterprise_management::ChromeDesktopReportRequest& chrome_desktop_report_request() const;
::enterprise_management::ChromeDesktopReportRequest* mutable_chrome_desktop_report_request();
::enterprise_management::ChromeDesktopReportRequest* release_chrome_desktop_report_request();
void set_allocated_chrome_desktop_report_request(::enterprise_management::ChromeDesktopReportRequest* chrome_desktop_report_request);

// optional .enterprise_management.PolicyValidationReportRequest policy_validation_report_request = 27;
bool has_policy_validation_report_request() const;
void clear_policy_validation_report_request();
static const int kPolicyValidationReportRequestFieldNumber = 27;
const ::enterprise_management::PolicyValidationReportRequest& policy_validation_report_request() const;
::enterprise_management::PolicyValidationReportRequest* mutable_policy_validation_report_request();
::enterprise_management::PolicyValidationReportRequest* release_policy_validation_report_request();
void set_allocated_policy_validation_report_request(::enterprise_management::PolicyValidationReportRequest* policy_validation_report_request);

// optional .enterprise_management.DeviceInitialEnrollmentStateRequest device_initial_enrollment_state_request = 28;
bool has_device_initial_enrollment_state_request() const;
void clear_device_initial_enrollment_state_request();
static const int kDeviceInitialEnrollmentStateRequestFieldNumber = 28;
const ::enterprise_management::DeviceInitialEnrollmentStateRequest& device_initial_enrollment_state_request() const;
::enterprise_management::DeviceInitialEnrollmentStateRequest* mutable_device_initial_enrollment_state_request();
::enterprise_management::DeviceInitialEnrollmentStateRequest* release_device_initial_enrollment_state_request();
void set_allocated_device_initial_enrollment_state_request(::enterprise_management::DeviceInitialEnrollmentStateRequest* device_initial_enrollment_state_request);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceManagementRequest)
private:
void set_has_register_request();
void clear_has_register_request();
void set_has_unregister_request();
void clear_has_unregister_request();
void set_has_policy_request();
void clear_has_policy_request();
void set_has_device_status_report_request();
void clear_has_device_status_report_request();
void set_has_session_status_report_request();
void clear_has_session_status_report_request();
void set_has_auto_enrollment_request();
void clear_has_auto_enrollment_request();
void set_has_cert_upload_request();
void clear_has_cert_upload_request();
void set_has_service_api_access_request();
void clear_has_service_api_access_request();
void set_has_device_state_retrieval_request();
void clear_has_device_state_retrieval_request();
void set_has_device_state_key_update_request();
void clear_has_device_state_key_update_request();
void set_has_device_pairing_request();
void clear_has_device_pairing_request();
void set_has_check_device_pairing_request();
void clear_has_check_device_pairing_request();
void set_has_remote_command_request();
void clear_has_remote_command_request();
void set_has_device_attribute_update_permission_request();
void clear_has_device_attribute_update_permission_request();
void set_has_device_attribute_update_request();
void clear_has_device_attribute_update_request();
void set_has_gcm_id_update_request();
void clear_has_gcm_id_update_request();
void set_has_check_android_management_request();
void clear_has_check_android_management_request();
void set_has_certificate_based_register_request();
void clear_has_certificate_based_register_request();
void set_has_active_directory_enroll_play_user_request();
void clear_has_active_directory_enroll_play_user_request();
void set_has_active_directory_play_activity_request();
void clear_has_active_directory_play_activity_request();
void set_has_check_device_license_request();
void clear_has_check_device_license_request();
void set_has_active_directory_user_signin_request();
void clear_has_active_directory_user_signin_request();
void set_has_register_browser_request();
void clear_has_register_browser_request();
void set_has_app_install_report_request();
void clear_has_app_install_report_request();
void set_has_chrome_desktop_report_request();
void clear_has_chrome_desktop_report_request();
void set_has_policy_validation_report_request();
void clear_has_policy_validation_report_request();
void set_has_device_initial_enrollment_state_request();
void clear_has_device_initial_enrollment_state_request();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::enterprise_management::DeviceRegisterRequest* register_request_;
::enterprise_management::DeviceUnregisterRequest* unregister_request_;
::enterprise_management::DevicePolicyRequest* policy_request_;
::enterprise_management::DeviceStatusReportRequest* device_status_report_request_;
::enterprise_management::SessionStatusReportRequest* session_status_report_request_;
::enterprise_management::DeviceAutoEnrollmentRequest* auto_enrollment_request_;
::enterprise_management::DeviceCertUploadRequest* cert_upload_request_;
::enterprise_management::DeviceServiceApiAccessRequest* service_api_access_request_;
::enterprise_management::DeviceStateRetrievalRequest* device_state_retrieval_request_;
::enterprise_management::DeviceStateKeyUpdateRequest* device_state_key_update_request_;
::enterprise_management::DevicePairingRequest* device_pairing_request_;
::enterprise_management::CheckDevicePairingRequest* check_device_pairing_request_;
::enterprise_management::DeviceRemoteCommandRequest* remote_command_request_;
::enterprise_management::DeviceAttributeUpdatePermissionRequest* device_attribute_update_permission_request_;
::enterprise_management::DeviceAttributeUpdateRequest* device_attribute_update_request_;
::enterprise_management::GcmIdUpdateRequest* gcm_id_update_request_;
::enterprise_management::CheckAndroidManagementRequest* check_android_management_request_;
::enterprise_management::CertificateBasedDeviceRegisterRequest* certificate_based_register_request_;
::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* active_directory_enroll_play_user_request_;
::enterprise_management::ActiveDirectoryPlayActivityRequest* active_directory_play_activity_request_;
::enterprise_management::CheckDeviceLicenseRequest* check_device_license_request_;
::enterprise_management::ActiveDirectoryUserSigninRequest* active_directory_user_signin_request_;
::enterprise_management::RegisterBrowserRequest* register_browser_request_;
::enterprise_management::AppInstallReportRequest* app_install_report_request_;
::enterprise_management::ChromeDesktopReportRequest* chrome_desktop_report_request_;
::enterprise_management::PolicyValidationReportRequest* policy_validation_report_request_;
::enterprise_management::DeviceInitialEnrollmentStateRequest* device_initial_enrollment_state_request_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POLICY_PROTO_EXPORT DeviceManagementResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceManagementResponse) */ {
public:
DeviceManagementResponse();
virtual ~DeviceManagementResponse();

DeviceManagementResponse(const DeviceManagementResponse& from);

inline DeviceManagementResponse& operator=(const DeviceManagementResponse& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const DeviceManagementResponse& default_instance();

static inline const DeviceManagementResponse* internal_default_instance() {
return reinterpret_cast<const DeviceManagementResponse*>(
&_DeviceManagementResponse_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
83;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeviceManagementResponse* other);

// implements Message ----------------------------------------------

inline DeviceManagementResponse* New() const PROTOBUF_FINAL { return New(NULL); }

DeviceManagementResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const DeviceManagementResponse& from);
void MergeFrom(const DeviceManagementResponse& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(DeviceManagementResponse* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

typedef DeviceManagementResponse_ErrorCode ErrorCode;
static const ErrorCode SUCCESS =
DeviceManagementResponse_ErrorCode_SUCCESS;
static const ErrorCode DEVICE_MANAGEMENT_NOT_SUPPORTED =
DeviceManagementResponse_ErrorCode_DEVICE_MANAGEMENT_NOT_SUPPORTED;
static const ErrorCode DEVICE_NOT_FOUND =
DeviceManagementResponse_ErrorCode_DEVICE_NOT_FOUND;
static const ErrorCode DEVICE_MANAGEMENT_TOKEN_INVALID =
DeviceManagementResponse_ErrorCode_DEVICE_MANAGEMENT_TOKEN_INVALID;
static const ErrorCode ACTIVATION_PENDING =
DeviceManagementResponse_ErrorCode_ACTIVATION_PENDING;
static const ErrorCode POLICY_NOT_FOUND =
DeviceManagementResponse_ErrorCode_POLICY_NOT_FOUND;
static inline bool ErrorCode_IsValid(int value) {
return DeviceManagementResponse_ErrorCode_IsValid(value);
}
static const ErrorCode ErrorCode_MIN =
DeviceManagementResponse_ErrorCode_ErrorCode_MIN;
static const ErrorCode ErrorCode_MAX =
DeviceManagementResponse_ErrorCode_ErrorCode_MAX;
static const int ErrorCode_ARRAYSIZE =
DeviceManagementResponse_ErrorCode_ErrorCode_ARRAYSIZE;

// accessors -------------------------------------------------------

// optional string error_message = 2;
bool has_error_message() const;
void clear_error_message();
static const int kErrorMessageFieldNumber = 2;
const ::std::string& error_message() const;
void set_error_message(const ::std::string& value);
#if LANG_CXX11
void set_error_message(::std::string&& value);
#endif
void set_error_message(const char* value);
void set_error_message(const char* value, size_t size);
::std::string* mutable_error_message();
::std::string* release_error_message();
void set_allocated_error_message(::std::string* error_message);

// optional .enterprise_management.DeviceRegisterResponse register_response = 3;
bool has_register_response() const;
void clear_register_response();
static const int kRegisterResponseFieldNumber = 3;
const ::enterprise_management::DeviceRegisterResponse& register_response() const;
::enterprise_management::DeviceRegisterResponse* mutable_register_response();
::enterprise_management::DeviceRegisterResponse* release_register_response();
void set_allocated_register_response(::enterprise_management::DeviceRegisterResponse* register_response);

// optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
bool has_unregister_response() const;
void clear_unregister_response();
static const int kUnregisterResponseFieldNumber = 4;
const ::enterprise_management::DeviceUnregisterResponse& unregister_response() const;
::enterprise_management::DeviceUnregisterResponse* mutable_unregister_response();
::enterprise_management::DeviceUnregisterResponse* release_unregister_response();
void set_allocated_unregister_response(::enterprise_management::DeviceUnregisterResponse* unregister_response);

// optional .enterprise_management.DevicePolicyResponse policy_response = 5;
bool has_policy_response() const;
void clear_policy_response();
static const int kPolicyResponseFieldNumber = 5;
const ::enterprise_management::DevicePolicyResponse& policy_response() const;
::enterprise_management::DevicePolicyResponse* mutable_policy_response();
::enterprise_management::DevicePolicyResponse* release_policy_response();
void set_allocated_policy_response(::enterprise_management::DevicePolicyResponse* policy_response);

// optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
bool has_device_status_report_response() const;
void clear_device_status_report_response();
static const int kDeviceStatusReportResponseFieldNumber = 6;
const ::enterprise_management::DeviceStatusReportResponse& device_status_report_response() const;
::enterprise_management::DeviceStatusReportResponse* mutable_device_status_report_response();
::enterprise_management::DeviceStatusReportResponse* release_device_status_report_response();
void set_allocated_device_status_report_response(::enterprise_management::DeviceStatusReportResponse* device_status_report_response);

// optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
bool has_session_status_report_response() const;
void clear_session_status_report_response();
static const int kSessionStatusReportResponseFieldNumber = 7;
const ::enterprise_management::SessionStatusReportResponse& session_status_report_response() const;
::enterprise_management::SessionStatusReportResponse* mutable_session_status_report_response();
::enterprise_management::SessionStatusReportResponse* release_session_status_report_response();
void set_allocated_session_status_report_response(::enterprise_management::SessionStatusReportResponse* session_status_report_response);

// optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
bool has_auto_enrollment_response() const;
void clear_auto_enrollment_response();
static const int kAutoEnrollmentResponseFieldNumber = 8;
const ::enterprise_management::DeviceAutoEnrollmentResponse& auto_enrollment_response() const;
::enterprise_management::DeviceAutoEnrollmentResponse* mutable_auto_enrollment_response();
::enterprise_management::DeviceAutoEnrollmentResponse* release_auto_enrollment_response();
void set_allocated_auto_enrollment_response(::enterprise_management::DeviceAutoEnrollmentResponse* auto_enrollment_response);

// optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
bool has_cert_upload_response() const;
void clear_cert_upload_response();
static const int kCertUploadResponseFieldNumber = 9;
const ::enterprise_management::DeviceCertUploadResponse& cert_upload_response() const;
::enterprise_management::DeviceCertUploadResponse* mutable_cert_upload_response();
::enterprise_management::DeviceCertUploadResponse* release_cert_upload_response();
void set_allocated_cert_upload_response(::enterprise_management::DeviceCertUploadResponse* cert_upload_response);

// optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
bool has_service_api_access_response() const;
void clear_service_api_access_response();
static const int kServiceApiAccessResponseFieldNumber = 10;
const ::enterprise_management::DeviceServiceApiAccessResponse& service_api_access_response() const;
::enterprise_management::DeviceServiceApiAccessResponse* mutable_service_api_access_response();
::enterprise_management::DeviceServiceApiAccessResponse* release_service_api_access_response();
void set_allocated_service_api_access_response(::enterprise_management::DeviceServiceApiAccessResponse* service_api_access_response);

// optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
bool has_device_state_retrieval_response() const;
void clear_device_state_retrieval_response();
static const int kDeviceStateRetrievalResponseFieldNumber = 11;
const ::enterprise_management::DeviceStateRetrievalResponse& device_state_retrieval_response() const;
::enterprise_management::DeviceStateRetrievalResponse* mutable_device_state_retrieval_response();
::enterprise_management::DeviceStateRetrievalResponse* release_device_state_retrieval_response();
void set_allocated_device_state_retrieval_response(::enterprise_management::DeviceStateRetrievalResponse* device_state_retrieval_response);

// optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
bool has_device_pairing_response() const;
void clear_device_pairing_response();
static const int kDevicePairingResponseFieldNumber = 12;
const ::enterprise_management::DevicePairingResponse& device_pairing_response() const;
::enterprise_management::DevicePairingResponse* mutable_device_pairing_response();
::enterprise_management::DevicePairingResponse* release_device_pairing_response();
void set_allocated_device_pairing_response(::enterprise_management::DevicePairingResponse* device_pairing_response);

// optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
bool has_check_device_pairing_response() const;
void clear_check_device_pairing_response();
static const int kCheckDevicePairingResponseFieldNumber = 13;
const ::enterprise_management::CheckDevicePairingResponse& check_device_pairing_response() const;
::enterprise_management::CheckDevicePairingResponse* mutable_check_device_pairing_response();
::enterprise_management::CheckDevicePairingResponse* release_check_device_pairing_response();
void set_allocated_check_device_pairing_response(::enterprise_management::CheckDevicePairingResponse* check_device_pairing_response);

// optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
bool has_remote_command_response() const;
void clear_remote_command_response();
static const int kRemoteCommandResponseFieldNumber = 14;
const ::enterprise_management::DeviceRemoteCommandResponse& remote_command_response() const;
::enterprise_management::DeviceRemoteCommandResponse* mutable_remote_command_response();
::enterprise_management::DeviceRemoteCommandResponse* release_remote_command_response();
void set_allocated_remote_command_response(::enterprise_management::DeviceRemoteCommandResponse* remote_command_response);

// optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
bool has_device_attribute_update_permission_response() const;
void clear_device_attribute_update_permission_response();
static const int kDeviceAttributeUpdatePermissionResponseFieldNumber = 15;
const ::enterprise_management::DeviceAttributeUpdatePermissionResponse& device_attribute_update_permission_response() const;
::enterprise_management::DeviceAttributeUpdatePermissionResponse* mutable_device_attribute_update_permission_response();
::enterprise_management::DeviceAttributeUpdatePermissionResponse* release_device_attribute_update_permission_response();
void set_allocated_device_attribute_update_permission_response(::enterprise_management::DeviceAttributeUpdatePermissionResponse* device_attribute_update_permission_response);

// optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
bool has_device_attribute_update_response() const;
void clear_device_attribute_update_response();
static const int kDeviceAttributeUpdateResponseFieldNumber = 16;
const ::enterprise_management::DeviceAttributeUpdateResponse& device_attribute_update_response() const;
::enterprise_management::DeviceAttributeUpdateResponse* mutable_device_attribute_update_response();
::enterprise_management::DeviceAttributeUpdateResponse* release_device_attribute_update_response();
void set_allocated_device_attribute_update_response(::enterprise_management::DeviceAttributeUpdateResponse* device_attribute_update_response);

// optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
bool has_gcm_id_update_response() const;
void clear_gcm_id_update_response();
static const int kGcmIdUpdateResponseFieldNumber = 17;
const ::enterprise_management::GcmIdUpdateResponse& gcm_id_update_response() const;
::enterprise_management::GcmIdUpdateResponse* mutable_gcm_id_update_response();
::enterprise_management::GcmIdUpdateResponse* release_gcm_id_update_response();
void set_allocated_gcm_id_update_response(::enterprise_management::GcmIdUpdateResponse* gcm_id_update_response);

// optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
bool has_check_android_management_response() const;
void clear_check_android_management_response();
static const int kCheckAndroidManagementResponseFieldNumber = 18;
const ::enterprise_management::CheckAndroidManagementResponse& check_android_management_response() const;
::enterprise_management::CheckAndroidManagementResponse* mutable_check_android_management_response();
::enterprise_management::CheckAndroidManagementResponse* release_check_android_management_response();
void set_allocated_check_android_management_response(::enterprise_management::CheckAndroidManagementResponse* check_android_management_response);

// optional .enterprise_management.ActiveDirectoryEnrollPlayUserResponse active_directory_enroll_play_user_response = 19;
bool has_active_directory_enroll_play_user_response() const;
void clear_active_directory_enroll_play_user_response();
static const int kActiveDirectoryEnrollPlayUserResponseFieldNumber = 19;
const ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse& active_directory_enroll_play_user_response() const;
::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* mutable_active_directory_enroll_play_user_response();
::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* release_active_directory_enroll_play_user_response();
void set_allocated_active_directory_enroll_play_user_response(::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* active_directory_enroll_play_user_response);

// optional .enterprise_management.ActiveDirectoryPlayActivityResponse active_directory_play_activity_response = 20;
bool has_active_directory_play_activity_response() const;
void clear_active_directory_play_activity_response();
static const int kActiveDirectoryPlayActivityResponseFieldNumber = 20;
const ::enterprise_management::ActiveDirectoryPlayActivityResponse& active_directory_play_activity_response() const;
::enterprise_management::ActiveDirectoryPlayActivityResponse* mutable_active_directory_play_activity_response();
::enterprise_management::ActiveDirectoryPlayActivityResponse* release_active_directory_play_activity_response();
void set_allocated_active_directory_play_activity_response(::enterprise_management::ActiveDirectoryPlayActivityResponse* active_directory_play_activity_response);

// optional .enterprise_management.CheckDeviceLicenseResponse check_device_license_response = 21;
bool has_check_device_license_response() const;
void clear_check_device_license_response();
static const int kCheckDeviceLicenseResponseFieldNumber = 21;
const ::enterprise_management::CheckDeviceLicenseResponse& check_device_license_response() const;
::enterprise_management::CheckDeviceLicenseResponse* mutable_check_device_license_response();
::enterprise_management::CheckDeviceLicenseResponse* release_check_device_license_response();
void set_allocated_check_device_license_response(::enterprise_management::CheckDeviceLicenseResponse* check_device_license_response);

// optional .enterprise_management.ActiveDirectoryUserSigninResponse active_directory_user_signin_response = 22;
bool has_active_directory_user_signin_response() const;
void clear_active_directory_user_signin_response();
static const int kActiveDirectoryUserSigninResponseFieldNumber = 22;
const ::enterprise_management::ActiveDirectoryUserSigninResponse& active_directory_user_signin_response() const;
::enterprise_management::ActiveDirectoryUserSigninResponse* mutable_active_directory_user_signin_response();
::enterprise_management::ActiveDirectoryUserSigninResponse* release_active_directory_user_signin_response();
void set_allocated_active_directory_user_signin_response(::enterprise_management::ActiveDirectoryUserSigninResponse* active_directory_user_signin_response);

// optional .enterprise_management.ChromeDesktopReportResponse chrome_desktop_report_response = 23;
bool has_chrome_desktop_report_response() const;
void clear_chrome_desktop_report_response();
static const int kChromeDesktopReportResponseFieldNumber = 23;
const ::enterprise_management::ChromeDesktopReportResponse& chrome_desktop_report_response() const;
::enterprise_management::ChromeDesktopReportResponse* mutable_chrome_desktop_report_response();
::enterprise_management::ChromeDesktopReportResponse* release_chrome_desktop_report_response();
void set_allocated_chrome_desktop_report_response(::enterprise_management::ChromeDesktopReportResponse* chrome_desktop_report_response);

// optional .enterprise_management.AppInstallReportResponse app_install_report_response = 25;
bool has_app_install_report_response() const;
void clear_app_install_report_response();
static const int kAppInstallReportResponseFieldNumber = 25;
const ::enterprise_management::AppInstallReportResponse& app_install_report_response() const;
::enterprise_management::AppInstallReportResponse* mutable_app_install_report_response();
::enterprise_management::AppInstallReportResponse* release_app_install_report_response();
void set_allocated_app_install_report_response(::enterprise_management::AppInstallReportResponse* app_install_report_response);

// optional .enterprise_management.PolicyValidationReportResponse policy_validation_report_response = 26;
bool has_policy_validation_report_response() const;
void clear_policy_validation_report_response();
static const int kPolicyValidationReportResponseFieldNumber = 26;
const ::enterprise_management::PolicyValidationReportResponse& policy_validation_report_response() const;
::enterprise_management::PolicyValidationReportResponse* mutable_policy_validation_report_response();
::enterprise_management::PolicyValidationReportResponse* release_policy_validation_report_response();
void set_allocated_policy_validation_report_response(::enterprise_management::PolicyValidationReportResponse* policy_validation_report_response);

// optional .enterprise_management.DeviceInitialEnrollmentStateResponse device_initial_enrollment_state_response = 27;
bool has_device_initial_enrollment_state_response() const;
void clear_device_initial_enrollment_state_response();
static const int kDeviceInitialEnrollmentStateResponseFieldNumber = 27;
const ::enterprise_management::DeviceInitialEnrollmentStateResponse& device_initial_enrollment_state_response() const;
::enterprise_management::DeviceInitialEnrollmentStateResponse* mutable_device_initial_enrollment_state_response();
::enterprise_management::DeviceInitialEnrollmentStateResponse* release_device_initial_enrollment_state_response();
void set_allocated_device_initial_enrollment_state_response(::enterprise_management::DeviceInitialEnrollmentStateResponse* device_initial_enrollment_state_response);

// optional .enterprise_management.DeviceManagementResponse.ErrorCode error = 1 [default = SUCCESS];
bool has_error() const;
void clear_error();
static const int kErrorFieldNumber = 1;
::enterprise_management::DeviceManagementResponse_ErrorCode error() const;
void set_error(::enterprise_management::DeviceManagementResponse_ErrorCode value);

// @@protoc_insertion_point(class_scope:enterprise_management.DeviceManagementResponse)
private:
void set_has_error();
void clear_has_error();
void set_has_error_message();
void clear_has_error_message();
void set_has_register_response();
void clear_has_register_response();
void set_has_unregister_response();
void clear_has_unregister_response();
void set_has_policy_response();
void clear_has_policy_response();
void set_has_device_status_report_response();
void clear_has_device_status_report_response();
void set_has_session_status_report_response();
void clear_has_session_status_report_response();
void set_has_auto_enrollment_response();
void clear_has_auto_enrollment_response();
void set_has_cert_upload_response();
void clear_has_cert_upload_response();
void set_has_service_api_access_response();
void clear_has_service_api_access_response();
void set_has_device_state_retrieval_response();
void clear_has_device_state_retrieval_response();
void set_has_device_pairing_response();
void clear_has_device_pairing_response();
void set_has_check_device_pairing_response();
void clear_has_check_device_pairing_response();
void set_has_remote_command_response();
void clear_has_remote_command_response();
void set_has_device_attribute_update_permission_response();
void clear_has_device_attribute_update_permission_response();
void set_has_device_attribute_update_response();
void clear_has_device_attribute_update_response();
void set_has_gcm_id_update_response();
void clear_has_gcm_id_update_response();
void set_has_check_android_management_response();
void clear_has_check_android_management_response();
void set_has_active_directory_enroll_play_user_response();
void clear_has_active_directory_enroll_play_user_response();
void set_has_active_directory_play_activity_response();
void clear_has_active_directory_play_activity_response();
void set_has_check_device_license_response();
void clear_has_check_device_license_response();
void set_has_active_directory_user_signin_response();
void clear_has_active_directory_user_signin_response();
void set_has_chrome_desktop_report_response();
void clear_has_chrome_desktop_report_response();
void set_has_app_install_report_response();
void clear_has_app_install_report_response();
void set_has_policy_validation_report_response();
void clear_has_policy_validation_report_response();
void set_has_device_initial_enrollment_state_response();
void clear_has_device_initial_enrollment_state_response();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr error_message_;
::enterprise_management::DeviceRegisterResponse* register_response_;
::enterprise_management::DeviceUnregisterResponse* unregister_response_;
::enterprise_management::DevicePolicyResponse* policy_response_;
::enterprise_management::DeviceStatusReportResponse* device_status_report_response_;
::enterprise_management::SessionStatusReportResponse* session_status_report_response_;
::enterprise_management::DeviceAutoEnrollmentResponse* auto_enrollment_response_;
::enterprise_management::DeviceCertUploadResponse* cert_upload_response_;
::enterprise_management::DeviceServiceApiAccessResponse* service_api_access_response_;
::enterprise_management::DeviceStateRetrievalResponse* device_state_retrieval_response_;
::enterprise_management::DevicePairingResponse* device_pairing_response_;
::enterprise_management::CheckDevicePairingResponse* check_device_pairing_response_;
::enterprise_management::DeviceRemoteCommandResponse* remote_command_response_;
::enterprise_management::DeviceAttributeUpdatePermissionResponse* device_attribute_update_permission_response_;
::enterprise_management::DeviceAttributeUpdateResponse* device_attribute_update_response_;
::enterprise_management::GcmIdUpdateResponse* gcm_id_update_response_;
::enterprise_management::CheckAndroidManagementResponse* check_android_management_response_;
::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* active_directory_enroll_play_user_response_;
::enterprise_management::ActiveDirectoryPlayActivityResponse* active_directory_play_activity_response_;
::enterprise_management::CheckDeviceLicenseResponse* check_device_license_response_;
::enterprise_management::ActiveDirectoryUserSigninResponse* active_directory_user_signin_response_;
::enterprise_management::ChromeDesktopReportResponse* chrome_desktop_report_response_;
::enterprise_management::AppInstallReportResponse* app_install_report_response_;
::enterprise_management::PolicyValidationReportResponse* policy_validation_report_response_;
::enterprise_management::DeviceInitialEnrollmentStateResponse* device_initial_enrollment_state_response_;
int error_;
friend struct protobuf_device_5fmanagement_5fbackend_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LicenseType

// optional .enterprise_management.LicenseType.LicenseTypeEnum license_type = 1;
inline bool LicenseType::has_license_type() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LicenseType::set_has_license_type() {
_has_bits_[0] |= 0x00000001u;
}
inline void LicenseType::clear_has_license_type() {
_has_bits_[0] &= ~0x00000001u;
}
inline void LicenseType::clear_license_type() {
license_type_ = 0;
clear_has_license_type();
}
inline ::enterprise_management::LicenseType_LicenseTypeEnum LicenseType::license_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.LicenseType.license_type)
return static_cast< ::enterprise_management::LicenseType_LicenseTypeEnum >(license_type_);
}
inline void LicenseType::set_license_type(::enterprise_management::LicenseType_LicenseTypeEnum value) {
assert(::enterprise_management::LicenseType_LicenseTypeEnum_IsValid(value));
set_has_license_type();
license_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.LicenseType.license_type)
}

// -------------------------------------------------------------------

// SignedData

// optional bytes data = 1;
inline bool SignedData::has_data() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedData::set_has_data() {
_has_bits_[0] |= 0x00000001u;
}
inline void SignedData::clear_has_data() {
_has_bits_[0] &= ~0x00000001u;
}
inline void SignedData::clear_data() {
data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_data();
}
inline const ::std::string& SignedData::data() const {
// @@protoc_insertion_point(field_get:enterprise_management.SignedData.data)
return data_.GetNoArena();
}
inline void SignedData::set_data(const ::std::string& value) {
set_has_data();
data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.SignedData.data)
}
#if LANG_CXX11
inline void SignedData::set_data(::std::string&& value) {
set_has_data();
data_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.SignedData.data)
}
#endif
inline void SignedData::set_data(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_data();
data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.SignedData.data)
}
inline void SignedData::set_data(const void* value, size_t size) {
set_has_data();
data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.SignedData.data)
}
inline ::std::string* SignedData::mutable_data() {
set_has_data();
// @@protoc_insertion_point(field_mutable:enterprise_management.SignedData.data)
return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedData::release_data() {
// @@protoc_insertion_point(field_release:enterprise_management.SignedData.data)
clear_has_data();
return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedData::set_allocated_data(::std::string* data) {
if (data != NULL) {
set_has_data();
} else {
clear_has_data();
}
data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.SignedData.data)
}

// optional bytes signature = 2;
inline bool SignedData::has_signature() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedData::set_has_signature() {
_has_bits_[0] |= 0x00000002u;
}
inline void SignedData::clear_has_signature() {
_has_bits_[0] &= ~0x00000002u;
}
inline void SignedData::clear_signature() {
signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_signature();
}
inline const ::std::string& SignedData::signature() const {
// @@protoc_insertion_point(field_get:enterprise_management.SignedData.signature)
return signature_.GetNoArena();
}
inline void SignedData::set_signature(const ::std::string& value) {
set_has_signature();
signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.SignedData.signature)
}
#if LANG_CXX11
inline void SignedData::set_signature(::std::string&& value) {
set_has_signature();
signature_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.SignedData.signature)
}
#endif
inline void SignedData::set_signature(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_signature();
signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.SignedData.signature)
}
inline void SignedData::set_signature(const void* value, size_t size) {
set_has_signature();
signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.SignedData.signature)
}
inline ::std::string* SignedData::mutable_signature() {
set_has_signature();
// @@protoc_insertion_point(field_mutable:enterprise_management.SignedData.signature)
return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedData::release_signature() {
// @@protoc_insertion_point(field_release:enterprise_management.SignedData.signature)
clear_has_signature();
return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedData::set_allocated_signature(::std::string* signature) {
if (signature != NULL) {
set_has_signature();
} else {
clear_has_signature();
}
signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.SignedData.signature)
}

// optional int32 extra_data_bytes = 3;
inline bool SignedData::has_extra_data_bytes() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignedData::set_has_extra_data_bytes() {
_has_bits_[0] |= 0x00000004u;
}
inline void SignedData::clear_has_extra_data_bytes() {
_has_bits_[0] &= ~0x00000004u;
}
inline void SignedData::clear_extra_data_bytes() {
extra_data_bytes_ = 0;
clear_has_extra_data_bytes();
}
inline ::google::protobuf::int32 SignedData::extra_data_bytes() const {
// @@protoc_insertion_point(field_get:enterprise_management.SignedData.extra_data_bytes)
return extra_data_bytes_;
}
inline void SignedData::set_extra_data_bytes(::google::protobuf::int32 value) {
set_has_extra_data_bytes();
extra_data_bytes_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.SignedData.extra_data_bytes)
}

// -------------------------------------------------------------------

// DeviceRegisterRequest

// optional bool reregister = 1;
inline bool DeviceRegisterRequest::has_reregister() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceRegisterRequest::set_has_reregister() {
_has_bits_[0] |= 0x00000040u;
}
inline void DeviceRegisterRequest::clear_has_reregister() {
_has_bits_[0] &= ~0x00000040u;
}
inline void DeviceRegisterRequest::clear_reregister() {
reregister_ = false;
clear_has_reregister();
}
inline bool DeviceRegisterRequest::reregister() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.reregister)
return reregister_;
}
inline void DeviceRegisterRequest::set_reregister(bool value) {
set_has_reregister();
reregister_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.reregister)
}

// optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
inline bool DeviceRegisterRequest::has_type() const {
return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceRegisterRequest::set_has_type() {
_has_bits_[0] |= 0x00000080u;
}
inline void DeviceRegisterRequest::clear_has_type() {
_has_bits_[0] &= ~0x00000080u;
}
inline void DeviceRegisterRequest::clear_type() {
type_ = 0;
clear_has_type();
}
inline ::enterprise_management::DeviceRegisterRequest_Type DeviceRegisterRequest::type() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.type)
return static_cast< ::enterprise_management::DeviceRegisterRequest_Type >(type_);
}
inline void DeviceRegisterRequest::set_type(::enterprise_management::DeviceRegisterRequest_Type value) {
assert(::enterprise_management::DeviceRegisterRequest_Type_IsValid(value));
set_has_type();
type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.type)
}

// optional string machine_id = 3;
inline bool DeviceRegisterRequest::has_machine_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceRegisterRequest::set_has_machine_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceRegisterRequest::clear_has_machine_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceRegisterRequest::clear_machine_id() {
machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_machine_id();
}
inline const ::std::string& DeviceRegisterRequest::machine_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.machine_id)
return machine_id_.GetNoArena();
}
inline void DeviceRegisterRequest::set_machine_id(const ::std::string& value) {
set_has_machine_id();
machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.machine_id)
}
#if LANG_CXX11
inline void DeviceRegisterRequest::set_machine_id(::std::string&& value) {
set_has_machine_id();
machine_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterRequest.machine_id)
}
#endif
inline void DeviceRegisterRequest::set_machine_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_machine_id();
machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.machine_id)
}
inline void DeviceRegisterRequest::set_machine_id(const char* value, size_t size) {
set_has_machine_id();
machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.machine_id)
}
inline ::std::string* DeviceRegisterRequest::mutable_machine_id() {
set_has_machine_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.machine_id)
return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRegisterRequest::release_machine_id() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.machine_id)
clear_has_machine_id();
return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRegisterRequest::set_allocated_machine_id(::std::string* machine_id) {
if (machine_id != NULL) {
set_has_machine_id();
} else {
clear_has_machine_id();
}
machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.machine_id)
}

// optional string machine_model = 4;
inline bool DeviceRegisterRequest::has_machine_model() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceRegisterRequest::set_has_machine_model() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceRegisterRequest::clear_has_machine_model() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceRegisterRequest::clear_machine_model() {
machine_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_machine_model();
}
inline const ::std::string& DeviceRegisterRequest::machine_model() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.machine_model)
return machine_model_.GetNoArena();
}
inline void DeviceRegisterRequest::set_machine_model(const ::std::string& value) {
set_has_machine_model();
machine_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.machine_model)
}
#if LANG_CXX11
inline void DeviceRegisterRequest::set_machine_model(::std::string&& value) {
set_has_machine_model();
machine_model_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterRequest.machine_model)
}
#endif
inline void DeviceRegisterRequest::set_machine_model(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_machine_model();
machine_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.machine_model)
}
inline void DeviceRegisterRequest::set_machine_model(const char* value, size_t size) {
set_has_machine_model();
machine_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.machine_model)
}
inline ::std::string* DeviceRegisterRequest::mutable_machine_model() {
set_has_machine_model();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.machine_model)
return machine_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRegisterRequest::release_machine_model() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.machine_model)
clear_has_machine_model();
return machine_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRegisterRequest::set_allocated_machine_model(::std::string* machine_model) {
if (machine_model != NULL) {
set_has_machine_model();
} else {
clear_has_machine_model();
}
machine_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_model);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.machine_model)
}

// optional string requisition = 6;
inline bool DeviceRegisterRequest::has_requisition() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceRegisterRequest::set_has_requisition() {
_has_bits_[0] |= 0x00000004u;
}
inline void DeviceRegisterRequest::clear_has_requisition() {
_has_bits_[0] &= ~0x00000004u;
}
inline void DeviceRegisterRequest::clear_requisition() {
requisition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_requisition();
}
inline const ::std::string& DeviceRegisterRequest::requisition() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.requisition)
return requisition_.GetNoArena();
}
inline void DeviceRegisterRequest::set_requisition(const ::std::string& value) {
set_has_requisition();
requisition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.requisition)
}
#if LANG_CXX11
inline void DeviceRegisterRequest::set_requisition(::std::string&& value) {
set_has_requisition();
requisition_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterRequest.requisition)
}
#endif
inline void DeviceRegisterRequest::set_requisition(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_requisition();
requisition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.requisition)
}
inline void DeviceRegisterRequest::set_requisition(const char* value, size_t size) {
set_has_requisition();
requisition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.requisition)
}
inline ::std::string* DeviceRegisterRequest::mutable_requisition() {
set_has_requisition();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.requisition)
return requisition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRegisterRequest::release_requisition() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.requisition)
clear_has_requisition();
return requisition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRegisterRequest::set_allocated_requisition(::std::string* requisition) {
if (requisition != NULL) {
set_has_requisition();
} else {
clear_has_requisition();
}
requisition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requisition);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.requisition)
}

// optional bytes server_backed_state_key = 7;
inline bool DeviceRegisterRequest::has_server_backed_state_key() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceRegisterRequest::set_has_server_backed_state_key() {
_has_bits_[0] |= 0x00000008u;
}
inline void DeviceRegisterRequest::clear_has_server_backed_state_key() {
_has_bits_[0] &= ~0x00000008u;
}
inline void DeviceRegisterRequest::clear_server_backed_state_key() {
server_backed_state_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_server_backed_state_key();
}
inline const ::std::string& DeviceRegisterRequest::server_backed_state_key() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
return server_backed_state_key_.GetNoArena();
}
inline void DeviceRegisterRequest::set_server_backed_state_key(const ::std::string& value) {
set_has_server_backed_state_key();
server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
#if LANG_CXX11
inline void DeviceRegisterRequest::set_server_backed_state_key(::std::string&& value) {
set_has_server_backed_state_key();
server_backed_state_key_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
#endif
inline void DeviceRegisterRequest::set_server_backed_state_key(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_server_backed_state_key();
server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
inline void DeviceRegisterRequest::set_server_backed_state_key(const void* value, size_t size) {
set_has_server_backed_state_key();
server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
inline ::std::string* DeviceRegisterRequest::mutable_server_backed_state_key() {
set_has_server_backed_state_key();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
return server_backed_state_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRegisterRequest::release_server_backed_state_key() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
clear_has_server_backed_state_key();
return server_backed_state_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRegisterRequest::set_allocated_server_backed_state_key(::std::string* server_backed_state_key) {
if (server_backed_state_key != NULL) {
set_has_server_backed_state_key();
} else {
clear_has_server_backed_state_key();
}
server_backed_state_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_backed_state_key);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}

// optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
inline bool DeviceRegisterRequest::has_flavor() const {
return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceRegisterRequest::set_has_flavor() {
_has_bits_[0] |= 0x00000100u;
}
inline void DeviceRegisterRequest::clear_has_flavor() {
_has_bits_[0] &= ~0x00000100u;
}
inline void DeviceRegisterRequest::clear_flavor() {
flavor_ = 0;
clear_has_flavor();
}
inline ::enterprise_management::DeviceRegisterRequest_Flavor DeviceRegisterRequest::flavor() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.flavor)
return static_cast< ::enterprise_management::DeviceRegisterRequest_Flavor >(flavor_);
}
inline void DeviceRegisterRequest::set_flavor(::enterprise_management::DeviceRegisterRequest_Flavor value) {
assert(::enterprise_management::DeviceRegisterRequest_Flavor_IsValid(value));
set_has_flavor();
flavor_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.flavor)
}

// optional .enterprise_management.LicenseType license_type = 9;
inline bool DeviceRegisterRequest::has_license_type() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceRegisterRequest::set_has_license_type() {
_has_bits_[0] |= 0x00000020u;
}
inline void DeviceRegisterRequest::clear_has_license_type() {
_has_bits_[0] &= ~0x00000020u;
}
inline void DeviceRegisterRequest::clear_license_type() {
if (license_type_ != NULL) license_type_->::enterprise_management::LicenseType::Clear();
clear_has_license_type();
}
inline const ::enterprise_management::LicenseType& DeviceRegisterRequest::license_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.license_type)
return license_type_ != NULL ? *license_type_
: *::enterprise_management::LicenseType::internal_default_instance();
}
inline ::enterprise_management::LicenseType* DeviceRegisterRequest::mutable_license_type() {
set_has_license_type();
if (license_type_ == NULL) {
license_type_ = new ::enterprise_management::LicenseType;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.license_type)
return license_type_;
}
inline ::enterprise_management::LicenseType* DeviceRegisterRequest::release_license_type() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.license_type)
clear_has_license_type();
::enterprise_management::LicenseType* temp = license_type_;
license_type_ = NULL;
return temp;
}
inline void DeviceRegisterRequest::set_allocated_license_type(::enterprise_management::LicenseType* license_type) {
delete license_type_;
license_type_ = license_type;
if (license_type) {
set_has_license_type();
} else {
clear_has_license_type();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.license_type)
}

// optional .enterprise_management.DeviceRegisterRequest.Lifetime lifetime = 11 [default = LIFETIME_INDEFINITE];
inline bool DeviceRegisterRequest::has_lifetime() const {
return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeviceRegisterRequest::set_has_lifetime() {
_has_bits_[0] |= 0x00000200u;
}
inline void DeviceRegisterRequest::clear_has_lifetime() {
_has_bits_[0] &= ~0x00000200u;
}
inline void DeviceRegisterRequest::clear_lifetime() {
lifetime_ = 1;
clear_has_lifetime();
}
inline ::enterprise_management::DeviceRegisterRequest_Lifetime DeviceRegisterRequest::lifetime() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.lifetime)
return static_cast< ::enterprise_management::DeviceRegisterRequest_Lifetime >(lifetime_);
}
inline void DeviceRegisterRequest::set_lifetime(::enterprise_management::DeviceRegisterRequest_Lifetime value) {
assert(::enterprise_management::DeviceRegisterRequest_Lifetime_IsValid(value));
set_has_lifetime();
lifetime_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.lifetime)
}

// optional string brand_code = 12;
inline bool DeviceRegisterRequest::has_brand_code() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceRegisterRequest::set_has_brand_code() {
_has_bits_[0] |= 0x00000010u;
}
inline void DeviceRegisterRequest::clear_has_brand_code() {
_has_bits_[0] &= ~0x00000010u;
}
inline void DeviceRegisterRequest::clear_brand_code() {
brand_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_brand_code();
}
inline const ::std::string& DeviceRegisterRequest::brand_code() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.brand_code)
return brand_code_.GetNoArena();
}
inline void DeviceRegisterRequest::set_brand_code(const ::std::string& value) {
set_has_brand_code();
brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.brand_code)
}
#if LANG_CXX11
inline void DeviceRegisterRequest::set_brand_code(::std::string&& value) {
set_has_brand_code();
brand_code_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterRequest.brand_code)
}
#endif
inline void DeviceRegisterRequest::set_brand_code(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_brand_code();
brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.brand_code)
}
inline void DeviceRegisterRequest::set_brand_code(const char* value, size_t size) {
set_has_brand_code();
brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.brand_code)
}
inline ::std::string* DeviceRegisterRequest::mutable_brand_code() {
set_has_brand_code();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.brand_code)
return brand_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRegisterRequest::release_brand_code() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.brand_code)
clear_has_brand_code();
return brand_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRegisterRequest::set_allocated_brand_code(::std::string* brand_code) {
if (brand_code != NULL) {
set_has_brand_code();
} else {
clear_has_brand_code();
}
brand_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand_code);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.brand_code)
}

// -------------------------------------------------------------------

// DeviceRegisterResponse

// required string device_management_token = 1;
inline bool DeviceRegisterResponse::has_device_management_token() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceRegisterResponse::set_has_device_management_token() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceRegisterResponse::clear_has_device_management_token() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceRegisterResponse::clear_device_management_token() {
device_management_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_device_management_token();
}
inline const ::std::string& DeviceRegisterResponse::device_management_token() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.device_management_token)
return device_management_token_.GetNoArena();
}
inline void DeviceRegisterResponse::set_device_management_token(const ::std::string& value) {
set_has_device_management_token();
device_management_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.device_management_token)
}
#if LANG_CXX11
inline void DeviceRegisterResponse::set_device_management_token(::std::string&& value) {
set_has_device_management_token();
device_management_token_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterResponse.device_management_token)
}
#endif
inline void DeviceRegisterResponse::set_device_management_token(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_device_management_token();
device_management_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.device_management_token)
}
inline void DeviceRegisterResponse::set_device_management_token(const char* value, size_t size) {
set_has_device_management_token();
device_management_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.device_management_token)
}
inline ::std::string* DeviceRegisterResponse::mutable_device_management_token() {
set_has_device_management_token();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.device_management_token)
return device_management_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRegisterResponse::release_device_management_token() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterResponse.device_management_token)
clear_has_device_management_token();
return device_management_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRegisterResponse::set_allocated_device_management_token(::std::string* device_management_token) {
if (device_management_token != NULL) {
set_has_device_management_token();
} else {
clear_has_device_management_token();
}
device_management_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_management_token);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterResponse.device_management_token)
}

// optional string machine_name = 2;
inline bool DeviceRegisterResponse::has_machine_name() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceRegisterResponse::set_has_machine_name() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceRegisterResponse::clear_has_machine_name() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceRegisterResponse::clear_machine_name() {
machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_machine_name();
}
inline const ::std::string& DeviceRegisterResponse::machine_name() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.machine_name)
return machine_name_.GetNoArena();
}
inline void DeviceRegisterResponse::set_machine_name(const ::std::string& value) {
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.machine_name)
}
#if LANG_CXX11
inline void DeviceRegisterResponse::set_machine_name(::std::string&& value) {
set_has_machine_name();
machine_name_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterResponse.machine_name)
}
#endif
inline void DeviceRegisterResponse::set_machine_name(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.machine_name)
}
inline void DeviceRegisterResponse::set_machine_name(const char* value, size_t size) {
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.machine_name)
}
inline ::std::string* DeviceRegisterResponse::mutable_machine_name() {
set_has_machine_name();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.machine_name)
return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRegisterResponse::release_machine_name() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterResponse.machine_name)
clear_has_machine_name();
return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRegisterResponse::set_allocated_machine_name(::std::string* machine_name) {
if (machine_name != NULL) {
set_has_machine_name();
} else {
clear_has_machine_name();
}
machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterResponse.machine_name)
}

// optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
inline bool DeviceRegisterResponse::has_enrollment_type() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceRegisterResponse::set_has_enrollment_type() {
_has_bits_[0] |= 0x00000008u;
}
inline void DeviceRegisterResponse::clear_has_enrollment_type() {
_has_bits_[0] &= ~0x00000008u;
}
inline void DeviceRegisterResponse::clear_enrollment_type() {
enrollment_type_ = 0;
clear_has_enrollment_type();
}
inline ::enterprise_management::DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::enrollment_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.enrollment_type)
return static_cast< ::enterprise_management::DeviceRegisterResponse_DeviceMode >(enrollment_type_);
}
inline void DeviceRegisterResponse::set_enrollment_type(::enterprise_management::DeviceRegisterResponse_DeviceMode value) {
assert(::enterprise_management::DeviceRegisterResponse_DeviceMode_IsValid(value));
set_has_enrollment_type();
enrollment_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.enrollment_type)
}

// optional string configuration_seed = 4;
inline bool DeviceRegisterResponse::has_configuration_seed() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceRegisterResponse::set_has_configuration_seed() {
_has_bits_[0] |= 0x00000004u;
}
inline void DeviceRegisterResponse::clear_has_configuration_seed() {
_has_bits_[0] &= ~0x00000004u;
}
inline void DeviceRegisterResponse::clear_configuration_seed() {
configuration_seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_configuration_seed();
}
inline const ::std::string& DeviceRegisterResponse::configuration_seed() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.configuration_seed)
return configuration_seed_.GetNoArena();
}
inline void DeviceRegisterResponse::set_configuration_seed(const ::std::string& value) {
set_has_configuration_seed();
configuration_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
#if LANG_CXX11
inline void DeviceRegisterResponse::set_configuration_seed(::std::string&& value) {
set_has_configuration_seed();
configuration_seed_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
#endif
inline void DeviceRegisterResponse::set_configuration_seed(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_configuration_seed();
configuration_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
inline void DeviceRegisterResponse::set_configuration_seed(const char* value, size_t size) {
set_has_configuration_seed();
configuration_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
inline ::std::string* DeviceRegisterResponse::mutable_configuration_seed() {
set_has_configuration_seed();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.configuration_seed)
return configuration_seed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRegisterResponse::release_configuration_seed() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterResponse.configuration_seed)
clear_has_configuration_seed();
return configuration_seed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRegisterResponse::set_allocated_configuration_seed(::std::string* configuration_seed) {
if (configuration_seed != NULL) {
set_has_configuration_seed();
} else {
clear_has_configuration_seed();
}
configuration_seed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configuration_seed);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterResponse.configuration_seed)
}

// repeated string user_affiliation_ids = 5;
inline int DeviceRegisterResponse::user_affiliation_ids_size() const {
return user_affiliation_ids_.size();
}
inline void DeviceRegisterResponse::clear_user_affiliation_ids() {
user_affiliation_ids_.Clear();
}
inline const ::std::string& DeviceRegisterResponse::user_affiliation_ids(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
return user_affiliation_ids_.Get(index);
}
inline ::std::string* DeviceRegisterResponse::mutable_user_affiliation_ids(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
return user_affiliation_ids_.Mutable(index);
}
inline void DeviceRegisterResponse::set_user_affiliation_ids(int index, const ::std::string& value) {
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
user_affiliation_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeviceRegisterResponse::set_user_affiliation_ids(int index, ::std::string&& value) {
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
user_affiliation_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeviceRegisterResponse::set_user_affiliation_ids(int index, const char* value) {
GOOGLE_DCHECK(value != NULL);
user_affiliation_ids_.Mutable(index)->assign(value);
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
inline void DeviceRegisterResponse::set_user_affiliation_ids(int index, const char* value, size_t size) {
user_affiliation_ids_.Mutable(index)->assign(
reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
inline ::std::string* DeviceRegisterResponse::add_user_affiliation_ids() {
// @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
return user_affiliation_ids_.Add();
}
inline void DeviceRegisterResponse::add_user_affiliation_ids(const ::std::string& value) {
user_affiliation_ids_.Add()->assign(value);
// @@protoc_insertion_point(field_add:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
#if LANG_CXX11
inline void DeviceRegisterResponse::add_user_affiliation_ids(::std::string&& value) {
user_affiliation_ids_.Add(std::move(value));
// @@protoc_insertion_point(field_add:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
#endif
inline void DeviceRegisterResponse::add_user_affiliation_ids(const char* value) {
GOOGLE_DCHECK(value != NULL);
user_affiliation_ids_.Add()->assign(value);
// @@protoc_insertion_point(field_add_char:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
inline void DeviceRegisterResponse::add_user_affiliation_ids(const char* value, size_t size) {
user_affiliation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceRegisterResponse::user_affiliation_ids() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
return user_affiliation_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceRegisterResponse::mutable_user_affiliation_ids() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
return &user_affiliation_ids_;
}

// -------------------------------------------------------------------

// DeviceUnregisterRequest

// -------------------------------------------------------------------

// DeviceUnregisterResponse

// -------------------------------------------------------------------

// DeviceCertUploadRequest

// optional bytes device_certificate = 1;
inline bool DeviceCertUploadRequest::has_device_certificate() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceCertUploadRequest::set_has_device_certificate() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceCertUploadRequest::clear_has_device_certificate() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceCertUploadRequest::clear_device_certificate() {
device_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_device_certificate();
}
inline const ::std::string& DeviceCertUploadRequest::device_certificate() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceCertUploadRequest.device_certificate)
return device_certificate_.GetNoArena();
}
inline void DeviceCertUploadRequest::set_device_certificate(const ::std::string& value) {
set_has_device_certificate();
device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
#if LANG_CXX11
inline void DeviceCertUploadRequest::set_device_certificate(::std::string&& value) {
set_has_device_certificate();
device_certificate_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
#endif
inline void DeviceCertUploadRequest::set_device_certificate(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_device_certificate();
device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
inline void DeviceCertUploadRequest::set_device_certificate(const void* value, size_t size) {
set_has_device_certificate();
device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
inline ::std::string* DeviceCertUploadRequest::mutable_device_certificate() {
set_has_device_certificate();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceCertUploadRequest.device_certificate)
return device_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceCertUploadRequest::release_device_certificate() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceCertUploadRequest.device_certificate)
clear_has_device_certificate();
return device_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceCertUploadRequest::set_allocated_device_certificate(::std::string* device_certificate) {
if (device_certificate != NULL) {
set_has_device_certificate();
} else {
clear_has_device_certificate();
}
device_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_certificate);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceCertUploadRequest.device_certificate)
}

// optional .enterprise_management.DeviceCertUploadRequest.CertificateType certificate_type = 2;
inline bool DeviceCertUploadRequest::has_certificate_type() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceCertUploadRequest::set_has_certificate_type() {
_has_bits_[0] |= 0x00000004u;
}
inline void DeviceCertUploadRequest::clear_has_certificate_type() {
_has_bits_[0] &= ~0x00000004u;
}
inline void DeviceCertUploadRequest::clear_certificate_type() {
certificate_type_ = 0;
clear_has_certificate_type();
}
inline ::enterprise_management::DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::certificate_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceCertUploadRequest.certificate_type)
return static_cast< ::enterprise_management::DeviceCertUploadRequest_CertificateType >(certificate_type_);
}
inline void DeviceCertUploadRequest::set_certificate_type(::enterprise_management::DeviceCertUploadRequest_CertificateType value) {
assert(::enterprise_management::DeviceCertUploadRequest_CertificateType_IsValid(value));
set_has_certificate_type();
certificate_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceCertUploadRequest.certificate_type)
}

// optional string enrollment_id = 3;
inline bool DeviceCertUploadRequest::has_enrollment_id() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceCertUploadRequest::set_has_enrollment_id() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceCertUploadRequest::clear_has_enrollment_id() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceCertUploadRequest::clear_enrollment_id() {
enrollment_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_enrollment_id();
}
inline const ::std::string& DeviceCertUploadRequest::enrollment_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceCertUploadRequest.enrollment_id)
return enrollment_id_.GetNoArena();
}
inline void DeviceCertUploadRequest::set_enrollment_id(const ::std::string& value) {
set_has_enrollment_id();
enrollment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceCertUploadRequest.enrollment_id)
}
#if LANG_CXX11
inline void DeviceCertUploadRequest::set_enrollment_id(::std::string&& value) {
set_has_enrollment_id();
enrollment_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceCertUploadRequest.enrollment_id)
}
#endif
inline void DeviceCertUploadRequest::set_enrollment_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_enrollment_id();
enrollment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceCertUploadRequest.enrollment_id)
}
inline void DeviceCertUploadRequest::set_enrollment_id(const char* value, size_t size) {
set_has_enrollment_id();
enrollment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceCertUploadRequest.enrollment_id)
}
inline ::std::string* DeviceCertUploadRequest::mutable_enrollment_id() {
set_has_enrollment_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceCertUploadRequest.enrollment_id)
return enrollment_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceCertUploadRequest::release_enrollment_id() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceCertUploadRequest.enrollment_id)
clear_has_enrollment_id();
return enrollment_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceCertUploadRequest::set_allocated_enrollment_id(::std::string* enrollment_id) {
if (enrollment_id != NULL) {
set_has_enrollment_id();
} else {
clear_has_enrollment_id();
}
enrollment_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enrollment_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceCertUploadRequest.enrollment_id)
}

// -------------------------------------------------------------------

// DeviceCertUploadResponse

// -------------------------------------------------------------------

// DeviceServiceApiAccessRequest

// repeated string auth_scope = 1;
inline int DeviceServiceApiAccessRequest::auth_scope_size() const {
return auth_scope_.size();
}
inline void DeviceServiceApiAccessRequest::clear_auth_scope() {
auth_scope_.Clear();
}
inline const ::std::string& DeviceServiceApiAccessRequest::auth_scope(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
return auth_scope_.Get(index);
}
inline ::std::string* DeviceServiceApiAccessRequest::mutable_auth_scope(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
return auth_scope_.Mutable(index);
}
inline void DeviceServiceApiAccessRequest::set_auth_scope(int index, const ::std::string& value) {
// @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
auth_scope_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeviceServiceApiAccessRequest::set_auth_scope(int index, ::std::string&& value) {
// @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
auth_scope_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeviceServiceApiAccessRequest::set_auth_scope(int index, const char* value) {
GOOGLE_DCHECK(value != NULL);
auth_scope_.Mutable(index)->assign(value);
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
inline void DeviceServiceApiAccessRequest::set_auth_scope(int index, const char* value, size_t size) {
auth_scope_.Mutable(index)->assign(
reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
inline ::std::string* DeviceServiceApiAccessRequest::add_auth_scope() {
// @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
return auth_scope_.Add();
}
inline void DeviceServiceApiAccessRequest::add_auth_scope(const ::std::string& value) {
auth_scope_.Add()->assign(value);
// @@protoc_insertion_point(field_add:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
#if LANG_CXX11
inline void DeviceServiceApiAccessRequest::add_auth_scope(::std::string&& value) {
auth_scope_.Add(std::move(value));
// @@protoc_insertion_point(field_add:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
#endif
inline void DeviceServiceApiAccessRequest::add_auth_scope(const char* value) {
GOOGLE_DCHECK(value != NULL);
auth_scope_.Add()->assign(value);
// @@protoc_insertion_point(field_add_char:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
inline void DeviceServiceApiAccessRequest::add_auth_scope(const char* value, size_t size) {
auth_scope_.Add()->assign(reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceServiceApiAccessRequest::auth_scope() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
return auth_scope_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceServiceApiAccessRequest::mutable_auth_scope() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
return &auth_scope_;
}

// optional string oauth2_client_id = 2;
inline bool DeviceServiceApiAccessRequest::has_oauth2_client_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceServiceApiAccessRequest::set_has_oauth2_client_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceServiceApiAccessRequest::clear_has_oauth2_client_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceServiceApiAccessRequest::clear_oauth2_client_id() {
oauth2_client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_oauth2_client_id();
}
inline const ::std::string& DeviceServiceApiAccessRequest::oauth2_client_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
return oauth2_client_id_.GetNoArena();
}
inline void DeviceServiceApiAccessRequest::set_oauth2_client_id(const ::std::string& value) {
set_has_oauth2_client_id();
oauth2_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
#if LANG_CXX11
inline void DeviceServiceApiAccessRequest::set_oauth2_client_id(::std::string&& value) {
set_has_oauth2_client_id();
oauth2_client_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
#endif
inline void DeviceServiceApiAccessRequest::set_oauth2_client_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_oauth2_client_id();
oauth2_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
inline void DeviceServiceApiAccessRequest::set_oauth2_client_id(const char* value, size_t size) {
set_has_oauth2_client_id();
oauth2_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
inline ::std::string* DeviceServiceApiAccessRequest::mutable_oauth2_client_id() {
set_has_oauth2_client_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
return oauth2_client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceServiceApiAccessRequest::release_oauth2_client_id() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
clear_has_oauth2_client_id();
return oauth2_client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceServiceApiAccessRequest::set_allocated_oauth2_client_id(::std::string* oauth2_client_id) {
if (oauth2_client_id != NULL) {
set_has_oauth2_client_id();
} else {
clear_has_oauth2_client_id();
}
oauth2_client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth2_client_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}

// optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
inline bool DeviceServiceApiAccessRequest::has_device_type() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceServiceApiAccessRequest::set_has_device_type() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceServiceApiAccessRequest::clear_has_device_type() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceServiceApiAccessRequest::clear_device_type() {
device_type_ = 0;
clear_has_device_type();
}
inline ::enterprise_management::DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::device_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessRequest.device_type)
return static_cast< ::enterprise_management::DeviceServiceApiAccessRequest_DeviceType >(device_type_);
}
inline void DeviceServiceApiAccessRequest::set_device_type(::enterprise_management::DeviceServiceApiAccessRequest_DeviceType value) {
assert(::enterprise_management::DeviceServiceApiAccessRequest_DeviceType_IsValid(value));
set_has_device_type();
device_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.device_type)
}

// -------------------------------------------------------------------

// DeviceServiceApiAccessResponse

// optional string auth_code = 1;
inline bool DeviceServiceApiAccessResponse::has_auth_code() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceServiceApiAccessResponse::set_has_auth_code() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceServiceApiAccessResponse::clear_has_auth_code() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceServiceApiAccessResponse::clear_auth_code() {
auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_auth_code();
}
inline const ::std::string& DeviceServiceApiAccessResponse::auth_code() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
return auth_code_.GetNoArena();
}
inline void DeviceServiceApiAccessResponse::set_auth_code(const ::std::string& value) {
set_has_auth_code();
auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
#if LANG_CXX11
inline void DeviceServiceApiAccessResponse::set_auth_code(::std::string&& value) {
set_has_auth_code();
auth_code_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
#endif
inline void DeviceServiceApiAccessResponse::set_auth_code(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_auth_code();
auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
inline void DeviceServiceApiAccessResponse::set_auth_code(const char* value, size_t size) {
set_has_auth_code();
auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
inline ::std::string* DeviceServiceApiAccessResponse::mutable_auth_code() {
set_has_auth_code();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceServiceApiAccessResponse::release_auth_code() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
clear_has_auth_code();
return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceServiceApiAccessResponse::set_allocated_auth_code(::std::string* auth_code) {
if (auth_code != NULL) {
set_has_auth_code();
} else {
clear_has_auth_code();
}
auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}

// -------------------------------------------------------------------

// PolicyFetchRequest

// optional string policy_type = 1;
inline bool PolicyFetchRequest::has_policy_type() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicyFetchRequest::set_has_policy_type() {
_has_bits_[0] |= 0x00000001u;
}
inline void PolicyFetchRequest::clear_has_policy_type() {
_has_bits_[0] &= ~0x00000001u;
}
inline void PolicyFetchRequest::clear_policy_type() {
policy_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_type();
}
inline const ::std::string& PolicyFetchRequest::policy_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.policy_type)
return policy_type_.GetNoArena();
}
inline void PolicyFetchRequest::set_policy_type(const ::std::string& value) {
set_has_policy_type();
policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.policy_type)
}
#if LANG_CXX11
inline void PolicyFetchRequest::set_policy_type(::std::string&& value) {
set_has_policy_type();
policy_type_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.policy_type)
}
#endif
inline void PolicyFetchRequest::set_policy_type(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_type();
policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.policy_type)
}
inline void PolicyFetchRequest::set_policy_type(const char* value, size_t size) {
set_has_policy_type();
policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.policy_type)
}
inline ::std::string* PolicyFetchRequest::mutable_policy_type() {
set_has_policy_type();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.policy_type)
return policy_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchRequest::release_policy_type() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.policy_type)
clear_has_policy_type();
return policy_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchRequest::set_allocated_policy_type(::std::string* policy_type) {
if (policy_type != NULL) {
set_has_policy_type();
} else {
clear_has_policy_type();
}
policy_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_type);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.policy_type)
}

// optional int64 timestamp = 2;
inline bool PolicyFetchRequest::has_timestamp() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PolicyFetchRequest::set_has_timestamp() {
_has_bits_[0] |= 0x00000040u;
}
inline void PolicyFetchRequest::clear_has_timestamp() {
_has_bits_[0] &= ~0x00000040u;
}
inline void PolicyFetchRequest::clear_timestamp() {
timestamp_ = GOOGLE_LONGLONG(0);
clear_has_timestamp();
}
inline ::google::protobuf::int64 PolicyFetchRequest::timestamp() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.timestamp)
return timestamp_;
}
inline void PolicyFetchRequest::set_timestamp(::google::protobuf::int64 value) {
set_has_timestamp();
timestamp_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.timestamp)
}

// optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
inline bool PolicyFetchRequest::has_signature_type() const {
return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PolicyFetchRequest::set_has_signature_type() {
_has_bits_[0] |= 0x00000080u;
}
inline void PolicyFetchRequest::clear_has_signature_type() {
_has_bits_[0] &= ~0x00000080u;
}
inline void PolicyFetchRequest::clear_signature_type() {
signature_type_ = 0;
clear_has_signature_type();
}
inline ::enterprise_management::PolicyFetchRequest_SignatureType PolicyFetchRequest::signature_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.signature_type)
return static_cast< ::enterprise_management::PolicyFetchRequest_SignatureType >(signature_type_);
}
inline void PolicyFetchRequest::set_signature_type(::enterprise_management::PolicyFetchRequest_SignatureType value) {
assert(::enterprise_management::PolicyFetchRequest_SignatureType_IsValid(value));
set_has_signature_type();
signature_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.signature_type)
}

// optional int32 public_key_version = 4;
inline bool PolicyFetchRequest::has_public_key_version() const {
return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PolicyFetchRequest::set_has_public_key_version() {
_has_bits_[0] |= 0x00000100u;
}
inline void PolicyFetchRequest::clear_has_public_key_version() {
_has_bits_[0] &= ~0x00000100u;
}
inline void PolicyFetchRequest::clear_public_key_version() {
public_key_version_ = 0;
clear_has_public_key_version();
}
inline ::google::protobuf::int32 PolicyFetchRequest::public_key_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.public_key_version)
return public_key_version_;
}
inline void PolicyFetchRequest::set_public_key_version(::google::protobuf::int32 value) {
set_has_public_key_version();
public_key_version_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.public_key_version)
}

// optional string settings_entity_id = 6;
inline bool PolicyFetchRequest::has_settings_entity_id() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyFetchRequest::set_has_settings_entity_id() {
_has_bits_[0] |= 0x00000002u;
}
inline void PolicyFetchRequest::clear_has_settings_entity_id() {
_has_bits_[0] &= ~0x00000002u;
}
inline void PolicyFetchRequest::clear_settings_entity_id() {
settings_entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_settings_entity_id();
}
inline const ::std::string& PolicyFetchRequest::settings_entity_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.settings_entity_id)
return settings_entity_id_.GetNoArena();
}
inline void PolicyFetchRequest::set_settings_entity_id(const ::std::string& value) {
set_has_settings_entity_id();
settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
#if LANG_CXX11
inline void PolicyFetchRequest::set_settings_entity_id(::std::string&& value) {
set_has_settings_entity_id();
settings_entity_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
#endif
inline void PolicyFetchRequest::set_settings_entity_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_settings_entity_id();
settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
inline void PolicyFetchRequest::set_settings_entity_id(const char* value, size_t size) {
set_has_settings_entity_id();
settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
inline ::std::string* PolicyFetchRequest::mutable_settings_entity_id() {
set_has_settings_entity_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.settings_entity_id)
return settings_entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchRequest::release_settings_entity_id() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.settings_entity_id)
clear_has_settings_entity_id();
return settings_entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchRequest::set_allocated_settings_entity_id(::std::string* settings_entity_id) {
if (settings_entity_id != NULL) {
set_has_settings_entity_id();
} else {
clear_has_settings_entity_id();
}
settings_entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settings_entity_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.settings_entity_id)
}

// optional int64 invalidation_version = 7;
inline bool PolicyFetchRequest::has_invalidation_version() const {
return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PolicyFetchRequest::set_has_invalidation_version() {
_has_bits_[0] |= 0x00000200u;
}
inline void PolicyFetchRequest::clear_has_invalidation_version() {
_has_bits_[0] &= ~0x00000200u;
}
inline void PolicyFetchRequest::clear_invalidation_version() {
invalidation_version_ = GOOGLE_LONGLONG(0);
clear_has_invalidation_version();
}
inline ::google::protobuf::int64 PolicyFetchRequest::invalidation_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.invalidation_version)
return invalidation_version_;
}
inline void PolicyFetchRequest::set_invalidation_version(::google::protobuf::int64 value) {
set_has_invalidation_version();
invalidation_version_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.invalidation_version)
}

// optional bytes invalidation_payload = 8;
inline bool PolicyFetchRequest::has_invalidation_payload() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicyFetchRequest::set_has_invalidation_payload() {
_has_bits_[0] |= 0x00000004u;
}
inline void PolicyFetchRequest::clear_has_invalidation_payload() {
_has_bits_[0] &= ~0x00000004u;
}
inline void PolicyFetchRequest::clear_invalidation_payload() {
invalidation_payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_invalidation_payload();
}
inline const ::std::string& PolicyFetchRequest::invalidation_payload() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.invalidation_payload)
return invalidation_payload_.GetNoArena();
}
inline void PolicyFetchRequest::set_invalidation_payload(const ::std::string& value) {
set_has_invalidation_payload();
invalidation_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
#if LANG_CXX11
inline void PolicyFetchRequest::set_invalidation_payload(::std::string&& value) {
set_has_invalidation_payload();
invalidation_payload_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
#endif
inline void PolicyFetchRequest::set_invalidation_payload(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_invalidation_payload();
invalidation_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
inline void PolicyFetchRequest::set_invalidation_payload(const void* value, size_t size) {
set_has_invalidation_payload();
invalidation_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
inline ::std::string* PolicyFetchRequest::mutable_invalidation_payload() {
set_has_invalidation_payload();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.invalidation_payload)
return invalidation_payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchRequest::release_invalidation_payload() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.invalidation_payload)
clear_has_invalidation_payload();
return invalidation_payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchRequest::set_allocated_invalidation_payload(::std::string* invalidation_payload) {
if (invalidation_payload != NULL) {
set_has_invalidation_payload();
} else {
clear_has_invalidation_payload();
}
invalidation_payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invalidation_payload);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.invalidation_payload)
}

// optional string verification_key_hash = 9;
inline bool PolicyFetchRequest::has_verification_key_hash() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PolicyFetchRequest::set_has_verification_key_hash() {
_has_bits_[0] |= 0x00000008u;
}
inline void PolicyFetchRequest::clear_has_verification_key_hash() {
_has_bits_[0] &= ~0x00000008u;
}
inline void PolicyFetchRequest::clear_verification_key_hash() {
verification_key_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_verification_key_hash();
}
inline const ::std::string& PolicyFetchRequest::verification_key_hash() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.verification_key_hash)
return verification_key_hash_.GetNoArena();
}
inline void PolicyFetchRequest::set_verification_key_hash(const ::std::string& value) {
set_has_verification_key_hash();
verification_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
#if LANG_CXX11
inline void PolicyFetchRequest::set_verification_key_hash(::std::string&& value) {
set_has_verification_key_hash();
verification_key_hash_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
#endif
inline void PolicyFetchRequest::set_verification_key_hash(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_verification_key_hash();
verification_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
inline void PolicyFetchRequest::set_verification_key_hash(const char* value, size_t size) {
set_has_verification_key_hash();
verification_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
inline ::std::string* PolicyFetchRequest::mutable_verification_key_hash() {
set_has_verification_key_hash();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.verification_key_hash)
return verification_key_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchRequest::release_verification_key_hash() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.verification_key_hash)
clear_has_verification_key_hash();
return verification_key_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchRequest::set_allocated_verification_key_hash(::std::string* verification_key_hash) {
if (verification_key_hash != NULL) {
set_has_verification_key_hash();
} else {
clear_has_verification_key_hash();
}
verification_key_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verification_key_hash);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.verification_key_hash)
}

// optional string policy_invalidation_info = 10;
inline bool PolicyFetchRequest::has_policy_invalidation_info() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PolicyFetchRequest::set_has_policy_invalidation_info() {
_has_bits_[0] |= 0x00000010u;
}
inline void PolicyFetchRequest::clear_has_policy_invalidation_info() {
_has_bits_[0] &= ~0x00000010u;
}
inline void PolicyFetchRequest::clear_policy_invalidation_info() {
policy_invalidation_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_invalidation_info();
}
inline const ::std::string& PolicyFetchRequest::policy_invalidation_info() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
return policy_invalidation_info_.GetNoArena();
}
inline void PolicyFetchRequest::set_policy_invalidation_info(const ::std::string& value) {
set_has_policy_invalidation_info();
policy_invalidation_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
}
#if LANG_CXX11
inline void PolicyFetchRequest::set_policy_invalidation_info(::std::string&& value) {
set_has_policy_invalidation_info();
policy_invalidation_info_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
}
#endif
inline void PolicyFetchRequest::set_policy_invalidation_info(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_invalidation_info();
policy_invalidation_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
}
inline void PolicyFetchRequest::set_policy_invalidation_info(const char* value, size_t size) {
set_has_policy_invalidation_info();
policy_invalidation_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
}
inline ::std::string* PolicyFetchRequest::mutable_policy_invalidation_info() {
set_has_policy_invalidation_info();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
return policy_invalidation_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchRequest::release_policy_invalidation_info() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
clear_has_policy_invalidation_info();
return policy_invalidation_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchRequest::set_allocated_policy_invalidation_info(::std::string* policy_invalidation_info) {
if (policy_invalidation_info != NULL) {
set_has_policy_invalidation_info();
} else {
clear_has_policy_invalidation_info();
}
policy_invalidation_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_invalidation_info);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
}

// optional bool invalidation_topics_only = 11;
inline bool PolicyFetchRequest::has_invalidation_topics_only() const {
return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PolicyFetchRequest::set_has_invalidation_topics_only() {
_has_bits_[0] |= 0x00000400u;
}
inline void PolicyFetchRequest::clear_has_invalidation_topics_only() {
_has_bits_[0] &= ~0x00000400u;
}
inline void PolicyFetchRequest::clear_invalidation_topics_only() {
invalidation_topics_only_ = false;
clear_has_invalidation_topics_only();
}
inline bool PolicyFetchRequest::invalidation_topics_only() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.invalidation_topics_only)
return invalidation_topics_only_;
}
inline void PolicyFetchRequest::set_invalidation_topics_only(bool value) {
set_has_invalidation_topics_only();
invalidation_topics_only_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.invalidation_topics_only)
}

// optional string device_dm_token = 12;
inline bool PolicyFetchRequest::has_device_dm_token() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PolicyFetchRequest::set_has_device_dm_token() {
_has_bits_[0] |= 0x00000020u;
}
inline void PolicyFetchRequest::clear_has_device_dm_token() {
_has_bits_[0] &= ~0x00000020u;
}
inline void PolicyFetchRequest::clear_device_dm_token() {
device_dm_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_device_dm_token();
}
inline const ::std::string& PolicyFetchRequest::device_dm_token() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.device_dm_token)
return device_dm_token_.GetNoArena();
}
inline void PolicyFetchRequest::set_device_dm_token(const ::std::string& value) {
set_has_device_dm_token();
device_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.device_dm_token)
}
#if LANG_CXX11
inline void PolicyFetchRequest::set_device_dm_token(::std::string&& value) {
set_has_device_dm_token();
device_dm_token_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.device_dm_token)
}
#endif
inline void PolicyFetchRequest::set_device_dm_token(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_device_dm_token();
device_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.device_dm_token)
}
inline void PolicyFetchRequest::set_device_dm_token(const char* value, size_t size) {
set_has_device_dm_token();
device_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.device_dm_token)
}
inline ::std::string* PolicyFetchRequest::mutable_device_dm_token() {
set_has_device_dm_token();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.device_dm_token)
return device_dm_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchRequest::release_device_dm_token() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.device_dm_token)
clear_has_device_dm_token();
return device_dm_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchRequest::set_allocated_device_dm_token(::std::string* device_dm_token) {
if (device_dm_token != NULL) {
set_has_device_dm_token();
} else {
clear_has_device_dm_token();
}
device_dm_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_dm_token);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.device_dm_token)
}

// -------------------------------------------------------------------

// DisabledState

// optional string message = 1;
inline bool DisabledState::has_message() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisabledState::set_has_message() {
_has_bits_[0] |= 0x00000001u;
}
inline void DisabledState::clear_has_message() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DisabledState::clear_message() {
message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_message();
}
inline const ::std::string& DisabledState::message() const {
// @@protoc_insertion_point(field_get:enterprise_management.DisabledState.message)
return message_.GetNoArena();
}
inline void DisabledState::set_message(const ::std::string& value) {
set_has_message();
message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DisabledState.message)
}
#if LANG_CXX11
inline void DisabledState::set_message(::std::string&& value) {
set_has_message();
message_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DisabledState.message)
}
#endif
inline void DisabledState::set_message(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_message();
message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DisabledState.message)
}
inline void DisabledState::set_message(const char* value, size_t size) {
set_has_message();
message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DisabledState.message)
}
inline ::std::string* DisabledState::mutable_message() {
set_has_message();
// @@protoc_insertion_point(field_mutable:enterprise_management.DisabledState.message)
return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisabledState::release_message() {
// @@protoc_insertion_point(field_release:enterprise_management.DisabledState.message)
clear_has_message();
return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisabledState::set_allocated_message(::std::string* message) {
if (message != NULL) {
set_has_message();
} else {
clear_has_message();
}
message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DisabledState.message)
}

// -------------------------------------------------------------------

// DeviceState

// optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
inline bool DeviceState::has_device_mode() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceState::set_has_device_mode() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceState::clear_has_device_mode() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceState::clear_device_mode() {
device_mode_ = 0;
clear_has_device_mode();
}
inline ::enterprise_management::DeviceState_DeviceMode DeviceState::device_mode() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceState.device_mode)
return static_cast< ::enterprise_management::DeviceState_DeviceMode >(device_mode_);
}
inline void DeviceState::set_device_mode(::enterprise_management::DeviceState_DeviceMode value) {
assert(::enterprise_management::DeviceState_DeviceMode_IsValid(value));
set_has_device_mode();
device_mode_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceState.device_mode)
}

// optional .enterprise_management.DisabledState disabled_state = 2;
inline bool DeviceState::has_disabled_state() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceState::set_has_disabled_state() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceState::clear_has_disabled_state() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceState::clear_disabled_state() {
if (disabled_state_ != NULL) disabled_state_->::enterprise_management::DisabledState::Clear();
clear_has_disabled_state();
}
inline const ::enterprise_management::DisabledState& DeviceState::disabled_state() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceState.disabled_state)
return disabled_state_ != NULL ? *disabled_state_
: *::enterprise_management::DisabledState::internal_default_instance();
}
inline ::enterprise_management::DisabledState* DeviceState::mutable_disabled_state() {
set_has_disabled_state();
if (disabled_state_ == NULL) {
disabled_state_ = new ::enterprise_management::DisabledState;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceState.disabled_state)
return disabled_state_;
}
inline ::enterprise_management::DisabledState* DeviceState::release_disabled_state() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceState.disabled_state)
clear_has_disabled_state();
::enterprise_management::DisabledState* temp = disabled_state_;
disabled_state_ = NULL;
return temp;
}
inline void DeviceState::set_allocated_disabled_state(::enterprise_management::DisabledState* disabled_state) {
delete disabled_state_;
disabled_state_ = disabled_state;
if (disabled_state) {
set_has_disabled_state();
} else {
clear_has_disabled_state();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceState.disabled_state)
}

// -------------------------------------------------------------------

// PolicyData

// optional string policy_type = 1;
inline bool PolicyData::has_policy_type() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicyData::set_has_policy_type() {
_has_bits_[0] |= 0x00000001u;
}
inline void PolicyData::clear_has_policy_type() {
_has_bits_[0] &= ~0x00000001u;
}
inline void PolicyData::clear_policy_type() {
policy_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_type();
}
inline const ::std::string& PolicyData::policy_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_type)
return policy_type_.GetNoArena();
}
inline void PolicyData::set_policy_type(const ::std::string& value) {
set_has_policy_type();
policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_type)
}
#if LANG_CXX11
inline void PolicyData::set_policy_type(::std::string&& value) {
set_has_policy_type();
policy_type_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.policy_type)
}
#endif
inline void PolicyData::set_policy_type(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_type();
policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_type)
}
inline void PolicyData::set_policy_type(const char* value, size_t size) {
set_has_policy_type();
policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_type)
}
inline ::std::string* PolicyData::mutable_policy_type() {
set_has_policy_type();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_type)
return policy_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_policy_type() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_type)
clear_has_policy_type();
return policy_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_policy_type(::std::string* policy_type) {
if (policy_type != NULL) {
set_has_policy_type();
} else {
clear_has_policy_type();
}
policy_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_type);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_type)
}

// optional int64 timestamp = 2;
inline bool PolicyData::has_timestamp() const {
return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PolicyData::set_has_timestamp() {
_has_bits_[0] |= 0x00080000u;
}
inline void PolicyData::clear_has_timestamp() {
_has_bits_[0] &= ~0x00080000u;
}
inline void PolicyData::clear_timestamp() {
timestamp_ = GOOGLE_LONGLONG(0);
clear_has_timestamp();
}
inline ::google::protobuf::int64 PolicyData::timestamp() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.timestamp)
return timestamp_;
}
inline void PolicyData::set_timestamp(::google::protobuf::int64 value) {
set_has_timestamp();
timestamp_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.timestamp)
}

// optional string request_token = 3;
inline bool PolicyData::has_request_token() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyData::set_has_request_token() {
_has_bits_[0] |= 0x00000002u;
}
inline void PolicyData::clear_has_request_token() {
_has_bits_[0] &= ~0x00000002u;
}
inline void PolicyData::clear_request_token() {
request_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_request_token();
}
inline const ::std::string& PolicyData::request_token() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.request_token)
return request_token_.GetNoArena();
}
inline void PolicyData::set_request_token(const ::std::string& value) {
set_has_request_token();
request_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.request_token)
}
#if LANG_CXX11
inline void PolicyData::set_request_token(::std::string&& value) {
set_has_request_token();
request_token_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.request_token)
}
#endif
inline void PolicyData::set_request_token(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_request_token();
request_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.request_token)
}
inline void PolicyData::set_request_token(const char* value, size_t size) {
set_has_request_token();
request_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.request_token)
}
inline ::std::string* PolicyData::mutable_request_token() {
set_has_request_token();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.request_token)
return request_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_request_token() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.request_token)
clear_has_request_token();
return request_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_request_token(::std::string* request_token) {
if (request_token != NULL) {
set_has_request_token();
} else {
clear_has_request_token();
}
request_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_token);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.request_token)
}

// optional bytes policy_value = 4;
inline bool PolicyData::has_policy_value() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicyData::set_has_policy_value() {
_has_bits_[0] |= 0x00000004u;
}
inline void PolicyData::clear_has_policy_value() {
_has_bits_[0] &= ~0x00000004u;
}
inline void PolicyData::clear_policy_value() {
policy_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_value();
}
inline const ::std::string& PolicyData::policy_value() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_value)
return policy_value_.GetNoArena();
}
inline void PolicyData::set_policy_value(const ::std::string& value) {
set_has_policy_value();
policy_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_value)
}
#if LANG_CXX11
inline void PolicyData::set_policy_value(::std::string&& value) {
set_has_policy_value();
policy_value_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.policy_value)
}
#endif
inline void PolicyData::set_policy_value(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_value();
policy_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_value)
}
inline void PolicyData::set_policy_value(const void* value, size_t size) {
set_has_policy_value();
policy_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_value)
}
inline ::std::string* PolicyData::mutable_policy_value() {
set_has_policy_value();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_value)
return policy_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_policy_value() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_value)
clear_has_policy_value();
return policy_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_policy_value(::std::string* policy_value) {
if (policy_value != NULL) {
set_has_policy_value();
} else {
clear_has_policy_value();
}
policy_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_value);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_value)
}

// optional string machine_name = 5;
inline bool PolicyData::has_machine_name() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PolicyData::set_has_machine_name() {
_has_bits_[0] |= 0x00000008u;
}
inline void PolicyData::clear_has_machine_name() {
_has_bits_[0] &= ~0x00000008u;
}
inline void PolicyData::clear_machine_name() {
machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_machine_name();
}
inline const ::std::string& PolicyData::machine_name() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.machine_name)
return machine_name_.GetNoArena();
}
inline void PolicyData::set_machine_name(const ::std::string& value) {
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.machine_name)
}
#if LANG_CXX11
inline void PolicyData::set_machine_name(::std::string&& value) {
set_has_machine_name();
machine_name_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.machine_name)
}
#endif
inline void PolicyData::set_machine_name(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.machine_name)
}
inline void PolicyData::set_machine_name(const char* value, size_t size) {
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.machine_name)
}
inline ::std::string* PolicyData::mutable_machine_name() {
set_has_machine_name();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.machine_name)
return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_machine_name() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.machine_name)
clear_has_machine_name();
return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_machine_name(::std::string* machine_name) {
if (machine_name != NULL) {
set_has_machine_name();
} else {
clear_has_machine_name();
}
machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.machine_name)
}

// optional int32 public_key_version = 6;
inline bool PolicyData::has_public_key_version() const {
return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PolicyData::set_has_public_key_version() {
_has_bits_[0] |= 0x00100000u;
}
inline void PolicyData::clear_has_public_key_version() {
_has_bits_[0] &= ~0x00100000u;
}
inline void PolicyData::clear_public_key_version() {
public_key_version_ = 0;
clear_has_public_key_version();
}
inline ::google::protobuf::int32 PolicyData::public_key_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.public_key_version)
return public_key_version_;
}
inline void PolicyData::set_public_key_version(::google::protobuf::int32 value) {
set_has_public_key_version();
public_key_version_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.public_key_version)
}

// optional string username = 7;
inline bool PolicyData::has_username() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PolicyData::set_has_username() {
_has_bits_[0] |= 0x00000010u;
}
inline void PolicyData::clear_has_username() {
_has_bits_[0] &= ~0x00000010u;
}
inline void PolicyData::clear_username() {
username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_username();
}
inline const ::std::string& PolicyData::username() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.username)
return username_.GetNoArena();
}
inline void PolicyData::set_username(const ::std::string& value) {
set_has_username();
username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.username)
}
#if LANG_CXX11
inline void PolicyData::set_username(::std::string&& value) {
set_has_username();
username_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.username)
}
#endif
inline void PolicyData::set_username(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_username();
username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.username)
}
inline void PolicyData::set_username(const char* value, size_t size) {
set_has_username();
username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.username)
}
inline ::std::string* PolicyData::mutable_username() {
set_has_username();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.username)
return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_username() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.username)
clear_has_username();
return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_username(::std::string* username) {
if (username != NULL) {
set_has_username();
} else {
clear_has_username();
}
username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.username)
}

// optional string device_id = 8;
inline bool PolicyData::has_device_id() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PolicyData::set_has_device_id() {
_has_bits_[0] |= 0x00000020u;
}
inline void PolicyData::clear_has_device_id() {
_has_bits_[0] &= ~0x00000020u;
}
inline void PolicyData::clear_device_id() {
device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_device_id();
}
inline const ::std::string& PolicyData::device_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.device_id)
return device_id_.GetNoArena();
}
inline void PolicyData::set_device_id(const ::std::string& value) {
set_has_device_id();
device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.device_id)
}
#if LANG_CXX11
inline void PolicyData::set_device_id(::std::string&& value) {
set_has_device_id();
device_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.device_id)
}
#endif
inline void PolicyData::set_device_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_device_id();
device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.device_id)
}
inline void PolicyData::set_device_id(const char* value, size_t size) {
set_has_device_id();
device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.device_id)
}
inline ::std::string* PolicyData::mutable_device_id() {
set_has_device_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.device_id)
return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_device_id() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.device_id)
clear_has_device_id();
return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_device_id(::std::string* device_id) {
if (device_id != NULL) {
set_has_device_id();
} else {
clear_has_device_id();
}
device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.device_id)
}

// optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
inline bool PolicyData::has_state() const {
return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PolicyData::set_has_state() {
_has_bits_[0] |= 0x00200000u;
}
inline void PolicyData::clear_has_state() {
_has_bits_[0] &= ~0x00200000u;
}
inline void PolicyData::clear_state() {
state_ = 0;
clear_has_state();
}
inline ::enterprise_management::PolicyData_AssociationState PolicyData::state() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.state)
return static_cast< ::enterprise_management::PolicyData_AssociationState >(state_);
}
inline void PolicyData::set_state(::enterprise_management::PolicyData_AssociationState value) {
assert(::enterprise_management::PolicyData_AssociationState_IsValid(value));
set_has_state();
state_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.state)
}

// optional string settings_entity_id = 11;
inline bool PolicyData::has_settings_entity_id() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PolicyData::set_has_settings_entity_id() {
_has_bits_[0] |= 0x00000040u;
}
inline void PolicyData::clear_has_settings_entity_id() {
_has_bits_[0] &= ~0x00000040u;
}
inline void PolicyData::clear_settings_entity_id() {
settings_entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_settings_entity_id();
}
inline const ::std::string& PolicyData::settings_entity_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.settings_entity_id)
return settings_entity_id_.GetNoArena();
}
inline void PolicyData::set_settings_entity_id(const ::std::string& value) {
set_has_settings_entity_id();
settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.settings_entity_id)
}
#if LANG_CXX11
inline void PolicyData::set_settings_entity_id(::std::string&& value) {
set_has_settings_entity_id();
settings_entity_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.settings_entity_id)
}
#endif
inline void PolicyData::set_settings_entity_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_settings_entity_id();
settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.settings_entity_id)
}
inline void PolicyData::set_settings_entity_id(const char* value, size_t size) {
set_has_settings_entity_id();
settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.settings_entity_id)
}
inline ::std::string* PolicyData::mutable_settings_entity_id() {
set_has_settings_entity_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.settings_entity_id)
return settings_entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_settings_entity_id() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.settings_entity_id)
clear_has_settings_entity_id();
return settings_entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_settings_entity_id(::std::string* settings_entity_id) {
if (settings_entity_id != NULL) {
set_has_settings_entity_id();
} else {
clear_has_settings_entity_id();
}
settings_entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settings_entity_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.settings_entity_id)
}

// optional string service_account_identity = 12;
inline bool PolicyData::has_service_account_identity() const {
return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PolicyData::set_has_service_account_identity() {
_has_bits_[0] |= 0x00000080u;
}
inline void PolicyData::clear_has_service_account_identity() {
_has_bits_[0] &= ~0x00000080u;
}
inline void PolicyData::clear_service_account_identity() {
service_account_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_service_account_identity();
}
inline const ::std::string& PolicyData::service_account_identity() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.service_account_identity)
return service_account_identity_.GetNoArena();
}
inline void PolicyData::set_service_account_identity(const ::std::string& value) {
set_has_service_account_identity();
service_account_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.service_account_identity)
}
#if LANG_CXX11
inline void PolicyData::set_service_account_identity(::std::string&& value) {
set_has_service_account_identity();
service_account_identity_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.service_account_identity)
}
#endif
inline void PolicyData::set_service_account_identity(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_service_account_identity();
service_account_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.service_account_identity)
}
inline void PolicyData::set_service_account_identity(const char* value, size_t size) {
set_has_service_account_identity();
service_account_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.service_account_identity)
}
inline ::std::string* PolicyData::mutable_service_account_identity() {
set_has_service_account_identity();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.service_account_identity)
return service_account_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_service_account_identity() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.service_account_identity)
clear_has_service_account_identity();
return service_account_identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_service_account_identity(::std::string* service_account_identity) {
if (service_account_identity != NULL) {
set_has_service_account_identity();
} else {
clear_has_service_account_identity();
}
service_account_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_account_identity);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.service_account_identity)
}

// optional int32 invalidation_source = 13;
inline bool PolicyData::has_invalidation_source() const {
return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PolicyData::set_has_invalidation_source() {
_has_bits_[0] |= 0x00400000u;
}
inline void PolicyData::clear_has_invalidation_source() {
_has_bits_[0] &= ~0x00400000u;
}
inline void PolicyData::clear_invalidation_source() {
invalidation_source_ = 0;
clear_has_invalidation_source();
}
inline ::google::protobuf::int32 PolicyData::invalidation_source() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.invalidation_source)
return invalidation_source_;
}
inline void PolicyData::set_invalidation_source(::google::protobuf::int32 value) {
set_has_invalidation_source();
invalidation_source_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.invalidation_source)
}

// optional bytes invalidation_name = 14;
inline bool PolicyData::has_invalidation_name() const {
return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PolicyData::set_has_invalidation_name() {
_has_bits_[0] |= 0x00000100u;
}
inline void PolicyData::clear_has_invalidation_name() {
_has_bits_[0] &= ~0x00000100u;
}
inline void PolicyData::clear_invalidation_name() {
invalidation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_invalidation_name();
}
inline const ::std::string& PolicyData::invalidation_name() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.invalidation_name)
return invalidation_name_.GetNoArena();
}
inline void PolicyData::set_invalidation_name(const ::std::string& value) {
set_has_invalidation_name();
invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.invalidation_name)
}
#if LANG_CXX11
inline void PolicyData::set_invalidation_name(::std::string&& value) {
set_has_invalidation_name();
invalidation_name_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.invalidation_name)
}
#endif
inline void PolicyData::set_invalidation_name(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_invalidation_name();
invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.invalidation_name)
}
inline void PolicyData::set_invalidation_name(const void* value, size_t size) {
set_has_invalidation_name();
invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.invalidation_name)
}
inline ::std::string* PolicyData::mutable_invalidation_name() {
set_has_invalidation_name();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.invalidation_name)
return invalidation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_invalidation_name() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.invalidation_name)
clear_has_invalidation_name();
return invalidation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_invalidation_name(::std::string* invalidation_name) {
if (invalidation_name != NULL) {
set_has_invalidation_name();
} else {
clear_has_invalidation_name();
}
invalidation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invalidation_name);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.invalidation_name)
}

// optional string policy_token = 15;
inline bool PolicyData::has_policy_token() const {
return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PolicyData::set_has_policy_token() {
_has_bits_[0] |= 0x00000200u;
}
inline void PolicyData::clear_has_policy_token() {
_has_bits_[0] &= ~0x00000200u;
}
inline void PolicyData::clear_policy_token() {
policy_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_token();
}
inline const ::std::string& PolicyData::policy_token() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_token)
return policy_token_.GetNoArena();
}
inline void PolicyData::set_policy_token(const ::std::string& value) {
set_has_policy_token();
policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_token)
}
#if LANG_CXX11
inline void PolicyData::set_policy_token(::std::string&& value) {
set_has_policy_token();
policy_token_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.policy_token)
}
#endif
inline void PolicyData::set_policy_token(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_token();
policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_token)
}
inline void PolicyData::set_policy_token(const char* value, size_t size) {
set_has_policy_token();
policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_token)
}
inline ::std::string* PolicyData::mutable_policy_token() {
set_has_policy_token();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_token)
return policy_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_policy_token() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_token)
clear_has_policy_token();
return policy_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_policy_token(::std::string* policy_token) {
if (policy_token != NULL) {
set_has_policy_token();
} else {
clear_has_policy_token();
}
policy_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_token);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_token)
}

// optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
inline bool PolicyData::has_management_mode() const {
return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PolicyData::set_has_management_mode() {
_has_bits_[0] |= 0x00800000u;
}
inline void PolicyData::clear_has_management_mode() {
_has_bits_[0] &= ~0x00800000u;
}
inline void PolicyData::clear_management_mode() {
management_mode_ = 0;
clear_has_management_mode();
}
inline ::enterprise_management::PolicyData_ManagementMode PolicyData::management_mode() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.management_mode)
return static_cast< ::enterprise_management::PolicyData_ManagementMode >(management_mode_);
}
inline void PolicyData::set_management_mode(::enterprise_management::PolicyData_ManagementMode value) {
assert(::enterprise_management::PolicyData_ManagementMode_IsValid(value));
set_has_management_mode();
management_mode_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.management_mode)
}

// optional .enterprise_management.DeviceState device_state = 17;
inline bool PolicyData::has_device_state() const {
return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PolicyData::set_has_device_state() {
_has_bits_[0] |= 0x00040000u;
}
inline void PolicyData::clear_has_device_state() {
_has_bits_[0] &= ~0x00040000u;
}
inline void PolicyData::clear_device_state() {
if (device_state_ != NULL) device_state_->::enterprise_management::DeviceState::Clear();
clear_has_device_state();
}
inline const ::enterprise_management::DeviceState& PolicyData::device_state() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.device_state)
return device_state_ != NULL ? *device_state_
: *::enterprise_management::DeviceState::internal_default_instance();
}
inline ::enterprise_management::DeviceState* PolicyData::mutable_device_state() {
set_has_device_state();
if (device_state_ == NULL) {
device_state_ = new ::enterprise_management::DeviceState;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.device_state)
return device_state_;
}
inline ::enterprise_management::DeviceState* PolicyData::release_device_state() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.device_state)
clear_has_device_state();
::enterprise_management::DeviceState* temp = device_state_;
device_state_ = NULL;
return temp;
}
inline void PolicyData::set_allocated_device_state(::enterprise_management::DeviceState* device_state) {
delete device_state_;
device_state_ = device_state;
if (device_state) {
set_has_device_state();
} else {
clear_has_device_state();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.device_state)
}

// optional int32 command_invalidation_source = 18;
inline bool PolicyData::has_command_invalidation_source() const {
return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PolicyData::set_has_command_invalidation_source() {
_has_bits_[0] |= 0x01000000u;
}
inline void PolicyData::clear_has_command_invalidation_source() {
_has_bits_[0] &= ~0x01000000u;
}
inline void PolicyData::clear_command_invalidation_source() {
command_invalidation_source_ = 0;
clear_has_command_invalidation_source();
}
inline ::google::protobuf::int32 PolicyData::command_invalidation_source() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.command_invalidation_source)
return command_invalidation_source_;
}
inline void PolicyData::set_command_invalidation_source(::google::protobuf::int32 value) {
set_has_command_invalidation_source();
command_invalidation_source_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.command_invalidation_source)
}

// optional bytes command_invalidation_name = 19;
inline bool PolicyData::has_command_invalidation_name() const {
return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PolicyData::set_has_command_invalidation_name() {
_has_bits_[0] |= 0x00000400u;
}
inline void PolicyData::clear_has_command_invalidation_name() {
_has_bits_[0] &= ~0x00000400u;
}
inline void PolicyData::clear_command_invalidation_name() {
command_invalidation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_command_invalidation_name();
}
inline const ::std::string& PolicyData::command_invalidation_name() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.command_invalidation_name)
return command_invalidation_name_.GetNoArena();
}
inline void PolicyData::set_command_invalidation_name(const ::std::string& value) {
set_has_command_invalidation_name();
command_invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.command_invalidation_name)
}
#if LANG_CXX11
inline void PolicyData::set_command_invalidation_name(::std::string&& value) {
set_has_command_invalidation_name();
command_invalidation_name_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.command_invalidation_name)
}
#endif
inline void PolicyData::set_command_invalidation_name(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_command_invalidation_name();
command_invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.command_invalidation_name)
}
inline void PolicyData::set_command_invalidation_name(const void* value, size_t size) {
set_has_command_invalidation_name();
command_invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.command_invalidation_name)
}
inline ::std::string* PolicyData::mutable_command_invalidation_name() {
set_has_command_invalidation_name();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.command_invalidation_name)
return command_invalidation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_command_invalidation_name() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.command_invalidation_name)
clear_has_command_invalidation_name();
return command_invalidation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_command_invalidation_name(::std::string* command_invalidation_name) {
if (command_invalidation_name != NULL) {
set_has_command_invalidation_name();
} else {
clear_has_command_invalidation_name();
}
command_invalidation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_invalidation_name);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.command_invalidation_name)
}

// optional string annotated_location = 20;
inline bool PolicyData::has_annotated_location() const {
return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PolicyData::set_has_annotated_location() {
_has_bits_[0] |= 0x00000800u;
}
inline void PolicyData::clear_has_annotated_location() {
_has_bits_[0] &= ~0x00000800u;
}
inline void PolicyData::clear_annotated_location() {
annotated_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_annotated_location();
}
inline const ::std::string& PolicyData::annotated_location() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.annotated_location)
return annotated_location_.GetNoArena();
}
inline void PolicyData::set_annotated_location(const ::std::string& value) {
set_has_annotated_location();
annotated_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.annotated_location)
}
#if LANG_CXX11
inline void PolicyData::set_annotated_location(::std::string&& value) {
set_has_annotated_location();
annotated_location_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.annotated_location)
}
#endif
inline void PolicyData::set_annotated_location(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_annotated_location();
annotated_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.annotated_location)
}
inline void PolicyData::set_annotated_location(const char* value, size_t size) {
set_has_annotated_location();
annotated_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.annotated_location)
}
inline ::std::string* PolicyData::mutable_annotated_location() {
set_has_annotated_location();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.annotated_location)
return annotated_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_annotated_location() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.annotated_location)
clear_has_annotated_location();
return annotated_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_annotated_location(::std::string* annotated_location) {
if (annotated_location != NULL) {
set_has_annotated_location();
} else {
clear_has_annotated_location();
}
annotated_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotated_location);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.annotated_location)
}

// optional string annotated_asset_id = 21;
inline bool PolicyData::has_annotated_asset_id() const {
return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PolicyData::set_has_annotated_asset_id() {
_has_bits_[0] |= 0x00001000u;
}
inline void PolicyData::clear_has_annotated_asset_id() {
_has_bits_[0] &= ~0x00001000u;
}
inline void PolicyData::clear_annotated_asset_id() {
annotated_asset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_annotated_asset_id();
}
inline const ::std::string& PolicyData::annotated_asset_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.annotated_asset_id)
return annotated_asset_id_.GetNoArena();
}
inline void PolicyData::set_annotated_asset_id(const ::std::string& value) {
set_has_annotated_asset_id();
annotated_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.annotated_asset_id)
}
#if LANG_CXX11
inline void PolicyData::set_annotated_asset_id(::std::string&& value) {
set_has_annotated_asset_id();
annotated_asset_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.annotated_asset_id)
}
#endif
inline void PolicyData::set_annotated_asset_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_annotated_asset_id();
annotated_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.annotated_asset_id)
}
inline void PolicyData::set_annotated_asset_id(const char* value, size_t size) {
set_has_annotated_asset_id();
annotated_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.annotated_asset_id)
}
inline ::std::string* PolicyData::mutable_annotated_asset_id() {
set_has_annotated_asset_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.annotated_asset_id)
return annotated_asset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_annotated_asset_id() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.annotated_asset_id)
clear_has_annotated_asset_id();
return annotated_asset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_annotated_asset_id(::std::string* annotated_asset_id) {
if (annotated_asset_id != NULL) {
set_has_annotated_asset_id();
} else {
clear_has_annotated_asset_id();
}
annotated_asset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotated_asset_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.annotated_asset_id)
}

// optional string directory_api_id = 22;
inline bool PolicyData::has_directory_api_id() const {
return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PolicyData::set_has_directory_api_id() {
_has_bits_[0] |= 0x00002000u;
}
inline void PolicyData::clear_has_directory_api_id() {
_has_bits_[0] &= ~0x00002000u;
}
inline void PolicyData::clear_directory_api_id() {
directory_api_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_directory_api_id();
}
inline const ::std::string& PolicyData::directory_api_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.directory_api_id)
return directory_api_id_.GetNoArena();
}
inline void PolicyData::set_directory_api_id(const ::std::string& value) {
set_has_directory_api_id();
directory_api_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.directory_api_id)
}
#if LANG_CXX11
inline void PolicyData::set_directory_api_id(::std::string&& value) {
set_has_directory_api_id();
directory_api_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.directory_api_id)
}
#endif
inline void PolicyData::set_directory_api_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_directory_api_id();
directory_api_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.directory_api_id)
}
inline void PolicyData::set_directory_api_id(const char* value, size_t size) {
set_has_directory_api_id();
directory_api_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.directory_api_id)
}
inline ::std::string* PolicyData::mutable_directory_api_id() {
set_has_directory_api_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.directory_api_id)
return directory_api_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_directory_api_id() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.directory_api_id)
clear_has_directory_api_id();
return directory_api_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_directory_api_id(::std::string* directory_api_id) {
if (directory_api_id != NULL) {
set_has_directory_api_id();
} else {
clear_has_directory_api_id();
}
directory_api_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory_api_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.directory_api_id)
}

// repeated string device_affiliation_ids = 23;
inline int PolicyData::device_affiliation_ids_size() const {
return device_affiliation_ids_.size();
}
inline void PolicyData::clear_device_affiliation_ids() {
device_affiliation_ids_.Clear();
}
inline const ::std::string& PolicyData::device_affiliation_ids(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.device_affiliation_ids)
return device_affiliation_ids_.Get(index);
}
inline ::std::string* PolicyData::mutable_device_affiliation_ids(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.device_affiliation_ids)
return device_affiliation_ids_.Mutable(index);
}
inline void PolicyData::set_device_affiliation_ids(int index, const ::std::string& value) {
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.device_affiliation_ids)
device_affiliation_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PolicyData::set_device_affiliation_ids(int index, ::std::string&& value) {
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.device_affiliation_ids)
device_affiliation_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PolicyData::set_device_affiliation_ids(int index, const char* value) {
GOOGLE_DCHECK(value != NULL);
device_affiliation_ids_.Mutable(index)->assign(value);
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.device_affiliation_ids)
}
inline void PolicyData::set_device_affiliation_ids(int index, const char* value, size_t size) {
device_affiliation_ids_.Mutable(index)->assign(
reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.device_affiliation_ids)
}
inline ::std::string* PolicyData::add_device_affiliation_ids() {
// @@protoc_insertion_point(field_add_mutable:enterprise_management.PolicyData.device_affiliation_ids)
return device_affiliation_ids_.Add();
}
inline void PolicyData::add_device_affiliation_ids(const ::std::string& value) {
device_affiliation_ids_.Add()->assign(value);
// @@protoc_insertion_point(field_add:enterprise_management.PolicyData.device_affiliation_ids)
}
#if LANG_CXX11
inline void PolicyData::add_device_affiliation_ids(::std::string&& value) {
device_affiliation_ids_.Add(std::move(value));
// @@protoc_insertion_point(field_add:enterprise_management.PolicyData.device_affiliation_ids)
}
#endif
inline void PolicyData::add_device_affiliation_ids(const char* value) {
GOOGLE_DCHECK(value != NULL);
device_affiliation_ids_.Add()->assign(value);
// @@protoc_insertion_point(field_add_char:enterprise_management.PolicyData.device_affiliation_ids)
}
inline void PolicyData::add_device_affiliation_ids(const char* value, size_t size) {
device_affiliation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_add_pointer:enterprise_management.PolicyData.device_affiliation_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PolicyData::device_affiliation_ids() const {
// @@protoc_insertion_point(field_list:enterprise_management.PolicyData.device_affiliation_ids)
return device_affiliation_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PolicyData::mutable_device_affiliation_ids() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.PolicyData.device_affiliation_ids)
return &device_affiliation_ids_;
}

// repeated string user_affiliation_ids = 24;
inline int PolicyData::user_affiliation_ids_size() const {
return user_affiliation_ids_.size();
}
inline void PolicyData::clear_user_affiliation_ids() {
user_affiliation_ids_.Clear();
}
inline const ::std::string& PolicyData::user_affiliation_ids(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.user_affiliation_ids)
return user_affiliation_ids_.Get(index);
}
inline ::std::string* PolicyData::mutable_user_affiliation_ids(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.user_affiliation_ids)
return user_affiliation_ids_.Mutable(index);
}
inline void PolicyData::set_user_affiliation_ids(int index, const ::std::string& value) {
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.user_affiliation_ids)
user_affiliation_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PolicyData::set_user_affiliation_ids(int index, ::std::string&& value) {
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.user_affiliation_ids)
user_affiliation_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PolicyData::set_user_affiliation_ids(int index, const char* value) {
GOOGLE_DCHECK(value != NULL);
user_affiliation_ids_.Mutable(index)->assign(value);
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.user_affiliation_ids)
}
inline void PolicyData::set_user_affiliation_ids(int index, const char* value, size_t size) {
user_affiliation_ids_.Mutable(index)->assign(
reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.user_affiliation_ids)
}
inline ::std::string* PolicyData::add_user_affiliation_ids() {
// @@protoc_insertion_point(field_add_mutable:enterprise_management.PolicyData.user_affiliation_ids)
return user_affiliation_ids_.Add();
}
inline void PolicyData::add_user_affiliation_ids(const ::std::string& value) {
user_affiliation_ids_.Add()->assign(value);
// @@protoc_insertion_point(field_add:enterprise_management.PolicyData.user_affiliation_ids)
}
#if LANG_CXX11
inline void PolicyData::add_user_affiliation_ids(::std::string&& value) {
user_affiliation_ids_.Add(std::move(value));
// @@protoc_insertion_point(field_add:enterprise_management.PolicyData.user_affiliation_ids)
}
#endif
inline void PolicyData::add_user_affiliation_ids(const char* value) {
GOOGLE_DCHECK(value != NULL);
user_affiliation_ids_.Add()->assign(value);
// @@protoc_insertion_point(field_add_char:enterprise_management.PolicyData.user_affiliation_ids)
}
inline void PolicyData::add_user_affiliation_ids(const char* value, size_t size) {
user_affiliation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_add_pointer:enterprise_management.PolicyData.user_affiliation_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PolicyData::user_affiliation_ids() const {
// @@protoc_insertion_point(field_list:enterprise_management.PolicyData.user_affiliation_ids)
return user_affiliation_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PolicyData::mutable_user_affiliation_ids() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.PolicyData.user_affiliation_ids)
return &user_affiliation_ids_;
}

// optional string display_domain = 25;
inline bool PolicyData::has_display_domain() const {
return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PolicyData::set_has_display_domain() {
_has_bits_[0] |= 0x00004000u;
}
inline void PolicyData::clear_has_display_domain() {
_has_bits_[0] &= ~0x00004000u;
}
inline void PolicyData::clear_display_domain() {
display_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_display_domain();
}
inline const ::std::string& PolicyData::display_domain() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.display_domain)
return display_domain_.GetNoArena();
}
inline void PolicyData::set_display_domain(const ::std::string& value) {
set_has_display_domain();
display_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.display_domain)
}
#if LANG_CXX11
inline void PolicyData::set_display_domain(::std::string&& value) {
set_has_display_domain();
display_domain_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.display_domain)
}
#endif
inline void PolicyData::set_display_domain(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_display_domain();
display_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.display_domain)
}
inline void PolicyData::set_display_domain(const char* value, size_t size) {
set_has_display_domain();
display_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.display_domain)
}
inline ::std::string* PolicyData::mutable_display_domain() {
set_has_display_domain();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.display_domain)
return display_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_display_domain() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.display_domain)
clear_has_display_domain();
return display_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_display_domain(::std::string* display_domain) {
if (display_domain != NULL) {
set_has_display_domain();
} else {
clear_has_display_domain();
}
display_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_domain);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.display_domain)
}

// optional string policy_invalidation_topic = 26;
inline bool PolicyData::has_policy_invalidation_topic() const {
return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PolicyData::set_has_policy_invalidation_topic() {
_has_bits_[0] |= 0x00008000u;
}
inline void PolicyData::clear_has_policy_invalidation_topic() {
_has_bits_[0] &= ~0x00008000u;
}
inline void PolicyData::clear_policy_invalidation_topic() {
policy_invalidation_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_invalidation_topic();
}
inline const ::std::string& PolicyData::policy_invalidation_topic() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_invalidation_topic)
return policy_invalidation_topic_.GetNoArena();
}
inline void PolicyData::set_policy_invalidation_topic(const ::std::string& value) {
set_has_policy_invalidation_topic();
policy_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_invalidation_topic)
}
#if LANG_CXX11
inline void PolicyData::set_policy_invalidation_topic(::std::string&& value) {
set_has_policy_invalidation_topic();
policy_invalidation_topic_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.policy_invalidation_topic)
}
#endif
inline void PolicyData::set_policy_invalidation_topic(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_invalidation_topic();
policy_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_invalidation_topic)
}
inline void PolicyData::set_policy_invalidation_topic(const char* value, size_t size) {
set_has_policy_invalidation_topic();
policy_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_invalidation_topic)
}
inline ::std::string* PolicyData::mutable_policy_invalidation_topic() {
set_has_policy_invalidation_topic();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_invalidation_topic)
return policy_invalidation_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_policy_invalidation_topic() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_invalidation_topic)
clear_has_policy_invalidation_topic();
return policy_invalidation_topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_policy_invalidation_topic(::std::string* policy_invalidation_topic) {
if (policy_invalidation_topic != NULL) {
set_has_policy_invalidation_topic();
} else {
clear_has_policy_invalidation_topic();
}
policy_invalidation_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_invalidation_topic);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_invalidation_topic)
}

// optional string command_invalidation_topic = 27;
inline bool PolicyData::has_command_invalidation_topic() const {
return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PolicyData::set_has_command_invalidation_topic() {
_has_bits_[0] |= 0x00010000u;
}
inline void PolicyData::clear_has_command_invalidation_topic() {
_has_bits_[0] &= ~0x00010000u;
}
inline void PolicyData::clear_command_invalidation_topic() {
command_invalidation_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_command_invalidation_topic();
}
inline const ::std::string& PolicyData::command_invalidation_topic() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.command_invalidation_topic)
return command_invalidation_topic_.GetNoArena();
}
inline void PolicyData::set_command_invalidation_topic(const ::std::string& value) {
set_has_command_invalidation_topic();
command_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.command_invalidation_topic)
}
#if LANG_CXX11
inline void PolicyData::set_command_invalidation_topic(::std::string&& value) {
set_has_command_invalidation_topic();
command_invalidation_topic_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.command_invalidation_topic)
}
#endif
inline void PolicyData::set_command_invalidation_topic(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_command_invalidation_topic();
command_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.command_invalidation_topic)
}
inline void PolicyData::set_command_invalidation_topic(const char* value, size_t size) {
set_has_command_invalidation_topic();
command_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.command_invalidation_topic)
}
inline ::std::string* PolicyData::mutable_command_invalidation_topic() {
set_has_command_invalidation_topic();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.command_invalidation_topic)
return command_invalidation_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_command_invalidation_topic() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.command_invalidation_topic)
clear_has_command_invalidation_topic();
return command_invalidation_topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_command_invalidation_topic(::std::string* command_invalidation_topic) {
if (command_invalidation_topic != NULL) {
set_has_command_invalidation_topic();
} else {
clear_has_command_invalidation_topic();
}
command_invalidation_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_invalidation_topic);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.command_invalidation_topic)
}

// optional bool enrollment_id_needed = 28;
inline bool PolicyData::has_enrollment_id_needed() const {
return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PolicyData::set_has_enrollment_id_needed() {
_has_bits_[0] |= 0x02000000u;
}
inline void PolicyData::clear_has_enrollment_id_needed() {
_has_bits_[0] &= ~0x02000000u;
}
inline void PolicyData::clear_enrollment_id_needed() {
enrollment_id_needed_ = false;
clear_has_enrollment_id_needed();
}
inline bool PolicyData::enrollment_id_needed() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.enrollment_id_needed)
return enrollment_id_needed_;
}
inline void PolicyData::set_enrollment_id_needed(bool value) {
set_has_enrollment_id_needed();
enrollment_id_needed_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.enrollment_id_needed)
}

// optional string gaia_id = 29;
inline bool PolicyData::has_gaia_id() const {
return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PolicyData::set_has_gaia_id() {
_has_bits_[0] |= 0x00020000u;
}
inline void PolicyData::clear_has_gaia_id() {
_has_bits_[0] &= ~0x00020000u;
}
inline void PolicyData::clear_gaia_id() {
gaia_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_gaia_id();
}
inline const ::std::string& PolicyData::gaia_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyData.gaia_id)
return gaia_id_.GetNoArena();
}
inline void PolicyData::set_gaia_id(const ::std::string& value) {
set_has_gaia_id();
gaia_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyData.gaia_id)
}
#if LANG_CXX11
inline void PolicyData::set_gaia_id(::std::string&& value) {
set_has_gaia_id();
gaia_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.gaia_id)
}
#endif
inline void PolicyData::set_gaia_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_gaia_id();
gaia_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.gaia_id)
}
inline void PolicyData::set_gaia_id(const char* value, size_t size) {
set_has_gaia_id();
gaia_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.gaia_id)
}
inline ::std::string* PolicyData::mutable_gaia_id() {
set_has_gaia_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.gaia_id)
return gaia_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyData::release_gaia_id() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyData.gaia_id)
clear_has_gaia_id();
return gaia_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyData::set_allocated_gaia_id(::std::string* gaia_id) {
if (gaia_id != NULL) {
set_has_gaia_id();
} else {
clear_has_gaia_id();
}
gaia_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gaia_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.gaia_id)
}

// -------------------------------------------------------------------

// PolicyFetchResponse

// optional int32 error_code = 1;
inline bool PolicyFetchResponse::has_error_code() const {
return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PolicyFetchResponse::set_has_error_code() {
_has_bits_[0] |= 0x00000100u;
}
inline void PolicyFetchResponse::clear_has_error_code() {
_has_bits_[0] &= ~0x00000100u;
}
inline void PolicyFetchResponse::clear_error_code() {
error_code_ = 0;
clear_has_error_code();
}
inline ::google::protobuf::int32 PolicyFetchResponse::error_code() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.error_code)
return error_code_;
}
inline void PolicyFetchResponse::set_error_code(::google::protobuf::int32 value) {
set_has_error_code();
error_code_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.error_code)
}

// optional string error_message = 2;
inline bool PolicyFetchResponse::has_error_message() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicyFetchResponse::set_has_error_message() {
_has_bits_[0] |= 0x00000001u;
}
inline void PolicyFetchResponse::clear_has_error_message() {
_has_bits_[0] &= ~0x00000001u;
}
inline void PolicyFetchResponse::clear_error_message() {
error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_error_message();
}
inline const ::std::string& PolicyFetchResponse::error_message() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.error_message)
return error_message_.GetNoArena();
}
inline void PolicyFetchResponse::set_error_message(const ::std::string& value) {
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.error_message)
}
#if LANG_CXX11
inline void PolicyFetchResponse::set_error_message(::std::string&& value) {
set_has_error_message();
error_message_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.error_message)
}
#endif
inline void PolicyFetchResponse::set_error_message(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.error_message)
}
inline void PolicyFetchResponse::set_error_message(const char* value, size_t size) {
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.error_message)
}
inline ::std::string* PolicyFetchResponse::mutable_error_message() {
set_has_error_message();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.error_message)
return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchResponse::release_error_message() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.error_message)
clear_has_error_message();
return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchResponse::set_allocated_error_message(::std::string* error_message) {
if (error_message != NULL) {
set_has_error_message();
} else {
clear_has_error_message();
}
error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.error_message)
}

// optional bytes policy_data = 3;
inline bool PolicyFetchResponse::has_policy_data() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyFetchResponse::set_has_policy_data() {
_has_bits_[0] |= 0x00000002u;
}
inline void PolicyFetchResponse::clear_has_policy_data() {
_has_bits_[0] &= ~0x00000002u;
}
inline void PolicyFetchResponse::clear_policy_data() {
policy_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_data();
}
inline const ::std::string& PolicyFetchResponse::policy_data() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.policy_data)
return policy_data_.GetNoArena();
}
inline void PolicyFetchResponse::set_policy_data(const ::std::string& value) {
set_has_policy_data();
policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.policy_data)
}
#if LANG_CXX11
inline void PolicyFetchResponse::set_policy_data(::std::string&& value) {
set_has_policy_data();
policy_data_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.policy_data)
}
#endif
inline void PolicyFetchResponse::set_policy_data(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_data();
policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.policy_data)
}
inline void PolicyFetchResponse::set_policy_data(const void* value, size_t size) {
set_has_policy_data();
policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.policy_data)
}
inline ::std::string* PolicyFetchResponse::mutable_policy_data() {
set_has_policy_data();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.policy_data)
return policy_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchResponse::release_policy_data() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.policy_data)
clear_has_policy_data();
return policy_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchResponse::set_allocated_policy_data(::std::string* policy_data) {
if (policy_data != NULL) {
set_has_policy_data();
} else {
clear_has_policy_data();
}
policy_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_data);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.policy_data)
}

// optional bytes policy_data_signature = 4;
inline bool PolicyFetchResponse::has_policy_data_signature() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicyFetchResponse::set_has_policy_data_signature() {
_has_bits_[0] |= 0x00000004u;
}
inline void PolicyFetchResponse::clear_has_policy_data_signature() {
_has_bits_[0] &= ~0x00000004u;
}
inline void PolicyFetchResponse::clear_policy_data_signature() {
policy_data_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_data_signature();
}
inline const ::std::string& PolicyFetchResponse::policy_data_signature() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.policy_data_signature)
return policy_data_signature_.GetNoArena();
}
inline void PolicyFetchResponse::set_policy_data_signature(const ::std::string& value) {
set_has_policy_data_signature();
policy_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
#if LANG_CXX11
inline void PolicyFetchResponse::set_policy_data_signature(::std::string&& value) {
set_has_policy_data_signature();
policy_data_signature_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
#endif
inline void PolicyFetchResponse::set_policy_data_signature(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_data_signature();
policy_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
inline void PolicyFetchResponse::set_policy_data_signature(const void* value, size_t size) {
set_has_policy_data_signature();
policy_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
inline ::std::string* PolicyFetchResponse::mutable_policy_data_signature() {
set_has_policy_data_signature();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.policy_data_signature)
return policy_data_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchResponse::release_policy_data_signature() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.policy_data_signature)
clear_has_policy_data_signature();
return policy_data_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchResponse::set_allocated_policy_data_signature(::std::string* policy_data_signature) {
if (policy_data_signature != NULL) {
set_has_policy_data_signature();
} else {
clear_has_policy_data_signature();
}
policy_data_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_data_signature);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.policy_data_signature)
}

// optional bytes new_public_key = 5;
inline bool PolicyFetchResponse::has_new_public_key() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PolicyFetchResponse::set_has_new_public_key() {
_has_bits_[0] |= 0x00000008u;
}
inline void PolicyFetchResponse::clear_has_new_public_key() {
_has_bits_[0] &= ~0x00000008u;
}
inline void PolicyFetchResponse::clear_new_public_key() {
new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_new_public_key();
}
inline const ::std::string& PolicyFetchResponse::new_public_key() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key)
return new_public_key_.GetNoArena();
}
inline void PolicyFetchResponse::set_new_public_key(const ::std::string& value) {
set_has_new_public_key();
new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key)
}
#if LANG_CXX11
inline void PolicyFetchResponse::set_new_public_key(::std::string&& value) {
set_has_new_public_key();
new_public_key_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.new_public_key)
}
#endif
inline void PolicyFetchResponse::set_new_public_key(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_new_public_key();
new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key)
}
inline void PolicyFetchResponse::set_new_public_key(const void* value, size_t size) {
set_has_new_public_key();
new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key)
}
inline ::std::string* PolicyFetchResponse::mutable_new_public_key() {
set_has_new_public_key();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key)
return new_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchResponse::release_new_public_key() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key)
clear_has_new_public_key();
return new_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchResponse::set_allocated_new_public_key(::std::string* new_public_key) {
if (new_public_key != NULL) {
set_has_new_public_key();
} else {
clear_has_new_public_key();
}
new_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key)
}

// optional bytes new_public_key_signature = 6;
inline bool PolicyFetchResponse::has_new_public_key_signature() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PolicyFetchResponse::set_has_new_public_key_signature() {
_has_bits_[0] |= 0x00000010u;
}
inline void PolicyFetchResponse::clear_has_new_public_key_signature() {
_has_bits_[0] &= ~0x00000010u;
}
inline void PolicyFetchResponse::clear_new_public_key_signature() {
new_public_key_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_new_public_key_signature();
}
inline const ::std::string& PolicyFetchResponse::new_public_key_signature() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_signature)
return new_public_key_signature_.GetNoArena();
}
inline void PolicyFetchResponse::set_new_public_key_signature(const ::std::string& value) {
set_has_new_public_key_signature();
new_public_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
#if LANG_CXX11
inline void PolicyFetchResponse::set_new_public_key_signature(::std::string&& value) {
set_has_new_public_key_signature();
new_public_key_signature_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
#endif
inline void PolicyFetchResponse::set_new_public_key_signature(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_new_public_key_signature();
new_public_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
inline void PolicyFetchResponse::set_new_public_key_signature(const void* value, size_t size) {
set_has_new_public_key_signature();
new_public_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
inline ::std::string* PolicyFetchResponse::mutable_new_public_key_signature() {
set_has_new_public_key_signature();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_signature)
return new_public_key_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchResponse::release_new_public_key_signature() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_signature)
clear_has_new_public_key_signature();
return new_public_key_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchResponse::set_allocated_new_public_key_signature(::std::string* new_public_key_signature) {
if (new_public_key_signature != NULL) {
set_has_new_public_key_signature();
} else {
clear_has_new_public_key_signature();
}
new_public_key_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_signature);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}

// optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
inline bool PolicyFetchResponse::has_new_public_key_verification_signature_deprecated() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PolicyFetchResponse::set_has_new_public_key_verification_signature_deprecated() {
_has_bits_[0] |= 0x00000020u;
}
inline void PolicyFetchResponse::clear_has_new_public_key_verification_signature_deprecated() {
_has_bits_[0] &= ~0x00000020u;
}
inline void PolicyFetchResponse::clear_new_public_key_verification_signature_deprecated() {
new_public_key_verification_signature_deprecated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_new_public_key_verification_signature_deprecated();
}
inline const ::std::string& PolicyFetchResponse::new_public_key_verification_signature_deprecated() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
return new_public_key_verification_signature_deprecated_.GetNoArena();
}
inline void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(const ::std::string& value) {
set_has_new_public_key_verification_signature_deprecated();
new_public_key_verification_signature_deprecated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
#if LANG_CXX11
inline void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(::std::string&& value) {
set_has_new_public_key_verification_signature_deprecated();
new_public_key_verification_signature_deprecated_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
#endif
inline void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_new_public_key_verification_signature_deprecated();
new_public_key_verification_signature_deprecated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
inline void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(const void* value, size_t size) {
set_has_new_public_key_verification_signature_deprecated();
new_public_key_verification_signature_deprecated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
inline ::std::string* PolicyFetchResponse::mutable_new_public_key_verification_signature_deprecated() {
set_has_new_public_key_verification_signature_deprecated();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
return new_public_key_verification_signature_deprecated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchResponse::release_new_public_key_verification_signature_deprecated() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
clear_has_new_public_key_verification_signature_deprecated();
return new_public_key_verification_signature_deprecated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchResponse::set_allocated_new_public_key_verification_signature_deprecated(::std::string* new_public_key_verification_signature_deprecated) {
if (new_public_key_verification_signature_deprecated != NULL) {
set_has_new_public_key_verification_signature_deprecated();
} else {
clear_has_new_public_key_verification_signature_deprecated();
}
new_public_key_verification_signature_deprecated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_verification_signature_deprecated);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}

// optional bytes new_public_key_verification_data = 8;
inline bool PolicyFetchResponse::has_new_public_key_verification_data() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PolicyFetchResponse::set_has_new_public_key_verification_data() {
_has_bits_[0] |= 0x00000040u;
}
inline void PolicyFetchResponse::clear_has_new_public_key_verification_data() {
_has_bits_[0] &= ~0x00000040u;
}
inline void PolicyFetchResponse::clear_new_public_key_verification_data() {
new_public_key_verification_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_new_public_key_verification_data();
}
inline const ::std::string& PolicyFetchResponse::new_public_key_verification_data() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
return new_public_key_verification_data_.GetNoArena();
}
inline void PolicyFetchResponse::set_new_public_key_verification_data(const ::std::string& value) {
set_has_new_public_key_verification_data();
new_public_key_verification_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
#if LANG_CXX11
inline void PolicyFetchResponse::set_new_public_key_verification_data(::std::string&& value) {
set_has_new_public_key_verification_data();
new_public_key_verification_data_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
#endif
inline void PolicyFetchResponse::set_new_public_key_verification_data(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_new_public_key_verification_data();
new_public_key_verification_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
inline void PolicyFetchResponse::set_new_public_key_verification_data(const void* value, size_t size) {
set_has_new_public_key_verification_data();
new_public_key_verification_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
inline ::std::string* PolicyFetchResponse::mutable_new_public_key_verification_data() {
set_has_new_public_key_verification_data();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
return new_public_key_verification_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchResponse::release_new_public_key_verification_data() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
clear_has_new_public_key_verification_data();
return new_public_key_verification_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchResponse::set_allocated_new_public_key_verification_data(::std::string* new_public_key_verification_data) {
if (new_public_key_verification_data != NULL) {
set_has_new_public_key_verification_data();
} else {
clear_has_new_public_key_verification_data();
}
new_public_key_verification_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_verification_data);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}

// optional bytes new_public_key_verification_data_signature = 9;
inline bool PolicyFetchResponse::has_new_public_key_verification_data_signature() const {
return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PolicyFetchResponse::set_has_new_public_key_verification_data_signature() {
_has_bits_[0] |= 0x00000080u;
}
inline void PolicyFetchResponse::clear_has_new_public_key_verification_data_signature() {
_has_bits_[0] &= ~0x00000080u;
}
inline void PolicyFetchResponse::clear_new_public_key_verification_data_signature() {
new_public_key_verification_data_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_new_public_key_verification_data_signature();
}
inline const ::std::string& PolicyFetchResponse::new_public_key_verification_data_signature() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
return new_public_key_verification_data_signature_.GetNoArena();
}
inline void PolicyFetchResponse::set_new_public_key_verification_data_signature(const ::std::string& value) {
set_has_new_public_key_verification_data_signature();
new_public_key_verification_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
#if LANG_CXX11
inline void PolicyFetchResponse::set_new_public_key_verification_data_signature(::std::string&& value) {
set_has_new_public_key_verification_data_signature();
new_public_key_verification_data_signature_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
#endif
inline void PolicyFetchResponse::set_new_public_key_verification_data_signature(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_new_public_key_verification_data_signature();
new_public_key_verification_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
inline void PolicyFetchResponse::set_new_public_key_verification_data_signature(const void* value, size_t size) {
set_has_new_public_key_verification_data_signature();
new_public_key_verification_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
inline ::std::string* PolicyFetchResponse::mutable_new_public_key_verification_data_signature() {
set_has_new_public_key_verification_data_signature();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
return new_public_key_verification_data_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyFetchResponse::release_new_public_key_verification_data_signature() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
clear_has_new_public_key_verification_data_signature();
return new_public_key_verification_data_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyFetchResponse::set_allocated_new_public_key_verification_data_signature(::std::string* new_public_key_verification_data_signature) {
if (new_public_key_verification_data_signature != NULL) {
set_has_new_public_key_verification_data_signature();
} else {
clear_has_new_public_key_verification_data_signature();
}
new_public_key_verification_data_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_verification_data_signature);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}

// -------------------------------------------------------------------

// DEPRECATEDPolicyPublicKeyAndDomain

// optional bytes new_public_key = 1;
inline bool DEPRECATEDPolicyPublicKeyAndDomain::has_new_public_key() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_has_new_public_key() {
_has_bits_[0] |= 0x00000001u;
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::clear_has_new_public_key() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::clear_new_public_key() {
new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_new_public_key();
}
inline const ::std::string& DEPRECATEDPolicyPublicKeyAndDomain::new_public_key() const {
// @@protoc_insertion_point(field_get:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
return new_public_key_.GetNoArena();
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(const ::std::string& value) {
set_has_new_public_key();
new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
#if LANG_CXX11
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(::std::string&& value) {
set_has_new_public_key();
new_public_key_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
#endif
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_new_public_key();
new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(const void* value, size_t size) {
set_has_new_public_key();
new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
inline ::std::string* DEPRECATEDPolicyPublicKeyAndDomain::mutable_new_public_key() {
set_has_new_public_key();
// @@protoc_insertion_point(field_mutable:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
return new_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DEPRECATEDPolicyPublicKeyAndDomain::release_new_public_key() {
// @@protoc_insertion_point(field_release:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
clear_has_new_public_key();
return new_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_allocated_new_public_key(::std::string* new_public_key) {
if (new_public_key != NULL) {
set_has_new_public_key();
} else {
clear_has_new_public_key();
}
new_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}

// optional string domain = 2;
inline bool DEPRECATEDPolicyPublicKeyAndDomain::has_domain() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_has_domain() {
_has_bits_[0] |= 0x00000002u;
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::clear_has_domain() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::clear_domain() {
domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_domain();
}
inline const ::std::string& DEPRECATEDPolicyPublicKeyAndDomain::domain() const {
// @@protoc_insertion_point(field_get:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
return domain_.GetNoArena();
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(const ::std::string& value) {
set_has_domain();
domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
#if LANG_CXX11
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(::std::string&& value) {
set_has_domain();
domain_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
#endif
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_domain();
domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(const char* value, size_t size) {
set_has_domain();
domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
inline ::std::string* DEPRECATEDPolicyPublicKeyAndDomain::mutable_domain() {
set_has_domain();
// @@protoc_insertion_point(field_mutable:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DEPRECATEDPolicyPublicKeyAndDomain::release_domain() {
// @@protoc_insertion_point(field_release:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
clear_has_domain();
return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DEPRECATEDPolicyPublicKeyAndDomain::set_allocated_domain(::std::string* domain) {
if (domain != NULL) {
set_has_domain();
} else {
clear_has_domain();
}
domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}

// -------------------------------------------------------------------

// PublicKeyVerificationData

// optional bytes new_public_key = 1;
inline bool PublicKeyVerificationData::has_new_public_key() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublicKeyVerificationData::set_has_new_public_key() {
_has_bits_[0] |= 0x00000001u;
}
inline void PublicKeyVerificationData::clear_has_new_public_key() {
_has_bits_[0] &= ~0x00000001u;
}
inline void PublicKeyVerificationData::clear_new_public_key() {
new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_new_public_key();
}
inline const ::std::string& PublicKeyVerificationData::new_public_key() const {
// @@protoc_insertion_point(field_get:enterprise_management.PublicKeyVerificationData.new_public_key)
return new_public_key_.GetNoArena();
}
inline void PublicKeyVerificationData::set_new_public_key(const ::std::string& value) {
set_has_new_public_key();
new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PublicKeyVerificationData.new_public_key)
}
#if LANG_CXX11
inline void PublicKeyVerificationData::set_new_public_key(::std::string&& value) {
set_has_new_public_key();
new_public_key_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PublicKeyVerificationData.new_public_key)
}
#endif
inline void PublicKeyVerificationData::set_new_public_key(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_new_public_key();
new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PublicKeyVerificationData.new_public_key)
}
inline void PublicKeyVerificationData::set_new_public_key(const void* value, size_t size) {
set_has_new_public_key();
new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PublicKeyVerificationData.new_public_key)
}
inline ::std::string* PublicKeyVerificationData::mutable_new_public_key() {
set_has_new_public_key();
// @@protoc_insertion_point(field_mutable:enterprise_management.PublicKeyVerificationData.new_public_key)
return new_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicKeyVerificationData::release_new_public_key() {
// @@protoc_insertion_point(field_release:enterprise_management.PublicKeyVerificationData.new_public_key)
clear_has_new_public_key();
return new_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicKeyVerificationData::set_allocated_new_public_key(::std::string* new_public_key) {
if (new_public_key != NULL) {
set_has_new_public_key();
} else {
clear_has_new_public_key();
}
new_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PublicKeyVerificationData.new_public_key)
}

// optional string domain = 2;
inline bool PublicKeyVerificationData::has_domain() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublicKeyVerificationData::set_has_domain() {
_has_bits_[0] |= 0x00000002u;
}
inline void PublicKeyVerificationData::clear_has_domain() {
_has_bits_[0] &= ~0x00000002u;
}
inline void PublicKeyVerificationData::clear_domain() {
domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_domain();
}
inline const ::std::string& PublicKeyVerificationData::domain() const {
// @@protoc_insertion_point(field_get:enterprise_management.PublicKeyVerificationData.domain)
return domain_.GetNoArena();
}
inline void PublicKeyVerificationData::set_domain(const ::std::string& value) {
set_has_domain();
domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PublicKeyVerificationData.domain)
}
#if LANG_CXX11
inline void PublicKeyVerificationData::set_domain(::std::string&& value) {
set_has_domain();
domain_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PublicKeyVerificationData.domain)
}
#endif
inline void PublicKeyVerificationData::set_domain(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_domain();
domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PublicKeyVerificationData.domain)
}
inline void PublicKeyVerificationData::set_domain(const char* value, size_t size) {
set_has_domain();
domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PublicKeyVerificationData.domain)
}
inline ::std::string* PublicKeyVerificationData::mutable_domain() {
set_has_domain();
// @@protoc_insertion_point(field_mutable:enterprise_management.PublicKeyVerificationData.domain)
return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicKeyVerificationData::release_domain() {
// @@protoc_insertion_point(field_release:enterprise_management.PublicKeyVerificationData.domain)
clear_has_domain();
return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicKeyVerificationData::set_allocated_domain(::std::string* domain) {
if (domain != NULL) {
set_has_domain();
} else {
clear_has_domain();
}
domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PublicKeyVerificationData.domain)
}

// optional int32 new_public_key_version = 3;
inline bool PublicKeyVerificationData::has_new_public_key_version() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublicKeyVerificationData::set_has_new_public_key_version() {
_has_bits_[0] |= 0x00000004u;
}
inline void PublicKeyVerificationData::clear_has_new_public_key_version() {
_has_bits_[0] &= ~0x00000004u;
}
inline void PublicKeyVerificationData::clear_new_public_key_version() {
new_public_key_version_ = 0;
clear_has_new_public_key_version();
}
inline ::google::protobuf::int32 PublicKeyVerificationData::new_public_key_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.PublicKeyVerificationData.new_public_key_version)
return new_public_key_version_;
}
inline void PublicKeyVerificationData::set_new_public_key_version(::google::protobuf::int32 value) {
set_has_new_public_key_version();
new_public_key_version_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PublicKeyVerificationData.new_public_key_version)
}

// -------------------------------------------------------------------

// DevicePolicyRequest

// repeated .enterprise_management.PolicyFetchRequest request = 3;
inline int DevicePolicyRequest::request_size() const {
return request_.size();
}
inline void DevicePolicyRequest::clear_request() {
request_.Clear();
}
inline const ::enterprise_management::PolicyFetchRequest& DevicePolicyRequest::request(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DevicePolicyRequest.request)
return request_.Get(index);
}
inline ::enterprise_management::PolicyFetchRequest* DevicePolicyRequest::mutable_request(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DevicePolicyRequest.request)
return request_.Mutable(index);
}
inline ::enterprise_management::PolicyFetchRequest* DevicePolicyRequest::add_request() {
// @@protoc_insertion_point(field_add:enterprise_management.DevicePolicyRequest.request)
return request_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchRequest >*
DevicePolicyRequest::mutable_request() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DevicePolicyRequest.request)
return &request_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchRequest >&
DevicePolicyRequest::request() const {
// @@protoc_insertion_point(field_list:enterprise_management.DevicePolicyRequest.request)
return request_;
}

// -------------------------------------------------------------------

// DevicePolicyResponse

// repeated .enterprise_management.PolicyFetchResponse response = 3;
inline int DevicePolicyResponse::response_size() const {
return response_.size();
}
inline void DevicePolicyResponse::clear_response() {
response_.Clear();
}
inline const ::enterprise_management::PolicyFetchResponse& DevicePolicyResponse::response(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DevicePolicyResponse.response)
return response_.Get(index);
}
inline ::enterprise_management::PolicyFetchResponse* DevicePolicyResponse::mutable_response(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DevicePolicyResponse.response)
return response_.Mutable(index);
}
inline ::enterprise_management::PolicyFetchResponse* DevicePolicyResponse::add_response() {
// @@protoc_insertion_point(field_add:enterprise_management.DevicePolicyResponse.response)
return response_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchResponse >*
DevicePolicyResponse::mutable_response() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DevicePolicyResponse.response)
return &response_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchResponse >&
DevicePolicyResponse::response() const {
// @@protoc_insertion_point(field_list:enterprise_management.DevicePolicyResponse.response)
return response_;
}

// -------------------------------------------------------------------

// TimePeriod

// optional int64 start_timestamp = 1;
inline bool TimePeriod::has_start_timestamp() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimePeriod::set_has_start_timestamp() {
_has_bits_[0] |= 0x00000001u;
}
inline void TimePeriod::clear_has_start_timestamp() {
_has_bits_[0] &= ~0x00000001u;
}
inline void TimePeriod::clear_start_timestamp() {
start_timestamp_ = GOOGLE_LONGLONG(0);
clear_has_start_timestamp();
}
inline ::google::protobuf::int64 TimePeriod::start_timestamp() const {
// @@protoc_insertion_point(field_get:enterprise_management.TimePeriod.start_timestamp)
return start_timestamp_;
}
inline void TimePeriod::set_start_timestamp(::google::protobuf::int64 value) {
set_has_start_timestamp();
start_timestamp_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.TimePeriod.start_timestamp)
}

// optional int64 end_timestamp = 2;
inline bool TimePeriod::has_end_timestamp() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimePeriod::set_has_end_timestamp() {
_has_bits_[0] |= 0x00000002u;
}
inline void TimePeriod::clear_has_end_timestamp() {
_has_bits_[0] &= ~0x00000002u;
}
inline void TimePeriod::clear_end_timestamp() {
end_timestamp_ = GOOGLE_LONGLONG(0);
clear_has_end_timestamp();
}
inline ::google::protobuf::int64 TimePeriod::end_timestamp() const {
// @@protoc_insertion_point(field_get:enterprise_management.TimePeriod.end_timestamp)
return end_timestamp_;
}
inline void TimePeriod::set_end_timestamp(::google::protobuf::int64 value) {
set_has_end_timestamp();
end_timestamp_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.TimePeriod.end_timestamp)
}

// -------------------------------------------------------------------

// ActiveTimePeriod

// optional .enterprise_management.TimePeriod time_period = 1;
inline bool ActiveTimePeriod::has_time_period() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActiveTimePeriod::set_has_time_period() {
_has_bits_[0] |= 0x00000002u;
}
inline void ActiveTimePeriod::clear_has_time_period() {
_has_bits_[0] &= ~0x00000002u;
}
inline void ActiveTimePeriod::clear_time_period() {
if (time_period_ != NULL) time_period_->::enterprise_management::TimePeriod::Clear();
clear_has_time_period();
}
inline const ::enterprise_management::TimePeriod& ActiveTimePeriod::time_period() const {
// @@protoc_insertion_point(field_get:enterprise_management.ActiveTimePeriod.time_period)
return time_period_ != NULL ? *time_period_
: *::enterprise_management::TimePeriod::internal_default_instance();
}
inline ::enterprise_management::TimePeriod* ActiveTimePeriod::mutable_time_period() {
set_has_time_period();
if (time_period_ == NULL) {
time_period_ = new ::enterprise_management::TimePeriod;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.ActiveTimePeriod.time_period)
return time_period_;
}
inline ::enterprise_management::TimePeriod* ActiveTimePeriod::release_time_period() {
// @@protoc_insertion_point(field_release:enterprise_management.ActiveTimePeriod.time_period)
clear_has_time_period();
::enterprise_management::TimePeriod* temp = time_period_;
time_period_ = NULL;
return temp;
}
inline void ActiveTimePeriod::set_allocated_time_period(::enterprise_management::TimePeriod* time_period) {
delete time_period_;
time_period_ = time_period;
if (time_period) {
set_has_time_period();
} else {
clear_has_time_period();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveTimePeriod.time_period)
}

// optional int32 active_duration = 2;
inline bool ActiveTimePeriod::has_active_duration() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActiveTimePeriod::set_has_active_duration() {
_has_bits_[0] |= 0x00000004u;
}
inline void ActiveTimePeriod::clear_has_active_duration() {
_has_bits_[0] &= ~0x00000004u;
}
inline void ActiveTimePeriod::clear_active_duration() {
active_duration_ = 0;
clear_has_active_duration();
}
inline ::google::protobuf::int32 ActiveTimePeriod::active_duration() const {
// @@protoc_insertion_point(field_get:enterprise_management.ActiveTimePeriod.active_duration)
return active_duration_;
}
inline void ActiveTimePeriod::set_active_duration(::google::protobuf::int32 value) {
set_has_active_duration();
active_duration_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.ActiveTimePeriod.active_duration)
}

// optional string user_email = 3;
inline bool ActiveTimePeriod::has_user_email() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveTimePeriod::set_has_user_email() {
_has_bits_[0] |= 0x00000001u;
}
inline void ActiveTimePeriod::clear_has_user_email() {
_has_bits_[0] &= ~0x00000001u;
}
inline void ActiveTimePeriod::clear_user_email() {
user_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_user_email();
}
inline const ::std::string& ActiveTimePeriod::user_email() const {
// @@protoc_insertion_point(field_get:enterprise_management.ActiveTimePeriod.user_email)
return user_email_.GetNoArena();
}
inline void ActiveTimePeriod::set_user_email(const ::std::string& value) {
set_has_user_email();
user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ActiveTimePeriod.user_email)
}
#if LANG_CXX11
inline void ActiveTimePeriod::set_user_email(::std::string&& value) {
set_has_user_email();
user_email_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveTimePeriod.user_email)
}
#endif
inline void ActiveTimePeriod::set_user_email(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_user_email();
user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ActiveTimePeriod.user_email)
}
inline void ActiveTimePeriod::set_user_email(const char* value, size_t size) {
set_has_user_email();
user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveTimePeriod.user_email)
}
inline ::std::string* ActiveTimePeriod::mutable_user_email() {
set_has_user_email();
// @@protoc_insertion_point(field_mutable:enterprise_management.ActiveTimePeriod.user_email)
return user_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActiveTimePeriod::release_user_email() {
// @@protoc_insertion_point(field_release:enterprise_management.ActiveTimePeriod.user_email)
clear_has_user_email();
return user_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveTimePeriod::set_allocated_user_email(::std::string* user_email) {
if (user_email != NULL) {
set_has_user_email();
} else {
clear_has_user_email();
}
user_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_email);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveTimePeriod.user_email)
}

// -------------------------------------------------------------------

// NetworkInterface

// optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
inline bool NetworkInterface::has_type() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkInterface::set_has_type() {
_has_bits_[0] |= 0x00000010u;
}
inline void NetworkInterface::clear_has_type() {
_has_bits_[0] &= ~0x00000010u;
}
inline void NetworkInterface::clear_type() {
type_ = 0;
clear_has_type();
}
inline ::enterprise_management::NetworkInterface_NetworkDeviceType NetworkInterface::type() const {
// @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.type)
return static_cast< ::enterprise_management::NetworkInterface_NetworkDeviceType >(type_);
}
inline void NetworkInterface::set_type(::enterprise_management::NetworkInterface_NetworkDeviceType value) {
assert(::enterprise_management::NetworkInterface_NetworkDeviceType_IsValid(value));
set_has_type();
type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.type)
}

// optional string mac_address = 2;
inline bool NetworkInterface::has_mac_address() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkInterface::set_has_mac_address() {
_has_bits_[0] |= 0x00000001u;
}
inline void NetworkInterface::clear_has_mac_address() {
_has_bits_[0] &= ~0x00000001u;
}
inline void NetworkInterface::clear_mac_address() {
mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_mac_address();
}
inline const ::std::string& NetworkInterface::mac_address() const {
// @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.mac_address)
return mac_address_.GetNoArena();
}
inline void NetworkInterface::set_mac_address(const ::std::string& value) {
set_has_mac_address();
mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.mac_address)
}
#if LANG_CXX11
inline void NetworkInterface::set_mac_address(::std::string&& value) {
set_has_mac_address();
mac_address_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkInterface.mac_address)
}
#endif
inline void NetworkInterface::set_mac_address(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_mac_address();
mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.mac_address)
}
inline void NetworkInterface::set_mac_address(const char* value, size_t size) {
set_has_mac_address();
mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.mac_address)
}
inline ::std::string* NetworkInterface::mutable_mac_address() {
set_has_mac_address();
// @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.mac_address)
return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInterface::release_mac_address() {
// @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.mac_address)
clear_has_mac_address();
return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInterface::set_allocated_mac_address(::std::string* mac_address) {
if (mac_address != NULL) {
set_has_mac_address();
} else {
clear_has_mac_address();
}
mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.mac_address)
}

// optional string meid = 3;
inline bool NetworkInterface::has_meid() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkInterface::set_has_meid() {
_has_bits_[0] |= 0x00000002u;
}
inline void NetworkInterface::clear_has_meid() {
_has_bits_[0] &= ~0x00000002u;
}
inline void NetworkInterface::clear_meid() {
meid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_meid();
}
inline const ::std::string& NetworkInterface::meid() const {
// @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.meid)
return meid_.GetNoArena();
}
inline void NetworkInterface::set_meid(const ::std::string& value) {
set_has_meid();
meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.meid)
}
#if LANG_CXX11
inline void NetworkInterface::set_meid(::std::string&& value) {
set_has_meid();
meid_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkInterface.meid)
}
#endif
inline void NetworkInterface::set_meid(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_meid();
meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.meid)
}
inline void NetworkInterface::set_meid(const char* value, size_t size) {
set_has_meid();
meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.meid)
}
inline ::std::string* NetworkInterface::mutable_meid() {
set_has_meid();
// @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.meid)
return meid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInterface::release_meid() {
// @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.meid)
clear_has_meid();
return meid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInterface::set_allocated_meid(::std::string* meid) {
if (meid != NULL) {
set_has_meid();
} else {
clear_has_meid();
}
meid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meid);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.meid)
}

// optional string imei = 4;
inline bool NetworkInterface::has_imei() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkInterface::set_has_imei() {
_has_bits_[0] |= 0x00000004u;
}
inline void NetworkInterface::clear_has_imei() {
_has_bits_[0] &= ~0x00000004u;
}
inline void NetworkInterface::clear_imei() {
imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_imei();
}
inline const ::std::string& NetworkInterface::imei() const {
// @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.imei)
return imei_.GetNoArena();
}
inline void NetworkInterface::set_imei(const ::std::string& value) {
set_has_imei();
imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.imei)
}
#if LANG_CXX11
inline void NetworkInterface::set_imei(::std::string&& value) {
set_has_imei();
imei_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkInterface.imei)
}
#endif
inline void NetworkInterface::set_imei(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_imei();
imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.imei)
}
inline void NetworkInterface::set_imei(const char* value, size_t size) {
set_has_imei();
imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.imei)
}
inline ::std::string* NetworkInterface::mutable_imei() {
set_has_imei();
// @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.imei)
return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInterface::release_imei() {
// @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.imei)
clear_has_imei();
return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInterface::set_allocated_imei(::std::string* imei) {
if (imei != NULL) {
set_has_imei();
} else {
clear_has_imei();
}
imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.imei)
}

// optional string device_path = 5;
inline bool NetworkInterface::has_device_path() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkInterface::set_has_device_path() {
_has_bits_[0] |= 0x00000008u;
}
inline void NetworkInterface::clear_has_device_path() {
_has_bits_[0] &= ~0x00000008u;
}
inline void NetworkInterface::clear_device_path() {
device_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_device_path();
}
inline const ::std::string& NetworkInterface::device_path() const {
// @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.device_path)
return device_path_.GetNoArena();
}
inline void NetworkInterface::set_device_path(const ::std::string& value) {
set_has_device_path();
device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.device_path)
}
#if LANG_CXX11
inline void NetworkInterface::set_device_path(::std::string&& value) {
set_has_device_path();
device_path_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkInterface.device_path)
}
#endif
inline void NetworkInterface::set_device_path(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_device_path();
device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.device_path)
}
inline void NetworkInterface::set_device_path(const char* value, size_t size) {
set_has_device_path();
device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.device_path)
}
inline ::std::string* NetworkInterface::mutable_device_path() {
set_has_device_path();
// @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.device_path)
return device_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInterface::release_device_path() {
// @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.device_path)
clear_has_device_path();
return device_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInterface::set_allocated_device_path(::std::string* device_path) {
if (device_path != NULL) {
set_has_device_path();
} else {
clear_has_device_path();
}
device_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_path);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.device_path)
}

// -------------------------------------------------------------------

// NetworkState

// optional string device_path = 1;
inline bool NetworkState::has_device_path() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkState::set_has_device_path() {
_has_bits_[0] |= 0x00000001u;
}
inline void NetworkState::clear_has_device_path() {
_has_bits_[0] &= ~0x00000001u;
}
inline void NetworkState::clear_device_path() {
device_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_device_path();
}
inline const ::std::string& NetworkState::device_path() const {
// @@protoc_insertion_point(field_get:enterprise_management.NetworkState.device_path)
return device_path_.GetNoArena();
}
inline void NetworkState::set_device_path(const ::std::string& value) {
set_has_device_path();
device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.NetworkState.device_path)
}
#if LANG_CXX11
inline void NetworkState::set_device_path(::std::string&& value) {
set_has_device_path();
device_path_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkState.device_path)
}
#endif
inline void NetworkState::set_device_path(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_device_path();
device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.NetworkState.device_path)
}
inline void NetworkState::set_device_path(const char* value, size_t size) {
set_has_device_path();
device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkState.device_path)
}
inline ::std::string* NetworkState::mutable_device_path() {
set_has_device_path();
// @@protoc_insertion_point(field_mutable:enterprise_management.NetworkState.device_path)
return device_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkState::release_device_path() {
// @@protoc_insertion_point(field_release:enterprise_management.NetworkState.device_path)
clear_has_device_path();
return device_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkState::set_allocated_device_path(::std::string* device_path) {
if (device_path != NULL) {
set_has_device_path();
} else {
clear_has_device_path();
}
device_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_path);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkState.device_path)
}

// optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
inline bool NetworkState::has_connection_state() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkState::set_has_connection_state() {
_has_bits_[0] |= 0x00000008u;
}
inline void NetworkState::clear_has_connection_state() {
_has_bits_[0] &= ~0x00000008u;
}
inline void NetworkState::clear_connection_state() {
connection_state_ = 0;
clear_has_connection_state();
}
inline ::enterprise_management::NetworkState_ConnectionState NetworkState::connection_state() const {
// @@protoc_insertion_point(field_get:enterprise_management.NetworkState.connection_state)
return static_cast< ::enterprise_management::NetworkState_ConnectionState >(connection_state_);
}
inline void NetworkState::set_connection_state(::enterprise_management::NetworkState_ConnectionState value) {
assert(::enterprise_management::NetworkState_ConnectionState_IsValid(value));
set_has_connection_state();
connection_state_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.NetworkState.connection_state)
}

// optional int32 signal_strength = 3;
inline bool NetworkState::has_signal_strength() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkState::set_has_signal_strength() {
_has_bits_[0] |= 0x00000010u;
}
inline void NetworkState::clear_has_signal_strength() {
_has_bits_[0] &= ~0x00000010u;
}
inline void NetworkState::clear_signal_strength() {
signal_strength_ = 0;
clear_has_signal_strength();
}
inline ::google::protobuf::int32 NetworkState::signal_strength() const {
// @@protoc_insertion_point(field_get:enterprise_management.NetworkState.signal_strength)
return signal_strength_;
}
inline void NetworkState::set_signal_strength(::google::protobuf::int32 value) {
set_has_signal_strength();
signal_strength_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.NetworkState.signal_strength)
}

// optional string ip_address = 4;
inline bool NetworkState::has_ip_address() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkState::set_has_ip_address() {
_has_bits_[0] |= 0x00000002u;
}
inline void NetworkState::clear_has_ip_address() {
_has_bits_[0] &= ~0x00000002u;
}
inline void NetworkState::clear_ip_address() {
ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_ip_address();
}
inline const ::std::string& NetworkState::ip_address() const {
// @@protoc_insertion_point(field_get:enterprise_management.NetworkState.ip_address)
return ip_address_.GetNoArena();
}
inline void NetworkState::set_ip_address(const ::std::string& value) {
set_has_ip_address();
ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.NetworkState.ip_address)
}
#if LANG_CXX11
inline void NetworkState::set_ip_address(::std::string&& value) {
set_has_ip_address();
ip_address_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkState.ip_address)
}
#endif
inline void NetworkState::set_ip_address(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_ip_address();
ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.NetworkState.ip_address)
}
inline void NetworkState::set_ip_address(const char* value, size_t size) {
set_has_ip_address();
ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkState.ip_address)
}
inline ::std::string* NetworkState::mutable_ip_address() {
set_has_ip_address();
// @@protoc_insertion_point(field_mutable:enterprise_management.NetworkState.ip_address)
return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkState::release_ip_address() {
// @@protoc_insertion_point(field_release:enterprise_management.NetworkState.ip_address)
clear_has_ip_address();
return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkState::set_allocated_ip_address(::std::string* ip_address) {
if (ip_address != NULL) {
set_has_ip_address();
} else {
clear_has_ip_address();
}
ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkState.ip_address)
}

// optional string gateway = 5;
inline bool NetworkState::has_gateway() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkState::set_has_gateway() {
_has_bits_[0] |= 0x00000004u;
}
inline void NetworkState::clear_has_gateway() {
_has_bits_[0] &= ~0x00000004u;
}
inline void NetworkState::clear_gateway() {
gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_gateway();
}
inline const ::std::string& NetworkState::gateway() const {
// @@protoc_insertion_point(field_get:enterprise_management.NetworkState.gateway)
return gateway_.GetNoArena();
}
inline void NetworkState::set_gateway(const ::std::string& value) {
set_has_gateway();
gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.NetworkState.gateway)
}
#if LANG_CXX11
inline void NetworkState::set_gateway(::std::string&& value) {
set_has_gateway();
gateway_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkState.gateway)
}
#endif
inline void NetworkState::set_gateway(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_gateway();
gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.NetworkState.gateway)
}
inline void NetworkState::set_gateway(const char* value, size_t size) {
set_has_gateway();
gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkState.gateway)
}
inline ::std::string* NetworkState::mutable_gateway() {
set_has_gateway();
// @@protoc_insertion_point(field_mutable:enterprise_management.NetworkState.gateway)
return gateway_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkState::release_gateway() {
// @@protoc_insertion_point(field_release:enterprise_management.NetworkState.gateway)
clear_has_gateway();
return gateway_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkState::set_allocated_gateway(::std::string* gateway) {
if (gateway != NULL) {
set_has_gateway();
} else {
clear_has_gateway();
}
gateway_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkState.gateway)
}

// -------------------------------------------------------------------

// DeviceUser

// required .enterprise_management.DeviceUser.UserType type = 1;
inline bool DeviceUser::has_type() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceUser::set_has_type() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceUser::clear_has_type() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceUser::clear_type() {
type_ = 0;
clear_has_type();
}
inline ::enterprise_management::DeviceUser_UserType DeviceUser::type() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceUser.type)
return static_cast< ::enterprise_management::DeviceUser_UserType >(type_);
}
inline void DeviceUser::set_type(::enterprise_management::DeviceUser_UserType value) {
assert(::enterprise_management::DeviceUser_UserType_IsValid(value));
set_has_type();
type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceUser.type)
}

// optional string email = 2;
inline bool DeviceUser::has_email() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceUser::set_has_email() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceUser::clear_has_email() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceUser::clear_email() {
email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_email();
}
inline const ::std::string& DeviceUser::email() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceUser.email)
return email_.GetNoArena();
}
inline void DeviceUser::set_email(const ::std::string& value) {
set_has_email();
email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceUser.email)
}
#if LANG_CXX11
inline void DeviceUser::set_email(::std::string&& value) {
set_has_email();
email_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceUser.email)
}
#endif
inline void DeviceUser::set_email(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_email();
email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceUser.email)
}
inline void DeviceUser::set_email(const char* value, size_t size) {
set_has_email();
email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceUser.email)
}
inline ::std::string* DeviceUser::mutable_email() {
set_has_email();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceUser.email)
return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceUser::release_email() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceUser.email)
clear_has_email();
return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUser::set_allocated_email(::std::string* email) {
if (email != NULL) {
set_has_email();
} else {
clear_has_email();
}
email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceUser.email)
}

// -------------------------------------------------------------------

// VolumeInfo

// optional string volume_id = 1;
inline bool VolumeInfo::has_volume_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VolumeInfo::set_has_volume_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void VolumeInfo::clear_has_volume_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void VolumeInfo::clear_volume_id() {
volume_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_volume_id();
}
inline const ::std::string& VolumeInfo::volume_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.VolumeInfo.volume_id)
return volume_id_.GetNoArena();
}
inline void VolumeInfo::set_volume_id(const ::std::string& value) {
set_has_volume_id();
volume_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.VolumeInfo.volume_id)
}
#if LANG_CXX11
inline void VolumeInfo::set_volume_id(::std::string&& value) {
set_has_volume_id();
volume_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.VolumeInfo.volume_id)
}
#endif
inline void VolumeInfo::set_volume_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_volume_id();
volume_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.VolumeInfo.volume_id)
}
inline void VolumeInfo::set_volume_id(const char* value, size_t size) {
set_has_volume_id();
volume_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.VolumeInfo.volume_id)
}
inline ::std::string* VolumeInfo::mutable_volume_id() {
set_has_volume_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.VolumeInfo.volume_id)
return volume_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VolumeInfo::release_volume_id() {
// @@protoc_insertion_point(field_release:enterprise_management.VolumeInfo.volume_id)
clear_has_volume_id();
return volume_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VolumeInfo::set_allocated_volume_id(::std::string* volume_id) {
if (volume_id != NULL) {
set_has_volume_id();
} else {
clear_has_volume_id();
}
volume_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.VolumeInfo.volume_id)
}

// optional int64 storage_total = 2;
inline bool VolumeInfo::has_storage_total() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VolumeInfo::set_has_storage_total() {
_has_bits_[0] |= 0x00000002u;
}
inline void VolumeInfo::clear_has_storage_total() {
_has_bits_[0] &= ~0x00000002u;
}
inline void VolumeInfo::clear_storage_total() {
storage_total_ = GOOGLE_LONGLONG(0);
clear_has_storage_total();
}
inline ::google::protobuf::int64 VolumeInfo::storage_total() const {
// @@protoc_insertion_point(field_get:enterprise_management.VolumeInfo.storage_total)
return storage_total_;
}
inline void VolumeInfo::set_storage_total(::google::protobuf::int64 value) {
set_has_storage_total();
storage_total_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.VolumeInfo.storage_total)
}

// optional int64 storage_free = 3;
inline bool VolumeInfo::has_storage_free() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VolumeInfo::set_has_storage_free() {
_has_bits_[0] |= 0x00000004u;
}
inline void VolumeInfo::clear_has_storage_free() {
_has_bits_[0] &= ~0x00000004u;
}
inline void VolumeInfo::clear_storage_free() {
storage_free_ = GOOGLE_LONGLONG(0);
clear_has_storage_free();
}
inline ::google::protobuf::int64 VolumeInfo::storage_free() const {
// @@protoc_insertion_point(field_get:enterprise_management.VolumeInfo.storage_free)
return storage_free_;
}
inline void VolumeInfo::set_storage_free(::google::protobuf::int64 value) {
set_has_storage_free();
storage_free_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.VolumeInfo.storage_free)
}

// -------------------------------------------------------------------

// CPUTempInfo

// optional string cpu_label = 1;
inline bool CPUTempInfo::has_cpu_label() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPUTempInfo::set_has_cpu_label() {
_has_bits_[0] |= 0x00000001u;
}
inline void CPUTempInfo::clear_has_cpu_label() {
_has_bits_[0] &= ~0x00000001u;
}
inline void CPUTempInfo::clear_cpu_label() {
cpu_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_cpu_label();
}
inline const ::std::string& CPUTempInfo::cpu_label() const {
// @@protoc_insertion_point(field_get:enterprise_management.CPUTempInfo.cpu_label)
return cpu_label_.GetNoArena();
}
inline void CPUTempInfo::set_cpu_label(const ::std::string& value) {
set_has_cpu_label();
cpu_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.CPUTempInfo.cpu_label)
}
#if LANG_CXX11
inline void CPUTempInfo::set_cpu_label(::std::string&& value) {
set_has_cpu_label();
cpu_label_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.CPUTempInfo.cpu_label)
}
#endif
inline void CPUTempInfo::set_cpu_label(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_cpu_label();
cpu_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.CPUTempInfo.cpu_label)
}
inline void CPUTempInfo::set_cpu_label(const char* value, size_t size) {
set_has_cpu_label();
cpu_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.CPUTempInfo.cpu_label)
}
inline ::std::string* CPUTempInfo::mutable_cpu_label() {
set_has_cpu_label();
// @@protoc_insertion_point(field_mutable:enterprise_management.CPUTempInfo.cpu_label)
return cpu_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPUTempInfo::release_cpu_label() {
// @@protoc_insertion_point(field_release:enterprise_management.CPUTempInfo.cpu_label)
clear_has_cpu_label();
return cpu_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPUTempInfo::set_allocated_cpu_label(::std::string* cpu_label) {
if (cpu_label != NULL) {
set_has_cpu_label();
} else {
clear_has_cpu_label();
}
cpu_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_label);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.CPUTempInfo.cpu_label)
}

// optional int32 cpu_temp = 2;
inline bool CPUTempInfo::has_cpu_temp() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPUTempInfo::set_has_cpu_temp() {
_has_bits_[0] |= 0x00000002u;
}
inline void CPUTempInfo::clear_has_cpu_temp() {
_has_bits_[0] &= ~0x00000002u;
}
inline void CPUTempInfo::clear_cpu_temp() {
cpu_temp_ = 0;
clear_has_cpu_temp();
}
inline ::google::protobuf::int32 CPUTempInfo::cpu_temp() const {
// @@protoc_insertion_point(field_get:enterprise_management.CPUTempInfo.cpu_temp)
return cpu_temp_;
}
inline void CPUTempInfo::set_cpu_temp(::google::protobuf::int32 value) {
set_has_cpu_temp();
cpu_temp_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.CPUTempInfo.cpu_temp)
}

// -------------------------------------------------------------------

// DeviceStatusReportRequest

// optional string os_version = 1;
inline bool DeviceStatusReportRequest::has_os_version() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceStatusReportRequest::set_has_os_version() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceStatusReportRequest::clear_has_os_version() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceStatusReportRequest::clear_os_version() {
os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_os_version();
}
inline const ::std::string& DeviceStatusReportRequest::os_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.os_version)
return os_version_.GetNoArena();
}
inline void DeviceStatusReportRequest::set_os_version(const ::std::string& value) {
set_has_os_version();
os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.os_version)
}
#if LANG_CXX11
inline void DeviceStatusReportRequest::set_os_version(::std::string&& value) {
set_has_os_version();
os_version_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStatusReportRequest.os_version)
}
#endif
inline void DeviceStatusReportRequest::set_os_version(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_os_version();
os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.os_version)
}
inline void DeviceStatusReportRequest::set_os_version(const char* value, size_t size) {
set_has_os_version();
os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.os_version)
}
inline ::std::string* DeviceStatusReportRequest::mutable_os_version() {
set_has_os_version();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.os_version)
return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceStatusReportRequest::release_os_version() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.os_version)
clear_has_os_version();
return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceStatusReportRequest::set_allocated_os_version(::std::string* os_version) {
if (os_version != NULL) {
set_has_os_version();
} else {
clear_has_os_version();
}
os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.os_version)
}

// optional string firmware_version = 2;
inline bool DeviceStatusReportRequest::has_firmware_version() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceStatusReportRequest::set_has_firmware_version() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceStatusReportRequest::clear_has_firmware_version() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceStatusReportRequest::clear_firmware_version() {
firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_firmware_version();
}
inline const ::std::string& DeviceStatusReportRequest::firmware_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.firmware_version)
return firmware_version_.GetNoArena();
}
inline void DeviceStatusReportRequest::set_firmware_version(const ::std::string& value) {
set_has_firmware_version();
firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
#if LANG_CXX11
inline void DeviceStatusReportRequest::set_firmware_version(::std::string&& value) {
set_has_firmware_version();
firmware_version_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
#endif
inline void DeviceStatusReportRequest::set_firmware_version(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_firmware_version();
firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
inline void DeviceStatusReportRequest::set_firmware_version(const char* value, size_t size) {
set_has_firmware_version();
firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
inline ::std::string* DeviceStatusReportRequest::mutable_firmware_version() {
set_has_firmware_version();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.firmware_version)
return firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceStatusReportRequest::release_firmware_version() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.firmware_version)
clear_has_firmware_version();
return firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceStatusReportRequest::set_allocated_firmware_version(::std::string* firmware_version) {
if (firmware_version != NULL) {
set_has_firmware_version();
} else {
clear_has_firmware_version();
}
firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_version);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.firmware_version)
}

// optional string boot_mode = 3;
inline bool DeviceStatusReportRequest::has_boot_mode() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceStatusReportRequest::set_has_boot_mode() {
_has_bits_[0] |= 0x00000004u;
}
inline void DeviceStatusReportRequest::clear_has_boot_mode() {
_has_bits_[0] &= ~0x00000004u;
}
inline void DeviceStatusReportRequest::clear_boot_mode() {
boot_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_boot_mode();
}
inline const ::std::string& DeviceStatusReportRequest::boot_mode() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.boot_mode)
return boot_mode_.GetNoArena();
}
inline void DeviceStatusReportRequest::set_boot_mode(const ::std::string& value) {
set_has_boot_mode();
boot_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
#if LANG_CXX11
inline void DeviceStatusReportRequest::set_boot_mode(::std::string&& value) {
set_has_boot_mode();
boot_mode_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
#endif
inline void DeviceStatusReportRequest::set_boot_mode(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_boot_mode();
boot_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
inline void DeviceStatusReportRequest::set_boot_mode(const char* value, size_t size) {
set_has_boot_mode();
boot_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
inline ::std::string* DeviceStatusReportRequest::mutable_boot_mode() {
set_has_boot_mode();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.boot_mode)
return boot_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceStatusReportRequest::release_boot_mode() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.boot_mode)
clear_has_boot_mode();
return boot_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceStatusReportRequest::set_allocated_boot_mode(::std::string* boot_mode) {
if (boot_mode != NULL) {
set_has_boot_mode();
} else {
clear_has_boot_mode();
}
boot_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boot_mode);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.boot_mode)
}

// optional string browser_version = 5;
inline bool DeviceStatusReportRequest::has_browser_version() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceStatusReportRequest::set_has_browser_version() {
_has_bits_[0] |= 0x00000008u;
}
inline void DeviceStatusReportRequest::clear_has_browser_version() {
_has_bits_[0] &= ~0x00000008u;
}
inline void DeviceStatusReportRequest::clear_browser_version() {
browser_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_browser_version();
}
inline const ::std::string& DeviceStatusReportRequest::browser_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.browser_version)
return browser_version_.GetNoArena();
}
inline void DeviceStatusReportRequest::set_browser_version(const ::std::string& value) {
set_has_browser_version();
browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.browser_version)
}
#if LANG_CXX11
inline void DeviceStatusReportRequest::set_browser_version(::std::string&& value) {
set_has_browser_version();
browser_version_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStatusReportRequest.browser_version)
}
#endif
inline void DeviceStatusReportRequest::set_browser_version(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_browser_version();
browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.browser_version)
}
inline void DeviceStatusReportRequest::set_browser_version(const char* value, size_t size) {
set_has_browser_version();
browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.browser_version)
}
inline ::std::string* DeviceStatusReportRequest::mutable_browser_version() {
set_has_browser_version();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.browser_version)
return browser_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceStatusReportRequest::release_browser_version() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.browser_version)
clear_has_browser_version();
return browser_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceStatusReportRequest::set_allocated_browser_version(::std::string* browser_version) {
if (browser_version != NULL) {
set_has_browser_version();
} else {
clear_has_browser_version();
}
browser_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_version);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.browser_version)
}

// repeated .enterprise_management.ActiveTimePeriod active_period = 6;
inline int DeviceStatusReportRequest::active_period_size() const {
return active_period_.size();
}
inline void DeviceStatusReportRequest::clear_active_period() {
active_period_.Clear();
}
inline const ::enterprise_management::ActiveTimePeriod& DeviceStatusReportRequest::active_period(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.active_period)
return active_period_.Get(index);
}
inline ::enterprise_management::ActiveTimePeriod* DeviceStatusReportRequest::mutable_active_period(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.active_period)
return active_period_.Mutable(index);
}
inline ::enterprise_management::ActiveTimePeriod* DeviceStatusReportRequest::add_active_period() {
// @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.active_period)
return active_period_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::ActiveTimePeriod >*
DeviceStatusReportRequest::mutable_active_period() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.active_period)
return &active_period_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::ActiveTimePeriod >&
DeviceStatusReportRequest::active_period() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.active_period)
return active_period_;
}

// repeated .enterprise_management.NetworkInterface network_interface = 8;
inline int DeviceStatusReportRequest::network_interface_size() const {
return network_interface_.size();
}
inline void DeviceStatusReportRequest::clear_network_interface() {
network_interface_.Clear();
}
inline const ::enterprise_management::NetworkInterface& DeviceStatusReportRequest::network_interface(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.network_interface)
return network_interface_.Get(index);
}
inline ::enterprise_management::NetworkInterface* DeviceStatusReportRequest::mutable_network_interface(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.network_interface)
return network_interface_.Mutable(index);
}
inline ::enterprise_management::NetworkInterface* DeviceStatusReportRequest::add_network_interface() {
// @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.network_interface)
return network_interface_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkInterface >*
DeviceStatusReportRequest::mutable_network_interface() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.network_interface)
return &network_interface_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkInterface >&
DeviceStatusReportRequest::network_interface() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.network_interface)
return network_interface_;
}

// repeated .enterprise_management.DeviceUser user = 9;
inline int DeviceStatusReportRequest::user_size() const {
return user_.size();
}
inline void DeviceStatusReportRequest::clear_user() {
user_.Clear();
}
inline const ::enterprise_management::DeviceUser& DeviceStatusReportRequest::user(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.user)
return user_.Get(index);
}
inline ::enterprise_management::DeviceUser* DeviceStatusReportRequest::mutable_user(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.user)
return user_.Mutable(index);
}
inline ::enterprise_management::DeviceUser* DeviceStatusReportRequest::add_user() {
// @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.user)
return user_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::DeviceUser >*
DeviceStatusReportRequest::mutable_user() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.user)
return &user_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::DeviceUser >&
DeviceStatusReportRequest::user() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.user)
return user_;
}

// repeated .enterprise_management.VolumeInfo volume_info = 10;
inline int DeviceStatusReportRequest::volume_info_size() const {
return volume_info_.size();
}
inline void DeviceStatusReportRequest::clear_volume_info() {
volume_info_.Clear();
}
inline const ::enterprise_management::VolumeInfo& DeviceStatusReportRequest::volume_info(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.volume_info)
return volume_info_.Get(index);
}
inline ::enterprise_management::VolumeInfo* DeviceStatusReportRequest::mutable_volume_info(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.volume_info)
return volume_info_.Mutable(index);
}
inline ::enterprise_management::VolumeInfo* DeviceStatusReportRequest::add_volume_info() {
// @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.volume_info)
return volume_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >*
DeviceStatusReportRequest::mutable_volume_info() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.volume_info)
return &volume_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >&
DeviceStatusReportRequest::volume_info() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.volume_info)
return volume_info_;
}

// repeated .enterprise_management.NetworkState network_state = 11;
inline int DeviceStatusReportRequest::network_state_size() const {
return network_state_.size();
}
inline void DeviceStatusReportRequest::clear_network_state() {
network_state_.Clear();
}
inline const ::enterprise_management::NetworkState& DeviceStatusReportRequest::network_state(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.network_state)
return network_state_.Get(index);
}
inline ::enterprise_management::NetworkState* DeviceStatusReportRequest::mutable_network_state(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.network_state)
return network_state_.Mutable(index);
}
inline ::enterprise_management::NetworkState* DeviceStatusReportRequest::add_network_state() {
// @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.network_state)
return network_state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkState >*
DeviceStatusReportRequest::mutable_network_state() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.network_state)
return &network_state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkState >&
DeviceStatusReportRequest::network_state() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.network_state)
return network_state_;
}

// repeated int32 cpu_utilization_pct = 12;
inline int DeviceStatusReportRequest::cpu_utilization_pct_size() const {
return cpu_utilization_pct_.size();
}
inline void DeviceStatusReportRequest::clear_cpu_utilization_pct() {
cpu_utilization_pct_.Clear();
}
inline ::google::protobuf::int32 DeviceStatusReportRequest::cpu_utilization_pct(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
return cpu_utilization_pct_.Get(index);
}
inline void DeviceStatusReportRequest::set_cpu_utilization_pct(int index, ::google::protobuf::int32 value) {
cpu_utilization_pct_.Set(index, value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
}
inline void DeviceStatusReportRequest::add_cpu_utilization_pct(::google::protobuf::int32 value) {
cpu_utilization_pct_.Add(value);
// @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DeviceStatusReportRequest::cpu_utilization_pct() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
return cpu_utilization_pct_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DeviceStatusReportRequest::mutable_cpu_utilization_pct() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
return &cpu_utilization_pct_;
}

// optional int64 system_ram_total = 14;
inline bool DeviceStatusReportRequest::has_system_ram_total() const {
return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceStatusReportRequest::set_has_system_ram_total() {
_has_bits_[0] |= 0x00000080u;
}
inline void DeviceStatusReportRequest::clear_has_system_ram_total() {
_has_bits_[0] &= ~0x00000080u;
}
inline void DeviceStatusReportRequest::clear_system_ram_total() {
system_ram_total_ = GOOGLE_LONGLONG(0);
clear_has_system_ram_total();
}
inline ::google::protobuf::int64 DeviceStatusReportRequest::system_ram_total() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.system_ram_total)
return system_ram_total_;
}
inline void DeviceStatusReportRequest::set_system_ram_total(::google::protobuf::int64 value) {
set_has_system_ram_total();
system_ram_total_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.system_ram_total)
}

// repeated int64 system_ram_free = 15;
inline int DeviceStatusReportRequest::system_ram_free_size() const {
return system_ram_free_.size();
}
inline void DeviceStatusReportRequest::clear_system_ram_free() {
system_ram_free_.Clear();
}
inline ::google::protobuf::int64 DeviceStatusReportRequest::system_ram_free(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.system_ram_free)
return system_ram_free_.Get(index);
}
inline void DeviceStatusReportRequest::set_system_ram_free(int index, ::google::protobuf::int64 value) {
system_ram_free_.Set(index, value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.system_ram_free)
}
inline void DeviceStatusReportRequest::add_system_ram_free(::google::protobuf::int64 value) {
system_ram_free_.Add(value);
// @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.system_ram_free)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DeviceStatusReportRequest::system_ram_free() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.system_ram_free)
return system_ram_free_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DeviceStatusReportRequest::mutable_system_ram_free() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.system_ram_free)
return &system_ram_free_;
}

// repeated .enterprise_management.CPUTempInfo cpu_temp_info = 16;
inline int DeviceStatusReportRequest::cpu_temp_info_size() const {
return cpu_temp_info_.size();
}
inline void DeviceStatusReportRequest::clear_cpu_temp_info() {
cpu_temp_info_.Clear();
}
inline const ::enterprise_management::CPUTempInfo& DeviceStatusReportRequest::cpu_temp_info(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
return cpu_temp_info_.Get(index);
}
inline ::enterprise_management::CPUTempInfo* DeviceStatusReportRequest::mutable_cpu_temp_info(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
return cpu_temp_info_.Mutable(index);
}
inline ::enterprise_management::CPUTempInfo* DeviceStatusReportRequest::add_cpu_temp_info() {
// @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
return cpu_temp_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::CPUTempInfo >*
DeviceStatusReportRequest::mutable_cpu_temp_info() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
return &cpu_temp_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::CPUTempInfo >&
DeviceStatusReportRequest::cpu_temp_info() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
return cpu_temp_info_;
}

// optional .enterprise_management.OsUpdateStatus os_update_status = 17;
inline bool DeviceStatusReportRequest::has_os_update_status() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceStatusReportRequest::set_has_os_update_status() {
_has_bits_[0] |= 0x00000010u;
}
inline void DeviceStatusReportRequest::clear_has_os_update_status() {
_has_bits_[0] &= ~0x00000010u;
}
inline void DeviceStatusReportRequest::clear_os_update_status() {
if (os_update_status_ != NULL) os_update_status_->::enterprise_management::OsUpdateStatus::Clear();
clear_has_os_update_status();
}
inline const ::enterprise_management::OsUpdateStatus& DeviceStatusReportRequest::os_update_status() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.os_update_status)
return os_update_status_ != NULL ? *os_update_status_
: *::enterprise_management::OsUpdateStatus::internal_default_instance();
}
inline ::enterprise_management::OsUpdateStatus* DeviceStatusReportRequest::mutable_os_update_status() {
set_has_os_update_status();
if (os_update_status_ == NULL) {
os_update_status_ = new ::enterprise_management::OsUpdateStatus;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.os_update_status)
return os_update_status_;
}
inline ::enterprise_management::OsUpdateStatus* DeviceStatusReportRequest::release_os_update_status() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.os_update_status)
clear_has_os_update_status();
::enterprise_management::OsUpdateStatus* temp = os_update_status_;
os_update_status_ = NULL;
return temp;
}
inline void DeviceStatusReportRequest::set_allocated_os_update_status(::enterprise_management::OsUpdateStatus* os_update_status) {
delete os_update_status_;
os_update_status_ = os_update_status;
if (os_update_status) {
set_has_os_update_status();
} else {
clear_has_os_update_status();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.os_update_status)
}

// optional .enterprise_management.AppStatus running_kiosk_app = 18;
inline bool DeviceStatusReportRequest::has_running_kiosk_app() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceStatusReportRequest::set_has_running_kiosk_app() {
_has_bits_[0] |= 0x00000020u;
}
inline void DeviceStatusReportRequest::clear_has_running_kiosk_app() {
_has_bits_[0] &= ~0x00000020u;
}
inline void DeviceStatusReportRequest::clear_running_kiosk_app() {
if (running_kiosk_app_ != NULL) running_kiosk_app_->::enterprise_management::AppStatus::Clear();
clear_has_running_kiosk_app();
}
inline const ::enterprise_management::AppStatus& DeviceStatusReportRequest::running_kiosk_app() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
return running_kiosk_app_ != NULL ? *running_kiosk_app_
: *::enterprise_management::AppStatus::internal_default_instance();
}
inline ::enterprise_management::AppStatus* DeviceStatusReportRequest::mutable_running_kiosk_app() {
set_has_running_kiosk_app();
if (running_kiosk_app_ == NULL) {
running_kiosk_app_ = new ::enterprise_management::AppStatus;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
return running_kiosk_app_;
}
inline ::enterprise_management::AppStatus* DeviceStatusReportRequest::release_running_kiosk_app() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
clear_has_running_kiosk_app();
::enterprise_management::AppStatus* temp = running_kiosk_app_;
running_kiosk_app_ = NULL;
return temp;
}
inline void DeviceStatusReportRequest::set_allocated_running_kiosk_app(::enterprise_management::AppStatus* running_kiosk_app) {
delete running_kiosk_app_;
running_kiosk_app_ = running_kiosk_app;
if (running_kiosk_app) {
set_has_running_kiosk_app();
} else {
clear_has_running_kiosk_app();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
}

// optional int32 sound_volume = 19;
inline bool DeviceStatusReportRequest::has_sound_volume() const {
return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceStatusReportRequest::set_has_sound_volume() {
_has_bits_[0] |= 0x00000100u;
}
inline void DeviceStatusReportRequest::clear_has_sound_volume() {
_has_bits_[0] &= ~0x00000100u;
}
inline void DeviceStatusReportRequest::clear_sound_volume() {
sound_volume_ = 0;
clear_has_sound_volume();
}
inline ::google::protobuf::int32 DeviceStatusReportRequest::sound_volume() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.sound_volume)
return sound_volume_;
}
inline void DeviceStatusReportRequest::set_sound_volume(::google::protobuf::int32 value) {
set_has_sound_volume();
sound_volume_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.sound_volume)
}

// optional .enterprise_management.TpmVersionInfo tpm_version_info = 21;
inline bool DeviceStatusReportRequest::has_tpm_version_info() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceStatusReportRequest::set_has_tpm_version_info() {
_has_bits_[0] |= 0x00000040u;
}
inline void DeviceStatusReportRequest::clear_has_tpm_version_info() {
_has_bits_[0] &= ~0x00000040u;
}
inline void DeviceStatusReportRequest::clear_tpm_version_info() {
if (tpm_version_info_ != NULL) tpm_version_info_->::enterprise_management::TpmVersionInfo::Clear();
clear_has_tpm_version_info();
}
inline const ::enterprise_management::TpmVersionInfo& DeviceStatusReportRequest::tpm_version_info() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.tpm_version_info)
return tpm_version_info_ != NULL ? *tpm_version_info_
: *::enterprise_management::TpmVersionInfo::internal_default_instance();
}
inline ::enterprise_management::TpmVersionInfo* DeviceStatusReportRequest::mutable_tpm_version_info() {
set_has_tpm_version_info();
if (tpm_version_info_ == NULL) {
tpm_version_info_ = new ::enterprise_management::TpmVersionInfo;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.tpm_version_info)
return tpm_version_info_;
}
inline ::enterprise_management::TpmVersionInfo* DeviceStatusReportRequest::release_tpm_version_info() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.tpm_version_info)
clear_has_tpm_version_info();
::enterprise_management::TpmVersionInfo* temp = tpm_version_info_;
tpm_version_info_ = NULL;
return temp;
}
inline void DeviceStatusReportRequest::set_allocated_tpm_version_info(::enterprise_management::TpmVersionInfo* tpm_version_info) {
delete tpm_version_info_;
tpm_version_info_ = tpm_version_info;
if (tpm_version_info) {
set_has_tpm_version_info();
} else {
clear_has_tpm_version_info();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.tpm_version_info)
}

// -------------------------------------------------------------------

// OsUpdateStatus

// optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
inline bool OsUpdateStatus::has_update_status() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OsUpdateStatus::set_has_update_status() {
_has_bits_[0] |= 0x00000004u;
}
inline void OsUpdateStatus::clear_has_update_status() {
_has_bits_[0] &= ~0x00000004u;
}
inline void OsUpdateStatus::clear_update_status() {
update_status_ = 0;
clear_has_update_status();
}
inline ::enterprise_management::OsUpdateStatus_UpdateStatus OsUpdateStatus::update_status() const {
// @@protoc_insertion_point(field_get:enterprise_management.OsUpdateStatus.update_status)
return static_cast< ::enterprise_management::OsUpdateStatus_UpdateStatus >(update_status_);
}
inline void OsUpdateStatus::set_update_status(::enterprise_management::OsUpdateStatus_UpdateStatus value) {
assert(::enterprise_management::OsUpdateStatus_UpdateStatus_IsValid(value));
set_has_update_status();
update_status_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.OsUpdateStatus.update_status)
}

// optional string new_platform_version = 2;
inline bool OsUpdateStatus::has_new_platform_version() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OsUpdateStatus::set_has_new_platform_version() {
_has_bits_[0] |= 0x00000001u;
}
inline void OsUpdateStatus::clear_has_new_platform_version() {
_has_bits_[0] &= ~0x00000001u;
}
inline void OsUpdateStatus::clear_new_platform_version() {
new_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_new_platform_version();
}
inline const ::std::string& OsUpdateStatus::new_platform_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.OsUpdateStatus.new_platform_version)
return new_platform_version_.GetNoArena();
}
inline void OsUpdateStatus::set_new_platform_version(const ::std::string& value) {
set_has_new_platform_version();
new_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.OsUpdateStatus.new_platform_version)
}
#if LANG_CXX11
inline void OsUpdateStatus::set_new_platform_version(::std::string&& value) {
set_has_new_platform_version();
new_platform_version_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.OsUpdateStatus.new_platform_version)
}
#endif
inline void OsUpdateStatus::set_new_platform_version(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_new_platform_version();
new_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.OsUpdateStatus.new_platform_version)
}
inline void OsUpdateStatus::set_new_platform_version(const char* value, size_t size) {
set_has_new_platform_version();
new_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.OsUpdateStatus.new_platform_version)
}
inline ::std::string* OsUpdateStatus::mutable_new_platform_version() {
set_has_new_platform_version();
// @@protoc_insertion_point(field_mutable:enterprise_management.OsUpdateStatus.new_platform_version)
return new_platform_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OsUpdateStatus::release_new_platform_version() {
// @@protoc_insertion_point(field_release:enterprise_management.OsUpdateStatus.new_platform_version)
clear_has_new_platform_version();
return new_platform_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OsUpdateStatus::set_allocated_new_platform_version(::std::string* new_platform_version) {
if (new_platform_version != NULL) {
set_has_new_platform_version();
} else {
clear_has_new_platform_version();
}
new_platform_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_platform_version);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.OsUpdateStatus.new_platform_version)
}

// optional string new_required_platform_version = 3;
inline bool OsUpdateStatus::has_new_required_platform_version() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OsUpdateStatus::set_has_new_required_platform_version() {
_has_bits_[0] |= 0x00000002u;
}
inline void OsUpdateStatus::clear_has_new_required_platform_version() {
_has_bits_[0] &= ~0x00000002u;
}
inline void OsUpdateStatus::clear_new_required_platform_version() {
new_required_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_new_required_platform_version();
}
inline const ::std::string& OsUpdateStatus::new_required_platform_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.OsUpdateStatus.new_required_platform_version)
return new_required_platform_version_.GetNoArena();
}
inline void OsUpdateStatus::set_new_required_platform_version(const ::std::string& value) {
set_has_new_required_platform_version();
new_required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
#if LANG_CXX11
inline void OsUpdateStatus::set_new_required_platform_version(::std::string&& value) {
set_has_new_required_platform_version();
new_required_platform_version_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
#endif
inline void OsUpdateStatus::set_new_required_platform_version(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_new_required_platform_version();
new_required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
inline void OsUpdateStatus::set_new_required_platform_version(const char* value, size_t size) {
set_has_new_required_platform_version();
new_required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
inline ::std::string* OsUpdateStatus::mutable_new_required_platform_version() {
set_has_new_required_platform_version();
// @@protoc_insertion_point(field_mutable:enterprise_management.OsUpdateStatus.new_required_platform_version)
return new_required_platform_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OsUpdateStatus::release_new_required_platform_version() {
// @@protoc_insertion_point(field_release:enterprise_management.OsUpdateStatus.new_required_platform_version)
clear_has_new_required_platform_version();
return new_required_platform_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OsUpdateStatus::set_allocated_new_required_platform_version(::std::string* new_required_platform_version) {
if (new_required_platform_version != NULL) {
set_has_new_required_platform_version();
} else {
clear_has_new_required_platform_version();
}
new_required_platform_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_required_platform_version);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.OsUpdateStatus.new_required_platform_version)
}

// -------------------------------------------------------------------

// AppStatus

// optional string app_id = 1;
inline bool AppStatus::has_app_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppStatus::set_has_app_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void AppStatus::clear_has_app_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void AppStatus::clear_app_id() {
app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_app_id();
}
inline const ::std::string& AppStatus::app_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppStatus.app_id)
return app_id_.GetNoArena();
}
inline void AppStatus::set_app_id(const ::std::string& value) {
set_has_app_id();
app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.AppStatus.app_id)
}
#if LANG_CXX11
inline void AppStatus::set_app_id(::std::string&& value) {
set_has_app_id();
app_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppStatus.app_id)
}
#endif
inline void AppStatus::set_app_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_app_id();
app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.app_id)
}
inline void AppStatus::set_app_id(const char* value, size_t size) {
set_has_app_id();
app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.app_id)
}
inline ::std::string* AppStatus::mutable_app_id() {
set_has_app_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.app_id)
return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppStatus::release_app_id() {
// @@protoc_insertion_point(field_release:enterprise_management.AppStatus.app_id)
clear_has_app_id();
return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppStatus::set_allocated_app_id(::std::string* app_id) {
if (app_id != NULL) {
set_has_app_id();
} else {
clear_has_app_id();
}
app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.app_id)
}

// optional string extension_version = 2;
inline bool AppStatus::has_extension_version() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppStatus::set_has_extension_version() {
_has_bits_[0] |= 0x00000002u;
}
inline void AppStatus::clear_has_extension_version() {
_has_bits_[0] &= ~0x00000002u;
}
inline void AppStatus::clear_extension_version() {
extension_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_extension_version();
}
inline const ::std::string& AppStatus::extension_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppStatus.extension_version)
return extension_version_.GetNoArena();
}
inline void AppStatus::set_extension_version(const ::std::string& value) {
set_has_extension_version();
extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.AppStatus.extension_version)
}
#if LANG_CXX11
inline void AppStatus::set_extension_version(::std::string&& value) {
set_has_extension_version();
extension_version_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppStatus.extension_version)
}
#endif
inline void AppStatus::set_extension_version(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_extension_version();
extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.extension_version)
}
inline void AppStatus::set_extension_version(const char* value, size_t size) {
set_has_extension_version();
extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.extension_version)
}
inline ::std::string* AppStatus::mutable_extension_version() {
set_has_extension_version();
// @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.extension_version)
return extension_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppStatus::release_extension_version() {
// @@protoc_insertion_point(field_release:enterprise_management.AppStatus.extension_version)
clear_has_extension_version();
return extension_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppStatus::set_allocated_extension_version(::std::string* extension_version) {
if (extension_version != NULL) {
set_has_extension_version();
} else {
clear_has_extension_version();
}
extension_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_version);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.extension_version)
}

// optional string status = 3;
inline bool AppStatus::has_status() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppStatus::set_has_status() {
_has_bits_[0] |= 0x00000004u;
}
inline void AppStatus::clear_has_status() {
_has_bits_[0] &= ~0x00000004u;
}
inline void AppStatus::clear_status() {
status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_status();
}
inline const ::std::string& AppStatus::status() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppStatus.status)
return status_.GetNoArena();
}
inline void AppStatus::set_status(const ::std::string& value) {
set_has_status();
status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.AppStatus.status)
}
#if LANG_CXX11
inline void AppStatus::set_status(::std::string&& value) {
set_has_status();
status_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppStatus.status)
}
#endif
inline void AppStatus::set_status(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_status();
status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.status)
}
inline void AppStatus::set_status(const char* value, size_t size) {
set_has_status();
status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.status)
}
inline ::std::string* AppStatus::mutable_status() {
set_has_status();
// @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.status)
return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppStatus::release_status() {
// @@protoc_insertion_point(field_release:enterprise_management.AppStatus.status)
clear_has_status();
return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppStatus::set_allocated_status(::std::string* status) {
if (status != NULL) {
set_has_status();
} else {
clear_has_status();
}
status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.status)
}

// optional bool error = 4;
inline bool AppStatus::has_error() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppStatus::set_has_error() {
_has_bits_[0] |= 0x00000010u;
}
inline void AppStatus::clear_has_error() {
_has_bits_[0] &= ~0x00000010u;
}
inline void AppStatus::clear_error() {
error_ = false;
clear_has_error();
}
inline bool AppStatus::error() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppStatus.error)
return error_;
}
inline void AppStatus::set_error(bool value) {
set_has_error();
error_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.AppStatus.error)
}

// optional string required_platform_version = 5;
inline bool AppStatus::has_required_platform_version() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppStatus::set_has_required_platform_version() {
_has_bits_[0] |= 0x00000008u;
}
inline void AppStatus::clear_has_required_platform_version() {
_has_bits_[0] &= ~0x00000008u;
}
inline void AppStatus::clear_required_platform_version() {
required_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_required_platform_version();
}
inline const ::std::string& AppStatus::required_platform_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppStatus.required_platform_version)
return required_platform_version_.GetNoArena();
}
inline void AppStatus::set_required_platform_version(const ::std::string& value) {
set_has_required_platform_version();
required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.AppStatus.required_platform_version)
}
#if LANG_CXX11
inline void AppStatus::set_required_platform_version(::std::string&& value) {
set_has_required_platform_version();
required_platform_version_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppStatus.required_platform_version)
}
#endif
inline void AppStatus::set_required_platform_version(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_required_platform_version();
required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.required_platform_version)
}
inline void AppStatus::set_required_platform_version(const char* value, size_t size) {
set_has_required_platform_version();
required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.required_platform_version)
}
inline ::std::string* AppStatus::mutable_required_platform_version() {
set_has_required_platform_version();
// @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.required_platform_version)
return required_platform_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppStatus::release_required_platform_version() {
// @@protoc_insertion_point(field_release:enterprise_management.AppStatus.required_platform_version)
clear_has_required_platform_version();
return required_platform_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppStatus::set_allocated_required_platform_version(::std::string* required_platform_version) {
if (required_platform_version != NULL) {
set_has_required_platform_version();
} else {
clear_has_required_platform_version();
}
required_platform_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), required_platform_version);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.required_platform_version)
}

// -------------------------------------------------------------------

// ChromeUserProfileReport

// optional string id = 1;
inline bool ChromeUserProfileReport::has_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeUserProfileReport::set_has_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void ChromeUserProfileReport::clear_has_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void ChromeUserProfileReport::clear_id() {
id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_id();
}
inline const ::std::string& ChromeUserProfileReport::id() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.id)
return id_.GetNoArena();
}
inline void ChromeUserProfileReport::set_id(const ::std::string& value) {
set_has_id();
id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.id)
}
#if LANG_CXX11
inline void ChromeUserProfileReport::set_id(::std::string&& value) {
set_has_id();
id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.id)
}
#endif
inline void ChromeUserProfileReport::set_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_id();
id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.id)
}
inline void ChromeUserProfileReport::set_id(const char* value, size_t size) {
set_has_id();
id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.id)
}
inline ::std::string* ChromeUserProfileReport::mutable_id() {
set_has_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.id)
return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeUserProfileReport::release_id() {
// @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.id)
clear_has_id();
return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeUserProfileReport::set_allocated_id(::std::string* id) {
if (id != NULL) {
set_has_id();
} else {
clear_has_id();
}
id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.id)
}

// optional string chrome_signed_in_user = 2;
inline bool ChromeUserProfileReport::has_chrome_signed_in_user() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeUserProfileReport::set_has_chrome_signed_in_user() {
_has_bits_[0] |= 0x00000002u;
}
inline void ChromeUserProfileReport::clear_has_chrome_signed_in_user() {
_has_bits_[0] &= ~0x00000002u;
}
inline void ChromeUserProfileReport::clear_chrome_signed_in_user() {
chrome_signed_in_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_chrome_signed_in_user();
}
inline const ::std::string& ChromeUserProfileReport::chrome_signed_in_user() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
return chrome_signed_in_user_.GetNoArena();
}
inline void ChromeUserProfileReport::set_chrome_signed_in_user(const ::std::string& value) {
set_has_chrome_signed_in_user();
chrome_signed_in_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
}
#if LANG_CXX11
inline void ChromeUserProfileReport::set_chrome_signed_in_user(::std::string&& value) {
set_has_chrome_signed_in_user();
chrome_signed_in_user_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
}
#endif
inline void ChromeUserProfileReport::set_chrome_signed_in_user(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_chrome_signed_in_user();
chrome_signed_in_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
}
inline void ChromeUserProfileReport::set_chrome_signed_in_user(const char* value, size_t size) {
set_has_chrome_signed_in_user();
chrome_signed_in_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
}
inline ::std::string* ChromeUserProfileReport::mutable_chrome_signed_in_user() {
set_has_chrome_signed_in_user();
// @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
return chrome_signed_in_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeUserProfileReport::release_chrome_signed_in_user() {
// @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
clear_has_chrome_signed_in_user();
return chrome_signed_in_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeUserProfileReport::set_allocated_chrome_signed_in_user(::std::string* chrome_signed_in_user) {
if (chrome_signed_in_user != NULL) {
set_has_chrome_signed_in_user();
} else {
clear_has_chrome_signed_in_user();
}
chrome_signed_in_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrome_signed_in_user);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
}

// optional string extension_data = 3;
inline bool ChromeUserProfileReport::has_extension_data() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeUserProfileReport::set_has_extension_data() {
_has_bits_[0] |= 0x00000004u;
}
inline void ChromeUserProfileReport::clear_has_extension_data() {
_has_bits_[0] &= ~0x00000004u;
}
inline void ChromeUserProfileReport::clear_extension_data() {
extension_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_extension_data();
}
inline const ::std::string& ChromeUserProfileReport::extension_data() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.extension_data)
return extension_data_.GetNoArena();
}
inline void ChromeUserProfileReport::set_extension_data(const ::std::string& value) {
set_has_extension_data();
extension_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.extension_data)
}
#if LANG_CXX11
inline void ChromeUserProfileReport::set_extension_data(::std::string&& value) {
set_has_extension_data();
extension_data_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.extension_data)
}
#endif
inline void ChromeUserProfileReport::set_extension_data(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_extension_data();
extension_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.extension_data)
}
inline void ChromeUserProfileReport::set_extension_data(const char* value, size_t size) {
set_has_extension_data();
extension_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.extension_data)
}
inline ::std::string* ChromeUserProfileReport::mutable_extension_data() {
set_has_extension_data();
// @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.extension_data)
return extension_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeUserProfileReport::release_extension_data() {
// @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.extension_data)
clear_has_extension_data();
return extension_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeUserProfileReport::set_allocated_extension_data(::std::string* extension_data) {
if (extension_data != NULL) {
set_has_extension_data();
} else {
clear_has_extension_data();
}
extension_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_data);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.extension_data)
}

// optional string plugins = 4;
inline bool ChromeUserProfileReport::has_plugins() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeUserProfileReport::set_has_plugins() {
_has_bits_[0] |= 0x00000008u;
}
inline void ChromeUserProfileReport::clear_has_plugins() {
_has_bits_[0] &= ~0x00000008u;
}
inline void ChromeUserProfileReport::clear_plugins() {
plugins_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_plugins();
}
inline const ::std::string& ChromeUserProfileReport::plugins() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.plugins)
return plugins_.GetNoArena();
}
inline void ChromeUserProfileReport::set_plugins(const ::std::string& value) {
set_has_plugins();
plugins_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.plugins)
}
#if LANG_CXX11
inline void ChromeUserProfileReport::set_plugins(::std::string&& value) {
set_has_plugins();
plugins_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.plugins)
}
#endif
inline void ChromeUserProfileReport::set_plugins(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_plugins();
plugins_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.plugins)
}
inline void ChromeUserProfileReport::set_plugins(const char* value, size_t size) {
set_has_plugins();
plugins_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.plugins)
}
inline ::std::string* ChromeUserProfileReport::mutable_plugins() {
set_has_plugins();
// @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.plugins)
return plugins_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeUserProfileReport::release_plugins() {
// @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.plugins)
clear_has_plugins();
return plugins_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeUserProfileReport::set_allocated_plugins(::std::string* plugins) {
if (plugins != NULL) {
set_has_plugins();
} else {
clear_has_plugins();
}
plugins_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugins);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.plugins)
}

// optional string policy_data = 5;
inline bool ChromeUserProfileReport::has_policy_data() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChromeUserProfileReport::set_has_policy_data() {
_has_bits_[0] |= 0x00000010u;
}
inline void ChromeUserProfileReport::clear_has_policy_data() {
_has_bits_[0] &= ~0x00000010u;
}
inline void ChromeUserProfileReport::clear_policy_data() {
policy_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_data();
}
inline const ::std::string& ChromeUserProfileReport::policy_data() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.policy_data)
return policy_data_.GetNoArena();
}
inline void ChromeUserProfileReport::set_policy_data(const ::std::string& value) {
set_has_policy_data();
policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.policy_data)
}
#if LANG_CXX11
inline void ChromeUserProfileReport::set_policy_data(::std::string&& value) {
set_has_policy_data();
policy_data_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.policy_data)
}
#endif
inline void ChromeUserProfileReport::set_policy_data(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_data();
policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.policy_data)
}
inline void ChromeUserProfileReport::set_policy_data(const char* value, size_t size) {
set_has_policy_data();
policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.policy_data)
}
inline ::std::string* ChromeUserProfileReport::mutable_policy_data() {
set_has_policy_data();
// @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.policy_data)
return policy_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeUserProfileReport::release_policy_data() {
// @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.policy_data)
clear_has_policy_data();
return policy_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeUserProfileReport::set_allocated_policy_data(::std::string* policy_data) {
if (policy_data != NULL) {
set_has_policy_data();
} else {
clear_has_policy_data();
}
policy_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_data);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.policy_data)
}

// optional int64 policy_fetched_timestamp = 6;
inline bool ChromeUserProfileReport::has_policy_fetched_timestamp() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChromeUserProfileReport::set_has_policy_fetched_timestamp() {
_has_bits_[0] |= 0x00000040u;
}
inline void ChromeUserProfileReport::clear_has_policy_fetched_timestamp() {
_has_bits_[0] &= ~0x00000040u;
}
inline void ChromeUserProfileReport::clear_policy_fetched_timestamp() {
policy_fetched_timestamp_ = GOOGLE_LONGLONG(0);
clear_has_policy_fetched_timestamp();
}
inline ::google::protobuf::int64 ChromeUserProfileReport::policy_fetched_timestamp() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.policy_fetched_timestamp)
return policy_fetched_timestamp_;
}
inline void ChromeUserProfileReport::set_policy_fetched_timestamp(::google::protobuf::int64 value) {
set_has_policy_fetched_timestamp();
policy_fetched_timestamp_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.policy_fetched_timestamp)
}

// optional uint64 safe_browsing_warnings = 7;
inline bool ChromeUserProfileReport::has_safe_browsing_warnings() const {
return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChromeUserProfileReport::set_has_safe_browsing_warnings() {
_has_bits_[0] |= 0x00000080u;
}
inline void ChromeUserProfileReport::clear_has_safe_browsing_warnings() {
_has_bits_[0] &= ~0x00000080u;
}
inline void ChromeUserProfileReport::clear_safe_browsing_warnings() {
safe_browsing_warnings_ = GOOGLE_ULONGLONG(0);
clear_has_safe_browsing_warnings();
}
inline ::google::protobuf::uint64 ChromeUserProfileReport::safe_browsing_warnings() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.safe_browsing_warnings)
return safe_browsing_warnings_;
}
inline void ChromeUserProfileReport::set_safe_browsing_warnings(::google::protobuf::uint64 value) {
set_has_safe_browsing_warnings();
safe_browsing_warnings_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.safe_browsing_warnings)
}

// optional uint64 safe_browsing_warnings_click_through = 8;
inline bool ChromeUserProfileReport::has_safe_browsing_warnings_click_through() const {
return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChromeUserProfileReport::set_has_safe_browsing_warnings_click_through() {
_has_bits_[0] |= 0x00000100u;
}
inline void ChromeUserProfileReport::clear_has_safe_browsing_warnings_click_through() {
_has_bits_[0] &= ~0x00000100u;
}
inline void ChromeUserProfileReport::clear_safe_browsing_warnings_click_through() {
safe_browsing_warnings_click_through_ = GOOGLE_ULONGLONG(0);
clear_has_safe_browsing_warnings_click_through();
}
inline ::google::protobuf::uint64 ChromeUserProfileReport::safe_browsing_warnings_click_through() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.safe_browsing_warnings_click_through)
return safe_browsing_warnings_click_through_;
}
inline void ChromeUserProfileReport::set_safe_browsing_warnings_click_through(::google::protobuf::uint64 value) {
set_has_safe_browsing_warnings_click_through();
safe_browsing_warnings_click_through_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.safe_browsing_warnings_click_through)
}

// optional string name = 9;
inline bool ChromeUserProfileReport::has_name() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChromeUserProfileReport::set_has_name() {
_has_bits_[0] |= 0x00000020u;
}
inline void ChromeUserProfileReport::clear_has_name() {
_has_bits_[0] &= ~0x00000020u;
}
inline void ChromeUserProfileReport::clear_name() {
name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_name();
}
inline const ::std::string& ChromeUserProfileReport::name() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.name)
return name_.GetNoArena();
}
inline void ChromeUserProfileReport::set_name(const ::std::string& value) {
set_has_name();
name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.name)
}
#if LANG_CXX11
inline void ChromeUserProfileReport::set_name(::std::string&& value) {
set_has_name();
name_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.name)
}
#endif
inline void ChromeUserProfileReport::set_name(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_name();
name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.name)
}
inline void ChromeUserProfileReport::set_name(const char* value, size_t size) {
set_has_name();
name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.name)
}
inline ::std::string* ChromeUserProfileReport::mutable_name() {
set_has_name();
// @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.name)
return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeUserProfileReport::release_name() {
// @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.name)
clear_has_name();
return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeUserProfileReport::set_allocated_name(::std::string* name) {
if (name != NULL) {
set_has_name();
} else {
clear_has_name();
}
name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.name)
}

// -------------------------------------------------------------------

// BrowserReport

// optional string browser_version = 1;
inline bool BrowserReport::has_browser_version() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrowserReport::set_has_browser_version() {
_has_bits_[0] |= 0x00000001u;
}
inline void BrowserReport::clear_has_browser_version() {
_has_bits_[0] &= ~0x00000001u;
}
inline void BrowserReport::clear_browser_version() {
browser_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_browser_version();
}
inline const ::std::string& BrowserReport::browser_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.BrowserReport.browser_version)
return browser_version_.GetNoArena();
}
inline void BrowserReport::set_browser_version(const ::std::string& value) {
set_has_browser_version();
browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.BrowserReport.browser_version)
}
#if LANG_CXX11
inline void BrowserReport::set_browser_version(::std::string&& value) {
set_has_browser_version();
browser_version_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.BrowserReport.browser_version)
}
#endif
inline void BrowserReport::set_browser_version(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_browser_version();
browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.BrowserReport.browser_version)
}
inline void BrowserReport::set_browser_version(const char* value, size_t size) {
set_has_browser_version();
browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.BrowserReport.browser_version)
}
inline ::std::string* BrowserReport::mutable_browser_version() {
set_has_browser_version();
// @@protoc_insertion_point(field_mutable:enterprise_management.BrowserReport.browser_version)
return browser_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrowserReport::release_browser_version() {
// @@protoc_insertion_point(field_release:enterprise_management.BrowserReport.browser_version)
clear_has_browser_version();
return browser_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrowserReport::set_allocated_browser_version(::std::string* browser_version) {
if (browser_version != NULL) {
set_has_browser_version();
} else {
clear_has_browser_version();
}
browser_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_version);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.BrowserReport.browser_version)
}

// optional .enterprise_management.BrowserReport.Channel channel = 2;
inline bool BrowserReport::has_channel() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BrowserReport::set_has_channel() {
_has_bits_[0] |= 0x00000004u;
}
inline void BrowserReport::clear_has_channel() {
_has_bits_[0] &= ~0x00000004u;
}
inline void BrowserReport::clear_channel() {
channel_ = 0;
clear_has_channel();
}
inline ::enterprise_management::BrowserReport_Channel BrowserReport::channel() const {
// @@protoc_insertion_point(field_get:enterprise_management.BrowserReport.channel)
return static_cast< ::enterprise_management::BrowserReport_Channel >(channel_);
}
inline void BrowserReport::set_channel(::enterprise_management::BrowserReport_Channel value) {
assert(::enterprise_management::BrowserReport_Channel_IsValid(value));
set_has_channel();
channel_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.BrowserReport.channel)
}

// optional string executable_path = 3;
inline bool BrowserReport::has_executable_path() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrowserReport::set_has_executable_path() {
_has_bits_[0] |= 0x00000002u;
}
inline void BrowserReport::clear_has_executable_path() {
_has_bits_[0] &= ~0x00000002u;
}
inline void BrowserReport::clear_executable_path() {
executable_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_executable_path();
}
inline const ::std::string& BrowserReport::executable_path() const {
// @@protoc_insertion_point(field_get:enterprise_management.BrowserReport.executable_path)
return executable_path_.GetNoArena();
}
inline void BrowserReport::set_executable_path(const ::std::string& value) {
set_has_executable_path();
executable_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.BrowserReport.executable_path)
}
#if LANG_CXX11
inline void BrowserReport::set_executable_path(::std::string&& value) {
set_has_executable_path();
executable_path_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.BrowserReport.executable_path)
}
#endif
inline void BrowserReport::set_executable_path(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_executable_path();
executable_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.BrowserReport.executable_path)
}
inline void BrowserReport::set_executable_path(const char* value, size_t size) {
set_has_executable_path();
executable_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.BrowserReport.executable_path)
}
inline ::std::string* BrowserReport::mutable_executable_path() {
set_has_executable_path();
// @@protoc_insertion_point(field_mutable:enterprise_management.BrowserReport.executable_path)
return executable_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrowserReport::release_executable_path() {
// @@protoc_insertion_point(field_release:enterprise_management.BrowserReport.executable_path)
clear_has_executable_path();
return executable_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrowserReport::set_allocated_executable_path(::std::string* executable_path) {
if (executable_path != NULL) {
set_has_executable_path();
} else {
clear_has_executable_path();
}
executable_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), executable_path);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.BrowserReport.executable_path)
}

// repeated .enterprise_management.ChromeUserProfileReport chrome_user_profile_reports = 4;
inline int BrowserReport::chrome_user_profile_reports_size() const {
return chrome_user_profile_reports_.size();
}
inline void BrowserReport::clear_chrome_user_profile_reports() {
chrome_user_profile_reports_.Clear();
}
inline const ::enterprise_management::ChromeUserProfileReport& BrowserReport::chrome_user_profile_reports(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.BrowserReport.chrome_user_profile_reports)
return chrome_user_profile_reports_.Get(index);
}
inline ::enterprise_management::ChromeUserProfileReport* BrowserReport::mutable_chrome_user_profile_reports(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.BrowserReport.chrome_user_profile_reports)
return chrome_user_profile_reports_.Mutable(index);
}
inline ::enterprise_management::ChromeUserProfileReport* BrowserReport::add_chrome_user_profile_reports() {
// @@protoc_insertion_point(field_add:enterprise_management.BrowserReport.chrome_user_profile_reports)
return chrome_user_profile_reports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::ChromeUserProfileReport >*
BrowserReport::mutable_chrome_user_profile_reports() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.BrowserReport.chrome_user_profile_reports)
return &chrome_user_profile_reports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::ChromeUserProfileReport >&
BrowserReport::chrome_user_profile_reports() const {
// @@protoc_insertion_point(field_list:enterprise_management.BrowserReport.chrome_user_profile_reports)
return chrome_user_profile_reports_;
}

// -------------------------------------------------------------------

// ChromeDesktopReportRequest

// optional string machine_name = 1;
inline bool ChromeDesktopReportRequest::has_machine_name() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeDesktopReportRequest::set_has_machine_name() {
_has_bits_[0] |= 0x00000001u;
}
inline void ChromeDesktopReportRequest::clear_has_machine_name() {
_has_bits_[0] &= ~0x00000001u;
}
inline void ChromeDesktopReportRequest::clear_machine_name() {
machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_machine_name();
}
inline const ::std::string& ChromeDesktopReportRequest::machine_name() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeDesktopReportRequest.machine_name)
return machine_name_.GetNoArena();
}
inline void ChromeDesktopReportRequest::set_machine_name(const ::std::string& value) {
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ChromeDesktopReportRequest.machine_name)
}
#if LANG_CXX11
inline void ChromeDesktopReportRequest::set_machine_name(::std::string&& value) {
set_has_machine_name();
machine_name_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeDesktopReportRequest.machine_name)
}
#endif
inline void ChromeDesktopReportRequest::set_machine_name(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ChromeDesktopReportRequest.machine_name)
}
inline void ChromeDesktopReportRequest::set_machine_name(const char* value, size_t size) {
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeDesktopReportRequest.machine_name)
}
inline ::std::string* ChromeDesktopReportRequest::mutable_machine_name() {
set_has_machine_name();
// @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDesktopReportRequest.machine_name)
return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeDesktopReportRequest::release_machine_name() {
// @@protoc_insertion_point(field_release:enterprise_management.ChromeDesktopReportRequest.machine_name)
clear_has_machine_name();
return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeDesktopReportRequest::set_allocated_machine_name(::std::string* machine_name) {
if (machine_name != NULL) {
set_has_machine_name();
} else {
clear_has_machine_name();
}
machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDesktopReportRequest.machine_name)
}

// optional string os_info = 2;
inline bool ChromeDesktopReportRequest::has_os_info() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeDesktopReportRequest::set_has_os_info() {
_has_bits_[0] |= 0x00000002u;
}
inline void ChromeDesktopReportRequest::clear_has_os_info() {
_has_bits_[0] &= ~0x00000002u;
}
inline void ChromeDesktopReportRequest::clear_os_info() {
os_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_os_info();
}
inline const ::std::string& ChromeDesktopReportRequest::os_info() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeDesktopReportRequest.os_info)
return os_info_.GetNoArena();
}
inline void ChromeDesktopReportRequest::set_os_info(const ::std::string& value) {
set_has_os_info();
os_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ChromeDesktopReportRequest.os_info)
}
#if LANG_CXX11
inline void ChromeDesktopReportRequest::set_os_info(::std::string&& value) {
set_has_os_info();
os_info_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeDesktopReportRequest.os_info)
}
#endif
inline void ChromeDesktopReportRequest::set_os_info(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_os_info();
os_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ChromeDesktopReportRequest.os_info)
}
inline void ChromeDesktopReportRequest::set_os_info(const char* value, size_t size) {
set_has_os_info();
os_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeDesktopReportRequest.os_info)
}
inline ::std::string* ChromeDesktopReportRequest::mutable_os_info() {
set_has_os_info();
// @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDesktopReportRequest.os_info)
return os_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeDesktopReportRequest::release_os_info() {
// @@protoc_insertion_point(field_release:enterprise_management.ChromeDesktopReportRequest.os_info)
clear_has_os_info();
return os_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeDesktopReportRequest::set_allocated_os_info(::std::string* os_info) {
if (os_info != NULL) {
set_has_os_info();
} else {
clear_has_os_info();
}
os_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_info);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDesktopReportRequest.os_info)
}

// optional string os_user = 3;
inline bool ChromeDesktopReportRequest::has_os_user() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeDesktopReportRequest::set_has_os_user() {
_has_bits_[0] |= 0x00000004u;
}
inline void ChromeDesktopReportRequest::clear_has_os_user() {
_has_bits_[0] &= ~0x00000004u;
}
inline void ChromeDesktopReportRequest::clear_os_user() {
os_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_os_user();
}
inline const ::std::string& ChromeDesktopReportRequest::os_user() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeDesktopReportRequest.os_user)
return os_user_.GetNoArena();
}
inline void ChromeDesktopReportRequest::set_os_user(const ::std::string& value) {
set_has_os_user();
os_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ChromeDesktopReportRequest.os_user)
}
#if LANG_CXX11
inline void ChromeDesktopReportRequest::set_os_user(::std::string&& value) {
set_has_os_user();
os_user_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeDesktopReportRequest.os_user)
}
#endif
inline void ChromeDesktopReportRequest::set_os_user(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_os_user();
os_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ChromeDesktopReportRequest.os_user)
}
inline void ChromeDesktopReportRequest::set_os_user(const char* value, size_t size) {
set_has_os_user();
os_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeDesktopReportRequest.os_user)
}
inline ::std::string* ChromeDesktopReportRequest::mutable_os_user() {
set_has_os_user();
// @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDesktopReportRequest.os_user)
return os_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeDesktopReportRequest::release_os_user() {
// @@protoc_insertion_point(field_release:enterprise_management.ChromeDesktopReportRequest.os_user)
clear_has_os_user();
return os_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeDesktopReportRequest::set_allocated_os_user(::std::string* os_user) {
if (os_user != NULL) {
set_has_os_user();
} else {
clear_has_os_user();
}
os_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_user);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDesktopReportRequest.os_user)
}

// optional .enterprise_management.BrowserReport browser_report = 4;
inline bool ChromeDesktopReportRequest::has_browser_report() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeDesktopReportRequest::set_has_browser_report() {
_has_bits_[0] |= 0x00000008u;
}
inline void ChromeDesktopReportRequest::clear_has_browser_report() {
_has_bits_[0] &= ~0x00000008u;
}
inline void ChromeDesktopReportRequest::clear_browser_report() {
if (browser_report_ != NULL) browser_report_->::enterprise_management::BrowserReport::Clear();
clear_has_browser_report();
}
inline const ::enterprise_management::BrowserReport& ChromeDesktopReportRequest::browser_report() const {
// @@protoc_insertion_point(field_get:enterprise_management.ChromeDesktopReportRequest.browser_report)
return browser_report_ != NULL ? *browser_report_
: *::enterprise_management::BrowserReport::internal_default_instance();
}
inline ::enterprise_management::BrowserReport* ChromeDesktopReportRequest::mutable_browser_report() {
set_has_browser_report();
if (browser_report_ == NULL) {
browser_report_ = new ::enterprise_management::BrowserReport;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDesktopReportRequest.browser_report)
return browser_report_;
}
inline ::enterprise_management::BrowserReport* ChromeDesktopReportRequest::release_browser_report() {
// @@protoc_insertion_point(field_release:enterprise_management.ChromeDesktopReportRequest.browser_report)
clear_has_browser_report();
::enterprise_management::BrowserReport* temp = browser_report_;
browser_report_ = NULL;
return temp;
}
inline void ChromeDesktopReportRequest::set_allocated_browser_report(::enterprise_management::BrowserReport* browser_report) {
delete browser_report_;
browser_report_ = browser_report;
if (browser_report) {
set_has_browser_report();
} else {
clear_has_browser_report();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDesktopReportRequest.browser_report)
}

// -------------------------------------------------------------------

// PolicyValueValidationResult

// optional int32 policy_proto_tag = 1;
inline bool PolicyValueValidationResult::has_policy_proto_tag() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicyValueValidationResult::set_has_policy_proto_tag() {
_has_bits_[0] |= 0x00000004u;
}
inline void PolicyValueValidationResult::clear_has_policy_proto_tag() {
_has_bits_[0] &= ~0x00000004u;
}
inline void PolicyValueValidationResult::clear_policy_proto_tag() {
policy_proto_tag_ = 0;
clear_has_policy_proto_tag();
}
inline ::google::protobuf::int32 PolicyValueValidationResult::policy_proto_tag() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyValueValidationResult.policy_proto_tag)
return policy_proto_tag_;
}
inline void PolicyValueValidationResult::set_policy_proto_tag(::google::protobuf::int32 value) {
set_has_policy_proto_tag();
policy_proto_tag_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyValueValidationResult.policy_proto_tag)
}

// optional .enterprise_management.PolicyValueValidationResult.ValidationResultSeverity severity = 2;
inline bool PolicyValueValidationResult::has_severity() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PolicyValueValidationResult::set_has_severity() {
_has_bits_[0] |= 0x00000008u;
}
inline void PolicyValueValidationResult::clear_has_severity() {
_has_bits_[0] &= ~0x00000008u;
}
inline void PolicyValueValidationResult::clear_severity() {
severity_ = 0;
clear_has_severity();
}
inline ::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity PolicyValueValidationResult::severity() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyValueValidationResult.severity)
return static_cast< ::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity >(severity_);
}
inline void PolicyValueValidationResult::set_severity(::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity value) {
assert(::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity_IsValid(value));
set_has_severity();
severity_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyValueValidationResult.severity)
}

// optional string detailed_error_path = 3;
inline bool PolicyValueValidationResult::has_detailed_error_path() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicyValueValidationResult::set_has_detailed_error_path() {
_has_bits_[0] |= 0x00000001u;
}
inline void PolicyValueValidationResult::clear_has_detailed_error_path() {
_has_bits_[0] &= ~0x00000001u;
}
inline void PolicyValueValidationResult::clear_detailed_error_path() {
detailed_error_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_detailed_error_path();
}
inline const ::std::string& PolicyValueValidationResult::detailed_error_path() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyValueValidationResult.detailed_error_path)
return detailed_error_path_.GetNoArena();
}
inline void PolicyValueValidationResult::set_detailed_error_path(const ::std::string& value) {
set_has_detailed_error_path();
detailed_error_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyValueValidationResult.detailed_error_path)
}
#if LANG_CXX11
inline void PolicyValueValidationResult::set_detailed_error_path(::std::string&& value) {
set_has_detailed_error_path();
detailed_error_path_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyValueValidationResult.detailed_error_path)
}
#endif
inline void PolicyValueValidationResult::set_detailed_error_path(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_detailed_error_path();
detailed_error_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyValueValidationResult.detailed_error_path)
}
inline void PolicyValueValidationResult::set_detailed_error_path(const char* value, size_t size) {
set_has_detailed_error_path();
detailed_error_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyValueValidationResult.detailed_error_path)
}
inline ::std::string* PolicyValueValidationResult::mutable_detailed_error_path() {
set_has_detailed_error_path();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyValueValidationResult.detailed_error_path)
return detailed_error_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyValueValidationResult::release_detailed_error_path() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyValueValidationResult.detailed_error_path)
clear_has_detailed_error_path();
return detailed_error_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyValueValidationResult::set_allocated_detailed_error_path(::std::string* detailed_error_path) {
if (detailed_error_path != NULL) {
set_has_detailed_error_path();
} else {
clear_has_detailed_error_path();
}
detailed_error_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detailed_error_path);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyValueValidationResult.detailed_error_path)
}

// optional .enterprise_management.PolicyValueValidationResult.ErrorType error_type = 4;
inline bool PolicyValueValidationResult::has_error_type() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PolicyValueValidationResult::set_has_error_type() {
_has_bits_[0] |= 0x00000010u;
}
inline void PolicyValueValidationResult::clear_has_error_type() {
_has_bits_[0] &= ~0x00000010u;
}
inline void PolicyValueValidationResult::clear_error_type() {
error_type_ = 0;
clear_has_error_type();
}
inline ::enterprise_management::PolicyValueValidationResult_ErrorType PolicyValueValidationResult::error_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyValueValidationResult.error_type)
return static_cast< ::enterprise_management::PolicyValueValidationResult_ErrorType >(error_type_);
}
inline void PolicyValueValidationResult::set_error_type(::enterprise_management::PolicyValueValidationResult_ErrorType value) {
assert(::enterprise_management::PolicyValueValidationResult_ErrorType_IsValid(value));
set_has_error_type();
error_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyValueValidationResult.error_type)
}

// optional string error_debug_info = 5;
inline bool PolicyValueValidationResult::has_error_debug_info() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyValueValidationResult::set_has_error_debug_info() {
_has_bits_[0] |= 0x00000002u;
}
inline void PolicyValueValidationResult::clear_has_error_debug_info() {
_has_bits_[0] &= ~0x00000002u;
}
inline void PolicyValueValidationResult::clear_error_debug_info() {
error_debug_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_error_debug_info();
}
inline const ::std::string& PolicyValueValidationResult::error_debug_info() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyValueValidationResult.error_debug_info)
return error_debug_info_.GetNoArena();
}
inline void PolicyValueValidationResult::set_error_debug_info(const ::std::string& value) {
set_has_error_debug_info();
error_debug_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyValueValidationResult.error_debug_info)
}
#if LANG_CXX11
inline void PolicyValueValidationResult::set_error_debug_info(::std::string&& value) {
set_has_error_debug_info();
error_debug_info_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyValueValidationResult.error_debug_info)
}
#endif
inline void PolicyValueValidationResult::set_error_debug_info(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_error_debug_info();
error_debug_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyValueValidationResult.error_debug_info)
}
inline void PolicyValueValidationResult::set_error_debug_info(const char* value, size_t size) {
set_has_error_debug_info();
error_debug_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyValueValidationResult.error_debug_info)
}
inline ::std::string* PolicyValueValidationResult::mutable_error_debug_info() {
set_has_error_debug_info();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyValueValidationResult.error_debug_info)
return error_debug_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyValueValidationResult::release_error_debug_info() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyValueValidationResult.error_debug_info)
clear_has_error_debug_info();
return error_debug_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyValueValidationResult::set_allocated_error_debug_info(::std::string* error_debug_info) {
if (error_debug_info != NULL) {
set_has_error_debug_info();
} else {
clear_has_error_debug_info();
}
error_debug_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_debug_info);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyValueValidationResult.error_debug_info)
}

// -------------------------------------------------------------------

// PolicyValidationReportRequest

// optional string policy_type = 1;
inline bool PolicyValidationReportRequest::has_policy_type() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicyValidationReportRequest::set_has_policy_type() {
_has_bits_[0] |= 0x00000001u;
}
inline void PolicyValidationReportRequest::clear_has_policy_type() {
_has_bits_[0] &= ~0x00000001u;
}
inline void PolicyValidationReportRequest::clear_policy_type() {
policy_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_type();
}
inline const ::std::string& PolicyValidationReportRequest::policy_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyValidationReportRequest.policy_type)
return policy_type_.GetNoArena();
}
inline void PolicyValidationReportRequest::set_policy_type(const ::std::string& value) {
set_has_policy_type();
policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyValidationReportRequest.policy_type)
}
#if LANG_CXX11
inline void PolicyValidationReportRequest::set_policy_type(::std::string&& value) {
set_has_policy_type();
policy_type_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyValidationReportRequest.policy_type)
}
#endif
inline void PolicyValidationReportRequest::set_policy_type(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_type();
policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyValidationReportRequest.policy_type)
}
inline void PolicyValidationReportRequest::set_policy_type(const char* value, size_t size) {
set_has_policy_type();
policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyValidationReportRequest.policy_type)
}
inline ::std::string* PolicyValidationReportRequest::mutable_policy_type() {
set_has_policy_type();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyValidationReportRequest.policy_type)
return policy_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyValidationReportRequest::release_policy_type() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyValidationReportRequest.policy_type)
clear_has_policy_type();
return policy_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyValidationReportRequest::set_allocated_policy_type(::std::string* policy_type) {
if (policy_type != NULL) {
set_has_policy_type();
} else {
clear_has_policy_type();
}
policy_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_type);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyValidationReportRequest.policy_type)
}

// optional string policy_token = 2;
inline bool PolicyValidationReportRequest::has_policy_token() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyValidationReportRequest::set_has_policy_token() {
_has_bits_[0] |= 0x00000002u;
}
inline void PolicyValidationReportRequest::clear_has_policy_token() {
_has_bits_[0] &= ~0x00000002u;
}
inline void PolicyValidationReportRequest::clear_policy_token() {
policy_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_policy_token();
}
inline const ::std::string& PolicyValidationReportRequest::policy_token() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyValidationReportRequest.policy_token)
return policy_token_.GetNoArena();
}
inline void PolicyValidationReportRequest::set_policy_token(const ::std::string& value) {
set_has_policy_token();
policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicyValidationReportRequest.policy_token)
}
#if LANG_CXX11
inline void PolicyValidationReportRequest::set_policy_token(::std::string&& value) {
set_has_policy_token();
policy_token_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyValidationReportRequest.policy_token)
}
#endif
inline void PolicyValidationReportRequest::set_policy_token(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_policy_token();
policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicyValidationReportRequest.policy_token)
}
inline void PolicyValidationReportRequest::set_policy_token(const char* value, size_t size) {
set_has_policy_token();
policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyValidationReportRequest.policy_token)
}
inline ::std::string* PolicyValidationReportRequest::mutable_policy_token() {
set_has_policy_token();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyValidationReportRequest.policy_token)
return policy_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyValidationReportRequest::release_policy_token() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicyValidationReportRequest.policy_token)
clear_has_policy_token();
return policy_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyValidationReportRequest::set_allocated_policy_token(::std::string* policy_token) {
if (policy_token != NULL) {
set_has_policy_token();
} else {
clear_has_policy_token();
}
policy_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_token);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyValidationReportRequest.policy_token)
}

// optional .enterprise_management.PolicyValidationReportRequest.ValidationResultType validation_result_type = 3;
inline bool PolicyValidationReportRequest::has_validation_result_type() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicyValidationReportRequest::set_has_validation_result_type() {
_has_bits_[0] |= 0x00000004u;
}
inline void PolicyValidationReportRequest::clear_has_validation_result_type() {
_has_bits_[0] &= ~0x00000004u;
}
inline void PolicyValidationReportRequest::clear_validation_result_type() {
validation_result_type_ = 0;
clear_has_validation_result_type();
}
inline ::enterprise_management::PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::validation_result_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyValidationReportRequest.validation_result_type)
return static_cast< ::enterprise_management::PolicyValidationReportRequest_ValidationResultType >(validation_result_type_);
}
inline void PolicyValidationReportRequest::set_validation_result_type(::enterprise_management::PolicyValidationReportRequest_ValidationResultType value) {
assert(::enterprise_management::PolicyValidationReportRequest_ValidationResultType_IsValid(value));
set_has_validation_result_type();
validation_result_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.PolicyValidationReportRequest.validation_result_type)
}

// repeated .enterprise_management.PolicyValueValidationResult policy_value_validation_results = 4;
inline int PolicyValidationReportRequest::policy_value_validation_results_size() const {
return policy_value_validation_results_.size();
}
inline void PolicyValidationReportRequest::clear_policy_value_validation_results() {
policy_value_validation_results_.Clear();
}
inline const ::enterprise_management::PolicyValueValidationResult& PolicyValidationReportRequest::policy_value_validation_results(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicyValidationReportRequest.policy_value_validation_results)
return policy_value_validation_results_.Get(index);
}
inline ::enterprise_management::PolicyValueValidationResult* PolicyValidationReportRequest::mutable_policy_value_validation_results(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicyValidationReportRequest.policy_value_validation_results)
return policy_value_validation_results_.Mutable(index);
}
inline ::enterprise_management::PolicyValueValidationResult* PolicyValidationReportRequest::add_policy_value_validation_results() {
// @@protoc_insertion_point(field_add:enterprise_management.PolicyValidationReportRequest.policy_value_validation_results)
return policy_value_validation_results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyValueValidationResult >*
PolicyValidationReportRequest::mutable_policy_value_validation_results() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.PolicyValidationReportRequest.policy_value_validation_results)
return &policy_value_validation_results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyValueValidationResult >&
PolicyValidationReportRequest::policy_value_validation_results() const {
// @@protoc_insertion_point(field_list:enterprise_management.PolicyValidationReportRequest.policy_value_validation_results)
return policy_value_validation_results_;
}

// -------------------------------------------------------------------

// PolicyValidationReportResponse

// -------------------------------------------------------------------

// AndroidStatus

// optional string status_payload = 1;
inline bool AndroidStatus::has_status_payload() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidStatus::set_has_status_payload() {
_has_bits_[0] |= 0x00000001u;
}
inline void AndroidStatus::clear_has_status_payload() {
_has_bits_[0] &= ~0x00000001u;
}
inline void AndroidStatus::clear_status_payload() {
status_payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_status_payload();
}
inline const ::std::string& AndroidStatus::status_payload() const {
// @@protoc_insertion_point(field_get:enterprise_management.AndroidStatus.status_payload)
return status_payload_.GetNoArena();
}
inline void AndroidStatus::set_status_payload(const ::std::string& value) {
set_has_status_payload();
status_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.AndroidStatus.status_payload)
}
#if LANG_CXX11
inline void AndroidStatus::set_status_payload(::std::string&& value) {
set_has_status_payload();
status_payload_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.AndroidStatus.status_payload)
}
#endif
inline void AndroidStatus::set_status_payload(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_status_payload();
status_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.AndroidStatus.status_payload)
}
inline void AndroidStatus::set_status_payload(const char* value, size_t size) {
set_has_status_payload();
status_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.AndroidStatus.status_payload)
}
inline ::std::string* AndroidStatus::mutable_status_payload() {
set_has_status_payload();
// @@protoc_insertion_point(field_mutable:enterprise_management.AndroidStatus.status_payload)
return status_payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidStatus::release_status_payload() {
// @@protoc_insertion_point(field_release:enterprise_management.AndroidStatus.status_payload)
clear_has_status_payload();
return status_payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidStatus::set_allocated_status_payload(::std::string* status_payload) {
if (status_payload != NULL) {
set_has_status_payload();
} else {
clear_has_status_payload();
}
status_payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_payload);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.AndroidStatus.status_payload)
}

// optional string droid_guard_info = 2;
inline bool AndroidStatus::has_droid_guard_info() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AndroidStatus::set_has_droid_guard_info() {
_has_bits_[0] |= 0x00000002u;
}
inline void AndroidStatus::clear_has_droid_guard_info() {
_has_bits_[0] &= ~0x00000002u;
}
inline void AndroidStatus::clear_droid_guard_info() {
droid_guard_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_droid_guard_info();
}
inline const ::std::string& AndroidStatus::droid_guard_info() const {
// @@protoc_insertion_point(field_get:enterprise_management.AndroidStatus.droid_guard_info)
return droid_guard_info_.GetNoArena();
}
inline void AndroidStatus::set_droid_guard_info(const ::std::string& value) {
set_has_droid_guard_info();
droid_guard_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.AndroidStatus.droid_guard_info)
}
#if LANG_CXX11
inline void AndroidStatus::set_droid_guard_info(::std::string&& value) {
set_has_droid_guard_info();
droid_guard_info_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.AndroidStatus.droid_guard_info)
}
#endif
inline void AndroidStatus::set_droid_guard_info(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_droid_guard_info();
droid_guard_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.AndroidStatus.droid_guard_info)
}
inline void AndroidStatus::set_droid_guard_info(const char* value, size_t size) {
set_has_droid_guard_info();
droid_guard_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.AndroidStatus.droid_guard_info)
}
inline ::std::string* AndroidStatus::mutable_droid_guard_info() {
set_has_droid_guard_info();
// @@protoc_insertion_point(field_mutable:enterprise_management.AndroidStatus.droid_guard_info)
return droid_guard_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidStatus::release_droid_guard_info() {
// @@protoc_insertion_point(field_release:enterprise_management.AndroidStatus.droid_guard_info)
clear_has_droid_guard_info();
return droid_guard_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidStatus::set_allocated_droid_guard_info(::std::string* droid_guard_info) {
if (droid_guard_info != NULL) {
set_has_droid_guard_info();
} else {
clear_has_droid_guard_info();
}
droid_guard_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), droid_guard_info);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.AndroidStatus.droid_guard_info)
}

// -------------------------------------------------------------------

// SessionStatusReportRequest

// optional string device_local_account_id = 4;
inline bool SessionStatusReportRequest::has_device_local_account_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionStatusReportRequest::set_has_device_local_account_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void SessionStatusReportRequest::clear_has_device_local_account_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void SessionStatusReportRequest::clear_device_local_account_id() {
device_local_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_device_local_account_id();
}
inline const ::std::string& SessionStatusReportRequest::device_local_account_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.device_local_account_id)
return device_local_account_id_.GetNoArena();
}
inline void SessionStatusReportRequest::set_device_local_account_id(const ::std::string& value) {
set_has_device_local_account_id();
device_local_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
#if LANG_CXX11
inline void SessionStatusReportRequest::set_device_local_account_id(::std::string&& value) {
set_has_device_local_account_id();
device_local_account_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
#endif
inline void SessionStatusReportRequest::set_device_local_account_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_device_local_account_id();
device_local_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
inline void SessionStatusReportRequest::set_device_local_account_id(const char* value, size_t size) {
set_has_device_local_account_id();
device_local_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
inline ::std::string* SessionStatusReportRequest::mutable_device_local_account_id() {
set_has_device_local_account_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.device_local_account_id)
return device_local_account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionStatusReportRequest::release_device_local_account_id() {
// @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportRequest.device_local_account_id)
clear_has_device_local_account_id();
return device_local_account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionStatusReportRequest::set_allocated_device_local_account_id(::std::string* device_local_account_id) {
if (device_local_account_id != NULL) {
set_has_device_local_account_id();
} else {
clear_has_device_local_account_id();
}
device_local_account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_local_account_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}

// repeated .enterprise_management.AppStatus installed_apps = 5;
inline int SessionStatusReportRequest::installed_apps_size() const {
return installed_apps_.size();
}
inline void SessionStatusReportRequest::clear_installed_apps() {
installed_apps_.Clear();
}
inline const ::enterprise_management::AppStatus& SessionStatusReportRequest::installed_apps(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.installed_apps)
return installed_apps_.Get(index);
}
inline ::enterprise_management::AppStatus* SessionStatusReportRequest::mutable_installed_apps(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.installed_apps)
return installed_apps_.Mutable(index);
}
inline ::enterprise_management::AppStatus* SessionStatusReportRequest::add_installed_apps() {
// @@protoc_insertion_point(field_add:enterprise_management.SessionStatusReportRequest.installed_apps)
return installed_apps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppStatus >*
SessionStatusReportRequest::mutable_installed_apps() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.SessionStatusReportRequest.installed_apps)
return &installed_apps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppStatus >&
SessionStatusReportRequest::installed_apps() const {
// @@protoc_insertion_point(field_list:enterprise_management.SessionStatusReportRequest.installed_apps)
return installed_apps_;
}

// optional .enterprise_management.AndroidStatus android_status = 7;
inline bool SessionStatusReportRequest::has_android_status() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionStatusReportRequest::set_has_android_status() {
_has_bits_[0] |= 0x00000008u;
}
inline void SessionStatusReportRequest::clear_has_android_status() {
_has_bits_[0] &= ~0x00000008u;
}
inline void SessionStatusReportRequest::clear_android_status() {
if (android_status_ != NULL) android_status_->::enterprise_management::AndroidStatus::Clear();
clear_has_android_status();
}
inline const ::enterprise_management::AndroidStatus& SessionStatusReportRequest::android_status() const {
// @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.android_status)
return android_status_ != NULL ? *android_status_
: *::enterprise_management::AndroidStatus::internal_default_instance();
}
inline ::enterprise_management::AndroidStatus* SessionStatusReportRequest::mutable_android_status() {
set_has_android_status();
if (android_status_ == NULL) {
android_status_ = new ::enterprise_management::AndroidStatus;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.android_status)
return android_status_;
}
inline ::enterprise_management::AndroidStatus* SessionStatusReportRequest::release_android_status() {
// @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportRequest.android_status)
clear_has_android_status();
::enterprise_management::AndroidStatus* temp = android_status_;
android_status_ = NULL;
return temp;
}
inline void SessionStatusReportRequest::set_allocated_android_status(::enterprise_management::AndroidStatus* android_status) {
delete android_status_;
android_status_ = android_status;
if (android_status) {
set_has_android_status();
} else {
clear_has_android_status();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportRequest.android_status)
}

// optional string user_dm_token = 8;
inline bool SessionStatusReportRequest::has_user_dm_token() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionStatusReportRequest::set_has_user_dm_token() {
_has_bits_[0] |= 0x00000002u;
}
inline void SessionStatusReportRequest::clear_has_user_dm_token() {
_has_bits_[0] &= ~0x00000002u;
}
inline void SessionStatusReportRequest::clear_user_dm_token() {
user_dm_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_user_dm_token();
}
inline const ::std::string& SessionStatusReportRequest::user_dm_token() const {
// @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.user_dm_token)
return user_dm_token_.GetNoArena();
}
inline void SessionStatusReportRequest::set_user_dm_token(const ::std::string& value) {
set_has_user_dm_token();
user_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportRequest.user_dm_token)
}
#if LANG_CXX11
inline void SessionStatusReportRequest::set_user_dm_token(::std::string&& value) {
set_has_user_dm_token();
user_dm_token_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.SessionStatusReportRequest.user_dm_token)
}
#endif
inline void SessionStatusReportRequest::set_user_dm_token(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_user_dm_token();
user_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportRequest.user_dm_token)
}
inline void SessionStatusReportRequest::set_user_dm_token(const char* value, size_t size) {
set_has_user_dm_token();
user_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportRequest.user_dm_token)
}
inline ::std::string* SessionStatusReportRequest::mutable_user_dm_token() {
set_has_user_dm_token();
// @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.user_dm_token)
return user_dm_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionStatusReportRequest::release_user_dm_token() {
// @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportRequest.user_dm_token)
clear_has_user_dm_token();
return user_dm_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionStatusReportRequest::set_allocated_user_dm_token(::std::string* user_dm_token) {
if (user_dm_token != NULL) {
set_has_user_dm_token();
} else {
clear_has_user_dm_token();
}
user_dm_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_dm_token);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportRequest.user_dm_token)
}

// optional string time_zone = 9;
inline bool SessionStatusReportRequest::has_time_zone() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionStatusReportRequest::set_has_time_zone() {
_has_bits_[0] |= 0x00000004u;
}
inline void SessionStatusReportRequest::clear_has_time_zone() {
_has_bits_[0] &= ~0x00000004u;
}
inline void SessionStatusReportRequest::clear_time_zone() {
time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_time_zone();
}
inline const ::std::string& SessionStatusReportRequest::time_zone() const {
// @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.time_zone)
return time_zone_.GetNoArena();
}
inline void SessionStatusReportRequest::set_time_zone(const ::std::string& value) {
set_has_time_zone();
time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportRequest.time_zone)
}
#if LANG_CXX11
inline void SessionStatusReportRequest::set_time_zone(::std::string&& value) {
set_has_time_zone();
time_zone_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.SessionStatusReportRequest.time_zone)
}
#endif
inline void SessionStatusReportRequest::set_time_zone(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_time_zone();
time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportRequest.time_zone)
}
inline void SessionStatusReportRequest::set_time_zone(const char* value, size_t size) {
set_has_time_zone();
time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportRequest.time_zone)
}
inline ::std::string* SessionStatusReportRequest::mutable_time_zone() {
set_has_time_zone();
// @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.time_zone)
return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionStatusReportRequest::release_time_zone() {
// @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportRequest.time_zone)
clear_has_time_zone();
return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionStatusReportRequest::set_allocated_time_zone(::std::string* time_zone) {
if (time_zone != NULL) {
set_has_time_zone();
} else {
clear_has_time_zone();
}
time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportRequest.time_zone)
}

// -------------------------------------------------------------------

// DeviceStatusReportResponse

// optional int32 error_code = 1;
inline bool DeviceStatusReportResponse::has_error_code() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceStatusReportResponse::set_has_error_code() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceStatusReportResponse::clear_has_error_code() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceStatusReportResponse::clear_error_code() {
error_code_ = 0;
clear_has_error_code();
}
inline ::google::protobuf::int32 DeviceStatusReportResponse::error_code() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportResponse.error_code)
return error_code_;
}
inline void DeviceStatusReportResponse::set_error_code(::google::protobuf::int32 value) {
set_has_error_code();
error_code_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportResponse.error_code)
}

// optional string error_message = 2;
inline bool DeviceStatusReportResponse::has_error_message() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceStatusReportResponse::set_has_error_message() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceStatusReportResponse::clear_has_error_message() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceStatusReportResponse::clear_error_message() {
error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_error_message();
}
inline const ::std::string& DeviceStatusReportResponse::error_message() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportResponse.error_message)
return error_message_.GetNoArena();
}
inline void DeviceStatusReportResponse::set_error_message(const ::std::string& value) {
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportResponse.error_message)
}
#if LANG_CXX11
inline void DeviceStatusReportResponse::set_error_message(::std::string&& value) {
set_has_error_message();
error_message_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStatusReportResponse.error_message)
}
#endif
inline void DeviceStatusReportResponse::set_error_message(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportResponse.error_message)
}
inline void DeviceStatusReportResponse::set_error_message(const char* value, size_t size) {
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportResponse.error_message)
}
inline ::std::string* DeviceStatusReportResponse::mutable_error_message() {
set_has_error_message();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportResponse.error_message)
return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceStatusReportResponse::release_error_message() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportResponse.error_message)
clear_has_error_message();
return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceStatusReportResponse::set_allocated_error_message(::std::string* error_message) {
if (error_message != NULL) {
set_has_error_message();
} else {
clear_has_error_message();
}
error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportResponse.error_message)
}

// -------------------------------------------------------------------

// ChromeDesktopReportResponse

// -------------------------------------------------------------------

// SessionStatusReportResponse

// optional int32 error_code = 1;
inline bool SessionStatusReportResponse::has_error_code() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionStatusReportResponse::set_has_error_code() {
_has_bits_[0] |= 0x00000002u;
}
inline void SessionStatusReportResponse::clear_has_error_code() {
_has_bits_[0] &= ~0x00000002u;
}
inline void SessionStatusReportResponse::clear_error_code() {
error_code_ = 0;
clear_has_error_code();
}
inline ::google::protobuf::int32 SessionStatusReportResponse::error_code() const {
// @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportResponse.error_code)
return error_code_;
}
inline void SessionStatusReportResponse::set_error_code(::google::protobuf::int32 value) {
set_has_error_code();
error_code_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportResponse.error_code)
}

// optional string error_message = 2;
inline bool SessionStatusReportResponse::has_error_message() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionStatusReportResponse::set_has_error_message() {
_has_bits_[0] |= 0x00000001u;
}
inline void SessionStatusReportResponse::clear_has_error_message() {
_has_bits_[0] &= ~0x00000001u;
}
inline void SessionStatusReportResponse::clear_error_message() {
error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_error_message();
}
inline const ::std::string& SessionStatusReportResponse::error_message() const {
// @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportResponse.error_message)
return error_message_.GetNoArena();
}
inline void SessionStatusReportResponse::set_error_message(const ::std::string& value) {
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportResponse.error_message)
}
#if LANG_CXX11
inline void SessionStatusReportResponse::set_error_message(::std::string&& value) {
set_has_error_message();
error_message_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.SessionStatusReportResponse.error_message)
}
#endif
inline void SessionStatusReportResponse::set_error_message(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportResponse.error_message)
}
inline void SessionStatusReportResponse::set_error_message(const char* value, size_t size) {
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportResponse.error_message)
}
inline ::std::string* SessionStatusReportResponse::mutable_error_message() {
set_has_error_message();
// @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportResponse.error_message)
return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionStatusReportResponse::release_error_message() {
// @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportResponse.error_message)
clear_has_error_message();
return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionStatusReportResponse::set_allocated_error_message(::std::string* error_message) {
if (error_message != NULL) {
set_has_error_message();
} else {
clear_has_error_message();
}
error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportResponse.error_message)
}

// -------------------------------------------------------------------

// DeviceAutoEnrollmentRequest

// optional int64 remainder = 1;
inline bool DeviceAutoEnrollmentRequest::has_remainder() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAutoEnrollmentRequest::set_has_remainder() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceAutoEnrollmentRequest::clear_has_remainder() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAutoEnrollmentRequest::clear_remainder() {
remainder_ = GOOGLE_LONGLONG(0);
clear_has_remainder();
}
inline ::google::protobuf::int64 DeviceAutoEnrollmentRequest::remainder() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentRequest.remainder)
return remainder_;
}
inline void DeviceAutoEnrollmentRequest::set_remainder(::google::protobuf::int64 value) {
set_has_remainder();
remainder_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentRequest.remainder)
}

// optional int64 modulus = 2;
inline bool DeviceAutoEnrollmentRequest::has_modulus() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceAutoEnrollmentRequest::set_has_modulus() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceAutoEnrollmentRequest::clear_has_modulus() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceAutoEnrollmentRequest::clear_modulus() {
modulus_ = GOOGLE_LONGLONG(0);
clear_has_modulus();
}
inline ::google::protobuf::int64 DeviceAutoEnrollmentRequest::modulus() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentRequest.modulus)
return modulus_;
}
inline void DeviceAutoEnrollmentRequest::set_modulus(::google::protobuf::int64 value) {
set_has_modulus();
modulus_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentRequest.modulus)
}

// optional .enterprise_management.DeviceAutoEnrollmentRequest.EnrollmentCheckType enrollment_check_type = 3 [default = ENROLLMENT_CHECK_TYPE_FRE];
inline bool DeviceAutoEnrollmentRequest::has_enrollment_check_type() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceAutoEnrollmentRequest::set_has_enrollment_check_type() {
_has_bits_[0] |= 0x00000004u;
}
inline void DeviceAutoEnrollmentRequest::clear_has_enrollment_check_type() {
_has_bits_[0] &= ~0x00000004u;
}
inline void DeviceAutoEnrollmentRequest::clear_enrollment_check_type() {
enrollment_check_type_ = 1;
clear_has_enrollment_check_type();
}
inline ::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::enrollment_check_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentRequest.enrollment_check_type)
return static_cast< ::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType >(enrollment_check_type_);
}
inline void DeviceAutoEnrollmentRequest::set_enrollment_check_type(::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType value) {
assert(::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType_IsValid(value));
set_has_enrollment_check_type();
enrollment_check_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentRequest.enrollment_check_type)
}

// -------------------------------------------------------------------

// DeviceAutoEnrollmentResponse

// optional int64 expected_modulus = 1;
inline bool DeviceAutoEnrollmentResponse::has_expected_modulus() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAutoEnrollmentResponse::set_has_expected_modulus() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceAutoEnrollmentResponse::clear_has_expected_modulus() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAutoEnrollmentResponse::clear_expected_modulus() {
expected_modulus_ = GOOGLE_LONGLONG(0);
clear_has_expected_modulus();
}
inline ::google::protobuf::int64 DeviceAutoEnrollmentResponse::expected_modulus() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentResponse.expected_modulus)
return expected_modulus_;
}
inline void DeviceAutoEnrollmentResponse::set_expected_modulus(::google::protobuf::int64 value) {
set_has_expected_modulus();
expected_modulus_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentResponse.expected_modulus)
}

// repeated bytes hash = 2;
inline int DeviceAutoEnrollmentResponse::hash_size() const {
return hash_.size();
}
inline void DeviceAutoEnrollmentResponse::clear_hash() {
hash_.Clear();
}
inline const ::std::string& DeviceAutoEnrollmentResponse::hash(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentResponse.hash)
return hash_.Get(index);
}
inline ::std::string* DeviceAutoEnrollmentResponse::mutable_hash(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceAutoEnrollmentResponse.hash)
return hash_.Mutable(index);
}
inline void DeviceAutoEnrollmentResponse::set_hash(int index, const ::std::string& value) {
// @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentResponse.hash)
hash_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeviceAutoEnrollmentResponse::set_hash(int index, ::std::string&& value) {
// @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentResponse.hash)
hash_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeviceAutoEnrollmentResponse::set_hash(int index, const char* value) {
GOOGLE_DCHECK(value != NULL);
hash_.Mutable(index)->assign(value);
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
inline void DeviceAutoEnrollmentResponse::set_hash(int index, const void* value, size_t size) {
hash_.Mutable(index)->assign(
reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
inline ::std::string* DeviceAutoEnrollmentResponse::add_hash() {
// @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceAutoEnrollmentResponse.hash)
return hash_.Add();
}
inline void DeviceAutoEnrollmentResponse::add_hash(const ::std::string& value) {
hash_.Add()->assign(value);
// @@protoc_insertion_point(field_add:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
#if LANG_CXX11
inline void DeviceAutoEnrollmentResponse::add_hash(::std::string&& value) {
hash_.Add(std::move(value));
// @@protoc_insertion_point(field_add:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
#endif
inline void DeviceAutoEnrollmentResponse::add_hash(const char* value) {
GOOGLE_DCHECK(value != NULL);
hash_.Add()->assign(value);
// @@protoc_insertion_point(field_add_char:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
inline void DeviceAutoEnrollmentResponse::add_hash(const void* value, size_t size) {
hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceAutoEnrollmentResponse::hash() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceAutoEnrollmentResponse.hash)
return hash_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceAutoEnrollmentResponse::mutable_hash() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceAutoEnrollmentResponse.hash)
return &hash_;
}

// -------------------------------------------------------------------

// DeviceStateRetrievalRequest

// optional bytes server_backed_state_key = 1;
inline bool DeviceStateRetrievalRequest::has_server_backed_state_key() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceStateRetrievalRequest::set_has_server_backed_state_key() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceStateRetrievalRequest::clear_has_server_backed_state_key() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceStateRetrievalRequest::clear_server_backed_state_key() {
server_backed_state_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_server_backed_state_key();
}
inline const ::std::string& DeviceStateRetrievalRequest::server_backed_state_key() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
return server_backed_state_key_.GetNoArena();
}
inline void DeviceStateRetrievalRequest::set_server_backed_state_key(const ::std::string& value) {
set_has_server_backed_state_key();
server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
#if LANG_CXX11
inline void DeviceStateRetrievalRequest::set_server_backed_state_key(::std::string&& value) {
set_has_server_backed_state_key();
server_backed_state_key_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
#endif
inline void DeviceStateRetrievalRequest::set_server_backed_state_key(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_server_backed_state_key();
server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
inline void DeviceStateRetrievalRequest::set_server_backed_state_key(const void* value, size_t size) {
set_has_server_backed_state_key();
server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
inline ::std::string* DeviceStateRetrievalRequest::mutable_server_backed_state_key() {
set_has_server_backed_state_key();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
return server_backed_state_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceStateRetrievalRequest::release_server_backed_state_key() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
clear_has_server_backed_state_key();
return server_backed_state_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceStateRetrievalRequest::set_allocated_server_backed_state_key(::std::string* server_backed_state_key) {
if (server_backed_state_key != NULL) {
set_has_server_backed_state_key();
} else {
clear_has_server_backed_state_key();
}
server_backed_state_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_backed_state_key);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}

// -------------------------------------------------------------------

// DeviceStateKeyUpdateRequest

// repeated bytes server_backed_state_key = 1;
inline int DeviceStateKeyUpdateRequest::server_backed_state_key_size() const {
return server_backed_state_key_.size();
}
inline void DeviceStateKeyUpdateRequest::clear_server_backed_state_key() {
server_backed_state_key_.Clear();
}
inline const ::std::string& DeviceStateKeyUpdateRequest::server_backed_state_key(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
return server_backed_state_key_.Get(index);
}
inline ::std::string* DeviceStateKeyUpdateRequest::mutable_server_backed_state_key(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
return server_backed_state_key_.Mutable(index);
}
inline void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, const ::std::string& value) {
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
server_backed_state_key_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, ::std::string&& value) {
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
server_backed_state_key_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, const char* value) {
GOOGLE_DCHECK(value != NULL);
server_backed_state_key_.Mutable(index)->assign(value);
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
inline void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, const void* value, size_t size) {
server_backed_state_key_.Mutable(index)->assign(
reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
inline ::std::string* DeviceStateKeyUpdateRequest::add_server_backed_state_key() {
// @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
return server_backed_state_key_.Add();
}
inline void DeviceStateKeyUpdateRequest::add_server_backed_state_key(const ::std::string& value) {
server_backed_state_key_.Add()->assign(value);
// @@protoc_insertion_point(field_add:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
#if LANG_CXX11
inline void DeviceStateKeyUpdateRequest::add_server_backed_state_key(::std::string&& value) {
server_backed_state_key_.Add(std::move(value));
// @@protoc_insertion_point(field_add:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
#endif
inline void DeviceStateKeyUpdateRequest::add_server_backed_state_key(const char* value) {
GOOGLE_DCHECK(value != NULL);
server_backed_state_key_.Add()->assign(value);
// @@protoc_insertion_point(field_add_char:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
inline void DeviceStateKeyUpdateRequest::add_server_backed_state_key(const void* value, size_t size) {
server_backed_state_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
// @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceStateKeyUpdateRequest::server_backed_state_key() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
return server_backed_state_key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceStateKeyUpdateRequest::mutable_server_backed_state_key() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
return &server_backed_state_key_;
}

// -------------------------------------------------------------------

// DeviceStateRetrievalResponse

// optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
inline bool DeviceStateRetrievalResponse::has_restore_mode() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceStateRetrievalResponse::set_has_restore_mode() {
_has_bits_[0] |= 0x00000004u;
}
inline void DeviceStateRetrievalResponse::clear_has_restore_mode() {
_has_bits_[0] &= ~0x00000004u;
}
inline void DeviceStateRetrievalResponse::clear_restore_mode() {
restore_mode_ = 0;
clear_has_restore_mode();
}
inline ::enterprise_management::DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::restore_mode() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalResponse.restore_mode)
return static_cast< ::enterprise_management::DeviceStateRetrievalResponse_RestoreMode >(restore_mode_);
}
inline void DeviceStateRetrievalResponse::set_restore_mode(::enterprise_management::DeviceStateRetrievalResponse_RestoreMode value) {
assert(::enterprise_management::DeviceStateRetrievalResponse_RestoreMode_IsValid(value));
set_has_restore_mode();
restore_mode_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStateRetrievalResponse.restore_mode)
}

// optional string management_domain = 2;
inline bool DeviceStateRetrievalResponse::has_management_domain() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceStateRetrievalResponse::set_has_management_domain() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceStateRetrievalResponse::clear_has_management_domain() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceStateRetrievalResponse::clear_management_domain() {
management_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_management_domain();
}
inline const ::std::string& DeviceStateRetrievalResponse::management_domain() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalResponse.management_domain)
return management_domain_.GetNoArena();
}
inline void DeviceStateRetrievalResponse::set_management_domain(const ::std::string& value) {
set_has_management_domain();
management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
#if LANG_CXX11
inline void DeviceStateRetrievalResponse::set_management_domain(::std::string&& value) {
set_has_management_domain();
management_domain_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
#endif
inline void DeviceStateRetrievalResponse::set_management_domain(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_management_domain();
management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
inline void DeviceStateRetrievalResponse::set_management_domain(const char* value, size_t size) {
set_has_management_domain();
management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
inline ::std::string* DeviceStateRetrievalResponse::mutable_management_domain() {
set_has_management_domain();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateRetrievalResponse.management_domain)
return management_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceStateRetrievalResponse::release_management_domain() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStateRetrievalResponse.management_domain)
clear_has_management_domain();
return management_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceStateRetrievalResponse::set_allocated_management_domain(::std::string* management_domain) {
if (management_domain != NULL) {
set_has_management_domain();
} else {
clear_has_management_domain();
}
management_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), management_domain);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}

// optional .enterprise_management.DisabledState disabled_state = 3;
inline bool DeviceStateRetrievalResponse::has_disabled_state() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceStateRetrievalResponse::set_has_disabled_state() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceStateRetrievalResponse::clear_has_disabled_state() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceStateRetrievalResponse::clear_disabled_state() {
if (disabled_state_ != NULL) disabled_state_->::enterprise_management::DisabledState::Clear();
clear_has_disabled_state();
}
inline const ::enterprise_management::DisabledState& DeviceStateRetrievalResponse::disabled_state() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
return disabled_state_ != NULL ? *disabled_state_
: *::enterprise_management::DisabledState::internal_default_instance();
}
inline ::enterprise_management::DisabledState* DeviceStateRetrievalResponse::mutable_disabled_state() {
set_has_disabled_state();
if (disabled_state_ == NULL) {
disabled_state_ = new ::enterprise_management::DisabledState;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
return disabled_state_;
}
inline ::enterprise_management::DisabledState* DeviceStateRetrievalResponse::release_disabled_state() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
clear_has_disabled_state();
::enterprise_management::DisabledState* temp = disabled_state_;
disabled_state_ = NULL;
return temp;
}
inline void DeviceStateRetrievalResponse::set_allocated_disabled_state(::enterprise_management::DisabledState* disabled_state) {
delete disabled_state_;
disabled_state_ = disabled_state;
if (disabled_state) {
set_has_disabled_state();
} else {
clear_has_disabled_state();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
}

// -------------------------------------------------------------------

// DeviceInitialEnrollmentStateRequest

// optional string serial_number = 1;
inline bool DeviceInitialEnrollmentStateRequest::has_serial_number() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInitialEnrollmentStateRequest::set_has_serial_number() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceInitialEnrollmentStateRequest::clear_has_serial_number() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInitialEnrollmentStateRequest::clear_serial_number() {
serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_serial_number();
}
inline const ::std::string& DeviceInitialEnrollmentStateRequest::serial_number() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
return serial_number_.GetNoArena();
}
inline void DeviceInitialEnrollmentStateRequest::set_serial_number(const ::std::string& value) {
set_has_serial_number();
serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
}
#if LANG_CXX11
inline void DeviceInitialEnrollmentStateRequest::set_serial_number(::std::string&& value) {
set_has_serial_number();
serial_number_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
}
#endif
inline void DeviceInitialEnrollmentStateRequest::set_serial_number(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_serial_number();
serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
}
inline void DeviceInitialEnrollmentStateRequest::set_serial_number(const char* value, size_t size) {
set_has_serial_number();
serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
}
inline ::std::string* DeviceInitialEnrollmentStateRequest::mutable_serial_number() {
set_has_serial_number();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInitialEnrollmentStateRequest::release_serial_number() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
clear_has_serial_number();
return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInitialEnrollmentStateRequest::set_allocated_serial_number(::std::string* serial_number) {
if (serial_number != NULL) {
set_has_serial_number();
} else {
clear_has_serial_number();
}
serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
}

// optional string brand_code = 2;
inline bool DeviceInitialEnrollmentStateRequest::has_brand_code() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInitialEnrollmentStateRequest::set_has_brand_code() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceInitialEnrollmentStateRequest::clear_has_brand_code() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInitialEnrollmentStateRequest::clear_brand_code() {
brand_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_brand_code();
}
inline const ::std::string& DeviceInitialEnrollmentStateRequest::brand_code() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
return brand_code_.GetNoArena();
}
inline void DeviceInitialEnrollmentStateRequest::set_brand_code(const ::std::string& value) {
set_has_brand_code();
brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
}
#if LANG_CXX11
inline void DeviceInitialEnrollmentStateRequest::set_brand_code(::std::string&& value) {
set_has_brand_code();
brand_code_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
}
#endif
inline void DeviceInitialEnrollmentStateRequest::set_brand_code(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_brand_code();
brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
}
inline void DeviceInitialEnrollmentStateRequest::set_brand_code(const char* value, size_t size) {
set_has_brand_code();
brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
}
inline ::std::string* DeviceInitialEnrollmentStateRequest::mutable_brand_code() {
set_has_brand_code();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
return brand_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInitialEnrollmentStateRequest::release_brand_code() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
clear_has_brand_code();
return brand_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInitialEnrollmentStateRequest::set_allocated_brand_code(::std::string* brand_code) {
if (brand_code != NULL) {
set_has_brand_code();
} else {
clear_has_brand_code();
}
brand_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand_code);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
}

// -------------------------------------------------------------------

// DeviceInitialEnrollmentStateResponse

// optional .enterprise_management.DeviceInitialEnrollmentStateResponse.InitialEnrollmentMode initial_enrollment_mode = 1 [default = INITIAL_ENROLLMENT_MODE_NONE];
inline bool DeviceInitialEnrollmentStateResponse::has_initial_enrollment_mode() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInitialEnrollmentStateResponse::set_has_initial_enrollment_mode() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceInitialEnrollmentStateResponse::clear_has_initial_enrollment_mode() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInitialEnrollmentStateResponse::clear_initial_enrollment_mode() {
initial_enrollment_mode_ = 0;
clear_has_initial_enrollment_mode();
}
inline ::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::initial_enrollment_mode() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceInitialEnrollmentStateResponse.initial_enrollment_mode)
return static_cast< ::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode >(initial_enrollment_mode_);
}
inline void DeviceInitialEnrollmentStateResponse::set_initial_enrollment_mode(::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode value) {
assert(::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_IsValid(value));
set_has_initial_enrollment_mode();
initial_enrollment_mode_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceInitialEnrollmentStateResponse.initial_enrollment_mode)
}

// optional string management_domain = 2;
inline bool DeviceInitialEnrollmentStateResponse::has_management_domain() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInitialEnrollmentStateResponse::set_has_management_domain() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceInitialEnrollmentStateResponse::clear_has_management_domain() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInitialEnrollmentStateResponse::clear_management_domain() {
management_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_management_domain();
}
inline const ::std::string& DeviceInitialEnrollmentStateResponse::management_domain() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
return management_domain_.GetNoArena();
}
inline void DeviceInitialEnrollmentStateResponse::set_management_domain(const ::std::string& value) {
set_has_management_domain();
management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
}
#if LANG_CXX11
inline void DeviceInitialEnrollmentStateResponse::set_management_domain(::std::string&& value) {
set_has_management_domain();
management_domain_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
}
#endif
inline void DeviceInitialEnrollmentStateResponse::set_management_domain(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_management_domain();
management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
}
inline void DeviceInitialEnrollmentStateResponse::set_management_domain(const char* value, size_t size) {
set_has_management_domain();
management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
}
inline ::std::string* DeviceInitialEnrollmentStateResponse::mutable_management_domain() {
set_has_management_domain();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
return management_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInitialEnrollmentStateResponse::release_management_domain() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
clear_has_management_domain();
return management_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInitialEnrollmentStateResponse::set_allocated_management_domain(::std::string* management_domain) {
if (management_domain != NULL) {
set_has_management_domain();
} else {
clear_has_management_domain();
}
management_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), management_domain);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
}

// -------------------------------------------------------------------

// DevicePairingRequest

// optional string host_device_id = 1;
inline bool DevicePairingRequest::has_host_device_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevicePairingRequest::set_has_host_device_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void DevicePairingRequest::clear_has_host_device_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DevicePairingRequest::clear_host_device_id() {
host_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_host_device_id();
}
inline const ::std::string& DevicePairingRequest::host_device_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.DevicePairingRequest.host_device_id)
return host_device_id_.GetNoArena();
}
inline void DevicePairingRequest::set_host_device_id(const ::std::string& value) {
set_has_host_device_id();
host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DevicePairingRequest.host_device_id)
}
#if LANG_CXX11
inline void DevicePairingRequest::set_host_device_id(::std::string&& value) {
set_has_host_device_id();
host_device_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DevicePairingRequest.host_device_id)
}
#endif
inline void DevicePairingRequest::set_host_device_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_host_device_id();
host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DevicePairingRequest.host_device_id)
}
inline void DevicePairingRequest::set_host_device_id(const char* value, size_t size) {
set_has_host_device_id();
host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DevicePairingRequest.host_device_id)
}
inline ::std::string* DevicePairingRequest::mutable_host_device_id() {
set_has_host_device_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.DevicePairingRequest.host_device_id)
return host_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevicePairingRequest::release_host_device_id() {
// @@protoc_insertion_point(field_release:enterprise_management.DevicePairingRequest.host_device_id)
clear_has_host_device_id();
return host_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevicePairingRequest::set_allocated_host_device_id(::std::string* host_device_id) {
if (host_device_id != NULL) {
set_has_host_device_id();
} else {
clear_has_host_device_id();
}
host_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_device_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DevicePairingRequest.host_device_id)
}

// optional string controller_device_id = 2;
inline bool DevicePairingRequest::has_controller_device_id() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DevicePairingRequest::set_has_controller_device_id() {
_has_bits_[0] |= 0x00000002u;
}
inline void DevicePairingRequest::clear_has_controller_device_id() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DevicePairingRequest::clear_controller_device_id() {
controller_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_controller_device_id();
}
inline const ::std::string& DevicePairingRequest::controller_device_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.DevicePairingRequest.controller_device_id)
return controller_device_id_.GetNoArena();
}
inline void DevicePairingRequest::set_controller_device_id(const ::std::string& value) {
set_has_controller_device_id();
controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DevicePairingRequest.controller_device_id)
}
#if LANG_CXX11
inline void DevicePairingRequest::set_controller_device_id(::std::string&& value) {
set_has_controller_device_id();
controller_device_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DevicePairingRequest.controller_device_id)
}
#endif
inline void DevicePairingRequest::set_controller_device_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_controller_device_id();
controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DevicePairingRequest.controller_device_id)
}
inline void DevicePairingRequest::set_controller_device_id(const char* value, size_t size) {
set_has_controller_device_id();
controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DevicePairingRequest.controller_device_id)
}
inline ::std::string* DevicePairingRequest::mutable_controller_device_id() {
set_has_controller_device_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.DevicePairingRequest.controller_device_id)
return controller_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevicePairingRequest::release_controller_device_id() {
// @@protoc_insertion_point(field_release:enterprise_management.DevicePairingRequest.controller_device_id)
clear_has_controller_device_id();
return controller_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevicePairingRequest::set_allocated_controller_device_id(::std::string* controller_device_id) {
if (controller_device_id != NULL) {
set_has_controller_device_id();
} else {
clear_has_controller_device_id();
}
controller_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_device_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DevicePairingRequest.controller_device_id)
}

// -------------------------------------------------------------------

// DevicePairingResponse

// optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
inline bool DevicePairingResponse::has_status_code() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevicePairingResponse::set_has_status_code() {
_has_bits_[0] |= 0x00000001u;
}
inline void DevicePairingResponse::clear_has_status_code() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DevicePairingResponse::clear_status_code() {
status_code_ = 1;
clear_has_status_code();
}
inline ::enterprise_management::DevicePairingResponse_StatusCode DevicePairingResponse::status_code() const {
// @@protoc_insertion_point(field_get:enterprise_management.DevicePairingResponse.status_code)
return static_cast< ::enterprise_management::DevicePairingResponse_StatusCode >(status_code_);
}
inline void DevicePairingResponse::set_status_code(::enterprise_management::DevicePairingResponse_StatusCode value) {
assert(::enterprise_management::DevicePairingResponse_StatusCode_IsValid(value));
set_has_status_code();
status_code_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DevicePairingResponse.status_code)
}

// -------------------------------------------------------------------

// CheckDevicePairingRequest

// optional string host_device_id = 1;
inline bool CheckDevicePairingRequest::has_host_device_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckDevicePairingRequest::set_has_host_device_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void CheckDevicePairingRequest::clear_has_host_device_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void CheckDevicePairingRequest::clear_host_device_id() {
host_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_host_device_id();
}
inline const ::std::string& CheckDevicePairingRequest::host_device_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.CheckDevicePairingRequest.host_device_id)
return host_device_id_.GetNoArena();
}
inline void CheckDevicePairingRequest::set_host_device_id(const ::std::string& value) {
set_has_host_device_id();
host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
#if LANG_CXX11
inline void CheckDevicePairingRequest::set_host_device_id(::std::string&& value) {
set_has_host_device_id();
host_device_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
#endif
inline void CheckDevicePairingRequest::set_host_device_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_host_device_id();
host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
inline void CheckDevicePairingRequest::set_host_device_id(const char* value, size_t size) {
set_has_host_device_id();
host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
inline ::std::string* CheckDevicePairingRequest::mutable_host_device_id() {
set_has_host_device_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.CheckDevicePairingRequest.host_device_id)
return host_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckDevicePairingRequest::release_host_device_id() {
// @@protoc_insertion_point(field_release:enterprise_management.CheckDevicePairingRequest.host_device_id)
clear_has_host_device_id();
return host_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckDevicePairingRequest::set_allocated_host_device_id(::std::string* host_device_id) {
if (host_device_id != NULL) {
set_has_host_device_id();
} else {
clear_has_host_device_id();
}
host_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_device_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.CheckDevicePairingRequest.host_device_id)
}

// optional string controller_device_id = 2;
inline bool CheckDevicePairingRequest::has_controller_device_id() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckDevicePairingRequest::set_has_controller_device_id() {
_has_bits_[0] |= 0x00000002u;
}
inline void CheckDevicePairingRequest::clear_has_controller_device_id() {
_has_bits_[0] &= ~0x00000002u;
}
inline void CheckDevicePairingRequest::clear_controller_device_id() {
controller_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_controller_device_id();
}
inline const ::std::string& CheckDevicePairingRequest::controller_device_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.CheckDevicePairingRequest.controller_device_id)
return controller_device_id_.GetNoArena();
}
inline void CheckDevicePairingRequest::set_controller_device_id(const ::std::string& value) {
set_has_controller_device_id();
controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
#if LANG_CXX11
inline void CheckDevicePairingRequest::set_controller_device_id(::std::string&& value) {
set_has_controller_device_id();
controller_device_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
#endif
inline void CheckDevicePairingRequest::set_controller_device_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_controller_device_id();
controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
inline void CheckDevicePairingRequest::set_controller_device_id(const char* value, size_t size) {
set_has_controller_device_id();
controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
inline ::std::string* CheckDevicePairingRequest::mutable_controller_device_id() {
set_has_controller_device_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.CheckDevicePairingRequest.controller_device_id)
return controller_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckDevicePairingRequest::release_controller_device_id() {
// @@protoc_insertion_point(field_release:enterprise_management.CheckDevicePairingRequest.controller_device_id)
clear_has_controller_device_id();
return controller_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckDevicePairingRequest::set_allocated_controller_device_id(::std::string* controller_device_id) {
if (controller_device_id != NULL) {
set_has_controller_device_id();
} else {
clear_has_controller_device_id();
}
controller_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_device_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}

// -------------------------------------------------------------------

// CheckDevicePairingResponse

// optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
inline bool CheckDevicePairingResponse::has_status_code() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckDevicePairingResponse::set_has_status_code() {
_has_bits_[0] |= 0x00000001u;
}
inline void CheckDevicePairingResponse::clear_has_status_code() {
_has_bits_[0] &= ~0x00000001u;
}
inline void CheckDevicePairingResponse::clear_status_code() {
status_code_ = 1;
clear_has_status_code();
}
inline ::enterprise_management::CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::status_code() const {
// @@protoc_insertion_point(field_get:enterprise_management.CheckDevicePairingResponse.status_code)
return static_cast< ::enterprise_management::CheckDevicePairingResponse_StatusCode >(status_code_);
}
inline void CheckDevicePairingResponse::set_status_code(::enterprise_management::CheckDevicePairingResponse_StatusCode value) {
assert(::enterprise_management::CheckDevicePairingResponse_StatusCode_IsValid(value));
set_has_status_code();
status_code_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.CheckDevicePairingResponse.status_code)
}

// -------------------------------------------------------------------

// RemoteCommand

// optional .enterprise_management.RemoteCommand.Type type = 1;
inline bool RemoteCommand::has_type() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoteCommand::set_has_type() {
_has_bits_[0] |= 0x00000008u;
}
inline void RemoteCommand::clear_has_type() {
_has_bits_[0] &= ~0x00000008u;
}
inline void RemoteCommand::clear_type() {
type_ = -1;
clear_has_type();
}
inline ::enterprise_management::RemoteCommand_Type RemoteCommand::type() const {
// @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.type)
return static_cast< ::enterprise_management::RemoteCommand_Type >(type_);
}
inline void RemoteCommand::set_type(::enterprise_management::RemoteCommand_Type value) {
assert(::enterprise_management::RemoteCommand_Type_IsValid(value));
set_has_type();
type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.type)
}

// optional int64 command_id = 2;
inline bool RemoteCommand::has_command_id() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteCommand::set_has_command_id() {
_has_bits_[0] |= 0x00000002u;
}
inline void RemoteCommand::clear_has_command_id() {
_has_bits_[0] &= ~0x00000002u;
}
inline void RemoteCommand::clear_command_id() {
command_id_ = GOOGLE_LONGLONG(0);
clear_has_command_id();
}
inline ::google::protobuf::int64 RemoteCommand::command_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.command_id)
return command_id_;
}
inline void RemoteCommand::set_command_id(::google::protobuf::int64 value) {
set_has_command_id();
command_id_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.command_id)
}

// optional int64 age_of_command = 3;
inline bool RemoteCommand::has_age_of_command() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoteCommand::set_has_age_of_command() {
_has_bits_[0] |= 0x00000004u;
}
inline void RemoteCommand::clear_has_age_of_command() {
_has_bits_[0] &= ~0x00000004u;
}
inline void RemoteCommand::clear_age_of_command() {
age_of_command_ = GOOGLE_LONGLONG(0);
clear_has_age_of_command();
}
inline ::google::protobuf::int64 RemoteCommand::age_of_command() const {
// @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.age_of_command)
return age_of_command_;
}
inline void RemoteCommand::set_age_of_command(::google::protobuf::int64 value) {
set_has_age_of_command();
age_of_command_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.age_of_command)
}

// optional string payload = 4;
inline bool RemoteCommand::has_payload() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteCommand::set_has_payload() {
_has_bits_[0] |= 0x00000001u;
}
inline void RemoteCommand::clear_has_payload() {
_has_bits_[0] &= ~0x00000001u;
}
inline void RemoteCommand::clear_payload() {
payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_payload();
}
inline const ::std::string& RemoteCommand::payload() const {
// @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.payload)
return payload_.GetNoArena();
}
inline void RemoteCommand::set_payload(const ::std::string& value) {
set_has_payload();
payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.payload)
}
#if LANG_CXX11
inline void RemoteCommand::set_payload(::std::string&& value) {
set_has_payload();
payload_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.RemoteCommand.payload)
}
#endif
inline void RemoteCommand::set_payload(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_payload();
payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.RemoteCommand.payload)
}
inline void RemoteCommand::set_payload(const char* value, size_t size) {
set_has_payload();
payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.RemoteCommand.payload)
}
inline ::std::string* RemoteCommand::mutable_payload() {
set_has_payload();
// @@protoc_insertion_point(field_mutable:enterprise_management.RemoteCommand.payload)
return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteCommand::release_payload() {
// @@protoc_insertion_point(field_release:enterprise_management.RemoteCommand.payload)
clear_has_payload();
return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCommand::set_allocated_payload(::std::string* payload) {
if (payload != NULL) {
set_has_payload();
} else {
clear_has_payload();
}
payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.RemoteCommand.payload)
}

// -------------------------------------------------------------------

// RemoteCommandResult

// optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
inline bool RemoteCommandResult::has_result() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoteCommandResult::set_has_result() {
_has_bits_[0] |= 0x00000008u;
}
inline void RemoteCommandResult::clear_has_result() {
_has_bits_[0] &= ~0x00000008u;
}
inline void RemoteCommandResult::clear_result() {
result_ = 0;
clear_has_result();
}
inline ::enterprise_management::RemoteCommandResult_ResultType RemoteCommandResult::result() const {
// @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.result)
return static_cast< ::enterprise_management::RemoteCommandResult_ResultType >(result_);
}
inline void RemoteCommandResult::set_result(::enterprise_management::RemoteCommandResult_ResultType value) {
assert(::enterprise_management::RemoteCommandResult_ResultType_IsValid(value));
set_has_result();
result_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.result)
}

// optional int64 command_id = 2;
inline bool RemoteCommandResult::has_command_id() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteCommandResult::set_has_command_id() {
_has_bits_[0] |= 0x00000002u;
}
inline void RemoteCommandResult::clear_has_command_id() {
_has_bits_[0] &= ~0x00000002u;
}
inline void RemoteCommandResult::clear_command_id() {
command_id_ = GOOGLE_LONGLONG(0);
clear_has_command_id();
}
inline ::google::protobuf::int64 RemoteCommandResult::command_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.command_id)
return command_id_;
}
inline void RemoteCommandResult::set_command_id(::google::protobuf::int64 value) {
set_has_command_id();
command_id_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.command_id)
}

// optional int64 timestamp = 3;
inline bool RemoteCommandResult::has_timestamp() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoteCommandResult::set_has_timestamp() {
_has_bits_[0] |= 0x00000004u;
}
inline void RemoteCommandResult::clear_has_timestamp() {
_has_bits_[0] &= ~0x00000004u;
}
inline void RemoteCommandResult::clear_timestamp() {
timestamp_ = GOOGLE_LONGLONG(0);
clear_has_timestamp();
}
inline ::google::protobuf::int64 RemoteCommandResult::timestamp() const {
// @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.timestamp)
return timestamp_;
}
inline void RemoteCommandResult::set_timestamp(::google::protobuf::int64 value) {
set_has_timestamp();
timestamp_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.timestamp)
}

// optional string payload = 4;
inline bool RemoteCommandResult::has_payload() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteCommandResult::set_has_payload() {
_has_bits_[0] |= 0x00000001u;
}
inline void RemoteCommandResult::clear_has_payload() {
_has_bits_[0] &= ~0x00000001u;
}
inline void RemoteCommandResult::clear_payload() {
payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_payload();
}
inline const ::std::string& RemoteCommandResult::payload() const {
// @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.payload)
return payload_.GetNoArena();
}
inline void RemoteCommandResult::set_payload(const ::std::string& value) {
set_has_payload();
payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.payload)
}
#if LANG_CXX11
inline void RemoteCommandResult::set_payload(::std::string&& value) {
set_has_payload();
payload_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.RemoteCommandResult.payload)
}
#endif
inline void RemoteCommandResult::set_payload(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_payload();
payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.RemoteCommandResult.payload)
}
inline void RemoteCommandResult::set_payload(const char* value, size_t size) {
set_has_payload();
payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.RemoteCommandResult.payload)
}
inline ::std::string* RemoteCommandResult::mutable_payload() {
set_has_payload();
// @@protoc_insertion_point(field_mutable:enterprise_management.RemoteCommandResult.payload)
return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteCommandResult::release_payload() {
// @@protoc_insertion_point(field_release:enterprise_management.RemoteCommandResult.payload)
clear_has_payload();
return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCommandResult::set_allocated_payload(::std::string* payload) {
if (payload != NULL) {
set_has_payload();
} else {
clear_has_payload();
}
payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.RemoteCommandResult.payload)
}

// -------------------------------------------------------------------

// DeviceRemoteCommandRequest

// optional int64 last_command_unique_id = 1;
inline bool DeviceRemoteCommandRequest::has_last_command_unique_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceRemoteCommandRequest::set_has_last_command_unique_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceRemoteCommandRequest::clear_has_last_command_unique_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceRemoteCommandRequest::clear_last_command_unique_id() {
last_command_unique_id_ = GOOGLE_LONGLONG(0);
clear_has_last_command_unique_id();
}
inline ::google::protobuf::int64 DeviceRemoteCommandRequest::last_command_unique_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRemoteCommandRequest.last_command_unique_id)
return last_command_unique_id_;
}
inline void DeviceRemoteCommandRequest::set_last_command_unique_id(::google::protobuf::int64 value) {
set_has_last_command_unique_id();
last_command_unique_id_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceRemoteCommandRequest.last_command_unique_id)
}

// repeated .enterprise_management.RemoteCommandResult command_results = 2;
inline int DeviceRemoteCommandRequest::command_results_size() const {
return command_results_.size();
}
inline void DeviceRemoteCommandRequest::clear_command_results() {
command_results_.Clear();
}
inline const ::enterprise_management::RemoteCommandResult& DeviceRemoteCommandRequest::command_results(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRemoteCommandRequest.command_results)
return command_results_.Get(index);
}
inline ::enterprise_management::RemoteCommandResult* DeviceRemoteCommandRequest::mutable_command_results(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRemoteCommandRequest.command_results)
return command_results_.Mutable(index);
}
inline ::enterprise_management::RemoteCommandResult* DeviceRemoteCommandRequest::add_command_results() {
// @@protoc_insertion_point(field_add:enterprise_management.DeviceRemoteCommandRequest.command_results)
return command_results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommandResult >*
DeviceRemoteCommandRequest::mutable_command_results() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceRemoteCommandRequest.command_results)
return &command_results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommandResult >&
DeviceRemoteCommandRequest::command_results() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceRemoteCommandRequest.command_results)
return command_results_;
}

// -------------------------------------------------------------------

// DeviceRemoteCommandResponse

// repeated .enterprise_management.RemoteCommand commands = 1;
inline int DeviceRemoteCommandResponse::commands_size() const {
return commands_.size();
}
inline void DeviceRemoteCommandResponse::clear_commands() {
commands_.Clear();
}
inline const ::enterprise_management::RemoteCommand& DeviceRemoteCommandResponse::commands(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceRemoteCommandResponse.commands)
return commands_.Get(index);
}
inline ::enterprise_management::RemoteCommand* DeviceRemoteCommandResponse::mutable_commands(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRemoteCommandResponse.commands)
return commands_.Mutable(index);
}
inline ::enterprise_management::RemoteCommand* DeviceRemoteCommandResponse::add_commands() {
// @@protoc_insertion_point(field_add:enterprise_management.DeviceRemoteCommandResponse.commands)
return commands_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommand >*
DeviceRemoteCommandResponse::mutable_commands() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceRemoteCommandResponse.commands)
return &commands_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommand >&
DeviceRemoteCommandResponse::commands() const {
// @@protoc_insertion_point(field_list:enterprise_management.DeviceRemoteCommandResponse.commands)
return commands_;
}

// -------------------------------------------------------------------

// DeviceAttributeUpdatePermissionRequest

// -------------------------------------------------------------------

// DeviceAttributeUpdatePermissionResponse

// optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
inline bool DeviceAttributeUpdatePermissionResponse::has_result() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAttributeUpdatePermissionResponse::set_has_result() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceAttributeUpdatePermissionResponse::clear_has_result() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAttributeUpdatePermissionResponse::clear_result() {
result_ = 0;
clear_has_result();
}
inline ::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::result() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdatePermissionResponse.result)
return static_cast< ::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType >(result_);
}
inline void DeviceAttributeUpdatePermissionResponse::set_result(::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType value) {
assert(::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(value));
set_has_result();
result_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdatePermissionResponse.result)
}

// -------------------------------------------------------------------

// DeviceAttributeUpdateRequest

// optional string asset_id = 1;
inline bool DeviceAttributeUpdateRequest::has_asset_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAttributeUpdateRequest::set_has_asset_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceAttributeUpdateRequest::clear_has_asset_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAttributeUpdateRequest::clear_asset_id() {
asset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_asset_id();
}
inline const ::std::string& DeviceAttributeUpdateRequest::asset_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
return asset_id_.GetNoArena();
}
inline void DeviceAttributeUpdateRequest::set_asset_id(const ::std::string& value) {
set_has_asset_id();
asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
#if LANG_CXX11
inline void DeviceAttributeUpdateRequest::set_asset_id(::std::string&& value) {
set_has_asset_id();
asset_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
#endif
inline void DeviceAttributeUpdateRequest::set_asset_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_asset_id();
asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
inline void DeviceAttributeUpdateRequest::set_asset_id(const char* value, size_t size) {
set_has_asset_id();
asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
inline ::std::string* DeviceAttributeUpdateRequest::mutable_asset_id() {
set_has_asset_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
return asset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAttributeUpdateRequest::release_asset_id() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
clear_has_asset_id();
return asset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAttributeUpdateRequest::set_allocated_asset_id(::std::string* asset_id) {
if (asset_id != NULL) {
set_has_asset_id();
} else {
clear_has_asset_id();
}
asset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}

// optional string location = 2;
inline bool DeviceAttributeUpdateRequest::has_location() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceAttributeUpdateRequest::set_has_location() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceAttributeUpdateRequest::clear_has_location() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceAttributeUpdateRequest::clear_location() {
location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_location();
}
inline const ::std::string& DeviceAttributeUpdateRequest::location() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdateRequest.location)
return location_.GetNoArena();
}
inline void DeviceAttributeUpdateRequest::set_location(const ::std::string& value) {
set_has_location();
location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdateRequest.location)
}
#if LANG_CXX11
inline void DeviceAttributeUpdateRequest::set_location(::std::string&& value) {
set_has_location();
location_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceAttributeUpdateRequest.location)
}
#endif
inline void DeviceAttributeUpdateRequest::set_location(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_location();
location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceAttributeUpdateRequest.location)
}
inline void DeviceAttributeUpdateRequest::set_location(const char* value, size_t size) {
set_has_location();
location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceAttributeUpdateRequest.location)
}
inline ::std::string* DeviceAttributeUpdateRequest::mutable_location() {
set_has_location();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceAttributeUpdateRequest.location)
return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAttributeUpdateRequest::release_location() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceAttributeUpdateRequest.location)
clear_has_location();
return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAttributeUpdateRequest::set_allocated_location(::std::string* location) {
if (location != NULL) {
set_has_location();
} else {
clear_has_location();
}
location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceAttributeUpdateRequest.location)
}

// -------------------------------------------------------------------

// DeviceAttributeUpdateResponse

// optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
inline bool DeviceAttributeUpdateResponse::has_result() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAttributeUpdateResponse::set_has_result() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceAttributeUpdateResponse::clear_has_result() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAttributeUpdateResponse::clear_result() {
result_ = 0;
clear_has_result();
}
inline ::enterprise_management::DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::result() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdateResponse.result)
return static_cast< ::enterprise_management::DeviceAttributeUpdateResponse_ResultType >(result_);
}
inline void DeviceAttributeUpdateResponse::set_result(::enterprise_management::DeviceAttributeUpdateResponse_ResultType value) {
assert(::enterprise_management::DeviceAttributeUpdateResponse_ResultType_IsValid(value));
set_has_result();
result_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdateResponse.result)
}

// -------------------------------------------------------------------

// GcmIdUpdateRequest

// optional string gcm_id = 1;
inline bool GcmIdUpdateRequest::has_gcm_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GcmIdUpdateRequest::set_has_gcm_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void GcmIdUpdateRequest::clear_has_gcm_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void GcmIdUpdateRequest::clear_gcm_id() {
gcm_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_gcm_id();
}
inline const ::std::string& GcmIdUpdateRequest::gcm_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.GcmIdUpdateRequest.gcm_id)
return gcm_id_.GetNoArena();
}
inline void GcmIdUpdateRequest::set_gcm_id(const ::std::string& value) {
set_has_gcm_id();
gcm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
#if LANG_CXX11
inline void GcmIdUpdateRequest::set_gcm_id(::std::string&& value) {
set_has_gcm_id();
gcm_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
#endif
inline void GcmIdUpdateRequest::set_gcm_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_gcm_id();
gcm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
inline void GcmIdUpdateRequest::set_gcm_id(const char* value, size_t size) {
set_has_gcm_id();
gcm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
inline ::std::string* GcmIdUpdateRequest::mutable_gcm_id() {
set_has_gcm_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.GcmIdUpdateRequest.gcm_id)
return gcm_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GcmIdUpdateRequest::release_gcm_id() {
// @@protoc_insertion_point(field_release:enterprise_management.GcmIdUpdateRequest.gcm_id)
clear_has_gcm_id();
return gcm_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GcmIdUpdateRequest::set_allocated_gcm_id(::std::string* gcm_id) {
if (gcm_id != NULL) {
set_has_gcm_id();
} else {
clear_has_gcm_id();
}
gcm_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcm_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.GcmIdUpdateRequest.gcm_id)
}

// -------------------------------------------------------------------

// GcmIdUpdateResponse

// -------------------------------------------------------------------

// CheckAndroidManagementRequest

// -------------------------------------------------------------------

// CheckAndroidManagementResponse

// -------------------------------------------------------------------

// CertificateBasedDeviceRegisterRequest

// optional .enterprise_management.SignedData signed_request = 1;
inline bool CertificateBasedDeviceRegisterRequest::has_signed_request() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertificateBasedDeviceRegisterRequest::set_has_signed_request() {
_has_bits_[0] |= 0x00000001u;
}
inline void CertificateBasedDeviceRegisterRequest::clear_has_signed_request() {
_has_bits_[0] &= ~0x00000001u;
}
inline void CertificateBasedDeviceRegisterRequest::clear_signed_request() {
if (signed_request_ != NULL) signed_request_->::enterprise_management::SignedData::Clear();
clear_has_signed_request();
}
inline const ::enterprise_management::SignedData& CertificateBasedDeviceRegisterRequest::signed_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
return signed_request_ != NULL ? *signed_request_
: *::enterprise_management::SignedData::internal_default_instance();
}
inline ::enterprise_management::SignedData* CertificateBasedDeviceRegisterRequest::mutable_signed_request() {
set_has_signed_request();
if (signed_request_ == NULL) {
signed_request_ = new ::enterprise_management::SignedData;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
return signed_request_;
}
inline ::enterprise_management::SignedData* CertificateBasedDeviceRegisterRequest::release_signed_request() {
// @@protoc_insertion_point(field_release:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
clear_has_signed_request();
::enterprise_management::SignedData* temp = signed_request_;
signed_request_ = NULL;
return temp;
}
inline void CertificateBasedDeviceRegisterRequest::set_allocated_signed_request(::enterprise_management::SignedData* signed_request) {
delete signed_request_;
signed_request_ = signed_request;
if (signed_request) {
set_has_signed_request();
} else {
clear_has_signed_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
}

// -------------------------------------------------------------------

// CertificateBasedDeviceRegistrationData

// optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
inline bool CertificateBasedDeviceRegistrationData::has_certificate_type() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertificateBasedDeviceRegistrationData::set_has_certificate_type() {
_has_bits_[0] |= 0x00000004u;
}
inline void CertificateBasedDeviceRegistrationData::clear_has_certificate_type() {
_has_bits_[0] &= ~0x00000004u;
}
inline void CertificateBasedDeviceRegistrationData::clear_certificate_type() {
certificate_type_ = 0;
clear_has_certificate_type();
}
inline ::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::certificate_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegistrationData.certificate_type)
return static_cast< ::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType >(certificate_type_);
}
inline void CertificateBasedDeviceRegistrationData::set_certificate_type(::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType value) {
assert(::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType_IsValid(value));
set_has_certificate_type();
certificate_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.CertificateBasedDeviceRegistrationData.certificate_type)
}

// optional bytes device_certificate = 2;
inline bool CertificateBasedDeviceRegistrationData::has_device_certificate() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertificateBasedDeviceRegistrationData::set_has_device_certificate() {
_has_bits_[0] |= 0x00000001u;
}
inline void CertificateBasedDeviceRegistrationData::clear_has_device_certificate() {
_has_bits_[0] &= ~0x00000001u;
}
inline void CertificateBasedDeviceRegistrationData::clear_device_certificate() {
device_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_device_certificate();
}
inline const ::std::string& CertificateBasedDeviceRegistrationData::device_certificate() const {
// @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
return device_certificate_.GetNoArena();
}
inline void CertificateBasedDeviceRegistrationData::set_device_certificate(const ::std::string& value) {
set_has_device_certificate();
device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
#if LANG_CXX11
inline void CertificateBasedDeviceRegistrationData::set_device_certificate(::std::string&& value) {
set_has_device_certificate();
device_certificate_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
#endif
inline void CertificateBasedDeviceRegistrationData::set_device_certificate(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_device_certificate();
device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
inline void CertificateBasedDeviceRegistrationData::set_device_certificate(const void* value, size_t size) {
set_has_device_certificate();
device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
inline ::std::string* CertificateBasedDeviceRegistrationData::mutable_device_certificate() {
set_has_device_certificate();
// @@protoc_insertion_point(field_mutable:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
return device_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CertificateBasedDeviceRegistrationData::release_device_certificate() {
// @@protoc_insertion_point(field_release:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
clear_has_device_certificate();
return device_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CertificateBasedDeviceRegistrationData::set_allocated_device_certificate(::std::string* device_certificate) {
if (device_certificate != NULL) {
set_has_device_certificate();
} else {
clear_has_device_certificate();
}
device_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_certificate);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}

// optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
inline bool CertificateBasedDeviceRegistrationData::has_device_register_request() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertificateBasedDeviceRegistrationData::set_has_device_register_request() {
_has_bits_[0] |= 0x00000002u;
}
inline void CertificateBasedDeviceRegistrationData::clear_has_device_register_request() {
_has_bits_[0] &= ~0x00000002u;
}
inline void CertificateBasedDeviceRegistrationData::clear_device_register_request() {
if (device_register_request_ != NULL) device_register_request_->::enterprise_management::DeviceRegisterRequest::Clear();
clear_has_device_register_request();
}
inline const ::enterprise_management::DeviceRegisterRequest& CertificateBasedDeviceRegistrationData::device_register_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
return device_register_request_ != NULL ? *device_register_request_
: *::enterprise_management::DeviceRegisterRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceRegisterRequest* CertificateBasedDeviceRegistrationData::mutable_device_register_request() {
set_has_device_register_request();
if (device_register_request_ == NULL) {
device_register_request_ = new ::enterprise_management::DeviceRegisterRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
return device_register_request_;
}
inline ::enterprise_management::DeviceRegisterRequest* CertificateBasedDeviceRegistrationData::release_device_register_request() {
// @@protoc_insertion_point(field_release:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
clear_has_device_register_request();
::enterprise_management::DeviceRegisterRequest* temp = device_register_request_;
device_register_request_ = NULL;
return temp;
}
inline void CertificateBasedDeviceRegistrationData::set_allocated_device_register_request(::enterprise_management::DeviceRegisterRequest* device_register_request) {
delete device_register_request_;
device_register_request_ = device_register_request;
if (device_register_request) {
set_has_device_register_request();
} else {
clear_has_device_register_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
}

// -------------------------------------------------------------------

// RegisterBrowserRequest

// optional string machine_name = 1;
inline bool RegisterBrowserRequest::has_machine_name() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterBrowserRequest::set_has_machine_name() {
_has_bits_[0] |= 0x00000001u;
}
inline void RegisterBrowserRequest::clear_has_machine_name() {
_has_bits_[0] &= ~0x00000001u;
}
inline void RegisterBrowserRequest::clear_machine_name() {
machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_machine_name();
}
inline const ::std::string& RegisterBrowserRequest::machine_name() const {
// @@protoc_insertion_point(field_get:enterprise_management.RegisterBrowserRequest.machine_name)
return machine_name_.GetNoArena();
}
inline void RegisterBrowserRequest::set_machine_name(const ::std::string& value) {
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.RegisterBrowserRequest.machine_name)
}
#if LANG_CXX11
inline void RegisterBrowserRequest::set_machine_name(::std::string&& value) {
set_has_machine_name();
machine_name_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.RegisterBrowserRequest.machine_name)
}
#endif
inline void RegisterBrowserRequest::set_machine_name(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.RegisterBrowserRequest.machine_name)
}
inline void RegisterBrowserRequest::set_machine_name(const char* value, size_t size) {
set_has_machine_name();
machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.RegisterBrowserRequest.machine_name)
}
inline ::std::string* RegisterBrowserRequest::mutable_machine_name() {
set_has_machine_name();
// @@protoc_insertion_point(field_mutable:enterprise_management.RegisterBrowserRequest.machine_name)
return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterBrowserRequest::release_machine_name() {
// @@protoc_insertion_point(field_release:enterprise_management.RegisterBrowserRequest.machine_name)
clear_has_machine_name();
return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterBrowserRequest::set_allocated_machine_name(::std::string* machine_name) {
if (machine_name != NULL) {
set_has_machine_name();
} else {
clear_has_machine_name();
}
machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.RegisterBrowserRequest.machine_name)
}

// optional string os_platform = 2;
inline bool RegisterBrowserRequest::has_os_platform() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterBrowserRequest::set_has_os_platform() {
_has_bits_[0] |= 0x00000002u;
}
inline void RegisterBrowserRequest::clear_has_os_platform() {
_has_bits_[0] &= ~0x00000002u;
}
inline void RegisterBrowserRequest::clear_os_platform() {
os_platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_os_platform();
}
inline const ::std::string& RegisterBrowserRequest::os_platform() const {
// @@protoc_insertion_point(field_get:enterprise_management.RegisterBrowserRequest.os_platform)
return os_platform_.GetNoArena();
}
inline void RegisterBrowserRequest::set_os_platform(const ::std::string& value) {
set_has_os_platform();
os_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.RegisterBrowserRequest.os_platform)
}
#if LANG_CXX11
inline void RegisterBrowserRequest::set_os_platform(::std::string&& value) {
set_has_os_platform();
os_platform_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.RegisterBrowserRequest.os_platform)
}
#endif
inline void RegisterBrowserRequest::set_os_platform(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_os_platform();
os_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.RegisterBrowserRequest.os_platform)
}
inline void RegisterBrowserRequest::set_os_platform(const char* value, size_t size) {
set_has_os_platform();
os_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.RegisterBrowserRequest.os_platform)
}
inline ::std::string* RegisterBrowserRequest::mutable_os_platform() {
set_has_os_platform();
// @@protoc_insertion_point(field_mutable:enterprise_management.RegisterBrowserRequest.os_platform)
return os_platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterBrowserRequest::release_os_platform() {
// @@protoc_insertion_point(field_release:enterprise_management.RegisterBrowserRequest.os_platform)
clear_has_os_platform();
return os_platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterBrowserRequest::set_allocated_os_platform(::std::string* os_platform) {
if (os_platform != NULL) {
set_has_os_platform();
} else {
clear_has_os_platform();
}
os_platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_platform);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.RegisterBrowserRequest.os_platform)
}

// optional string os_version = 3;
inline bool RegisterBrowserRequest::has_os_version() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterBrowserRequest::set_has_os_version() {
_has_bits_[0] |= 0x00000004u;
}
inline void RegisterBrowserRequest::clear_has_os_version() {
_has_bits_[0] &= ~0x00000004u;
}
inline void RegisterBrowserRequest::clear_os_version() {
os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_os_version();
}
inline const ::std::string& RegisterBrowserRequest::os_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.RegisterBrowserRequest.os_version)
return os_version_.GetNoArena();
}
inline void RegisterBrowserRequest::set_os_version(const ::std::string& value) {
set_has_os_version();
os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.RegisterBrowserRequest.os_version)
}
#if LANG_CXX11
inline void RegisterBrowserRequest::set_os_version(::std::string&& value) {
set_has_os_version();
os_version_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.RegisterBrowserRequest.os_version)
}
#endif
inline void RegisterBrowserRequest::set_os_version(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_os_version();
os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.RegisterBrowserRequest.os_version)
}
inline void RegisterBrowserRequest::set_os_version(const char* value, size_t size) {
set_has_os_version();
os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.RegisterBrowserRequest.os_version)
}
inline ::std::string* RegisterBrowserRequest::mutable_os_version() {
set_has_os_version();
// @@protoc_insertion_point(field_mutable:enterprise_management.RegisterBrowserRequest.os_version)
return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterBrowserRequest::release_os_version() {
// @@protoc_insertion_point(field_release:enterprise_management.RegisterBrowserRequest.os_version)
clear_has_os_version();
return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterBrowserRequest::set_allocated_os_version(::std::string* os_version) {
if (os_version != NULL) {
set_has_os_version();
} else {
clear_has_os_version();
}
os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.RegisterBrowserRequest.os_version)
}

// -------------------------------------------------------------------

// ActiveDirectoryEnrollPlayUserRequest

// optional string auth_session_id = 1;
inline bool ActiveDirectoryEnrollPlayUserRequest::has_auth_session_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveDirectoryEnrollPlayUserRequest::set_has_auth_session_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void ActiveDirectoryEnrollPlayUserRequest::clear_has_auth_session_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void ActiveDirectoryEnrollPlayUserRequest::clear_auth_session_id() {
auth_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_auth_session_id();
}
inline const ::std::string& ActiveDirectoryEnrollPlayUserRequest::auth_session_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
return auth_session_id_.GetNoArena();
}
inline void ActiveDirectoryEnrollPlayUserRequest::set_auth_session_id(const ::std::string& value) {
set_has_auth_session_id();
auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
}
#if LANG_CXX11
inline void ActiveDirectoryEnrollPlayUserRequest::set_auth_session_id(::std::string&& value) {
set_has_auth_session_id();
auth_session_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
}
#endif
inline void ActiveDirectoryEnrollPlayUserRequest::set_auth_session_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_auth_session_id();
auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
}
inline void ActiveDirectoryEnrollPlayUserRequest::set_auth_session_id(const char* value, size_t size) {
set_has_auth_session_id();
auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
}
inline ::std::string* ActiveDirectoryEnrollPlayUserRequest::mutable_auth_session_id() {
set_has_auth_session_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
return auth_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActiveDirectoryEnrollPlayUserRequest::release_auth_session_id() {
// @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
clear_has_auth_session_id();
return auth_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveDirectoryEnrollPlayUserRequest::set_allocated_auth_session_id(::std::string* auth_session_id) {
if (auth_session_id != NULL) {
set_has_auth_session_id();
} else {
clear_has_auth_session_id();
}
auth_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_session_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
}

// -------------------------------------------------------------------

// ActiveDirectoryEnrollPlayUserResponse

// optional string enrollment_token = 1;
inline bool ActiveDirectoryEnrollPlayUserResponse::has_enrollment_token() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveDirectoryEnrollPlayUserResponse::set_has_enrollment_token() {
_has_bits_[0] |= 0x00000001u;
}
inline void ActiveDirectoryEnrollPlayUserResponse::clear_has_enrollment_token() {
_has_bits_[0] &= ~0x00000001u;
}
inline void ActiveDirectoryEnrollPlayUserResponse::clear_enrollment_token() {
enrollment_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_enrollment_token();
}
inline const ::std::string& ActiveDirectoryEnrollPlayUserResponse::enrollment_token() const {
// @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
return enrollment_token_.GetNoArena();
}
inline void ActiveDirectoryEnrollPlayUserResponse::set_enrollment_token(const ::std::string& value) {
set_has_enrollment_token();
enrollment_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
}
#if LANG_CXX11
inline void ActiveDirectoryEnrollPlayUserResponse::set_enrollment_token(::std::string&& value) {
set_has_enrollment_token();
enrollment_token_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
}
#endif
inline void ActiveDirectoryEnrollPlayUserResponse::set_enrollment_token(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_enrollment_token();
enrollment_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
}
inline void ActiveDirectoryEnrollPlayUserResponse::set_enrollment_token(const char* value, size_t size) {
set_has_enrollment_token();
enrollment_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
}
inline ::std::string* ActiveDirectoryEnrollPlayUserResponse::mutable_enrollment_token() {
set_has_enrollment_token();
// @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
return enrollment_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActiveDirectoryEnrollPlayUserResponse::release_enrollment_token() {
// @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
clear_has_enrollment_token();
return enrollment_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveDirectoryEnrollPlayUserResponse::set_allocated_enrollment_token(::std::string* enrollment_token) {
if (enrollment_token != NULL) {
set_has_enrollment_token();
} else {
clear_has_enrollment_token();
}
enrollment_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enrollment_token);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
}

// optional string user_id = 2;
inline bool ActiveDirectoryEnrollPlayUserResponse::has_user_id() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActiveDirectoryEnrollPlayUserResponse::set_has_user_id() {
_has_bits_[0] |= 0x00000002u;
}
inline void ActiveDirectoryEnrollPlayUserResponse::clear_has_user_id() {
_has_bits_[0] &= ~0x00000002u;
}
inline void ActiveDirectoryEnrollPlayUserResponse::clear_user_id() {
user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_user_id();
}
inline const ::std::string& ActiveDirectoryEnrollPlayUserResponse::user_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
return user_id_.GetNoArena();
}
inline void ActiveDirectoryEnrollPlayUserResponse::set_user_id(const ::std::string& value) {
set_has_user_id();
user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
}
#if LANG_CXX11
inline void ActiveDirectoryEnrollPlayUserResponse::set_user_id(::std::string&& value) {
set_has_user_id();
user_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
}
#endif
inline void ActiveDirectoryEnrollPlayUserResponse::set_user_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_user_id();
user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
}
inline void ActiveDirectoryEnrollPlayUserResponse::set_user_id(const char* value, size_t size) {
set_has_user_id();
user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
}
inline ::std::string* ActiveDirectoryEnrollPlayUserResponse::mutable_user_id() {
set_has_user_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActiveDirectoryEnrollPlayUserResponse::release_user_id() {
// @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
clear_has_user_id();
return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveDirectoryEnrollPlayUserResponse::set_allocated_user_id(::std::string* user_id) {
if (user_id != NULL) {
set_has_user_id();
} else {
clear_has_user_id();
}
user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
}

// optional .enterprise_management.SamlParametersProto saml_parameters = 3;
inline bool ActiveDirectoryEnrollPlayUserResponse::has_saml_parameters() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActiveDirectoryEnrollPlayUserResponse::set_has_saml_parameters() {
_has_bits_[0] |= 0x00000004u;
}
inline void ActiveDirectoryEnrollPlayUserResponse::clear_has_saml_parameters() {
_has_bits_[0] &= ~0x00000004u;
}
inline void ActiveDirectoryEnrollPlayUserResponse::clear_saml_parameters() {
if (saml_parameters_ != NULL) saml_parameters_->::enterprise_management::SamlParametersProto::Clear();
clear_has_saml_parameters();
}
inline const ::enterprise_management::SamlParametersProto& ActiveDirectoryEnrollPlayUserResponse::saml_parameters() const {
// @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.saml_parameters)
return saml_parameters_ != NULL ? *saml_parameters_
: *::enterprise_management::SamlParametersProto::internal_default_instance();
}
inline ::enterprise_management::SamlParametersProto* ActiveDirectoryEnrollPlayUserResponse::mutable_saml_parameters() {
set_has_saml_parameters();
if (saml_parameters_ == NULL) {
saml_parameters_ = new ::enterprise_management::SamlParametersProto;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.saml_parameters)
return saml_parameters_;
}
inline ::enterprise_management::SamlParametersProto* ActiveDirectoryEnrollPlayUserResponse::release_saml_parameters() {
// @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.saml_parameters)
clear_has_saml_parameters();
::enterprise_management::SamlParametersProto* temp = saml_parameters_;
saml_parameters_ = NULL;
return temp;
}
inline void ActiveDirectoryEnrollPlayUserResponse::set_allocated_saml_parameters(::enterprise_management::SamlParametersProto* saml_parameters) {
delete saml_parameters_;
saml_parameters_ = saml_parameters;
if (saml_parameters) {
set_has_saml_parameters();
} else {
clear_has_saml_parameters();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.saml_parameters)
}

// -------------------------------------------------------------------

// SamlParametersProto

// optional string auth_redirect_url = 1;
inline bool SamlParametersProto::has_auth_redirect_url() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SamlParametersProto::set_has_auth_redirect_url() {
_has_bits_[0] |= 0x00000001u;
}
inline void SamlParametersProto::clear_has_auth_redirect_url() {
_has_bits_[0] &= ~0x00000001u;
}
inline void SamlParametersProto::clear_auth_redirect_url() {
auth_redirect_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_auth_redirect_url();
}
inline const ::std::string& SamlParametersProto::auth_redirect_url() const {
// @@protoc_insertion_point(field_get:enterprise_management.SamlParametersProto.auth_redirect_url)
return auth_redirect_url_.GetNoArena();
}
inline void SamlParametersProto::set_auth_redirect_url(const ::std::string& value) {
set_has_auth_redirect_url();
auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.SamlParametersProto.auth_redirect_url)
}
#if LANG_CXX11
inline void SamlParametersProto::set_auth_redirect_url(::std::string&& value) {
set_has_auth_redirect_url();
auth_redirect_url_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.SamlParametersProto.auth_redirect_url)
}
#endif
inline void SamlParametersProto::set_auth_redirect_url(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_auth_redirect_url();
auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.SamlParametersProto.auth_redirect_url)
}
inline void SamlParametersProto::set_auth_redirect_url(const char* value, size_t size) {
set_has_auth_redirect_url();
auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.SamlParametersProto.auth_redirect_url)
}
inline ::std::string* SamlParametersProto::mutable_auth_redirect_url() {
set_has_auth_redirect_url();
// @@protoc_insertion_point(field_mutable:enterprise_management.SamlParametersProto.auth_redirect_url)
return auth_redirect_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SamlParametersProto::release_auth_redirect_url() {
// @@protoc_insertion_point(field_release:enterprise_management.SamlParametersProto.auth_redirect_url)
clear_has_auth_redirect_url();
return auth_redirect_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SamlParametersProto::set_allocated_auth_redirect_url(::std::string* auth_redirect_url) {
if (auth_redirect_url != NULL) {
set_has_auth_redirect_url();
} else {
clear_has_auth_redirect_url();
}
auth_redirect_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_redirect_url);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.SamlParametersProto.auth_redirect_url)
}

// optional string auth_session_id = 2;
inline bool SamlParametersProto::has_auth_session_id() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SamlParametersProto::set_has_auth_session_id() {
_has_bits_[0] |= 0x00000002u;
}
inline void SamlParametersProto::clear_has_auth_session_id() {
_has_bits_[0] &= ~0x00000002u;
}
inline void SamlParametersProto::clear_auth_session_id() {
auth_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_auth_session_id();
}
inline const ::std::string& SamlParametersProto::auth_session_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.SamlParametersProto.auth_session_id)
return auth_session_id_.GetNoArena();
}
inline void SamlParametersProto::set_auth_session_id(const ::std::string& value) {
set_has_auth_session_id();
auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.SamlParametersProto.auth_session_id)
}
#if LANG_CXX11
inline void SamlParametersProto::set_auth_session_id(::std::string&& value) {
set_has_auth_session_id();
auth_session_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.SamlParametersProto.auth_session_id)
}
#endif
inline void SamlParametersProto::set_auth_session_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_auth_session_id();
auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.SamlParametersProto.auth_session_id)
}
inline void SamlParametersProto::set_auth_session_id(const char* value, size_t size) {
set_has_auth_session_id();
auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.SamlParametersProto.auth_session_id)
}
inline ::std::string* SamlParametersProto::mutable_auth_session_id() {
set_has_auth_session_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.SamlParametersProto.auth_session_id)
return auth_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SamlParametersProto::release_auth_session_id() {
// @@protoc_insertion_point(field_release:enterprise_management.SamlParametersProto.auth_session_id)
clear_has_auth_session_id();
return auth_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SamlParametersProto::set_allocated_auth_session_id(::std::string* auth_session_id) {
if (auth_session_id != NULL) {
set_has_auth_session_id();
} else {
clear_has_auth_session_id();
}
auth_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_session_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.SamlParametersProto.auth_session_id)
}

// -------------------------------------------------------------------

// ActiveDirectoryPlayActivityRequest

// optional string user_id = 1;
inline bool ActiveDirectoryPlayActivityRequest::has_user_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveDirectoryPlayActivityRequest::set_has_user_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void ActiveDirectoryPlayActivityRequest::clear_has_user_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void ActiveDirectoryPlayActivityRequest::clear_user_id() {
user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_user_id();
}
inline const ::std::string& ActiveDirectoryPlayActivityRequest::user_id() const {
// @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
return user_id_.GetNoArena();
}
inline void ActiveDirectoryPlayActivityRequest::set_user_id(const ::std::string& value) {
set_has_user_id();
user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
}
#if LANG_CXX11
inline void ActiveDirectoryPlayActivityRequest::set_user_id(::std::string&& value) {
set_has_user_id();
user_id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
}
#endif
inline void ActiveDirectoryPlayActivityRequest::set_user_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_user_id();
user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
}
inline void ActiveDirectoryPlayActivityRequest::set_user_id(const char* value, size_t size) {
set_has_user_id();
user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
}
inline ::std::string* ActiveDirectoryPlayActivityRequest::mutable_user_id() {
set_has_user_id();
// @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActiveDirectoryPlayActivityRequest::release_user_id() {
// @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
clear_has_user_id();
return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveDirectoryPlayActivityRequest::set_allocated_user_id(::std::string* user_id) {
if (user_id != NULL) {
set_has_user_id();
} else {
clear_has_user_id();
}
user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
}

// -------------------------------------------------------------------

// ActiveDirectoryPlayActivityResponse

// -------------------------------------------------------------------

// CheckDeviceLicenseRequest

// -------------------------------------------------------------------

// LicenseAvailability

// optional .enterprise_management.LicenseType license_type = 1;
inline bool LicenseAvailability::has_license_type() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LicenseAvailability::set_has_license_type() {
_has_bits_[0] |= 0x00000001u;
}
inline void LicenseAvailability::clear_has_license_type() {
_has_bits_[0] &= ~0x00000001u;
}
inline void LicenseAvailability::clear_license_type() {
if (license_type_ != NULL) license_type_->::enterprise_management::LicenseType::Clear();
clear_has_license_type();
}
inline const ::enterprise_management::LicenseType& LicenseAvailability::license_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.LicenseAvailability.license_type)
return license_type_ != NULL ? *license_type_
: *::enterprise_management::LicenseType::internal_default_instance();
}
inline ::enterprise_management::LicenseType* LicenseAvailability::mutable_license_type() {
set_has_license_type();
if (license_type_ == NULL) {
license_type_ = new ::enterprise_management::LicenseType;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.LicenseAvailability.license_type)
return license_type_;
}
inline ::enterprise_management::LicenseType* LicenseAvailability::release_license_type() {
// @@protoc_insertion_point(field_release:enterprise_management.LicenseAvailability.license_type)
clear_has_license_type();
::enterprise_management::LicenseType* temp = license_type_;
license_type_ = NULL;
return temp;
}
inline void LicenseAvailability::set_allocated_license_type(::enterprise_management::LicenseType* license_type) {
delete license_type_;
license_type_ = license_type;
if (license_type) {
set_has_license_type();
} else {
clear_has_license_type();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.LicenseAvailability.license_type)
}

// optional int32 available_licenses = 2;
inline bool LicenseAvailability::has_available_licenses() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LicenseAvailability::set_has_available_licenses() {
_has_bits_[0] |= 0x00000002u;
}
inline void LicenseAvailability::clear_has_available_licenses() {
_has_bits_[0] &= ~0x00000002u;
}
inline void LicenseAvailability::clear_available_licenses() {
available_licenses_ = 0;
clear_has_available_licenses();
}
inline ::google::protobuf::int32 LicenseAvailability::available_licenses() const {
// @@protoc_insertion_point(field_get:enterprise_management.LicenseAvailability.available_licenses)
return available_licenses_;
}
inline void LicenseAvailability::set_available_licenses(::google::protobuf::int32 value) {
set_has_available_licenses();
available_licenses_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.LicenseAvailability.available_licenses)
}

// -------------------------------------------------------------------

// CheckDeviceLicenseResponse

// optional .enterprise_management.CheckDeviceLicenseResponse.LicenseSelectionMode license_selection_mode = 1;
inline bool CheckDeviceLicenseResponse::has_license_selection_mode() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckDeviceLicenseResponse::set_has_license_selection_mode() {
_has_bits_[0] |= 0x00000001u;
}
inline void CheckDeviceLicenseResponse::clear_has_license_selection_mode() {
_has_bits_[0] &= ~0x00000001u;
}
inline void CheckDeviceLicenseResponse::clear_license_selection_mode() {
license_selection_mode_ = 0;
clear_has_license_selection_mode();
}
inline ::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::license_selection_mode() const {
// @@protoc_insertion_point(field_get:enterprise_management.CheckDeviceLicenseResponse.license_selection_mode)
return static_cast< ::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode >(license_selection_mode_);
}
inline void CheckDeviceLicenseResponse::set_license_selection_mode(::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode value) {
assert(::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode_IsValid(value));
set_has_license_selection_mode();
license_selection_mode_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.CheckDeviceLicenseResponse.license_selection_mode)
}

// repeated .enterprise_management.LicenseAvailability license_availability = 2;
inline int CheckDeviceLicenseResponse::license_availability_size() const {
return license_availability_.size();
}
inline void CheckDeviceLicenseResponse::clear_license_availability() {
license_availability_.Clear();
}
inline const ::enterprise_management::LicenseAvailability& CheckDeviceLicenseResponse::license_availability(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.CheckDeviceLicenseResponse.license_availability)
return license_availability_.Get(index);
}
inline ::enterprise_management::LicenseAvailability* CheckDeviceLicenseResponse::mutable_license_availability(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.CheckDeviceLicenseResponse.license_availability)
return license_availability_.Mutable(index);
}
inline ::enterprise_management::LicenseAvailability* CheckDeviceLicenseResponse::add_license_availability() {
// @@protoc_insertion_point(field_add:enterprise_management.CheckDeviceLicenseResponse.license_availability)
return license_availability_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::LicenseAvailability >*
CheckDeviceLicenseResponse::mutable_license_availability() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.CheckDeviceLicenseResponse.license_availability)
return &license_availability_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::LicenseAvailability >&
CheckDeviceLicenseResponse::license_availability() const {
// @@protoc_insertion_point(field_list:enterprise_management.CheckDeviceLicenseResponse.license_availability)
return license_availability_;
}

// -------------------------------------------------------------------

// ActiveDirectoryUserSigninRequest

// -------------------------------------------------------------------

// ActiveDirectoryUserSigninResponse

// optional string auth_redirect_url = 1;
inline bool ActiveDirectoryUserSigninResponse::has_auth_redirect_url() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveDirectoryUserSigninResponse::set_has_auth_redirect_url() {
_has_bits_[0] |= 0x00000001u;
}
inline void ActiveDirectoryUserSigninResponse::clear_has_auth_redirect_url() {
_has_bits_[0] &= ~0x00000001u;
}
inline void ActiveDirectoryUserSigninResponse::clear_auth_redirect_url() {
auth_redirect_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_auth_redirect_url();
}
inline const ::std::string& ActiveDirectoryUserSigninResponse::auth_redirect_url() const {
// @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
return auth_redirect_url_.GetNoArena();
}
inline void ActiveDirectoryUserSigninResponse::set_auth_redirect_url(const ::std::string& value) {
set_has_auth_redirect_url();
auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
}
#if LANG_CXX11
inline void ActiveDirectoryUserSigninResponse::set_auth_redirect_url(::std::string&& value) {
set_has_auth_redirect_url();
auth_redirect_url_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
}
#endif
inline void ActiveDirectoryUserSigninResponse::set_auth_redirect_url(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_auth_redirect_url();
auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
}
inline void ActiveDirectoryUserSigninResponse::set_auth_redirect_url(const char* value, size_t size) {
set_has_auth_redirect_url();
auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
}
inline ::std::string* ActiveDirectoryUserSigninResponse::mutable_auth_redirect_url() {
set_has_auth_redirect_url();
// @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
return auth_redirect_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActiveDirectoryUserSigninResponse::release_auth_redirect_url() {
// @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
clear_has_auth_redirect_url();
return auth_redirect_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveDirectoryUserSigninResponse::set_allocated_auth_redirect_url(::std::string* auth_redirect_url) {
if (auth_redirect_url != NULL) {
set_has_auth_redirect_url();
} else {
clear_has_auth_redirect_url();
}
auth_redirect_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_redirect_url);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
}

// -------------------------------------------------------------------

// TpmVersionInfo

// optional uint32 family = 1;
inline bool TpmVersionInfo::has_family() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TpmVersionInfo::set_has_family() {
_has_bits_[0] |= 0x00000004u;
}
inline void TpmVersionInfo::clear_has_family() {
_has_bits_[0] &= ~0x00000004u;
}
inline void TpmVersionInfo::clear_family() {
family_ = 0u;
clear_has_family();
}
inline ::google::protobuf::uint32 TpmVersionInfo::family() const {
// @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.family)
return family_;
}
inline void TpmVersionInfo::set_family(::google::protobuf::uint32 value) {
set_has_family();
family_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.family)
}

// optional uint64 spec_level = 2;
inline bool TpmVersionInfo::has_spec_level() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TpmVersionInfo::set_has_spec_level() {
_has_bits_[0] |= 0x00000002u;
}
inline void TpmVersionInfo::clear_has_spec_level() {
_has_bits_[0] &= ~0x00000002u;
}
inline void TpmVersionInfo::clear_spec_level() {
spec_level_ = GOOGLE_ULONGLONG(0);
clear_has_spec_level();
}
inline ::google::protobuf::uint64 TpmVersionInfo::spec_level() const {
// @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.spec_level)
return spec_level_;
}
inline void TpmVersionInfo::set_spec_level(::google::protobuf::uint64 value) {
set_has_spec_level();
spec_level_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.spec_level)
}

// optional uint32 manufacturer = 3;
inline bool TpmVersionInfo::has_manufacturer() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TpmVersionInfo::set_has_manufacturer() {
_has_bits_[0] |= 0x00000008u;
}
inline void TpmVersionInfo::clear_has_manufacturer() {
_has_bits_[0] &= ~0x00000008u;
}
inline void TpmVersionInfo::clear_manufacturer() {
manufacturer_ = 0u;
clear_has_manufacturer();
}
inline ::google::protobuf::uint32 TpmVersionInfo::manufacturer() const {
// @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.manufacturer)
return manufacturer_;
}
inline void TpmVersionInfo::set_manufacturer(::google::protobuf::uint32 value) {
set_has_manufacturer();
manufacturer_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.manufacturer)
}

// optional uint32 tpm_model = 4;
inline bool TpmVersionInfo::has_tpm_model() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TpmVersionInfo::set_has_tpm_model() {
_has_bits_[0] |= 0x00000020u;
}
inline void TpmVersionInfo::clear_has_tpm_model() {
_has_bits_[0] &= ~0x00000020u;
}
inline void TpmVersionInfo::clear_tpm_model() {
tpm_model_ = 0u;
clear_has_tpm_model();
}
inline ::google::protobuf::uint32 TpmVersionInfo::tpm_model() const {
// @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.tpm_model)
return tpm_model_;
}
inline void TpmVersionInfo::set_tpm_model(::google::protobuf::uint32 value) {
set_has_tpm_model();
tpm_model_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.tpm_model)
}

// optional uint64 firmware_version = 5;
inline bool TpmVersionInfo::has_firmware_version() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TpmVersionInfo::set_has_firmware_version() {
_has_bits_[0] |= 0x00000010u;
}
inline void TpmVersionInfo::clear_has_firmware_version() {
_has_bits_[0] &= ~0x00000010u;
}
inline void TpmVersionInfo::clear_firmware_version() {
firmware_version_ = GOOGLE_ULONGLONG(0);
clear_has_firmware_version();
}
inline ::google::protobuf::uint64 TpmVersionInfo::firmware_version() const {
// @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.firmware_version)
return firmware_version_;
}
inline void TpmVersionInfo::set_firmware_version(::google::protobuf::uint64 value) {
set_has_firmware_version();
firmware_version_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.firmware_version)
}

// optional string vendor_specific = 6;
inline bool TpmVersionInfo::has_vendor_specific() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TpmVersionInfo::set_has_vendor_specific() {
_has_bits_[0] |= 0x00000001u;
}
inline void TpmVersionInfo::clear_has_vendor_specific() {
_has_bits_[0] &= ~0x00000001u;
}
inline void TpmVersionInfo::clear_vendor_specific() {
vendor_specific_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_vendor_specific();
}
inline const ::std::string& TpmVersionInfo::vendor_specific() const {
// @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.vendor_specific)
return vendor_specific_.GetNoArena();
}
inline void TpmVersionInfo::set_vendor_specific(const ::std::string& value) {
set_has_vendor_specific();
vendor_specific_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.vendor_specific)
}
#if LANG_CXX11
inline void TpmVersionInfo::set_vendor_specific(::std::string&& value) {
set_has_vendor_specific();
vendor_specific_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.TpmVersionInfo.vendor_specific)
}
#endif
inline void TpmVersionInfo::set_vendor_specific(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_vendor_specific();
vendor_specific_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.TpmVersionInfo.vendor_specific)
}
inline void TpmVersionInfo::set_vendor_specific(const char* value, size_t size) {
set_has_vendor_specific();
vendor_specific_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.TpmVersionInfo.vendor_specific)
}
inline ::std::string* TpmVersionInfo::mutable_vendor_specific() {
set_has_vendor_specific();
// @@protoc_insertion_point(field_mutable:enterprise_management.TpmVersionInfo.vendor_specific)
return vendor_specific_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TpmVersionInfo::release_vendor_specific() {
// @@protoc_insertion_point(field_release:enterprise_management.TpmVersionInfo.vendor_specific)
clear_has_vendor_specific();
return vendor_specific_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TpmVersionInfo::set_allocated_vendor_specific(::std::string* vendor_specific) {
if (vendor_specific != NULL) {
set_has_vendor_specific();
} else {
clear_has_vendor_specific();
}
vendor_specific_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor_specific);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.TpmVersionInfo.vendor_specific)
}

// -------------------------------------------------------------------

// SystemState

// repeated .enterprise_management.VolumeInfo volume_info = 1;
inline int SystemState::volume_info_size() const {
return volume_info_.size();
}
inline void SystemState::clear_volume_info() {
volume_info_.Clear();
}
inline const ::enterprise_management::VolumeInfo& SystemState::volume_info(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.SystemState.volume_info)
return volume_info_.Get(index);
}
inline ::enterprise_management::VolumeInfo* SystemState::mutable_volume_info(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.SystemState.volume_info)
return volume_info_.Mutable(index);
}
inline ::enterprise_management::VolumeInfo* SystemState::add_volume_info() {
// @@protoc_insertion_point(field_add:enterprise_management.SystemState.volume_info)
return volume_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >*
SystemState::mutable_volume_info() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.SystemState.volume_info)
return &volume_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >&
SystemState::volume_info() const {
// @@protoc_insertion_point(field_list:enterprise_management.SystemState.volume_info)
return volume_info_;
}

// -------------------------------------------------------------------

// AppInstallReportLogEvent

// optional int64 timestamp = 1;
inline bool AppInstallReportLogEvent::has_timestamp() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppInstallReportLogEvent::set_has_timestamp() {
_has_bits_[0] |= 0x00000002u;
}
inline void AppInstallReportLogEvent::clear_has_timestamp() {
_has_bits_[0] &= ~0x00000002u;
}
inline void AppInstallReportLogEvent::clear_timestamp() {
timestamp_ = GOOGLE_LONGLONG(0);
clear_has_timestamp();
}
inline ::google::protobuf::int64 AppInstallReportLogEvent::timestamp() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.timestamp)
return timestamp_;
}
inline void AppInstallReportLogEvent::set_timestamp(::google::protobuf::int64 value) {
set_has_timestamp();
timestamp_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.timestamp)
}

// optional .enterprise_management.AppInstallReportLogEvent.EventType event_type = 2;
inline bool AppInstallReportLogEvent::has_event_type() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppInstallReportLogEvent::set_has_event_type() {
_has_bits_[0] |= 0x00000008u;
}
inline void AppInstallReportLogEvent::clear_has_event_type() {
_has_bits_[0] &= ~0x00000008u;
}
inline void AppInstallReportLogEvent::clear_event_type() {
event_type_ = 0;
clear_has_event_type();
}
inline ::enterprise_management::AppInstallReportLogEvent_EventType AppInstallReportLogEvent::event_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.event_type)
return static_cast< ::enterprise_management::AppInstallReportLogEvent_EventType >(event_type_);
}
inline void AppInstallReportLogEvent::set_event_type(::enterprise_management::AppInstallReportLogEvent_EventType value) {
assert(::enterprise_management::AppInstallReportLogEvent_EventType_IsValid(value));
set_has_event_type();
event_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.event_type)
}

// optional int64 stateful_total = 3;
inline bool AppInstallReportLogEvent::has_stateful_total() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppInstallReportLogEvent::set_has_stateful_total() {
_has_bits_[0] |= 0x00000004u;
}
inline void AppInstallReportLogEvent::clear_has_stateful_total() {
_has_bits_[0] &= ~0x00000004u;
}
inline void AppInstallReportLogEvent::clear_stateful_total() {
stateful_total_ = GOOGLE_LONGLONG(0);
clear_has_stateful_total();
}
inline ::google::protobuf::int64 AppInstallReportLogEvent::stateful_total() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.stateful_total)
return stateful_total_;
}
inline void AppInstallReportLogEvent::set_stateful_total(::google::protobuf::int64 value) {
set_has_stateful_total();
stateful_total_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.stateful_total)
}

// optional int64 stateful_free = 4;
inline bool AppInstallReportLogEvent::has_stateful_free() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppInstallReportLogEvent::set_has_stateful_free() {
_has_bits_[0] |= 0x00000020u;
}
inline void AppInstallReportLogEvent::clear_has_stateful_free() {
_has_bits_[0] &= ~0x00000020u;
}
inline void AppInstallReportLogEvent::clear_stateful_free() {
stateful_free_ = GOOGLE_LONGLONG(0);
clear_has_stateful_free();
}
inline ::google::protobuf::int64 AppInstallReportLogEvent::stateful_free() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.stateful_free)
return stateful_free_;
}
inline void AppInstallReportLogEvent::set_stateful_free(::google::protobuf::int64 value) {
set_has_stateful_free();
stateful_free_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.stateful_free)
}

// optional int32 clouddps_response = 5;
inline bool AppInstallReportLogEvent::has_clouddps_response() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppInstallReportLogEvent::set_has_clouddps_response() {
_has_bits_[0] |= 0x00000010u;
}
inline void AppInstallReportLogEvent::clear_has_clouddps_response() {
_has_bits_[0] &= ~0x00000010u;
}
inline void AppInstallReportLogEvent::clear_clouddps_response() {
clouddps_response_ = 0;
clear_has_clouddps_response();
}
inline ::google::protobuf::int32 AppInstallReportLogEvent::clouddps_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.clouddps_response)
return clouddps_response_;
}
inline void AppInstallReportLogEvent::set_clouddps_response(::google::protobuf::int32 value) {
set_has_clouddps_response();
clouddps_response_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.clouddps_response)
}

// optional string phonesky_log = 6;
inline bool AppInstallReportLogEvent::has_phonesky_log() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppInstallReportLogEvent::set_has_phonesky_log() {
_has_bits_[0] |= 0x00000001u;
}
inline void AppInstallReportLogEvent::clear_has_phonesky_log() {
_has_bits_[0] &= ~0x00000001u;
}
inline void AppInstallReportLogEvent::clear_phonesky_log() {
phonesky_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_phonesky_log();
}
inline const ::std::string& AppInstallReportLogEvent::phonesky_log() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.phonesky_log)
return phonesky_log_.GetNoArena();
}
inline void AppInstallReportLogEvent::set_phonesky_log(const ::std::string& value) {
set_has_phonesky_log();
phonesky_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.phonesky_log)
}
#if LANG_CXX11
inline void AppInstallReportLogEvent::set_phonesky_log(::std::string&& value) {
set_has_phonesky_log();
phonesky_log_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppInstallReportLogEvent.phonesky_log)
}
#endif
inline void AppInstallReportLogEvent::set_phonesky_log(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_phonesky_log();
phonesky_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.AppInstallReportLogEvent.phonesky_log)
}
inline void AppInstallReportLogEvent::set_phonesky_log(const char* value, size_t size) {
set_has_phonesky_log();
phonesky_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.AppInstallReportLogEvent.phonesky_log)
}
inline ::std::string* AppInstallReportLogEvent::mutable_phonesky_log() {
set_has_phonesky_log();
// @@protoc_insertion_point(field_mutable:enterprise_management.AppInstallReportLogEvent.phonesky_log)
return phonesky_log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppInstallReportLogEvent::release_phonesky_log() {
// @@protoc_insertion_point(field_release:enterprise_management.AppInstallReportLogEvent.phonesky_log)
clear_has_phonesky_log();
return phonesky_log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppInstallReportLogEvent::set_allocated_phonesky_log(::std::string* phonesky_log) {
if (phonesky_log != NULL) {
set_has_phonesky_log();
} else {
clear_has_phonesky_log();
}
phonesky_log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonesky_log);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.AppInstallReportLogEvent.phonesky_log)
}

// optional bool online = 7;
inline bool AppInstallReportLogEvent::has_online() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppInstallReportLogEvent::set_has_online() {
_has_bits_[0] |= 0x00000040u;
}
inline void AppInstallReportLogEvent::clear_has_online() {
_has_bits_[0] &= ~0x00000040u;
}
inline void AppInstallReportLogEvent::clear_online() {
online_ = false;
clear_has_online();
}
inline bool AppInstallReportLogEvent::online() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.online)
return online_;
}
inline void AppInstallReportLogEvent::set_online(bool value) {
set_has_online();
online_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.online)
}

// optional .enterprise_management.AppInstallReportLogEvent.SessionStateChangeType session_state_change_type = 8;
inline bool AppInstallReportLogEvent::has_session_state_change_type() const {
return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AppInstallReportLogEvent::set_has_session_state_change_type() {
_has_bits_[0] |= 0x00000080u;
}
inline void AppInstallReportLogEvent::clear_has_session_state_change_type() {
_has_bits_[0] &= ~0x00000080u;
}
inline void AppInstallReportLogEvent::clear_session_state_change_type() {
session_state_change_type_ = 0;
clear_has_session_state_change_type();
}
inline ::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::session_state_change_type() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.session_state_change_type)
return static_cast< ::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType >(session_state_change_type_);
}
inline void AppInstallReportLogEvent::set_session_state_change_type(::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType value) {
assert(::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType_IsValid(value));
set_has_session_state_change_type();
session_state_change_type_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.session_state_change_type)
}

// -------------------------------------------------------------------

// AppInstallReport

// optional string package = 1;
inline bool AppInstallReport::has_package() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppInstallReport::set_has_package() {
_has_bits_[0] |= 0x00000001u;
}
inline void AppInstallReport::clear_has_package() {
_has_bits_[0] &= ~0x00000001u;
}
inline void AppInstallReport::clear_package() {
package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_package();
}
inline const ::std::string& AppInstallReport::package() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReport.package)
return package_.GetNoArena();
}
inline void AppInstallReport::set_package(const ::std::string& value) {
set_has_package();
package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.AppInstallReport.package)
}
#if LANG_CXX11
inline void AppInstallReport::set_package(::std::string&& value) {
set_has_package();
package_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppInstallReport.package)
}
#endif
inline void AppInstallReport::set_package(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_package();
package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.AppInstallReport.package)
}
inline void AppInstallReport::set_package(const char* value, size_t size) {
set_has_package();
package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.AppInstallReport.package)
}
inline ::std::string* AppInstallReport::mutable_package() {
set_has_package();
// @@protoc_insertion_point(field_mutable:enterprise_management.AppInstallReport.package)
return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppInstallReport::release_package() {
// @@protoc_insertion_point(field_release:enterprise_management.AppInstallReport.package)
clear_has_package();
return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppInstallReport::set_allocated_package(::std::string* package) {
if (package != NULL) {
set_has_package();
} else {
clear_has_package();
}
package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.AppInstallReport.package)
}

// optional bool incomplete = 2;
inline bool AppInstallReport::has_incomplete() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppInstallReport::set_has_incomplete() {
_has_bits_[0] |= 0x00000002u;
}
inline void AppInstallReport::clear_has_incomplete() {
_has_bits_[0] &= ~0x00000002u;
}
inline void AppInstallReport::clear_incomplete() {
incomplete_ = false;
clear_has_incomplete();
}
inline bool AppInstallReport::incomplete() const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReport.incomplete)
return incomplete_;
}
inline void AppInstallReport::set_incomplete(bool value) {
set_has_incomplete();
incomplete_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.AppInstallReport.incomplete)
}

// repeated .enterprise_management.AppInstallReportLogEvent log = 3;
inline int AppInstallReport::log_size() const {
return log_.size();
}
inline void AppInstallReport::clear_log() {
log_.Clear();
}
inline const ::enterprise_management::AppInstallReportLogEvent& AppInstallReport::log(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReport.log)
return log_.Get(index);
}
inline ::enterprise_management::AppInstallReportLogEvent* AppInstallReport::mutable_log(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.AppInstallReport.log)
return log_.Mutable(index);
}
inline ::enterprise_management::AppInstallReportLogEvent* AppInstallReport::add_log() {
// @@protoc_insertion_point(field_add:enterprise_management.AppInstallReport.log)
return log_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReportLogEvent >*
AppInstallReport::mutable_log() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.AppInstallReport.log)
return &log_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReportLogEvent >&
AppInstallReport::log() const {
// @@protoc_insertion_point(field_list:enterprise_management.AppInstallReport.log)
return log_;
}

// -------------------------------------------------------------------

// AppInstallReportRequest

// repeated .enterprise_management.AppInstallReport app_install_report = 1;
inline int AppInstallReportRequest::app_install_report_size() const {
return app_install_report_.size();
}
inline void AppInstallReportRequest::clear_app_install_report() {
app_install_report_.Clear();
}
inline const ::enterprise_management::AppInstallReport& AppInstallReportRequest::app_install_report(int index) const {
// @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportRequest.app_install_report)
return app_install_report_.Get(index);
}
inline ::enterprise_management::AppInstallReport* AppInstallReportRequest::mutable_app_install_report(int index) {
// @@protoc_insertion_point(field_mutable:enterprise_management.AppInstallReportRequest.app_install_report)
return app_install_report_.Mutable(index);
}
inline ::enterprise_management::AppInstallReport* AppInstallReportRequest::add_app_install_report() {
// @@protoc_insertion_point(field_add:enterprise_management.AppInstallReportRequest.app_install_report)
return app_install_report_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReport >*
AppInstallReportRequest::mutable_app_install_report() {
// @@protoc_insertion_point(field_mutable_list:enterprise_management.AppInstallReportRequest.app_install_report)
return &app_install_report_;
}
inline const ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReport >&
AppInstallReportRequest::app_install_report() const {
// @@protoc_insertion_point(field_list:enterprise_management.AppInstallReportRequest.app_install_report)
return app_install_report_;
}

// -------------------------------------------------------------------

// AppInstallReportResponse

// -------------------------------------------------------------------

// DeviceManagementRequest

// optional .enterprise_management.DeviceRegisterRequest register_request = 1;
inline bool DeviceManagementRequest::has_register_request() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceManagementRequest::set_has_register_request() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceManagementRequest::clear_has_register_request() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceManagementRequest::clear_register_request() {
if (register_request_ != NULL) register_request_->::enterprise_management::DeviceRegisterRequest::Clear();
clear_has_register_request();
}
inline const ::enterprise_management::DeviceRegisterRequest& DeviceManagementRequest::register_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.register_request)
return register_request_ != NULL ? *register_request_
: *::enterprise_management::DeviceRegisterRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceRegisterRequest* DeviceManagementRequest::mutable_register_request() {
set_has_register_request();
if (register_request_ == NULL) {
register_request_ = new ::enterprise_management::DeviceRegisterRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.register_request)
return register_request_;
}
inline ::enterprise_management::DeviceRegisterRequest* DeviceManagementRequest::release_register_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.register_request)
clear_has_register_request();
::enterprise_management::DeviceRegisterRequest* temp = register_request_;
register_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_register_request(::enterprise_management::DeviceRegisterRequest* register_request) {
delete register_request_;
register_request_ = register_request;
if (register_request) {
set_has_register_request();
} else {
clear_has_register_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.register_request)
}

// optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
inline bool DeviceManagementRequest::has_unregister_request() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceManagementRequest::set_has_unregister_request() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceManagementRequest::clear_has_unregister_request() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceManagementRequest::clear_unregister_request() {
if (unregister_request_ != NULL) unregister_request_->::enterprise_management::DeviceUnregisterRequest::Clear();
clear_has_unregister_request();
}
inline const ::enterprise_management::DeviceUnregisterRequest& DeviceManagementRequest::unregister_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.unregister_request)
return unregister_request_ != NULL ? *unregister_request_
: *::enterprise_management::DeviceUnregisterRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceUnregisterRequest* DeviceManagementRequest::mutable_unregister_request() {
set_has_unregister_request();
if (unregister_request_ == NULL) {
unregister_request_ = new ::enterprise_management::DeviceUnregisterRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.unregister_request)
return unregister_request_;
}
inline ::enterprise_management::DeviceUnregisterRequest* DeviceManagementRequest::release_unregister_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.unregister_request)
clear_has_unregister_request();
::enterprise_management::DeviceUnregisterRequest* temp = unregister_request_;
unregister_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_unregister_request(::enterprise_management::DeviceUnregisterRequest* unregister_request) {
delete unregister_request_;
unregister_request_ = unregister_request;
if (unregister_request) {
set_has_unregister_request();
} else {
clear_has_unregister_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.unregister_request)
}

// optional .enterprise_management.DevicePolicyRequest policy_request = 3;
inline bool DeviceManagementRequest::has_policy_request() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceManagementRequest::set_has_policy_request() {
_has_bits_[0] |= 0x00000004u;
}
inline void DeviceManagementRequest::clear_has_policy_request() {
_has_bits_[0] &= ~0x00000004u;
}
inline void DeviceManagementRequest::clear_policy_request() {
if (policy_request_ != NULL) policy_request_->::enterprise_management::DevicePolicyRequest::Clear();
clear_has_policy_request();
}
inline const ::enterprise_management::DevicePolicyRequest& DeviceManagementRequest::policy_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.policy_request)
return policy_request_ != NULL ? *policy_request_
: *::enterprise_management::DevicePolicyRequest::internal_default_instance();
}
inline ::enterprise_management::DevicePolicyRequest* DeviceManagementRequest::mutable_policy_request() {
set_has_policy_request();
if (policy_request_ == NULL) {
policy_request_ = new ::enterprise_management::DevicePolicyRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.policy_request)
return policy_request_;
}
inline ::enterprise_management::DevicePolicyRequest* DeviceManagementRequest::release_policy_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.policy_request)
clear_has_policy_request();
::enterprise_management::DevicePolicyRequest* temp = policy_request_;
policy_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_policy_request(::enterprise_management::DevicePolicyRequest* policy_request) {
delete policy_request_;
policy_request_ = policy_request;
if (policy_request) {
set_has_policy_request();
} else {
clear_has_policy_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.policy_request)
}

// optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
inline bool DeviceManagementRequest::has_device_status_report_request() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceManagementRequest::set_has_device_status_report_request() {
_has_bits_[0] |= 0x00000008u;
}
inline void DeviceManagementRequest::clear_has_device_status_report_request() {
_has_bits_[0] &= ~0x00000008u;
}
inline void DeviceManagementRequest::clear_device_status_report_request() {
if (device_status_report_request_ != NULL) device_status_report_request_->::enterprise_management::DeviceStatusReportRequest::Clear();
clear_has_device_status_report_request();
}
inline const ::enterprise_management::DeviceStatusReportRequest& DeviceManagementRequest::device_status_report_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_status_report_request)
return device_status_report_request_ != NULL ? *device_status_report_request_
: *::enterprise_management::DeviceStatusReportRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceStatusReportRequest* DeviceManagementRequest::mutable_device_status_report_request() {
set_has_device_status_report_request();
if (device_status_report_request_ == NULL) {
device_status_report_request_ = new ::enterprise_management::DeviceStatusReportRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_status_report_request)
return device_status_report_request_;
}
inline ::enterprise_management::DeviceStatusReportRequest* DeviceManagementRequest::release_device_status_report_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_status_report_request)
clear_has_device_status_report_request();
::enterprise_management::DeviceStatusReportRequest* temp = device_status_report_request_;
device_status_report_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_device_status_report_request(::enterprise_management::DeviceStatusReportRequest* device_status_report_request) {
delete device_status_report_request_;
device_status_report_request_ = device_status_report_request;
if (device_status_report_request) {
set_has_device_status_report_request();
} else {
clear_has_device_status_report_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_status_report_request)
}

// optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
inline bool DeviceManagementRequest::has_session_status_report_request() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceManagementRequest::set_has_session_status_report_request() {
_has_bits_[0] |= 0x00000010u;
}
inline void DeviceManagementRequest::clear_has_session_status_report_request() {
_has_bits_[0] &= ~0x00000010u;
}
inline void DeviceManagementRequest::clear_session_status_report_request() {
if (session_status_report_request_ != NULL) session_status_report_request_->::enterprise_management::SessionStatusReportRequest::Clear();
clear_has_session_status_report_request();
}
inline const ::enterprise_management::SessionStatusReportRequest& DeviceManagementRequest::session_status_report_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.session_status_report_request)
return session_status_report_request_ != NULL ? *session_status_report_request_
: *::enterprise_management::SessionStatusReportRequest::internal_default_instance();
}
inline ::enterprise_management::SessionStatusReportRequest* DeviceManagementRequest::mutable_session_status_report_request() {
set_has_session_status_report_request();
if (session_status_report_request_ == NULL) {
session_status_report_request_ = new ::enterprise_management::SessionStatusReportRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.session_status_report_request)
return session_status_report_request_;
}
inline ::enterprise_management::SessionStatusReportRequest* DeviceManagementRequest::release_session_status_report_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.session_status_report_request)
clear_has_session_status_report_request();
::enterprise_management::SessionStatusReportRequest* temp = session_status_report_request_;
session_status_report_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_session_status_report_request(::enterprise_management::SessionStatusReportRequest* session_status_report_request) {
delete session_status_report_request_;
session_status_report_request_ = session_status_report_request;
if (session_status_report_request) {
set_has_session_status_report_request();
} else {
clear_has_session_status_report_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.session_status_report_request)
}

// optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
inline bool DeviceManagementRequest::has_auto_enrollment_request() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceManagementRequest::set_has_auto_enrollment_request() {
_has_bits_[0] |= 0x00000020u;
}
inline void DeviceManagementRequest::clear_has_auto_enrollment_request() {
_has_bits_[0] &= ~0x00000020u;
}
inline void DeviceManagementRequest::clear_auto_enrollment_request() {
if (auto_enrollment_request_ != NULL) auto_enrollment_request_->::enterprise_management::DeviceAutoEnrollmentRequest::Clear();
clear_has_auto_enrollment_request();
}
inline const ::enterprise_management::DeviceAutoEnrollmentRequest& DeviceManagementRequest::auto_enrollment_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
return auto_enrollment_request_ != NULL ? *auto_enrollment_request_
: *::enterprise_management::DeviceAutoEnrollmentRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceAutoEnrollmentRequest* DeviceManagementRequest::mutable_auto_enrollment_request() {
set_has_auto_enrollment_request();
if (auto_enrollment_request_ == NULL) {
auto_enrollment_request_ = new ::enterprise_management::DeviceAutoEnrollmentRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
return auto_enrollment_request_;
}
inline ::enterprise_management::DeviceAutoEnrollmentRequest* DeviceManagementRequest::release_auto_enrollment_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
clear_has_auto_enrollment_request();
::enterprise_management::DeviceAutoEnrollmentRequest* temp = auto_enrollment_request_;
auto_enrollment_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_auto_enrollment_request(::enterprise_management::DeviceAutoEnrollmentRequest* auto_enrollment_request) {
delete auto_enrollment_request_;
auto_enrollment_request_ = auto_enrollment_request;
if (auto_enrollment_request) {
set_has_auto_enrollment_request();
} else {
clear_has_auto_enrollment_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
}

// optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
inline bool DeviceManagementRequest::has_cert_upload_request() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceManagementRequest::set_has_cert_upload_request() {
_has_bits_[0] |= 0x00000040u;
}
inline void DeviceManagementRequest::clear_has_cert_upload_request() {
_has_bits_[0] &= ~0x00000040u;
}
inline void DeviceManagementRequest::clear_cert_upload_request() {
if (cert_upload_request_ != NULL) cert_upload_request_->::enterprise_management::DeviceCertUploadRequest::Clear();
clear_has_cert_upload_request();
}
inline const ::enterprise_management::DeviceCertUploadRequest& DeviceManagementRequest::cert_upload_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.cert_upload_request)
return cert_upload_request_ != NULL ? *cert_upload_request_
: *::enterprise_management::DeviceCertUploadRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceCertUploadRequest* DeviceManagementRequest::mutable_cert_upload_request() {
set_has_cert_upload_request();
if (cert_upload_request_ == NULL) {
cert_upload_request_ = new ::enterprise_management::DeviceCertUploadRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.cert_upload_request)
return cert_upload_request_;
}
inline ::enterprise_management::DeviceCertUploadRequest* DeviceManagementRequest::release_cert_upload_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.cert_upload_request)
clear_has_cert_upload_request();
::enterprise_management::DeviceCertUploadRequest* temp = cert_upload_request_;
cert_upload_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_cert_upload_request(::enterprise_management::DeviceCertUploadRequest* cert_upload_request) {
delete cert_upload_request_;
cert_upload_request_ = cert_upload_request;
if (cert_upload_request) {
set_has_cert_upload_request();
} else {
clear_has_cert_upload_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.cert_upload_request)
}

// optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
inline bool DeviceManagementRequest::has_service_api_access_request() const {
return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceManagementRequest::set_has_service_api_access_request() {
_has_bits_[0] |= 0x00000080u;
}
inline void DeviceManagementRequest::clear_has_service_api_access_request() {
_has_bits_[0] &= ~0x00000080u;
}
inline void DeviceManagementRequest::clear_service_api_access_request() {
if (service_api_access_request_ != NULL) service_api_access_request_->::enterprise_management::DeviceServiceApiAccessRequest::Clear();
clear_has_service_api_access_request();
}
inline const ::enterprise_management::DeviceServiceApiAccessRequest& DeviceManagementRequest::service_api_access_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.service_api_access_request)
return service_api_access_request_ != NULL ? *service_api_access_request_
: *::enterprise_management::DeviceServiceApiAccessRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceServiceApiAccessRequest* DeviceManagementRequest::mutable_service_api_access_request() {
set_has_service_api_access_request();
if (service_api_access_request_ == NULL) {
service_api_access_request_ = new ::enterprise_management::DeviceServiceApiAccessRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.service_api_access_request)
return service_api_access_request_;
}
inline ::enterprise_management::DeviceServiceApiAccessRequest* DeviceManagementRequest::release_service_api_access_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.service_api_access_request)
clear_has_service_api_access_request();
::enterprise_management::DeviceServiceApiAccessRequest* temp = service_api_access_request_;
service_api_access_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_service_api_access_request(::enterprise_management::DeviceServiceApiAccessRequest* service_api_access_request) {
delete service_api_access_request_;
service_api_access_request_ = service_api_access_request;
if (service_api_access_request) {
set_has_service_api_access_request();
} else {
clear_has_service_api_access_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.service_api_access_request)
}

// optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
inline bool DeviceManagementRequest::has_device_state_retrieval_request() const {
return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceManagementRequest::set_has_device_state_retrieval_request() {
_has_bits_[0] |= 0x00000100u;
}
inline void DeviceManagementRequest::clear_has_device_state_retrieval_request() {
_has_bits_[0] &= ~0x00000100u;
}
inline void DeviceManagementRequest::clear_device_state_retrieval_request() {
if (device_state_retrieval_request_ != NULL) device_state_retrieval_request_->::enterprise_management::DeviceStateRetrievalRequest::Clear();
clear_has_device_state_retrieval_request();
}
inline const ::enterprise_management::DeviceStateRetrievalRequest& DeviceManagementRequest::device_state_retrieval_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
return device_state_retrieval_request_ != NULL ? *device_state_retrieval_request_
: *::enterprise_management::DeviceStateRetrievalRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceStateRetrievalRequest* DeviceManagementRequest::mutable_device_state_retrieval_request() {
set_has_device_state_retrieval_request();
if (device_state_retrieval_request_ == NULL) {
device_state_retrieval_request_ = new ::enterprise_management::DeviceStateRetrievalRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
return device_state_retrieval_request_;
}
inline ::enterprise_management::DeviceStateRetrievalRequest* DeviceManagementRequest::release_device_state_retrieval_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
clear_has_device_state_retrieval_request();
::enterprise_management::DeviceStateRetrievalRequest* temp = device_state_retrieval_request_;
device_state_retrieval_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_device_state_retrieval_request(::enterprise_management::DeviceStateRetrievalRequest* device_state_retrieval_request) {
delete device_state_retrieval_request_;
device_state_retrieval_request_ = device_state_retrieval_request;
if (device_state_retrieval_request) {
set_has_device_state_retrieval_request();
} else {
clear_has_device_state_retrieval_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
}

// optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
inline bool DeviceManagementRequest::has_device_state_key_update_request() const {
return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeviceManagementRequest::set_has_device_state_key_update_request() {
_has_bits_[0] |= 0x00000200u;
}
inline void DeviceManagementRequest::clear_has_device_state_key_update_request() {
_has_bits_[0] &= ~0x00000200u;
}
inline void DeviceManagementRequest::clear_device_state_key_update_request() {
if (device_state_key_update_request_ != NULL) device_state_key_update_request_->::enterprise_management::DeviceStateKeyUpdateRequest::Clear();
clear_has_device_state_key_update_request();
}
inline const ::enterprise_management::DeviceStateKeyUpdateRequest& DeviceManagementRequest::device_state_key_update_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
return device_state_key_update_request_ != NULL ? *device_state_key_update_request_
: *::enterprise_management::DeviceStateKeyUpdateRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceStateKeyUpdateRequest* DeviceManagementRequest::mutable_device_state_key_update_request() {
set_has_device_state_key_update_request();
if (device_state_key_update_request_ == NULL) {
device_state_key_update_request_ = new ::enterprise_management::DeviceStateKeyUpdateRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
return device_state_key_update_request_;
}
inline ::enterprise_management::DeviceStateKeyUpdateRequest* DeviceManagementRequest::release_device_state_key_update_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
clear_has_device_state_key_update_request();
::enterprise_management::DeviceStateKeyUpdateRequest* temp = device_state_key_update_request_;
device_state_key_update_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_device_state_key_update_request(::enterprise_management::DeviceStateKeyUpdateRequest* device_state_key_update_request) {
delete device_state_key_update_request_;
device_state_key_update_request_ = device_state_key_update_request;
if (device_state_key_update_request) {
set_has_device_state_key_update_request();
} else {
clear_has_device_state_key_update_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
}

// optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
inline bool DeviceManagementRequest::has_device_pairing_request() const {
return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DeviceManagementRequest::set_has_device_pairing_request() {
_has_bits_[0] |= 0x00000400u;
}
inline void DeviceManagementRequest::clear_has_device_pairing_request() {
_has_bits_[0] &= ~0x00000400u;
}
inline void DeviceManagementRequest::clear_device_pairing_request() {
if (device_pairing_request_ != NULL) device_pairing_request_->::enterprise_management::DevicePairingRequest::Clear();
clear_has_device_pairing_request();
}
inline const ::enterprise_management::DevicePairingRequest& DeviceManagementRequest::device_pairing_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_pairing_request)
return device_pairing_request_ != NULL ? *device_pairing_request_
: *::enterprise_management::DevicePairingRequest::internal_default_instance();
}
inline ::enterprise_management::DevicePairingRequest* DeviceManagementRequest::mutable_device_pairing_request() {
set_has_device_pairing_request();
if (device_pairing_request_ == NULL) {
device_pairing_request_ = new ::enterprise_management::DevicePairingRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_pairing_request)
return device_pairing_request_;
}
inline ::enterprise_management::DevicePairingRequest* DeviceManagementRequest::release_device_pairing_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_pairing_request)
clear_has_device_pairing_request();
::enterprise_management::DevicePairingRequest* temp = device_pairing_request_;
device_pairing_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_device_pairing_request(::enterprise_management::DevicePairingRequest* device_pairing_request) {
delete device_pairing_request_;
device_pairing_request_ = device_pairing_request;
if (device_pairing_request) {
set_has_device_pairing_request();
} else {
clear_has_device_pairing_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_pairing_request)
}

// optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
inline bool DeviceManagementRequest::has_check_device_pairing_request() const {
return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DeviceManagementRequest::set_has_check_device_pairing_request() {
_has_bits_[0] |= 0x00000800u;
}
inline void DeviceManagementRequest::clear_has_check_device_pairing_request() {
_has_bits_[0] &= ~0x00000800u;
}
inline void DeviceManagementRequest::clear_check_device_pairing_request() {
if (check_device_pairing_request_ != NULL) check_device_pairing_request_->::enterprise_management::CheckDevicePairingRequest::Clear();
clear_has_check_device_pairing_request();
}
inline const ::enterprise_management::CheckDevicePairingRequest& DeviceManagementRequest::check_device_pairing_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
return check_device_pairing_request_ != NULL ? *check_device_pairing_request_
: *::enterprise_management::CheckDevicePairingRequest::internal_default_instance();
}
inline ::enterprise_management::CheckDevicePairingRequest* DeviceManagementRequest::mutable_check_device_pairing_request() {
set_has_check_device_pairing_request();
if (check_device_pairing_request_ == NULL) {
check_device_pairing_request_ = new ::enterprise_management::CheckDevicePairingRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
return check_device_pairing_request_;
}
inline ::enterprise_management::CheckDevicePairingRequest* DeviceManagementRequest::release_check_device_pairing_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
clear_has_check_device_pairing_request();
::enterprise_management::CheckDevicePairingRequest* temp = check_device_pairing_request_;
check_device_pairing_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_check_device_pairing_request(::enterprise_management::CheckDevicePairingRequest* check_device_pairing_request) {
delete check_device_pairing_request_;
check_device_pairing_request_ = check_device_pairing_request;
if (check_device_pairing_request) {
set_has_check_device_pairing_request();
} else {
clear_has_check_device_pairing_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
}

// optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
inline bool DeviceManagementRequest::has_remote_command_request() const {
return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DeviceManagementRequest::set_has_remote_command_request() {
_has_bits_[0] |= 0x00001000u;
}
inline void DeviceManagementRequest::clear_has_remote_command_request() {
_has_bits_[0] &= ~0x00001000u;
}
inline void DeviceManagementRequest::clear_remote_command_request() {
if (remote_command_request_ != NULL) remote_command_request_->::enterprise_management::DeviceRemoteCommandRequest::Clear();
clear_has_remote_command_request();
}
inline const ::enterprise_management::DeviceRemoteCommandRequest& DeviceManagementRequest::remote_command_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.remote_command_request)
return remote_command_request_ != NULL ? *remote_command_request_
: *::enterprise_management::DeviceRemoteCommandRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceRemoteCommandRequest* DeviceManagementRequest::mutable_remote_command_request() {
set_has_remote_command_request();
if (remote_command_request_ == NULL) {
remote_command_request_ = new ::enterprise_management::DeviceRemoteCommandRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.remote_command_request)
return remote_command_request_;
}
inline ::enterprise_management::DeviceRemoteCommandRequest* DeviceManagementRequest::release_remote_command_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.remote_command_request)
clear_has_remote_command_request();
::enterprise_management::DeviceRemoteCommandRequest* temp = remote_command_request_;
remote_command_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_remote_command_request(::enterprise_management::DeviceRemoteCommandRequest* remote_command_request) {
delete remote_command_request_;
remote_command_request_ = remote_command_request;
if (remote_command_request) {
set_has_remote_command_request();
} else {
clear_has_remote_command_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.remote_command_request)
}

// optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
inline bool DeviceManagementRequest::has_device_attribute_update_permission_request() const {
return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DeviceManagementRequest::set_has_device_attribute_update_permission_request() {
_has_bits_[0] |= 0x00002000u;
}
inline void DeviceManagementRequest::clear_has_device_attribute_update_permission_request() {
_has_bits_[0] &= ~0x00002000u;
}
inline void DeviceManagementRequest::clear_device_attribute_update_permission_request() {
if (device_attribute_update_permission_request_ != NULL) device_attribute_update_permission_request_->::enterprise_management::DeviceAttributeUpdatePermissionRequest::Clear();
clear_has_device_attribute_update_permission_request();
}
inline const ::enterprise_management::DeviceAttributeUpdatePermissionRequest& DeviceManagementRequest::device_attribute_update_permission_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
return device_attribute_update_permission_request_ != NULL ? *device_attribute_update_permission_request_
: *::enterprise_management::DeviceAttributeUpdatePermissionRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceAttributeUpdatePermissionRequest* DeviceManagementRequest::mutable_device_attribute_update_permission_request() {
set_has_device_attribute_update_permission_request();
if (device_attribute_update_permission_request_ == NULL) {
device_attribute_update_permission_request_ = new ::enterprise_management::DeviceAttributeUpdatePermissionRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
return device_attribute_update_permission_request_;
}
inline ::enterprise_management::DeviceAttributeUpdatePermissionRequest* DeviceManagementRequest::release_device_attribute_update_permission_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
clear_has_device_attribute_update_permission_request();
::enterprise_management::DeviceAttributeUpdatePermissionRequest* temp = device_attribute_update_permission_request_;
device_attribute_update_permission_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_device_attribute_update_permission_request(::enterprise_management::DeviceAttributeUpdatePermissionRequest* device_attribute_update_permission_request) {
delete device_attribute_update_permission_request_;
device_attribute_update_permission_request_ = device_attribute_update_permission_request;
if (device_attribute_update_permission_request) {
set_has_device_attribute_update_permission_request();
} else {
clear_has_device_attribute_update_permission_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
}

// optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
inline bool DeviceManagementRequest::has_device_attribute_update_request() const {
return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DeviceManagementRequest::set_has_device_attribute_update_request() {
_has_bits_[0] |= 0x00004000u;
}
inline void DeviceManagementRequest::clear_has_device_attribute_update_request() {
_has_bits_[0] &= ~0x00004000u;
}
inline void DeviceManagementRequest::clear_device_attribute_update_request() {
if (device_attribute_update_request_ != NULL) device_attribute_update_request_->::enterprise_management::DeviceAttributeUpdateRequest::Clear();
clear_has_device_attribute_update_request();
}
inline const ::enterprise_management::DeviceAttributeUpdateRequest& DeviceManagementRequest::device_attribute_update_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
return device_attribute_update_request_ != NULL ? *device_attribute_update_request_
: *::enterprise_management::DeviceAttributeUpdateRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceAttributeUpdateRequest* DeviceManagementRequest::mutable_device_attribute_update_request() {
set_has_device_attribute_update_request();
if (device_attribute_update_request_ == NULL) {
device_attribute_update_request_ = new ::enterprise_management::DeviceAttributeUpdateRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
return device_attribute_update_request_;
}
inline ::enterprise_management::DeviceAttributeUpdateRequest* DeviceManagementRequest::release_device_attribute_update_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
clear_has_device_attribute_update_request();
::enterprise_management::DeviceAttributeUpdateRequest* temp = device_attribute_update_request_;
device_attribute_update_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_device_attribute_update_request(::enterprise_management::DeviceAttributeUpdateRequest* device_attribute_update_request) {
delete device_attribute_update_request_;
device_attribute_update_request_ = device_attribute_update_request;
if (device_attribute_update_request) {
set_has_device_attribute_update_request();
} else {
clear_has_device_attribute_update_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
}

// optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
inline bool DeviceManagementRequest::has_gcm_id_update_request() const {
return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DeviceManagementRequest::set_has_gcm_id_update_request() {
_has_bits_[0] |= 0x00008000u;
}
inline void DeviceManagementRequest::clear_has_gcm_id_update_request() {
_has_bits_[0] &= ~0x00008000u;
}
inline void DeviceManagementRequest::clear_gcm_id_update_request() {
if (gcm_id_update_request_ != NULL) gcm_id_update_request_->::enterprise_management::GcmIdUpdateRequest::Clear();
clear_has_gcm_id_update_request();
}
inline const ::enterprise_management::GcmIdUpdateRequest& DeviceManagementRequest::gcm_id_update_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
return gcm_id_update_request_ != NULL ? *gcm_id_update_request_
: *::enterprise_management::GcmIdUpdateRequest::internal_default_instance();
}
inline ::enterprise_management::GcmIdUpdateRequest* DeviceManagementRequest::mutable_gcm_id_update_request() {
set_has_gcm_id_update_request();
if (gcm_id_update_request_ == NULL) {
gcm_id_update_request_ = new ::enterprise_management::GcmIdUpdateRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
return gcm_id_update_request_;
}
inline ::enterprise_management::GcmIdUpdateRequest* DeviceManagementRequest::release_gcm_id_update_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
clear_has_gcm_id_update_request();
::enterprise_management::GcmIdUpdateRequest* temp = gcm_id_update_request_;
gcm_id_update_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_gcm_id_update_request(::enterprise_management::GcmIdUpdateRequest* gcm_id_update_request) {
delete gcm_id_update_request_;
gcm_id_update_request_ = gcm_id_update_request;
if (gcm_id_update_request) {
set_has_gcm_id_update_request();
} else {
clear_has_gcm_id_update_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
}

// optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
inline bool DeviceManagementRequest::has_check_android_management_request() const {
return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DeviceManagementRequest::set_has_check_android_management_request() {
_has_bits_[0] |= 0x00010000u;
}
inline void DeviceManagementRequest::clear_has_check_android_management_request() {
_has_bits_[0] &= ~0x00010000u;
}
inline void DeviceManagementRequest::clear_check_android_management_request() {
if (check_android_management_request_ != NULL) check_android_management_request_->::enterprise_management::CheckAndroidManagementRequest::Clear();
clear_has_check_android_management_request();
}
inline const ::enterprise_management::CheckAndroidManagementRequest& DeviceManagementRequest::check_android_management_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.check_android_management_request)
return check_android_management_request_ != NULL ? *check_android_management_request_
: *::enterprise_management::CheckAndroidManagementRequest::internal_default_instance();
}
inline ::enterprise_management::CheckAndroidManagementRequest* DeviceManagementRequest::mutable_check_android_management_request() {
set_has_check_android_management_request();
if (check_android_management_request_ == NULL) {
check_android_management_request_ = new ::enterprise_management::CheckAndroidManagementRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.check_android_management_request)
return check_android_management_request_;
}
inline ::enterprise_management::CheckAndroidManagementRequest* DeviceManagementRequest::release_check_android_management_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.check_android_management_request)
clear_has_check_android_management_request();
::enterprise_management::CheckAndroidManagementRequest* temp = check_android_management_request_;
check_android_management_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_check_android_management_request(::enterprise_management::CheckAndroidManagementRequest* check_android_management_request) {
delete check_android_management_request_;
check_android_management_request_ = check_android_management_request;
if (check_android_management_request) {
set_has_check_android_management_request();
} else {
clear_has_check_android_management_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.check_android_management_request)
}

// optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
inline bool DeviceManagementRequest::has_certificate_based_register_request() const {
return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DeviceManagementRequest::set_has_certificate_based_register_request() {
_has_bits_[0] |= 0x00020000u;
}
inline void DeviceManagementRequest::clear_has_certificate_based_register_request() {
_has_bits_[0] &= ~0x00020000u;
}
inline void DeviceManagementRequest::clear_certificate_based_register_request() {
if (certificate_based_register_request_ != NULL) certificate_based_register_request_->::enterprise_management::CertificateBasedDeviceRegisterRequest::Clear();
clear_has_certificate_based_register_request();
}
inline const ::enterprise_management::CertificateBasedDeviceRegisterRequest& DeviceManagementRequest::certificate_based_register_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
return certificate_based_register_request_ != NULL ? *certificate_based_register_request_
: *::enterprise_management::CertificateBasedDeviceRegisterRequest::internal_default_instance();
}
inline ::enterprise_management::CertificateBasedDeviceRegisterRequest* DeviceManagementRequest::mutable_certificate_based_register_request() {
set_has_certificate_based_register_request();
if (certificate_based_register_request_ == NULL) {
certificate_based_register_request_ = new ::enterprise_management::CertificateBasedDeviceRegisterRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
return certificate_based_register_request_;
}
inline ::enterprise_management::CertificateBasedDeviceRegisterRequest* DeviceManagementRequest::release_certificate_based_register_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
clear_has_certificate_based_register_request();
::enterprise_management::CertificateBasedDeviceRegisterRequest* temp = certificate_based_register_request_;
certificate_based_register_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_certificate_based_register_request(::enterprise_management::CertificateBasedDeviceRegisterRequest* certificate_based_register_request) {
delete certificate_based_register_request_;
certificate_based_register_request_ = certificate_based_register_request;
if (certificate_based_register_request) {
set_has_certificate_based_register_request();
} else {
clear_has_certificate_based_register_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
}

// optional .enterprise_management.ActiveDirectoryEnrollPlayUserRequest active_directory_enroll_play_user_request = 19;
inline bool DeviceManagementRequest::has_active_directory_enroll_play_user_request() const {
return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DeviceManagementRequest::set_has_active_directory_enroll_play_user_request() {
_has_bits_[0] |= 0x00040000u;
}
inline void DeviceManagementRequest::clear_has_active_directory_enroll_play_user_request() {
_has_bits_[0] &= ~0x00040000u;
}
inline void DeviceManagementRequest::clear_active_directory_enroll_play_user_request() {
if (active_directory_enroll_play_user_request_ != NULL) active_directory_enroll_play_user_request_->::enterprise_management::ActiveDirectoryEnrollPlayUserRequest::Clear();
clear_has_active_directory_enroll_play_user_request();
}
inline const ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest& DeviceManagementRequest::active_directory_enroll_play_user_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.active_directory_enroll_play_user_request)
return active_directory_enroll_play_user_request_ != NULL ? *active_directory_enroll_play_user_request_
: *::enterprise_management::ActiveDirectoryEnrollPlayUserRequest::internal_default_instance();
}
inline ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* DeviceManagementRequest::mutable_active_directory_enroll_play_user_request() {
set_has_active_directory_enroll_play_user_request();
if (active_directory_enroll_play_user_request_ == NULL) {
active_directory_enroll_play_user_request_ = new ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.active_directory_enroll_play_user_request)
return active_directory_enroll_play_user_request_;
}
inline ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* DeviceManagementRequest::release_active_directory_enroll_play_user_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.active_directory_enroll_play_user_request)
clear_has_active_directory_enroll_play_user_request();
::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* temp = active_directory_enroll_play_user_request_;
active_directory_enroll_play_user_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_active_directory_enroll_play_user_request(::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* active_directory_enroll_play_user_request) {
delete active_directory_enroll_play_user_request_;
active_directory_enroll_play_user_request_ = active_directory_enroll_play_user_request;
if (active_directory_enroll_play_user_request) {
set_has_active_directory_enroll_play_user_request();
} else {
clear_has_active_directory_enroll_play_user_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.active_directory_enroll_play_user_request)
}

// optional .enterprise_management.ActiveDirectoryPlayActivityRequest active_directory_play_activity_request = 20;
inline bool DeviceManagementRequest::has_active_directory_play_activity_request() const {
return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DeviceManagementRequest::set_has_active_directory_play_activity_request() {
_has_bits_[0] |= 0x00080000u;
}
inline void DeviceManagementRequest::clear_has_active_directory_play_activity_request() {
_has_bits_[0] &= ~0x00080000u;
}
inline void DeviceManagementRequest::clear_active_directory_play_activity_request() {
if (active_directory_play_activity_request_ != NULL) active_directory_play_activity_request_->::enterprise_management::ActiveDirectoryPlayActivityRequest::Clear();
clear_has_active_directory_play_activity_request();
}
inline const ::enterprise_management::ActiveDirectoryPlayActivityRequest& DeviceManagementRequest::active_directory_play_activity_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.active_directory_play_activity_request)
return active_directory_play_activity_request_ != NULL ? *active_directory_play_activity_request_
: *::enterprise_management::ActiveDirectoryPlayActivityRequest::internal_default_instance();
}
inline ::enterprise_management::ActiveDirectoryPlayActivityRequest* DeviceManagementRequest::mutable_active_directory_play_activity_request() {
set_has_active_directory_play_activity_request();
if (active_directory_play_activity_request_ == NULL) {
active_directory_play_activity_request_ = new ::enterprise_management::ActiveDirectoryPlayActivityRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.active_directory_play_activity_request)
return active_directory_play_activity_request_;
}
inline ::enterprise_management::ActiveDirectoryPlayActivityRequest* DeviceManagementRequest::release_active_directory_play_activity_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.active_directory_play_activity_request)
clear_has_active_directory_play_activity_request();
::enterprise_management::ActiveDirectoryPlayActivityRequest* temp = active_directory_play_activity_request_;
active_directory_play_activity_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_active_directory_play_activity_request(::enterprise_management::ActiveDirectoryPlayActivityRequest* active_directory_play_activity_request) {
delete active_directory_play_activity_request_;
active_directory_play_activity_request_ = active_directory_play_activity_request;
if (active_directory_play_activity_request) {
set_has_active_directory_play_activity_request();
} else {
clear_has_active_directory_play_activity_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.active_directory_play_activity_request)
}

// optional .enterprise_management.CheckDeviceLicenseRequest check_device_license_request = 21;
inline bool DeviceManagementRequest::has_check_device_license_request() const {
return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DeviceManagementRequest::set_has_check_device_license_request() {
_has_bits_[0] |= 0x00100000u;
}
inline void DeviceManagementRequest::clear_has_check_device_license_request() {
_has_bits_[0] &= ~0x00100000u;
}
inline void DeviceManagementRequest::clear_check_device_license_request() {
if (check_device_license_request_ != NULL) check_device_license_request_->::enterprise_management::CheckDeviceLicenseRequest::Clear();
clear_has_check_device_license_request();
}
inline const ::enterprise_management::CheckDeviceLicenseRequest& DeviceManagementRequest::check_device_license_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.check_device_license_request)
return check_device_license_request_ != NULL ? *check_device_license_request_
: *::enterprise_management::CheckDeviceLicenseRequest::internal_default_instance();
}
inline ::enterprise_management::CheckDeviceLicenseRequest* DeviceManagementRequest::mutable_check_device_license_request() {
set_has_check_device_license_request();
if (check_device_license_request_ == NULL) {
check_device_license_request_ = new ::enterprise_management::CheckDeviceLicenseRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.check_device_license_request)
return check_device_license_request_;
}
inline ::enterprise_management::CheckDeviceLicenseRequest* DeviceManagementRequest::release_check_device_license_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.check_device_license_request)
clear_has_check_device_license_request();
::enterprise_management::CheckDeviceLicenseRequest* temp = check_device_license_request_;
check_device_license_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_check_device_license_request(::enterprise_management::CheckDeviceLicenseRequest* check_device_license_request) {
delete check_device_license_request_;
check_device_license_request_ = check_device_license_request;
if (check_device_license_request) {
set_has_check_device_license_request();
} else {
clear_has_check_device_license_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.check_device_license_request)
}

// optional .enterprise_management.ActiveDirectoryUserSigninRequest active_directory_user_signin_request = 22;
inline bool DeviceManagementRequest::has_active_directory_user_signin_request() const {
return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DeviceManagementRequest::set_has_active_directory_user_signin_request() {
_has_bits_[0] |= 0x00200000u;
}
inline void DeviceManagementRequest::clear_has_active_directory_user_signin_request() {
_has_bits_[0] &= ~0x00200000u;
}
inline void DeviceManagementRequest::clear_active_directory_user_signin_request() {
if (active_directory_user_signin_request_ != NULL) active_directory_user_signin_request_->::enterprise_management::ActiveDirectoryUserSigninRequest::Clear();
clear_has_active_directory_user_signin_request();
}
inline const ::enterprise_management::ActiveDirectoryUserSigninRequest& DeviceManagementRequest::active_directory_user_signin_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.active_directory_user_signin_request)
return active_directory_user_signin_request_ != NULL ? *active_directory_user_signin_request_
: *::enterprise_management::ActiveDirectoryUserSigninRequest::internal_default_instance();
}
inline ::enterprise_management::ActiveDirectoryUserSigninRequest* DeviceManagementRequest::mutable_active_directory_user_signin_request() {
set_has_active_directory_user_signin_request();
if (active_directory_user_signin_request_ == NULL) {
active_directory_user_signin_request_ = new ::enterprise_management::ActiveDirectoryUserSigninRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.active_directory_user_signin_request)
return active_directory_user_signin_request_;
}
inline ::enterprise_management::ActiveDirectoryUserSigninRequest* DeviceManagementRequest::release_active_directory_user_signin_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.active_directory_user_signin_request)
clear_has_active_directory_user_signin_request();
::enterprise_management::ActiveDirectoryUserSigninRequest* temp = active_directory_user_signin_request_;
active_directory_user_signin_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_active_directory_user_signin_request(::enterprise_management::ActiveDirectoryUserSigninRequest* active_directory_user_signin_request) {
delete active_directory_user_signin_request_;
active_directory_user_signin_request_ = active_directory_user_signin_request;
if (active_directory_user_signin_request) {
set_has_active_directory_user_signin_request();
} else {
clear_has_active_directory_user_signin_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.active_directory_user_signin_request)
}

// optional .enterprise_management.RegisterBrowserRequest register_browser_request = 23;
inline bool DeviceManagementRequest::has_register_browser_request() const {
return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DeviceManagementRequest::set_has_register_browser_request() {
_has_bits_[0] |= 0x00400000u;
}
inline void DeviceManagementRequest::clear_has_register_browser_request() {
_has_bits_[0] &= ~0x00400000u;
}
inline void DeviceManagementRequest::clear_register_browser_request() {
if (register_browser_request_ != NULL) register_browser_request_->::enterprise_management::RegisterBrowserRequest::Clear();
clear_has_register_browser_request();
}
inline const ::enterprise_management::RegisterBrowserRequest& DeviceManagementRequest::register_browser_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.register_browser_request)
return register_browser_request_ != NULL ? *register_browser_request_
: *::enterprise_management::RegisterBrowserRequest::internal_default_instance();
}
inline ::enterprise_management::RegisterBrowserRequest* DeviceManagementRequest::mutable_register_browser_request() {
set_has_register_browser_request();
if (register_browser_request_ == NULL) {
register_browser_request_ = new ::enterprise_management::RegisterBrowserRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.register_browser_request)
return register_browser_request_;
}
inline ::enterprise_management::RegisterBrowserRequest* DeviceManagementRequest::release_register_browser_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.register_browser_request)
clear_has_register_browser_request();
::enterprise_management::RegisterBrowserRequest* temp = register_browser_request_;
register_browser_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_register_browser_request(::enterprise_management::RegisterBrowserRequest* register_browser_request) {
delete register_browser_request_;
register_browser_request_ = register_browser_request;
if (register_browser_request) {
set_has_register_browser_request();
} else {
clear_has_register_browser_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.register_browser_request)
}

// optional .enterprise_management.AppInstallReportRequest app_install_report_request = 25;
inline bool DeviceManagementRequest::has_app_install_report_request() const {
return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DeviceManagementRequest::set_has_app_install_report_request() {
_has_bits_[0] |= 0x00800000u;
}
inline void DeviceManagementRequest::clear_has_app_install_report_request() {
_has_bits_[0] &= ~0x00800000u;
}
inline void DeviceManagementRequest::clear_app_install_report_request() {
if (app_install_report_request_ != NULL) app_install_report_request_->::enterprise_management::AppInstallReportRequest::Clear();
clear_has_app_install_report_request();
}
inline const ::enterprise_management::AppInstallReportRequest& DeviceManagementRequest::app_install_report_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.app_install_report_request)
return app_install_report_request_ != NULL ? *app_install_report_request_
: *::enterprise_management::AppInstallReportRequest::internal_default_instance();
}
inline ::enterprise_management::AppInstallReportRequest* DeviceManagementRequest::mutable_app_install_report_request() {
set_has_app_install_report_request();
if (app_install_report_request_ == NULL) {
app_install_report_request_ = new ::enterprise_management::AppInstallReportRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.app_install_report_request)
return app_install_report_request_;
}
inline ::enterprise_management::AppInstallReportRequest* DeviceManagementRequest::release_app_install_report_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.app_install_report_request)
clear_has_app_install_report_request();
::enterprise_management::AppInstallReportRequest* temp = app_install_report_request_;
app_install_report_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_app_install_report_request(::enterprise_management::AppInstallReportRequest* app_install_report_request) {
delete app_install_report_request_;
app_install_report_request_ = app_install_report_request;
if (app_install_report_request) {
set_has_app_install_report_request();
} else {
clear_has_app_install_report_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.app_install_report_request)
}

// optional .enterprise_management.ChromeDesktopReportRequest chrome_desktop_report_request = 26;
inline bool DeviceManagementRequest::has_chrome_desktop_report_request() const {
return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DeviceManagementRequest::set_has_chrome_desktop_report_request() {
_has_bits_[0] |= 0x01000000u;
}
inline void DeviceManagementRequest::clear_has_chrome_desktop_report_request() {
_has_bits_[0] &= ~0x01000000u;
}
inline void DeviceManagementRequest::clear_chrome_desktop_report_request() {
if (chrome_desktop_report_request_ != NULL) chrome_desktop_report_request_->::enterprise_management::ChromeDesktopReportRequest::Clear();
clear_has_chrome_desktop_report_request();
}
inline const ::enterprise_management::ChromeDesktopReportRequest& DeviceManagementRequest::chrome_desktop_report_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.chrome_desktop_report_request)
return chrome_desktop_report_request_ != NULL ? *chrome_desktop_report_request_
: *::enterprise_management::ChromeDesktopReportRequest::internal_default_instance();
}
inline ::enterprise_management::ChromeDesktopReportRequest* DeviceManagementRequest::mutable_chrome_desktop_report_request() {
set_has_chrome_desktop_report_request();
if (chrome_desktop_report_request_ == NULL) {
chrome_desktop_report_request_ = new ::enterprise_management::ChromeDesktopReportRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.chrome_desktop_report_request)
return chrome_desktop_report_request_;
}
inline ::enterprise_management::ChromeDesktopReportRequest* DeviceManagementRequest::release_chrome_desktop_report_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.chrome_desktop_report_request)
clear_has_chrome_desktop_report_request();
::enterprise_management::ChromeDesktopReportRequest* temp = chrome_desktop_report_request_;
chrome_desktop_report_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_chrome_desktop_report_request(::enterprise_management::ChromeDesktopReportRequest* chrome_desktop_report_request) {
delete chrome_desktop_report_request_;
chrome_desktop_report_request_ = chrome_desktop_report_request;
if (chrome_desktop_report_request) {
set_has_chrome_desktop_report_request();
} else {
clear_has_chrome_desktop_report_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.chrome_desktop_report_request)
}

// optional .enterprise_management.PolicyValidationReportRequest policy_validation_report_request = 27;
inline bool DeviceManagementRequest::has_policy_validation_report_request() const {
return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DeviceManagementRequest::set_has_policy_validation_report_request() {
_has_bits_[0] |= 0x02000000u;
}
inline void DeviceManagementRequest::clear_has_policy_validation_report_request() {
_has_bits_[0] &= ~0x02000000u;
}
inline void DeviceManagementRequest::clear_policy_validation_report_request() {
if (policy_validation_report_request_ != NULL) policy_validation_report_request_->::enterprise_management::PolicyValidationReportRequest::Clear();
clear_has_policy_validation_report_request();
}
inline const ::enterprise_management::PolicyValidationReportRequest& DeviceManagementRequest::policy_validation_report_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.policy_validation_report_request)
return policy_validation_report_request_ != NULL ? *policy_validation_report_request_
: *::enterprise_management::PolicyValidationReportRequest::internal_default_instance();
}
inline ::enterprise_management::PolicyValidationReportRequest* DeviceManagementRequest::mutable_policy_validation_report_request() {
set_has_policy_validation_report_request();
if (policy_validation_report_request_ == NULL) {
policy_validation_report_request_ = new ::enterprise_management::PolicyValidationReportRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.policy_validation_report_request)
return policy_validation_report_request_;
}
inline ::enterprise_management::PolicyValidationReportRequest* DeviceManagementRequest::release_policy_validation_report_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.policy_validation_report_request)
clear_has_policy_validation_report_request();
::enterprise_management::PolicyValidationReportRequest* temp = policy_validation_report_request_;
policy_validation_report_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_policy_validation_report_request(::enterprise_management::PolicyValidationReportRequest* policy_validation_report_request) {
delete policy_validation_report_request_;
policy_validation_report_request_ = policy_validation_report_request;
if (policy_validation_report_request) {
set_has_policy_validation_report_request();
} else {
clear_has_policy_validation_report_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.policy_validation_report_request)
}

// optional .enterprise_management.DeviceInitialEnrollmentStateRequest device_initial_enrollment_state_request = 28;
inline bool DeviceManagementRequest::has_device_initial_enrollment_state_request() const {
return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DeviceManagementRequest::set_has_device_initial_enrollment_state_request() {
_has_bits_[0] |= 0x04000000u;
}
inline void DeviceManagementRequest::clear_has_device_initial_enrollment_state_request() {
_has_bits_[0] &= ~0x04000000u;
}
inline void DeviceManagementRequest::clear_device_initial_enrollment_state_request() {
if (device_initial_enrollment_state_request_ != NULL) device_initial_enrollment_state_request_->::enterprise_management::DeviceInitialEnrollmentStateRequest::Clear();
clear_has_device_initial_enrollment_state_request();
}
inline const ::enterprise_management::DeviceInitialEnrollmentStateRequest& DeviceManagementRequest::device_initial_enrollment_state_request() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_initial_enrollment_state_request)
return device_initial_enrollment_state_request_ != NULL ? *device_initial_enrollment_state_request_
: *::enterprise_management::DeviceInitialEnrollmentStateRequest::internal_default_instance();
}
inline ::enterprise_management::DeviceInitialEnrollmentStateRequest* DeviceManagementRequest::mutable_device_initial_enrollment_state_request() {
set_has_device_initial_enrollment_state_request();
if (device_initial_enrollment_state_request_ == NULL) {
device_initial_enrollment_state_request_ = new ::enterprise_management::DeviceInitialEnrollmentStateRequest;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_initial_enrollment_state_request)
return device_initial_enrollment_state_request_;
}
inline ::enterprise_management::DeviceInitialEnrollmentStateRequest* DeviceManagementRequest::release_device_initial_enrollment_state_request() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_initial_enrollment_state_request)
clear_has_device_initial_enrollment_state_request();
::enterprise_management::DeviceInitialEnrollmentStateRequest* temp = device_initial_enrollment_state_request_;
device_initial_enrollment_state_request_ = NULL;
return temp;
}
inline void DeviceManagementRequest::set_allocated_device_initial_enrollment_state_request(::enterprise_management::DeviceInitialEnrollmentStateRequest* device_initial_enrollment_state_request) {
delete device_initial_enrollment_state_request_;
device_initial_enrollment_state_request_ = device_initial_enrollment_state_request;
if (device_initial_enrollment_state_request) {
set_has_device_initial_enrollment_state_request();
} else {
clear_has_device_initial_enrollment_state_request();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_initial_enrollment_state_request)
}

// -------------------------------------------------------------------

// DeviceManagementResponse

// optional .enterprise_management.DeviceManagementResponse.ErrorCode error = 1 [default = SUCCESS];
inline bool DeviceManagementResponse::has_error() const {
return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DeviceManagementResponse::set_has_error() {
_has_bits_[0] |= 0x02000000u;
}
inline void DeviceManagementResponse::clear_has_error() {
_has_bits_[0] &= ~0x02000000u;
}
inline void DeviceManagementResponse::clear_error() {
error_ = 0;
clear_has_error();
}
inline ::enterprise_management::DeviceManagementResponse_ErrorCode DeviceManagementResponse::error() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.error)
return static_cast< ::enterprise_management::DeviceManagementResponse_ErrorCode >(error_);
}
inline void DeviceManagementResponse::set_error(::enterprise_management::DeviceManagementResponse_ErrorCode value) {
assert(::enterprise_management::DeviceManagementResponse_ErrorCode_IsValid(value));
set_has_error();
error_ = value;
// @@protoc_insertion_point(field_set:enterprise_management.DeviceManagementResponse.error)
}

// optional string error_message = 2;
inline bool DeviceManagementResponse::has_error_message() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceManagementResponse::set_has_error_message() {
_has_bits_[0] |= 0x00000001u;
}
inline void DeviceManagementResponse::clear_has_error_message() {
_has_bits_[0] &= ~0x00000001u;
}
inline void DeviceManagementResponse::clear_error_message() {
error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_error_message();
}
inline const ::std::string& DeviceManagementResponse::error_message() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.error_message)
return error_message_.GetNoArena();
}
inline void DeviceManagementResponse::set_error_message(const ::std::string& value) {
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.DeviceManagementResponse.error_message)
}
#if LANG_CXX11
inline void DeviceManagementResponse::set_error_message(::std::string&& value) {
set_has_error_message();
error_message_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceManagementResponse.error_message)
}
#endif
inline void DeviceManagementResponse::set_error_message(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.DeviceManagementResponse.error_message)
}
inline void DeviceManagementResponse::set_error_message(const char* value, size_t size) {
set_has_error_message();
error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceManagementResponse.error_message)
}
inline ::std::string* DeviceManagementResponse::mutable_error_message() {
set_has_error_message();
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.error_message)
return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceManagementResponse::release_error_message() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.error_message)
clear_has_error_message();
return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceManagementResponse::set_allocated_error_message(::std::string* error_message) {
if (error_message != NULL) {
set_has_error_message();
} else {
clear_has_error_message();
}
error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.error_message)
}

// optional .enterprise_management.DeviceRegisterResponse register_response = 3;
inline bool DeviceManagementResponse::has_register_response() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceManagementResponse::set_has_register_response() {
_has_bits_[0] |= 0x00000002u;
}
inline void DeviceManagementResponse::clear_has_register_response() {
_has_bits_[0] &= ~0x00000002u;
}
inline void DeviceManagementResponse::clear_register_response() {
if (register_response_ != NULL) register_response_->::enterprise_management::DeviceRegisterResponse::Clear();
clear_has_register_response();
}
inline const ::enterprise_management::DeviceRegisterResponse& DeviceManagementResponse::register_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.register_response)
return register_response_ != NULL ? *register_response_
: *::enterprise_management::DeviceRegisterResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceRegisterResponse* DeviceManagementResponse::mutable_register_response() {
set_has_register_response();
if (register_response_ == NULL) {
register_response_ = new ::enterprise_management::DeviceRegisterResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.register_response)
return register_response_;
}
inline ::enterprise_management::DeviceRegisterResponse* DeviceManagementResponse::release_register_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.register_response)
clear_has_register_response();
::enterprise_management::DeviceRegisterResponse* temp = register_response_;
register_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_register_response(::enterprise_management::DeviceRegisterResponse* register_response) {
delete register_response_;
register_response_ = register_response;
if (register_response) {
set_has_register_response();
} else {
clear_has_register_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.register_response)
}

// optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
inline bool DeviceManagementResponse::has_unregister_response() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceManagementResponse::set_has_unregister_response() {
_has_bits_[0] |= 0x00000004u;
}
inline void DeviceManagementResponse::clear_has_unregister_response() {
_has_bits_[0] &= ~0x00000004u;
}
inline void DeviceManagementResponse::clear_unregister_response() {
if (unregister_response_ != NULL) unregister_response_->::enterprise_management::DeviceUnregisterResponse::Clear();
clear_has_unregister_response();
}
inline const ::enterprise_management::DeviceUnregisterResponse& DeviceManagementResponse::unregister_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.unregister_response)
return unregister_response_ != NULL ? *unregister_response_
: *::enterprise_management::DeviceUnregisterResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceUnregisterResponse* DeviceManagementResponse::mutable_unregister_response() {
set_has_unregister_response();
if (unregister_response_ == NULL) {
unregister_response_ = new ::enterprise_management::DeviceUnregisterResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.unregister_response)
return unregister_response_;
}
inline ::enterprise_management::DeviceUnregisterResponse* DeviceManagementResponse::release_unregister_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.unregister_response)
clear_has_unregister_response();
::enterprise_management::DeviceUnregisterResponse* temp = unregister_response_;
unregister_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_unregister_response(::enterprise_management::DeviceUnregisterResponse* unregister_response) {
delete unregister_response_;
unregister_response_ = unregister_response;
if (unregister_response) {
set_has_unregister_response();
} else {
clear_has_unregister_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.unregister_response)
}

// optional .enterprise_management.DevicePolicyResponse policy_response = 5;
inline bool DeviceManagementResponse::has_policy_response() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceManagementResponse::set_has_policy_response() {
_has_bits_[0] |= 0x00000008u;
}
inline void DeviceManagementResponse::clear_has_policy_response() {
_has_bits_[0] &= ~0x00000008u;
}
inline void DeviceManagementResponse::clear_policy_response() {
if (policy_response_ != NULL) policy_response_->::enterprise_management::DevicePolicyResponse::Clear();
clear_has_policy_response();
}
inline const ::enterprise_management::DevicePolicyResponse& DeviceManagementResponse::policy_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.policy_response)
return policy_response_ != NULL ? *policy_response_
: *::enterprise_management::DevicePolicyResponse::internal_default_instance();
}
inline ::enterprise_management::DevicePolicyResponse* DeviceManagementResponse::mutable_policy_response() {
set_has_policy_response();
if (policy_response_ == NULL) {
policy_response_ = new ::enterprise_management::DevicePolicyResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.policy_response)
return policy_response_;
}
inline ::enterprise_management::DevicePolicyResponse* DeviceManagementResponse::release_policy_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.policy_response)
clear_has_policy_response();
::enterprise_management::DevicePolicyResponse* temp = policy_response_;
policy_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_policy_response(::enterprise_management::DevicePolicyResponse* policy_response) {
delete policy_response_;
policy_response_ = policy_response;
if (policy_response) {
set_has_policy_response();
} else {
clear_has_policy_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.policy_response)
}

// optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
inline bool DeviceManagementResponse::has_device_status_report_response() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceManagementResponse::set_has_device_status_report_response() {
_has_bits_[0] |= 0x00000010u;
}
inline void DeviceManagementResponse::clear_has_device_status_report_response() {
_has_bits_[0] &= ~0x00000010u;
}
inline void DeviceManagementResponse::clear_device_status_report_response() {
if (device_status_report_response_ != NULL) device_status_report_response_->::enterprise_management::DeviceStatusReportResponse::Clear();
clear_has_device_status_report_response();
}
inline const ::enterprise_management::DeviceStatusReportResponse& DeviceManagementResponse::device_status_report_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_status_report_response)
return device_status_report_response_ != NULL ? *device_status_report_response_
: *::enterprise_management::DeviceStatusReportResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceStatusReportResponse* DeviceManagementResponse::mutable_device_status_report_response() {
set_has_device_status_report_response();
if (device_status_report_response_ == NULL) {
device_status_report_response_ = new ::enterprise_management::DeviceStatusReportResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_status_report_response)
return device_status_report_response_;
}
inline ::enterprise_management::DeviceStatusReportResponse* DeviceManagementResponse::release_device_status_report_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_status_report_response)
clear_has_device_status_report_response();
::enterprise_management::DeviceStatusReportResponse* temp = device_status_report_response_;
device_status_report_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_device_status_report_response(::enterprise_management::DeviceStatusReportResponse* device_status_report_response) {
delete device_status_report_response_;
device_status_report_response_ = device_status_report_response;
if (device_status_report_response) {
set_has_device_status_report_response();
} else {
clear_has_device_status_report_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_status_report_response)
}

// optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
inline bool DeviceManagementResponse::has_session_status_report_response() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceManagementResponse::set_has_session_status_report_response() {
_has_bits_[0] |= 0x00000020u;
}
inline void DeviceManagementResponse::clear_has_session_status_report_response() {
_has_bits_[0] &= ~0x00000020u;
}
inline void DeviceManagementResponse::clear_session_status_report_response() {
if (session_status_report_response_ != NULL) session_status_report_response_->::enterprise_management::SessionStatusReportResponse::Clear();
clear_has_session_status_report_response();
}
inline const ::enterprise_management::SessionStatusReportResponse& DeviceManagementResponse::session_status_report_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.session_status_report_response)
return session_status_report_response_ != NULL ? *session_status_report_response_
: *::enterprise_management::SessionStatusReportResponse::internal_default_instance();
}
inline ::enterprise_management::SessionStatusReportResponse* DeviceManagementResponse::mutable_session_status_report_response() {
set_has_session_status_report_response();
if (session_status_report_response_ == NULL) {
session_status_report_response_ = new ::enterprise_management::SessionStatusReportResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.session_status_report_response)
return session_status_report_response_;
}
inline ::enterprise_management::SessionStatusReportResponse* DeviceManagementResponse::release_session_status_report_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.session_status_report_response)
clear_has_session_status_report_response();
::enterprise_management::SessionStatusReportResponse* temp = session_status_report_response_;
session_status_report_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_session_status_report_response(::enterprise_management::SessionStatusReportResponse* session_status_report_response) {
delete session_status_report_response_;
session_status_report_response_ = session_status_report_response;
if (session_status_report_response) {
set_has_session_status_report_response();
} else {
clear_has_session_status_report_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.session_status_report_response)
}

// optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
inline bool DeviceManagementResponse::has_auto_enrollment_response() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceManagementResponse::set_has_auto_enrollment_response() {
_has_bits_[0] |= 0x00000040u;
}
inline void DeviceManagementResponse::clear_has_auto_enrollment_response() {
_has_bits_[0] &= ~0x00000040u;
}
inline void DeviceManagementResponse::clear_auto_enrollment_response() {
if (auto_enrollment_response_ != NULL) auto_enrollment_response_->::enterprise_management::DeviceAutoEnrollmentResponse::Clear();
clear_has_auto_enrollment_response();
}
inline const ::enterprise_management::DeviceAutoEnrollmentResponse& DeviceManagementResponse::auto_enrollment_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
return auto_enrollment_response_ != NULL ? *auto_enrollment_response_
: *::enterprise_management::DeviceAutoEnrollmentResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceAutoEnrollmentResponse* DeviceManagementResponse::mutable_auto_enrollment_response() {
set_has_auto_enrollment_response();
if (auto_enrollment_response_ == NULL) {
auto_enrollment_response_ = new ::enterprise_management::DeviceAutoEnrollmentResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
return auto_enrollment_response_;
}
inline ::enterprise_management::DeviceAutoEnrollmentResponse* DeviceManagementResponse::release_auto_enrollment_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
clear_has_auto_enrollment_response();
::enterprise_management::DeviceAutoEnrollmentResponse* temp = auto_enrollment_response_;
auto_enrollment_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_auto_enrollment_response(::enterprise_management::DeviceAutoEnrollmentResponse* auto_enrollment_response) {
delete auto_enrollment_response_;
auto_enrollment_response_ = auto_enrollment_response;
if (auto_enrollment_response) {
set_has_auto_enrollment_response();
} else {
clear_has_auto_enrollment_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
}

// optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
inline bool DeviceManagementResponse::has_cert_upload_response() const {
return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceManagementResponse::set_has_cert_upload_response() {
_has_bits_[0] |= 0x00000080u;
}
inline void DeviceManagementResponse::clear_has_cert_upload_response() {
_has_bits_[0] &= ~0x00000080u;
}
inline void DeviceManagementResponse::clear_cert_upload_response() {
if (cert_upload_response_ != NULL) cert_upload_response_->::enterprise_management::DeviceCertUploadResponse::Clear();
clear_has_cert_upload_response();
}
inline const ::enterprise_management::DeviceCertUploadResponse& DeviceManagementResponse::cert_upload_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.cert_upload_response)
return cert_upload_response_ != NULL ? *cert_upload_response_
: *::enterprise_management::DeviceCertUploadResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceCertUploadResponse* DeviceManagementResponse::mutable_cert_upload_response() {
set_has_cert_upload_response();
if (cert_upload_response_ == NULL) {
cert_upload_response_ = new ::enterprise_management::DeviceCertUploadResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.cert_upload_response)
return cert_upload_response_;
}
inline ::enterprise_management::DeviceCertUploadResponse* DeviceManagementResponse::release_cert_upload_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.cert_upload_response)
clear_has_cert_upload_response();
::enterprise_management::DeviceCertUploadResponse* temp = cert_upload_response_;
cert_upload_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_cert_upload_response(::enterprise_management::DeviceCertUploadResponse* cert_upload_response) {
delete cert_upload_response_;
cert_upload_response_ = cert_upload_response;
if (cert_upload_response) {
set_has_cert_upload_response();
} else {
clear_has_cert_upload_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.cert_upload_response)
}

// optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
inline bool DeviceManagementResponse::has_service_api_access_response() const {
return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceManagementResponse::set_has_service_api_access_response() {
_has_bits_[0] |= 0x00000100u;
}
inline void DeviceManagementResponse::clear_has_service_api_access_response() {
_has_bits_[0] &= ~0x00000100u;
}
inline void DeviceManagementResponse::clear_service_api_access_response() {
if (service_api_access_response_ != NULL) service_api_access_response_->::enterprise_management::DeviceServiceApiAccessResponse::Clear();
clear_has_service_api_access_response();
}
inline const ::enterprise_management::DeviceServiceApiAccessResponse& DeviceManagementResponse::service_api_access_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.service_api_access_response)
return service_api_access_response_ != NULL ? *service_api_access_response_
: *::enterprise_management::DeviceServiceApiAccessResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceServiceApiAccessResponse* DeviceManagementResponse::mutable_service_api_access_response() {
set_has_service_api_access_response();
if (service_api_access_response_ == NULL) {
service_api_access_response_ = new ::enterprise_management::DeviceServiceApiAccessResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.service_api_access_response)
return service_api_access_response_;
}
inline ::enterprise_management::DeviceServiceApiAccessResponse* DeviceManagementResponse::release_service_api_access_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.service_api_access_response)
clear_has_service_api_access_response();
::enterprise_management::DeviceServiceApiAccessResponse* temp = service_api_access_response_;
service_api_access_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_service_api_access_response(::enterprise_management::DeviceServiceApiAccessResponse* service_api_access_response) {
delete service_api_access_response_;
service_api_access_response_ = service_api_access_response;
if (service_api_access_response) {
set_has_service_api_access_response();
} else {
clear_has_service_api_access_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.service_api_access_response)
}

// optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
inline bool DeviceManagementResponse::has_device_state_retrieval_response() const {
return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeviceManagementResponse::set_has_device_state_retrieval_response() {
_has_bits_[0] |= 0x00000200u;
}
inline void DeviceManagementResponse::clear_has_device_state_retrieval_response() {
_has_bits_[0] &= ~0x00000200u;
}
inline void DeviceManagementResponse::clear_device_state_retrieval_response() {
if (device_state_retrieval_response_ != NULL) device_state_retrieval_response_->::enterprise_management::DeviceStateRetrievalResponse::Clear();
clear_has_device_state_retrieval_response();
}
inline const ::enterprise_management::DeviceStateRetrievalResponse& DeviceManagementResponse::device_state_retrieval_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
return device_state_retrieval_response_ != NULL ? *device_state_retrieval_response_
: *::enterprise_management::DeviceStateRetrievalResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceStateRetrievalResponse* DeviceManagementResponse::mutable_device_state_retrieval_response() {
set_has_device_state_retrieval_response();
if (device_state_retrieval_response_ == NULL) {
device_state_retrieval_response_ = new ::enterprise_management::DeviceStateRetrievalResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
return device_state_retrieval_response_;
}
inline ::enterprise_management::DeviceStateRetrievalResponse* DeviceManagementResponse::release_device_state_retrieval_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
clear_has_device_state_retrieval_response();
::enterprise_management::DeviceStateRetrievalResponse* temp = device_state_retrieval_response_;
device_state_retrieval_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_device_state_retrieval_response(::enterprise_management::DeviceStateRetrievalResponse* device_state_retrieval_response) {
delete device_state_retrieval_response_;
device_state_retrieval_response_ = device_state_retrieval_response;
if (device_state_retrieval_response) {
set_has_device_state_retrieval_response();
} else {
clear_has_device_state_retrieval_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
}

// optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
inline bool DeviceManagementResponse::has_device_pairing_response() const {
return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DeviceManagementResponse::set_has_device_pairing_response() {
_has_bits_[0] |= 0x00000400u;
}
inline void DeviceManagementResponse::clear_has_device_pairing_response() {
_has_bits_[0] &= ~0x00000400u;
}
inline void DeviceManagementResponse::clear_device_pairing_response() {
if (device_pairing_response_ != NULL) device_pairing_response_->::enterprise_management::DevicePairingResponse::Clear();
clear_has_device_pairing_response();
}
inline const ::enterprise_management::DevicePairingResponse& DeviceManagementResponse::device_pairing_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_pairing_response)
return device_pairing_response_ != NULL ? *device_pairing_response_
: *::enterprise_management::DevicePairingResponse::internal_default_instance();
}
inline ::enterprise_management::DevicePairingResponse* DeviceManagementResponse::mutable_device_pairing_response() {
set_has_device_pairing_response();
if (device_pairing_response_ == NULL) {
device_pairing_response_ = new ::enterprise_management::DevicePairingResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_pairing_response)
return device_pairing_response_;
}
inline ::enterprise_management::DevicePairingResponse* DeviceManagementResponse::release_device_pairing_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_pairing_response)
clear_has_device_pairing_response();
::enterprise_management::DevicePairingResponse* temp = device_pairing_response_;
device_pairing_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_device_pairing_response(::enterprise_management::DevicePairingResponse* device_pairing_response) {
delete device_pairing_response_;
device_pairing_response_ = device_pairing_response;
if (device_pairing_response) {
set_has_device_pairing_response();
} else {
clear_has_device_pairing_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_pairing_response)
}

// optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
inline bool DeviceManagementResponse::has_check_device_pairing_response() const {
return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DeviceManagementResponse::set_has_check_device_pairing_response() {
_has_bits_[0] |= 0x00000800u;
}
inline void DeviceManagementResponse::clear_has_check_device_pairing_response() {
_has_bits_[0] &= ~0x00000800u;
}
inline void DeviceManagementResponse::clear_check_device_pairing_response() {
if (check_device_pairing_response_ != NULL) check_device_pairing_response_->::enterprise_management::CheckDevicePairingResponse::Clear();
clear_has_check_device_pairing_response();
}
inline const ::enterprise_management::CheckDevicePairingResponse& DeviceManagementResponse::check_device_pairing_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
return check_device_pairing_response_ != NULL ? *check_device_pairing_response_
: *::enterprise_management::CheckDevicePairingResponse::internal_default_instance();
}
inline ::enterprise_management::CheckDevicePairingResponse* DeviceManagementResponse::mutable_check_device_pairing_response() {
set_has_check_device_pairing_response();
if (check_device_pairing_response_ == NULL) {
check_device_pairing_response_ = new ::enterprise_management::CheckDevicePairingResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
return check_device_pairing_response_;
}
inline ::enterprise_management::CheckDevicePairingResponse* DeviceManagementResponse::release_check_device_pairing_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
clear_has_check_device_pairing_response();
::enterprise_management::CheckDevicePairingResponse* temp = check_device_pairing_response_;
check_device_pairing_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_check_device_pairing_response(::enterprise_management::CheckDevicePairingResponse* check_device_pairing_response) {
delete check_device_pairing_response_;
check_device_pairing_response_ = check_device_pairing_response;
if (check_device_pairing_response) {
set_has_check_device_pairing_response();
} else {
clear_has_check_device_pairing_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
}

// optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
inline bool DeviceManagementResponse::has_remote_command_response() const {
return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DeviceManagementResponse::set_has_remote_command_response() {
_has_bits_[0] |= 0x00001000u;
}
inline void DeviceManagementResponse::clear_has_remote_command_response() {
_has_bits_[0] &= ~0x00001000u;
}
inline void DeviceManagementResponse::clear_remote_command_response() {
if (remote_command_response_ != NULL) remote_command_response_->::enterprise_management::DeviceRemoteCommandResponse::Clear();
clear_has_remote_command_response();
}
inline const ::enterprise_management::DeviceRemoteCommandResponse& DeviceManagementResponse::remote_command_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.remote_command_response)
return remote_command_response_ != NULL ? *remote_command_response_
: *::enterprise_management::DeviceRemoteCommandResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceRemoteCommandResponse* DeviceManagementResponse::mutable_remote_command_response() {
set_has_remote_command_response();
if (remote_command_response_ == NULL) {
remote_command_response_ = new ::enterprise_management::DeviceRemoteCommandResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.remote_command_response)
return remote_command_response_;
}
inline ::enterprise_management::DeviceRemoteCommandResponse* DeviceManagementResponse::release_remote_command_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.remote_command_response)
clear_has_remote_command_response();
::enterprise_management::DeviceRemoteCommandResponse* temp = remote_command_response_;
remote_command_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_remote_command_response(::enterprise_management::DeviceRemoteCommandResponse* remote_command_response) {
delete remote_command_response_;
remote_command_response_ = remote_command_response;
if (remote_command_response) {
set_has_remote_command_response();
} else {
clear_has_remote_command_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.remote_command_response)
}

// optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
inline bool DeviceManagementResponse::has_device_attribute_update_permission_response() const {
return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DeviceManagementResponse::set_has_device_attribute_update_permission_response() {
_has_bits_[0] |= 0x00002000u;
}
inline void DeviceManagementResponse::clear_has_device_attribute_update_permission_response() {
_has_bits_[0] &= ~0x00002000u;
}
inline void DeviceManagementResponse::clear_device_attribute_update_permission_response() {
if (device_attribute_update_permission_response_ != NULL) device_attribute_update_permission_response_->::enterprise_management::DeviceAttributeUpdatePermissionResponse::Clear();
clear_has_device_attribute_update_permission_response();
}
inline const ::enterprise_management::DeviceAttributeUpdatePermissionResponse& DeviceManagementResponse::device_attribute_update_permission_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
return device_attribute_update_permission_response_ != NULL ? *device_attribute_update_permission_response_
: *::enterprise_management::DeviceAttributeUpdatePermissionResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceAttributeUpdatePermissionResponse* DeviceManagementResponse::mutable_device_attribute_update_permission_response() {
set_has_device_attribute_update_permission_response();
if (device_attribute_update_permission_response_ == NULL) {
device_attribute_update_permission_response_ = new ::enterprise_management::DeviceAttributeUpdatePermissionResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
return device_attribute_update_permission_response_;
}
inline ::enterprise_management::DeviceAttributeUpdatePermissionResponse* DeviceManagementResponse::release_device_attribute_update_permission_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
clear_has_device_attribute_update_permission_response();
::enterprise_management::DeviceAttributeUpdatePermissionResponse* temp = device_attribute_update_permission_response_;
device_attribute_update_permission_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_device_attribute_update_permission_response(::enterprise_management::DeviceAttributeUpdatePermissionResponse* device_attribute_update_permission_response) {
delete device_attribute_update_permission_response_;
device_attribute_update_permission_response_ = device_attribute_update_permission_response;
if (device_attribute_update_permission_response) {
set_has_device_attribute_update_permission_response();
} else {
clear_has_device_attribute_update_permission_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
}

// optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
inline bool DeviceManagementResponse::has_device_attribute_update_response() const {
return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DeviceManagementResponse::set_has_device_attribute_update_response() {
_has_bits_[0] |= 0x00004000u;
}
inline void DeviceManagementResponse::clear_has_device_attribute_update_response() {
_has_bits_[0] &= ~0x00004000u;
}
inline void DeviceManagementResponse::clear_device_attribute_update_response() {
if (device_attribute_update_response_ != NULL) device_attribute_update_response_->::enterprise_management::DeviceAttributeUpdateResponse::Clear();
clear_has_device_attribute_update_response();
}
inline const ::enterprise_management::DeviceAttributeUpdateResponse& DeviceManagementResponse::device_attribute_update_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
return device_attribute_update_response_ != NULL ? *device_attribute_update_response_
: *::enterprise_management::DeviceAttributeUpdateResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceAttributeUpdateResponse* DeviceManagementResponse::mutable_device_attribute_update_response() {
set_has_device_attribute_update_response();
if (device_attribute_update_response_ == NULL) {
device_attribute_update_response_ = new ::enterprise_management::DeviceAttributeUpdateResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
return device_attribute_update_response_;
}
inline ::enterprise_management::DeviceAttributeUpdateResponse* DeviceManagementResponse::release_device_attribute_update_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
clear_has_device_attribute_update_response();
::enterprise_management::DeviceAttributeUpdateResponse* temp = device_attribute_update_response_;
device_attribute_update_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_device_attribute_update_response(::enterprise_management::DeviceAttributeUpdateResponse* device_attribute_update_response) {
delete device_attribute_update_response_;
device_attribute_update_response_ = device_attribute_update_response;
if (device_attribute_update_response) {
set_has_device_attribute_update_response();
} else {
clear_has_device_attribute_update_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
}

// optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
inline bool DeviceManagementResponse::has_gcm_id_update_response() const {
return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DeviceManagementResponse::set_has_gcm_id_update_response() {
_has_bits_[0] |= 0x00008000u;
}
inline void DeviceManagementResponse::clear_has_gcm_id_update_response() {
_has_bits_[0] &= ~0x00008000u;
}
inline void DeviceManagementResponse::clear_gcm_id_update_response() {
if (gcm_id_update_response_ != NULL) gcm_id_update_response_->::enterprise_management::GcmIdUpdateResponse::Clear();
clear_has_gcm_id_update_response();
}
inline const ::enterprise_management::GcmIdUpdateResponse& DeviceManagementResponse::gcm_id_update_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
return gcm_id_update_response_ != NULL ? *gcm_id_update_response_
: *::enterprise_management::GcmIdUpdateResponse::internal_default_instance();
}
inline ::enterprise_management::GcmIdUpdateResponse* DeviceManagementResponse::mutable_gcm_id_update_response() {
set_has_gcm_id_update_response();
if (gcm_id_update_response_ == NULL) {
gcm_id_update_response_ = new ::enterprise_management::GcmIdUpdateResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
return gcm_id_update_response_;
}
inline ::enterprise_management::GcmIdUpdateResponse* DeviceManagementResponse::release_gcm_id_update_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
clear_has_gcm_id_update_response();
::enterprise_management::GcmIdUpdateResponse* temp = gcm_id_update_response_;
gcm_id_update_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_gcm_id_update_response(::enterprise_management::GcmIdUpdateResponse* gcm_id_update_response) {
delete gcm_id_update_response_;
gcm_id_update_response_ = gcm_id_update_response;
if (gcm_id_update_response) {
set_has_gcm_id_update_response();
} else {
clear_has_gcm_id_update_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
}

// optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
inline bool DeviceManagementResponse::has_check_android_management_response() const {
return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DeviceManagementResponse::set_has_check_android_management_response() {
_has_bits_[0] |= 0x00010000u;
}
inline void DeviceManagementResponse::clear_has_check_android_management_response() {
_has_bits_[0] &= ~0x00010000u;
}
inline void DeviceManagementResponse::clear_check_android_management_response() {
if (check_android_management_response_ != NULL) check_android_management_response_->::enterprise_management::CheckAndroidManagementResponse::Clear();
clear_has_check_android_management_response();
}
inline const ::enterprise_management::CheckAndroidManagementResponse& DeviceManagementResponse::check_android_management_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.check_android_management_response)
return check_android_management_response_ != NULL ? *check_android_management_response_
: *::enterprise_management::CheckAndroidManagementResponse::internal_default_instance();
}
inline ::enterprise_management::CheckAndroidManagementResponse* DeviceManagementResponse::mutable_check_android_management_response() {
set_has_check_android_management_response();
if (check_android_management_response_ == NULL) {
check_android_management_response_ = new ::enterprise_management::CheckAndroidManagementResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.check_android_management_response)
return check_android_management_response_;
}
inline ::enterprise_management::CheckAndroidManagementResponse* DeviceManagementResponse::release_check_android_management_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.check_android_management_response)
clear_has_check_android_management_response();
::enterprise_management::CheckAndroidManagementResponse* temp = check_android_management_response_;
check_android_management_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_check_android_management_response(::enterprise_management::CheckAndroidManagementResponse* check_android_management_response) {
delete check_android_management_response_;
check_android_management_response_ = check_android_management_response;
if (check_android_management_response) {
set_has_check_android_management_response();
} else {
clear_has_check_android_management_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.check_android_management_response)
}

// optional .enterprise_management.ActiveDirectoryEnrollPlayUserResponse active_directory_enroll_play_user_response = 19;
inline bool DeviceManagementResponse::has_active_directory_enroll_play_user_response() const {
return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DeviceManagementResponse::set_has_active_directory_enroll_play_user_response() {
_has_bits_[0] |= 0x00020000u;
}
inline void DeviceManagementResponse::clear_has_active_directory_enroll_play_user_response() {
_has_bits_[0] &= ~0x00020000u;
}
inline void DeviceManagementResponse::clear_active_directory_enroll_play_user_response() {
if (active_directory_enroll_play_user_response_ != NULL) active_directory_enroll_play_user_response_->::enterprise_management::ActiveDirectoryEnrollPlayUserResponse::Clear();
clear_has_active_directory_enroll_play_user_response();
}
inline const ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse& DeviceManagementResponse::active_directory_enroll_play_user_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.active_directory_enroll_play_user_response)
return active_directory_enroll_play_user_response_ != NULL ? *active_directory_enroll_play_user_response_
: *::enterprise_management::ActiveDirectoryEnrollPlayUserResponse::internal_default_instance();
}
inline ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* DeviceManagementResponse::mutable_active_directory_enroll_play_user_response() {
set_has_active_directory_enroll_play_user_response();
if (active_directory_enroll_play_user_response_ == NULL) {
active_directory_enroll_play_user_response_ = new ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.active_directory_enroll_play_user_response)
return active_directory_enroll_play_user_response_;
}
inline ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* DeviceManagementResponse::release_active_directory_enroll_play_user_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.active_directory_enroll_play_user_response)
clear_has_active_directory_enroll_play_user_response();
::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* temp = active_directory_enroll_play_user_response_;
active_directory_enroll_play_user_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_active_directory_enroll_play_user_response(::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* active_directory_enroll_play_user_response) {
delete active_directory_enroll_play_user_response_;
active_directory_enroll_play_user_response_ = active_directory_enroll_play_user_response;
if (active_directory_enroll_play_user_response) {
set_has_active_directory_enroll_play_user_response();
} else {
clear_has_active_directory_enroll_play_user_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.active_directory_enroll_play_user_response)
}

// optional .enterprise_management.ActiveDirectoryPlayActivityResponse active_directory_play_activity_response = 20;
inline bool DeviceManagementResponse::has_active_directory_play_activity_response() const {
return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DeviceManagementResponse::set_has_active_directory_play_activity_response() {
_has_bits_[0] |= 0x00040000u;
}
inline void DeviceManagementResponse::clear_has_active_directory_play_activity_response() {
_has_bits_[0] &= ~0x00040000u;
}
inline void DeviceManagementResponse::clear_active_directory_play_activity_response() {
if (active_directory_play_activity_response_ != NULL) active_directory_play_activity_response_->::enterprise_management::ActiveDirectoryPlayActivityResponse::Clear();
clear_has_active_directory_play_activity_response();
}
inline const ::enterprise_management::ActiveDirectoryPlayActivityResponse& DeviceManagementResponse::active_directory_play_activity_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.active_directory_play_activity_response)
return active_directory_play_activity_response_ != NULL ? *active_directory_play_activity_response_
: *::enterprise_management::ActiveDirectoryPlayActivityResponse::internal_default_instance();
}
inline ::enterprise_management::ActiveDirectoryPlayActivityResponse* DeviceManagementResponse::mutable_active_directory_play_activity_response() {
set_has_active_directory_play_activity_response();
if (active_directory_play_activity_response_ == NULL) {
active_directory_play_activity_response_ = new ::enterprise_management::ActiveDirectoryPlayActivityResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.active_directory_play_activity_response)
return active_directory_play_activity_response_;
}
inline ::enterprise_management::ActiveDirectoryPlayActivityResponse* DeviceManagementResponse::release_active_directory_play_activity_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.active_directory_play_activity_response)
clear_has_active_directory_play_activity_response();
::enterprise_management::ActiveDirectoryPlayActivityResponse* temp = active_directory_play_activity_response_;
active_directory_play_activity_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_active_directory_play_activity_response(::enterprise_management::ActiveDirectoryPlayActivityResponse* active_directory_play_activity_response) {
delete active_directory_play_activity_response_;
active_directory_play_activity_response_ = active_directory_play_activity_response;
if (active_directory_play_activity_response) {
set_has_active_directory_play_activity_response();
} else {
clear_has_active_directory_play_activity_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.active_directory_play_activity_response)
}

// optional .enterprise_management.CheckDeviceLicenseResponse check_device_license_response = 21;
inline bool DeviceManagementResponse::has_check_device_license_response() const {
return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DeviceManagementResponse::set_has_check_device_license_response() {
_has_bits_[0] |= 0x00080000u;
}
inline void DeviceManagementResponse::clear_has_check_device_license_response() {
_has_bits_[0] &= ~0x00080000u;
}
inline void DeviceManagementResponse::clear_check_device_license_response() {
if (check_device_license_response_ != NULL) check_device_license_response_->::enterprise_management::CheckDeviceLicenseResponse::Clear();
clear_has_check_device_license_response();
}
inline const ::enterprise_management::CheckDeviceLicenseResponse& DeviceManagementResponse::check_device_license_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.check_device_license_response)
return check_device_license_response_ != NULL ? *check_device_license_response_
: *::enterprise_management::CheckDeviceLicenseResponse::internal_default_instance();
}
inline ::enterprise_management::CheckDeviceLicenseResponse* DeviceManagementResponse::mutable_check_device_license_response() {
set_has_check_device_license_response();
if (check_device_license_response_ == NULL) {
check_device_license_response_ = new ::enterprise_management::CheckDeviceLicenseResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.check_device_license_response)
return check_device_license_response_;
}
inline ::enterprise_management::CheckDeviceLicenseResponse* DeviceManagementResponse::release_check_device_license_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.check_device_license_response)
clear_has_check_device_license_response();
::enterprise_management::CheckDeviceLicenseResponse* temp = check_device_license_response_;
check_device_license_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_check_device_license_response(::enterprise_management::CheckDeviceLicenseResponse* check_device_license_response) {
delete check_device_license_response_;
check_device_license_response_ = check_device_license_response;
if (check_device_license_response) {
set_has_check_device_license_response();
} else {
clear_has_check_device_license_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.check_device_license_response)
}

// optional .enterprise_management.ActiveDirectoryUserSigninResponse active_directory_user_signin_response = 22;
inline bool DeviceManagementResponse::has_active_directory_user_signin_response() const {
return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DeviceManagementResponse::set_has_active_directory_user_signin_response() {
_has_bits_[0] |= 0x00100000u;
}
inline void DeviceManagementResponse::clear_has_active_directory_user_signin_response() {
_has_bits_[0] &= ~0x00100000u;
}
inline void DeviceManagementResponse::clear_active_directory_user_signin_response() {
if (active_directory_user_signin_response_ != NULL) active_directory_user_signin_response_->::enterprise_management::ActiveDirectoryUserSigninResponse::Clear();
clear_has_active_directory_user_signin_response();
}
inline const ::enterprise_management::ActiveDirectoryUserSigninResponse& DeviceManagementResponse::active_directory_user_signin_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.active_directory_user_signin_response)
return active_directory_user_signin_response_ != NULL ? *active_directory_user_signin_response_
: *::enterprise_management::ActiveDirectoryUserSigninResponse::internal_default_instance();
}
inline ::enterprise_management::ActiveDirectoryUserSigninResponse* DeviceManagementResponse::mutable_active_directory_user_signin_response() {
set_has_active_directory_user_signin_response();
if (active_directory_user_signin_response_ == NULL) {
active_directory_user_signin_response_ = new ::enterprise_management::ActiveDirectoryUserSigninResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.active_directory_user_signin_response)
return active_directory_user_signin_response_;
}
inline ::enterprise_management::ActiveDirectoryUserSigninResponse* DeviceManagementResponse::release_active_directory_user_signin_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.active_directory_user_signin_response)
clear_has_active_directory_user_signin_response();
::enterprise_management::ActiveDirectoryUserSigninResponse* temp = active_directory_user_signin_response_;
active_directory_user_signin_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_active_directory_user_signin_response(::enterprise_management::ActiveDirectoryUserSigninResponse* active_directory_user_signin_response) {
delete active_directory_user_signin_response_;
active_directory_user_signin_response_ = active_directory_user_signin_response;
if (active_directory_user_signin_response) {
set_has_active_directory_user_signin_response();
} else {
clear_has_active_directory_user_signin_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.active_directory_user_signin_response)
}

// optional .enterprise_management.ChromeDesktopReportResponse chrome_desktop_report_response = 23;
inline bool DeviceManagementResponse::has_chrome_desktop_report_response() const {
return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DeviceManagementResponse::set_has_chrome_desktop_report_response() {
_has_bits_[0] |= 0x00200000u;
}
inline void DeviceManagementResponse::clear_has_chrome_desktop_report_response() {
_has_bits_[0] &= ~0x00200000u;
}
inline void DeviceManagementResponse::clear_chrome_desktop_report_response() {
if (chrome_desktop_report_response_ != NULL) chrome_desktop_report_response_->::enterprise_management::ChromeDesktopReportResponse::Clear();
clear_has_chrome_desktop_report_response();
}
inline const ::enterprise_management::ChromeDesktopReportResponse& DeviceManagementResponse::chrome_desktop_report_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.chrome_desktop_report_response)
return chrome_desktop_report_response_ != NULL ? *chrome_desktop_report_response_
: *::enterprise_management::ChromeDesktopReportResponse::internal_default_instance();
}
inline ::enterprise_management::ChromeDesktopReportResponse* DeviceManagementResponse::mutable_chrome_desktop_report_response() {
set_has_chrome_desktop_report_response();
if (chrome_desktop_report_response_ == NULL) {
chrome_desktop_report_response_ = new ::enterprise_management::ChromeDesktopReportResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.chrome_desktop_report_response)
return chrome_desktop_report_response_;
}
inline ::enterprise_management::ChromeDesktopReportResponse* DeviceManagementResponse::release_chrome_desktop_report_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.chrome_desktop_report_response)
clear_has_chrome_desktop_report_response();
::enterprise_management::ChromeDesktopReportResponse* temp = chrome_desktop_report_response_;
chrome_desktop_report_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_chrome_desktop_report_response(::enterprise_management::ChromeDesktopReportResponse* chrome_desktop_report_response) {
delete chrome_desktop_report_response_;
chrome_desktop_report_response_ = chrome_desktop_report_response;
if (chrome_desktop_report_response) {
set_has_chrome_desktop_report_response();
} else {
clear_has_chrome_desktop_report_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.chrome_desktop_report_response)
}

// optional .enterprise_management.AppInstallReportResponse app_install_report_response = 25;
inline bool DeviceManagementResponse::has_app_install_report_response() const {
return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DeviceManagementResponse::set_has_app_install_report_response() {
_has_bits_[0] |= 0x00400000u;
}
inline void DeviceManagementResponse::clear_has_app_install_report_response() {
_has_bits_[0] &= ~0x00400000u;
}
inline void DeviceManagementResponse::clear_app_install_report_response() {
if (app_install_report_response_ != NULL) app_install_report_response_->::enterprise_management::AppInstallReportResponse::Clear();
clear_has_app_install_report_response();
}
inline const ::enterprise_management::AppInstallReportResponse& DeviceManagementResponse::app_install_report_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.app_install_report_response)
return app_install_report_response_ != NULL ? *app_install_report_response_
: *::enterprise_management::AppInstallReportResponse::internal_default_instance();
}
inline ::enterprise_management::AppInstallReportResponse* DeviceManagementResponse::mutable_app_install_report_response() {
set_has_app_install_report_response();
if (app_install_report_response_ == NULL) {
app_install_report_response_ = new ::enterprise_management::AppInstallReportResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.app_install_report_response)
return app_install_report_response_;
}
inline ::enterprise_management::AppInstallReportResponse* DeviceManagementResponse::release_app_install_report_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.app_install_report_response)
clear_has_app_install_report_response();
::enterprise_management::AppInstallReportResponse* temp = app_install_report_response_;
app_install_report_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_app_install_report_response(::enterprise_management::AppInstallReportResponse* app_install_report_response) {
delete app_install_report_response_;
app_install_report_response_ = app_install_report_response;
if (app_install_report_response) {
set_has_app_install_report_response();
} else {
clear_has_app_install_report_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.app_install_report_response)
}

// optional .enterprise_management.PolicyValidationReportResponse policy_validation_report_response = 26;
inline bool DeviceManagementResponse::has_policy_validation_report_response() const {
return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DeviceManagementResponse::set_has_policy_validation_report_response() {
_has_bits_[0] |= 0x00800000u;
}
inline void DeviceManagementResponse::clear_has_policy_validation_report_response() {
_has_bits_[0] &= ~0x00800000u;
}
inline void DeviceManagementResponse::clear_policy_validation_report_response() {
if (policy_validation_report_response_ != NULL) policy_validation_report_response_->::enterprise_management::PolicyValidationReportResponse::Clear();
clear_has_policy_validation_report_response();
}
inline const ::enterprise_management::PolicyValidationReportResponse& DeviceManagementResponse::policy_validation_report_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.policy_validation_report_response)
return policy_validation_report_response_ != NULL ? *policy_validation_report_response_
: *::enterprise_management::PolicyValidationReportResponse::internal_default_instance();
}
inline ::enterprise_management::PolicyValidationReportResponse* DeviceManagementResponse::mutable_policy_validation_report_response() {
set_has_policy_validation_report_response();
if (policy_validation_report_response_ == NULL) {
policy_validation_report_response_ = new ::enterprise_management::PolicyValidationReportResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.policy_validation_report_response)
return policy_validation_report_response_;
}
inline ::enterprise_management::PolicyValidationReportResponse* DeviceManagementResponse::release_policy_validation_report_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.policy_validation_report_response)
clear_has_policy_validation_report_response();
::enterprise_management::PolicyValidationReportResponse* temp = policy_validation_report_response_;
policy_validation_report_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_policy_validation_report_response(::enterprise_management::PolicyValidationReportResponse* policy_validation_report_response) {
delete policy_validation_report_response_;
policy_validation_report_response_ = policy_validation_report_response;
if (policy_validation_report_response) {
set_has_policy_validation_report_response();
} else {
clear_has_policy_validation_report_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.policy_validation_report_response)
}

// optional .enterprise_management.DeviceInitialEnrollmentStateResponse device_initial_enrollment_state_response = 27;
inline bool DeviceManagementResponse::has_device_initial_enrollment_state_response() const {
return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DeviceManagementResponse::set_has_device_initial_enrollment_state_response() {
_has_bits_[0] |= 0x01000000u;
}
inline void DeviceManagementResponse::clear_has_device_initial_enrollment_state_response() {
_has_bits_[0] &= ~0x01000000u;
}
inline void DeviceManagementResponse::clear_device_initial_enrollment_state_response() {
if (device_initial_enrollment_state_response_ != NULL) device_initial_enrollment_state_response_->::enterprise_management::DeviceInitialEnrollmentStateResponse::Clear();
clear_has_device_initial_enrollment_state_response();
}
inline const ::enterprise_management::DeviceInitialEnrollmentStateResponse& DeviceManagementResponse::device_initial_enrollment_state_response() const {
// @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_initial_enrollment_state_response)
return device_initial_enrollment_state_response_ != NULL ? *device_initial_enrollment_state_response_
: *::enterprise_management::DeviceInitialEnrollmentStateResponse::internal_default_instance();
}
inline ::enterprise_management::DeviceInitialEnrollmentStateResponse* DeviceManagementResponse::mutable_device_initial_enrollment_state_response() {
set_has_device_initial_enrollment_state_response();
if (device_initial_enrollment_state_response_ == NULL) {
device_initial_enrollment_state_response_ = new ::enterprise_management::DeviceInitialEnrollmentStateResponse;
}
// @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_initial_enrollment_state_response)
return device_initial_enrollment_state_response_;
}
inline ::enterprise_management::DeviceInitialEnrollmentStateResponse* DeviceManagementResponse::release_device_initial_enrollment_state_response() {
// @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_initial_enrollment_state_response)
clear_has_device_initial_enrollment_state_response();
::enterprise_management::DeviceInitialEnrollmentStateResponse* temp = device_initial_enrollment_state_response_;
device_initial_enrollment_state_response_ = NULL;
return temp;
}
inline void DeviceManagementResponse::set_allocated_device_initial_enrollment_state_response(::enterprise_management::DeviceInitialEnrollmentStateResponse* device_initial_enrollment_state_response) {
delete device_initial_enrollment_state_response_;
device_initial_enrollment_state_response_ = device_initial_enrollment_state_response;
if (device_initial_enrollment_state_response) {
set_has_device_initial_enrollment_state_response();
} else {
clear_has_device_initial_enrollment_state_response();
}
// @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_initial_enrollment_state_response)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace enterprise_management

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::enterprise_management::LicenseType_LicenseTypeEnum> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceRegisterRequest_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceRegisterRequest_Flavor> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceRegisterRequest_Lifetime> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceRegisterResponse_DeviceMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceCertUploadRequest_CertificateType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceServiceApiAccessRequest_DeviceType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::PolicyFetchRequest_SignatureType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceState_DeviceMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::PolicyData_AssociationState> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::PolicyData_ManagementMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::NetworkInterface_NetworkDeviceType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::NetworkState_ConnectionState> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceUser_UserType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::OsUpdateStatus_UpdateStatus> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::BrowserReport_Channel> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::PolicyValueValidationResult_ErrorType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::PolicyValidationReportRequest_ValidationResultType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceStateRetrievalResponse_RestoreMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DevicePairingResponse_StatusCode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::CheckDevicePairingResponse_StatusCode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::RemoteCommand_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::RemoteCommandResult_ResultType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceAttributeUpdateResponse_ResultType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::AppInstallReportLogEvent_EventType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceManagementResponse_ErrorCode> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_device_5fmanagement_5fbackend_2eproto__INCLUDED
