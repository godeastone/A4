// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_management_backend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "device_management_backend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace enterprise_management {
class LicenseTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LicenseType> {
} _LicenseType_default_instance_;
class SignedDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignedData> {
} _SignedData_default_instance_;
class DeviceRegisterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceRegisterRequest> {
} _DeviceRegisterRequest_default_instance_;
class DeviceRegisterResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceRegisterResponse> {
} _DeviceRegisterResponse_default_instance_;
class DeviceUnregisterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceUnregisterRequest> {
} _DeviceUnregisterRequest_default_instance_;
class DeviceUnregisterResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceUnregisterResponse> {
} _DeviceUnregisterResponse_default_instance_;
class DeviceCertUploadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceCertUploadRequest> {
} _DeviceCertUploadRequest_default_instance_;
class DeviceCertUploadResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceCertUploadResponse> {
} _DeviceCertUploadResponse_default_instance_;
class DeviceServiceApiAccessRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceServiceApiAccessRequest> {
} _DeviceServiceApiAccessRequest_default_instance_;
class DeviceServiceApiAccessResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceServiceApiAccessResponse> {
} _DeviceServiceApiAccessResponse_default_instance_;
class PolicyFetchRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PolicyFetchRequest> {
} _PolicyFetchRequest_default_instance_;
class DisabledStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DisabledState> {
} _DisabledState_default_instance_;
class DeviceStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceState> {
} _DeviceState_default_instance_;
class PolicyDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PolicyData> {
} _PolicyData_default_instance_;
class PolicyFetchResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PolicyFetchResponse> {
} _PolicyFetchResponse_default_instance_;
class DEPRECATEDPolicyPublicKeyAndDomainDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DEPRECATEDPolicyPublicKeyAndDomain> {
} _DEPRECATEDPolicyPublicKeyAndDomain_default_instance_;
class PublicKeyVerificationDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublicKeyVerificationData> {
} _PublicKeyVerificationData_default_instance_;
class DevicePolicyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DevicePolicyRequest> {
} _DevicePolicyRequest_default_instance_;
class DevicePolicyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DevicePolicyResponse> {
} _DevicePolicyResponse_default_instance_;
class TimePeriodDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimePeriod> {
} _TimePeriod_default_instance_;
class ActiveTimePeriodDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActiveTimePeriod> {
} _ActiveTimePeriod_default_instance_;
class NetworkInterfaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkInterface> {
} _NetworkInterface_default_instance_;
class NetworkStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkState> {
} _NetworkState_default_instance_;
class DeviceUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceUser> {
} _DeviceUser_default_instance_;
class VolumeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VolumeInfo> {
} _VolumeInfo_default_instance_;
class CPUTempInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPUTempInfo> {
} _CPUTempInfo_default_instance_;
class DeviceStatusReportRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceStatusReportRequest> {
} _DeviceStatusReportRequest_default_instance_;
class OsUpdateStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OsUpdateStatus> {
} _OsUpdateStatus_default_instance_;
class AppStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AppStatus> {
} _AppStatus_default_instance_;
class ChromeUserProfileReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeUserProfileReport> {
} _ChromeUserProfileReport_default_instance_;
class BrowserReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BrowserReport> {
} _BrowserReport_default_instance_;
class ChromeDesktopReportRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeDesktopReportRequest> {
} _ChromeDesktopReportRequest_default_instance_;
class PolicyValueValidationResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PolicyValueValidationResult> {
} _PolicyValueValidationResult_default_instance_;
class PolicyValidationReportRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PolicyValidationReportRequest> {
} _PolicyValidationReportRequest_default_instance_;
class PolicyValidationReportResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PolicyValidationReportResponse> {
} _PolicyValidationReportResponse_default_instance_;
class AndroidStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AndroidStatus> {
} _AndroidStatus_default_instance_;
class SessionStatusReportRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionStatusReportRequest> {
} _SessionStatusReportRequest_default_instance_;
class DeviceStatusReportResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceStatusReportResponse> {
} _DeviceStatusReportResponse_default_instance_;
class ChromeDesktopReportResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeDesktopReportResponse> {
} _ChromeDesktopReportResponse_default_instance_;
class SessionStatusReportResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionStatusReportResponse> {
} _SessionStatusReportResponse_default_instance_;
class DeviceAutoEnrollmentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceAutoEnrollmentRequest> {
} _DeviceAutoEnrollmentRequest_default_instance_;
class DeviceAutoEnrollmentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceAutoEnrollmentResponse> {
} _DeviceAutoEnrollmentResponse_default_instance_;
class DeviceStateRetrievalRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceStateRetrievalRequest> {
} _DeviceStateRetrievalRequest_default_instance_;
class DeviceStateKeyUpdateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceStateKeyUpdateRequest> {
} _DeviceStateKeyUpdateRequest_default_instance_;
class DeviceStateRetrievalResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceStateRetrievalResponse> {
} _DeviceStateRetrievalResponse_default_instance_;
class DeviceInitialEnrollmentStateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceInitialEnrollmentStateRequest> {
} _DeviceInitialEnrollmentStateRequest_default_instance_;
class DeviceInitialEnrollmentStateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceInitialEnrollmentStateResponse> {
} _DeviceInitialEnrollmentStateResponse_default_instance_;
class DevicePairingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DevicePairingRequest> {
} _DevicePairingRequest_default_instance_;
class DevicePairingResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DevicePairingResponse> {
} _DevicePairingResponse_default_instance_;
class CheckDevicePairingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckDevicePairingRequest> {
} _CheckDevicePairingRequest_default_instance_;
class CheckDevicePairingResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckDevicePairingResponse> {
} _CheckDevicePairingResponse_default_instance_;
class RemoteCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemoteCommand> {
} _RemoteCommand_default_instance_;
class RemoteCommandResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemoteCommandResult> {
} _RemoteCommandResult_default_instance_;
class DeviceRemoteCommandRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceRemoteCommandRequest> {
} _DeviceRemoteCommandRequest_default_instance_;
class DeviceRemoteCommandResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceRemoteCommandResponse> {
} _DeviceRemoteCommandResponse_default_instance_;
class DeviceAttributeUpdatePermissionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceAttributeUpdatePermissionRequest> {
} _DeviceAttributeUpdatePermissionRequest_default_instance_;
class DeviceAttributeUpdatePermissionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceAttributeUpdatePermissionResponse> {
} _DeviceAttributeUpdatePermissionResponse_default_instance_;
class DeviceAttributeUpdateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceAttributeUpdateRequest> {
} _DeviceAttributeUpdateRequest_default_instance_;
class DeviceAttributeUpdateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceAttributeUpdateResponse> {
} _DeviceAttributeUpdateResponse_default_instance_;
class GcmIdUpdateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GcmIdUpdateRequest> {
} _GcmIdUpdateRequest_default_instance_;
class GcmIdUpdateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GcmIdUpdateResponse> {
} _GcmIdUpdateResponse_default_instance_;
class CheckAndroidManagementRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckAndroidManagementRequest> {
} _CheckAndroidManagementRequest_default_instance_;
class CheckAndroidManagementResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckAndroidManagementResponse> {
} _CheckAndroidManagementResponse_default_instance_;
class CertificateBasedDeviceRegisterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CertificateBasedDeviceRegisterRequest> {
} _CertificateBasedDeviceRegisterRequest_default_instance_;
class CertificateBasedDeviceRegistrationDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CertificateBasedDeviceRegistrationData> {
} _CertificateBasedDeviceRegistrationData_default_instance_;
class RegisterBrowserRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegisterBrowserRequest> {
} _RegisterBrowserRequest_default_instance_;
class ActiveDirectoryEnrollPlayUserRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActiveDirectoryEnrollPlayUserRequest> {
} _ActiveDirectoryEnrollPlayUserRequest_default_instance_;
class ActiveDirectoryEnrollPlayUserResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActiveDirectoryEnrollPlayUserResponse> {
} _ActiveDirectoryEnrollPlayUserResponse_default_instance_;
class SamlParametersProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SamlParametersProto> {
} _SamlParametersProto_default_instance_;
class ActiveDirectoryPlayActivityRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActiveDirectoryPlayActivityRequest> {
} _ActiveDirectoryPlayActivityRequest_default_instance_;
class ActiveDirectoryPlayActivityResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActiveDirectoryPlayActivityResponse> {
} _ActiveDirectoryPlayActivityResponse_default_instance_;
class CheckDeviceLicenseRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckDeviceLicenseRequest> {
} _CheckDeviceLicenseRequest_default_instance_;
class LicenseAvailabilityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LicenseAvailability> {
} _LicenseAvailability_default_instance_;
class CheckDeviceLicenseResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckDeviceLicenseResponse> {
} _CheckDeviceLicenseResponse_default_instance_;
class ActiveDirectoryUserSigninRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActiveDirectoryUserSigninRequest> {
} _ActiveDirectoryUserSigninRequest_default_instance_;
class ActiveDirectoryUserSigninResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActiveDirectoryUserSigninResponse> {
} _ActiveDirectoryUserSigninResponse_default_instance_;
class TpmVersionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TpmVersionInfo> {
} _TpmVersionInfo_default_instance_;
class SystemStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SystemState> {
} _SystemState_default_instance_;
class AppInstallReportLogEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AppInstallReportLogEvent> {
} _AppInstallReportLogEvent_default_instance_;
class AppInstallReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AppInstallReport> {
} _AppInstallReport_default_instance_;
class AppInstallReportRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AppInstallReportRequest> {
} _AppInstallReportRequest_default_instance_;
class AppInstallReportResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AppInstallReportResponse> {
} _AppInstallReportResponse_default_instance_;
class DeviceManagementRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceManagementRequest> {
} _DeviceManagementRequest_default_instance_;
class DeviceManagementResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceManagementResponse> {
} _DeviceManagementResponse_default_instance_;

namespace protobuf_device_5fmanagement_5fbackend_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _LicenseType_default_instance_.Shutdown();
  _SignedData_default_instance_.Shutdown();
  _DeviceRegisterRequest_default_instance_.Shutdown();
  _DeviceRegisterResponse_default_instance_.Shutdown();
  _DeviceUnregisterRequest_default_instance_.Shutdown();
  _DeviceUnregisterResponse_default_instance_.Shutdown();
  _DeviceCertUploadRequest_default_instance_.Shutdown();
  _DeviceCertUploadResponse_default_instance_.Shutdown();
  _DeviceServiceApiAccessRequest_default_instance_.Shutdown();
  _DeviceServiceApiAccessResponse_default_instance_.Shutdown();
  _PolicyFetchRequest_default_instance_.Shutdown();
  _DisabledState_default_instance_.Shutdown();
  _DeviceState_default_instance_.Shutdown();
  _PolicyData_default_instance_.Shutdown();
  _PolicyFetchResponse_default_instance_.Shutdown();
  _DEPRECATEDPolicyPublicKeyAndDomain_default_instance_.Shutdown();
  _PublicKeyVerificationData_default_instance_.Shutdown();
  _DevicePolicyRequest_default_instance_.Shutdown();
  _DevicePolicyResponse_default_instance_.Shutdown();
  _TimePeriod_default_instance_.Shutdown();
  _ActiveTimePeriod_default_instance_.Shutdown();
  _NetworkInterface_default_instance_.Shutdown();
  _NetworkState_default_instance_.Shutdown();
  _DeviceUser_default_instance_.Shutdown();
  _VolumeInfo_default_instance_.Shutdown();
  _CPUTempInfo_default_instance_.Shutdown();
  _DeviceStatusReportRequest_default_instance_.Shutdown();
  _OsUpdateStatus_default_instance_.Shutdown();
  _AppStatus_default_instance_.Shutdown();
  _ChromeUserProfileReport_default_instance_.Shutdown();
  _BrowserReport_default_instance_.Shutdown();
  _ChromeDesktopReportRequest_default_instance_.Shutdown();
  _PolicyValueValidationResult_default_instance_.Shutdown();
  _PolicyValidationReportRequest_default_instance_.Shutdown();
  _PolicyValidationReportResponse_default_instance_.Shutdown();
  _AndroidStatus_default_instance_.Shutdown();
  _SessionStatusReportRequest_default_instance_.Shutdown();
  _DeviceStatusReportResponse_default_instance_.Shutdown();
  _ChromeDesktopReportResponse_default_instance_.Shutdown();
  _SessionStatusReportResponse_default_instance_.Shutdown();
  _DeviceAutoEnrollmentRequest_default_instance_.Shutdown();
  _DeviceAutoEnrollmentResponse_default_instance_.Shutdown();
  _DeviceStateRetrievalRequest_default_instance_.Shutdown();
  _DeviceStateKeyUpdateRequest_default_instance_.Shutdown();
  _DeviceStateRetrievalResponse_default_instance_.Shutdown();
  _DeviceInitialEnrollmentStateRequest_default_instance_.Shutdown();
  _DeviceInitialEnrollmentStateResponse_default_instance_.Shutdown();
  _DevicePairingRequest_default_instance_.Shutdown();
  _DevicePairingResponse_default_instance_.Shutdown();
  _CheckDevicePairingRequest_default_instance_.Shutdown();
  _CheckDevicePairingResponse_default_instance_.Shutdown();
  _RemoteCommand_default_instance_.Shutdown();
  _RemoteCommandResult_default_instance_.Shutdown();
  _DeviceRemoteCommandRequest_default_instance_.Shutdown();
  _DeviceRemoteCommandResponse_default_instance_.Shutdown();
  _DeviceAttributeUpdatePermissionRequest_default_instance_.Shutdown();
  _DeviceAttributeUpdatePermissionResponse_default_instance_.Shutdown();
  _DeviceAttributeUpdateRequest_default_instance_.Shutdown();
  _DeviceAttributeUpdateResponse_default_instance_.Shutdown();
  _GcmIdUpdateRequest_default_instance_.Shutdown();
  _GcmIdUpdateResponse_default_instance_.Shutdown();
  _CheckAndroidManagementRequest_default_instance_.Shutdown();
  _CheckAndroidManagementResponse_default_instance_.Shutdown();
  _CertificateBasedDeviceRegisterRequest_default_instance_.Shutdown();
  _CertificateBasedDeviceRegistrationData_default_instance_.Shutdown();
  _RegisterBrowserRequest_default_instance_.Shutdown();
  _ActiveDirectoryEnrollPlayUserRequest_default_instance_.Shutdown();
  _ActiveDirectoryEnrollPlayUserResponse_default_instance_.Shutdown();
  _SamlParametersProto_default_instance_.Shutdown();
  _ActiveDirectoryPlayActivityRequest_default_instance_.Shutdown();
  _ActiveDirectoryPlayActivityResponse_default_instance_.Shutdown();
  _CheckDeviceLicenseRequest_default_instance_.Shutdown();
  _LicenseAvailability_default_instance_.Shutdown();
  _CheckDeviceLicenseResponse_default_instance_.Shutdown();
  _ActiveDirectoryUserSigninRequest_default_instance_.Shutdown();
  _ActiveDirectoryUserSigninResponse_default_instance_.Shutdown();
  _TpmVersionInfo_default_instance_.Shutdown();
  _SystemState_default_instance_.Shutdown();
  _AppInstallReportLogEvent_default_instance_.Shutdown();
  _AppInstallReport_default_instance_.Shutdown();
  _AppInstallReportRequest_default_instance_.Shutdown();
  _AppInstallReportResponse_default_instance_.Shutdown();
  _DeviceManagementRequest_default_instance_.Shutdown();
  _DeviceManagementResponse_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LicenseType_default_instance_.DefaultConstruct();
  _SignedData_default_instance_.DefaultConstruct();
  _DeviceRegisterRequest_default_instance_.DefaultConstruct();
  _DeviceRegisterResponse_default_instance_.DefaultConstruct();
  _DeviceUnregisterRequest_default_instance_.DefaultConstruct();
  _DeviceUnregisterResponse_default_instance_.DefaultConstruct();
  _DeviceCertUploadRequest_default_instance_.DefaultConstruct();
  _DeviceCertUploadResponse_default_instance_.DefaultConstruct();
  _DeviceServiceApiAccessRequest_default_instance_.DefaultConstruct();
  _DeviceServiceApiAccessResponse_default_instance_.DefaultConstruct();
  _PolicyFetchRequest_default_instance_.DefaultConstruct();
  _DisabledState_default_instance_.DefaultConstruct();
  _DeviceState_default_instance_.DefaultConstruct();
  _PolicyData_default_instance_.DefaultConstruct();
  _PolicyFetchResponse_default_instance_.DefaultConstruct();
  _DEPRECATEDPolicyPublicKeyAndDomain_default_instance_.DefaultConstruct();
  _PublicKeyVerificationData_default_instance_.DefaultConstruct();
  _DevicePolicyRequest_default_instance_.DefaultConstruct();
  _DevicePolicyResponse_default_instance_.DefaultConstruct();
  _TimePeriod_default_instance_.DefaultConstruct();
  _ActiveTimePeriod_default_instance_.DefaultConstruct();
  _NetworkInterface_default_instance_.DefaultConstruct();
  _NetworkState_default_instance_.DefaultConstruct();
  _DeviceUser_default_instance_.DefaultConstruct();
  _VolumeInfo_default_instance_.DefaultConstruct();
  _CPUTempInfo_default_instance_.DefaultConstruct();
  _DeviceStatusReportRequest_default_instance_.DefaultConstruct();
  _OsUpdateStatus_default_instance_.DefaultConstruct();
  _AppStatus_default_instance_.DefaultConstruct();
  _ChromeUserProfileReport_default_instance_.DefaultConstruct();
  _BrowserReport_default_instance_.DefaultConstruct();
  _ChromeDesktopReportRequest_default_instance_.DefaultConstruct();
  _PolicyValueValidationResult_default_instance_.DefaultConstruct();
  _PolicyValidationReportRequest_default_instance_.DefaultConstruct();
  _PolicyValidationReportResponse_default_instance_.DefaultConstruct();
  _AndroidStatus_default_instance_.DefaultConstruct();
  _SessionStatusReportRequest_default_instance_.DefaultConstruct();
  _DeviceStatusReportResponse_default_instance_.DefaultConstruct();
  _ChromeDesktopReportResponse_default_instance_.DefaultConstruct();
  _SessionStatusReportResponse_default_instance_.DefaultConstruct();
  _DeviceAutoEnrollmentRequest_default_instance_.DefaultConstruct();
  _DeviceAutoEnrollmentResponse_default_instance_.DefaultConstruct();
  _DeviceStateRetrievalRequest_default_instance_.DefaultConstruct();
  _DeviceStateKeyUpdateRequest_default_instance_.DefaultConstruct();
  _DeviceStateRetrievalResponse_default_instance_.DefaultConstruct();
  _DeviceInitialEnrollmentStateRequest_default_instance_.DefaultConstruct();
  _DeviceInitialEnrollmentStateResponse_default_instance_.DefaultConstruct();
  _DevicePairingRequest_default_instance_.DefaultConstruct();
  _DevicePairingResponse_default_instance_.DefaultConstruct();
  _CheckDevicePairingRequest_default_instance_.DefaultConstruct();
  _CheckDevicePairingResponse_default_instance_.DefaultConstruct();
  _RemoteCommand_default_instance_.DefaultConstruct();
  _RemoteCommandResult_default_instance_.DefaultConstruct();
  _DeviceRemoteCommandRequest_default_instance_.DefaultConstruct();
  _DeviceRemoteCommandResponse_default_instance_.DefaultConstruct();
  _DeviceAttributeUpdatePermissionRequest_default_instance_.DefaultConstruct();
  _DeviceAttributeUpdatePermissionResponse_default_instance_.DefaultConstruct();
  _DeviceAttributeUpdateRequest_default_instance_.DefaultConstruct();
  _DeviceAttributeUpdateResponse_default_instance_.DefaultConstruct();
  _GcmIdUpdateRequest_default_instance_.DefaultConstruct();
  _GcmIdUpdateResponse_default_instance_.DefaultConstruct();
  _CheckAndroidManagementRequest_default_instance_.DefaultConstruct();
  _CheckAndroidManagementResponse_default_instance_.DefaultConstruct();
  _CertificateBasedDeviceRegisterRequest_default_instance_.DefaultConstruct();
  _CertificateBasedDeviceRegistrationData_default_instance_.DefaultConstruct();
  _RegisterBrowserRequest_default_instance_.DefaultConstruct();
  _ActiveDirectoryEnrollPlayUserRequest_default_instance_.DefaultConstruct();
  _ActiveDirectoryEnrollPlayUserResponse_default_instance_.DefaultConstruct();
  _SamlParametersProto_default_instance_.DefaultConstruct();
  _ActiveDirectoryPlayActivityRequest_default_instance_.DefaultConstruct();
  _ActiveDirectoryPlayActivityResponse_default_instance_.DefaultConstruct();
  _CheckDeviceLicenseRequest_default_instance_.DefaultConstruct();
  _LicenseAvailability_default_instance_.DefaultConstruct();
  _CheckDeviceLicenseResponse_default_instance_.DefaultConstruct();
  _ActiveDirectoryUserSigninRequest_default_instance_.DefaultConstruct();
  _ActiveDirectoryUserSigninResponse_default_instance_.DefaultConstruct();
  _TpmVersionInfo_default_instance_.DefaultConstruct();
  _SystemState_default_instance_.DefaultConstruct();
  _AppInstallReportLogEvent_default_instance_.DefaultConstruct();
  _AppInstallReport_default_instance_.DefaultConstruct();
  _AppInstallReportRequest_default_instance_.DefaultConstruct();
  _AppInstallReportResponse_default_instance_.DefaultConstruct();
  _DeviceManagementRequest_default_instance_.DefaultConstruct();
  _DeviceManagementResponse_default_instance_.DefaultConstruct();
  _DeviceRegisterRequest_default_instance_.get_mutable()->license_type_ = const_cast< ::enterprise_management::LicenseType*>(
      ::enterprise_management::LicenseType::internal_default_instance());
  _DeviceState_default_instance_.get_mutable()->disabled_state_ = const_cast< ::enterprise_management::DisabledState*>(
      ::enterprise_management::DisabledState::internal_default_instance());
  _PolicyData_default_instance_.get_mutable()->device_state_ = const_cast< ::enterprise_management::DeviceState*>(
      ::enterprise_management::DeviceState::internal_default_instance());
  _ActiveTimePeriod_default_instance_.get_mutable()->time_period_ = const_cast< ::enterprise_management::TimePeriod*>(
      ::enterprise_management::TimePeriod::internal_default_instance());
  _DeviceStatusReportRequest_default_instance_.get_mutable()->os_update_status_ = const_cast< ::enterprise_management::OsUpdateStatus*>(
      ::enterprise_management::OsUpdateStatus::internal_default_instance());
  _DeviceStatusReportRequest_default_instance_.get_mutable()->running_kiosk_app_ = const_cast< ::enterprise_management::AppStatus*>(
      ::enterprise_management::AppStatus::internal_default_instance());
  _DeviceStatusReportRequest_default_instance_.get_mutable()->tpm_version_info_ = const_cast< ::enterprise_management::TpmVersionInfo*>(
      ::enterprise_management::TpmVersionInfo::internal_default_instance());
  _ChromeDesktopReportRequest_default_instance_.get_mutable()->browser_report_ = const_cast< ::enterprise_management::BrowserReport*>(
      ::enterprise_management::BrowserReport::internal_default_instance());
  _SessionStatusReportRequest_default_instance_.get_mutable()->android_status_ = const_cast< ::enterprise_management::AndroidStatus*>(
      ::enterprise_management::AndroidStatus::internal_default_instance());
  _DeviceStateRetrievalResponse_default_instance_.get_mutable()->disabled_state_ = const_cast< ::enterprise_management::DisabledState*>(
      ::enterprise_management::DisabledState::internal_default_instance());
  _CertificateBasedDeviceRegisterRequest_default_instance_.get_mutable()->signed_request_ = const_cast< ::enterprise_management::SignedData*>(
      ::enterprise_management::SignedData::internal_default_instance());
  _CertificateBasedDeviceRegistrationData_default_instance_.get_mutable()->device_register_request_ = const_cast< ::enterprise_management::DeviceRegisterRequest*>(
      ::enterprise_management::DeviceRegisterRequest::internal_default_instance());
  _ActiveDirectoryEnrollPlayUserResponse_default_instance_.get_mutable()->saml_parameters_ = const_cast< ::enterprise_management::SamlParametersProto*>(
      ::enterprise_management::SamlParametersProto::internal_default_instance());
  _LicenseAvailability_default_instance_.get_mutable()->license_type_ = const_cast< ::enterprise_management::LicenseType*>(
      ::enterprise_management::LicenseType::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->register_request_ = const_cast< ::enterprise_management::DeviceRegisterRequest*>(
      ::enterprise_management::DeviceRegisterRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->unregister_request_ = const_cast< ::enterprise_management::DeviceUnregisterRequest*>(
      ::enterprise_management::DeviceUnregisterRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->policy_request_ = const_cast< ::enterprise_management::DevicePolicyRequest*>(
      ::enterprise_management::DevicePolicyRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->device_status_report_request_ = const_cast< ::enterprise_management::DeviceStatusReportRequest*>(
      ::enterprise_management::DeviceStatusReportRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->session_status_report_request_ = const_cast< ::enterprise_management::SessionStatusReportRequest*>(
      ::enterprise_management::SessionStatusReportRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->auto_enrollment_request_ = const_cast< ::enterprise_management::DeviceAutoEnrollmentRequest*>(
      ::enterprise_management::DeviceAutoEnrollmentRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->cert_upload_request_ = const_cast< ::enterprise_management::DeviceCertUploadRequest*>(
      ::enterprise_management::DeviceCertUploadRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->service_api_access_request_ = const_cast< ::enterprise_management::DeviceServiceApiAccessRequest*>(
      ::enterprise_management::DeviceServiceApiAccessRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->device_state_retrieval_request_ = const_cast< ::enterprise_management::DeviceStateRetrievalRequest*>(
      ::enterprise_management::DeviceStateRetrievalRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->device_state_key_update_request_ = const_cast< ::enterprise_management::DeviceStateKeyUpdateRequest*>(
      ::enterprise_management::DeviceStateKeyUpdateRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->device_pairing_request_ = const_cast< ::enterprise_management::DevicePairingRequest*>(
      ::enterprise_management::DevicePairingRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->check_device_pairing_request_ = const_cast< ::enterprise_management::CheckDevicePairingRequest*>(
      ::enterprise_management::CheckDevicePairingRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->remote_command_request_ = const_cast< ::enterprise_management::DeviceRemoteCommandRequest*>(
      ::enterprise_management::DeviceRemoteCommandRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->device_attribute_update_permission_request_ = const_cast< ::enterprise_management::DeviceAttributeUpdatePermissionRequest*>(
      ::enterprise_management::DeviceAttributeUpdatePermissionRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->device_attribute_update_request_ = const_cast< ::enterprise_management::DeviceAttributeUpdateRequest*>(
      ::enterprise_management::DeviceAttributeUpdateRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->gcm_id_update_request_ = const_cast< ::enterprise_management::GcmIdUpdateRequest*>(
      ::enterprise_management::GcmIdUpdateRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->check_android_management_request_ = const_cast< ::enterprise_management::CheckAndroidManagementRequest*>(
      ::enterprise_management::CheckAndroidManagementRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->certificate_based_register_request_ = const_cast< ::enterprise_management::CertificateBasedDeviceRegisterRequest*>(
      ::enterprise_management::CertificateBasedDeviceRegisterRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->active_directory_enroll_play_user_request_ = const_cast< ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest*>(
      ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->active_directory_play_activity_request_ = const_cast< ::enterprise_management::ActiveDirectoryPlayActivityRequest*>(
      ::enterprise_management::ActiveDirectoryPlayActivityRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->check_device_license_request_ = const_cast< ::enterprise_management::CheckDeviceLicenseRequest*>(
      ::enterprise_management::CheckDeviceLicenseRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->active_directory_user_signin_request_ = const_cast< ::enterprise_management::ActiveDirectoryUserSigninRequest*>(
      ::enterprise_management::ActiveDirectoryUserSigninRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->register_browser_request_ = const_cast< ::enterprise_management::RegisterBrowserRequest*>(
      ::enterprise_management::RegisterBrowserRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->app_install_report_request_ = const_cast< ::enterprise_management::AppInstallReportRequest*>(
      ::enterprise_management::AppInstallReportRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->chrome_desktop_report_request_ = const_cast< ::enterprise_management::ChromeDesktopReportRequest*>(
      ::enterprise_management::ChromeDesktopReportRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->policy_validation_report_request_ = const_cast< ::enterprise_management::PolicyValidationReportRequest*>(
      ::enterprise_management::PolicyValidationReportRequest::internal_default_instance());
  _DeviceManagementRequest_default_instance_.get_mutable()->device_initial_enrollment_state_request_ = const_cast< ::enterprise_management::DeviceInitialEnrollmentStateRequest*>(
      ::enterprise_management::DeviceInitialEnrollmentStateRequest::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->register_response_ = const_cast< ::enterprise_management::DeviceRegisterResponse*>(
      ::enterprise_management::DeviceRegisterResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->unregister_response_ = const_cast< ::enterprise_management::DeviceUnregisterResponse*>(
      ::enterprise_management::DeviceUnregisterResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->policy_response_ = const_cast< ::enterprise_management::DevicePolicyResponse*>(
      ::enterprise_management::DevicePolicyResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->device_status_report_response_ = const_cast< ::enterprise_management::DeviceStatusReportResponse*>(
      ::enterprise_management::DeviceStatusReportResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->session_status_report_response_ = const_cast< ::enterprise_management::SessionStatusReportResponse*>(
      ::enterprise_management::SessionStatusReportResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->auto_enrollment_response_ = const_cast< ::enterprise_management::DeviceAutoEnrollmentResponse*>(
      ::enterprise_management::DeviceAutoEnrollmentResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->cert_upload_response_ = const_cast< ::enterprise_management::DeviceCertUploadResponse*>(
      ::enterprise_management::DeviceCertUploadResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->service_api_access_response_ = const_cast< ::enterprise_management::DeviceServiceApiAccessResponse*>(
      ::enterprise_management::DeviceServiceApiAccessResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->device_state_retrieval_response_ = const_cast< ::enterprise_management::DeviceStateRetrievalResponse*>(
      ::enterprise_management::DeviceStateRetrievalResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->device_pairing_response_ = const_cast< ::enterprise_management::DevicePairingResponse*>(
      ::enterprise_management::DevicePairingResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->check_device_pairing_response_ = const_cast< ::enterprise_management::CheckDevicePairingResponse*>(
      ::enterprise_management::CheckDevicePairingResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->remote_command_response_ = const_cast< ::enterprise_management::DeviceRemoteCommandResponse*>(
      ::enterprise_management::DeviceRemoteCommandResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->device_attribute_update_permission_response_ = const_cast< ::enterprise_management::DeviceAttributeUpdatePermissionResponse*>(
      ::enterprise_management::DeviceAttributeUpdatePermissionResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->device_attribute_update_response_ = const_cast< ::enterprise_management::DeviceAttributeUpdateResponse*>(
      ::enterprise_management::DeviceAttributeUpdateResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->gcm_id_update_response_ = const_cast< ::enterprise_management::GcmIdUpdateResponse*>(
      ::enterprise_management::GcmIdUpdateResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->check_android_management_response_ = const_cast< ::enterprise_management::CheckAndroidManagementResponse*>(
      ::enterprise_management::CheckAndroidManagementResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->active_directory_enroll_play_user_response_ = const_cast< ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse*>(
      ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->active_directory_play_activity_response_ = const_cast< ::enterprise_management::ActiveDirectoryPlayActivityResponse*>(
      ::enterprise_management::ActiveDirectoryPlayActivityResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->check_device_license_response_ = const_cast< ::enterprise_management::CheckDeviceLicenseResponse*>(
      ::enterprise_management::CheckDeviceLicenseResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->active_directory_user_signin_response_ = const_cast< ::enterprise_management::ActiveDirectoryUserSigninResponse*>(
      ::enterprise_management::ActiveDirectoryUserSigninResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->chrome_desktop_report_response_ = const_cast< ::enterprise_management::ChromeDesktopReportResponse*>(
      ::enterprise_management::ChromeDesktopReportResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->app_install_report_response_ = const_cast< ::enterprise_management::AppInstallReportResponse*>(
      ::enterprise_management::AppInstallReportResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->policy_validation_report_response_ = const_cast< ::enterprise_management::PolicyValidationReportResponse*>(
      ::enterprise_management::PolicyValidationReportResponse::internal_default_instance());
  _DeviceManagementResponse_default_instance_.get_mutable()->device_initial_enrollment_state_response_ = const_cast< ::enterprise_management::DeviceInitialEnrollmentStateResponse*>(
      ::enterprise_management::DeviceInitialEnrollmentStateResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_device_5fmanagement_5fbackend_2eproto

bool LicenseType_LicenseTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LicenseType_LicenseTypeEnum LicenseType::UNDEFINED;
const LicenseType_LicenseTypeEnum LicenseType::CDM_PERPETUAL;
const LicenseType_LicenseTypeEnum LicenseType::CDM_ANNUAL;
const LicenseType_LicenseTypeEnum LicenseType::KIOSK;
const LicenseType_LicenseTypeEnum LicenseType::LicenseTypeEnum_MIN;
const LicenseType_LicenseTypeEnum LicenseType::LicenseTypeEnum_MAX;
const int LicenseType::LicenseTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceRegisterRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceRegisterRequest_Type DeviceRegisterRequest::TT;
const DeviceRegisterRequest_Type DeviceRegisterRequest::USER;
const DeviceRegisterRequest_Type DeviceRegisterRequest::DEVICE;
const DeviceRegisterRequest_Type DeviceRegisterRequest::BROWSER;
const DeviceRegisterRequest_Type DeviceRegisterRequest::ANDROID_BROWSER;
const DeviceRegisterRequest_Type DeviceRegisterRequest::IOS_BROWSER;
const DeviceRegisterRequest_Type DeviceRegisterRequest::Type_MIN;
const DeviceRegisterRequest_Type DeviceRegisterRequest::Type_MAX;
const int DeviceRegisterRequest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceRegisterRequest_Flavor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_MANUAL;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_MANUAL_RENEW;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_LOCAL_FORCED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_LOCAL_ADVERTISED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_SERVER_FORCED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_SERVER_ADVERTISED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_RECOVERY;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_USER_REGISTRATION;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION_LOCAL_FORCED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION_SERVER_FORCED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION_MANUAL_FALLBACK;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::Flavor_MIN;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::Flavor_MAX;
const int DeviceRegisterRequest::Flavor_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceRegisterRequest_Lifetime_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceRegisterRequest_Lifetime DeviceRegisterRequest::LIFETIME_UNDEFINED;
const DeviceRegisterRequest_Lifetime DeviceRegisterRequest::LIFETIME_INDEFINITE;
const DeviceRegisterRequest_Lifetime DeviceRegisterRequest::LIFETIME_EPHEMERAL_USER;
const DeviceRegisterRequest_Lifetime DeviceRegisterRequest::Lifetime_MIN;
const DeviceRegisterRequest_Lifetime DeviceRegisterRequest::Lifetime_MAX;
const int DeviceRegisterRequest::Lifetime_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceRegisterResponse_DeviceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::ENTERPRISE;
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::RETAIL;
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::CHROME_AD;
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::DeviceMode_MIN;
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::DeviceMode_MAX;
const int DeviceRegisterResponse::DeviceMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceCertUploadRequest_CertificateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::CERTIFICATE_TYPE_UNSPECIFIED;
const DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::ENTERPRISE_MACHINE_CERTIFICATE;
const DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::ENTERPRISE_ENROLLMENT_CERTIFICATE;
const DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::CertificateType_MIN;
const DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::CertificateType_MAX;
const int DeviceCertUploadRequest::CertificateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceServiceApiAccessRequest_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::CHROME_OS;
const DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::ANDROID_OS;
const DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::DeviceType_MIN;
const DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::DeviceType_MAX;
const int DeviceServiceApiAccessRequest::DeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PolicyFetchRequest_SignatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PolicyFetchRequest_SignatureType PolicyFetchRequest::NONE;
const PolicyFetchRequest_SignatureType PolicyFetchRequest::SHA1_RSA;
const PolicyFetchRequest_SignatureType PolicyFetchRequest::SignatureType_MIN;
const PolicyFetchRequest_SignatureType PolicyFetchRequest::SignatureType_MAX;
const int PolicyFetchRequest::SignatureType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceState_DeviceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceState_DeviceMode DeviceState::DEVICE_MODE_NORMAL;
const DeviceState_DeviceMode DeviceState::DEVICE_MODE_DISABLED;
const DeviceState_DeviceMode DeviceState::DeviceMode_MIN;
const DeviceState_DeviceMode DeviceState::DeviceMode_MAX;
const int DeviceState::DeviceMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PolicyData_AssociationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PolicyData_AssociationState PolicyData::ACTIVE;
const PolicyData_AssociationState PolicyData::UNMANAGED;
const PolicyData_AssociationState PolicyData::DEPROVISIONED;
const PolicyData_AssociationState PolicyData::AssociationState_MIN;
const PolicyData_AssociationState PolicyData::AssociationState_MAX;
const int PolicyData::AssociationState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PolicyData_ManagementMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PolicyData_ManagementMode PolicyData::LOCAL_OWNER;
const PolicyData_ManagementMode PolicyData::ENTERPRISE_MANAGED;
const PolicyData_ManagementMode PolicyData::OBSOLETE_CONSUMER_MANAGED;
const PolicyData_ManagementMode PolicyData::ManagementMode_MIN;
const PolicyData_ManagementMode PolicyData::ManagementMode_MAX;
const int PolicyData::ManagementMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool NetworkInterface_NetworkDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_ETHERNET;
const NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_WIFI;
const NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_WIMAX;
const NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_BLUETOOTH;
const NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_CELLULAR;
const NetworkInterface_NetworkDeviceType NetworkInterface::NetworkDeviceType_MIN;
const NetworkInterface_NetworkDeviceType NetworkInterface::NetworkDeviceType_MAX;
const int NetworkInterface::NetworkDeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool NetworkState_ConnectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetworkState_ConnectionState NetworkState::IDLE;
const NetworkState_ConnectionState NetworkState::CARRIER;
const NetworkState_ConnectionState NetworkState::ASSOCIATION;
const NetworkState_ConnectionState NetworkState::CONFIGURATION;
const NetworkState_ConnectionState NetworkState::READY;
const NetworkState_ConnectionState NetworkState::PORTAL;
const NetworkState_ConnectionState NetworkState::OFFLINE;
const NetworkState_ConnectionState NetworkState::ONLINE;
const NetworkState_ConnectionState NetworkState::DISCONNECT;
const NetworkState_ConnectionState NetworkState::FAILURE;
const NetworkState_ConnectionState NetworkState::ACTIVATION_FAILURE;
const NetworkState_ConnectionState NetworkState::UNKNOWN;
const NetworkState_ConnectionState NetworkState::ConnectionState_MIN;
const NetworkState_ConnectionState NetworkState::ConnectionState_MAX;
const int NetworkState::ConnectionState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceUser_UserType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceUser_UserType DeviceUser::USER_TYPE_MANAGED;
const DeviceUser_UserType DeviceUser::USER_TYPE_UNMANAGED;
const DeviceUser_UserType DeviceUser::UserType_MIN;
const DeviceUser_UserType DeviceUser::UserType_MAX;
const int DeviceUser::UserType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool OsUpdateStatus_UpdateStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_UP_TO_DATE;
const OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_IMAGE_DOWNLOAD_NOT_STARTED;
const OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_IMAGE_DOWNLOAD_IN_PROGRESS;
const OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_UPDATE_NEED_REBOOT;
const OsUpdateStatus_UpdateStatus OsUpdateStatus::UpdateStatus_MIN;
const OsUpdateStatus_UpdateStatus OsUpdateStatus::UpdateStatus_MAX;
const int OsUpdateStatus::UpdateStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool BrowserReport_Channel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BrowserReport_Channel BrowserReport::UNKNOWN;
const BrowserReport_Channel BrowserReport::CANARY;
const BrowserReport_Channel BrowserReport::DEV;
const BrowserReport_Channel BrowserReport::BETA;
const BrowserReport_Channel BrowserReport::STABLE;
const BrowserReport_Channel BrowserReport::Channel_MIN;
const BrowserReport_Channel BrowserReport::Channel_MAX;
const int BrowserReport::Channel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PolicyValueValidationResult_ValidationResultSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PolicyValueValidationResult_ValidationResultSeverity PolicyValueValidationResult::VALIDATION_RESULT_SEVERITY_UNSPECIFIED;
const PolicyValueValidationResult_ValidationResultSeverity PolicyValueValidationResult::VALIDATION_RESULT_SEVERITY_WARNING;
const PolicyValueValidationResult_ValidationResultSeverity PolicyValueValidationResult::VALIDATION_RESULT_SEVERITY_ERROR;
const PolicyValueValidationResult_ValidationResultSeverity PolicyValueValidationResult::ValidationResultSeverity_MIN;
const PolicyValueValidationResult_ValidationResultSeverity PolicyValueValidationResult::ValidationResultSeverity_MAX;
const int PolicyValueValidationResult::ValidationResultSeverity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PolicyValueValidationResult_ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult::ERROR_TYPE_UNSPECIFIED;
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult::ERROR_TYPE_PARSE_ERROR;
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult::ERROR_TYPE_INVALID_TYPE;
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult::ERROR_TYPE_MISSING_FIELD;
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult::ERROR_TYPE_UNKNOWN_ENUM_VALUE;
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult::ERROR_TYPE_OUT_OF_BOUNDS;
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult::ERROR_TYPE_INVALID_REFERENCE;
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult::ErrorType_MIN;
const PolicyValueValidationResult_ErrorType PolicyValueValidationResult::ErrorType_MAX;
const int PolicyValueValidationResult::ErrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PolicyValidationReportRequest_ValidationResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_ERROR_UNSPECIFIED;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_SUCCESS;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_INITIAL_SIGNATURE;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_SIGNATURE;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_ERROR_CODE_PRESENT;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_PAYLOAD_PARSE_ERROR;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_WRONG_POLICY_TYPE;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_WRONG_SETTINGS_ENTITY_ID;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_TIMESTAMP;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_DM_TOKEN;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_DEVICE_ID;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_USER_MISMATCH;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_POLICY_PARSE_ERROR;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_BAD_KEY_VERIFICATION_SIGNATURE;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_POLICY_VALUE_WARNINGS;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::VALIDATION_RESULT_TYPE_POLICY_VALUE_ERRORS;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::ValidationResultType_MIN;
const PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::ValidationResultType_MAX;
const int PolicyValidationReportRequest::ValidationResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceAutoEnrollmentRequest_EnrollmentCheckType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::ENROLLMENT_CHECK_TYPE_UNSPECIFIED;
const DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::ENROLLMENT_CHECK_TYPE_FRE;
const DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::ENROLLMENT_CHECK_TYPE_FORCED_ENROLLMENT;
const DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::EnrollmentCheckType_MIN;
const DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::EnrollmentCheckType_MAX;
const int DeviceAutoEnrollmentRequest::EnrollmentCheckType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceStateRetrievalResponse_RestoreMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_NONE;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_REENROLLMENT_REQUESTED;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_REENROLLMENT_ENFORCED;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_DISABLED;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_REENROLLMENT_ZERO_TOUCH;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RestoreMode_MIN;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RestoreMode_MAX;
const int DeviceStateRetrievalResponse::RestoreMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::INITIAL_ENROLLMENT_MODE_NONE;
const DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::INITIAL_ENROLLMENT_MODE_ENROLLMENT_ENFORCED;
const DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::InitialEnrollmentMode_MIN;
const DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::InitialEnrollmentMode_MAX;
const int DeviceInitialEnrollmentStateResponse::InitialEnrollmentMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DevicePairingResponse_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DevicePairingResponse_StatusCode DevicePairingResponse::SUCCESS;
const DevicePairingResponse_StatusCode DevicePairingResponse::FAILED;
const DevicePairingResponse_StatusCode DevicePairingResponse::HOST_DEVICE_NOT_FOUND;
const DevicePairingResponse_StatusCode DevicePairingResponse::CONTROLLER_DEVICE_NOT_FOUND;
const DevicePairingResponse_StatusCode DevicePairingResponse::HOST_DEVICE_DEPROVISIONED;
const DevicePairingResponse_StatusCode DevicePairingResponse::CONTROLLER_DEVICE_DEPROVISIONED;
const DevicePairingResponse_StatusCode DevicePairingResponse::StatusCode_MIN;
const DevicePairingResponse_StatusCode DevicePairingResponse::StatusCode_MAX;
const int DevicePairingResponse::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CheckDevicePairingResponse_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::PAIRED;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::NOT_PAIRED;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::HOST_DEVICE_NOT_FOUND;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::CONTROLLER_DEVICE_NOT_FOUND;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::HOST_DEVICE_DEPROVISIONED;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::CONTROLLER_DEVICE_DEPROVISIONED;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::INVALID_CONTROLLER_DEVICE_IDENTITY;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::StatusCode_MIN;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::StatusCode_MAX;
const int CheckDevicePairingResponse::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RemoteCommand_Type_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemoteCommand_Type RemoteCommand::COMMAND_ECHO_TEST;
const RemoteCommand_Type RemoteCommand::DEVICE_REBOOT;
const RemoteCommand_Type RemoteCommand::DEVICE_SCREENSHOT;
const RemoteCommand_Type RemoteCommand::DEVICE_SET_VOLUME;
const RemoteCommand_Type RemoteCommand::DEVICE_FETCH_STATUS;
const RemoteCommand_Type RemoteCommand::USER_ARC_COMMAND;
const RemoteCommand_Type RemoteCommand::Type_MIN;
const RemoteCommand_Type RemoteCommand::Type_MAX;
const int RemoteCommand::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RemoteCommandResult_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemoteCommandResult_ResultType RemoteCommandResult::RESULT_IGNORED;
const RemoteCommandResult_ResultType RemoteCommandResult::RESULT_FAILURE;
const RemoteCommandResult_ResultType RemoteCommandResult::RESULT_SUCCESS;
const RemoteCommandResult_ResultType RemoteCommandResult::ResultType_MIN;
const RemoteCommandResult_ResultType RemoteCommandResult::ResultType_MAX;
const int RemoteCommandResult::ResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ATTRIBUTE_UPDATE_DISALLOWED;
const DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ATTRIBUTE_UPDATE_ALLOWED;
const DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ResultType_MIN;
const DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ResultType_MAX;
const int DeviceAttributeUpdatePermissionResponse::ResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceAttributeUpdateResponse_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ATTRIBUTE_UPDATE_ERROR;
const DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ATTRIBUTE_UPDATE_SUCCESS;
const DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ResultType_MIN;
const DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ResultType_MAX;
const int DeviceAttributeUpdateResponse::ResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CertificateBasedDeviceRegistrationData_CertificateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::UNKNOWN;
const CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::ENTERPRISE_ENROLLMENT_CERTIFICATE;
const CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::CertificateType_MIN;
const CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::CertificateType_MAX;
const int CertificateBasedDeviceRegistrationData::CertificateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CheckDeviceLicenseResponse_LicenseSelectionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::UNDEFINED;
const CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::USER_SELECTION;
const CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::ADMIN_SELECTION;
const CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::LicenseSelectionMode_MIN;
const CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::LicenseSelectionMode_MAX;
const int CheckDeviceLicenseResponse::LicenseSelectionMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AppInstallReportLogEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::LOG_EVENT_TYPE_UNKNOWN;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::SERVER_REQUEST;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CLOUDDPC_REQUEST;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CLOUDDPS_REQUEST;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CLOUDDPS_RESPONSE;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::PHONESKY_LOG;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::SUCCESS;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CANCELED;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::CONNECTIVITY_CHANGE;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::SESSION_STATE_CHANGE;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::INSTALLATION_STARTED;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::INSTALLATION_FINISHED;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::INSTALLATION_FAILED;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::EventType_MIN;
const AppInstallReportLogEvent_EventType AppInstallReportLogEvent::EventType_MAX;
const int AppInstallReportLogEvent::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AppInstallReportLogEvent_SessionStateChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::SESSION_STATE_CHANGE_TYPE_UNKNOWN;
const AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::LOGIN;
const AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::LOGOUT;
const AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::SUSPEND;
const AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::RESUME;
const AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::SessionStateChangeType_MIN;
const AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::SessionStateChangeType_MAX;
const int AppInstallReportLogEvent::SessionStateChangeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceManagementResponse_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::SUCCESS;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::DEVICE_MANAGEMENT_NOT_SUPPORTED;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::DEVICE_NOT_FOUND;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::DEVICE_MANAGEMENT_TOKEN_INVALID;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::ACTIVATION_PENDING;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::POLICY_NOT_FOUND;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::ErrorCode_MIN;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::ErrorCode_MAX;
const int DeviceManagementResponse::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicenseType::kLicenseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicenseType::LicenseType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.LicenseType)
}
LicenseType::LicenseType(const LicenseType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  license_type_ = from.license_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.LicenseType)
}

void LicenseType::SharedCtor() {
  _cached_size_ = 0;
  license_type_ = 0;
}

LicenseType::~LicenseType() {
  // @@protoc_insertion_point(destructor:enterprise_management.LicenseType)
  SharedDtor();
}

void LicenseType::SharedDtor() {
}

void LicenseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LicenseType& LicenseType::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

LicenseType* LicenseType::New(::google::protobuf::Arena* arena) const {
  LicenseType* n = new LicenseType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LicenseType::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.LicenseType)
  license_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LicenseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.LicenseType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.LicenseType.LicenseTypeEnum license_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::LicenseType_LicenseTypeEnum_IsValid(value)) {
            set_license_type(static_cast< ::enterprise_management::LicenseType_LicenseTypeEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.LicenseType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.LicenseType)
  return false;
#undef DO_
}

void LicenseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.LicenseType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.LicenseType.LicenseTypeEnum license_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->license_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.LicenseType)
}

size_t LicenseType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.LicenseType)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .enterprise_management.LicenseType.LicenseTypeEnum license_type = 1;
  if (has_license_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->license_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LicenseType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LicenseType*>(&from));
}

void LicenseType::MergeFrom(const LicenseType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.LicenseType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_license_type()) {
    set_license_type(from.license_type());
  }
}

void LicenseType::CopyFrom(const LicenseType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.LicenseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseType::IsInitialized() const {
  return true;
}

void LicenseType::Swap(LicenseType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicenseType::InternalSwap(LicenseType* other) {
  std::swap(license_type_, other->license_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LicenseType::GetTypeName() const {
  return "enterprise_management.LicenseType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LicenseType

// optional .enterprise_management.LicenseType.LicenseTypeEnum license_type = 1;
bool LicenseType::has_license_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LicenseType::set_has_license_type() {
  _has_bits_[0] |= 0x00000001u;
}
void LicenseType::clear_has_license_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void LicenseType::clear_license_type() {
  license_type_ = 0;
  clear_has_license_type();
}
::enterprise_management::LicenseType_LicenseTypeEnum LicenseType::license_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.LicenseType.license_type)
  return static_cast< ::enterprise_management::LicenseType_LicenseTypeEnum >(license_type_);
}
void LicenseType::set_license_type(::enterprise_management::LicenseType_LicenseTypeEnum value) {
  assert(::enterprise_management::LicenseType_LicenseTypeEnum_IsValid(value));
  set_has_license_type();
  license_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.LicenseType.license_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignedData::kDataFieldNumber;
const int SignedData::kSignatureFieldNumber;
const int SignedData::kExtraDataBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignedData::SignedData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SignedData)
}
SignedData::SignedData(const SignedData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  extra_data_bytes_ = from.extra_data_bytes_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SignedData)
}

void SignedData::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_data_bytes_ = 0;
}

SignedData::~SignedData() {
  // @@protoc_insertion_point(destructor:enterprise_management.SignedData)
  SharedDtor();
}

void SignedData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SignedData& SignedData::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignedData* SignedData::New(::google::protobuf::Arena* arena) const {
  SignedData* n = new SignedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignedData::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SignedData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
  }
  extra_data_bytes_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SignedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 extra_data_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_extra_data_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_data_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SignedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SignedData)
  return false;
#undef DO_
}

void SignedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SignedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  // optional int32 extra_data_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->extra_data_bytes(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SignedData)
}

size_t SignedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SignedData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional int32 extra_data_bytes = 3;
    if (has_extra_data_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_data_bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SignedData*>(&from));
}

void SignedData::MergeFrom(const SignedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SignedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      extra_data_bytes_ = from.extra_data_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignedData::CopyFrom(const SignedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SignedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedData::IsInitialized() const {
  return true;
}

void SignedData::Swap(SignedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedData::InternalSwap(SignedData* other) {
  data_.Swap(&other->data_);
  signature_.Swap(&other->signature_);
  std::swap(extra_data_bytes_, other->extra_data_bytes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SignedData::GetTypeName() const {
  return "enterprise_management.SignedData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignedData

// optional bytes data = 1;
bool SignedData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignedData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void SignedData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignedData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& SignedData::data() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SignedData.data)
  return data_.GetNoArena();
}
void SignedData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.SignedData.data)
}
#if LANG_CXX11
void SignedData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.SignedData.data)
}
#endif
void SignedData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.SignedData.data)
}
void SignedData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.SignedData.data)
}
::std::string* SignedData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:enterprise_management.SignedData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignedData::release_data() {
  // @@protoc_insertion_point(field_release:enterprise_management.SignedData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignedData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SignedData.data)
}

// optional bytes signature = 2;
bool SignedData::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignedData::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void SignedData::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignedData::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& SignedData::signature() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SignedData.signature)
  return signature_.GetNoArena();
}
void SignedData::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.SignedData.signature)
}
#if LANG_CXX11
void SignedData::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.SignedData.signature)
}
#endif
void SignedData::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.SignedData.signature)
}
void SignedData::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.SignedData.signature)
}
::std::string* SignedData::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:enterprise_management.SignedData.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignedData::release_signature() {
  // @@protoc_insertion_point(field_release:enterprise_management.SignedData.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignedData::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SignedData.signature)
}

// optional int32 extra_data_bytes = 3;
bool SignedData::has_extra_data_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignedData::set_has_extra_data_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
void SignedData::clear_has_extra_data_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignedData::clear_extra_data_bytes() {
  extra_data_bytes_ = 0;
  clear_has_extra_data_bytes();
}
::google::protobuf::int32 SignedData::extra_data_bytes() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SignedData.extra_data_bytes)
  return extra_data_bytes_;
}
void SignedData::set_extra_data_bytes(::google::protobuf::int32 value) {
  set_has_extra_data_bytes();
  extra_data_bytes_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.SignedData.extra_data_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceRegisterRequest::kReregisterFieldNumber;
const int DeviceRegisterRequest::kTypeFieldNumber;
const int DeviceRegisterRequest::kMachineIdFieldNumber;
const int DeviceRegisterRequest::kMachineModelFieldNumber;
const int DeviceRegisterRequest::kRequisitionFieldNumber;
const int DeviceRegisterRequest::kServerBackedStateKeyFieldNumber;
const int DeviceRegisterRequest::kFlavorFieldNumber;
const int DeviceRegisterRequest::kLicenseTypeFieldNumber;
const int DeviceRegisterRequest::kLifetimeFieldNumber;
const int DeviceRegisterRequest::kBrandCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceRegisterRequest::DeviceRegisterRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceRegisterRequest)
}
DeviceRegisterRequest::DeviceRegisterRequest(const DeviceRegisterRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_id()) {
    machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
  }
  machine_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_model()) {
    machine_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_model_);
  }
  requisition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_requisition()) {
    requisition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requisition_);
  }
  server_backed_state_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_backed_state_key()) {
    server_backed_state_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_backed_state_key_);
  }
  brand_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_brand_code()) {
    brand_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
  }
  if (from.has_license_type()) {
    license_type_ = new ::enterprise_management::LicenseType(*from.license_type_);
  } else {
    license_type_ = NULL;
  }
  ::memcpy(&reregister_, &from.reregister_,
    static_cast<size_t>(reinterpret_cast<char*>(&lifetime_) -
    reinterpret_cast<char*>(&reregister_)) + sizeof(lifetime_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRegisterRequest)
}

void DeviceRegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requisition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_backed_state_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&license_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flavor_) -
      reinterpret_cast<char*>(&license_type_)) + sizeof(flavor_));
  lifetime_ = 1;
}

DeviceRegisterRequest::~DeviceRegisterRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceRegisterRequest)
  SharedDtor();
}

void DeviceRegisterRequest::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requisition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_backed_state_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete license_type_;
  }
}

void DeviceRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceRegisterRequest& DeviceRegisterRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceRegisterRequest* DeviceRegisterRequest::New(::google::protobuf::Arena* arena) const {
  DeviceRegisterRequest* n = new DeviceRegisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRegisterRequest)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_machine_id()) {
      GOOGLE_DCHECK(!machine_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_machine_model()) {
      GOOGLE_DCHECK(!machine_model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_model_.UnsafeRawStringPointer())->clear();
    }
    if (has_requisition()) {
      GOOGLE_DCHECK(!requisition_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*requisition_.UnsafeRawStringPointer())->clear();
    }
    if (has_server_backed_state_key()) {
      GOOGLE_DCHECK(!server_backed_state_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_backed_state_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_brand_code()) {
      GOOGLE_DCHECK(!brand_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*brand_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_license_type()) {
      GOOGLE_DCHECK(license_type_ != NULL);
      license_type_->::enterprise_management::LicenseType::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&reregister_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&reregister_)) + sizeof(type_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    flavor_ = 0;
    lifetime_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reregister = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_reregister();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reregister_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceRegisterRequest_Type_IsValid(value)) {
            set_type(static_cast< ::enterprise_management::DeviceRegisterRequest_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string requisition = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requisition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes server_backed_state_key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_backed_state_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceRegisterRequest_Flavor_IsValid(value)) {
            set_flavor(static_cast< ::enterprise_management::DeviceRegisterRequest_Flavor >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.LicenseType license_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_license_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterRequest.Lifetime lifetime = 11 [default = LIFETIME_INDEFINITE];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceRegisterRequest_Lifetime_IsValid(value)) {
            set_lifetime(static_cast< ::enterprise_management::DeviceRegisterRequest_Lifetime >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string brand_code = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRegisterRequest)
  return false;
#undef DO_
}

void DeviceRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reregister = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reregister(), output);
  }

  // optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string machine_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine_id(), output);
  }

  // optional string machine_model = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->machine_model(), output);
  }

  // optional string requisition = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->requisition(), output);
  }

  // optional bytes server_backed_state_key = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->server_backed_state_key(), output);
  }

  // optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->flavor(), output);
  }

  // optional .enterprise_management.LicenseType license_type = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->license_type_, output);
  }

  // optional .enterprise_management.DeviceRegisterRequest.Lifetime lifetime = 11 [default = LIFETIME_INDEFINITE];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->lifetime(), output);
  }

  // optional string brand_code = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->brand_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRegisterRequest)
}

size_t DeviceRegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRegisterRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string machine_id = 3;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_id());
    }

    // optional string machine_model = 4;
    if (has_machine_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_model());
    }

    // optional string requisition = 6;
    if (has_requisition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requisition());
    }

    // optional bytes server_backed_state_key = 7;
    if (has_server_backed_state_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_backed_state_key());
    }

    // optional string brand_code = 12;
    if (has_brand_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand_code());
    }

    // optional .enterprise_management.LicenseType license_type = 9;
    if (has_license_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->license_type_);
    }

    // optional bool reregister = 1;
    if (has_reregister()) {
      total_size += 1 + 1;
    }

    // optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
    if (has_flavor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flavor());
    }

    // optional .enterprise_management.DeviceRegisterRequest.Lifetime lifetime = 11 [default = LIFETIME_INDEFINITE];
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lifetime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRegisterRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceRegisterRequest*>(&from));
}

void DeviceRegisterRequest::MergeFrom(const DeviceRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_machine_id();
      machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_machine_model();
      machine_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_model_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_requisition();
      requisition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requisition_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_server_backed_state_key();
      server_backed_state_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_backed_state_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_brand_code();
      brand_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_license_type()->::enterprise_management::LicenseType::MergeFrom(from.license_type());
    }
    if (cached_has_bits & 0x00000040u) {
      reregister_ = from.reregister_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      flavor_ = from.flavor_;
    }
    if (cached_has_bits & 0x00000200u) {
      lifetime_ = from.lifetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceRegisterRequest::CopyFrom(const DeviceRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRegisterRequest::IsInitialized() const {
  return true;
}

void DeviceRegisterRequest::Swap(DeviceRegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceRegisterRequest::InternalSwap(DeviceRegisterRequest* other) {
  machine_id_.Swap(&other->machine_id_);
  machine_model_.Swap(&other->machine_model_);
  requisition_.Swap(&other->requisition_);
  server_backed_state_key_.Swap(&other->server_backed_state_key_);
  brand_code_.Swap(&other->brand_code_);
  std::swap(license_type_, other->license_type_);
  std::swap(reregister_, other->reregister_);
  std::swap(type_, other->type_);
  std::swap(flavor_, other->flavor_);
  std::swap(lifetime_, other->lifetime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceRegisterRequest::GetTypeName() const {
  return "enterprise_management.DeviceRegisterRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceRegisterRequest

// optional bool reregister = 1;
bool DeviceRegisterRequest::has_reregister() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceRegisterRequest::set_has_reregister() {
  _has_bits_[0] |= 0x00000040u;
}
void DeviceRegisterRequest::clear_has_reregister() {
  _has_bits_[0] &= ~0x00000040u;
}
void DeviceRegisterRequest::clear_reregister() {
  reregister_ = false;
  clear_has_reregister();
}
bool DeviceRegisterRequest::reregister() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.reregister)
  return reregister_;
}
void DeviceRegisterRequest::set_reregister(bool value) {
  set_has_reregister();
  reregister_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.reregister)
}

// optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
bool DeviceRegisterRequest::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceRegisterRequest::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void DeviceRegisterRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void DeviceRegisterRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
::enterprise_management::DeviceRegisterRequest_Type DeviceRegisterRequest::type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.type)
  return static_cast< ::enterprise_management::DeviceRegisterRequest_Type >(type_);
}
void DeviceRegisterRequest::set_type(::enterprise_management::DeviceRegisterRequest_Type value) {
  assert(::enterprise_management::DeviceRegisterRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.type)
}

// optional string machine_id = 3;
bool DeviceRegisterRequest::has_machine_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceRegisterRequest::set_has_machine_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceRegisterRequest::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceRegisterRequest::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_id();
}
const ::std::string& DeviceRegisterRequest::machine_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.machine_id)
  return machine_id_.GetNoArena();
}
void DeviceRegisterRequest::set_machine_id(const ::std::string& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.machine_id)
}
#if LANG_CXX11
void DeviceRegisterRequest::set_machine_id(::std::string&& value) {
  set_has_machine_id();
  machine_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterRequest.machine_id)
}
#endif
void DeviceRegisterRequest::set_machine_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.machine_id)
}
void DeviceRegisterRequest::set_machine_id(const char* value, size_t size) {
  set_has_machine_id();
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.machine_id)
}
::std::string* DeviceRegisterRequest::mutable_machine_id() {
  set_has_machine_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterRequest::release_machine_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.machine_id)
  clear_has_machine_id();
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.machine_id)
}

// optional string machine_model = 4;
bool DeviceRegisterRequest::has_machine_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceRegisterRequest::set_has_machine_model() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceRegisterRequest::clear_has_machine_model() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceRegisterRequest::clear_machine_model() {
  machine_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_model();
}
const ::std::string& DeviceRegisterRequest::machine_model() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.machine_model)
  return machine_model_.GetNoArena();
}
void DeviceRegisterRequest::set_machine_model(const ::std::string& value) {
  set_has_machine_model();
  machine_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.machine_model)
}
#if LANG_CXX11
void DeviceRegisterRequest::set_machine_model(::std::string&& value) {
  set_has_machine_model();
  machine_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterRequest.machine_model)
}
#endif
void DeviceRegisterRequest::set_machine_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_model();
  machine_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.machine_model)
}
void DeviceRegisterRequest::set_machine_model(const char* value, size_t size) {
  set_has_machine_model();
  machine_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.machine_model)
}
::std::string* DeviceRegisterRequest::mutable_machine_model() {
  set_has_machine_model();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.machine_model)
  return machine_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterRequest::release_machine_model() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.machine_model)
  clear_has_machine_model();
  return machine_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_allocated_machine_model(::std::string* machine_model) {
  if (machine_model != NULL) {
    set_has_machine_model();
  } else {
    clear_has_machine_model();
  }
  machine_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_model);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.machine_model)
}

// optional string requisition = 6;
bool DeviceRegisterRequest::has_requisition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceRegisterRequest::set_has_requisition() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceRegisterRequest::clear_has_requisition() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceRegisterRequest::clear_requisition() {
  requisition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requisition();
}
const ::std::string& DeviceRegisterRequest::requisition() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.requisition)
  return requisition_.GetNoArena();
}
void DeviceRegisterRequest::set_requisition(const ::std::string& value) {
  set_has_requisition();
  requisition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.requisition)
}
#if LANG_CXX11
void DeviceRegisterRequest::set_requisition(::std::string&& value) {
  set_has_requisition();
  requisition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterRequest.requisition)
}
#endif
void DeviceRegisterRequest::set_requisition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_requisition();
  requisition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.requisition)
}
void DeviceRegisterRequest::set_requisition(const char* value, size_t size) {
  set_has_requisition();
  requisition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.requisition)
}
::std::string* DeviceRegisterRequest::mutable_requisition() {
  set_has_requisition();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.requisition)
  return requisition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterRequest::release_requisition() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.requisition)
  clear_has_requisition();
  return requisition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_allocated_requisition(::std::string* requisition) {
  if (requisition != NULL) {
    set_has_requisition();
  } else {
    clear_has_requisition();
  }
  requisition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requisition);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.requisition)
}

// optional bytes server_backed_state_key = 7;
bool DeviceRegisterRequest::has_server_backed_state_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceRegisterRequest::set_has_server_backed_state_key() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceRegisterRequest::clear_has_server_backed_state_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceRegisterRequest::clear_server_backed_state_key() {
  server_backed_state_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_backed_state_key();
}
const ::std::string& DeviceRegisterRequest::server_backed_state_key() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
  return server_backed_state_key_.GetNoArena();
}
void DeviceRegisterRequest::set_server_backed_state_key(const ::std::string& value) {
  set_has_server_backed_state_key();
  server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
#if LANG_CXX11
void DeviceRegisterRequest::set_server_backed_state_key(::std::string&& value) {
  set_has_server_backed_state_key();
  server_backed_state_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
#endif
void DeviceRegisterRequest::set_server_backed_state_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_backed_state_key();
  server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
void DeviceRegisterRequest::set_server_backed_state_key(const void* value, size_t size) {
  set_has_server_backed_state_key();
  server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
::std::string* DeviceRegisterRequest::mutable_server_backed_state_key() {
  set_has_server_backed_state_key();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
  return server_backed_state_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterRequest::release_server_backed_state_key() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
  clear_has_server_backed_state_key();
  return server_backed_state_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_allocated_server_backed_state_key(::std::string* server_backed_state_key) {
  if (server_backed_state_key != NULL) {
    set_has_server_backed_state_key();
  } else {
    clear_has_server_backed_state_key();
  }
  server_backed_state_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_backed_state_key);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}

// optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
bool DeviceRegisterRequest::has_flavor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DeviceRegisterRequest::set_has_flavor() {
  _has_bits_[0] |= 0x00000100u;
}
void DeviceRegisterRequest::clear_has_flavor() {
  _has_bits_[0] &= ~0x00000100u;
}
void DeviceRegisterRequest::clear_flavor() {
  flavor_ = 0;
  clear_has_flavor();
}
::enterprise_management::DeviceRegisterRequest_Flavor DeviceRegisterRequest::flavor() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.flavor)
  return static_cast< ::enterprise_management::DeviceRegisterRequest_Flavor >(flavor_);
}
void DeviceRegisterRequest::set_flavor(::enterprise_management::DeviceRegisterRequest_Flavor value) {
  assert(::enterprise_management::DeviceRegisterRequest_Flavor_IsValid(value));
  set_has_flavor();
  flavor_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.flavor)
}

// optional .enterprise_management.LicenseType license_type = 9;
bool DeviceRegisterRequest::has_license_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceRegisterRequest::set_has_license_type() {
  _has_bits_[0] |= 0x00000020u;
}
void DeviceRegisterRequest::clear_has_license_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeviceRegisterRequest::clear_license_type() {
  if (license_type_ != NULL) license_type_->::enterprise_management::LicenseType::Clear();
  clear_has_license_type();
}
const ::enterprise_management::LicenseType& DeviceRegisterRequest::license_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.license_type)
  return license_type_ != NULL ? *license_type_
                         : *::enterprise_management::LicenseType::internal_default_instance();
}
::enterprise_management::LicenseType* DeviceRegisterRequest::mutable_license_type() {
  set_has_license_type();
  if (license_type_ == NULL) {
    license_type_ = new ::enterprise_management::LicenseType;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.license_type)
  return license_type_;
}
::enterprise_management::LicenseType* DeviceRegisterRequest::release_license_type() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.license_type)
  clear_has_license_type();
  ::enterprise_management::LicenseType* temp = license_type_;
  license_type_ = NULL;
  return temp;
}
void DeviceRegisterRequest::set_allocated_license_type(::enterprise_management::LicenseType* license_type) {
  delete license_type_;
  license_type_ = license_type;
  if (license_type) {
    set_has_license_type();
  } else {
    clear_has_license_type();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.license_type)
}

// optional .enterprise_management.DeviceRegisterRequest.Lifetime lifetime = 11 [default = LIFETIME_INDEFINITE];
bool DeviceRegisterRequest::has_lifetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DeviceRegisterRequest::set_has_lifetime() {
  _has_bits_[0] |= 0x00000200u;
}
void DeviceRegisterRequest::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00000200u;
}
void DeviceRegisterRequest::clear_lifetime() {
  lifetime_ = 1;
  clear_has_lifetime();
}
::enterprise_management::DeviceRegisterRequest_Lifetime DeviceRegisterRequest::lifetime() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.lifetime)
  return static_cast< ::enterprise_management::DeviceRegisterRequest_Lifetime >(lifetime_);
}
void DeviceRegisterRequest::set_lifetime(::enterprise_management::DeviceRegisterRequest_Lifetime value) {
  assert(::enterprise_management::DeviceRegisterRequest_Lifetime_IsValid(value));
  set_has_lifetime();
  lifetime_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.lifetime)
}

// optional string brand_code = 12;
bool DeviceRegisterRequest::has_brand_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceRegisterRequest::set_has_brand_code() {
  _has_bits_[0] |= 0x00000010u;
}
void DeviceRegisterRequest::clear_has_brand_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeviceRegisterRequest::clear_brand_code() {
  brand_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brand_code();
}
const ::std::string& DeviceRegisterRequest::brand_code() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.brand_code)
  return brand_code_.GetNoArena();
}
void DeviceRegisterRequest::set_brand_code(const ::std::string& value) {
  set_has_brand_code();
  brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.brand_code)
}
#if LANG_CXX11
void DeviceRegisterRequest::set_brand_code(::std::string&& value) {
  set_has_brand_code();
  brand_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterRequest.brand_code)
}
#endif
void DeviceRegisterRequest::set_brand_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brand_code();
  brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.brand_code)
}
void DeviceRegisterRequest::set_brand_code(const char* value, size_t size) {
  set_has_brand_code();
  brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.brand_code)
}
::std::string* DeviceRegisterRequest::mutable_brand_code() {
  set_has_brand_code();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.brand_code)
  return brand_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterRequest::release_brand_code() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.brand_code)
  clear_has_brand_code();
  return brand_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_allocated_brand_code(::std::string* brand_code) {
  if (brand_code != NULL) {
    set_has_brand_code();
  } else {
    clear_has_brand_code();
  }
  brand_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand_code);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.brand_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceRegisterResponse::kDeviceManagementTokenFieldNumber;
const int DeviceRegisterResponse::kMachineNameFieldNumber;
const int DeviceRegisterResponse::kEnrollmentTypeFieldNumber;
const int DeviceRegisterResponse::kConfigurationSeedFieldNumber;
const int DeviceRegisterResponse::kUserAffiliationIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceRegisterResponse::DeviceRegisterResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceRegisterResponse)
}
DeviceRegisterResponse::DeviceRegisterResponse(const DeviceRegisterResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_affiliation_ids_(from.user_affiliation_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_management_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_management_token()) {
    device_management_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_management_token_);
  }
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  configuration_seed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_configuration_seed()) {
    configuration_seed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.configuration_seed_);
  }
  enrollment_type_ = from.enrollment_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRegisterResponse)
}

void DeviceRegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  device_management_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configuration_seed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enrollment_type_ = 0;
}

DeviceRegisterResponse::~DeviceRegisterResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceRegisterResponse)
  SharedDtor();
}

void DeviceRegisterResponse::SharedDtor() {
  device_management_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configuration_seed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceRegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceRegisterResponse& DeviceRegisterResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceRegisterResponse* DeviceRegisterResponse::New(::google::protobuf::Arena* arena) const {
  DeviceRegisterResponse* n = new DeviceRegisterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceRegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRegisterResponse)
  user_affiliation_ids_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_device_management_token()) {
      GOOGLE_DCHECK(!device_management_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_management_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_machine_name()) {
      GOOGLE_DCHECK(!machine_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_configuration_seed()) {
      GOOGLE_DCHECK(!configuration_seed_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*configuration_seed_.UnsafeRawStringPointer())->clear();
    }
  }
  enrollment_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRegisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device_management_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_management_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceRegisterResponse_DeviceMode_IsValid(value)) {
            set_enrollment_type(static_cast< ::enterprise_management::DeviceRegisterResponse_DeviceMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string configuration_seed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configuration_seed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string user_affiliation_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_affiliation_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRegisterResponse)
  return false;
#undef DO_
}

void DeviceRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string device_management_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_management_token(), output);
  }

  // optional string machine_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_name(), output);
  }

  // optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->enrollment_type(), output);
  }

  // optional string configuration_seed = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->configuration_seed(), output);
  }

  // repeated string user_affiliation_ids = 5;
  for (int i = 0, n = this->user_affiliation_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_affiliation_ids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRegisterResponse)
}

size_t DeviceRegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRegisterResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required string device_management_token = 1;
  if (has_device_management_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_management_token());
  }
  // repeated string user_affiliation_ids = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_affiliation_ids_size());
  for (int i = 0, n = this->user_affiliation_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_affiliation_ids(i));
  }

  if (_has_bits_[0 / 32] & 14u) {
    // optional string machine_name = 2;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string configuration_seed = 4;
    if (has_configuration_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configuration_seed());
    }

    // optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
    if (has_enrollment_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->enrollment_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRegisterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceRegisterResponse*>(&from));
}

void DeviceRegisterResponse::MergeFrom(const DeviceRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_affiliation_ids_.MergeFrom(from.user_affiliation_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_management_token();
      device_management_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_management_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_configuration_seed();
      configuration_seed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.configuration_seed_);
    }
    if (cached_has_bits & 0x00000008u) {
      enrollment_type_ = from.enrollment_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceRegisterResponse::CopyFrom(const DeviceRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DeviceRegisterResponse::Swap(DeviceRegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceRegisterResponse::InternalSwap(DeviceRegisterResponse* other) {
  user_affiliation_ids_.InternalSwap(&other->user_affiliation_ids_);
  device_management_token_.Swap(&other->device_management_token_);
  machine_name_.Swap(&other->machine_name_);
  configuration_seed_.Swap(&other->configuration_seed_);
  std::swap(enrollment_type_, other->enrollment_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceRegisterResponse::GetTypeName() const {
  return "enterprise_management.DeviceRegisterResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceRegisterResponse

// required string device_management_token = 1;
bool DeviceRegisterResponse::has_device_management_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceRegisterResponse::set_has_device_management_token() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceRegisterResponse::clear_has_device_management_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceRegisterResponse::clear_device_management_token() {
  device_management_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_management_token();
}
const ::std::string& DeviceRegisterResponse::device_management_token() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.device_management_token)
  return device_management_token_.GetNoArena();
}
void DeviceRegisterResponse::set_device_management_token(const ::std::string& value) {
  set_has_device_management_token();
  device_management_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.device_management_token)
}
#if LANG_CXX11
void DeviceRegisterResponse::set_device_management_token(::std::string&& value) {
  set_has_device_management_token();
  device_management_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterResponse.device_management_token)
}
#endif
void DeviceRegisterResponse::set_device_management_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_management_token();
  device_management_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.device_management_token)
}
void DeviceRegisterResponse::set_device_management_token(const char* value, size_t size) {
  set_has_device_management_token();
  device_management_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.device_management_token)
}
::std::string* DeviceRegisterResponse::mutable_device_management_token() {
  set_has_device_management_token();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.device_management_token)
  return device_management_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterResponse::release_device_management_token() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterResponse.device_management_token)
  clear_has_device_management_token();
  return device_management_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterResponse::set_allocated_device_management_token(::std::string* device_management_token) {
  if (device_management_token != NULL) {
    set_has_device_management_token();
  } else {
    clear_has_device_management_token();
  }
  device_management_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_management_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterResponse.device_management_token)
}

// optional string machine_name = 2;
bool DeviceRegisterResponse::has_machine_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceRegisterResponse::set_has_machine_name() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceRegisterResponse::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceRegisterResponse::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
const ::std::string& DeviceRegisterResponse::machine_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.machine_name)
  return machine_name_.GetNoArena();
}
void DeviceRegisterResponse::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.machine_name)
}
#if LANG_CXX11
void DeviceRegisterResponse::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterResponse.machine_name)
}
#endif
void DeviceRegisterResponse::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.machine_name)
}
void DeviceRegisterResponse::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.machine_name)
}
::std::string* DeviceRegisterResponse::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterResponse::release_machine_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterResponse.machine_name)
  clear_has_machine_name();
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterResponse::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterResponse.machine_name)
}

// optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
bool DeviceRegisterResponse::has_enrollment_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceRegisterResponse::set_has_enrollment_type() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceRegisterResponse::clear_has_enrollment_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceRegisterResponse::clear_enrollment_type() {
  enrollment_type_ = 0;
  clear_has_enrollment_type();
}
::enterprise_management::DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::enrollment_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.enrollment_type)
  return static_cast< ::enterprise_management::DeviceRegisterResponse_DeviceMode >(enrollment_type_);
}
void DeviceRegisterResponse::set_enrollment_type(::enterprise_management::DeviceRegisterResponse_DeviceMode value) {
  assert(::enterprise_management::DeviceRegisterResponse_DeviceMode_IsValid(value));
  set_has_enrollment_type();
  enrollment_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.enrollment_type)
}

// optional string configuration_seed = 4;
bool DeviceRegisterResponse::has_configuration_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceRegisterResponse::set_has_configuration_seed() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceRegisterResponse::clear_has_configuration_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceRegisterResponse::clear_configuration_seed() {
  configuration_seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_configuration_seed();
}
const ::std::string& DeviceRegisterResponse::configuration_seed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.configuration_seed)
  return configuration_seed_.GetNoArena();
}
void DeviceRegisterResponse::set_configuration_seed(const ::std::string& value) {
  set_has_configuration_seed();
  configuration_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
#if LANG_CXX11
void DeviceRegisterResponse::set_configuration_seed(::std::string&& value) {
  set_has_configuration_seed();
  configuration_seed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
#endif
void DeviceRegisterResponse::set_configuration_seed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_configuration_seed();
  configuration_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
void DeviceRegisterResponse::set_configuration_seed(const char* value, size_t size) {
  set_has_configuration_seed();
  configuration_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
::std::string* DeviceRegisterResponse::mutable_configuration_seed() {
  set_has_configuration_seed();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.configuration_seed)
  return configuration_seed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterResponse::release_configuration_seed() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterResponse.configuration_seed)
  clear_has_configuration_seed();
  return configuration_seed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterResponse::set_allocated_configuration_seed(::std::string* configuration_seed) {
  if (configuration_seed != NULL) {
    set_has_configuration_seed();
  } else {
    clear_has_configuration_seed();
  }
  configuration_seed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configuration_seed);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterResponse.configuration_seed)
}

// repeated string user_affiliation_ids = 5;
int DeviceRegisterResponse::user_affiliation_ids_size() const {
  return user_affiliation_ids_.size();
}
void DeviceRegisterResponse::clear_user_affiliation_ids() {
  user_affiliation_ids_.Clear();
}
const ::std::string& DeviceRegisterResponse::user_affiliation_ids(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
  return user_affiliation_ids_.Get(index);
}
::std::string* DeviceRegisterResponse::mutable_user_affiliation_ids(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
  return user_affiliation_ids_.Mutable(index);
}
void DeviceRegisterResponse::set_user_affiliation_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
  user_affiliation_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DeviceRegisterResponse::set_user_affiliation_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
  user_affiliation_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void DeviceRegisterResponse::set_user_affiliation_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  user_affiliation_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
void DeviceRegisterResponse::set_user_affiliation_ids(int index, const char* value, size_t size) {
  user_affiliation_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
::std::string* DeviceRegisterResponse::add_user_affiliation_ids() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
  return user_affiliation_ids_.Add();
}
void DeviceRegisterResponse::add_user_affiliation_ids(const ::std::string& value) {
  user_affiliation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
#if LANG_CXX11
void DeviceRegisterResponse::add_user_affiliation_ids(::std::string&& value) {
  user_affiliation_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
#endif
void DeviceRegisterResponse::add_user_affiliation_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  user_affiliation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
void DeviceRegisterResponse::add_user_affiliation_ids(const char* value, size_t size) {
  user_affiliation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceRegisterResponse::user_affiliation_ids() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
  return user_affiliation_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceRegisterResponse::mutable_user_affiliation_ids() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceRegisterResponse.user_affiliation_ids)
  return &user_affiliation_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUnregisterRequest::DeviceUnregisterRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceUnregisterRequest)
}
DeviceUnregisterRequest::DeviceUnregisterRequest(const DeviceUnregisterRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUnregisterRequest)
}

void DeviceUnregisterRequest::SharedCtor() {
  _cached_size_ = 0;
}

DeviceUnregisterRequest::~DeviceUnregisterRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceUnregisterRequest)
  SharedDtor();
}

void DeviceUnregisterRequest::SharedDtor() {
}

void DeviceUnregisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceUnregisterRequest& DeviceUnregisterRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceUnregisterRequest* DeviceUnregisterRequest::New(::google::protobuf::Arena* arena) const {
  DeviceUnregisterRequest* n = new DeviceUnregisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceUnregisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUnregisterRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceUnregisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceUnregisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceUnregisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceUnregisterRequest)
  return false;
#undef DO_
}

void DeviceUnregisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceUnregisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceUnregisterRequest)
}

size_t DeviceUnregisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUnregisterRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceUnregisterRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceUnregisterRequest*>(&from));
}

void DeviceUnregisterRequest::MergeFrom(const DeviceUnregisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUnregisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceUnregisterRequest::CopyFrom(const DeviceUnregisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUnregisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUnregisterRequest::IsInitialized() const {
  return true;
}

void DeviceUnregisterRequest::Swap(DeviceUnregisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceUnregisterRequest::InternalSwap(DeviceUnregisterRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceUnregisterRequest::GetTypeName() const {
  return "enterprise_management.DeviceUnregisterRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUnregisterRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUnregisterResponse::DeviceUnregisterResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceUnregisterResponse)
}
DeviceUnregisterResponse::DeviceUnregisterResponse(const DeviceUnregisterResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUnregisterResponse)
}

void DeviceUnregisterResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeviceUnregisterResponse::~DeviceUnregisterResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceUnregisterResponse)
  SharedDtor();
}

void DeviceUnregisterResponse::SharedDtor() {
}

void DeviceUnregisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceUnregisterResponse& DeviceUnregisterResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceUnregisterResponse* DeviceUnregisterResponse::New(::google::protobuf::Arena* arena) const {
  DeviceUnregisterResponse* n = new DeviceUnregisterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceUnregisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUnregisterResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceUnregisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceUnregisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceUnregisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceUnregisterResponse)
  return false;
#undef DO_
}

void DeviceUnregisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceUnregisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceUnregisterResponse)
}

size_t DeviceUnregisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUnregisterResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceUnregisterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceUnregisterResponse*>(&from));
}

void DeviceUnregisterResponse::MergeFrom(const DeviceUnregisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUnregisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceUnregisterResponse::CopyFrom(const DeviceUnregisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUnregisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUnregisterResponse::IsInitialized() const {
  return true;
}

void DeviceUnregisterResponse::Swap(DeviceUnregisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceUnregisterResponse::InternalSwap(DeviceUnregisterResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceUnregisterResponse::GetTypeName() const {
  return "enterprise_management.DeviceUnregisterResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUnregisterResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceCertUploadRequest::kDeviceCertificateFieldNumber;
const int DeviceCertUploadRequest::kCertificateTypeFieldNumber;
const int DeviceCertUploadRequest::kEnrollmentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceCertUploadRequest::DeviceCertUploadRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceCertUploadRequest)
}
DeviceCertUploadRequest::DeviceCertUploadRequest(const DeviceCertUploadRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_certificate()) {
    device_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_certificate_);
  }
  enrollment_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enrollment_id()) {
    enrollment_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enrollment_id_);
  }
  certificate_type_ = from.certificate_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceCertUploadRequest)
}

void DeviceCertUploadRequest::SharedCtor() {
  _cached_size_ = 0;
  device_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enrollment_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificate_type_ = 0;
}

DeviceCertUploadRequest::~DeviceCertUploadRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceCertUploadRequest)
  SharedDtor();
}

void DeviceCertUploadRequest::SharedDtor() {
  device_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enrollment_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceCertUploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceCertUploadRequest& DeviceCertUploadRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceCertUploadRequest* DeviceCertUploadRequest::New(::google::protobuf::Arena* arena) const {
  DeviceCertUploadRequest* n = new DeviceCertUploadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceCertUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceCertUploadRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_device_certificate()) {
      GOOGLE_DCHECK(!device_certificate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_certificate_.UnsafeRawStringPointer())->clear();
    }
    if (has_enrollment_id()) {
      GOOGLE_DCHECK(!enrollment_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*enrollment_id_.UnsafeRawStringPointer())->clear();
    }
  }
  certificate_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceCertUploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceCertUploadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes device_certificate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceCertUploadRequest.CertificateType certificate_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceCertUploadRequest_CertificateType_IsValid(value)) {
            set_certificate_type(static_cast< ::enterprise_management::DeviceCertUploadRequest_CertificateType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string enrollment_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enrollment_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceCertUploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceCertUploadRequest)
  return false;
#undef DO_
}

void DeviceCertUploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceCertUploadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes device_certificate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->device_certificate(), output);
  }

  // optional .enterprise_management.DeviceCertUploadRequest.CertificateType certificate_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->certificate_type(), output);
  }

  // optional string enrollment_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->enrollment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceCertUploadRequest)
}

size_t DeviceCertUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceCertUploadRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes device_certificate = 1;
    if (has_device_certificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_certificate());
    }

    // optional string enrollment_id = 3;
    if (has_enrollment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enrollment_id());
    }

    // optional .enterprise_management.DeviceCertUploadRequest.CertificateType certificate_type = 2;
    if (has_certificate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->certificate_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceCertUploadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceCertUploadRequest*>(&from));
}

void DeviceCertUploadRequest::MergeFrom(const DeviceCertUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceCertUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_certificate();
      device_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_certificate_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_enrollment_id();
      enrollment_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enrollment_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      certificate_type_ = from.certificate_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceCertUploadRequest::CopyFrom(const DeviceCertUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceCertUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCertUploadRequest::IsInitialized() const {
  return true;
}

void DeviceCertUploadRequest::Swap(DeviceCertUploadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceCertUploadRequest::InternalSwap(DeviceCertUploadRequest* other) {
  device_certificate_.Swap(&other->device_certificate_);
  enrollment_id_.Swap(&other->enrollment_id_);
  std::swap(certificate_type_, other->certificate_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceCertUploadRequest::GetTypeName() const {
  return "enterprise_management.DeviceCertUploadRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceCertUploadRequest

// optional bytes device_certificate = 1;
bool DeviceCertUploadRequest::has_device_certificate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceCertUploadRequest::set_has_device_certificate() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceCertUploadRequest::clear_has_device_certificate() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceCertUploadRequest::clear_device_certificate() {
  device_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_certificate();
}
const ::std::string& DeviceCertUploadRequest::device_certificate() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceCertUploadRequest.device_certificate)
  return device_certificate_.GetNoArena();
}
void DeviceCertUploadRequest::set_device_certificate(const ::std::string& value) {
  set_has_device_certificate();
  device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
#if LANG_CXX11
void DeviceCertUploadRequest::set_device_certificate(::std::string&& value) {
  set_has_device_certificate();
  device_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
#endif
void DeviceCertUploadRequest::set_device_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_certificate();
  device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
void DeviceCertUploadRequest::set_device_certificate(const void* value, size_t size) {
  set_has_device_certificate();
  device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
::std::string* DeviceCertUploadRequest::mutable_device_certificate() {
  set_has_device_certificate();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceCertUploadRequest.device_certificate)
  return device_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceCertUploadRequest::release_device_certificate() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceCertUploadRequest.device_certificate)
  clear_has_device_certificate();
  return device_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceCertUploadRequest::set_allocated_device_certificate(::std::string* device_certificate) {
  if (device_certificate != NULL) {
    set_has_device_certificate();
  } else {
    clear_has_device_certificate();
  }
  device_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_certificate);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceCertUploadRequest.device_certificate)
}

// optional .enterprise_management.DeviceCertUploadRequest.CertificateType certificate_type = 2;
bool DeviceCertUploadRequest::has_certificate_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceCertUploadRequest::set_has_certificate_type() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceCertUploadRequest::clear_has_certificate_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceCertUploadRequest::clear_certificate_type() {
  certificate_type_ = 0;
  clear_has_certificate_type();
}
::enterprise_management::DeviceCertUploadRequest_CertificateType DeviceCertUploadRequest::certificate_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceCertUploadRequest.certificate_type)
  return static_cast< ::enterprise_management::DeviceCertUploadRequest_CertificateType >(certificate_type_);
}
void DeviceCertUploadRequest::set_certificate_type(::enterprise_management::DeviceCertUploadRequest_CertificateType value) {
  assert(::enterprise_management::DeviceCertUploadRequest_CertificateType_IsValid(value));
  set_has_certificate_type();
  certificate_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceCertUploadRequest.certificate_type)
}

// optional string enrollment_id = 3;
bool DeviceCertUploadRequest::has_enrollment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceCertUploadRequest::set_has_enrollment_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceCertUploadRequest::clear_has_enrollment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceCertUploadRequest::clear_enrollment_id() {
  enrollment_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enrollment_id();
}
const ::std::string& DeviceCertUploadRequest::enrollment_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceCertUploadRequest.enrollment_id)
  return enrollment_id_.GetNoArena();
}
void DeviceCertUploadRequest::set_enrollment_id(const ::std::string& value) {
  set_has_enrollment_id();
  enrollment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceCertUploadRequest.enrollment_id)
}
#if LANG_CXX11
void DeviceCertUploadRequest::set_enrollment_id(::std::string&& value) {
  set_has_enrollment_id();
  enrollment_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceCertUploadRequest.enrollment_id)
}
#endif
void DeviceCertUploadRequest::set_enrollment_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enrollment_id();
  enrollment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceCertUploadRequest.enrollment_id)
}
void DeviceCertUploadRequest::set_enrollment_id(const char* value, size_t size) {
  set_has_enrollment_id();
  enrollment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceCertUploadRequest.enrollment_id)
}
::std::string* DeviceCertUploadRequest::mutable_enrollment_id() {
  set_has_enrollment_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceCertUploadRequest.enrollment_id)
  return enrollment_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceCertUploadRequest::release_enrollment_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceCertUploadRequest.enrollment_id)
  clear_has_enrollment_id();
  return enrollment_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceCertUploadRequest::set_allocated_enrollment_id(::std::string* enrollment_id) {
  if (enrollment_id != NULL) {
    set_has_enrollment_id();
  } else {
    clear_has_enrollment_id();
  }
  enrollment_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enrollment_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceCertUploadRequest.enrollment_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceCertUploadResponse::DeviceCertUploadResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceCertUploadResponse)
}
DeviceCertUploadResponse::DeviceCertUploadResponse(const DeviceCertUploadResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceCertUploadResponse)
}

void DeviceCertUploadResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeviceCertUploadResponse::~DeviceCertUploadResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceCertUploadResponse)
  SharedDtor();
}

void DeviceCertUploadResponse::SharedDtor() {
}

void DeviceCertUploadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceCertUploadResponse& DeviceCertUploadResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceCertUploadResponse* DeviceCertUploadResponse::New(::google::protobuf::Arena* arena) const {
  DeviceCertUploadResponse* n = new DeviceCertUploadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceCertUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceCertUploadResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceCertUploadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceCertUploadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceCertUploadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceCertUploadResponse)
  return false;
#undef DO_
}

void DeviceCertUploadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceCertUploadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceCertUploadResponse)
}

size_t DeviceCertUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceCertUploadResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceCertUploadResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceCertUploadResponse*>(&from));
}

void DeviceCertUploadResponse::MergeFrom(const DeviceCertUploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceCertUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceCertUploadResponse::CopyFrom(const DeviceCertUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceCertUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCertUploadResponse::IsInitialized() const {
  return true;
}

void DeviceCertUploadResponse::Swap(DeviceCertUploadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceCertUploadResponse::InternalSwap(DeviceCertUploadResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceCertUploadResponse::GetTypeName() const {
  return "enterprise_management.DeviceCertUploadResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceCertUploadResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceServiceApiAccessRequest::kAuthScopeFieldNumber;
const int DeviceServiceApiAccessRequest::kOauth2ClientIdFieldNumber;
const int DeviceServiceApiAccessRequest::kDeviceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceServiceApiAccessRequest::DeviceServiceApiAccessRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceServiceApiAccessRequest)
}
DeviceServiceApiAccessRequest::DeviceServiceApiAccessRequest(const DeviceServiceApiAccessRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      auth_scope_(from.auth_scope_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oauth2_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oauth2_client_id()) {
    oauth2_client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth2_client_id_);
  }
  device_type_ = from.device_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceServiceApiAccessRequest)
}

void DeviceServiceApiAccessRequest::SharedCtor() {
  _cached_size_ = 0;
  oauth2_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
}

DeviceServiceApiAccessRequest::~DeviceServiceApiAccessRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceServiceApiAccessRequest)
  SharedDtor();
}

void DeviceServiceApiAccessRequest::SharedDtor() {
  oauth2_client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceServiceApiAccessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceServiceApiAccessRequest& DeviceServiceApiAccessRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceServiceApiAccessRequest* DeviceServiceApiAccessRequest::New(::google::protobuf::Arena* arena) const {
  DeviceServiceApiAccessRequest* n = new DeviceServiceApiAccessRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceServiceApiAccessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceServiceApiAccessRequest)
  auth_scope_.Clear();
  if (has_oauth2_client_id()) {
    GOOGLE_DCHECK(!oauth2_client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*oauth2_client_id_.UnsafeRawStringPointer())->clear();
  }
  device_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceServiceApiAccessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceServiceApiAccessRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string auth_scope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_auth_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string oauth2_client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oauth2_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceServiceApiAccessRequest_DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::enterprise_management::DeviceServiceApiAccessRequest_DeviceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceServiceApiAccessRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceServiceApiAccessRequest)
  return false;
#undef DO_
}

void DeviceServiceApiAccessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceServiceApiAccessRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string auth_scope = 1;
  for (int i = 0, n = this->auth_scope_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->auth_scope(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string oauth2_client_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->oauth2_client_id(), output);
  }

  // optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->device_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceServiceApiAccessRequest)
}

size_t DeviceServiceApiAccessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceServiceApiAccessRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string auth_scope = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->auth_scope_size());
  for (int i = 0, n = this->auth_scope_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->auth_scope(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string oauth2_client_id = 2;
    if (has_oauth2_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oauth2_client_id());
    }

    // optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceServiceApiAccessRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceServiceApiAccessRequest*>(&from));
}

void DeviceServiceApiAccessRequest::MergeFrom(const DeviceServiceApiAccessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceServiceApiAccessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auth_scope_.MergeFrom(from.auth_scope_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_oauth2_client_id();
      oauth2_client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth2_client_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_type_ = from.device_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceServiceApiAccessRequest::CopyFrom(const DeviceServiceApiAccessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceServiceApiAccessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceServiceApiAccessRequest::IsInitialized() const {
  return true;
}

void DeviceServiceApiAccessRequest::Swap(DeviceServiceApiAccessRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceServiceApiAccessRequest::InternalSwap(DeviceServiceApiAccessRequest* other) {
  auth_scope_.InternalSwap(&other->auth_scope_);
  oauth2_client_id_.Swap(&other->oauth2_client_id_);
  std::swap(device_type_, other->device_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceServiceApiAccessRequest::GetTypeName() const {
  return "enterprise_management.DeviceServiceApiAccessRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceServiceApiAccessRequest

// repeated string auth_scope = 1;
int DeviceServiceApiAccessRequest::auth_scope_size() const {
  return auth_scope_.size();
}
void DeviceServiceApiAccessRequest::clear_auth_scope() {
  auth_scope_.Clear();
}
const ::std::string& DeviceServiceApiAccessRequest::auth_scope(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
  return auth_scope_.Get(index);
}
::std::string* DeviceServiceApiAccessRequest::mutable_auth_scope(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
  return auth_scope_.Mutable(index);
}
void DeviceServiceApiAccessRequest::set_auth_scope(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
  auth_scope_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DeviceServiceApiAccessRequest::set_auth_scope(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
  auth_scope_.Mutable(index)->assign(std::move(value));
}
#endif
void DeviceServiceApiAccessRequest::set_auth_scope(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  auth_scope_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
void DeviceServiceApiAccessRequest::set_auth_scope(int index, const char* value, size_t size) {
  auth_scope_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
::std::string* DeviceServiceApiAccessRequest::add_auth_scope() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
  return auth_scope_.Add();
}
void DeviceServiceApiAccessRequest::add_auth_scope(const ::std::string& value) {
  auth_scope_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
#if LANG_CXX11
void DeviceServiceApiAccessRequest::add_auth_scope(::std::string&& value) {
  auth_scope_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
#endif
void DeviceServiceApiAccessRequest::add_auth_scope(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  auth_scope_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
void DeviceServiceApiAccessRequest::add_auth_scope(const char* value, size_t size) {
  auth_scope_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceServiceApiAccessRequest::auth_scope() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
  return auth_scope_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceServiceApiAccessRequest::mutable_auth_scope() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
  return &auth_scope_;
}

// optional string oauth2_client_id = 2;
bool DeviceServiceApiAccessRequest::has_oauth2_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceServiceApiAccessRequest::set_has_oauth2_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceServiceApiAccessRequest::clear_has_oauth2_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceServiceApiAccessRequest::clear_oauth2_client_id() {
  oauth2_client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oauth2_client_id();
}
const ::std::string& DeviceServiceApiAccessRequest::oauth2_client_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
  return oauth2_client_id_.GetNoArena();
}
void DeviceServiceApiAccessRequest::set_oauth2_client_id(const ::std::string& value) {
  set_has_oauth2_client_id();
  oauth2_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
#if LANG_CXX11
void DeviceServiceApiAccessRequest::set_oauth2_client_id(::std::string&& value) {
  set_has_oauth2_client_id();
  oauth2_client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
#endif
void DeviceServiceApiAccessRequest::set_oauth2_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oauth2_client_id();
  oauth2_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
void DeviceServiceApiAccessRequest::set_oauth2_client_id(const char* value, size_t size) {
  set_has_oauth2_client_id();
  oauth2_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
::std::string* DeviceServiceApiAccessRequest::mutable_oauth2_client_id() {
  set_has_oauth2_client_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
  return oauth2_client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceServiceApiAccessRequest::release_oauth2_client_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
  clear_has_oauth2_client_id();
  return oauth2_client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceServiceApiAccessRequest::set_allocated_oauth2_client_id(::std::string* oauth2_client_id) {
  if (oauth2_client_id != NULL) {
    set_has_oauth2_client_id();
  } else {
    clear_has_oauth2_client_id();
  }
  oauth2_client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth2_client_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}

// optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
bool DeviceServiceApiAccessRequest::has_device_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceServiceApiAccessRequest::set_has_device_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceServiceApiAccessRequest::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceServiceApiAccessRequest::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
::enterprise_management::DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::device_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessRequest.device_type)
  return static_cast< ::enterprise_management::DeviceServiceApiAccessRequest_DeviceType >(device_type_);
}
void DeviceServiceApiAccessRequest::set_device_type(::enterprise_management::DeviceServiceApiAccessRequest_DeviceType value) {
  assert(::enterprise_management::DeviceServiceApiAccessRequest_DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.device_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceServiceApiAccessResponse::kAuthCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceServiceApiAccessResponse::DeviceServiceApiAccessResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceServiceApiAccessResponse)
}
DeviceServiceApiAccessResponse::DeviceServiceApiAccessResponse(const DeviceServiceApiAccessResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_code()) {
    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceServiceApiAccessResponse)
}

void DeviceServiceApiAccessResponse::SharedCtor() {
  _cached_size_ = 0;
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceServiceApiAccessResponse::~DeviceServiceApiAccessResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceServiceApiAccessResponse)
  SharedDtor();
}

void DeviceServiceApiAccessResponse::SharedDtor() {
  auth_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceServiceApiAccessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceServiceApiAccessResponse& DeviceServiceApiAccessResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceServiceApiAccessResponse* DeviceServiceApiAccessResponse::New(::google::protobuf::Arena* arena) const {
  DeviceServiceApiAccessResponse* n = new DeviceServiceApiAccessResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceServiceApiAccessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceServiceApiAccessResponse)
  if (has_auth_code()) {
    GOOGLE_DCHECK(!auth_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*auth_code_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceServiceApiAccessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceServiceApiAccessResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceServiceApiAccessResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceServiceApiAccessResponse)
  return false;
#undef DO_
}

void DeviceServiceApiAccessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceServiceApiAccessResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auth_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceServiceApiAccessResponse)
}

size_t DeviceServiceApiAccessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceServiceApiAccessResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string auth_code = 1;
  if (has_auth_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceServiceApiAccessResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceServiceApiAccessResponse*>(&from));
}

void DeviceServiceApiAccessResponse::MergeFrom(const DeviceServiceApiAccessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceServiceApiAccessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auth_code()) {
    set_has_auth_code();
    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
}

void DeviceServiceApiAccessResponse::CopyFrom(const DeviceServiceApiAccessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceServiceApiAccessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceServiceApiAccessResponse::IsInitialized() const {
  return true;
}

void DeviceServiceApiAccessResponse::Swap(DeviceServiceApiAccessResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceServiceApiAccessResponse::InternalSwap(DeviceServiceApiAccessResponse* other) {
  auth_code_.Swap(&other->auth_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceServiceApiAccessResponse::GetTypeName() const {
  return "enterprise_management.DeviceServiceApiAccessResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceServiceApiAccessResponse

// optional string auth_code = 1;
bool DeviceServiceApiAccessResponse::has_auth_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceServiceApiAccessResponse::set_has_auth_code() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceServiceApiAccessResponse::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceServiceApiAccessResponse::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_code();
}
const ::std::string& DeviceServiceApiAccessResponse::auth_code() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
  return auth_code_.GetNoArena();
}
void DeviceServiceApiAccessResponse::set_auth_code(const ::std::string& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
#if LANG_CXX11
void DeviceServiceApiAccessResponse::set_auth_code(::std::string&& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
#endif
void DeviceServiceApiAccessResponse::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
void DeviceServiceApiAccessResponse::set_auth_code(const char* value, size_t size) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
::std::string* DeviceServiceApiAccessResponse::mutable_auth_code() {
  set_has_auth_code();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceServiceApiAccessResponse::release_auth_code() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
  clear_has_auth_code();
  return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceServiceApiAccessResponse::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != NULL) {
    set_has_auth_code();
  } else {
    clear_has_auth_code();
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyFetchRequest::kPolicyTypeFieldNumber;
const int PolicyFetchRequest::kTimestampFieldNumber;
const int PolicyFetchRequest::kSignatureTypeFieldNumber;
const int PolicyFetchRequest::kPublicKeyVersionFieldNumber;
const int PolicyFetchRequest::kSettingsEntityIdFieldNumber;
const int PolicyFetchRequest::kInvalidationVersionFieldNumber;
const int PolicyFetchRequest::kInvalidationPayloadFieldNumber;
const int PolicyFetchRequest::kVerificationKeyHashFieldNumber;
const int PolicyFetchRequest::kPolicyInvalidationInfoFieldNumber;
const int PolicyFetchRequest::kInvalidationTopicsOnlyFieldNumber;
const int PolicyFetchRequest::kDeviceDmTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyFetchRequest::PolicyFetchRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyFetchRequest)
}
PolicyFetchRequest::PolicyFetchRequest(const PolicyFetchRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_type()) {
    policy_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
  }
  settings_entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_settings_entity_id()) {
    settings_entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settings_entity_id_);
  }
  invalidation_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invalidation_payload()) {
    invalidation_payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invalidation_payload_);
  }
  verification_key_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verification_key_hash()) {
    verification_key_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verification_key_hash_);
  }
  policy_invalidation_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_invalidation_info()) {
    policy_invalidation_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_invalidation_info_);
  }
  device_dm_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_dm_token()) {
    device_dm_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_dm_token_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&invalidation_topics_only_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(invalidation_topics_only_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyFetchRequest)
}

void PolicyFetchRequest::SharedCtor() {
  _cached_size_ = 0;
  policy_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invalidation_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verification_key_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_invalidation_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_dm_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalidation_topics_only_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(invalidation_topics_only_));
}

PolicyFetchRequest::~PolicyFetchRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyFetchRequest)
  SharedDtor();
}

void PolicyFetchRequest::SharedDtor() {
  policy_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_entity_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invalidation_payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verification_key_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_invalidation_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_dm_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PolicyFetchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolicyFetchRequest& PolicyFetchRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

PolicyFetchRequest* PolicyFetchRequest::New(::google::protobuf::Arena* arena) const {
  PolicyFetchRequest* n = new PolicyFetchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolicyFetchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyFetchRequest)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_policy_type()) {
      GOOGLE_DCHECK(!policy_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_settings_entity_id()) {
      GOOGLE_DCHECK(!settings_entity_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*settings_entity_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_invalidation_payload()) {
      GOOGLE_DCHECK(!invalidation_payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*invalidation_payload_.UnsafeRawStringPointer())->clear();
    }
    if (has_verification_key_hash()) {
      GOOGLE_DCHECK(!verification_key_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verification_key_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_policy_invalidation_info()) {
      GOOGLE_DCHECK(!policy_invalidation_info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_invalidation_info_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_dm_token()) {
      GOOGLE_DCHECK(!device_dm_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_dm_token_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signature_type_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(signature_type_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&public_key_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invalidation_topics_only_) -
        reinterpret_cast<char*>(&public_key_version_)) + sizeof(invalidation_topics_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PolicyFetchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyFetchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyFetchRequest_SignatureType_IsValid(value)) {
            set_signature_type(static_cast< ::enterprise_management::PolicyFetchRequest_SignatureType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 public_key_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_public_key_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_key_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string settings_entity_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settings_entity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 invalidation_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_invalidation_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &invalidation_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes invalidation_payload = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invalidation_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string verification_key_hash = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verification_key_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_invalidation_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_invalidation_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool invalidation_topics_only = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_invalidation_topics_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalidation_topics_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_dm_token = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_dm_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyFetchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyFetchRequest)
  return false;
#undef DO_
}

void PolicyFetchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyFetchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy_type(), output);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->signature_type(), output);
  }

  // optional int32 public_key_version = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->public_key_version(), output);
  }

  // optional string settings_entity_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->settings_entity_id(), output);
  }

  // optional int64 invalidation_version = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->invalidation_version(), output);
  }

  // optional bytes invalidation_payload = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->invalidation_payload(), output);
  }

  // optional string verification_key_hash = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->verification_key_hash(), output);
  }

  // optional string policy_invalidation_info = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->policy_invalidation_info(), output);
  }

  // optional bool invalidation_topics_only = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->invalidation_topics_only(), output);
  }

  // optional string device_dm_token = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->device_dm_token(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyFetchRequest)
}

size_t PolicyFetchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyFetchRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string policy_type = 1;
    if (has_policy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy_type());
    }

    // optional string settings_entity_id = 6;
    if (has_settings_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settings_entity_id());
    }

    // optional bytes invalidation_payload = 8;
    if (has_invalidation_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->invalidation_payload());
    }

    // optional string verification_key_hash = 9;
    if (has_verification_key_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verification_key_hash());
    }

    // optional string policy_invalidation_info = 10;
    if (has_policy_invalidation_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy_invalidation_info());
    }

    // optional string device_dm_token = 12;
    if (has_device_dm_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_dm_token());
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
    if (has_signature_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signature_type());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 public_key_version = 4;
    if (has_public_key_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->public_key_version());
    }

    // optional int64 invalidation_version = 7;
    if (has_invalidation_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->invalidation_version());
    }

    // optional bool invalidation_topics_only = 11;
    if (has_invalidation_topics_only()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyFetchRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PolicyFetchRequest*>(&from));
}

void PolicyFetchRequest::MergeFrom(const PolicyFetchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyFetchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_policy_type();
      policy_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_settings_entity_id();
      settings_entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settings_entity_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_invalidation_payload();
      invalidation_payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invalidation_payload_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_verification_key_hash();
      verification_key_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verification_key_hash_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_policy_invalidation_info();
      policy_invalidation_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_invalidation_info_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_device_dm_token();
      device_dm_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_dm_token_);
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      signature_type_ = from.signature_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      public_key_version_ = from.public_key_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      invalidation_version_ = from.invalidation_version_;
    }
    if (cached_has_bits & 0x00000400u) {
      invalidation_topics_only_ = from.invalidation_topics_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyFetchRequest::CopyFrom(const PolicyFetchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyFetchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyFetchRequest::IsInitialized() const {
  return true;
}

void PolicyFetchRequest::Swap(PolicyFetchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyFetchRequest::InternalSwap(PolicyFetchRequest* other) {
  policy_type_.Swap(&other->policy_type_);
  settings_entity_id_.Swap(&other->settings_entity_id_);
  invalidation_payload_.Swap(&other->invalidation_payload_);
  verification_key_hash_.Swap(&other->verification_key_hash_);
  policy_invalidation_info_.Swap(&other->policy_invalidation_info_);
  device_dm_token_.Swap(&other->device_dm_token_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(signature_type_, other->signature_type_);
  std::swap(public_key_version_, other->public_key_version_);
  std::swap(invalidation_version_, other->invalidation_version_);
  std::swap(invalidation_topics_only_, other->invalidation_topics_only_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PolicyFetchRequest::GetTypeName() const {
  return "enterprise_management.PolicyFetchRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyFetchRequest

// optional string policy_type = 1;
bool PolicyFetchRequest::has_policy_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolicyFetchRequest::set_has_policy_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PolicyFetchRequest::clear_has_policy_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PolicyFetchRequest::clear_policy_type() {
  policy_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_type();
}
const ::std::string& PolicyFetchRequest::policy_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.policy_type)
  return policy_type_.GetNoArena();
}
void PolicyFetchRequest::set_policy_type(const ::std::string& value) {
  set_has_policy_type();
  policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.policy_type)
}
#if LANG_CXX11
void PolicyFetchRequest::set_policy_type(::std::string&& value) {
  set_has_policy_type();
  policy_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.policy_type)
}
#endif
void PolicyFetchRequest::set_policy_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_type();
  policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.policy_type)
}
void PolicyFetchRequest::set_policy_type(const char* value, size_t size) {
  set_has_policy_type();
  policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.policy_type)
}
::std::string* PolicyFetchRequest::mutable_policy_type() {
  set_has_policy_type();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.policy_type)
  return policy_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_policy_type() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.policy_type)
  clear_has_policy_type();
  return policy_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_policy_type(::std::string* policy_type) {
  if (policy_type != NULL) {
    set_has_policy_type();
  } else {
    clear_has_policy_type();
  }
  policy_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_type);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.policy_type)
}

// optional int64 timestamp = 2;
bool PolicyFetchRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PolicyFetchRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void PolicyFetchRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void PolicyFetchRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 PolicyFetchRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.timestamp)
  return timestamp_;
}
void PolicyFetchRequest::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.timestamp)
}

// optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
bool PolicyFetchRequest::has_signature_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PolicyFetchRequest::set_has_signature_type() {
  _has_bits_[0] |= 0x00000080u;
}
void PolicyFetchRequest::clear_has_signature_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void PolicyFetchRequest::clear_signature_type() {
  signature_type_ = 0;
  clear_has_signature_type();
}
::enterprise_management::PolicyFetchRequest_SignatureType PolicyFetchRequest::signature_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.signature_type)
  return static_cast< ::enterprise_management::PolicyFetchRequest_SignatureType >(signature_type_);
}
void PolicyFetchRequest::set_signature_type(::enterprise_management::PolicyFetchRequest_SignatureType value) {
  assert(::enterprise_management::PolicyFetchRequest_SignatureType_IsValid(value));
  set_has_signature_type();
  signature_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.signature_type)
}

// optional int32 public_key_version = 4;
bool PolicyFetchRequest::has_public_key_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PolicyFetchRequest::set_has_public_key_version() {
  _has_bits_[0] |= 0x00000100u;
}
void PolicyFetchRequest::clear_has_public_key_version() {
  _has_bits_[0] &= ~0x00000100u;
}
void PolicyFetchRequest::clear_public_key_version() {
  public_key_version_ = 0;
  clear_has_public_key_version();
}
::google::protobuf::int32 PolicyFetchRequest::public_key_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.public_key_version)
  return public_key_version_;
}
void PolicyFetchRequest::set_public_key_version(::google::protobuf::int32 value) {
  set_has_public_key_version();
  public_key_version_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.public_key_version)
}

// optional string settings_entity_id = 6;
bool PolicyFetchRequest::has_settings_entity_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolicyFetchRequest::set_has_settings_entity_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PolicyFetchRequest::clear_has_settings_entity_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PolicyFetchRequest::clear_settings_entity_id() {
  settings_entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_settings_entity_id();
}
const ::std::string& PolicyFetchRequest::settings_entity_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.settings_entity_id)
  return settings_entity_id_.GetNoArena();
}
void PolicyFetchRequest::set_settings_entity_id(const ::std::string& value) {
  set_has_settings_entity_id();
  settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
#if LANG_CXX11
void PolicyFetchRequest::set_settings_entity_id(::std::string&& value) {
  set_has_settings_entity_id();
  settings_entity_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
#endif
void PolicyFetchRequest::set_settings_entity_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_settings_entity_id();
  settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
void PolicyFetchRequest::set_settings_entity_id(const char* value, size_t size) {
  set_has_settings_entity_id();
  settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
::std::string* PolicyFetchRequest::mutable_settings_entity_id() {
  set_has_settings_entity_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.settings_entity_id)
  return settings_entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_settings_entity_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.settings_entity_id)
  clear_has_settings_entity_id();
  return settings_entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_settings_entity_id(::std::string* settings_entity_id) {
  if (settings_entity_id != NULL) {
    set_has_settings_entity_id();
  } else {
    clear_has_settings_entity_id();
  }
  settings_entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settings_entity_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.settings_entity_id)
}

// optional int64 invalidation_version = 7;
bool PolicyFetchRequest::has_invalidation_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PolicyFetchRequest::set_has_invalidation_version() {
  _has_bits_[0] |= 0x00000200u;
}
void PolicyFetchRequest::clear_has_invalidation_version() {
  _has_bits_[0] &= ~0x00000200u;
}
void PolicyFetchRequest::clear_invalidation_version() {
  invalidation_version_ = GOOGLE_LONGLONG(0);
  clear_has_invalidation_version();
}
::google::protobuf::int64 PolicyFetchRequest::invalidation_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.invalidation_version)
  return invalidation_version_;
}
void PolicyFetchRequest::set_invalidation_version(::google::protobuf::int64 value) {
  set_has_invalidation_version();
  invalidation_version_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.invalidation_version)
}

// optional bytes invalidation_payload = 8;
bool PolicyFetchRequest::has_invalidation_payload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolicyFetchRequest::set_has_invalidation_payload() {
  _has_bits_[0] |= 0x00000004u;
}
void PolicyFetchRequest::clear_has_invalidation_payload() {
  _has_bits_[0] &= ~0x00000004u;
}
void PolicyFetchRequest::clear_invalidation_payload() {
  invalidation_payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invalidation_payload();
}
const ::std::string& PolicyFetchRequest::invalidation_payload() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.invalidation_payload)
  return invalidation_payload_.GetNoArena();
}
void PolicyFetchRequest::set_invalidation_payload(const ::std::string& value) {
  set_has_invalidation_payload();
  invalidation_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
#if LANG_CXX11
void PolicyFetchRequest::set_invalidation_payload(::std::string&& value) {
  set_has_invalidation_payload();
  invalidation_payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
#endif
void PolicyFetchRequest::set_invalidation_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invalidation_payload();
  invalidation_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
void PolicyFetchRequest::set_invalidation_payload(const void* value, size_t size) {
  set_has_invalidation_payload();
  invalidation_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
::std::string* PolicyFetchRequest::mutable_invalidation_payload() {
  set_has_invalidation_payload();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.invalidation_payload)
  return invalidation_payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_invalidation_payload() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.invalidation_payload)
  clear_has_invalidation_payload();
  return invalidation_payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_invalidation_payload(::std::string* invalidation_payload) {
  if (invalidation_payload != NULL) {
    set_has_invalidation_payload();
  } else {
    clear_has_invalidation_payload();
  }
  invalidation_payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invalidation_payload);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.invalidation_payload)
}

// optional string verification_key_hash = 9;
bool PolicyFetchRequest::has_verification_key_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PolicyFetchRequest::set_has_verification_key_hash() {
  _has_bits_[0] |= 0x00000008u;
}
void PolicyFetchRequest::clear_has_verification_key_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
void PolicyFetchRequest::clear_verification_key_hash() {
  verification_key_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verification_key_hash();
}
const ::std::string& PolicyFetchRequest::verification_key_hash() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.verification_key_hash)
  return verification_key_hash_.GetNoArena();
}
void PolicyFetchRequest::set_verification_key_hash(const ::std::string& value) {
  set_has_verification_key_hash();
  verification_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
#if LANG_CXX11
void PolicyFetchRequest::set_verification_key_hash(::std::string&& value) {
  set_has_verification_key_hash();
  verification_key_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
#endif
void PolicyFetchRequest::set_verification_key_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verification_key_hash();
  verification_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
void PolicyFetchRequest::set_verification_key_hash(const char* value, size_t size) {
  set_has_verification_key_hash();
  verification_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
::std::string* PolicyFetchRequest::mutable_verification_key_hash() {
  set_has_verification_key_hash();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.verification_key_hash)
  return verification_key_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_verification_key_hash() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.verification_key_hash)
  clear_has_verification_key_hash();
  return verification_key_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_verification_key_hash(::std::string* verification_key_hash) {
  if (verification_key_hash != NULL) {
    set_has_verification_key_hash();
  } else {
    clear_has_verification_key_hash();
  }
  verification_key_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verification_key_hash);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.verification_key_hash)
}

// optional string policy_invalidation_info = 10;
bool PolicyFetchRequest::has_policy_invalidation_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PolicyFetchRequest::set_has_policy_invalidation_info() {
  _has_bits_[0] |= 0x00000010u;
}
void PolicyFetchRequest::clear_has_policy_invalidation_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void PolicyFetchRequest::clear_policy_invalidation_info() {
  policy_invalidation_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_invalidation_info();
}
const ::std::string& PolicyFetchRequest::policy_invalidation_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
  return policy_invalidation_info_.GetNoArena();
}
void PolicyFetchRequest::set_policy_invalidation_info(const ::std::string& value) {
  set_has_policy_invalidation_info();
  policy_invalidation_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
}
#if LANG_CXX11
void PolicyFetchRequest::set_policy_invalidation_info(::std::string&& value) {
  set_has_policy_invalidation_info();
  policy_invalidation_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
}
#endif
void PolicyFetchRequest::set_policy_invalidation_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_invalidation_info();
  policy_invalidation_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
}
void PolicyFetchRequest::set_policy_invalidation_info(const char* value, size_t size) {
  set_has_policy_invalidation_info();
  policy_invalidation_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
}
::std::string* PolicyFetchRequest::mutable_policy_invalidation_info() {
  set_has_policy_invalidation_info();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
  return policy_invalidation_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_policy_invalidation_info() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
  clear_has_policy_invalidation_info();
  return policy_invalidation_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_policy_invalidation_info(::std::string* policy_invalidation_info) {
  if (policy_invalidation_info != NULL) {
    set_has_policy_invalidation_info();
  } else {
    clear_has_policy_invalidation_info();
  }
  policy_invalidation_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_invalidation_info);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.policy_invalidation_info)
}

// optional bool invalidation_topics_only = 11;
bool PolicyFetchRequest::has_invalidation_topics_only() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PolicyFetchRequest::set_has_invalidation_topics_only() {
  _has_bits_[0] |= 0x00000400u;
}
void PolicyFetchRequest::clear_has_invalidation_topics_only() {
  _has_bits_[0] &= ~0x00000400u;
}
void PolicyFetchRequest::clear_invalidation_topics_only() {
  invalidation_topics_only_ = false;
  clear_has_invalidation_topics_only();
}
bool PolicyFetchRequest::invalidation_topics_only() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.invalidation_topics_only)
  return invalidation_topics_only_;
}
void PolicyFetchRequest::set_invalidation_topics_only(bool value) {
  set_has_invalidation_topics_only();
  invalidation_topics_only_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.invalidation_topics_only)
}

// optional string device_dm_token = 12;
bool PolicyFetchRequest::has_device_dm_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PolicyFetchRequest::set_has_device_dm_token() {
  _has_bits_[0] |= 0x00000020u;
}
void PolicyFetchRequest::clear_has_device_dm_token() {
  _has_bits_[0] &= ~0x00000020u;
}
void PolicyFetchRequest::clear_device_dm_token() {
  device_dm_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_dm_token();
}
const ::std::string& PolicyFetchRequest::device_dm_token() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.device_dm_token)
  return device_dm_token_.GetNoArena();
}
void PolicyFetchRequest::set_device_dm_token(const ::std::string& value) {
  set_has_device_dm_token();
  device_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.device_dm_token)
}
#if LANG_CXX11
void PolicyFetchRequest::set_device_dm_token(::std::string&& value) {
  set_has_device_dm_token();
  device_dm_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchRequest.device_dm_token)
}
#endif
void PolicyFetchRequest::set_device_dm_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_dm_token();
  device_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.device_dm_token)
}
void PolicyFetchRequest::set_device_dm_token(const char* value, size_t size) {
  set_has_device_dm_token();
  device_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.device_dm_token)
}
::std::string* PolicyFetchRequest::mutable_device_dm_token() {
  set_has_device_dm_token();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.device_dm_token)
  return device_dm_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_device_dm_token() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.device_dm_token)
  clear_has_device_dm_token();
  return device_dm_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_device_dm_token(::std::string* device_dm_token) {
  if (device_dm_token != NULL) {
    set_has_device_dm_token();
  } else {
    clear_has_device_dm_token();
  }
  device_dm_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_dm_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.device_dm_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisabledState::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisabledState::DisabledState()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DisabledState)
}
DisabledState::DisabledState(const DisabledState& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DisabledState)
}

void DisabledState::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DisabledState::~DisabledState() {
  // @@protoc_insertion_point(destructor:enterprise_management.DisabledState)
  SharedDtor();
}

void DisabledState::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DisabledState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DisabledState& DisabledState::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DisabledState* DisabledState::New(::google::protobuf::Arena* arena) const {
  DisabledState* n = new DisabledState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisabledState::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DisabledState)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DisabledState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DisabledState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DisabledState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DisabledState)
  return false;
#undef DO_
}

void DisabledState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DisabledState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DisabledState)
}

size_t DisabledState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DisabledState)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisabledState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DisabledState*>(&from));
}

void DisabledState::MergeFrom(const DisabledState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DisabledState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    set_has_message();
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void DisabledState::CopyFrom(const DisabledState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DisabledState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisabledState::IsInitialized() const {
  return true;
}

void DisabledState::Swap(DisabledState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisabledState::InternalSwap(DisabledState* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DisabledState::GetTypeName() const {
  return "enterprise_management.DisabledState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisabledState

// optional string message = 1;
bool DisabledState::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DisabledState::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void DisabledState::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void DisabledState::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& DisabledState::message() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DisabledState.message)
  return message_.GetNoArena();
}
void DisabledState::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DisabledState.message)
}
#if LANG_CXX11
void DisabledState::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DisabledState.message)
}
#endif
void DisabledState::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DisabledState.message)
}
void DisabledState::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DisabledState.message)
}
::std::string* DisabledState::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DisabledState.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DisabledState::release_message() {
  // @@protoc_insertion_point(field_release:enterprise_management.DisabledState.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DisabledState::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DisabledState.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceState::kDeviceModeFieldNumber;
const int DeviceState::kDisabledStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceState::DeviceState()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceState)
}
DeviceState::DeviceState(const DeviceState& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_disabled_state()) {
    disabled_state_ = new ::enterprise_management::DisabledState(*from.disabled_state_);
  } else {
    disabled_state_ = NULL;
  }
  device_mode_ = from.device_mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceState)
}

void DeviceState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&disabled_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_mode_) -
      reinterpret_cast<char*>(&disabled_state_)) + sizeof(device_mode_));
}

DeviceState::~DeviceState() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceState)
  SharedDtor();
}

void DeviceState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete disabled_state_;
  }
}

void DeviceState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceState& DeviceState::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceState* DeviceState::New(::google::protobuf::Arena* arena) const {
  DeviceState* n = new DeviceState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceState::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceState)
  if (has_disabled_state()) {
    GOOGLE_DCHECK(disabled_state_ != NULL);
    disabled_state_->::enterprise_management::DisabledState::Clear();
  }
  device_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceState_DeviceMode_IsValid(value)) {
            set_device_mode(static_cast< ::enterprise_management::DeviceState_DeviceMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DisabledState disabled_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disabled_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceState)
  return false;
#undef DO_
}

void DeviceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->device_mode(), output);
  }

  // optional .enterprise_management.DisabledState disabled_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->disabled_state_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceState)
}

size_t DeviceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceState)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .enterprise_management.DisabledState disabled_state = 2;
    if (has_disabled_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->disabled_state_);
    }

    // optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
    if (has_device_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceState*>(&from));
}

void DeviceState::MergeFrom(const DeviceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_disabled_state()->::enterprise_management::DisabledState::MergeFrom(from.disabled_state());
    }
    if (cached_has_bits & 0x00000002u) {
      device_mode_ = from.device_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceState::CopyFrom(const DeviceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceState::IsInitialized() const {
  return true;
}

void DeviceState::Swap(DeviceState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceState::InternalSwap(DeviceState* other) {
  std::swap(disabled_state_, other->disabled_state_);
  std::swap(device_mode_, other->device_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceState::GetTypeName() const {
  return "enterprise_management.DeviceState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceState

// optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
bool DeviceState::has_device_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceState::set_has_device_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceState::clear_has_device_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceState::clear_device_mode() {
  device_mode_ = 0;
  clear_has_device_mode();
}
::enterprise_management::DeviceState_DeviceMode DeviceState::device_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceState.device_mode)
  return static_cast< ::enterprise_management::DeviceState_DeviceMode >(device_mode_);
}
void DeviceState::set_device_mode(::enterprise_management::DeviceState_DeviceMode value) {
  assert(::enterprise_management::DeviceState_DeviceMode_IsValid(value));
  set_has_device_mode();
  device_mode_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceState.device_mode)
}

// optional .enterprise_management.DisabledState disabled_state = 2;
bool DeviceState::has_disabled_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceState::set_has_disabled_state() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceState::clear_has_disabled_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceState::clear_disabled_state() {
  if (disabled_state_ != NULL) disabled_state_->::enterprise_management::DisabledState::Clear();
  clear_has_disabled_state();
}
const ::enterprise_management::DisabledState& DeviceState::disabled_state() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceState.disabled_state)
  return disabled_state_ != NULL ? *disabled_state_
                         : *::enterprise_management::DisabledState::internal_default_instance();
}
::enterprise_management::DisabledState* DeviceState::mutable_disabled_state() {
  set_has_disabled_state();
  if (disabled_state_ == NULL) {
    disabled_state_ = new ::enterprise_management::DisabledState;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceState.disabled_state)
  return disabled_state_;
}
::enterprise_management::DisabledState* DeviceState::release_disabled_state() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceState.disabled_state)
  clear_has_disabled_state();
  ::enterprise_management::DisabledState* temp = disabled_state_;
  disabled_state_ = NULL;
  return temp;
}
void DeviceState::set_allocated_disabled_state(::enterprise_management::DisabledState* disabled_state) {
  delete disabled_state_;
  disabled_state_ = disabled_state;
  if (disabled_state) {
    set_has_disabled_state();
  } else {
    clear_has_disabled_state();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceState.disabled_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyData::kPolicyTypeFieldNumber;
const int PolicyData::kTimestampFieldNumber;
const int PolicyData::kRequestTokenFieldNumber;
const int PolicyData::kPolicyValueFieldNumber;
const int PolicyData::kMachineNameFieldNumber;
const int PolicyData::kPublicKeyVersionFieldNumber;
const int PolicyData::kUsernameFieldNumber;
const int PolicyData::kDeviceIdFieldNumber;
const int PolicyData::kStateFieldNumber;
const int PolicyData::kSettingsEntityIdFieldNumber;
const int PolicyData::kServiceAccountIdentityFieldNumber;
const int PolicyData::kInvalidationSourceFieldNumber;
const int PolicyData::kInvalidationNameFieldNumber;
const int PolicyData::kPolicyTokenFieldNumber;
const int PolicyData::kManagementModeFieldNumber;
const int PolicyData::kDeviceStateFieldNumber;
const int PolicyData::kCommandInvalidationSourceFieldNumber;
const int PolicyData::kCommandInvalidationNameFieldNumber;
const int PolicyData::kAnnotatedLocationFieldNumber;
const int PolicyData::kAnnotatedAssetIdFieldNumber;
const int PolicyData::kDirectoryApiIdFieldNumber;
const int PolicyData::kDeviceAffiliationIdsFieldNumber;
const int PolicyData::kUserAffiliationIdsFieldNumber;
const int PolicyData::kDisplayDomainFieldNumber;
const int PolicyData::kPolicyInvalidationTopicFieldNumber;
const int PolicyData::kCommandInvalidationTopicFieldNumber;
const int PolicyData::kEnrollmentIdNeededFieldNumber;
const int PolicyData::kGaiaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyData::PolicyData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyData)
}
PolicyData::PolicyData(const PolicyData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      device_affiliation_ids_(from.device_affiliation_ids_),
      user_affiliation_ids_(from.user_affiliation_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_type()) {
    policy_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
  }
  request_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_token()) {
    request_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_token_);
  }
  policy_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_value()) {
    policy_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_value_);
  }
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_id()) {
    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  settings_entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_settings_entity_id()) {
    settings_entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settings_entity_id_);
  }
  service_account_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_account_identity()) {
    service_account_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_account_identity_);
  }
  invalidation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invalidation_name()) {
    invalidation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invalidation_name_);
  }
  policy_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_token()) {
    policy_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_token_);
  }
  command_invalidation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command_invalidation_name()) {
    command_invalidation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_invalidation_name_);
  }
  annotated_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_annotated_location()) {
    annotated_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotated_location_);
  }
  annotated_asset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_annotated_asset_id()) {
    annotated_asset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotated_asset_id_);
  }
  directory_api_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_directory_api_id()) {
    directory_api_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_api_id_);
  }
  display_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_domain()) {
    display_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_domain_);
  }
  policy_invalidation_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_invalidation_topic()) {
    policy_invalidation_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_invalidation_topic_);
  }
  command_invalidation_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command_invalidation_topic()) {
    command_invalidation_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_invalidation_topic_);
  }
  gaia_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gaia_id()) {
    gaia_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gaia_id_);
  }
  if (from.has_device_state()) {
    device_state_ = new ::enterprise_management::DeviceState(*from.device_state_);
  } else {
    device_state_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&enrollment_id_needed_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(enrollment_id_needed_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyData)
}

void PolicyData::SharedCtor() {
  _cached_size_ = 0;
  policy_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_account_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invalidation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_invalidation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  annotated_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  annotated_asset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  directory_api_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_invalidation_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_invalidation_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gaia_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enrollment_id_needed_) -
      reinterpret_cast<char*>(&device_state_)) + sizeof(enrollment_id_needed_));
}

PolicyData::~PolicyData() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyData)
  SharedDtor();
}

void PolicyData::SharedDtor() {
  policy_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_entity_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_account_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invalidation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_invalidation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  annotated_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  annotated_asset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  directory_api_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_invalidation_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_invalidation_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gaia_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete device_state_;
  }
}

void PolicyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolicyData& PolicyData::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

PolicyData* PolicyData::New(::google::protobuf::Arena* arena) const {
  PolicyData* n = new PolicyData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolicyData::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyData)
  device_affiliation_ids_.Clear();
  user_affiliation_ids_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_policy_type()) {
      GOOGLE_DCHECK(!policy_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_request_token()) {
      GOOGLE_DCHECK(!request_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*request_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_policy_value()) {
      GOOGLE_DCHECK(!policy_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_value_.UnsafeRawStringPointer())->clear();
    }
    if (has_machine_name()) {
      GOOGLE_DCHECK(!machine_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_id()) {
      GOOGLE_DCHECK(!device_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_settings_entity_id()) {
      GOOGLE_DCHECK(!settings_entity_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*settings_entity_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_service_account_identity()) {
      GOOGLE_DCHECK(!service_account_identity_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*service_account_identity_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_invalidation_name()) {
      GOOGLE_DCHECK(!invalidation_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*invalidation_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_policy_token()) {
      GOOGLE_DCHECK(!policy_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_command_invalidation_name()) {
      GOOGLE_DCHECK(!command_invalidation_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*command_invalidation_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_annotated_location()) {
      GOOGLE_DCHECK(!annotated_location_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*annotated_location_.UnsafeRawStringPointer())->clear();
    }
    if (has_annotated_asset_id()) {
      GOOGLE_DCHECK(!annotated_asset_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*annotated_asset_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_directory_api_id()) {
      GOOGLE_DCHECK(!directory_api_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*directory_api_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_display_domain()) {
      GOOGLE_DCHECK(!display_domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*display_domain_.UnsafeRawStringPointer())->clear();
    }
    if (has_policy_invalidation_topic()) {
      GOOGLE_DCHECK(!policy_invalidation_topic_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_invalidation_topic_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752u) {
    if (has_command_invalidation_topic()) {
      GOOGLE_DCHECK(!command_invalidation_topic_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*command_invalidation_topic_.UnsafeRawStringPointer())->clear();
    }
    if (has_gaia_id()) {
      GOOGLE_DCHECK(!gaia_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gaia_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_state()) {
      GOOGLE_DCHECK(device_state_ != NULL);
      device_state_->::enterprise_management::DeviceState::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16252928u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&management_mode_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(management_mode_));
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    ::memset(&command_invalidation_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enrollment_id_needed_) -
        reinterpret_cast<char*>(&command_invalidation_source_)) + sizeof(enrollment_id_needed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PolicyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes policy_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_policy_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string machine_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 public_key_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_public_key_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_key_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyData_AssociationState_IsValid(value)) {
            set_state(static_cast< ::enterprise_management::PolicyData_AssociationState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string settings_entity_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settings_entity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string service_account_identity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_account_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 invalidation_source = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_invalidation_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invalidation_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes invalidation_name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invalidation_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_token = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyData_ManagementMode_IsValid(value)) {
            set_management_mode(static_cast< ::enterprise_management::PolicyData_ManagementMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(128u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceState device_state = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 command_invalidation_source = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_command_invalidation_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_invalidation_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes command_invalidation_name = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_command_invalidation_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string annotated_location = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotated_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string annotated_asset_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotated_asset_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string directory_api_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory_api_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string device_affiliation_ids = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_affiliation_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string user_affiliation_ids = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_affiliation_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display_domain = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_invalidation_topic = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_invalidation_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string command_invalidation_topic = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_invalidation_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enrollment_id_needed = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_enrollment_id_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enrollment_id_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gaia_id = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gaia_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyData)
  return false;
#undef DO_
}

void PolicyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy_type(), output);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional string request_token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_token(), output);
  }

  // optional bytes policy_value = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->policy_value(), output);
  }

  // optional string machine_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->machine_name(), output);
  }

  // optional int32 public_key_version = 6;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->public_key_version(), output);
  }

  // optional string username = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->username(), output);
  }

  // optional string device_id = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_id(), output);
  }

  // optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->state(), output);
  }

  // optional string settings_entity_id = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->settings_entity_id(), output);
  }

  // optional string service_account_identity = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->service_account_identity(), output);
  }

  // optional int32 invalidation_source = 13;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->invalidation_source(), output);
  }

  // optional bytes invalidation_name = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->invalidation_name(), output);
  }

  // optional string policy_token = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->policy_token(), output);
  }

  // optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->management_mode(), output);
  }

  // optional .enterprise_management.DeviceState device_state = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->device_state_, output);
  }

  // optional int32 command_invalidation_source = 18;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->command_invalidation_source(), output);
  }

  // optional bytes command_invalidation_name = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->command_invalidation_name(), output);
  }

  // optional string annotated_location = 20;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->annotated_location(), output);
  }

  // optional string annotated_asset_id = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->annotated_asset_id(), output);
  }

  // optional string directory_api_id = 22;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->directory_api_id(), output);
  }

  // repeated string device_affiliation_ids = 23;
  for (int i = 0, n = this->device_affiliation_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->device_affiliation_ids(i), output);
  }

  // repeated string user_affiliation_ids = 24;
  for (int i = 0, n = this->user_affiliation_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->user_affiliation_ids(i), output);
  }

  // optional string display_domain = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->display_domain(), output);
  }

  // optional string policy_invalidation_topic = 26;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->policy_invalidation_topic(), output);
  }

  // optional string command_invalidation_topic = 27;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->command_invalidation_topic(), output);
  }

  // optional bool enrollment_id_needed = 28;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->enrollment_id_needed(), output);
  }

  // optional string gaia_id = 29;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->gaia_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyData)
}

size_t PolicyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string device_affiliation_ids = 23;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->device_affiliation_ids_size());
  for (int i = 0, n = this->device_affiliation_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_affiliation_ids(i));
  }

  // repeated string user_affiliation_ids = 24;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->user_affiliation_ids_size());
  for (int i = 0, n = this->user_affiliation_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_affiliation_ids(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string policy_type = 1;
    if (has_policy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy_type());
    }

    // optional string request_token = 3;
    if (has_request_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_token());
    }

    // optional bytes policy_value = 4;
    if (has_policy_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->policy_value());
    }

    // optional string machine_name = 5;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string username = 7;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string device_id = 8;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string settings_entity_id = 11;
    if (has_settings_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settings_entity_id());
    }

    // optional string service_account_identity = 12;
    if (has_service_account_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_account_identity());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bytes invalidation_name = 14;
    if (has_invalidation_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->invalidation_name());
    }

    // optional string policy_token = 15;
    if (has_policy_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy_token());
    }

    // optional bytes command_invalidation_name = 19;
    if (has_command_invalidation_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->command_invalidation_name());
    }

    // optional string annotated_location = 20;
    if (has_annotated_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->annotated_location());
    }

    // optional string annotated_asset_id = 21;
    if (has_annotated_asset_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->annotated_asset_id());
    }

    // optional string directory_api_id = 22;
    if (has_directory_api_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directory_api_id());
    }

    // optional string display_domain = 25;
    if (has_display_domain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_domain());
    }

    // optional string policy_invalidation_topic = 26;
    if (has_policy_invalidation_topic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy_invalidation_topic());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional string command_invalidation_topic = 27;
    if (has_command_invalidation_topic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_invalidation_topic());
    }

    // optional string gaia_id = 29;
    if (has_gaia_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gaia_id());
    }

    // optional .enterprise_management.DeviceState device_state = 17;
    if (has_device_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_state_);
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 public_key_version = 6;
    if (has_public_key_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->public_key_version());
    }

    // optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 invalidation_source = 13;
    if (has_invalidation_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invalidation_source());
    }

    // optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
    if (has_management_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->management_mode());
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional int32 command_invalidation_source = 18;
    if (has_command_invalidation_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command_invalidation_source());
    }

    // optional bool enrollment_id_needed = 28;
    if (has_enrollment_id_needed()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PolicyData*>(&from));
}

void PolicyData::MergeFrom(const PolicyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_affiliation_ids_.MergeFrom(from.device_affiliation_ids_);
  user_affiliation_ids_.MergeFrom(from.user_affiliation_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_policy_type();
      policy_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_request_token();
      request_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_policy_value();
      policy_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_value_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_device_id();
      device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_settings_entity_id();
      settings_entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settings_entity_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_service_account_identity();
      service_account_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_account_identity_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_invalidation_name();
      invalidation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invalidation_name_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_policy_token();
      policy_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_token_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_command_invalidation_name();
      command_invalidation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_invalidation_name_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_annotated_location();
      annotated_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotated_location_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_annotated_asset_id();
      annotated_asset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotated_asset_id_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_directory_api_id();
      directory_api_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_api_id_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_display_domain();
      display_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_domain_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_policy_invalidation_topic();
      policy_invalidation_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_invalidation_topic_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_command_invalidation_topic();
      command_invalidation_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_invalidation_topic_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_gaia_id();
      gaia_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gaia_id_);
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_device_state()->::enterprise_management::DeviceState::MergeFrom(from.device_state());
    }
    if (cached_has_bits & 0x00080000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00100000u) {
      public_key_version_ = from.public_key_version_;
    }
    if (cached_has_bits & 0x00200000u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00400000u) {
      invalidation_source_ = from.invalidation_source_;
    }
    if (cached_has_bits & 0x00800000u) {
      management_mode_ = from.management_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      command_invalidation_source_ = from.command_invalidation_source_;
    }
    if (cached_has_bits & 0x02000000u) {
      enrollment_id_needed_ = from.enrollment_id_needed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyData::CopyFrom(const PolicyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyData::IsInitialized() const {
  return true;
}

void PolicyData::Swap(PolicyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyData::InternalSwap(PolicyData* other) {
  device_affiliation_ids_.InternalSwap(&other->device_affiliation_ids_);
  user_affiliation_ids_.InternalSwap(&other->user_affiliation_ids_);
  policy_type_.Swap(&other->policy_type_);
  request_token_.Swap(&other->request_token_);
  policy_value_.Swap(&other->policy_value_);
  machine_name_.Swap(&other->machine_name_);
  username_.Swap(&other->username_);
  device_id_.Swap(&other->device_id_);
  settings_entity_id_.Swap(&other->settings_entity_id_);
  service_account_identity_.Swap(&other->service_account_identity_);
  invalidation_name_.Swap(&other->invalidation_name_);
  policy_token_.Swap(&other->policy_token_);
  command_invalidation_name_.Swap(&other->command_invalidation_name_);
  annotated_location_.Swap(&other->annotated_location_);
  annotated_asset_id_.Swap(&other->annotated_asset_id_);
  directory_api_id_.Swap(&other->directory_api_id_);
  display_domain_.Swap(&other->display_domain_);
  policy_invalidation_topic_.Swap(&other->policy_invalidation_topic_);
  command_invalidation_topic_.Swap(&other->command_invalidation_topic_);
  gaia_id_.Swap(&other->gaia_id_);
  std::swap(device_state_, other->device_state_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(public_key_version_, other->public_key_version_);
  std::swap(state_, other->state_);
  std::swap(invalidation_source_, other->invalidation_source_);
  std::swap(management_mode_, other->management_mode_);
  std::swap(command_invalidation_source_, other->command_invalidation_source_);
  std::swap(enrollment_id_needed_, other->enrollment_id_needed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PolicyData::GetTypeName() const {
  return "enterprise_management.PolicyData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyData

// optional string policy_type = 1;
bool PolicyData::has_policy_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolicyData::set_has_policy_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PolicyData::clear_has_policy_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PolicyData::clear_policy_type() {
  policy_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_type();
}
const ::std::string& PolicyData::policy_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_type)
  return policy_type_.GetNoArena();
}
void PolicyData::set_policy_type(const ::std::string& value) {
  set_has_policy_type();
  policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_type)
}
#if LANG_CXX11
void PolicyData::set_policy_type(::std::string&& value) {
  set_has_policy_type();
  policy_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.policy_type)
}
#endif
void PolicyData::set_policy_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_type();
  policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_type)
}
void PolicyData::set_policy_type(const char* value, size_t size) {
  set_has_policy_type();
  policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_type)
}
::std::string* PolicyData::mutable_policy_type() {
  set_has_policy_type();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_type)
  return policy_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_policy_type() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_type)
  clear_has_policy_type();
  return policy_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_policy_type(::std::string* policy_type) {
  if (policy_type != NULL) {
    set_has_policy_type();
  } else {
    clear_has_policy_type();
  }
  policy_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_type);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_type)
}

// optional int64 timestamp = 2;
bool PolicyData::has_timestamp() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PolicyData::set_has_timestamp() {
  _has_bits_[0] |= 0x00080000u;
}
void PolicyData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00080000u;
}
void PolicyData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 PolicyData::timestamp() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.timestamp)
  return timestamp_;
}
void PolicyData::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.timestamp)
}

// optional string request_token = 3;
bool PolicyData::has_request_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolicyData::set_has_request_token() {
  _has_bits_[0] |= 0x00000002u;
}
void PolicyData::clear_has_request_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void PolicyData::clear_request_token() {
  request_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_token();
}
const ::std::string& PolicyData::request_token() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.request_token)
  return request_token_.GetNoArena();
}
void PolicyData::set_request_token(const ::std::string& value) {
  set_has_request_token();
  request_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.request_token)
}
#if LANG_CXX11
void PolicyData::set_request_token(::std::string&& value) {
  set_has_request_token();
  request_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.request_token)
}
#endif
void PolicyData::set_request_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request_token();
  request_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.request_token)
}
void PolicyData::set_request_token(const char* value, size_t size) {
  set_has_request_token();
  request_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.request_token)
}
::std::string* PolicyData::mutable_request_token() {
  set_has_request_token();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.request_token)
  return request_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_request_token() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.request_token)
  clear_has_request_token();
  return request_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_request_token(::std::string* request_token) {
  if (request_token != NULL) {
    set_has_request_token();
  } else {
    clear_has_request_token();
  }
  request_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.request_token)
}

// optional bytes policy_value = 4;
bool PolicyData::has_policy_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolicyData::set_has_policy_value() {
  _has_bits_[0] |= 0x00000004u;
}
void PolicyData::clear_has_policy_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void PolicyData::clear_policy_value() {
  policy_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_value();
}
const ::std::string& PolicyData::policy_value() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_value)
  return policy_value_.GetNoArena();
}
void PolicyData::set_policy_value(const ::std::string& value) {
  set_has_policy_value();
  policy_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_value)
}
#if LANG_CXX11
void PolicyData::set_policy_value(::std::string&& value) {
  set_has_policy_value();
  policy_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.policy_value)
}
#endif
void PolicyData::set_policy_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_value();
  policy_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_value)
}
void PolicyData::set_policy_value(const void* value, size_t size) {
  set_has_policy_value();
  policy_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_value)
}
::std::string* PolicyData::mutable_policy_value() {
  set_has_policy_value();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_value)
  return policy_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_policy_value() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_value)
  clear_has_policy_value();
  return policy_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_policy_value(::std::string* policy_value) {
  if (policy_value != NULL) {
    set_has_policy_value();
  } else {
    clear_has_policy_value();
  }
  policy_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_value);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_value)
}

// optional string machine_name = 5;
bool PolicyData::has_machine_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PolicyData::set_has_machine_name() {
  _has_bits_[0] |= 0x00000008u;
}
void PolicyData::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void PolicyData::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
const ::std::string& PolicyData::machine_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.machine_name)
  return machine_name_.GetNoArena();
}
void PolicyData::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.machine_name)
}
#if LANG_CXX11
void PolicyData::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.machine_name)
}
#endif
void PolicyData::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.machine_name)
}
void PolicyData::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.machine_name)
}
::std::string* PolicyData::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_machine_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.machine_name)
  clear_has_machine_name();
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.machine_name)
}

// optional int32 public_key_version = 6;
bool PolicyData::has_public_key_version() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PolicyData::set_has_public_key_version() {
  _has_bits_[0] |= 0x00100000u;
}
void PolicyData::clear_has_public_key_version() {
  _has_bits_[0] &= ~0x00100000u;
}
void PolicyData::clear_public_key_version() {
  public_key_version_ = 0;
  clear_has_public_key_version();
}
::google::protobuf::int32 PolicyData::public_key_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.public_key_version)
  return public_key_version_;
}
void PolicyData::set_public_key_version(::google::protobuf::int32 value) {
  set_has_public_key_version();
  public_key_version_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.public_key_version)
}

// optional string username = 7;
bool PolicyData::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PolicyData::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
void PolicyData::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
void PolicyData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& PolicyData::username() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.username)
  return username_.GetNoArena();
}
void PolicyData::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.username)
}
#if LANG_CXX11
void PolicyData::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.username)
}
#endif
void PolicyData::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.username)
}
void PolicyData::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.username)
}
::std::string* PolicyData::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_username() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.username)
}

// optional string device_id = 8;
bool PolicyData::has_device_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PolicyData::set_has_device_id() {
  _has_bits_[0] |= 0x00000020u;
}
void PolicyData::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void PolicyData::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_id();
}
const ::std::string& PolicyData::device_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.device_id)
  return device_id_.GetNoArena();
}
void PolicyData::set_device_id(const ::std::string& value) {
  set_has_device_id();
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.device_id)
}
#if LANG_CXX11
void PolicyData::set_device_id(::std::string&& value) {
  set_has_device_id();
  device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.device_id)
}
#endif
void PolicyData::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_id();
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.device_id)
}
void PolicyData::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.device_id)
}
::std::string* PolicyData::mutable_device_id() {
  set_has_device_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_device_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.device_id)
  clear_has_device_id();
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    set_has_device_id();
  } else {
    clear_has_device_id();
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.device_id)
}

// optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
bool PolicyData::has_state() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PolicyData::set_has_state() {
  _has_bits_[0] |= 0x00200000u;
}
void PolicyData::clear_has_state() {
  _has_bits_[0] &= ~0x00200000u;
}
void PolicyData::clear_state() {
  state_ = 0;
  clear_has_state();
}
::enterprise_management::PolicyData_AssociationState PolicyData::state() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.state)
  return static_cast< ::enterprise_management::PolicyData_AssociationState >(state_);
}
void PolicyData::set_state(::enterprise_management::PolicyData_AssociationState value) {
  assert(::enterprise_management::PolicyData_AssociationState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.state)
}

// optional string settings_entity_id = 11;
bool PolicyData::has_settings_entity_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PolicyData::set_has_settings_entity_id() {
  _has_bits_[0] |= 0x00000040u;
}
void PolicyData::clear_has_settings_entity_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void PolicyData::clear_settings_entity_id() {
  settings_entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_settings_entity_id();
}
const ::std::string& PolicyData::settings_entity_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.settings_entity_id)
  return settings_entity_id_.GetNoArena();
}
void PolicyData::set_settings_entity_id(const ::std::string& value) {
  set_has_settings_entity_id();
  settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.settings_entity_id)
}
#if LANG_CXX11
void PolicyData::set_settings_entity_id(::std::string&& value) {
  set_has_settings_entity_id();
  settings_entity_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.settings_entity_id)
}
#endif
void PolicyData::set_settings_entity_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_settings_entity_id();
  settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.settings_entity_id)
}
void PolicyData::set_settings_entity_id(const char* value, size_t size) {
  set_has_settings_entity_id();
  settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.settings_entity_id)
}
::std::string* PolicyData::mutable_settings_entity_id() {
  set_has_settings_entity_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.settings_entity_id)
  return settings_entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_settings_entity_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.settings_entity_id)
  clear_has_settings_entity_id();
  return settings_entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_settings_entity_id(::std::string* settings_entity_id) {
  if (settings_entity_id != NULL) {
    set_has_settings_entity_id();
  } else {
    clear_has_settings_entity_id();
  }
  settings_entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settings_entity_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.settings_entity_id)
}

// optional string service_account_identity = 12;
bool PolicyData::has_service_account_identity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PolicyData::set_has_service_account_identity() {
  _has_bits_[0] |= 0x00000080u;
}
void PolicyData::clear_has_service_account_identity() {
  _has_bits_[0] &= ~0x00000080u;
}
void PolicyData::clear_service_account_identity() {
  service_account_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_account_identity();
}
const ::std::string& PolicyData::service_account_identity() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.service_account_identity)
  return service_account_identity_.GetNoArena();
}
void PolicyData::set_service_account_identity(const ::std::string& value) {
  set_has_service_account_identity();
  service_account_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.service_account_identity)
}
#if LANG_CXX11
void PolicyData::set_service_account_identity(::std::string&& value) {
  set_has_service_account_identity();
  service_account_identity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.service_account_identity)
}
#endif
void PolicyData::set_service_account_identity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service_account_identity();
  service_account_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.service_account_identity)
}
void PolicyData::set_service_account_identity(const char* value, size_t size) {
  set_has_service_account_identity();
  service_account_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.service_account_identity)
}
::std::string* PolicyData::mutable_service_account_identity() {
  set_has_service_account_identity();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.service_account_identity)
  return service_account_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_service_account_identity() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.service_account_identity)
  clear_has_service_account_identity();
  return service_account_identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_service_account_identity(::std::string* service_account_identity) {
  if (service_account_identity != NULL) {
    set_has_service_account_identity();
  } else {
    clear_has_service_account_identity();
  }
  service_account_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_account_identity);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.service_account_identity)
}

// optional int32 invalidation_source = 13;
bool PolicyData::has_invalidation_source() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PolicyData::set_has_invalidation_source() {
  _has_bits_[0] |= 0x00400000u;
}
void PolicyData::clear_has_invalidation_source() {
  _has_bits_[0] &= ~0x00400000u;
}
void PolicyData::clear_invalidation_source() {
  invalidation_source_ = 0;
  clear_has_invalidation_source();
}
::google::protobuf::int32 PolicyData::invalidation_source() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.invalidation_source)
  return invalidation_source_;
}
void PolicyData::set_invalidation_source(::google::protobuf::int32 value) {
  set_has_invalidation_source();
  invalidation_source_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.invalidation_source)
}

// optional bytes invalidation_name = 14;
bool PolicyData::has_invalidation_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PolicyData::set_has_invalidation_name() {
  _has_bits_[0] |= 0x00000100u;
}
void PolicyData::clear_has_invalidation_name() {
  _has_bits_[0] &= ~0x00000100u;
}
void PolicyData::clear_invalidation_name() {
  invalidation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invalidation_name();
}
const ::std::string& PolicyData::invalidation_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.invalidation_name)
  return invalidation_name_.GetNoArena();
}
void PolicyData::set_invalidation_name(const ::std::string& value) {
  set_has_invalidation_name();
  invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.invalidation_name)
}
#if LANG_CXX11
void PolicyData::set_invalidation_name(::std::string&& value) {
  set_has_invalidation_name();
  invalidation_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.invalidation_name)
}
#endif
void PolicyData::set_invalidation_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invalidation_name();
  invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.invalidation_name)
}
void PolicyData::set_invalidation_name(const void* value, size_t size) {
  set_has_invalidation_name();
  invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.invalidation_name)
}
::std::string* PolicyData::mutable_invalidation_name() {
  set_has_invalidation_name();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.invalidation_name)
  return invalidation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_invalidation_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.invalidation_name)
  clear_has_invalidation_name();
  return invalidation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_invalidation_name(::std::string* invalidation_name) {
  if (invalidation_name != NULL) {
    set_has_invalidation_name();
  } else {
    clear_has_invalidation_name();
  }
  invalidation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invalidation_name);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.invalidation_name)
}

// optional string policy_token = 15;
bool PolicyData::has_policy_token() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PolicyData::set_has_policy_token() {
  _has_bits_[0] |= 0x00000200u;
}
void PolicyData::clear_has_policy_token() {
  _has_bits_[0] &= ~0x00000200u;
}
void PolicyData::clear_policy_token() {
  policy_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_token();
}
const ::std::string& PolicyData::policy_token() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_token)
  return policy_token_.GetNoArena();
}
void PolicyData::set_policy_token(const ::std::string& value) {
  set_has_policy_token();
  policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_token)
}
#if LANG_CXX11
void PolicyData::set_policy_token(::std::string&& value) {
  set_has_policy_token();
  policy_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.policy_token)
}
#endif
void PolicyData::set_policy_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_token();
  policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_token)
}
void PolicyData::set_policy_token(const char* value, size_t size) {
  set_has_policy_token();
  policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_token)
}
::std::string* PolicyData::mutable_policy_token() {
  set_has_policy_token();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_token)
  return policy_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_policy_token() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_token)
  clear_has_policy_token();
  return policy_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_policy_token(::std::string* policy_token) {
  if (policy_token != NULL) {
    set_has_policy_token();
  } else {
    clear_has_policy_token();
  }
  policy_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_token)
}

// optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
bool PolicyData::has_management_mode() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PolicyData::set_has_management_mode() {
  _has_bits_[0] |= 0x00800000u;
}
void PolicyData::clear_has_management_mode() {
  _has_bits_[0] &= ~0x00800000u;
}
void PolicyData::clear_management_mode() {
  management_mode_ = 0;
  clear_has_management_mode();
}
::enterprise_management::PolicyData_ManagementMode PolicyData::management_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.management_mode)
  return static_cast< ::enterprise_management::PolicyData_ManagementMode >(management_mode_);
}
void PolicyData::set_management_mode(::enterprise_management::PolicyData_ManagementMode value) {
  assert(::enterprise_management::PolicyData_ManagementMode_IsValid(value));
  set_has_management_mode();
  management_mode_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.management_mode)
}

// optional .enterprise_management.DeviceState device_state = 17;
bool PolicyData::has_device_state() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PolicyData::set_has_device_state() {
  _has_bits_[0] |= 0x00040000u;
}
void PolicyData::clear_has_device_state() {
  _has_bits_[0] &= ~0x00040000u;
}
void PolicyData::clear_device_state() {
  if (device_state_ != NULL) device_state_->::enterprise_management::DeviceState::Clear();
  clear_has_device_state();
}
const ::enterprise_management::DeviceState& PolicyData::device_state() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.device_state)
  return device_state_ != NULL ? *device_state_
                         : *::enterprise_management::DeviceState::internal_default_instance();
}
::enterprise_management::DeviceState* PolicyData::mutable_device_state() {
  set_has_device_state();
  if (device_state_ == NULL) {
    device_state_ = new ::enterprise_management::DeviceState;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.device_state)
  return device_state_;
}
::enterprise_management::DeviceState* PolicyData::release_device_state() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.device_state)
  clear_has_device_state();
  ::enterprise_management::DeviceState* temp = device_state_;
  device_state_ = NULL;
  return temp;
}
void PolicyData::set_allocated_device_state(::enterprise_management::DeviceState* device_state) {
  delete device_state_;
  device_state_ = device_state;
  if (device_state) {
    set_has_device_state();
  } else {
    clear_has_device_state();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.device_state)
}

// optional int32 command_invalidation_source = 18;
bool PolicyData::has_command_invalidation_source() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void PolicyData::set_has_command_invalidation_source() {
  _has_bits_[0] |= 0x01000000u;
}
void PolicyData::clear_has_command_invalidation_source() {
  _has_bits_[0] &= ~0x01000000u;
}
void PolicyData::clear_command_invalidation_source() {
  command_invalidation_source_ = 0;
  clear_has_command_invalidation_source();
}
::google::protobuf::int32 PolicyData::command_invalidation_source() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.command_invalidation_source)
  return command_invalidation_source_;
}
void PolicyData::set_command_invalidation_source(::google::protobuf::int32 value) {
  set_has_command_invalidation_source();
  command_invalidation_source_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.command_invalidation_source)
}

// optional bytes command_invalidation_name = 19;
bool PolicyData::has_command_invalidation_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PolicyData::set_has_command_invalidation_name() {
  _has_bits_[0] |= 0x00000400u;
}
void PolicyData::clear_has_command_invalidation_name() {
  _has_bits_[0] &= ~0x00000400u;
}
void PolicyData::clear_command_invalidation_name() {
  command_invalidation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command_invalidation_name();
}
const ::std::string& PolicyData::command_invalidation_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.command_invalidation_name)
  return command_invalidation_name_.GetNoArena();
}
void PolicyData::set_command_invalidation_name(const ::std::string& value) {
  set_has_command_invalidation_name();
  command_invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.command_invalidation_name)
}
#if LANG_CXX11
void PolicyData::set_command_invalidation_name(::std::string&& value) {
  set_has_command_invalidation_name();
  command_invalidation_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.command_invalidation_name)
}
#endif
void PolicyData::set_command_invalidation_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_command_invalidation_name();
  command_invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.command_invalidation_name)
}
void PolicyData::set_command_invalidation_name(const void* value, size_t size) {
  set_has_command_invalidation_name();
  command_invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.command_invalidation_name)
}
::std::string* PolicyData::mutable_command_invalidation_name() {
  set_has_command_invalidation_name();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.command_invalidation_name)
  return command_invalidation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_command_invalidation_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.command_invalidation_name)
  clear_has_command_invalidation_name();
  return command_invalidation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_command_invalidation_name(::std::string* command_invalidation_name) {
  if (command_invalidation_name != NULL) {
    set_has_command_invalidation_name();
  } else {
    clear_has_command_invalidation_name();
  }
  command_invalidation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_invalidation_name);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.command_invalidation_name)
}

// optional string annotated_location = 20;
bool PolicyData::has_annotated_location() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PolicyData::set_has_annotated_location() {
  _has_bits_[0] |= 0x00000800u;
}
void PolicyData::clear_has_annotated_location() {
  _has_bits_[0] &= ~0x00000800u;
}
void PolicyData::clear_annotated_location() {
  annotated_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_annotated_location();
}
const ::std::string& PolicyData::annotated_location() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.annotated_location)
  return annotated_location_.GetNoArena();
}
void PolicyData::set_annotated_location(const ::std::string& value) {
  set_has_annotated_location();
  annotated_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.annotated_location)
}
#if LANG_CXX11
void PolicyData::set_annotated_location(::std::string&& value) {
  set_has_annotated_location();
  annotated_location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.annotated_location)
}
#endif
void PolicyData::set_annotated_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_annotated_location();
  annotated_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.annotated_location)
}
void PolicyData::set_annotated_location(const char* value, size_t size) {
  set_has_annotated_location();
  annotated_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.annotated_location)
}
::std::string* PolicyData::mutable_annotated_location() {
  set_has_annotated_location();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.annotated_location)
  return annotated_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_annotated_location() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.annotated_location)
  clear_has_annotated_location();
  return annotated_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_annotated_location(::std::string* annotated_location) {
  if (annotated_location != NULL) {
    set_has_annotated_location();
  } else {
    clear_has_annotated_location();
  }
  annotated_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotated_location);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.annotated_location)
}

// optional string annotated_asset_id = 21;
bool PolicyData::has_annotated_asset_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PolicyData::set_has_annotated_asset_id() {
  _has_bits_[0] |= 0x00001000u;
}
void PolicyData::clear_has_annotated_asset_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void PolicyData::clear_annotated_asset_id() {
  annotated_asset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_annotated_asset_id();
}
const ::std::string& PolicyData::annotated_asset_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.annotated_asset_id)
  return annotated_asset_id_.GetNoArena();
}
void PolicyData::set_annotated_asset_id(const ::std::string& value) {
  set_has_annotated_asset_id();
  annotated_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.annotated_asset_id)
}
#if LANG_CXX11
void PolicyData::set_annotated_asset_id(::std::string&& value) {
  set_has_annotated_asset_id();
  annotated_asset_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.annotated_asset_id)
}
#endif
void PolicyData::set_annotated_asset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_annotated_asset_id();
  annotated_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.annotated_asset_id)
}
void PolicyData::set_annotated_asset_id(const char* value, size_t size) {
  set_has_annotated_asset_id();
  annotated_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.annotated_asset_id)
}
::std::string* PolicyData::mutable_annotated_asset_id() {
  set_has_annotated_asset_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.annotated_asset_id)
  return annotated_asset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_annotated_asset_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.annotated_asset_id)
  clear_has_annotated_asset_id();
  return annotated_asset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_annotated_asset_id(::std::string* annotated_asset_id) {
  if (annotated_asset_id != NULL) {
    set_has_annotated_asset_id();
  } else {
    clear_has_annotated_asset_id();
  }
  annotated_asset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotated_asset_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.annotated_asset_id)
}

// optional string directory_api_id = 22;
bool PolicyData::has_directory_api_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PolicyData::set_has_directory_api_id() {
  _has_bits_[0] |= 0x00002000u;
}
void PolicyData::clear_has_directory_api_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void PolicyData::clear_directory_api_id() {
  directory_api_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_directory_api_id();
}
const ::std::string& PolicyData::directory_api_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.directory_api_id)
  return directory_api_id_.GetNoArena();
}
void PolicyData::set_directory_api_id(const ::std::string& value) {
  set_has_directory_api_id();
  directory_api_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.directory_api_id)
}
#if LANG_CXX11
void PolicyData::set_directory_api_id(::std::string&& value) {
  set_has_directory_api_id();
  directory_api_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.directory_api_id)
}
#endif
void PolicyData::set_directory_api_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_directory_api_id();
  directory_api_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.directory_api_id)
}
void PolicyData::set_directory_api_id(const char* value, size_t size) {
  set_has_directory_api_id();
  directory_api_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.directory_api_id)
}
::std::string* PolicyData::mutable_directory_api_id() {
  set_has_directory_api_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.directory_api_id)
  return directory_api_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_directory_api_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.directory_api_id)
  clear_has_directory_api_id();
  return directory_api_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_directory_api_id(::std::string* directory_api_id) {
  if (directory_api_id != NULL) {
    set_has_directory_api_id();
  } else {
    clear_has_directory_api_id();
  }
  directory_api_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory_api_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.directory_api_id)
}

// repeated string device_affiliation_ids = 23;
int PolicyData::device_affiliation_ids_size() const {
  return device_affiliation_ids_.size();
}
void PolicyData::clear_device_affiliation_ids() {
  device_affiliation_ids_.Clear();
}
const ::std::string& PolicyData::device_affiliation_ids(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.device_affiliation_ids)
  return device_affiliation_ids_.Get(index);
}
::std::string* PolicyData::mutable_device_affiliation_ids(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.device_affiliation_ids)
  return device_affiliation_ids_.Mutable(index);
}
void PolicyData::set_device_affiliation_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.device_affiliation_ids)
  device_affiliation_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PolicyData::set_device_affiliation_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.device_affiliation_ids)
  device_affiliation_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void PolicyData::set_device_affiliation_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  device_affiliation_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.device_affiliation_ids)
}
void PolicyData::set_device_affiliation_ids(int index, const char* value, size_t size) {
  device_affiliation_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.device_affiliation_ids)
}
::std::string* PolicyData::add_device_affiliation_ids() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.PolicyData.device_affiliation_ids)
  return device_affiliation_ids_.Add();
}
void PolicyData::add_device_affiliation_ids(const ::std::string& value) {
  device_affiliation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.PolicyData.device_affiliation_ids)
}
#if LANG_CXX11
void PolicyData::add_device_affiliation_ids(::std::string&& value) {
  device_affiliation_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.PolicyData.device_affiliation_ids)
}
#endif
void PolicyData::add_device_affiliation_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  device_affiliation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.PolicyData.device_affiliation_ids)
}
void PolicyData::add_device_affiliation_ids(const char* value, size_t size) {
  device_affiliation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.PolicyData.device_affiliation_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PolicyData::device_affiliation_ids() const {
  // @@protoc_insertion_point(field_list:enterprise_management.PolicyData.device_affiliation_ids)
  return device_affiliation_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PolicyData::mutable_device_affiliation_ids() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.PolicyData.device_affiliation_ids)
  return &device_affiliation_ids_;
}

// repeated string user_affiliation_ids = 24;
int PolicyData::user_affiliation_ids_size() const {
  return user_affiliation_ids_.size();
}
void PolicyData::clear_user_affiliation_ids() {
  user_affiliation_ids_.Clear();
}
const ::std::string& PolicyData::user_affiliation_ids(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.user_affiliation_ids)
  return user_affiliation_ids_.Get(index);
}
::std::string* PolicyData::mutable_user_affiliation_ids(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.user_affiliation_ids)
  return user_affiliation_ids_.Mutable(index);
}
void PolicyData::set_user_affiliation_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.user_affiliation_ids)
  user_affiliation_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PolicyData::set_user_affiliation_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.user_affiliation_ids)
  user_affiliation_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void PolicyData::set_user_affiliation_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  user_affiliation_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.user_affiliation_ids)
}
void PolicyData::set_user_affiliation_ids(int index, const char* value, size_t size) {
  user_affiliation_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.user_affiliation_ids)
}
::std::string* PolicyData::add_user_affiliation_ids() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.PolicyData.user_affiliation_ids)
  return user_affiliation_ids_.Add();
}
void PolicyData::add_user_affiliation_ids(const ::std::string& value) {
  user_affiliation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.PolicyData.user_affiliation_ids)
}
#if LANG_CXX11
void PolicyData::add_user_affiliation_ids(::std::string&& value) {
  user_affiliation_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.PolicyData.user_affiliation_ids)
}
#endif
void PolicyData::add_user_affiliation_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  user_affiliation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.PolicyData.user_affiliation_ids)
}
void PolicyData::add_user_affiliation_ids(const char* value, size_t size) {
  user_affiliation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.PolicyData.user_affiliation_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PolicyData::user_affiliation_ids() const {
  // @@protoc_insertion_point(field_list:enterprise_management.PolicyData.user_affiliation_ids)
  return user_affiliation_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PolicyData::mutable_user_affiliation_ids() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.PolicyData.user_affiliation_ids)
  return &user_affiliation_ids_;
}

// optional string display_domain = 25;
bool PolicyData::has_display_domain() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PolicyData::set_has_display_domain() {
  _has_bits_[0] |= 0x00004000u;
}
void PolicyData::clear_has_display_domain() {
  _has_bits_[0] &= ~0x00004000u;
}
void PolicyData::clear_display_domain() {
  display_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_domain();
}
const ::std::string& PolicyData::display_domain() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.display_domain)
  return display_domain_.GetNoArena();
}
void PolicyData::set_display_domain(const ::std::string& value) {
  set_has_display_domain();
  display_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.display_domain)
}
#if LANG_CXX11
void PolicyData::set_display_domain(::std::string&& value) {
  set_has_display_domain();
  display_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.display_domain)
}
#endif
void PolicyData::set_display_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_domain();
  display_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.display_domain)
}
void PolicyData::set_display_domain(const char* value, size_t size) {
  set_has_display_domain();
  display_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.display_domain)
}
::std::string* PolicyData::mutable_display_domain() {
  set_has_display_domain();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.display_domain)
  return display_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_display_domain() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.display_domain)
  clear_has_display_domain();
  return display_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_display_domain(::std::string* display_domain) {
  if (display_domain != NULL) {
    set_has_display_domain();
  } else {
    clear_has_display_domain();
  }
  display_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_domain);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.display_domain)
}

// optional string policy_invalidation_topic = 26;
bool PolicyData::has_policy_invalidation_topic() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PolicyData::set_has_policy_invalidation_topic() {
  _has_bits_[0] |= 0x00008000u;
}
void PolicyData::clear_has_policy_invalidation_topic() {
  _has_bits_[0] &= ~0x00008000u;
}
void PolicyData::clear_policy_invalidation_topic() {
  policy_invalidation_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_invalidation_topic();
}
const ::std::string& PolicyData::policy_invalidation_topic() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_invalidation_topic)
  return policy_invalidation_topic_.GetNoArena();
}
void PolicyData::set_policy_invalidation_topic(const ::std::string& value) {
  set_has_policy_invalidation_topic();
  policy_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_invalidation_topic)
}
#if LANG_CXX11
void PolicyData::set_policy_invalidation_topic(::std::string&& value) {
  set_has_policy_invalidation_topic();
  policy_invalidation_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.policy_invalidation_topic)
}
#endif
void PolicyData::set_policy_invalidation_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_invalidation_topic();
  policy_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_invalidation_topic)
}
void PolicyData::set_policy_invalidation_topic(const char* value, size_t size) {
  set_has_policy_invalidation_topic();
  policy_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_invalidation_topic)
}
::std::string* PolicyData::mutable_policy_invalidation_topic() {
  set_has_policy_invalidation_topic();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_invalidation_topic)
  return policy_invalidation_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_policy_invalidation_topic() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_invalidation_topic)
  clear_has_policy_invalidation_topic();
  return policy_invalidation_topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_policy_invalidation_topic(::std::string* policy_invalidation_topic) {
  if (policy_invalidation_topic != NULL) {
    set_has_policy_invalidation_topic();
  } else {
    clear_has_policy_invalidation_topic();
  }
  policy_invalidation_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_invalidation_topic);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_invalidation_topic)
}

// optional string command_invalidation_topic = 27;
bool PolicyData::has_command_invalidation_topic() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PolicyData::set_has_command_invalidation_topic() {
  _has_bits_[0] |= 0x00010000u;
}
void PolicyData::clear_has_command_invalidation_topic() {
  _has_bits_[0] &= ~0x00010000u;
}
void PolicyData::clear_command_invalidation_topic() {
  command_invalidation_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command_invalidation_topic();
}
const ::std::string& PolicyData::command_invalidation_topic() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.command_invalidation_topic)
  return command_invalidation_topic_.GetNoArena();
}
void PolicyData::set_command_invalidation_topic(const ::std::string& value) {
  set_has_command_invalidation_topic();
  command_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.command_invalidation_topic)
}
#if LANG_CXX11
void PolicyData::set_command_invalidation_topic(::std::string&& value) {
  set_has_command_invalidation_topic();
  command_invalidation_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.command_invalidation_topic)
}
#endif
void PolicyData::set_command_invalidation_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_command_invalidation_topic();
  command_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.command_invalidation_topic)
}
void PolicyData::set_command_invalidation_topic(const char* value, size_t size) {
  set_has_command_invalidation_topic();
  command_invalidation_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.command_invalidation_topic)
}
::std::string* PolicyData::mutable_command_invalidation_topic() {
  set_has_command_invalidation_topic();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.command_invalidation_topic)
  return command_invalidation_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_command_invalidation_topic() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.command_invalidation_topic)
  clear_has_command_invalidation_topic();
  return command_invalidation_topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_command_invalidation_topic(::std::string* command_invalidation_topic) {
  if (command_invalidation_topic != NULL) {
    set_has_command_invalidation_topic();
  } else {
    clear_has_command_invalidation_topic();
  }
  command_invalidation_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_invalidation_topic);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.command_invalidation_topic)
}

// optional bool enrollment_id_needed = 28;
bool PolicyData::has_enrollment_id_needed() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void PolicyData::set_has_enrollment_id_needed() {
  _has_bits_[0] |= 0x02000000u;
}
void PolicyData::clear_has_enrollment_id_needed() {
  _has_bits_[0] &= ~0x02000000u;
}
void PolicyData::clear_enrollment_id_needed() {
  enrollment_id_needed_ = false;
  clear_has_enrollment_id_needed();
}
bool PolicyData::enrollment_id_needed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.enrollment_id_needed)
  return enrollment_id_needed_;
}
void PolicyData::set_enrollment_id_needed(bool value) {
  set_has_enrollment_id_needed();
  enrollment_id_needed_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.enrollment_id_needed)
}

// optional string gaia_id = 29;
bool PolicyData::has_gaia_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PolicyData::set_has_gaia_id() {
  _has_bits_[0] |= 0x00020000u;
}
void PolicyData::clear_has_gaia_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void PolicyData::clear_gaia_id() {
  gaia_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gaia_id();
}
const ::std::string& PolicyData::gaia_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.gaia_id)
  return gaia_id_.GetNoArena();
}
void PolicyData::set_gaia_id(const ::std::string& value) {
  set_has_gaia_id();
  gaia_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.gaia_id)
}
#if LANG_CXX11
void PolicyData::set_gaia_id(::std::string&& value) {
  set_has_gaia_id();
  gaia_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyData.gaia_id)
}
#endif
void PolicyData::set_gaia_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gaia_id();
  gaia_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.gaia_id)
}
void PolicyData::set_gaia_id(const char* value, size_t size) {
  set_has_gaia_id();
  gaia_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.gaia_id)
}
::std::string* PolicyData::mutable_gaia_id() {
  set_has_gaia_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.gaia_id)
  return gaia_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_gaia_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.gaia_id)
  clear_has_gaia_id();
  return gaia_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_gaia_id(::std::string* gaia_id) {
  if (gaia_id != NULL) {
    set_has_gaia_id();
  } else {
    clear_has_gaia_id();
  }
  gaia_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gaia_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.gaia_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyFetchResponse::kErrorCodeFieldNumber;
const int PolicyFetchResponse::kErrorMessageFieldNumber;
const int PolicyFetchResponse::kPolicyDataFieldNumber;
const int PolicyFetchResponse::kPolicyDataSignatureFieldNumber;
const int PolicyFetchResponse::kNewPublicKeyFieldNumber;
const int PolicyFetchResponse::kNewPublicKeySignatureFieldNumber;
const int PolicyFetchResponse::kNewPublicKeyVerificationSignatureDeprecatedFieldNumber;
const int PolicyFetchResponse::kNewPublicKeyVerificationDataFieldNumber;
const int PolicyFetchResponse::kNewPublicKeyVerificationDataSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyFetchResponse::PolicyFetchResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyFetchResponse)
}
PolicyFetchResponse::PolicyFetchResponse(const PolicyFetchResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  policy_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_data()) {
    policy_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_data_);
  }
  policy_data_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_data_signature()) {
    policy_data_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_data_signature_);
  }
  new_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key()) {
    new_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
  }
  new_public_key_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key_signature()) {
    new_public_key_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_signature_);
  }
  new_public_key_verification_signature_deprecated_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key_verification_signature_deprecated()) {
    new_public_key_verification_signature_deprecated_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_signature_deprecated_);
  }
  new_public_key_verification_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key_verification_data()) {
    new_public_key_verification_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_data_);
  }
  new_public_key_verification_data_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key_verification_data_signature()) {
    new_public_key_verification_data_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_data_signature_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyFetchResponse)
}

void PolicyFetchResponse::SharedCtor() {
  _cached_size_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_data_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_signature_deprecated_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_data_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

PolicyFetchResponse::~PolicyFetchResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyFetchResponse)
  SharedDtor();
}

void PolicyFetchResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_data_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_signature_deprecated_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_verification_data_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PolicyFetchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolicyFetchResponse& PolicyFetchResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

PolicyFetchResponse* PolicyFetchResponse::New(::google::protobuf::Arena* arena) const {
  PolicyFetchResponse* n = new PolicyFetchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolicyFetchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyFetchResponse)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_error_message()) {
      GOOGLE_DCHECK(!error_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_message_.UnsafeRawStringPointer())->clear();
    }
    if (has_policy_data()) {
      GOOGLE_DCHECK(!policy_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_policy_data_signature()) {
      GOOGLE_DCHECK(!policy_data_signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_data_signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_new_public_key()) {
      GOOGLE_DCHECK(!new_public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_public_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_new_public_key_signature()) {
      GOOGLE_DCHECK(!new_public_key_signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_public_key_signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_new_public_key_verification_signature_deprecated()) {
      GOOGLE_DCHECK(!new_public_key_verification_signature_deprecated_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_public_key_verification_signature_deprecated_.UnsafeRawStringPointer())->clear();
    }
    if (has_new_public_key_verification_data()) {
      GOOGLE_DCHECK(!new_public_key_verification_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_public_key_verification_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_new_public_key_verification_data_signature()) {
      GOOGLE_DCHECK(!new_public_key_verification_data_signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_public_key_verification_data_signature_.UnsafeRawStringPointer())->clear();
    }
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PolicyFetchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyFetchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes policy_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_policy_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes policy_data_signature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_policy_data_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes new_public_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes new_public_key_signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key_verification_signature_deprecated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes new_public_key_verification_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key_verification_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes new_public_key_verification_data_signature = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key_verification_data_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyFetchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyFetchResponse)
  return false;
#undef DO_
}

void PolicyFetchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyFetchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // optional bytes policy_data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->policy_data(), output);
  }

  // optional bytes policy_data_signature = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->policy_data_signature(), output);
  }

  // optional bytes new_public_key = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->new_public_key(), output);
  }

  // optional bytes new_public_key_signature = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->new_public_key_signature(), output);
  }

  // optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->new_public_key_verification_signature_deprecated(), output);
  }

  // optional bytes new_public_key_verification_data = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->new_public_key_verification_data(), output);
  }

  // optional bytes new_public_key_verification_data_signature = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->new_public_key_verification_data_signature(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyFetchResponse)
}

size_t PolicyFetchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyFetchResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional bytes policy_data = 3;
    if (has_policy_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->policy_data());
    }

    // optional bytes policy_data_signature = 4;
    if (has_policy_data_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->policy_data_signature());
    }

    // optional bytes new_public_key = 5;
    if (has_new_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_public_key());
    }

    // optional bytes new_public_key_signature = 6;
    if (has_new_public_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_public_key_signature());
    }

    // optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
    if (has_new_public_key_verification_signature_deprecated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_public_key_verification_signature_deprecated());
    }

    // optional bytes new_public_key_verification_data = 8;
    if (has_new_public_key_verification_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_public_key_verification_data());
    }

    // optional bytes new_public_key_verification_data_signature = 9;
    if (has_new_public_key_verification_data_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_public_key_verification_data_signature());
    }

  }
  // optional int32 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyFetchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PolicyFetchResponse*>(&from));
}

void PolicyFetchResponse::MergeFrom(const PolicyFetchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyFetchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_policy_data();
      policy_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_policy_data_signature();
      policy_data_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_data_signature_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_new_public_key();
      new_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_new_public_key_signature();
      new_public_key_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_signature_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_new_public_key_verification_signature_deprecated();
      new_public_key_verification_signature_deprecated_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_signature_deprecated_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_new_public_key_verification_data();
      new_public_key_verification_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_data_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_new_public_key_verification_data_signature();
      new_public_key_verification_data_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_data_signature_);
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_error_code(from.error_code());
  }
}

void PolicyFetchResponse::CopyFrom(const PolicyFetchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyFetchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyFetchResponse::IsInitialized() const {
  return true;
}

void PolicyFetchResponse::Swap(PolicyFetchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyFetchResponse::InternalSwap(PolicyFetchResponse* other) {
  error_message_.Swap(&other->error_message_);
  policy_data_.Swap(&other->policy_data_);
  policy_data_signature_.Swap(&other->policy_data_signature_);
  new_public_key_.Swap(&other->new_public_key_);
  new_public_key_signature_.Swap(&other->new_public_key_signature_);
  new_public_key_verification_signature_deprecated_.Swap(&other->new_public_key_verification_signature_deprecated_);
  new_public_key_verification_data_.Swap(&other->new_public_key_verification_data_);
  new_public_key_verification_data_signature_.Swap(&other->new_public_key_verification_data_signature_);
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PolicyFetchResponse::GetTypeName() const {
  return "enterprise_management.PolicyFetchResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyFetchResponse

// optional int32 error_code = 1;
bool PolicyFetchResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PolicyFetchResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000100u;
}
void PolicyFetchResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000100u;
}
void PolicyFetchResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::google::protobuf::int32 PolicyFetchResponse::error_code() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.error_code)
  return error_code_;
}
void PolicyFetchResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.error_code)
}

// optional string error_message = 2;
bool PolicyFetchResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolicyFetchResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
void PolicyFetchResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void PolicyFetchResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& PolicyFetchResponse::error_message() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.error_message)
  return error_message_.GetNoArena();
}
void PolicyFetchResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.error_message)
}
#if LANG_CXX11
void PolicyFetchResponse::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.error_message)
}
#endif
void PolicyFetchResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.error_message)
}
void PolicyFetchResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.error_message)
}
::std::string* PolicyFetchResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.error_message)
}

// optional bytes policy_data = 3;
bool PolicyFetchResponse::has_policy_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolicyFetchResponse::set_has_policy_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PolicyFetchResponse::clear_has_policy_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PolicyFetchResponse::clear_policy_data() {
  policy_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_data();
}
const ::std::string& PolicyFetchResponse::policy_data() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.policy_data)
  return policy_data_.GetNoArena();
}
void PolicyFetchResponse::set_policy_data(const ::std::string& value) {
  set_has_policy_data();
  policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.policy_data)
}
#if LANG_CXX11
void PolicyFetchResponse::set_policy_data(::std::string&& value) {
  set_has_policy_data();
  policy_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.policy_data)
}
#endif
void PolicyFetchResponse::set_policy_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_data();
  policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.policy_data)
}
void PolicyFetchResponse::set_policy_data(const void* value, size_t size) {
  set_has_policy_data();
  policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.policy_data)
}
::std::string* PolicyFetchResponse::mutable_policy_data() {
  set_has_policy_data();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.policy_data)
  return policy_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_policy_data() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.policy_data)
  clear_has_policy_data();
  return policy_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_policy_data(::std::string* policy_data) {
  if (policy_data != NULL) {
    set_has_policy_data();
  } else {
    clear_has_policy_data();
  }
  policy_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_data);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.policy_data)
}

// optional bytes policy_data_signature = 4;
bool PolicyFetchResponse::has_policy_data_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolicyFetchResponse::set_has_policy_data_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void PolicyFetchResponse::clear_has_policy_data_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void PolicyFetchResponse::clear_policy_data_signature() {
  policy_data_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_data_signature();
}
const ::std::string& PolicyFetchResponse::policy_data_signature() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.policy_data_signature)
  return policy_data_signature_.GetNoArena();
}
void PolicyFetchResponse::set_policy_data_signature(const ::std::string& value) {
  set_has_policy_data_signature();
  policy_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
#if LANG_CXX11
void PolicyFetchResponse::set_policy_data_signature(::std::string&& value) {
  set_has_policy_data_signature();
  policy_data_signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
#endif
void PolicyFetchResponse::set_policy_data_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_data_signature();
  policy_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
void PolicyFetchResponse::set_policy_data_signature(const void* value, size_t size) {
  set_has_policy_data_signature();
  policy_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
::std::string* PolicyFetchResponse::mutable_policy_data_signature() {
  set_has_policy_data_signature();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.policy_data_signature)
  return policy_data_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_policy_data_signature() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.policy_data_signature)
  clear_has_policy_data_signature();
  return policy_data_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_policy_data_signature(::std::string* policy_data_signature) {
  if (policy_data_signature != NULL) {
    set_has_policy_data_signature();
  } else {
    clear_has_policy_data_signature();
  }
  policy_data_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_data_signature);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.policy_data_signature)
}

// optional bytes new_public_key = 5;
bool PolicyFetchResponse::has_new_public_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PolicyFetchResponse::set_has_new_public_key() {
  _has_bits_[0] |= 0x00000008u;
}
void PolicyFetchResponse::clear_has_new_public_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void PolicyFetchResponse::clear_new_public_key() {
  new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_public_key();
}
const ::std::string& PolicyFetchResponse::new_public_key() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key)
  return new_public_key_.GetNoArena();
}
void PolicyFetchResponse::set_new_public_key(const ::std::string& value) {
  set_has_new_public_key();
  new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key)
}
#if LANG_CXX11
void PolicyFetchResponse::set_new_public_key(::std::string&& value) {
  set_has_new_public_key();
  new_public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.new_public_key)
}
#endif
void PolicyFetchResponse::set_new_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_public_key();
  new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key)
}
void PolicyFetchResponse::set_new_public_key(const void* value, size_t size) {
  set_has_new_public_key();
  new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key)
}
::std::string* PolicyFetchResponse::mutable_new_public_key() {
  set_has_new_public_key();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key)
  return new_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_new_public_key() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key)
  clear_has_new_public_key();
  return new_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_new_public_key(::std::string* new_public_key) {
  if (new_public_key != NULL) {
    set_has_new_public_key();
  } else {
    clear_has_new_public_key();
  }
  new_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key)
}

// optional bytes new_public_key_signature = 6;
bool PolicyFetchResponse::has_new_public_key_signature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PolicyFetchResponse::set_has_new_public_key_signature() {
  _has_bits_[0] |= 0x00000010u;
}
void PolicyFetchResponse::clear_has_new_public_key_signature() {
  _has_bits_[0] &= ~0x00000010u;
}
void PolicyFetchResponse::clear_new_public_key_signature() {
  new_public_key_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_public_key_signature();
}
const ::std::string& PolicyFetchResponse::new_public_key_signature() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_signature)
  return new_public_key_signature_.GetNoArena();
}
void PolicyFetchResponse::set_new_public_key_signature(const ::std::string& value) {
  set_has_new_public_key_signature();
  new_public_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
#if LANG_CXX11
void PolicyFetchResponse::set_new_public_key_signature(::std::string&& value) {
  set_has_new_public_key_signature();
  new_public_key_signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
#endif
void PolicyFetchResponse::set_new_public_key_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_public_key_signature();
  new_public_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
void PolicyFetchResponse::set_new_public_key_signature(const void* value, size_t size) {
  set_has_new_public_key_signature();
  new_public_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
::std::string* PolicyFetchResponse::mutable_new_public_key_signature() {
  set_has_new_public_key_signature();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_signature)
  return new_public_key_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_new_public_key_signature() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_signature)
  clear_has_new_public_key_signature();
  return new_public_key_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_new_public_key_signature(::std::string* new_public_key_signature) {
  if (new_public_key_signature != NULL) {
    set_has_new_public_key_signature();
  } else {
    clear_has_new_public_key_signature();
  }
  new_public_key_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_signature);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}

// optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
bool PolicyFetchResponse::has_new_public_key_verification_signature_deprecated() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PolicyFetchResponse::set_has_new_public_key_verification_signature_deprecated() {
  _has_bits_[0] |= 0x00000020u;
}
void PolicyFetchResponse::clear_has_new_public_key_verification_signature_deprecated() {
  _has_bits_[0] &= ~0x00000020u;
}
void PolicyFetchResponse::clear_new_public_key_verification_signature_deprecated() {
  new_public_key_verification_signature_deprecated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_public_key_verification_signature_deprecated();
}
const ::std::string& PolicyFetchResponse::new_public_key_verification_signature_deprecated() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
  return new_public_key_verification_signature_deprecated_.GetNoArena();
}
void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(const ::std::string& value) {
  set_has_new_public_key_verification_signature_deprecated();
  new_public_key_verification_signature_deprecated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
#if LANG_CXX11
void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(::std::string&& value) {
  set_has_new_public_key_verification_signature_deprecated();
  new_public_key_verification_signature_deprecated_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
#endif
void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_public_key_verification_signature_deprecated();
  new_public_key_verification_signature_deprecated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(const void* value, size_t size) {
  set_has_new_public_key_verification_signature_deprecated();
  new_public_key_verification_signature_deprecated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
::std::string* PolicyFetchResponse::mutable_new_public_key_verification_signature_deprecated() {
  set_has_new_public_key_verification_signature_deprecated();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
  return new_public_key_verification_signature_deprecated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_new_public_key_verification_signature_deprecated() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
  clear_has_new_public_key_verification_signature_deprecated();
  return new_public_key_verification_signature_deprecated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_new_public_key_verification_signature_deprecated(::std::string* new_public_key_verification_signature_deprecated) {
  if (new_public_key_verification_signature_deprecated != NULL) {
    set_has_new_public_key_verification_signature_deprecated();
  } else {
    clear_has_new_public_key_verification_signature_deprecated();
  }
  new_public_key_verification_signature_deprecated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_verification_signature_deprecated);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}

// optional bytes new_public_key_verification_data = 8;
bool PolicyFetchResponse::has_new_public_key_verification_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PolicyFetchResponse::set_has_new_public_key_verification_data() {
  _has_bits_[0] |= 0x00000040u;
}
void PolicyFetchResponse::clear_has_new_public_key_verification_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void PolicyFetchResponse::clear_new_public_key_verification_data() {
  new_public_key_verification_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_public_key_verification_data();
}
const ::std::string& PolicyFetchResponse::new_public_key_verification_data() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
  return new_public_key_verification_data_.GetNoArena();
}
void PolicyFetchResponse::set_new_public_key_verification_data(const ::std::string& value) {
  set_has_new_public_key_verification_data();
  new_public_key_verification_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
#if LANG_CXX11
void PolicyFetchResponse::set_new_public_key_verification_data(::std::string&& value) {
  set_has_new_public_key_verification_data();
  new_public_key_verification_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
#endif
void PolicyFetchResponse::set_new_public_key_verification_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_public_key_verification_data();
  new_public_key_verification_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
void PolicyFetchResponse::set_new_public_key_verification_data(const void* value, size_t size) {
  set_has_new_public_key_verification_data();
  new_public_key_verification_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
::std::string* PolicyFetchResponse::mutable_new_public_key_verification_data() {
  set_has_new_public_key_verification_data();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
  return new_public_key_verification_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_new_public_key_verification_data() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
  clear_has_new_public_key_verification_data();
  return new_public_key_verification_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_new_public_key_verification_data(::std::string* new_public_key_verification_data) {
  if (new_public_key_verification_data != NULL) {
    set_has_new_public_key_verification_data();
  } else {
    clear_has_new_public_key_verification_data();
  }
  new_public_key_verification_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_verification_data);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}

// optional bytes new_public_key_verification_data_signature = 9;
bool PolicyFetchResponse::has_new_public_key_verification_data_signature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PolicyFetchResponse::set_has_new_public_key_verification_data_signature() {
  _has_bits_[0] |= 0x00000080u;
}
void PolicyFetchResponse::clear_has_new_public_key_verification_data_signature() {
  _has_bits_[0] &= ~0x00000080u;
}
void PolicyFetchResponse::clear_new_public_key_verification_data_signature() {
  new_public_key_verification_data_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_public_key_verification_data_signature();
}
const ::std::string& PolicyFetchResponse::new_public_key_verification_data_signature() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
  return new_public_key_verification_data_signature_.GetNoArena();
}
void PolicyFetchResponse::set_new_public_key_verification_data_signature(const ::std::string& value) {
  set_has_new_public_key_verification_data_signature();
  new_public_key_verification_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
#if LANG_CXX11
void PolicyFetchResponse::set_new_public_key_verification_data_signature(::std::string&& value) {
  set_has_new_public_key_verification_data_signature();
  new_public_key_verification_data_signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
#endif
void PolicyFetchResponse::set_new_public_key_verification_data_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_public_key_verification_data_signature();
  new_public_key_verification_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
void PolicyFetchResponse::set_new_public_key_verification_data_signature(const void* value, size_t size) {
  set_has_new_public_key_verification_data_signature();
  new_public_key_verification_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
::std::string* PolicyFetchResponse::mutable_new_public_key_verification_data_signature() {
  set_has_new_public_key_verification_data_signature();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
  return new_public_key_verification_data_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_new_public_key_verification_data_signature() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
  clear_has_new_public_key_verification_data_signature();
  return new_public_key_verification_data_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_new_public_key_verification_data_signature(::std::string* new_public_key_verification_data_signature) {
  if (new_public_key_verification_data_signature != NULL) {
    set_has_new_public_key_verification_data_signature();
  } else {
    clear_has_new_public_key_verification_data_signature();
  }
  new_public_key_verification_data_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_verification_data_signature);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DEPRECATEDPolicyPublicKeyAndDomain::kNewPublicKeyFieldNumber;
const int DEPRECATEDPolicyPublicKeyAndDomain::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DEPRECATEDPolicyPublicKeyAndDomain::DEPRECATEDPolicyPublicKeyAndDomain()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
}
DEPRECATEDPolicyPublicKeyAndDomain::DEPRECATEDPolicyPublicKeyAndDomain(const DEPRECATEDPolicyPublicKeyAndDomain& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key()) {
    new_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
}

void DEPRECATEDPolicyPublicKeyAndDomain::SharedCtor() {
  _cached_size_ = 0;
  new_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DEPRECATEDPolicyPublicKeyAndDomain::~DEPRECATEDPolicyPublicKeyAndDomain() {
  // @@protoc_insertion_point(destructor:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  SharedDtor();
}

void DEPRECATEDPolicyPublicKeyAndDomain::SharedDtor() {
  new_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DEPRECATEDPolicyPublicKeyAndDomain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DEPRECATEDPolicyPublicKeyAndDomain& DEPRECATEDPolicyPublicKeyAndDomain::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DEPRECATEDPolicyPublicKeyAndDomain* DEPRECATEDPolicyPublicKeyAndDomain::New(::google::protobuf::Arena* arena) const {
  DEPRECATEDPolicyPublicKeyAndDomain* n = new DEPRECATEDPolicyPublicKeyAndDomain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DEPRECATEDPolicyPublicKeyAndDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_new_public_key()) {
      GOOGLE_DCHECK(!new_public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_public_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_domain()) {
      GOOGLE_DCHECK(!domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*domain_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DEPRECATEDPolicyPublicKeyAndDomain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes new_public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  return false;
#undef DO_
}

void DEPRECATEDPolicyPublicKeyAndDomain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes new_public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->new_public_key(), output);
  }

  // optional string domain = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
}

size_t DEPRECATEDPolicyPublicKeyAndDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes new_public_key = 1;
    if (has_new_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_public_key());
    }

    // optional string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DEPRECATEDPolicyPublicKeyAndDomain::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DEPRECATEDPolicyPublicKeyAndDomain*>(&from));
}

void DEPRECATEDPolicyPublicKeyAndDomain::MergeFrom(const DEPRECATEDPolicyPublicKeyAndDomain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_new_public_key();
      new_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
  }
}

void DEPRECATEDPolicyPublicKeyAndDomain::CopyFrom(const DEPRECATEDPolicyPublicKeyAndDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DEPRECATEDPolicyPublicKeyAndDomain::IsInitialized() const {
  return true;
}

void DEPRECATEDPolicyPublicKeyAndDomain::Swap(DEPRECATEDPolicyPublicKeyAndDomain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DEPRECATEDPolicyPublicKeyAndDomain::InternalSwap(DEPRECATEDPolicyPublicKeyAndDomain* other) {
  new_public_key_.Swap(&other->new_public_key_);
  domain_.Swap(&other->domain_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DEPRECATEDPolicyPublicKeyAndDomain::GetTypeName() const {
  return "enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DEPRECATEDPolicyPublicKeyAndDomain

// optional bytes new_public_key = 1;
bool DEPRECATEDPolicyPublicKeyAndDomain::has_new_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_has_new_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
void DEPRECATEDPolicyPublicKeyAndDomain::clear_has_new_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void DEPRECATEDPolicyPublicKeyAndDomain::clear_new_public_key() {
  new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_public_key();
}
const ::std::string& DEPRECATEDPolicyPublicKeyAndDomain::new_public_key() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
  return new_public_key_.GetNoArena();
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(const ::std::string& value) {
  set_has_new_public_key();
  new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
#if LANG_CXX11
void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(::std::string&& value) {
  set_has_new_public_key();
  new_public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
#endif
void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_public_key();
  new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(const void* value, size_t size) {
  set_has_new_public_key();
  new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
::std::string* DEPRECATEDPolicyPublicKeyAndDomain::mutable_new_public_key() {
  set_has_new_public_key();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
  return new_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DEPRECATEDPolicyPublicKeyAndDomain::release_new_public_key() {
  // @@protoc_insertion_point(field_release:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
  clear_has_new_public_key();
  return new_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_allocated_new_public_key(::std::string* new_public_key) {
  if (new_public_key != NULL) {
    set_has_new_public_key();
  } else {
    clear_has_new_public_key();
  }
  new_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}

// optional string domain = 2;
bool DEPRECATEDPolicyPublicKeyAndDomain::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
void DEPRECATEDPolicyPublicKeyAndDomain::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
void DEPRECATEDPolicyPublicKeyAndDomain::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
const ::std::string& DEPRECATEDPolicyPublicKeyAndDomain::domain() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
  return domain_.GetNoArena();
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
#if LANG_CXX11
void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
#endif
void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
::std::string* DEPRECATEDPolicyPublicKeyAndDomain::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DEPRECATEDPolicyPublicKeyAndDomain::release_domain() {
  // @@protoc_insertion_point(field_release:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicKeyVerificationData::kNewPublicKeyFieldNumber;
const int PublicKeyVerificationData::kDomainFieldNumber;
const int PublicKeyVerificationData::kNewPublicKeyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicKeyVerificationData::PublicKeyVerificationData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PublicKeyVerificationData)
}
PublicKeyVerificationData::PublicKeyVerificationData(const PublicKeyVerificationData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_public_key()) {
    new_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  new_public_key_version_ = from.new_public_key_version_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PublicKeyVerificationData)
}

void PublicKeyVerificationData::SharedCtor() {
  _cached_size_ = 0;
  new_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_public_key_version_ = 0;
}

PublicKeyVerificationData::~PublicKeyVerificationData() {
  // @@protoc_insertion_point(destructor:enterprise_management.PublicKeyVerificationData)
  SharedDtor();
}

void PublicKeyVerificationData::SharedDtor() {
  new_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublicKeyVerificationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PublicKeyVerificationData& PublicKeyVerificationData::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublicKeyVerificationData* PublicKeyVerificationData::New(::google::protobuf::Arena* arena) const {
  PublicKeyVerificationData* n = new PublicKeyVerificationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublicKeyVerificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PublicKeyVerificationData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_new_public_key()) {
      GOOGLE_DCHECK(!new_public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_public_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_domain()) {
      GOOGLE_DCHECK(!domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*domain_.UnsafeRawStringPointer())->clear();
    }
  }
  new_public_key_version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublicKeyVerificationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PublicKeyVerificationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes new_public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_public_key_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_new_public_key_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_public_key_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PublicKeyVerificationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PublicKeyVerificationData)
  return false;
#undef DO_
}

void PublicKeyVerificationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PublicKeyVerificationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes new_public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->new_public_key(), output);
  }

  // optional string domain = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // optional int32 new_public_key_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->new_public_key_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PublicKeyVerificationData)
}

size_t PublicKeyVerificationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PublicKeyVerificationData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes new_public_key = 1;
    if (has_new_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_public_key());
    }

    // optional string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional int32 new_public_key_version = 3;
    if (has_new_public_key_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_public_key_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicKeyVerificationData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PublicKeyVerificationData*>(&from));
}

void PublicKeyVerificationData::MergeFrom(const PublicKeyVerificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PublicKeyVerificationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_new_public_key();
      new_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000004u) {
      new_public_key_version_ = from.new_public_key_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublicKeyVerificationData::CopyFrom(const PublicKeyVerificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PublicKeyVerificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKeyVerificationData::IsInitialized() const {
  return true;
}

void PublicKeyVerificationData::Swap(PublicKeyVerificationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicKeyVerificationData::InternalSwap(PublicKeyVerificationData* other) {
  new_public_key_.Swap(&other->new_public_key_);
  domain_.Swap(&other->domain_);
  std::swap(new_public_key_version_, other->new_public_key_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PublicKeyVerificationData::GetTypeName() const {
  return "enterprise_management.PublicKeyVerificationData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublicKeyVerificationData

// optional bytes new_public_key = 1;
bool PublicKeyVerificationData::has_new_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublicKeyVerificationData::set_has_new_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
void PublicKeyVerificationData::clear_has_new_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublicKeyVerificationData::clear_new_public_key() {
  new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_public_key();
}
const ::std::string& PublicKeyVerificationData::new_public_key() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PublicKeyVerificationData.new_public_key)
  return new_public_key_.GetNoArena();
}
void PublicKeyVerificationData::set_new_public_key(const ::std::string& value) {
  set_has_new_public_key();
  new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PublicKeyVerificationData.new_public_key)
}
#if LANG_CXX11
void PublicKeyVerificationData::set_new_public_key(::std::string&& value) {
  set_has_new_public_key();
  new_public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PublicKeyVerificationData.new_public_key)
}
#endif
void PublicKeyVerificationData::set_new_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_public_key();
  new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PublicKeyVerificationData.new_public_key)
}
void PublicKeyVerificationData::set_new_public_key(const void* value, size_t size) {
  set_has_new_public_key();
  new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PublicKeyVerificationData.new_public_key)
}
::std::string* PublicKeyVerificationData::mutable_new_public_key() {
  set_has_new_public_key();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PublicKeyVerificationData.new_public_key)
  return new_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicKeyVerificationData::release_new_public_key() {
  // @@protoc_insertion_point(field_release:enterprise_management.PublicKeyVerificationData.new_public_key)
  clear_has_new_public_key();
  return new_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicKeyVerificationData::set_allocated_new_public_key(::std::string* new_public_key) {
  if (new_public_key != NULL) {
    set_has_new_public_key();
  } else {
    clear_has_new_public_key();
  }
  new_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PublicKeyVerificationData.new_public_key)
}

// optional string domain = 2;
bool PublicKeyVerificationData::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublicKeyVerificationData::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
void PublicKeyVerificationData::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
void PublicKeyVerificationData::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
const ::std::string& PublicKeyVerificationData::domain() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PublicKeyVerificationData.domain)
  return domain_.GetNoArena();
}
void PublicKeyVerificationData::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PublicKeyVerificationData.domain)
}
#if LANG_CXX11
void PublicKeyVerificationData::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PublicKeyVerificationData.domain)
}
#endif
void PublicKeyVerificationData::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PublicKeyVerificationData.domain)
}
void PublicKeyVerificationData::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PublicKeyVerificationData.domain)
}
::std::string* PublicKeyVerificationData::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PublicKeyVerificationData.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicKeyVerificationData::release_domain() {
  // @@protoc_insertion_point(field_release:enterprise_management.PublicKeyVerificationData.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicKeyVerificationData::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PublicKeyVerificationData.domain)
}

// optional int32 new_public_key_version = 3;
bool PublicKeyVerificationData::has_new_public_key_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PublicKeyVerificationData::set_has_new_public_key_version() {
  _has_bits_[0] |= 0x00000004u;
}
void PublicKeyVerificationData::clear_has_new_public_key_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void PublicKeyVerificationData::clear_new_public_key_version() {
  new_public_key_version_ = 0;
  clear_has_new_public_key_version();
}
::google::protobuf::int32 PublicKeyVerificationData::new_public_key_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PublicKeyVerificationData.new_public_key_version)
  return new_public_key_version_;
}
void PublicKeyVerificationData::set_new_public_key_version(::google::protobuf::int32 value) {
  set_has_new_public_key_version();
  new_public_key_version_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PublicKeyVerificationData.new_public_key_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevicePolicyRequest::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DevicePolicyRequest::DevicePolicyRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DevicePolicyRequest)
}
DevicePolicyRequest::DevicePolicyRequest(const DevicePolicyRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      request_(from.request_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePolicyRequest)
}

void DevicePolicyRequest::SharedCtor() {
  _cached_size_ = 0;
}

DevicePolicyRequest::~DevicePolicyRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePolicyRequest)
  SharedDtor();
}

void DevicePolicyRequest::SharedDtor() {
}

void DevicePolicyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevicePolicyRequest& DevicePolicyRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DevicePolicyRequest* DevicePolicyRequest::New(::google::protobuf::Arena* arena) const {
  DevicePolicyRequest* n = new DevicePolicyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DevicePolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePolicyRequest)
  request_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DevicePolicyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DevicePolicyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.PolicyFetchRequest request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DevicePolicyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePolicyRequest)
  return false;
#undef DO_
}

void DevicePolicyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.PolicyFetchRequest request = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->request(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePolicyRequest)
}

size_t DevicePolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePolicyRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.PolicyFetchRequest request = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->request_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevicePolicyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DevicePolicyRequest*>(&from));
}

void DevicePolicyRequest::MergeFrom(const DevicePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_.MergeFrom(from.request_);
}

void DevicePolicyRequest::CopyFrom(const DevicePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePolicyRequest::IsInitialized() const {
  return true;
}

void DevicePolicyRequest::Swap(DevicePolicyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DevicePolicyRequest::InternalSwap(DevicePolicyRequest* other) {
  request_.InternalSwap(&other->request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DevicePolicyRequest::GetTypeName() const {
  return "enterprise_management.DevicePolicyRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DevicePolicyRequest

// repeated .enterprise_management.PolicyFetchRequest request = 3;
int DevicePolicyRequest::request_size() const {
  return request_.size();
}
void DevicePolicyRequest::clear_request() {
  request_.Clear();
}
const ::enterprise_management::PolicyFetchRequest& DevicePolicyRequest::request(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DevicePolicyRequest.request)
  return request_.Get(index);
}
::enterprise_management::PolicyFetchRequest* DevicePolicyRequest::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DevicePolicyRequest.request)
  return request_.Mutable(index);
}
::enterprise_management::PolicyFetchRequest* DevicePolicyRequest::add_request() {
  // @@protoc_insertion_point(field_add:enterprise_management.DevicePolicyRequest.request)
  return request_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchRequest >*
DevicePolicyRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DevicePolicyRequest.request)
  return &request_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchRequest >&
DevicePolicyRequest::request() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DevicePolicyRequest.request)
  return request_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevicePolicyResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DevicePolicyResponse::DevicePolicyResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DevicePolicyResponse)
}
DevicePolicyResponse::DevicePolicyResponse(const DevicePolicyResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      response_(from.response_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePolicyResponse)
}

void DevicePolicyResponse::SharedCtor() {
  _cached_size_ = 0;
}

DevicePolicyResponse::~DevicePolicyResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePolicyResponse)
  SharedDtor();
}

void DevicePolicyResponse::SharedDtor() {
}

void DevicePolicyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevicePolicyResponse& DevicePolicyResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DevicePolicyResponse* DevicePolicyResponse::New(::google::protobuf::Arena* arena) const {
  DevicePolicyResponse* n = new DevicePolicyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DevicePolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePolicyResponse)
  response_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DevicePolicyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DevicePolicyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.PolicyFetchResponse response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DevicePolicyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePolicyResponse)
  return false;
#undef DO_
}

void DevicePolicyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePolicyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.PolicyFetchResponse response = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->response_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->response(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePolicyResponse)
}

size_t DevicePolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePolicyResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.PolicyFetchResponse response = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->response_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevicePolicyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DevicePolicyResponse*>(&from));
}

void DevicePolicyResponse::MergeFrom(const DevicePolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_.MergeFrom(from.response_);
}

void DevicePolicyResponse::CopyFrom(const DevicePolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePolicyResponse::IsInitialized() const {
  return true;
}

void DevicePolicyResponse::Swap(DevicePolicyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DevicePolicyResponse::InternalSwap(DevicePolicyResponse* other) {
  response_.InternalSwap(&other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DevicePolicyResponse::GetTypeName() const {
  return "enterprise_management.DevicePolicyResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DevicePolicyResponse

// repeated .enterprise_management.PolicyFetchResponse response = 3;
int DevicePolicyResponse::response_size() const {
  return response_.size();
}
void DevicePolicyResponse::clear_response() {
  response_.Clear();
}
const ::enterprise_management::PolicyFetchResponse& DevicePolicyResponse::response(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DevicePolicyResponse.response)
  return response_.Get(index);
}
::enterprise_management::PolicyFetchResponse* DevicePolicyResponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DevicePolicyResponse.response)
  return response_.Mutable(index);
}
::enterprise_management::PolicyFetchResponse* DevicePolicyResponse::add_response() {
  // @@protoc_insertion_point(field_add:enterprise_management.DevicePolicyResponse.response)
  return response_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchResponse >*
DevicePolicyResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DevicePolicyResponse.response)
  return &response_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyFetchResponse >&
DevicePolicyResponse::response() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DevicePolicyResponse.response)
  return response_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimePeriod::kStartTimestampFieldNumber;
const int TimePeriod::kEndTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimePeriod::TimePeriod()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.TimePeriod)
}
TimePeriod::TimePeriod(const TimePeriod& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.TimePeriod)
}

void TimePeriod::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
}

TimePeriod::~TimePeriod() {
  // @@protoc_insertion_point(destructor:enterprise_management.TimePeriod)
  SharedDtor();
}

void TimePeriod::SharedDtor() {
}

void TimePeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimePeriod& TimePeriod::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimePeriod* TimePeriod::New(::google::protobuf::Arena* arena) const {
  TimePeriod* n = new TimePeriod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimePeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.TimePeriod)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_timestamp_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimePeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.TimePeriod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_start_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_end_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.TimePeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.TimePeriod)
  return false;
#undef DO_
}

void TimePeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.TimePeriod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_timestamp(), output);
  }

  // optional int64 end_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_timestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.TimePeriod)
}

size_t TimePeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.TimePeriod)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 start_timestamp = 1;
    if (has_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_timestamp());
    }

    // optional int64 end_timestamp = 2;
    if (has_end_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimePeriod::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimePeriod*>(&from));
}

void TimePeriod::MergeFrom(const TimePeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.TimePeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_timestamp_ = from.end_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimePeriod::CopyFrom(const TimePeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.TimePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimePeriod::IsInitialized() const {
  return true;
}

void TimePeriod::Swap(TimePeriod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimePeriod::InternalSwap(TimePeriod* other) {
  std::swap(start_timestamp_, other->start_timestamp_);
  std::swap(end_timestamp_, other->end_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TimePeriod::GetTypeName() const {
  return "enterprise_management.TimePeriod";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimePeriod

// optional int64 start_timestamp = 1;
bool TimePeriod::has_start_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimePeriod::set_has_start_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void TimePeriod::clear_has_start_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimePeriod::clear_start_timestamp() {
  start_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_start_timestamp();
}
::google::protobuf::int64 TimePeriod::start_timestamp() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TimePeriod.start_timestamp)
  return start_timestamp_;
}
void TimePeriod::set_start_timestamp(::google::protobuf::int64 value) {
  set_has_start_timestamp();
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.TimePeriod.start_timestamp)
}

// optional int64 end_timestamp = 2;
bool TimePeriod::has_end_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimePeriod::set_has_end_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void TimePeriod::clear_has_end_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimePeriod::clear_end_timestamp() {
  end_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_end_timestamp();
}
::google::protobuf::int64 TimePeriod::end_timestamp() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TimePeriod.end_timestamp)
  return end_timestamp_;
}
void TimePeriod::set_end_timestamp(::google::protobuf::int64 value) {
  set_has_end_timestamp();
  end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.TimePeriod.end_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveTimePeriod::kTimePeriodFieldNumber;
const int ActiveTimePeriod::kActiveDurationFieldNumber;
const int ActiveTimePeriod::kUserEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveTimePeriod::ActiveTimePeriod()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveTimePeriod)
}
ActiveTimePeriod::ActiveTimePeriod(const ActiveTimePeriod& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_email()) {
    user_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_email_);
  }
  if (from.has_time_period()) {
    time_period_ = new ::enterprise_management::TimePeriod(*from.time_period_);
  } else {
    time_period_ = NULL;
  }
  active_duration_ = from.active_duration_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveTimePeriod)
}

void ActiveTimePeriod::SharedCtor() {
  _cached_size_ = 0;
  user_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_duration_) -
      reinterpret_cast<char*>(&time_period_)) + sizeof(active_duration_));
}

ActiveTimePeriod::~ActiveTimePeriod() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveTimePeriod)
  SharedDtor();
}

void ActiveTimePeriod::SharedDtor() {
  user_email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete time_period_;
  }
}

void ActiveTimePeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActiveTimePeriod& ActiveTimePeriod::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActiveTimePeriod* ActiveTimePeriod::New(::google::protobuf::Arena* arena) const {
  ActiveTimePeriod* n = new ActiveTimePeriod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActiveTimePeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveTimePeriod)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_email()) {
      GOOGLE_DCHECK(!user_email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_email_.UnsafeRawStringPointer())->clear();
    }
    if (has_time_period()) {
      GOOGLE_DCHECK(time_period_ != NULL);
      time_period_->::enterprise_management::TimePeriod::Clear();
    }
  }
  active_duration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActiveTimePeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveTimePeriod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.TimePeriod time_period = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active_duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_active_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_email = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveTimePeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveTimePeriod)
  return false;
#undef DO_
}

void ActiveTimePeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveTimePeriod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.TimePeriod time_period = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->time_period_, output);
  }

  // optional int32 active_duration = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->active_duration(), output);
  }

  // optional string user_email = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_email(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveTimePeriod)
}

size_t ActiveTimePeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveTimePeriod)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string user_email = 3;
    if (has_user_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_email());
    }

    // optional .enterprise_management.TimePeriod time_period = 1;
    if (has_time_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_period_);
    }

    // optional int32 active_duration = 2;
    if (has_active_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveTimePeriod::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActiveTimePeriod*>(&from));
}

void ActiveTimePeriod::MergeFrom(const ActiveTimePeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveTimePeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_email();
      user_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_email_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_time_period()->::enterprise_management::TimePeriod::MergeFrom(from.time_period());
    }
    if (cached_has_bits & 0x00000004u) {
      active_duration_ = from.active_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActiveTimePeriod::CopyFrom(const ActiveTimePeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveTimePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveTimePeriod::IsInitialized() const {
  return true;
}

void ActiveTimePeriod::Swap(ActiveTimePeriod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveTimePeriod::InternalSwap(ActiveTimePeriod* other) {
  user_email_.Swap(&other->user_email_);
  std::swap(time_period_, other->time_period_);
  std::swap(active_duration_, other->active_duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ActiveTimePeriod::GetTypeName() const {
  return "enterprise_management.ActiveTimePeriod";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActiveTimePeriod

// optional .enterprise_management.TimePeriod time_period = 1;
bool ActiveTimePeriod::has_time_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActiveTimePeriod::set_has_time_period() {
  _has_bits_[0] |= 0x00000002u;
}
void ActiveTimePeriod::clear_has_time_period() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActiveTimePeriod::clear_time_period() {
  if (time_period_ != NULL) time_period_->::enterprise_management::TimePeriod::Clear();
  clear_has_time_period();
}
const ::enterprise_management::TimePeriod& ActiveTimePeriod::time_period() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ActiveTimePeriod.time_period)
  return time_period_ != NULL ? *time_period_
                         : *::enterprise_management::TimePeriod::internal_default_instance();
}
::enterprise_management::TimePeriod* ActiveTimePeriod::mutable_time_period() {
  set_has_time_period();
  if (time_period_ == NULL) {
    time_period_ = new ::enterprise_management::TimePeriod;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.ActiveTimePeriod.time_period)
  return time_period_;
}
::enterprise_management::TimePeriod* ActiveTimePeriod::release_time_period() {
  // @@protoc_insertion_point(field_release:enterprise_management.ActiveTimePeriod.time_period)
  clear_has_time_period();
  ::enterprise_management::TimePeriod* temp = time_period_;
  time_period_ = NULL;
  return temp;
}
void ActiveTimePeriod::set_allocated_time_period(::enterprise_management::TimePeriod* time_period) {
  delete time_period_;
  time_period_ = time_period;
  if (time_period) {
    set_has_time_period();
  } else {
    clear_has_time_period();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveTimePeriod.time_period)
}

// optional int32 active_duration = 2;
bool ActiveTimePeriod::has_active_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActiveTimePeriod::set_has_active_duration() {
  _has_bits_[0] |= 0x00000004u;
}
void ActiveTimePeriod::clear_has_active_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActiveTimePeriod::clear_active_duration() {
  active_duration_ = 0;
  clear_has_active_duration();
}
::google::protobuf::int32 ActiveTimePeriod::active_duration() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ActiveTimePeriod.active_duration)
  return active_duration_;
}
void ActiveTimePeriod::set_active_duration(::google::protobuf::int32 value) {
  set_has_active_duration();
  active_duration_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.ActiveTimePeriod.active_duration)
}

// optional string user_email = 3;
bool ActiveTimePeriod::has_user_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActiveTimePeriod::set_has_user_email() {
  _has_bits_[0] |= 0x00000001u;
}
void ActiveTimePeriod::clear_has_user_email() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActiveTimePeriod::clear_user_email() {
  user_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_email();
}
const ::std::string& ActiveTimePeriod::user_email() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ActiveTimePeriod.user_email)
  return user_email_.GetNoArena();
}
void ActiveTimePeriod::set_user_email(const ::std::string& value) {
  set_has_user_email();
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ActiveTimePeriod.user_email)
}
#if LANG_CXX11
void ActiveTimePeriod::set_user_email(::std::string&& value) {
  set_has_user_email();
  user_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveTimePeriod.user_email)
}
#endif
void ActiveTimePeriod::set_user_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_email();
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ActiveTimePeriod.user_email)
}
void ActiveTimePeriod::set_user_email(const char* value, size_t size) {
  set_has_user_email();
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveTimePeriod.user_email)
}
::std::string* ActiveTimePeriod::mutable_user_email() {
  set_has_user_email();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ActiveTimePeriod.user_email)
  return user_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActiveTimePeriod::release_user_email() {
  // @@protoc_insertion_point(field_release:enterprise_management.ActiveTimePeriod.user_email)
  clear_has_user_email();
  return user_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActiveTimePeriod::set_allocated_user_email(::std::string* user_email) {
  if (user_email != NULL) {
    set_has_user_email();
  } else {
    clear_has_user_email();
  }
  user_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_email);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveTimePeriod.user_email)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkInterface::kTypeFieldNumber;
const int NetworkInterface::kMacAddressFieldNumber;
const int NetworkInterface::kMeidFieldNumber;
const int NetworkInterface::kImeiFieldNumber;
const int NetworkInterface::kDevicePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkInterface::NetworkInterface()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.NetworkInterface)
}
NetworkInterface::NetworkInterface(const NetworkInterface& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mac_address()) {
    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  meid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_meid()) {
    meid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meid_);
  }
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imei()) {
    imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  device_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_path()) {
    device_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_path_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.NetworkInterface)
}

void NetworkInterface::SharedCtor() {
  _cached_size_ = 0;
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

NetworkInterface::~NetworkInterface() {
  // @@protoc_insertion_point(destructor:enterprise_management.NetworkInterface)
  SharedDtor();
}

void NetworkInterface::SharedDtor() {
  mac_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkInterface& NetworkInterface::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkInterface* NetworkInterface::New(::google::protobuf::Arena* arena) const {
  NetworkInterface* n = new NetworkInterface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.NetworkInterface)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_mac_address()) {
      GOOGLE_DCHECK(!mac_address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mac_address_.UnsafeRawStringPointer())->clear();
    }
    if (has_meid()) {
      GOOGLE_DCHECK(!meid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*meid_.UnsafeRawStringPointer())->clear();
    }
    if (has_imei()) {
      GOOGLE_DCHECK(!imei_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imei_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_path()) {
      GOOGLE_DCHECK(!device_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_path_.UnsafeRawStringPointer())->clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.NetworkInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::NetworkInterface_NetworkDeviceType_IsValid(value)) {
            set_type(static_cast< ::enterprise_management::NetworkInterface_NetworkDeviceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mac_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string meid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string imei = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_path = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.NetworkInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.NetworkInterface)
  return false;
#undef DO_
}

void NetworkInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.NetworkInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string mac_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mac_address(), output);
  }

  // optional string meid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->meid(), output);
  }

  // optional string imei = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->imei(), output);
  }

  // optional string device_path = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_path(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.NetworkInterface)
}

size_t NetworkInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.NetworkInterface)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string mac_address = 2;
    if (has_mac_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac_address());
    }

    // optional string meid = 3;
    if (has_meid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meid());
    }

    // optional string imei = 4;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string device_path = 5;
    if (has_device_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_path());
    }

    // optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkInterface::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkInterface*>(&from));
}

void NetworkInterface::MergeFrom(const NetworkInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.NetworkInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mac_address();
      mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_meid();
      meid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_imei();
      imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_device_path();
      device_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_path_);
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkInterface::CopyFrom(const NetworkInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.NetworkInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInterface::IsInitialized() const {
  return true;
}

void NetworkInterface::Swap(NetworkInterface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkInterface::InternalSwap(NetworkInterface* other) {
  mac_address_.Swap(&other->mac_address_);
  meid_.Swap(&other->meid_);
  imei_.Swap(&other->imei_);
  device_path_.Swap(&other->device_path_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkInterface::GetTypeName() const {
  return "enterprise_management.NetworkInterface";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkInterface

// optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
bool NetworkInterface::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetworkInterface::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void NetworkInterface::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetworkInterface::clear_type() {
  type_ = 0;
  clear_has_type();
}
::enterprise_management::NetworkInterface_NetworkDeviceType NetworkInterface::type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.type)
  return static_cast< ::enterprise_management::NetworkInterface_NetworkDeviceType >(type_);
}
void NetworkInterface::set_type(::enterprise_management::NetworkInterface_NetworkDeviceType value) {
  assert(::enterprise_management::NetworkInterface_NetworkDeviceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.type)
}

// optional string mac_address = 2;
bool NetworkInterface::has_mac_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkInterface::set_has_mac_address() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkInterface::clear_has_mac_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkInterface::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mac_address();
}
const ::std::string& NetworkInterface::mac_address() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.mac_address)
  return mac_address_.GetNoArena();
}
void NetworkInterface::set_mac_address(const ::std::string& value) {
  set_has_mac_address();
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.mac_address)
}
#if LANG_CXX11
void NetworkInterface::set_mac_address(::std::string&& value) {
  set_has_mac_address();
  mac_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkInterface.mac_address)
}
#endif
void NetworkInterface::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mac_address();
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.mac_address)
}
void NetworkInterface::set_mac_address(const char* value, size_t size) {
  set_has_mac_address();
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.mac_address)
}
::std::string* NetworkInterface::mutable_mac_address() {
  set_has_mac_address();
  // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInterface::release_mac_address() {
  // @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.mac_address)
  clear_has_mac_address();
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    set_has_mac_address();
  } else {
    clear_has_mac_address();
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.mac_address)
}

// optional string meid = 3;
bool NetworkInterface::has_meid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkInterface::set_has_meid() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkInterface::clear_has_meid() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkInterface::clear_meid() {
  meid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meid();
}
const ::std::string& NetworkInterface::meid() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.meid)
  return meid_.GetNoArena();
}
void NetworkInterface::set_meid(const ::std::string& value) {
  set_has_meid();
  meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.meid)
}
#if LANG_CXX11
void NetworkInterface::set_meid(::std::string&& value) {
  set_has_meid();
  meid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkInterface.meid)
}
#endif
void NetworkInterface::set_meid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meid();
  meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.meid)
}
void NetworkInterface::set_meid(const char* value, size_t size) {
  set_has_meid();
  meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.meid)
}
::std::string* NetworkInterface::mutable_meid() {
  set_has_meid();
  // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.meid)
  return meid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInterface::release_meid() {
  // @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.meid)
  clear_has_meid();
  return meid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_allocated_meid(::std::string* meid) {
  if (meid != NULL) {
    set_has_meid();
  } else {
    clear_has_meid();
  }
  meid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meid);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.meid)
}

// optional string imei = 4;
bool NetworkInterface::has_imei() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkInterface::set_has_imei() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkInterface::clear_has_imei() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkInterface::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
const ::std::string& NetworkInterface::imei() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.imei)
  return imei_.GetNoArena();
}
void NetworkInterface::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.imei)
}
#if LANG_CXX11
void NetworkInterface::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkInterface.imei)
}
#endif
void NetworkInterface::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.imei)
}
void NetworkInterface::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.imei)
}
::std::string* NetworkInterface::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInterface::release_imei() {
  // @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.imei)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.imei)
}

// optional string device_path = 5;
bool NetworkInterface::has_device_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetworkInterface::set_has_device_path() {
  _has_bits_[0] |= 0x00000008u;
}
void NetworkInterface::clear_has_device_path() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetworkInterface::clear_device_path() {
  device_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_path();
}
const ::std::string& NetworkInterface::device_path() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.device_path)
  return device_path_.GetNoArena();
}
void NetworkInterface::set_device_path(const ::std::string& value) {
  set_has_device_path();
  device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.device_path)
}
#if LANG_CXX11
void NetworkInterface::set_device_path(::std::string&& value) {
  set_has_device_path();
  device_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkInterface.device_path)
}
#endif
void NetworkInterface::set_device_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_path();
  device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.device_path)
}
void NetworkInterface::set_device_path(const char* value, size_t size) {
  set_has_device_path();
  device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.device_path)
}
::std::string* NetworkInterface::mutable_device_path() {
  set_has_device_path();
  // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.device_path)
  return device_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInterface::release_device_path() {
  // @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.device_path)
  clear_has_device_path();
  return device_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_allocated_device_path(::std::string* device_path) {
  if (device_path != NULL) {
    set_has_device_path();
  } else {
    clear_has_device_path();
  }
  device_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_path);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.device_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkState::kDevicePathFieldNumber;
const int NetworkState::kConnectionStateFieldNumber;
const int NetworkState::kSignalStrengthFieldNumber;
const int NetworkState::kIpAddressFieldNumber;
const int NetworkState::kGatewayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkState::NetworkState()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.NetworkState)
}
NetworkState::NetworkState(const NetworkState& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_path()) {
    device_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_path_);
  }
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_address()) {
    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gateway()) {
    gateway_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  ::memcpy(&connection_state_, &from.connection_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_) -
    reinterpret_cast<char*>(&connection_state_)) + sizeof(signal_strength_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.NetworkState)
}

void NetworkState::SharedCtor() {
  _cached_size_ = 0;
  device_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connection_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_) -
      reinterpret_cast<char*>(&connection_state_)) + sizeof(signal_strength_));
}

NetworkState::~NetworkState() {
  // @@protoc_insertion_point(destructor:enterprise_management.NetworkState)
  SharedDtor();
}

void NetworkState::SharedDtor() {
  device_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkState& NetworkState::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkState* NetworkState::New(::google::protobuf::Arena* arena) const {
  NetworkState* n = new NetworkState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkState::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.NetworkState)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_device_path()) {
      GOOGLE_DCHECK(!device_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_ip_address()) {
      GOOGLE_DCHECK(!ip_address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_address_.UnsafeRawStringPointer())->clear();
    }
    if (has_gateway()) {
      GOOGLE_DCHECK(!gateway_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gateway_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&connection_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signal_strength_) -
        reinterpret_cast<char*>(&connection_state_)) + sizeof(signal_strength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.NetworkState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::NetworkState_ConnectionState_IsValid(value)) {
            set_connection_state(static_cast< ::enterprise_management::NetworkState_ConnectionState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 signal_strength = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_signal_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gateway = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.NetworkState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.NetworkState)
  return false;
#undef DO_
}

void NetworkState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.NetworkState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_path(), output);
  }

  // optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connection_state(), output);
  }

  // optional int32 signal_strength = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signal_strength(), output);
  }

  // optional string ip_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip_address(), output);
  }

  // optional string gateway = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gateway(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.NetworkState)
}

size_t NetworkState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.NetworkState)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string device_path = 1;
    if (has_device_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_path());
    }

    // optional string ip_address = 4;
    if (has_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_address());
    }

    // optional string gateway = 5;
    if (has_gateway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateway());
    }

    // optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
    if (has_connection_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_state());
    }

    // optional int32 signal_strength = 3;
    if (has_signal_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal_strength());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkState*>(&from));
}

void NetworkState::MergeFrom(const NetworkState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.NetworkState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_path();
      device_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ip_address();
      ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_gateway();
      gateway_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_);
    }
    if (cached_has_bits & 0x00000008u) {
      connection_state_ = from.connection_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      signal_strength_ = from.signal_strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkState::CopyFrom(const NetworkState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.NetworkState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkState::IsInitialized() const {
  return true;
}

void NetworkState::Swap(NetworkState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkState::InternalSwap(NetworkState* other) {
  device_path_.Swap(&other->device_path_);
  ip_address_.Swap(&other->ip_address_);
  gateway_.Swap(&other->gateway_);
  std::swap(connection_state_, other->connection_state_);
  std::swap(signal_strength_, other->signal_strength_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkState::GetTypeName() const {
  return "enterprise_management.NetworkState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkState

// optional string device_path = 1;
bool NetworkState::has_device_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkState::set_has_device_path() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkState::clear_has_device_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkState::clear_device_path() {
  device_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_path();
}
const ::std::string& NetworkState::device_path() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkState.device_path)
  return device_path_.GetNoArena();
}
void NetworkState::set_device_path(const ::std::string& value) {
  set_has_device_path();
  device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkState.device_path)
}
#if LANG_CXX11
void NetworkState::set_device_path(::std::string&& value) {
  set_has_device_path();
  device_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkState.device_path)
}
#endif
void NetworkState::set_device_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_path();
  device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkState.device_path)
}
void NetworkState::set_device_path(const char* value, size_t size) {
  set_has_device_path();
  device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkState.device_path)
}
::std::string* NetworkState::mutable_device_path() {
  set_has_device_path();
  // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkState.device_path)
  return device_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkState::release_device_path() {
  // @@protoc_insertion_point(field_release:enterprise_management.NetworkState.device_path)
  clear_has_device_path();
  return device_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkState::set_allocated_device_path(::std::string* device_path) {
  if (device_path != NULL) {
    set_has_device_path();
  } else {
    clear_has_device_path();
  }
  device_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_path);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkState.device_path)
}

// optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
bool NetworkState::has_connection_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetworkState::set_has_connection_state() {
  _has_bits_[0] |= 0x00000008u;
}
void NetworkState::clear_has_connection_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetworkState::clear_connection_state() {
  connection_state_ = 0;
  clear_has_connection_state();
}
::enterprise_management::NetworkState_ConnectionState NetworkState::connection_state() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkState.connection_state)
  return static_cast< ::enterprise_management::NetworkState_ConnectionState >(connection_state_);
}
void NetworkState::set_connection_state(::enterprise_management::NetworkState_ConnectionState value) {
  assert(::enterprise_management::NetworkState_ConnectionState_IsValid(value));
  set_has_connection_state();
  connection_state_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkState.connection_state)
}

// optional int32 signal_strength = 3;
bool NetworkState::has_signal_strength() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetworkState::set_has_signal_strength() {
  _has_bits_[0] |= 0x00000010u;
}
void NetworkState::clear_has_signal_strength() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetworkState::clear_signal_strength() {
  signal_strength_ = 0;
  clear_has_signal_strength();
}
::google::protobuf::int32 NetworkState::signal_strength() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkState.signal_strength)
  return signal_strength_;
}
void NetworkState::set_signal_strength(::google::protobuf::int32 value) {
  set_has_signal_strength();
  signal_strength_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkState.signal_strength)
}

// optional string ip_address = 4;
bool NetworkState::has_ip_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkState::set_has_ip_address() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkState::clear_has_ip_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkState::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_address();
}
const ::std::string& NetworkState::ip_address() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkState.ip_address)
  return ip_address_.GetNoArena();
}
void NetworkState::set_ip_address(const ::std::string& value) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkState.ip_address)
}
#if LANG_CXX11
void NetworkState::set_ip_address(::std::string&& value) {
  set_has_ip_address();
  ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkState.ip_address)
}
#endif
void NetworkState::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkState.ip_address)
}
void NetworkState::set_ip_address(const char* value, size_t size) {
  set_has_ip_address();
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkState.ip_address)
}
::std::string* NetworkState::mutable_ip_address() {
  set_has_ip_address();
  // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkState.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkState::release_ip_address() {
  // @@protoc_insertion_point(field_release:enterprise_management.NetworkState.ip_address)
  clear_has_ip_address();
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkState::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    set_has_ip_address();
  } else {
    clear_has_ip_address();
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkState.ip_address)
}

// optional string gateway = 5;
bool NetworkState::has_gateway() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkState::set_has_gateway() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkState::clear_has_gateway() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkState::clear_gateway() {
  gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gateway();
}
const ::std::string& NetworkState::gateway() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkState.gateway)
  return gateway_.GetNoArena();
}
void NetworkState::set_gateway(const ::std::string& value) {
  set_has_gateway();
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkState.gateway)
}
#if LANG_CXX11
void NetworkState::set_gateway(::std::string&& value) {
  set_has_gateway();
  gateway_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkState.gateway)
}
#endif
void NetworkState::set_gateway(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gateway();
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkState.gateway)
}
void NetworkState::set_gateway(const char* value, size_t size) {
  set_has_gateway();
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkState.gateway)
}
::std::string* NetworkState::mutable_gateway() {
  set_has_gateway();
  // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkState.gateway)
  return gateway_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkState::release_gateway() {
  // @@protoc_insertion_point(field_release:enterprise_management.NetworkState.gateway)
  clear_has_gateway();
  return gateway_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkState::set_allocated_gateway(::std::string* gateway) {
  if (gateway != NULL) {
    set_has_gateway();
  } else {
    clear_has_gateway();
  }
  gateway_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkState.gateway)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceUser::kTypeFieldNumber;
const int DeviceUser::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUser::DeviceUser()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceUser)
}
DeviceUser::DeviceUser(const DeviceUser& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUser)
}

void DeviceUser::SharedCtor() {
  _cached_size_ = 0;
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

DeviceUser::~DeviceUser() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceUser)
  SharedDtor();
}

void DeviceUser::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceUser& DeviceUser::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceUser* DeviceUser::New(::google::protobuf::Arena* arena) const {
  DeviceUser* n = new DeviceUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceUser::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUser)
  if (has_email()) {
    GOOGLE_DCHECK(!email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*email_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .enterprise_management.DeviceUser.UserType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceUser_UserType_IsValid(value)) {
            set_type(static_cast< ::enterprise_management::DeviceUser_UserType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceUser)
  return false;
#undef DO_
}

void DeviceUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .enterprise_management.DeviceUser.UserType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->email(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceUser)
}

size_t DeviceUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUser)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required .enterprise_management.DeviceUser.UserType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional string email = 2;
  if (has_email()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceUser*>(&from));
}

void DeviceUser::MergeFrom(const DeviceUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceUser::CopyFrom(const DeviceUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void DeviceUser::Swap(DeviceUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceUser::InternalSwap(DeviceUser* other) {
  email_.Swap(&other->email_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceUser::GetTypeName() const {
  return "enterprise_management.DeviceUser";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUser

// required .enterprise_management.DeviceUser.UserType type = 1;
bool DeviceUser::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceUser::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceUser::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceUser::clear_type() {
  type_ = 0;
  clear_has_type();
}
::enterprise_management::DeviceUser_UserType DeviceUser::type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceUser.type)
  return static_cast< ::enterprise_management::DeviceUser_UserType >(type_);
}
void DeviceUser::set_type(::enterprise_management::DeviceUser_UserType value) {
  assert(::enterprise_management::DeviceUser_UserType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceUser.type)
}

// optional string email = 2;
bool DeviceUser::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceUser::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceUser::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceUser::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& DeviceUser::email() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceUser.email)
  return email_.GetNoArena();
}
void DeviceUser::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceUser.email)
}
#if LANG_CXX11
void DeviceUser::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceUser.email)
}
#endif
void DeviceUser::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceUser.email)
}
void DeviceUser::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceUser.email)
}
::std::string* DeviceUser::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceUser.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceUser::release_email() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceUser.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceUser::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceUser.email)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VolumeInfo::kVolumeIdFieldNumber;
const int VolumeInfo::kStorageTotalFieldNumber;
const int VolumeInfo::kStorageFreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VolumeInfo::VolumeInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.VolumeInfo)
}
VolumeInfo::VolumeInfo(const VolumeInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  volume_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_volume_id()) {
    volume_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_id_);
  }
  ::memcpy(&storage_total_, &from.storage_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&storage_free_) -
    reinterpret_cast<char*>(&storage_total_)) + sizeof(storage_free_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.VolumeInfo)
}

void VolumeInfo::SharedCtor() {
  _cached_size_ = 0;
  volume_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&storage_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_free_) -
      reinterpret_cast<char*>(&storage_total_)) + sizeof(storage_free_));
}

VolumeInfo::~VolumeInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.VolumeInfo)
  SharedDtor();
}

void VolumeInfo::SharedDtor() {
  volume_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VolumeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VolumeInfo& VolumeInfo::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

VolumeInfo* VolumeInfo::New(::google::protobuf::Arena* arena) const {
  VolumeInfo* n = new VolumeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VolumeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.VolumeInfo)
  if (has_volume_id()) {
    GOOGLE_DCHECK(!volume_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*volume_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&storage_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&storage_free_) -
        reinterpret_cast<char*>(&storage_total_)) + sizeof(storage_free_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VolumeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.VolumeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string volume_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 storage_total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_storage_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &storage_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 storage_free = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_storage_free();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &storage_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.VolumeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.VolumeInfo)
  return false;
#undef DO_
}

void VolumeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.VolumeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string volume_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->volume_id(), output);
  }

  // optional int64 storage_total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->storage_total(), output);
  }

  // optional int64 storage_free = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->storage_free(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.VolumeInfo)
}

size_t VolumeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.VolumeInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string volume_id = 1;
    if (has_volume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_id());
    }

    // optional int64 storage_total = 2;
    if (has_storage_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->storage_total());
    }

    // optional int64 storage_free = 3;
    if (has_storage_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->storage_free());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolumeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VolumeInfo*>(&from));
}

void VolumeInfo::MergeFrom(const VolumeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.VolumeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_volume_id();
      volume_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      storage_total_ = from.storage_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      storage_free_ = from.storage_free_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VolumeInfo::CopyFrom(const VolumeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.VolumeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeInfo::IsInitialized() const {
  return true;
}

void VolumeInfo::Swap(VolumeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VolumeInfo::InternalSwap(VolumeInfo* other) {
  volume_id_.Swap(&other->volume_id_);
  std::swap(storage_total_, other->storage_total_);
  std::swap(storage_free_, other->storage_free_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VolumeInfo::GetTypeName() const {
  return "enterprise_management.VolumeInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VolumeInfo

// optional string volume_id = 1;
bool VolumeInfo::has_volume_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VolumeInfo::set_has_volume_id() {
  _has_bits_[0] |= 0x00000001u;
}
void VolumeInfo::clear_has_volume_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void VolumeInfo::clear_volume_id() {
  volume_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_volume_id();
}
const ::std::string& VolumeInfo::volume_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.VolumeInfo.volume_id)
  return volume_id_.GetNoArena();
}
void VolumeInfo::set_volume_id(const ::std::string& value) {
  set_has_volume_id();
  volume_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.VolumeInfo.volume_id)
}
#if LANG_CXX11
void VolumeInfo::set_volume_id(::std::string&& value) {
  set_has_volume_id();
  volume_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.VolumeInfo.volume_id)
}
#endif
void VolumeInfo::set_volume_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_volume_id();
  volume_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.VolumeInfo.volume_id)
}
void VolumeInfo::set_volume_id(const char* value, size_t size) {
  set_has_volume_id();
  volume_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.VolumeInfo.volume_id)
}
::std::string* VolumeInfo::mutable_volume_id() {
  set_has_volume_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.VolumeInfo.volume_id)
  return volume_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VolumeInfo::release_volume_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.VolumeInfo.volume_id)
  clear_has_volume_id();
  return volume_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VolumeInfo::set_allocated_volume_id(::std::string* volume_id) {
  if (volume_id != NULL) {
    set_has_volume_id();
  } else {
    clear_has_volume_id();
  }
  volume_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.VolumeInfo.volume_id)
}

// optional int64 storage_total = 2;
bool VolumeInfo::has_storage_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VolumeInfo::set_has_storage_total() {
  _has_bits_[0] |= 0x00000002u;
}
void VolumeInfo::clear_has_storage_total() {
  _has_bits_[0] &= ~0x00000002u;
}
void VolumeInfo::clear_storage_total() {
  storage_total_ = GOOGLE_LONGLONG(0);
  clear_has_storage_total();
}
::google::protobuf::int64 VolumeInfo::storage_total() const {
  // @@protoc_insertion_point(field_get:enterprise_management.VolumeInfo.storage_total)
  return storage_total_;
}
void VolumeInfo::set_storage_total(::google::protobuf::int64 value) {
  set_has_storage_total();
  storage_total_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.VolumeInfo.storage_total)
}

// optional int64 storage_free = 3;
bool VolumeInfo::has_storage_free() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VolumeInfo::set_has_storage_free() {
  _has_bits_[0] |= 0x00000004u;
}
void VolumeInfo::clear_has_storage_free() {
  _has_bits_[0] &= ~0x00000004u;
}
void VolumeInfo::clear_storage_free() {
  storage_free_ = GOOGLE_LONGLONG(0);
  clear_has_storage_free();
}
::google::protobuf::int64 VolumeInfo::storage_free() const {
  // @@protoc_insertion_point(field_get:enterprise_management.VolumeInfo.storage_free)
  return storage_free_;
}
void VolumeInfo::set_storage_free(::google::protobuf::int64 value) {
  set_has_storage_free();
  storage_free_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.VolumeInfo.storage_free)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPUTempInfo::kCpuLabelFieldNumber;
const int CPUTempInfo::kCpuTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPUTempInfo::CPUTempInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CPUTempInfo)
}
CPUTempInfo::CPUTempInfo(const CPUTempInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cpu_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cpu_label()) {
    cpu_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_label_);
  }
  cpu_temp_ = from.cpu_temp_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CPUTempInfo)
}

void CPUTempInfo::SharedCtor() {
  _cached_size_ = 0;
  cpu_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpu_temp_ = 0;
}

CPUTempInfo::~CPUTempInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.CPUTempInfo)
  SharedDtor();
}

void CPUTempInfo::SharedDtor() {
  cpu_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPUTempInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CPUTempInfo& CPUTempInfo::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPUTempInfo* CPUTempInfo::New(::google::protobuf::Arena* arena) const {
  CPUTempInfo* n = new CPUTempInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPUTempInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CPUTempInfo)
  if (has_cpu_label()) {
    GOOGLE_DCHECK(!cpu_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cpu_label_.UnsafeRawStringPointer())->clear();
  }
  cpu_temp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPUTempInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CPUTempInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cpu_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cpu_temp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cpu_temp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CPUTempInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CPUTempInfo)
  return false;
#undef DO_
}

void CPUTempInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CPUTempInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cpu_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cpu_label(), output);
  }

  // optional int32 cpu_temp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cpu_temp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CPUTempInfo)
}

size_t CPUTempInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CPUTempInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string cpu_label = 1;
    if (has_cpu_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpu_label());
    }

    // optional int32 cpu_temp = 2;
    if (has_cpu_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpu_temp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPUTempInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CPUTempInfo*>(&from));
}

void CPUTempInfo::MergeFrom(const CPUTempInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CPUTempInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cpu_label();
      cpu_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      cpu_temp_ = from.cpu_temp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPUTempInfo::CopyFrom(const CPUTempInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CPUTempInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUTempInfo::IsInitialized() const {
  return true;
}

void CPUTempInfo::Swap(CPUTempInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPUTempInfo::InternalSwap(CPUTempInfo* other) {
  cpu_label_.Swap(&other->cpu_label_);
  std::swap(cpu_temp_, other->cpu_temp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CPUTempInfo::GetTypeName() const {
  return "enterprise_management.CPUTempInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPUTempInfo

// optional string cpu_label = 1;
bool CPUTempInfo::has_cpu_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPUTempInfo::set_has_cpu_label() {
  _has_bits_[0] |= 0x00000001u;
}
void CPUTempInfo::clear_has_cpu_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPUTempInfo::clear_cpu_label() {
  cpu_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpu_label();
}
const ::std::string& CPUTempInfo::cpu_label() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CPUTempInfo.cpu_label)
  return cpu_label_.GetNoArena();
}
void CPUTempInfo::set_cpu_label(const ::std::string& value) {
  set_has_cpu_label();
  cpu_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.CPUTempInfo.cpu_label)
}
#if LANG_CXX11
void CPUTempInfo::set_cpu_label(::std::string&& value) {
  set_has_cpu_label();
  cpu_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.CPUTempInfo.cpu_label)
}
#endif
void CPUTempInfo::set_cpu_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cpu_label();
  cpu_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.CPUTempInfo.cpu_label)
}
void CPUTempInfo::set_cpu_label(const char* value, size_t size) {
  set_has_cpu_label();
  cpu_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.CPUTempInfo.cpu_label)
}
::std::string* CPUTempInfo::mutable_cpu_label() {
  set_has_cpu_label();
  // @@protoc_insertion_point(field_mutable:enterprise_management.CPUTempInfo.cpu_label)
  return cpu_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPUTempInfo::release_cpu_label() {
  // @@protoc_insertion_point(field_release:enterprise_management.CPUTempInfo.cpu_label)
  clear_has_cpu_label();
  return cpu_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPUTempInfo::set_allocated_cpu_label(::std::string* cpu_label) {
  if (cpu_label != NULL) {
    set_has_cpu_label();
  } else {
    clear_has_cpu_label();
  }
  cpu_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_label);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.CPUTempInfo.cpu_label)
}

// optional int32 cpu_temp = 2;
bool CPUTempInfo::has_cpu_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPUTempInfo::set_has_cpu_temp() {
  _has_bits_[0] |= 0x00000002u;
}
void CPUTempInfo::clear_has_cpu_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPUTempInfo::clear_cpu_temp() {
  cpu_temp_ = 0;
  clear_has_cpu_temp();
}
::google::protobuf::int32 CPUTempInfo::cpu_temp() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CPUTempInfo.cpu_temp)
  return cpu_temp_;
}
void CPUTempInfo::set_cpu_temp(::google::protobuf::int32 value) {
  set_has_cpu_temp();
  cpu_temp_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.CPUTempInfo.cpu_temp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStatusReportRequest::kOsVersionFieldNumber;
const int DeviceStatusReportRequest::kFirmwareVersionFieldNumber;
const int DeviceStatusReportRequest::kBootModeFieldNumber;
const int DeviceStatusReportRequest::kBrowserVersionFieldNumber;
const int DeviceStatusReportRequest::kActivePeriodFieldNumber;
const int DeviceStatusReportRequest::kNetworkInterfaceFieldNumber;
const int DeviceStatusReportRequest::kUserFieldNumber;
const int DeviceStatusReportRequest::kVolumeInfoFieldNumber;
const int DeviceStatusReportRequest::kNetworkStateFieldNumber;
const int DeviceStatusReportRequest::kCpuUtilizationPctFieldNumber;
const int DeviceStatusReportRequest::kSystemRamTotalFieldNumber;
const int DeviceStatusReportRequest::kSystemRamFreeFieldNumber;
const int DeviceStatusReportRequest::kCpuTempInfoFieldNumber;
const int DeviceStatusReportRequest::kOsUpdateStatusFieldNumber;
const int DeviceStatusReportRequest::kRunningKioskAppFieldNumber;
const int DeviceStatusReportRequest::kSoundVolumeFieldNumber;
const int DeviceStatusReportRequest::kTpmVersionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStatusReportRequest::DeviceStatusReportRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceStatusReportRequest)
}
DeviceStatusReportRequest::DeviceStatusReportRequest(const DeviceStatusReportRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      active_period_(from.active_period_),
      network_interface_(from.network_interface_),
      user_(from.user_),
      volume_info_(from.volume_info_),
      network_state_(from.network_state_),
      cpu_utilization_pct_(from.cpu_utilization_pct_),
      system_ram_free_(from.system_ram_free_),
      cpu_temp_info_(from.cpu_temp_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_version()) {
    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_firmware_version()) {
    firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
  }
  boot_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_boot_mode()) {
    boot_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boot_mode_);
  }
  browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_browser_version()) {
    browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
  }
  if (from.has_os_update_status()) {
    os_update_status_ = new ::enterprise_management::OsUpdateStatus(*from.os_update_status_);
  } else {
    os_update_status_ = NULL;
  }
  if (from.has_running_kiosk_app()) {
    running_kiosk_app_ = new ::enterprise_management::AppStatus(*from.running_kiosk_app_);
  } else {
    running_kiosk_app_ = NULL;
  }
  if (from.has_tpm_version_info()) {
    tpm_version_info_ = new ::enterprise_management::TpmVersionInfo(*from.tpm_version_info_);
  } else {
    tpm_version_info_ = NULL;
  }
  ::memcpy(&system_ram_total_, &from.system_ram_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&sound_volume_) -
    reinterpret_cast<char*>(&system_ram_total_)) + sizeof(sound_volume_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStatusReportRequest)
}

void DeviceStatusReportRequest::SharedCtor() {
  _cached_size_ = 0;
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boot_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&os_update_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sound_volume_) -
      reinterpret_cast<char*>(&os_update_status_)) + sizeof(sound_volume_));
}

DeviceStatusReportRequest::~DeviceStatusReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceStatusReportRequest)
  SharedDtor();
}

void DeviceStatusReportRequest::SharedDtor() {
  os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boot_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete os_update_status_;
  }
  if (this != internal_default_instance()) {
    delete running_kiosk_app_;
  }
  if (this != internal_default_instance()) {
    delete tpm_version_info_;
  }
}

void DeviceStatusReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceStatusReportRequest& DeviceStatusReportRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceStatusReportRequest* DeviceStatusReportRequest::New(::google::protobuf::Arena* arena) const {
  DeviceStatusReportRequest* n = new DeviceStatusReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceStatusReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStatusReportRequest)
  active_period_.Clear();
  network_interface_.Clear();
  user_.Clear();
  volume_info_.Clear();
  network_state_.Clear();
  cpu_utilization_pct_.Clear();
  system_ram_free_.Clear();
  cpu_temp_info_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    if (has_os_version()) {
      GOOGLE_DCHECK(!os_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*os_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_firmware_version()) {
      GOOGLE_DCHECK(!firmware_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*firmware_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_boot_mode()) {
      GOOGLE_DCHECK(!boot_mode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*boot_mode_.UnsafeRawStringPointer())->clear();
    }
    if (has_browser_version()) {
      GOOGLE_DCHECK(!browser_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*browser_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_os_update_status()) {
      GOOGLE_DCHECK(os_update_status_ != NULL);
      os_update_status_->::enterprise_management::OsUpdateStatus::Clear();
    }
    if (has_running_kiosk_app()) {
      GOOGLE_DCHECK(running_kiosk_app_ != NULL);
      running_kiosk_app_->::enterprise_management::AppStatus::Clear();
    }
    if (has_tpm_version_info()) {
      GOOGLE_DCHECK(tpm_version_info_ != NULL);
      tpm_version_info_->::enterprise_management::TpmVersionInfo::Clear();
    }
  }
  system_ram_total_ = GOOGLE_LONGLONG(0);
  sound_volume_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceStatusReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStatusReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string os_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string firmware_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string boot_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boot_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string browser_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.ActiveTimePeriod active_period = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.NetworkInterface network_interface = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_network_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.DeviceUser user = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.VolumeInfo volume_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volume_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.NetworkState network_state = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_network_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cpu_utilization_pct = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96u, input, this->mutable_cpu_utilization_pct())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cpu_utilization_pct())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 system_ram_total = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_system_ram_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &system_ram_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 system_ram_free = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 120u, input, this->mutable_system_ram_free())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(122u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_system_ram_free())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.CPUTempInfo cpu_temp_info = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cpu_temp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.OsUpdateStatus os_update_status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_os_update_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppStatus running_kiosk_app = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_running_kiosk_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sound_volume = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_sound_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.TpmVersionInfo tpm_version_info = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tpm_version_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStatusReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStatusReportRequest)
  return false;
#undef DO_
}

void DeviceStatusReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStatusReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string os_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->os_version(), output);
  }

  // optional string firmware_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firmware_version(), output);
  }

  // optional string boot_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->boot_mode(), output);
  }

  // optional string browser_version = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->browser_version(), output);
  }

  // repeated .enterprise_management.ActiveTimePeriod active_period = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_period_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->active_period(static_cast<int>(i)), output);
  }

  // repeated .enterprise_management.NetworkInterface network_interface = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->network_interface_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->network_interface(static_cast<int>(i)), output);
  }

  // repeated .enterprise_management.DeviceUser user = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->user(static_cast<int>(i)), output);
  }

  // repeated .enterprise_management.VolumeInfo volume_info = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volume_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->volume_info(static_cast<int>(i)), output);
  }

  // repeated .enterprise_management.NetworkState network_state = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->network_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->network_state(static_cast<int>(i)), output);
  }

  // repeated int32 cpu_utilization_pct = 12;
  for (int i = 0, n = this->cpu_utilization_pct_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->cpu_utilization_pct(i), output);
  }

  // optional int64 system_ram_total = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->system_ram_total(), output);
  }

  // repeated int64 system_ram_free = 15;
  for (int i = 0, n = this->system_ram_free_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      15, this->system_ram_free(i), output);
  }

  // repeated .enterprise_management.CPUTempInfo cpu_temp_info = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpu_temp_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->cpu_temp_info(static_cast<int>(i)), output);
  }

  // optional .enterprise_management.OsUpdateStatus os_update_status = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->os_update_status_, output);
  }

  // optional .enterprise_management.AppStatus running_kiosk_app = 18;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, *this->running_kiosk_app_, output);
  }

  // optional int32 sound_volume = 19;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sound_volume(), output);
  }

  // optional .enterprise_management.TpmVersionInfo tpm_version_info = 21;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, *this->tpm_version_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStatusReportRequest)
}

size_t DeviceStatusReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStatusReportRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.ActiveTimePeriod active_period = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->active_period_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->active_period(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.NetworkInterface network_interface = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->network_interface_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_interface(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.DeviceUser user = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->user_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.VolumeInfo volume_info = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->volume_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volume_info(static_cast<int>(i)));
    }
  }

  // repeated .enterprise_management.NetworkState network_state = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->network_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_state(static_cast<int>(i)));
    }
  }

  // repeated int32 cpu_utilization_pct = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cpu_utilization_pct_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cpu_utilization_pct_size());
    total_size += data_size;
  }

  // repeated int64 system_ram_free = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->system_ram_free_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->system_ram_free_size());
    total_size += data_size;
  }

  // repeated .enterprise_management.CPUTempInfo cpu_temp_info = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->cpu_temp_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cpu_temp_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string os_version = 1;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional string firmware_version = 2;
    if (has_firmware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firmware_version());
    }

    // optional string boot_mode = 3;
    if (has_boot_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boot_mode());
    }

    // optional string browser_version = 5;
    if (has_browser_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browser_version());
    }

    // optional .enterprise_management.OsUpdateStatus os_update_status = 17;
    if (has_os_update_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->os_update_status_);
    }

    // optional .enterprise_management.AppStatus running_kiosk_app = 18;
    if (has_running_kiosk_app()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->running_kiosk_app_);
    }

    // optional .enterprise_management.TpmVersionInfo tpm_version_info = 21;
    if (has_tpm_version_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tpm_version_info_);
    }

    // optional int64 system_ram_total = 14;
    if (has_system_ram_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->system_ram_total());
    }

  }
  // optional int32 sound_volume = 19;
  if (has_sound_volume()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sound_volume());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStatusReportRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceStatusReportRequest*>(&from));
}

void DeviceStatusReportRequest::MergeFrom(const DeviceStatusReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStatusReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_period_.MergeFrom(from.active_period_);
  network_interface_.MergeFrom(from.network_interface_);
  user_.MergeFrom(from.user_);
  volume_info_.MergeFrom(from.volume_info_);
  network_state_.MergeFrom(from.network_state_);
  cpu_utilization_pct_.MergeFrom(from.cpu_utilization_pct_);
  system_ram_free_.MergeFrom(from.system_ram_free_);
  cpu_temp_info_.MergeFrom(from.cpu_temp_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_os_version();
      os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_firmware_version();
      firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_boot_mode();
      boot_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boot_mode_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_browser_version();
      browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_os_update_status()->::enterprise_management::OsUpdateStatus::MergeFrom(from.os_update_status());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_running_kiosk_app()->::enterprise_management::AppStatus::MergeFrom(from.running_kiosk_app());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_tpm_version_info()->::enterprise_management::TpmVersionInfo::MergeFrom(from.tpm_version_info());
    }
    if (cached_has_bits & 0x00000080u) {
      system_ram_total_ = from.system_ram_total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_sound_volume(from.sound_volume());
  }
}

void DeviceStatusReportRequest::CopyFrom(const DeviceStatusReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStatusReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatusReportRequest::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  return true;
}

void DeviceStatusReportRequest::Swap(DeviceStatusReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceStatusReportRequest::InternalSwap(DeviceStatusReportRequest* other) {
  active_period_.InternalSwap(&other->active_period_);
  network_interface_.InternalSwap(&other->network_interface_);
  user_.InternalSwap(&other->user_);
  volume_info_.InternalSwap(&other->volume_info_);
  network_state_.InternalSwap(&other->network_state_);
  cpu_utilization_pct_.InternalSwap(&other->cpu_utilization_pct_);
  system_ram_free_.InternalSwap(&other->system_ram_free_);
  cpu_temp_info_.InternalSwap(&other->cpu_temp_info_);
  os_version_.Swap(&other->os_version_);
  firmware_version_.Swap(&other->firmware_version_);
  boot_mode_.Swap(&other->boot_mode_);
  browser_version_.Swap(&other->browser_version_);
  std::swap(os_update_status_, other->os_update_status_);
  std::swap(running_kiosk_app_, other->running_kiosk_app_);
  std::swap(tpm_version_info_, other->tpm_version_info_);
  std::swap(system_ram_total_, other->system_ram_total_);
  std::swap(sound_volume_, other->sound_volume_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceStatusReportRequest::GetTypeName() const {
  return "enterprise_management.DeviceStatusReportRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStatusReportRequest

// optional string os_version = 1;
bool DeviceStatusReportRequest::has_os_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceStatusReportRequest::set_has_os_version() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceStatusReportRequest::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceStatusReportRequest::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_version();
}
const ::std::string& DeviceStatusReportRequest::os_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.os_version)
  return os_version_.GetNoArena();
}
void DeviceStatusReportRequest::set_os_version(const ::std::string& value) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.os_version)
}
#if LANG_CXX11
void DeviceStatusReportRequest::set_os_version(::std::string&& value) {
  set_has_os_version();
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStatusReportRequest.os_version)
}
#endif
void DeviceStatusReportRequest::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.os_version)
}
void DeviceStatusReportRequest::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.os_version)
}
::std::string* DeviceStatusReportRequest::mutable_os_version() {
  set_has_os_version();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatusReportRequest::release_os_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.os_version)
  clear_has_os_version();
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    set_has_os_version();
  } else {
    clear_has_os_version();
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.os_version)
}

// optional string firmware_version = 2;
bool DeviceStatusReportRequest::has_firmware_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceStatusReportRequest::set_has_firmware_version() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceStatusReportRequest::clear_has_firmware_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceStatusReportRequest::clear_firmware_version() {
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firmware_version();
}
const ::std::string& DeviceStatusReportRequest::firmware_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.firmware_version)
  return firmware_version_.GetNoArena();
}
void DeviceStatusReportRequest::set_firmware_version(const ::std::string& value) {
  set_has_firmware_version();
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
#if LANG_CXX11
void DeviceStatusReportRequest::set_firmware_version(::std::string&& value) {
  set_has_firmware_version();
  firmware_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
#endif
void DeviceStatusReportRequest::set_firmware_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_firmware_version();
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
void DeviceStatusReportRequest::set_firmware_version(const char* value, size_t size) {
  set_has_firmware_version();
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
::std::string* DeviceStatusReportRequest::mutable_firmware_version() {
  set_has_firmware_version();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.firmware_version)
  return firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatusReportRequest::release_firmware_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.firmware_version)
  clear_has_firmware_version();
  return firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_allocated_firmware_version(::std::string* firmware_version) {
  if (firmware_version != NULL) {
    set_has_firmware_version();
  } else {
    clear_has_firmware_version();
  }
  firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_version);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.firmware_version)
}

// optional string boot_mode = 3;
bool DeviceStatusReportRequest::has_boot_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceStatusReportRequest::set_has_boot_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceStatusReportRequest::clear_has_boot_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceStatusReportRequest::clear_boot_mode() {
  boot_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_boot_mode();
}
const ::std::string& DeviceStatusReportRequest::boot_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.boot_mode)
  return boot_mode_.GetNoArena();
}
void DeviceStatusReportRequest::set_boot_mode(const ::std::string& value) {
  set_has_boot_mode();
  boot_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
#if LANG_CXX11
void DeviceStatusReportRequest::set_boot_mode(::std::string&& value) {
  set_has_boot_mode();
  boot_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
#endif
void DeviceStatusReportRequest::set_boot_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_boot_mode();
  boot_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
void DeviceStatusReportRequest::set_boot_mode(const char* value, size_t size) {
  set_has_boot_mode();
  boot_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
::std::string* DeviceStatusReportRequest::mutable_boot_mode() {
  set_has_boot_mode();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.boot_mode)
  return boot_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatusReportRequest::release_boot_mode() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.boot_mode)
  clear_has_boot_mode();
  return boot_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_allocated_boot_mode(::std::string* boot_mode) {
  if (boot_mode != NULL) {
    set_has_boot_mode();
  } else {
    clear_has_boot_mode();
  }
  boot_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boot_mode);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.boot_mode)
}

// optional string browser_version = 5;
bool DeviceStatusReportRequest::has_browser_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceStatusReportRequest::set_has_browser_version() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceStatusReportRequest::clear_has_browser_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceStatusReportRequest::clear_browser_version() {
  browser_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_browser_version();
}
const ::std::string& DeviceStatusReportRequest::browser_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.browser_version)
  return browser_version_.GetNoArena();
}
void DeviceStatusReportRequest::set_browser_version(const ::std::string& value) {
  set_has_browser_version();
  browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.browser_version)
}
#if LANG_CXX11
void DeviceStatusReportRequest::set_browser_version(::std::string&& value) {
  set_has_browser_version();
  browser_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStatusReportRequest.browser_version)
}
#endif
void DeviceStatusReportRequest::set_browser_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_browser_version();
  browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.browser_version)
}
void DeviceStatusReportRequest::set_browser_version(const char* value, size_t size) {
  set_has_browser_version();
  browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.browser_version)
}
::std::string* DeviceStatusReportRequest::mutable_browser_version() {
  set_has_browser_version();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.browser_version)
  return browser_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatusReportRequest::release_browser_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.browser_version)
  clear_has_browser_version();
  return browser_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_allocated_browser_version(::std::string* browser_version) {
  if (browser_version != NULL) {
    set_has_browser_version();
  } else {
    clear_has_browser_version();
  }
  browser_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_version);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.browser_version)
}

// repeated .enterprise_management.ActiveTimePeriod active_period = 6;
int DeviceStatusReportRequest::active_period_size() const {
  return active_period_.size();
}
void DeviceStatusReportRequest::clear_active_period() {
  active_period_.Clear();
}
const ::enterprise_management::ActiveTimePeriod& DeviceStatusReportRequest::active_period(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.active_period)
  return active_period_.Get(index);
}
::enterprise_management::ActiveTimePeriod* DeviceStatusReportRequest::mutable_active_period(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.active_period)
  return active_period_.Mutable(index);
}
::enterprise_management::ActiveTimePeriod* DeviceStatusReportRequest::add_active_period() {
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.active_period)
  return active_period_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::ActiveTimePeriod >*
DeviceStatusReportRequest::mutable_active_period() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.active_period)
  return &active_period_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::ActiveTimePeriod >&
DeviceStatusReportRequest::active_period() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.active_period)
  return active_period_;
}

// repeated .enterprise_management.NetworkInterface network_interface = 8;
int DeviceStatusReportRequest::network_interface_size() const {
  return network_interface_.size();
}
void DeviceStatusReportRequest::clear_network_interface() {
  network_interface_.Clear();
}
const ::enterprise_management::NetworkInterface& DeviceStatusReportRequest::network_interface(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.network_interface)
  return network_interface_.Get(index);
}
::enterprise_management::NetworkInterface* DeviceStatusReportRequest::mutable_network_interface(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.network_interface)
  return network_interface_.Mutable(index);
}
::enterprise_management::NetworkInterface* DeviceStatusReportRequest::add_network_interface() {
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.network_interface)
  return network_interface_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkInterface >*
DeviceStatusReportRequest::mutable_network_interface() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.network_interface)
  return &network_interface_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkInterface >&
DeviceStatusReportRequest::network_interface() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.network_interface)
  return network_interface_;
}

// repeated .enterprise_management.DeviceUser user = 9;
int DeviceStatusReportRequest::user_size() const {
  return user_.size();
}
void DeviceStatusReportRequest::clear_user() {
  user_.Clear();
}
const ::enterprise_management::DeviceUser& DeviceStatusReportRequest::user(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.user)
  return user_.Get(index);
}
::enterprise_management::DeviceUser* DeviceStatusReportRequest::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.user)
  return user_.Mutable(index);
}
::enterprise_management::DeviceUser* DeviceStatusReportRequest::add_user() {
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.user)
  return user_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::DeviceUser >*
DeviceStatusReportRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.user)
  return &user_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::DeviceUser >&
DeviceStatusReportRequest::user() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.user)
  return user_;
}

// repeated .enterprise_management.VolumeInfo volume_info = 10;
int DeviceStatusReportRequest::volume_info_size() const {
  return volume_info_.size();
}
void DeviceStatusReportRequest::clear_volume_info() {
  volume_info_.Clear();
}
const ::enterprise_management::VolumeInfo& DeviceStatusReportRequest::volume_info(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.volume_info)
  return volume_info_.Get(index);
}
::enterprise_management::VolumeInfo* DeviceStatusReportRequest::mutable_volume_info(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.volume_info)
  return volume_info_.Mutable(index);
}
::enterprise_management::VolumeInfo* DeviceStatusReportRequest::add_volume_info() {
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.volume_info)
  return volume_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >*
DeviceStatusReportRequest::mutable_volume_info() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.volume_info)
  return &volume_info_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >&
DeviceStatusReportRequest::volume_info() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.volume_info)
  return volume_info_;
}

// repeated .enterprise_management.NetworkState network_state = 11;
int DeviceStatusReportRequest::network_state_size() const {
  return network_state_.size();
}
void DeviceStatusReportRequest::clear_network_state() {
  network_state_.Clear();
}
const ::enterprise_management::NetworkState& DeviceStatusReportRequest::network_state(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.network_state)
  return network_state_.Get(index);
}
::enterprise_management::NetworkState* DeviceStatusReportRequest::mutable_network_state(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.network_state)
  return network_state_.Mutable(index);
}
::enterprise_management::NetworkState* DeviceStatusReportRequest::add_network_state() {
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.network_state)
  return network_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkState >*
DeviceStatusReportRequest::mutable_network_state() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.network_state)
  return &network_state_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::NetworkState >&
DeviceStatusReportRequest::network_state() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.network_state)
  return network_state_;
}

// repeated int32 cpu_utilization_pct = 12;
int DeviceStatusReportRequest::cpu_utilization_pct_size() const {
  return cpu_utilization_pct_.size();
}
void DeviceStatusReportRequest::clear_cpu_utilization_pct() {
  cpu_utilization_pct_.Clear();
}
::google::protobuf::int32 DeviceStatusReportRequest::cpu_utilization_pct(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
  return cpu_utilization_pct_.Get(index);
}
void DeviceStatusReportRequest::set_cpu_utilization_pct(int index, ::google::protobuf::int32 value) {
  cpu_utilization_pct_.Set(index, value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
}
void DeviceStatusReportRequest::add_cpu_utilization_pct(::google::protobuf::int32 value) {
  cpu_utilization_pct_.Add(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DeviceStatusReportRequest::cpu_utilization_pct() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
  return cpu_utilization_pct_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DeviceStatusReportRequest::mutable_cpu_utilization_pct() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
  return &cpu_utilization_pct_;
}

// optional int64 system_ram_total = 14;
bool DeviceStatusReportRequest::has_system_ram_total() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceStatusReportRequest::set_has_system_ram_total() {
  _has_bits_[0] |= 0x00000080u;
}
void DeviceStatusReportRequest::clear_has_system_ram_total() {
  _has_bits_[0] &= ~0x00000080u;
}
void DeviceStatusReportRequest::clear_system_ram_total() {
  system_ram_total_ = GOOGLE_LONGLONG(0);
  clear_has_system_ram_total();
}
::google::protobuf::int64 DeviceStatusReportRequest::system_ram_total() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.system_ram_total)
  return system_ram_total_;
}
void DeviceStatusReportRequest::set_system_ram_total(::google::protobuf::int64 value) {
  set_has_system_ram_total();
  system_ram_total_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.system_ram_total)
}

// repeated int64 system_ram_free = 15;
int DeviceStatusReportRequest::system_ram_free_size() const {
  return system_ram_free_.size();
}
void DeviceStatusReportRequest::clear_system_ram_free() {
  system_ram_free_.Clear();
}
::google::protobuf::int64 DeviceStatusReportRequest::system_ram_free(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.system_ram_free)
  return system_ram_free_.Get(index);
}
void DeviceStatusReportRequest::set_system_ram_free(int index, ::google::protobuf::int64 value) {
  system_ram_free_.Set(index, value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.system_ram_free)
}
void DeviceStatusReportRequest::add_system_ram_free(::google::protobuf::int64 value) {
  system_ram_free_.Add(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.system_ram_free)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DeviceStatusReportRequest::system_ram_free() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.system_ram_free)
  return system_ram_free_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DeviceStatusReportRequest::mutable_system_ram_free() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.system_ram_free)
  return &system_ram_free_;
}

// repeated .enterprise_management.CPUTempInfo cpu_temp_info = 16;
int DeviceStatusReportRequest::cpu_temp_info_size() const {
  return cpu_temp_info_.size();
}
void DeviceStatusReportRequest::clear_cpu_temp_info() {
  cpu_temp_info_.Clear();
}
const ::enterprise_management::CPUTempInfo& DeviceStatusReportRequest::cpu_temp_info(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
  return cpu_temp_info_.Get(index);
}
::enterprise_management::CPUTempInfo* DeviceStatusReportRequest::mutable_cpu_temp_info(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
  return cpu_temp_info_.Mutable(index);
}
::enterprise_management::CPUTempInfo* DeviceStatusReportRequest::add_cpu_temp_info() {
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
  return cpu_temp_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::CPUTempInfo >*
DeviceStatusReportRequest::mutable_cpu_temp_info() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
  return &cpu_temp_info_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::CPUTempInfo >&
DeviceStatusReportRequest::cpu_temp_info() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
  return cpu_temp_info_;
}

// optional .enterprise_management.OsUpdateStatus os_update_status = 17;
bool DeviceStatusReportRequest::has_os_update_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceStatusReportRequest::set_has_os_update_status() {
  _has_bits_[0] |= 0x00000010u;
}
void DeviceStatusReportRequest::clear_has_os_update_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeviceStatusReportRequest::clear_os_update_status() {
  if (os_update_status_ != NULL) os_update_status_->::enterprise_management::OsUpdateStatus::Clear();
  clear_has_os_update_status();
}
const ::enterprise_management::OsUpdateStatus& DeviceStatusReportRequest::os_update_status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.os_update_status)
  return os_update_status_ != NULL ? *os_update_status_
                         : *::enterprise_management::OsUpdateStatus::internal_default_instance();
}
::enterprise_management::OsUpdateStatus* DeviceStatusReportRequest::mutable_os_update_status() {
  set_has_os_update_status();
  if (os_update_status_ == NULL) {
    os_update_status_ = new ::enterprise_management::OsUpdateStatus;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.os_update_status)
  return os_update_status_;
}
::enterprise_management::OsUpdateStatus* DeviceStatusReportRequest::release_os_update_status() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.os_update_status)
  clear_has_os_update_status();
  ::enterprise_management::OsUpdateStatus* temp = os_update_status_;
  os_update_status_ = NULL;
  return temp;
}
void DeviceStatusReportRequest::set_allocated_os_update_status(::enterprise_management::OsUpdateStatus* os_update_status) {
  delete os_update_status_;
  os_update_status_ = os_update_status;
  if (os_update_status) {
    set_has_os_update_status();
  } else {
    clear_has_os_update_status();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.os_update_status)
}

// optional .enterprise_management.AppStatus running_kiosk_app = 18;
bool DeviceStatusReportRequest::has_running_kiosk_app() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceStatusReportRequest::set_has_running_kiosk_app() {
  _has_bits_[0] |= 0x00000020u;
}
void DeviceStatusReportRequest::clear_has_running_kiosk_app() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeviceStatusReportRequest::clear_running_kiosk_app() {
  if (running_kiosk_app_ != NULL) running_kiosk_app_->::enterprise_management::AppStatus::Clear();
  clear_has_running_kiosk_app();
}
const ::enterprise_management::AppStatus& DeviceStatusReportRequest::running_kiosk_app() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
  return running_kiosk_app_ != NULL ? *running_kiosk_app_
                         : *::enterprise_management::AppStatus::internal_default_instance();
}
::enterprise_management::AppStatus* DeviceStatusReportRequest::mutable_running_kiosk_app() {
  set_has_running_kiosk_app();
  if (running_kiosk_app_ == NULL) {
    running_kiosk_app_ = new ::enterprise_management::AppStatus;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
  return running_kiosk_app_;
}
::enterprise_management::AppStatus* DeviceStatusReportRequest::release_running_kiosk_app() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
  clear_has_running_kiosk_app();
  ::enterprise_management::AppStatus* temp = running_kiosk_app_;
  running_kiosk_app_ = NULL;
  return temp;
}
void DeviceStatusReportRequest::set_allocated_running_kiosk_app(::enterprise_management::AppStatus* running_kiosk_app) {
  delete running_kiosk_app_;
  running_kiosk_app_ = running_kiosk_app;
  if (running_kiosk_app) {
    set_has_running_kiosk_app();
  } else {
    clear_has_running_kiosk_app();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
}

// optional int32 sound_volume = 19;
bool DeviceStatusReportRequest::has_sound_volume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DeviceStatusReportRequest::set_has_sound_volume() {
  _has_bits_[0] |= 0x00000100u;
}
void DeviceStatusReportRequest::clear_has_sound_volume() {
  _has_bits_[0] &= ~0x00000100u;
}
void DeviceStatusReportRequest::clear_sound_volume() {
  sound_volume_ = 0;
  clear_has_sound_volume();
}
::google::protobuf::int32 DeviceStatusReportRequest::sound_volume() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.sound_volume)
  return sound_volume_;
}
void DeviceStatusReportRequest::set_sound_volume(::google::protobuf::int32 value) {
  set_has_sound_volume();
  sound_volume_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.sound_volume)
}

// optional .enterprise_management.TpmVersionInfo tpm_version_info = 21;
bool DeviceStatusReportRequest::has_tpm_version_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceStatusReportRequest::set_has_tpm_version_info() {
  _has_bits_[0] |= 0x00000040u;
}
void DeviceStatusReportRequest::clear_has_tpm_version_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void DeviceStatusReportRequest::clear_tpm_version_info() {
  if (tpm_version_info_ != NULL) tpm_version_info_->::enterprise_management::TpmVersionInfo::Clear();
  clear_has_tpm_version_info();
}
const ::enterprise_management::TpmVersionInfo& DeviceStatusReportRequest::tpm_version_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.tpm_version_info)
  return tpm_version_info_ != NULL ? *tpm_version_info_
                         : *::enterprise_management::TpmVersionInfo::internal_default_instance();
}
::enterprise_management::TpmVersionInfo* DeviceStatusReportRequest::mutable_tpm_version_info() {
  set_has_tpm_version_info();
  if (tpm_version_info_ == NULL) {
    tpm_version_info_ = new ::enterprise_management::TpmVersionInfo;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.tpm_version_info)
  return tpm_version_info_;
}
::enterprise_management::TpmVersionInfo* DeviceStatusReportRequest::release_tpm_version_info() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.tpm_version_info)
  clear_has_tpm_version_info();
  ::enterprise_management::TpmVersionInfo* temp = tpm_version_info_;
  tpm_version_info_ = NULL;
  return temp;
}
void DeviceStatusReportRequest::set_allocated_tpm_version_info(::enterprise_management::TpmVersionInfo* tpm_version_info) {
  delete tpm_version_info_;
  tpm_version_info_ = tpm_version_info;
  if (tpm_version_info) {
    set_has_tpm_version_info();
  } else {
    clear_has_tpm_version_info();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.tpm_version_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OsUpdateStatus::kUpdateStatusFieldNumber;
const int OsUpdateStatus::kNewPlatformVersionFieldNumber;
const int OsUpdateStatus::kNewRequiredPlatformVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OsUpdateStatus::OsUpdateStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.OsUpdateStatus)
}
OsUpdateStatus::OsUpdateStatus(const OsUpdateStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_platform_version()) {
    new_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_platform_version_);
  }
  new_required_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_required_platform_version()) {
    new_required_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_required_platform_version_);
  }
  update_status_ = from.update_status_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OsUpdateStatus)
}

void OsUpdateStatus::SharedCtor() {
  _cached_size_ = 0;
  new_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_required_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_status_ = 0;
}

OsUpdateStatus::~OsUpdateStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.OsUpdateStatus)
  SharedDtor();
}

void OsUpdateStatus::SharedDtor() {
  new_platform_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_required_platform_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OsUpdateStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OsUpdateStatus& OsUpdateStatus::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

OsUpdateStatus* OsUpdateStatus::New(::google::protobuf::Arena* arena) const {
  OsUpdateStatus* n = new OsUpdateStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OsUpdateStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OsUpdateStatus)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_new_platform_version()) {
      GOOGLE_DCHECK(!new_platform_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_platform_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_new_required_platform_version()) {
      GOOGLE_DCHECK(!new_required_platform_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_required_platform_version_.UnsafeRawStringPointer())->clear();
    }
  }
  update_status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OsUpdateStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.OsUpdateStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::OsUpdateStatus_UpdateStatus_IsValid(value)) {
            set_update_status(static_cast< ::enterprise_management::OsUpdateStatus_UpdateStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string new_platform_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_platform_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string new_required_platform_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_required_platform_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.OsUpdateStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.OsUpdateStatus)
  return false;
#undef DO_
}

void OsUpdateStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.OsUpdateStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->update_status(), output);
  }

  // optional string new_platform_version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->new_platform_version(), output);
  }

  // optional string new_required_platform_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->new_required_platform_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.OsUpdateStatus)
}

size_t OsUpdateStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OsUpdateStatus)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string new_platform_version = 2;
    if (has_new_platform_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_platform_version());
    }

    // optional string new_required_platform_version = 3;
    if (has_new_required_platform_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_required_platform_version());
    }

    // optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
    if (has_update_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsUpdateStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OsUpdateStatus*>(&from));
}

void OsUpdateStatus::MergeFrom(const OsUpdateStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OsUpdateStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_new_platform_version();
      new_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_platform_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_new_required_platform_version();
      new_required_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_required_platform_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      update_status_ = from.update_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OsUpdateStatus::CopyFrom(const OsUpdateStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OsUpdateStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsUpdateStatus::IsInitialized() const {
  return true;
}

void OsUpdateStatus::Swap(OsUpdateStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OsUpdateStatus::InternalSwap(OsUpdateStatus* other) {
  new_platform_version_.Swap(&other->new_platform_version_);
  new_required_platform_version_.Swap(&other->new_required_platform_version_);
  std::swap(update_status_, other->update_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OsUpdateStatus::GetTypeName() const {
  return "enterprise_management.OsUpdateStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OsUpdateStatus

// optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
bool OsUpdateStatus::has_update_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OsUpdateStatus::set_has_update_status() {
  _has_bits_[0] |= 0x00000004u;
}
void OsUpdateStatus::clear_has_update_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void OsUpdateStatus::clear_update_status() {
  update_status_ = 0;
  clear_has_update_status();
}
::enterprise_management::OsUpdateStatus_UpdateStatus OsUpdateStatus::update_status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OsUpdateStatus.update_status)
  return static_cast< ::enterprise_management::OsUpdateStatus_UpdateStatus >(update_status_);
}
void OsUpdateStatus::set_update_status(::enterprise_management::OsUpdateStatus_UpdateStatus value) {
  assert(::enterprise_management::OsUpdateStatus_UpdateStatus_IsValid(value));
  set_has_update_status();
  update_status_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.OsUpdateStatus.update_status)
}

// optional string new_platform_version = 2;
bool OsUpdateStatus::has_new_platform_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OsUpdateStatus::set_has_new_platform_version() {
  _has_bits_[0] |= 0x00000001u;
}
void OsUpdateStatus::clear_has_new_platform_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void OsUpdateStatus::clear_new_platform_version() {
  new_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_platform_version();
}
const ::std::string& OsUpdateStatus::new_platform_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OsUpdateStatus.new_platform_version)
  return new_platform_version_.GetNoArena();
}
void OsUpdateStatus::set_new_platform_version(const ::std::string& value) {
  set_has_new_platform_version();
  new_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.OsUpdateStatus.new_platform_version)
}
#if LANG_CXX11
void OsUpdateStatus::set_new_platform_version(::std::string&& value) {
  set_has_new_platform_version();
  new_platform_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.OsUpdateStatus.new_platform_version)
}
#endif
void OsUpdateStatus::set_new_platform_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_platform_version();
  new_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.OsUpdateStatus.new_platform_version)
}
void OsUpdateStatus::set_new_platform_version(const char* value, size_t size) {
  set_has_new_platform_version();
  new_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OsUpdateStatus.new_platform_version)
}
::std::string* OsUpdateStatus::mutable_new_platform_version() {
  set_has_new_platform_version();
  // @@protoc_insertion_point(field_mutable:enterprise_management.OsUpdateStatus.new_platform_version)
  return new_platform_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OsUpdateStatus::release_new_platform_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.OsUpdateStatus.new_platform_version)
  clear_has_new_platform_version();
  return new_platform_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OsUpdateStatus::set_allocated_new_platform_version(::std::string* new_platform_version) {
  if (new_platform_version != NULL) {
    set_has_new_platform_version();
  } else {
    clear_has_new_platform_version();
  }
  new_platform_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_platform_version);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.OsUpdateStatus.new_platform_version)
}

// optional string new_required_platform_version = 3;
bool OsUpdateStatus::has_new_required_platform_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OsUpdateStatus::set_has_new_required_platform_version() {
  _has_bits_[0] |= 0x00000002u;
}
void OsUpdateStatus::clear_has_new_required_platform_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void OsUpdateStatus::clear_new_required_platform_version() {
  new_required_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_required_platform_version();
}
const ::std::string& OsUpdateStatus::new_required_platform_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OsUpdateStatus.new_required_platform_version)
  return new_required_platform_version_.GetNoArena();
}
void OsUpdateStatus::set_new_required_platform_version(const ::std::string& value) {
  set_has_new_required_platform_version();
  new_required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
#if LANG_CXX11
void OsUpdateStatus::set_new_required_platform_version(::std::string&& value) {
  set_has_new_required_platform_version();
  new_required_platform_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
#endif
void OsUpdateStatus::set_new_required_platform_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_required_platform_version();
  new_required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
void OsUpdateStatus::set_new_required_platform_version(const char* value, size_t size) {
  set_has_new_required_platform_version();
  new_required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
::std::string* OsUpdateStatus::mutable_new_required_platform_version() {
  set_has_new_required_platform_version();
  // @@protoc_insertion_point(field_mutable:enterprise_management.OsUpdateStatus.new_required_platform_version)
  return new_required_platform_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OsUpdateStatus::release_new_required_platform_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.OsUpdateStatus.new_required_platform_version)
  clear_has_new_required_platform_version();
  return new_required_platform_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OsUpdateStatus::set_allocated_new_required_platform_version(::std::string* new_required_platform_version) {
  if (new_required_platform_version != NULL) {
    set_has_new_required_platform_version();
  } else {
    clear_has_new_required_platform_version();
  }
  new_required_platform_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_required_platform_version);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.OsUpdateStatus.new_required_platform_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppStatus::kAppIdFieldNumber;
const int AppStatus::kExtensionVersionFieldNumber;
const int AppStatus::kStatusFieldNumber;
const int AppStatus::kErrorFieldNumber;
const int AppStatus::kRequiredPlatformVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppStatus::AppStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppStatus)
}
AppStatus::AppStatus(const AppStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_id()) {
    app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  extension_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_version()) {
    extension_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_version_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_status()) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  required_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_required_platform_version()) {
    required_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.required_platform_version_);
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppStatus)
}

void AppStatus::SharedCtor() {
  _cached_size_ = 0;
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  required_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = false;
}

AppStatus::~AppStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppStatus)
  SharedDtor();
}

void AppStatus::SharedDtor() {
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  required_platform_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AppStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AppStatus& AppStatus::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

AppStatus* AppStatus::New(::google::protobuf::Arena* arena) const {
  AppStatus* n = new AppStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppStatus)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_app_id()) {
      GOOGLE_DCHECK(!app_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*app_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_extension_version()) {
      GOOGLE_DCHECK(!extension_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extension_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_status()) {
      GOOGLE_DCHECK(!status_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*status_.UnsafeRawStringPointer())->clear();
    }
    if (has_required_platform_version()) {
      GOOGLE_DCHECK(!required_platform_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*required_platform_version_.UnsafeRawStringPointer())->clear();
    }
  }
  error_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AppStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extension_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string required_platform_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_required_platform_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppStatus)
  return false;
#undef DO_
}

void AppStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // optional string extension_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extension_version(), output);
  }

  // optional string status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->status(), output);
  }

  // optional bool error = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->error(), output);
  }

  // optional string required_platform_version = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->required_platform_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppStatus)
}

size_t AppStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppStatus)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string extension_version = 2;
    if (has_extension_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension_version());
    }

    // optional string status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional string required_platform_version = 5;
    if (has_required_platform_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->required_platform_version());
    }

    // optional bool error = 4;
    if (has_error()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AppStatus*>(&from));
}

void AppStatus::MergeFrom(const AppStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_app_id();
      app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_extension_version();
      extension_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_required_platform_version();
      required_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.required_platform_version_);
    }
    if (cached_has_bits & 0x00000010u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppStatus::CopyFrom(const AppStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStatus::IsInitialized() const {
  return true;
}

void AppStatus::Swap(AppStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppStatus::InternalSwap(AppStatus* other) {
  app_id_.Swap(&other->app_id_);
  extension_version_.Swap(&other->extension_version_);
  status_.Swap(&other->status_);
  required_platform_version_.Swap(&other->required_platform_version_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AppStatus::GetTypeName() const {
  return "enterprise_management.AppStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppStatus

// optional string app_id = 1;
bool AppStatus::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AppStatus::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AppStatus::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AppStatus::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_id();
}
const ::std::string& AppStatus::app_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppStatus.app_id)
  return app_id_.GetNoArena();
}
void AppStatus::set_app_id(const ::std::string& value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.AppStatus.app_id)
}
#if LANG_CXX11
void AppStatus::set_app_id(::std::string&& value) {
  set_has_app_id();
  app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppStatus.app_id)
}
#endif
void AppStatus::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.app_id)
}
void AppStatus::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.app_id)
}
::std::string* AppStatus::mutable_app_id() {
  set_has_app_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppStatus::release_app_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.AppStatus.app_id)
  clear_has_app_id();
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    set_has_app_id();
  } else {
    clear_has_app_id();
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.app_id)
}

// optional string extension_version = 2;
bool AppStatus::has_extension_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AppStatus::set_has_extension_version() {
  _has_bits_[0] |= 0x00000002u;
}
void AppStatus::clear_has_extension_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void AppStatus::clear_extension_version() {
  extension_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extension_version();
}
const ::std::string& AppStatus::extension_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppStatus.extension_version)
  return extension_version_.GetNoArena();
}
void AppStatus::set_extension_version(const ::std::string& value) {
  set_has_extension_version();
  extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.AppStatus.extension_version)
}
#if LANG_CXX11
void AppStatus::set_extension_version(::std::string&& value) {
  set_has_extension_version();
  extension_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppStatus.extension_version)
}
#endif
void AppStatus::set_extension_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extension_version();
  extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.extension_version)
}
void AppStatus::set_extension_version(const char* value, size_t size) {
  set_has_extension_version();
  extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.extension_version)
}
::std::string* AppStatus::mutable_extension_version() {
  set_has_extension_version();
  // @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.extension_version)
  return extension_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppStatus::release_extension_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.AppStatus.extension_version)
  clear_has_extension_version();
  return extension_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_allocated_extension_version(::std::string* extension_version) {
  if (extension_version != NULL) {
    set_has_extension_version();
  } else {
    clear_has_extension_version();
  }
  extension_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_version);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.extension_version)
}

// optional string status = 3;
bool AppStatus::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AppStatus::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void AppStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void AppStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
const ::std::string& AppStatus::status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppStatus.status)
  return status_.GetNoArena();
}
void AppStatus::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.AppStatus.status)
}
#if LANG_CXX11
void AppStatus::set_status(::std::string&& value) {
  set_has_status();
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppStatus.status)
}
#endif
void AppStatus::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.status)
}
void AppStatus::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.status)
}
::std::string* AppStatus::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppStatus::release_status() {
  // @@protoc_insertion_point(field_release:enterprise_management.AppStatus.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.status)
}

// optional bool error = 4;
bool AppStatus::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AppStatus::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
void AppStatus::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
void AppStatus::clear_error() {
  error_ = false;
  clear_has_error();
}
bool AppStatus::error() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppStatus.error)
  return error_;
}
void AppStatus::set_error(bool value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.AppStatus.error)
}

// optional string required_platform_version = 5;
bool AppStatus::has_required_platform_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AppStatus::set_has_required_platform_version() {
  _has_bits_[0] |= 0x00000008u;
}
void AppStatus::clear_has_required_platform_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void AppStatus::clear_required_platform_version() {
  required_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_required_platform_version();
}
const ::std::string& AppStatus::required_platform_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppStatus.required_platform_version)
  return required_platform_version_.GetNoArena();
}
void AppStatus::set_required_platform_version(const ::std::string& value) {
  set_has_required_platform_version();
  required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.AppStatus.required_platform_version)
}
#if LANG_CXX11
void AppStatus::set_required_platform_version(::std::string&& value) {
  set_has_required_platform_version();
  required_platform_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppStatus.required_platform_version)
}
#endif
void AppStatus::set_required_platform_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_required_platform_version();
  required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.required_platform_version)
}
void AppStatus::set_required_platform_version(const char* value, size_t size) {
  set_has_required_platform_version();
  required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.required_platform_version)
}
::std::string* AppStatus::mutable_required_platform_version() {
  set_has_required_platform_version();
  // @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.required_platform_version)
  return required_platform_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppStatus::release_required_platform_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.AppStatus.required_platform_version)
  clear_has_required_platform_version();
  return required_platform_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_allocated_required_platform_version(::std::string* required_platform_version) {
  if (required_platform_version != NULL) {
    set_has_required_platform_version();
  } else {
    clear_has_required_platform_version();
  }
  required_platform_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), required_platform_version);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.required_platform_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeUserProfileReport::kIdFieldNumber;
const int ChromeUserProfileReport::kChromeSignedInUserFieldNumber;
const int ChromeUserProfileReport::kExtensionDataFieldNumber;
const int ChromeUserProfileReport::kPluginsFieldNumber;
const int ChromeUserProfileReport::kPolicyDataFieldNumber;
const int ChromeUserProfileReport::kPolicyFetchedTimestampFieldNumber;
const int ChromeUserProfileReport::kSafeBrowsingWarningsFieldNumber;
const int ChromeUserProfileReport::kSafeBrowsingWarningsClickThroughFieldNumber;
const int ChromeUserProfileReport::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeUserProfileReport::ChromeUserProfileReport()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChromeUserProfileReport)
}
ChromeUserProfileReport::ChromeUserProfileReport(const ChromeUserProfileReport& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  chrome_signed_in_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chrome_signed_in_user()) {
    chrome_signed_in_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_signed_in_user_);
  }
  extension_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_data()) {
    extension_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_data_);
  }
  plugins_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_plugins()) {
    plugins_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugins_);
  }
  policy_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_data()) {
    policy_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_data_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&policy_fetched_timestamp_, &from.policy_fetched_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&safe_browsing_warnings_click_through_) -
    reinterpret_cast<char*>(&policy_fetched_timestamp_)) + sizeof(safe_browsing_warnings_click_through_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeUserProfileReport)
}

void ChromeUserProfileReport::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_signed_in_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugins_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&policy_fetched_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_browsing_warnings_click_through_) -
      reinterpret_cast<char*>(&policy_fetched_timestamp_)) + sizeof(safe_browsing_warnings_click_through_));
}

ChromeUserProfileReport::~ChromeUserProfileReport() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeUserProfileReport)
  SharedDtor();
}

void ChromeUserProfileReport::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_signed_in_user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugins_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChromeUserProfileReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeUserProfileReport& ChromeUserProfileReport::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeUserProfileReport* ChromeUserProfileReport::New(::google::protobuf::Arena* arena) const {
  ChromeUserProfileReport* n = new ChromeUserProfileReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeUserProfileReport::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeUserProfileReport)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_chrome_signed_in_user()) {
      GOOGLE_DCHECK(!chrome_signed_in_user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chrome_signed_in_user_.UnsafeRawStringPointer())->clear();
    }
    if (has_extension_data()) {
      GOOGLE_DCHECK(!extension_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extension_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_plugins()) {
      GOOGLE_DCHECK(!plugins_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*plugins_.UnsafeRawStringPointer())->clear();
    }
    if (has_policy_data()) {
      GOOGLE_DCHECK(!policy_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&policy_fetched_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&safe_browsing_warnings_) -
        reinterpret_cast<char*>(&policy_fetched_timestamp_)) + sizeof(safe_browsing_warnings_));
  }
  safe_browsing_warnings_click_through_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeUserProfileReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChromeUserProfileReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chrome_signed_in_user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chrome_signed_in_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extension_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string plugins = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 policy_fetched_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_policy_fetched_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &policy_fetched_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 safe_browsing_warnings = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_safe_browsing_warnings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_browsing_warnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 safe_browsing_warnings_click_through = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_safe_browsing_warnings_click_through();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_browsing_warnings_click_through_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChromeUserProfileReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChromeUserProfileReport)
  return false;
#undef DO_
}

void ChromeUserProfileReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChromeUserProfileReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string chrome_signed_in_user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chrome_signed_in_user(), output);
  }

  // optional string extension_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->extension_data(), output);
  }

  // optional string plugins = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->plugins(), output);
  }

  // optional string policy_data = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->policy_data(), output);
  }

  // optional int64 policy_fetched_timestamp = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->policy_fetched_timestamp(), output);
  }

  // optional uint64 safe_browsing_warnings = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->safe_browsing_warnings(), output);
  }

  // optional uint64 safe_browsing_warnings_click_through = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->safe_browsing_warnings_click_through(), output);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChromeUserProfileReport)
}

size_t ChromeUserProfileReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeUserProfileReport)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string chrome_signed_in_user = 2;
    if (has_chrome_signed_in_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chrome_signed_in_user());
    }

    // optional string extension_data = 3;
    if (has_extension_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension_data());
    }

    // optional string plugins = 4;
    if (has_plugins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plugins());
    }

    // optional string policy_data = 5;
    if (has_policy_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy_data());
    }

    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 policy_fetched_timestamp = 6;
    if (has_policy_fetched_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->policy_fetched_timestamp());
    }

    // optional uint64 safe_browsing_warnings = 7;
    if (has_safe_browsing_warnings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->safe_browsing_warnings());
    }

  }
  // optional uint64 safe_browsing_warnings_click_through = 8;
  if (has_safe_browsing_warnings_click_through()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->safe_browsing_warnings_click_through());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeUserProfileReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeUserProfileReport*>(&from));
}

void ChromeUserProfileReport::MergeFrom(const ChromeUserProfileReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeUserProfileReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chrome_signed_in_user();
      chrome_signed_in_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_signed_in_user_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_extension_data();
      extension_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_data_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_plugins();
      plugins_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugins_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_policy_data();
      policy_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_data_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000040u) {
      policy_fetched_timestamp_ = from.policy_fetched_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      safe_browsing_warnings_ = from.safe_browsing_warnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_safe_browsing_warnings_click_through(from.safe_browsing_warnings_click_through());
  }
}

void ChromeUserProfileReport::CopyFrom(const ChromeUserProfileReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeUserProfileReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeUserProfileReport::IsInitialized() const {
  return true;
}

void ChromeUserProfileReport::Swap(ChromeUserProfileReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeUserProfileReport::InternalSwap(ChromeUserProfileReport* other) {
  id_.Swap(&other->id_);
  chrome_signed_in_user_.Swap(&other->chrome_signed_in_user_);
  extension_data_.Swap(&other->extension_data_);
  plugins_.Swap(&other->plugins_);
  policy_data_.Swap(&other->policy_data_);
  name_.Swap(&other->name_);
  std::swap(policy_fetched_timestamp_, other->policy_fetched_timestamp_);
  std::swap(safe_browsing_warnings_, other->safe_browsing_warnings_);
  std::swap(safe_browsing_warnings_click_through_, other->safe_browsing_warnings_click_through_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeUserProfileReport::GetTypeName() const {
  return "enterprise_management.ChromeUserProfileReport";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeUserProfileReport

// optional string id = 1;
bool ChromeUserProfileReport::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeUserProfileReport::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeUserProfileReport::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeUserProfileReport::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ChromeUserProfileReport::id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.id)
  return id_.GetNoArena();
}
void ChromeUserProfileReport::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.id)
}
#if LANG_CXX11
void ChromeUserProfileReport::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.id)
}
#endif
void ChromeUserProfileReport::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.id)
}
void ChromeUserProfileReport::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.id)
}
::std::string* ChromeUserProfileReport::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeUserProfileReport::release_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeUserProfileReport::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.id)
}

// optional string chrome_signed_in_user = 2;
bool ChromeUserProfileReport::has_chrome_signed_in_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeUserProfileReport::set_has_chrome_signed_in_user() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromeUserProfileReport::clear_has_chrome_signed_in_user() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromeUserProfileReport::clear_chrome_signed_in_user() {
  chrome_signed_in_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chrome_signed_in_user();
}
const ::std::string& ChromeUserProfileReport::chrome_signed_in_user() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
  return chrome_signed_in_user_.GetNoArena();
}
void ChromeUserProfileReport::set_chrome_signed_in_user(const ::std::string& value) {
  set_has_chrome_signed_in_user();
  chrome_signed_in_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
}
#if LANG_CXX11
void ChromeUserProfileReport::set_chrome_signed_in_user(::std::string&& value) {
  set_has_chrome_signed_in_user();
  chrome_signed_in_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
}
#endif
void ChromeUserProfileReport::set_chrome_signed_in_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chrome_signed_in_user();
  chrome_signed_in_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
}
void ChromeUserProfileReport::set_chrome_signed_in_user(const char* value, size_t size) {
  set_has_chrome_signed_in_user();
  chrome_signed_in_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
}
::std::string* ChromeUserProfileReport::mutable_chrome_signed_in_user() {
  set_has_chrome_signed_in_user();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
  return chrome_signed_in_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeUserProfileReport::release_chrome_signed_in_user() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
  clear_has_chrome_signed_in_user();
  return chrome_signed_in_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeUserProfileReport::set_allocated_chrome_signed_in_user(::std::string* chrome_signed_in_user) {
  if (chrome_signed_in_user != NULL) {
    set_has_chrome_signed_in_user();
  } else {
    clear_has_chrome_signed_in_user();
  }
  chrome_signed_in_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrome_signed_in_user);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.chrome_signed_in_user)
}

// optional string extension_data = 3;
bool ChromeUserProfileReport::has_extension_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChromeUserProfileReport::set_has_extension_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ChromeUserProfileReport::clear_has_extension_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChromeUserProfileReport::clear_extension_data() {
  extension_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extension_data();
}
const ::std::string& ChromeUserProfileReport::extension_data() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.extension_data)
  return extension_data_.GetNoArena();
}
void ChromeUserProfileReport::set_extension_data(const ::std::string& value) {
  set_has_extension_data();
  extension_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.extension_data)
}
#if LANG_CXX11
void ChromeUserProfileReport::set_extension_data(::std::string&& value) {
  set_has_extension_data();
  extension_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.extension_data)
}
#endif
void ChromeUserProfileReport::set_extension_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extension_data();
  extension_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.extension_data)
}
void ChromeUserProfileReport::set_extension_data(const char* value, size_t size) {
  set_has_extension_data();
  extension_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.extension_data)
}
::std::string* ChromeUserProfileReport::mutable_extension_data() {
  set_has_extension_data();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.extension_data)
  return extension_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeUserProfileReport::release_extension_data() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.extension_data)
  clear_has_extension_data();
  return extension_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeUserProfileReport::set_allocated_extension_data(::std::string* extension_data) {
  if (extension_data != NULL) {
    set_has_extension_data();
  } else {
    clear_has_extension_data();
  }
  extension_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_data);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.extension_data)
}

// optional string plugins = 4;
bool ChromeUserProfileReport::has_plugins() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChromeUserProfileReport::set_has_plugins() {
  _has_bits_[0] |= 0x00000008u;
}
void ChromeUserProfileReport::clear_has_plugins() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChromeUserProfileReport::clear_plugins() {
  plugins_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plugins();
}
const ::std::string& ChromeUserProfileReport::plugins() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.plugins)
  return plugins_.GetNoArena();
}
void ChromeUserProfileReport::set_plugins(const ::std::string& value) {
  set_has_plugins();
  plugins_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.plugins)
}
#if LANG_CXX11
void ChromeUserProfileReport::set_plugins(::std::string&& value) {
  set_has_plugins();
  plugins_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.plugins)
}
#endif
void ChromeUserProfileReport::set_plugins(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_plugins();
  plugins_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.plugins)
}
void ChromeUserProfileReport::set_plugins(const char* value, size_t size) {
  set_has_plugins();
  plugins_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.plugins)
}
::std::string* ChromeUserProfileReport::mutable_plugins() {
  set_has_plugins();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.plugins)
  return plugins_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeUserProfileReport::release_plugins() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.plugins)
  clear_has_plugins();
  return plugins_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeUserProfileReport::set_allocated_plugins(::std::string* plugins) {
  if (plugins != NULL) {
    set_has_plugins();
  } else {
    clear_has_plugins();
  }
  plugins_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugins);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.plugins)
}

// optional string policy_data = 5;
bool ChromeUserProfileReport::has_policy_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChromeUserProfileReport::set_has_policy_data() {
  _has_bits_[0] |= 0x00000010u;
}
void ChromeUserProfileReport::clear_has_policy_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChromeUserProfileReport::clear_policy_data() {
  policy_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_data();
}
const ::std::string& ChromeUserProfileReport::policy_data() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.policy_data)
  return policy_data_.GetNoArena();
}
void ChromeUserProfileReport::set_policy_data(const ::std::string& value) {
  set_has_policy_data();
  policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.policy_data)
}
#if LANG_CXX11
void ChromeUserProfileReport::set_policy_data(::std::string&& value) {
  set_has_policy_data();
  policy_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.policy_data)
}
#endif
void ChromeUserProfileReport::set_policy_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_data();
  policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.policy_data)
}
void ChromeUserProfileReport::set_policy_data(const char* value, size_t size) {
  set_has_policy_data();
  policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.policy_data)
}
::std::string* ChromeUserProfileReport::mutable_policy_data() {
  set_has_policy_data();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.policy_data)
  return policy_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeUserProfileReport::release_policy_data() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.policy_data)
  clear_has_policy_data();
  return policy_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeUserProfileReport::set_allocated_policy_data(::std::string* policy_data) {
  if (policy_data != NULL) {
    set_has_policy_data();
  } else {
    clear_has_policy_data();
  }
  policy_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_data);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.policy_data)
}

// optional int64 policy_fetched_timestamp = 6;
bool ChromeUserProfileReport::has_policy_fetched_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChromeUserProfileReport::set_has_policy_fetched_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void ChromeUserProfileReport::clear_has_policy_fetched_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChromeUserProfileReport::clear_policy_fetched_timestamp() {
  policy_fetched_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_policy_fetched_timestamp();
}
::google::protobuf::int64 ChromeUserProfileReport::policy_fetched_timestamp() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.policy_fetched_timestamp)
  return policy_fetched_timestamp_;
}
void ChromeUserProfileReport::set_policy_fetched_timestamp(::google::protobuf::int64 value) {
  set_has_policy_fetched_timestamp();
  policy_fetched_timestamp_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.policy_fetched_timestamp)
}

// optional uint64 safe_browsing_warnings = 7;
bool ChromeUserProfileReport::has_safe_browsing_warnings() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChromeUserProfileReport::set_has_safe_browsing_warnings() {
  _has_bits_[0] |= 0x00000080u;
}
void ChromeUserProfileReport::clear_has_safe_browsing_warnings() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChromeUserProfileReport::clear_safe_browsing_warnings() {
  safe_browsing_warnings_ = GOOGLE_ULONGLONG(0);
  clear_has_safe_browsing_warnings();
}
::google::protobuf::uint64 ChromeUserProfileReport::safe_browsing_warnings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.safe_browsing_warnings)
  return safe_browsing_warnings_;
}
void ChromeUserProfileReport::set_safe_browsing_warnings(::google::protobuf::uint64 value) {
  set_has_safe_browsing_warnings();
  safe_browsing_warnings_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.safe_browsing_warnings)
}

// optional uint64 safe_browsing_warnings_click_through = 8;
bool ChromeUserProfileReport::has_safe_browsing_warnings_click_through() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChromeUserProfileReport::set_has_safe_browsing_warnings_click_through() {
  _has_bits_[0] |= 0x00000100u;
}
void ChromeUserProfileReport::clear_has_safe_browsing_warnings_click_through() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChromeUserProfileReport::clear_safe_browsing_warnings_click_through() {
  safe_browsing_warnings_click_through_ = GOOGLE_ULONGLONG(0);
  clear_has_safe_browsing_warnings_click_through();
}
::google::protobuf::uint64 ChromeUserProfileReport::safe_browsing_warnings_click_through() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.safe_browsing_warnings_click_through)
  return safe_browsing_warnings_click_through_;
}
void ChromeUserProfileReport::set_safe_browsing_warnings_click_through(::google::protobuf::uint64 value) {
  set_has_safe_browsing_warnings_click_through();
  safe_browsing_warnings_click_through_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.safe_browsing_warnings_click_through)
}

// optional string name = 9;
bool ChromeUserProfileReport::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChromeUserProfileReport::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
void ChromeUserProfileReport::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChromeUserProfileReport::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ChromeUserProfileReport::name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeUserProfileReport.name)
  return name_.GetNoArena();
}
void ChromeUserProfileReport::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeUserProfileReport.name)
}
#if LANG_CXX11
void ChromeUserProfileReport::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeUserProfileReport.name)
}
#endif
void ChromeUserProfileReport::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ChromeUserProfileReport.name)
}
void ChromeUserProfileReport::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeUserProfileReport.name)
}
::std::string* ChromeUserProfileReport::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeUserProfileReport.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeUserProfileReport::release_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeUserProfileReport.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeUserProfileReport::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeUserProfileReport.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrowserReport::kBrowserVersionFieldNumber;
const int BrowserReport::kChannelFieldNumber;
const int BrowserReport::kExecutablePathFieldNumber;
const int BrowserReport::kChromeUserProfileReportsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrowserReport::BrowserReport()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.BrowserReport)
}
BrowserReport::BrowserReport(const BrowserReport& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      chrome_user_profile_reports_(from.chrome_user_profile_reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_browser_version()) {
    browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
  }
  executable_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_executable_path()) {
    executable_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.executable_path_);
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.BrowserReport)
}

void BrowserReport::SharedCtor() {
  _cached_size_ = 0;
  browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executable_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
}

BrowserReport::~BrowserReport() {
  // @@protoc_insertion_point(destructor:enterprise_management.BrowserReport)
  SharedDtor();
}

void BrowserReport::SharedDtor() {
  browser_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executable_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BrowserReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BrowserReport& BrowserReport::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrowserReport* BrowserReport::New(::google::protobuf::Arena* arena) const {
  BrowserReport* n = new BrowserReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrowserReport::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.BrowserReport)
  chrome_user_profile_reports_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_browser_version()) {
      GOOGLE_DCHECK(!browser_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*browser_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_executable_path()) {
      GOOGLE_DCHECK(!executable_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*executable_path_.UnsafeRawStringPointer())->clear();
    }
  }
  channel_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BrowserReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.BrowserReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string browser_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BrowserReport.Channel channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::BrowserReport_Channel_IsValid(value)) {
            set_channel(static_cast< ::enterprise_management::BrowserReport_Channel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string executable_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.ChromeUserProfileReport chrome_user_profile_reports = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chrome_user_profile_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.BrowserReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.BrowserReport)
  return false;
#undef DO_
}

void BrowserReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.BrowserReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string browser_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->browser_version(), output);
  }

  // optional .enterprise_management.BrowserReport.Channel channel = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel(), output);
  }

  // optional string executable_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->executable_path(), output);
  }

  // repeated .enterprise_management.ChromeUserProfileReport chrome_user_profile_reports = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chrome_user_profile_reports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->chrome_user_profile_reports(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.BrowserReport)
}

size_t BrowserReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.BrowserReport)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.ChromeUserProfileReport chrome_user_profile_reports = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->chrome_user_profile_reports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chrome_user_profile_reports(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string browser_version = 1;
    if (has_browser_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browser_version());
    }

    // optional string executable_path = 3;
    if (has_executable_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executable_path());
    }

    // optional .enterprise_management.BrowserReport.Channel channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrowserReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BrowserReport*>(&from));
}

void BrowserReport::MergeFrom(const BrowserReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.BrowserReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chrome_user_profile_reports_.MergeFrom(from.chrome_user_profile_reports_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_browser_version();
      browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_executable_path();
      executable_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.executable_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BrowserReport::CopyFrom(const BrowserReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.BrowserReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowserReport::IsInitialized() const {
  return true;
}

void BrowserReport::Swap(BrowserReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrowserReport::InternalSwap(BrowserReport* other) {
  chrome_user_profile_reports_.InternalSwap(&other->chrome_user_profile_reports_);
  browser_version_.Swap(&other->browser_version_);
  executable_path_.Swap(&other->executable_path_);
  std::swap(channel_, other->channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BrowserReport::GetTypeName() const {
  return "enterprise_management.BrowserReport";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrowserReport

// optional string browser_version = 1;
bool BrowserReport::has_browser_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrowserReport::set_has_browser_version() {
  _has_bits_[0] |= 0x00000001u;
}
void BrowserReport::clear_has_browser_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrowserReport::clear_browser_version() {
  browser_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_browser_version();
}
const ::std::string& BrowserReport::browser_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.BrowserReport.browser_version)
  return browser_version_.GetNoArena();
}
void BrowserReport::set_browser_version(const ::std::string& value) {
  set_has_browser_version();
  browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.BrowserReport.browser_version)
}
#if LANG_CXX11
void BrowserReport::set_browser_version(::std::string&& value) {
  set_has_browser_version();
  browser_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.BrowserReport.browser_version)
}
#endif
void BrowserReport::set_browser_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_browser_version();
  browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.BrowserReport.browser_version)
}
void BrowserReport::set_browser_version(const char* value, size_t size) {
  set_has_browser_version();
  browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.BrowserReport.browser_version)
}
::std::string* BrowserReport::mutable_browser_version() {
  set_has_browser_version();
  // @@protoc_insertion_point(field_mutable:enterprise_management.BrowserReport.browser_version)
  return browser_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BrowserReport::release_browser_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.BrowserReport.browser_version)
  clear_has_browser_version();
  return browser_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BrowserReport::set_allocated_browser_version(::std::string* browser_version) {
  if (browser_version != NULL) {
    set_has_browser_version();
  } else {
    clear_has_browser_version();
  }
  browser_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_version);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.BrowserReport.browser_version)
}

// optional .enterprise_management.BrowserReport.Channel channel = 2;
bool BrowserReport::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BrowserReport::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
void BrowserReport::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
void BrowserReport::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
::enterprise_management::BrowserReport_Channel BrowserReport::channel() const {
  // @@protoc_insertion_point(field_get:enterprise_management.BrowserReport.channel)
  return static_cast< ::enterprise_management::BrowserReport_Channel >(channel_);
}
void BrowserReport::set_channel(::enterprise_management::BrowserReport_Channel value) {
  assert(::enterprise_management::BrowserReport_Channel_IsValid(value));
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.BrowserReport.channel)
}

// optional string executable_path = 3;
bool BrowserReport::has_executable_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BrowserReport::set_has_executable_path() {
  _has_bits_[0] |= 0x00000002u;
}
void BrowserReport::clear_has_executable_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void BrowserReport::clear_executable_path() {
  executable_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_executable_path();
}
const ::std::string& BrowserReport::executable_path() const {
  // @@protoc_insertion_point(field_get:enterprise_management.BrowserReport.executable_path)
  return executable_path_.GetNoArena();
}
void BrowserReport::set_executable_path(const ::std::string& value) {
  set_has_executable_path();
  executable_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.BrowserReport.executable_path)
}
#if LANG_CXX11
void BrowserReport::set_executable_path(::std::string&& value) {
  set_has_executable_path();
  executable_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.BrowserReport.executable_path)
}
#endif
void BrowserReport::set_executable_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_executable_path();
  executable_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.BrowserReport.executable_path)
}
void BrowserReport::set_executable_path(const char* value, size_t size) {
  set_has_executable_path();
  executable_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.BrowserReport.executable_path)
}
::std::string* BrowserReport::mutable_executable_path() {
  set_has_executable_path();
  // @@protoc_insertion_point(field_mutable:enterprise_management.BrowserReport.executable_path)
  return executable_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BrowserReport::release_executable_path() {
  // @@protoc_insertion_point(field_release:enterprise_management.BrowserReport.executable_path)
  clear_has_executable_path();
  return executable_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BrowserReport::set_allocated_executable_path(::std::string* executable_path) {
  if (executable_path != NULL) {
    set_has_executable_path();
  } else {
    clear_has_executable_path();
  }
  executable_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), executable_path);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.BrowserReport.executable_path)
}

// repeated .enterprise_management.ChromeUserProfileReport chrome_user_profile_reports = 4;
int BrowserReport::chrome_user_profile_reports_size() const {
  return chrome_user_profile_reports_.size();
}
void BrowserReport::clear_chrome_user_profile_reports() {
  chrome_user_profile_reports_.Clear();
}
const ::enterprise_management::ChromeUserProfileReport& BrowserReport::chrome_user_profile_reports(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.BrowserReport.chrome_user_profile_reports)
  return chrome_user_profile_reports_.Get(index);
}
::enterprise_management::ChromeUserProfileReport* BrowserReport::mutable_chrome_user_profile_reports(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.BrowserReport.chrome_user_profile_reports)
  return chrome_user_profile_reports_.Mutable(index);
}
::enterprise_management::ChromeUserProfileReport* BrowserReport::add_chrome_user_profile_reports() {
  // @@protoc_insertion_point(field_add:enterprise_management.BrowserReport.chrome_user_profile_reports)
  return chrome_user_profile_reports_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::ChromeUserProfileReport >*
BrowserReport::mutable_chrome_user_profile_reports() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.BrowserReport.chrome_user_profile_reports)
  return &chrome_user_profile_reports_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::ChromeUserProfileReport >&
BrowserReport::chrome_user_profile_reports() const {
  // @@protoc_insertion_point(field_list:enterprise_management.BrowserReport.chrome_user_profile_reports)
  return chrome_user_profile_reports_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeDesktopReportRequest::kMachineNameFieldNumber;
const int ChromeDesktopReportRequest::kOsInfoFieldNumber;
const int ChromeDesktopReportRequest::kOsUserFieldNumber;
const int ChromeDesktopReportRequest::kBrowserReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeDesktopReportRequest::ChromeDesktopReportRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChromeDesktopReportRequest)
}
ChromeDesktopReportRequest::ChromeDesktopReportRequest(const ChromeDesktopReportRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  os_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_info()) {
    os_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_info_);
  }
  os_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_user()) {
    os_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_user_);
  }
  if (from.has_browser_report()) {
    browser_report_ = new ::enterprise_management::BrowserReport(*from.browser_report_);
  } else {
    browser_report_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeDesktopReportRequest)
}

void ChromeDesktopReportRequest::SharedCtor() {
  _cached_size_ = 0;
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_report_ = NULL;
}

ChromeDesktopReportRequest::~ChromeDesktopReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeDesktopReportRequest)
  SharedDtor();
}

void ChromeDesktopReportRequest::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete browser_report_;
  }
}

void ChromeDesktopReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeDesktopReportRequest& ChromeDesktopReportRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeDesktopReportRequest* ChromeDesktopReportRequest::New(::google::protobuf::Arena* arena) const {
  ChromeDesktopReportRequest* n = new ChromeDesktopReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeDesktopReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeDesktopReportRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_machine_name()) {
      GOOGLE_DCHECK(!machine_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_os_info()) {
      GOOGLE_DCHECK(!os_info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*os_info_.UnsafeRawStringPointer())->clear();
    }
    if (has_os_user()) {
      GOOGLE_DCHECK(!os_user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*os_user_.UnsafeRawStringPointer())->clear();
    }
    if (has_browser_report()) {
      GOOGLE_DCHECK(browser_report_ != NULL);
      browser_report_->::enterprise_management::BrowserReport::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeDesktopReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChromeDesktopReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string machine_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BrowserReport browser_report = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_browser_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChromeDesktopReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChromeDesktopReportRequest)
  return false;
#undef DO_
}

void ChromeDesktopReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChromeDesktopReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string machine_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->machine_name(), output);
  }

  // optional string os_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->os_info(), output);
  }

  // optional string os_user = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os_user(), output);
  }

  // optional .enterprise_management.BrowserReport browser_report = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->browser_report_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChromeDesktopReportRequest)
}

size_t ChromeDesktopReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeDesktopReportRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string machine_name = 1;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string os_info = 2;
    if (has_os_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_info());
    }

    // optional string os_user = 3;
    if (has_os_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_user());
    }

    // optional .enterprise_management.BrowserReport browser_report = 4;
    if (has_browser_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->browser_report_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeDesktopReportRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeDesktopReportRequest*>(&from));
}

void ChromeDesktopReportRequest::MergeFrom(const ChromeDesktopReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeDesktopReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_os_info();
      os_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_info_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_os_user();
      os_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_user_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_browser_report()->::enterprise_management::BrowserReport::MergeFrom(from.browser_report());
    }
  }
}

void ChromeDesktopReportRequest::CopyFrom(const ChromeDesktopReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeDesktopReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeDesktopReportRequest::IsInitialized() const {
  return true;
}

void ChromeDesktopReportRequest::Swap(ChromeDesktopReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeDesktopReportRequest::InternalSwap(ChromeDesktopReportRequest* other) {
  machine_name_.Swap(&other->machine_name_);
  os_info_.Swap(&other->os_info_);
  os_user_.Swap(&other->os_user_);
  std::swap(browser_report_, other->browser_report_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeDesktopReportRequest::GetTypeName() const {
  return "enterprise_management.ChromeDesktopReportRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeDesktopReportRequest

// optional string machine_name = 1;
bool ChromeDesktopReportRequest::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeDesktopReportRequest::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeDesktopReportRequest::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeDesktopReportRequest::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
const ::std::string& ChromeDesktopReportRequest::machine_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDesktopReportRequest.machine_name)
  return machine_name_.GetNoArena();
}
void ChromeDesktopReportRequest::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeDesktopReportRequest.machine_name)
}
#if LANG_CXX11
void ChromeDesktopReportRequest::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeDesktopReportRequest.machine_name)
}
#endif
void ChromeDesktopReportRequest::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ChromeDesktopReportRequest.machine_name)
}
void ChromeDesktopReportRequest::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeDesktopReportRequest.machine_name)
}
::std::string* ChromeDesktopReportRequest::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDesktopReportRequest.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeDesktopReportRequest::release_machine_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDesktopReportRequest.machine_name)
  clear_has_machine_name();
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeDesktopReportRequest::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDesktopReportRequest.machine_name)
}

// optional string os_info = 2;
bool ChromeDesktopReportRequest::has_os_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeDesktopReportRequest::set_has_os_info() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromeDesktopReportRequest::clear_has_os_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromeDesktopReportRequest::clear_os_info() {
  os_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_info();
}
const ::std::string& ChromeDesktopReportRequest::os_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDesktopReportRequest.os_info)
  return os_info_.GetNoArena();
}
void ChromeDesktopReportRequest::set_os_info(const ::std::string& value) {
  set_has_os_info();
  os_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeDesktopReportRequest.os_info)
}
#if LANG_CXX11
void ChromeDesktopReportRequest::set_os_info(::std::string&& value) {
  set_has_os_info();
  os_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeDesktopReportRequest.os_info)
}
#endif
void ChromeDesktopReportRequest::set_os_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os_info();
  os_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ChromeDesktopReportRequest.os_info)
}
void ChromeDesktopReportRequest::set_os_info(const char* value, size_t size) {
  set_has_os_info();
  os_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeDesktopReportRequest.os_info)
}
::std::string* ChromeDesktopReportRequest::mutable_os_info() {
  set_has_os_info();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDesktopReportRequest.os_info)
  return os_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeDesktopReportRequest::release_os_info() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDesktopReportRequest.os_info)
  clear_has_os_info();
  return os_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeDesktopReportRequest::set_allocated_os_info(::std::string* os_info) {
  if (os_info != NULL) {
    set_has_os_info();
  } else {
    clear_has_os_info();
  }
  os_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_info);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDesktopReportRequest.os_info)
}

// optional string os_user = 3;
bool ChromeDesktopReportRequest::has_os_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChromeDesktopReportRequest::set_has_os_user() {
  _has_bits_[0] |= 0x00000004u;
}
void ChromeDesktopReportRequest::clear_has_os_user() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChromeDesktopReportRequest::clear_os_user() {
  os_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_user();
}
const ::std::string& ChromeDesktopReportRequest::os_user() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDesktopReportRequest.os_user)
  return os_user_.GetNoArena();
}
void ChromeDesktopReportRequest::set_os_user(const ::std::string& value) {
  set_has_os_user();
  os_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ChromeDesktopReportRequest.os_user)
}
#if LANG_CXX11
void ChromeDesktopReportRequest::set_os_user(::std::string&& value) {
  set_has_os_user();
  os_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ChromeDesktopReportRequest.os_user)
}
#endif
void ChromeDesktopReportRequest::set_os_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os_user();
  os_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ChromeDesktopReportRequest.os_user)
}
void ChromeDesktopReportRequest::set_os_user(const char* value, size_t size) {
  set_has_os_user();
  os_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ChromeDesktopReportRequest.os_user)
}
::std::string* ChromeDesktopReportRequest::mutable_os_user() {
  set_has_os_user();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDesktopReportRequest.os_user)
  return os_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeDesktopReportRequest::release_os_user() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDesktopReportRequest.os_user)
  clear_has_os_user();
  return os_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeDesktopReportRequest::set_allocated_os_user(::std::string* os_user) {
  if (os_user != NULL) {
    set_has_os_user();
  } else {
    clear_has_os_user();
  }
  os_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_user);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDesktopReportRequest.os_user)
}

// optional .enterprise_management.BrowserReport browser_report = 4;
bool ChromeDesktopReportRequest::has_browser_report() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChromeDesktopReportRequest::set_has_browser_report() {
  _has_bits_[0] |= 0x00000008u;
}
void ChromeDesktopReportRequest::clear_has_browser_report() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChromeDesktopReportRequest::clear_browser_report() {
  if (browser_report_ != NULL) browser_report_->::enterprise_management::BrowserReport::Clear();
  clear_has_browser_report();
}
const ::enterprise_management::BrowserReport& ChromeDesktopReportRequest::browser_report() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDesktopReportRequest.browser_report)
  return browser_report_ != NULL ? *browser_report_
                         : *::enterprise_management::BrowserReport::internal_default_instance();
}
::enterprise_management::BrowserReport* ChromeDesktopReportRequest::mutable_browser_report() {
  set_has_browser_report();
  if (browser_report_ == NULL) {
    browser_report_ = new ::enterprise_management::BrowserReport;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDesktopReportRequest.browser_report)
  return browser_report_;
}
::enterprise_management::BrowserReport* ChromeDesktopReportRequest::release_browser_report() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDesktopReportRequest.browser_report)
  clear_has_browser_report();
  ::enterprise_management::BrowserReport* temp = browser_report_;
  browser_report_ = NULL;
  return temp;
}
void ChromeDesktopReportRequest::set_allocated_browser_report(::enterprise_management::BrowserReport* browser_report) {
  delete browser_report_;
  browser_report_ = browser_report;
  if (browser_report) {
    set_has_browser_report();
  } else {
    clear_has_browser_report();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDesktopReportRequest.browser_report)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyValueValidationResult::kPolicyProtoTagFieldNumber;
const int PolicyValueValidationResult::kSeverityFieldNumber;
const int PolicyValueValidationResult::kDetailedErrorPathFieldNumber;
const int PolicyValueValidationResult::kErrorTypeFieldNumber;
const int PolicyValueValidationResult::kErrorDebugInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyValueValidationResult::PolicyValueValidationResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyValueValidationResult)
}
PolicyValueValidationResult::PolicyValueValidationResult(const PolicyValueValidationResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detailed_error_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detailed_error_path()) {
    detailed_error_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detailed_error_path_);
  }
  error_debug_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_debug_info()) {
    error_debug_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_debug_info_);
  }
  ::memcpy(&policy_proto_tag_, &from.policy_proto_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_type_) -
    reinterpret_cast<char*>(&policy_proto_tag_)) + sizeof(error_type_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyValueValidationResult)
}

void PolicyValueValidationResult::SharedCtor() {
  _cached_size_ = 0;
  detailed_error_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_debug_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&policy_proto_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_type_) -
      reinterpret_cast<char*>(&policy_proto_tag_)) + sizeof(error_type_));
}

PolicyValueValidationResult::~PolicyValueValidationResult() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyValueValidationResult)
  SharedDtor();
}

void PolicyValueValidationResult::SharedDtor() {
  detailed_error_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_debug_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PolicyValueValidationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolicyValueValidationResult& PolicyValueValidationResult::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

PolicyValueValidationResult* PolicyValueValidationResult::New(::google::protobuf::Arena* arena) const {
  PolicyValueValidationResult* n = new PolicyValueValidationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolicyValueValidationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyValueValidationResult)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_detailed_error_path()) {
      GOOGLE_DCHECK(!detailed_error_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*detailed_error_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_error_debug_info()) {
      GOOGLE_DCHECK(!error_debug_info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_debug_info_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&policy_proto_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_type_) -
        reinterpret_cast<char*>(&policy_proto_tag_)) + sizeof(error_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PolicyValueValidationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyValueValidationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 policy_proto_tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_policy_proto_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &policy_proto_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyValueValidationResult.ValidationResultSeverity severity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity_IsValid(value)) {
            set_severity(static_cast< ::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string detailed_error_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detailed_error_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyValueValidationResult.ErrorType error_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyValueValidationResult_ErrorType_IsValid(value)) {
            set_error_type(static_cast< ::enterprise_management::PolicyValueValidationResult_ErrorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_debug_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyValueValidationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyValueValidationResult)
  return false;
#undef DO_
}

void PolicyValueValidationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyValueValidationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 policy_proto_tag = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->policy_proto_tag(), output);
  }

  // optional .enterprise_management.PolicyValueValidationResult.ValidationResultSeverity severity = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->severity(), output);
  }

  // optional string detailed_error_path = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->detailed_error_path(), output);
  }

  // optional .enterprise_management.PolicyValueValidationResult.ErrorType error_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error_type(), output);
  }

  // optional string error_debug_info = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->error_debug_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyValueValidationResult)
}

size_t PolicyValueValidationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyValueValidationResult)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string detailed_error_path = 3;
    if (has_detailed_error_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detailed_error_path());
    }

    // optional string error_debug_info = 5;
    if (has_error_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_debug_info());
    }

    // optional int32 policy_proto_tag = 1;
    if (has_policy_proto_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->policy_proto_tag());
    }

    // optional .enterprise_management.PolicyValueValidationResult.ValidationResultSeverity severity = 2;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
    }

    // optional .enterprise_management.PolicyValueValidationResult.ErrorType error_type = 4;
    if (has_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyValueValidationResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PolicyValueValidationResult*>(&from));
}

void PolicyValueValidationResult::MergeFrom(const PolicyValueValidationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyValueValidationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_detailed_error_path();
      detailed_error_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detailed_error_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_error_debug_info();
      error_debug_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_debug_info_);
    }
    if (cached_has_bits & 0x00000004u) {
      policy_proto_tag_ = from.policy_proto_tag_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      error_type_ = from.error_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyValueValidationResult::CopyFrom(const PolicyValueValidationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyValueValidationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyValueValidationResult::IsInitialized() const {
  return true;
}

void PolicyValueValidationResult::Swap(PolicyValueValidationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyValueValidationResult::InternalSwap(PolicyValueValidationResult* other) {
  detailed_error_path_.Swap(&other->detailed_error_path_);
  error_debug_info_.Swap(&other->error_debug_info_);
  std::swap(policy_proto_tag_, other->policy_proto_tag_);
  std::swap(severity_, other->severity_);
  std::swap(error_type_, other->error_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PolicyValueValidationResult::GetTypeName() const {
  return "enterprise_management.PolicyValueValidationResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyValueValidationResult

// optional int32 policy_proto_tag = 1;
bool PolicyValueValidationResult::has_policy_proto_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolicyValueValidationResult::set_has_policy_proto_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void PolicyValueValidationResult::clear_has_policy_proto_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void PolicyValueValidationResult::clear_policy_proto_tag() {
  policy_proto_tag_ = 0;
  clear_has_policy_proto_tag();
}
::google::protobuf::int32 PolicyValueValidationResult::policy_proto_tag() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyValueValidationResult.policy_proto_tag)
  return policy_proto_tag_;
}
void PolicyValueValidationResult::set_policy_proto_tag(::google::protobuf::int32 value) {
  set_has_policy_proto_tag();
  policy_proto_tag_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyValueValidationResult.policy_proto_tag)
}

// optional .enterprise_management.PolicyValueValidationResult.ValidationResultSeverity severity = 2;
bool PolicyValueValidationResult::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PolicyValueValidationResult::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
void PolicyValueValidationResult::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
void PolicyValueValidationResult::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity PolicyValueValidationResult::severity() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyValueValidationResult.severity)
  return static_cast< ::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity >(severity_);
}
void PolicyValueValidationResult::set_severity(::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity value) {
  assert(::enterprise_management::PolicyValueValidationResult_ValidationResultSeverity_IsValid(value));
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyValueValidationResult.severity)
}

// optional string detailed_error_path = 3;
bool PolicyValueValidationResult::has_detailed_error_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolicyValueValidationResult::set_has_detailed_error_path() {
  _has_bits_[0] |= 0x00000001u;
}
void PolicyValueValidationResult::clear_has_detailed_error_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void PolicyValueValidationResult::clear_detailed_error_path() {
  detailed_error_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_detailed_error_path();
}
const ::std::string& PolicyValueValidationResult::detailed_error_path() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyValueValidationResult.detailed_error_path)
  return detailed_error_path_.GetNoArena();
}
void PolicyValueValidationResult::set_detailed_error_path(const ::std::string& value) {
  set_has_detailed_error_path();
  detailed_error_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyValueValidationResult.detailed_error_path)
}
#if LANG_CXX11
void PolicyValueValidationResult::set_detailed_error_path(::std::string&& value) {
  set_has_detailed_error_path();
  detailed_error_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyValueValidationResult.detailed_error_path)
}
#endif
void PolicyValueValidationResult::set_detailed_error_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_detailed_error_path();
  detailed_error_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyValueValidationResult.detailed_error_path)
}
void PolicyValueValidationResult::set_detailed_error_path(const char* value, size_t size) {
  set_has_detailed_error_path();
  detailed_error_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyValueValidationResult.detailed_error_path)
}
::std::string* PolicyValueValidationResult::mutable_detailed_error_path() {
  set_has_detailed_error_path();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyValueValidationResult.detailed_error_path)
  return detailed_error_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyValueValidationResult::release_detailed_error_path() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyValueValidationResult.detailed_error_path)
  clear_has_detailed_error_path();
  return detailed_error_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyValueValidationResult::set_allocated_detailed_error_path(::std::string* detailed_error_path) {
  if (detailed_error_path != NULL) {
    set_has_detailed_error_path();
  } else {
    clear_has_detailed_error_path();
  }
  detailed_error_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detailed_error_path);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyValueValidationResult.detailed_error_path)
}

// optional .enterprise_management.PolicyValueValidationResult.ErrorType error_type = 4;
bool PolicyValueValidationResult::has_error_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PolicyValueValidationResult::set_has_error_type() {
  _has_bits_[0] |= 0x00000010u;
}
void PolicyValueValidationResult::clear_has_error_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void PolicyValueValidationResult::clear_error_type() {
  error_type_ = 0;
  clear_has_error_type();
}
::enterprise_management::PolicyValueValidationResult_ErrorType PolicyValueValidationResult::error_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyValueValidationResult.error_type)
  return static_cast< ::enterprise_management::PolicyValueValidationResult_ErrorType >(error_type_);
}
void PolicyValueValidationResult::set_error_type(::enterprise_management::PolicyValueValidationResult_ErrorType value) {
  assert(::enterprise_management::PolicyValueValidationResult_ErrorType_IsValid(value));
  set_has_error_type();
  error_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyValueValidationResult.error_type)
}

// optional string error_debug_info = 5;
bool PolicyValueValidationResult::has_error_debug_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolicyValueValidationResult::set_has_error_debug_info() {
  _has_bits_[0] |= 0x00000002u;
}
void PolicyValueValidationResult::clear_has_error_debug_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void PolicyValueValidationResult::clear_error_debug_info() {
  error_debug_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_debug_info();
}
const ::std::string& PolicyValueValidationResult::error_debug_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyValueValidationResult.error_debug_info)
  return error_debug_info_.GetNoArena();
}
void PolicyValueValidationResult::set_error_debug_info(const ::std::string& value) {
  set_has_error_debug_info();
  error_debug_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyValueValidationResult.error_debug_info)
}
#if LANG_CXX11
void PolicyValueValidationResult::set_error_debug_info(::std::string&& value) {
  set_has_error_debug_info();
  error_debug_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyValueValidationResult.error_debug_info)
}
#endif
void PolicyValueValidationResult::set_error_debug_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_debug_info();
  error_debug_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyValueValidationResult.error_debug_info)
}
void PolicyValueValidationResult::set_error_debug_info(const char* value, size_t size) {
  set_has_error_debug_info();
  error_debug_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyValueValidationResult.error_debug_info)
}
::std::string* PolicyValueValidationResult::mutable_error_debug_info() {
  set_has_error_debug_info();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyValueValidationResult.error_debug_info)
  return error_debug_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyValueValidationResult::release_error_debug_info() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyValueValidationResult.error_debug_info)
  clear_has_error_debug_info();
  return error_debug_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyValueValidationResult::set_allocated_error_debug_info(::std::string* error_debug_info) {
  if (error_debug_info != NULL) {
    set_has_error_debug_info();
  } else {
    clear_has_error_debug_info();
  }
  error_debug_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_debug_info);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyValueValidationResult.error_debug_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyValidationReportRequest::kPolicyTypeFieldNumber;
const int PolicyValidationReportRequest::kPolicyTokenFieldNumber;
const int PolicyValidationReportRequest::kValidationResultTypeFieldNumber;
const int PolicyValidationReportRequest::kPolicyValueValidationResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyValidationReportRequest::PolicyValidationReportRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyValidationReportRequest)
}
PolicyValidationReportRequest::PolicyValidationReportRequest(const PolicyValidationReportRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      policy_value_validation_results_(from.policy_value_validation_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_type()) {
    policy_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
  }
  policy_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy_token()) {
    policy_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_token_);
  }
  validation_result_type_ = from.validation_result_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyValidationReportRequest)
}

void PolicyValidationReportRequest::SharedCtor() {
  _cached_size_ = 0;
  policy_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validation_result_type_ = 0;
}

PolicyValidationReportRequest::~PolicyValidationReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyValidationReportRequest)
  SharedDtor();
}

void PolicyValidationReportRequest::SharedDtor() {
  policy_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PolicyValidationReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolicyValidationReportRequest& PolicyValidationReportRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

PolicyValidationReportRequest* PolicyValidationReportRequest::New(::google::protobuf::Arena* arena) const {
  PolicyValidationReportRequest* n = new PolicyValidationReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolicyValidationReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyValidationReportRequest)
  policy_value_validation_results_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_policy_type()) {
      GOOGLE_DCHECK(!policy_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_policy_token()) {
      GOOGLE_DCHECK(!policy_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_token_.UnsafeRawStringPointer())->clear();
    }
  }
  validation_result_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PolicyValidationReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyValidationReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyValidationReportRequest.ValidationResultType validation_result_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::PolicyValidationReportRequest_ValidationResultType_IsValid(value)) {
            set_validation_result_type(static_cast< ::enterprise_management::PolicyValidationReportRequest_ValidationResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.PolicyValueValidationResult policy_value_validation_results = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_policy_value_validation_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyValidationReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyValidationReportRequest)
  return false;
#undef DO_
}

void PolicyValidationReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyValidationReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy_type(), output);
  }

  // optional string policy_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->policy_token(), output);
  }

  // optional .enterprise_management.PolicyValidationReportRequest.ValidationResultType validation_result_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->validation_result_type(), output);
  }

  // repeated .enterprise_management.PolicyValueValidationResult policy_value_validation_results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->policy_value_validation_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->policy_value_validation_results(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyValidationReportRequest)
}

size_t PolicyValidationReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyValidationReportRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.PolicyValueValidationResult policy_value_validation_results = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->policy_value_validation_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->policy_value_validation_results(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string policy_type = 1;
    if (has_policy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy_type());
    }

    // optional string policy_token = 2;
    if (has_policy_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy_token());
    }

    // optional .enterprise_management.PolicyValidationReportRequest.ValidationResultType validation_result_type = 3;
    if (has_validation_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->validation_result_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyValidationReportRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PolicyValidationReportRequest*>(&from));
}

void PolicyValidationReportRequest::MergeFrom(const PolicyValidationReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyValidationReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  policy_value_validation_results_.MergeFrom(from.policy_value_validation_results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_policy_type();
      policy_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_policy_token();
      policy_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      validation_result_type_ = from.validation_result_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolicyValidationReportRequest::CopyFrom(const PolicyValidationReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyValidationReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyValidationReportRequest::IsInitialized() const {
  return true;
}

void PolicyValidationReportRequest::Swap(PolicyValidationReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyValidationReportRequest::InternalSwap(PolicyValidationReportRequest* other) {
  policy_value_validation_results_.InternalSwap(&other->policy_value_validation_results_);
  policy_type_.Swap(&other->policy_type_);
  policy_token_.Swap(&other->policy_token_);
  std::swap(validation_result_type_, other->validation_result_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PolicyValidationReportRequest::GetTypeName() const {
  return "enterprise_management.PolicyValidationReportRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyValidationReportRequest

// optional string policy_type = 1;
bool PolicyValidationReportRequest::has_policy_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolicyValidationReportRequest::set_has_policy_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PolicyValidationReportRequest::clear_has_policy_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PolicyValidationReportRequest::clear_policy_type() {
  policy_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_type();
}
const ::std::string& PolicyValidationReportRequest::policy_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyValidationReportRequest.policy_type)
  return policy_type_.GetNoArena();
}
void PolicyValidationReportRequest::set_policy_type(const ::std::string& value) {
  set_has_policy_type();
  policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyValidationReportRequest.policy_type)
}
#if LANG_CXX11
void PolicyValidationReportRequest::set_policy_type(::std::string&& value) {
  set_has_policy_type();
  policy_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyValidationReportRequest.policy_type)
}
#endif
void PolicyValidationReportRequest::set_policy_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_type();
  policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyValidationReportRequest.policy_type)
}
void PolicyValidationReportRequest::set_policy_type(const char* value, size_t size) {
  set_has_policy_type();
  policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyValidationReportRequest.policy_type)
}
::std::string* PolicyValidationReportRequest::mutable_policy_type() {
  set_has_policy_type();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyValidationReportRequest.policy_type)
  return policy_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyValidationReportRequest::release_policy_type() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyValidationReportRequest.policy_type)
  clear_has_policy_type();
  return policy_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyValidationReportRequest::set_allocated_policy_type(::std::string* policy_type) {
  if (policy_type != NULL) {
    set_has_policy_type();
  } else {
    clear_has_policy_type();
  }
  policy_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_type);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyValidationReportRequest.policy_type)
}

// optional string policy_token = 2;
bool PolicyValidationReportRequest::has_policy_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolicyValidationReportRequest::set_has_policy_token() {
  _has_bits_[0] |= 0x00000002u;
}
void PolicyValidationReportRequest::clear_has_policy_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void PolicyValidationReportRequest::clear_policy_token() {
  policy_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy_token();
}
const ::std::string& PolicyValidationReportRequest::policy_token() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyValidationReportRequest.policy_token)
  return policy_token_.GetNoArena();
}
void PolicyValidationReportRequest::set_policy_token(const ::std::string& value) {
  set_has_policy_token();
  policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyValidationReportRequest.policy_token)
}
#if LANG_CXX11
void PolicyValidationReportRequest::set_policy_token(::std::string&& value) {
  set_has_policy_token();
  policy_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicyValidationReportRequest.policy_token)
}
#endif
void PolicyValidationReportRequest::set_policy_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_token();
  policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyValidationReportRequest.policy_token)
}
void PolicyValidationReportRequest::set_policy_token(const char* value, size_t size) {
  set_has_policy_token();
  policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyValidationReportRequest.policy_token)
}
::std::string* PolicyValidationReportRequest::mutable_policy_token() {
  set_has_policy_token();
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyValidationReportRequest.policy_token)
  return policy_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyValidationReportRequest::release_policy_token() {
  // @@protoc_insertion_point(field_release:enterprise_management.PolicyValidationReportRequest.policy_token)
  clear_has_policy_token();
  return policy_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyValidationReportRequest::set_allocated_policy_token(::std::string* policy_token) {
  if (policy_token != NULL) {
    set_has_policy_token();
  } else {
    clear_has_policy_token();
  }
  policy_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyValidationReportRequest.policy_token)
}

// optional .enterprise_management.PolicyValidationReportRequest.ValidationResultType validation_result_type = 3;
bool PolicyValidationReportRequest::has_validation_result_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolicyValidationReportRequest::set_has_validation_result_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PolicyValidationReportRequest::clear_has_validation_result_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PolicyValidationReportRequest::clear_validation_result_type() {
  validation_result_type_ = 0;
  clear_has_validation_result_type();
}
::enterprise_management::PolicyValidationReportRequest_ValidationResultType PolicyValidationReportRequest::validation_result_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyValidationReportRequest.validation_result_type)
  return static_cast< ::enterprise_management::PolicyValidationReportRequest_ValidationResultType >(validation_result_type_);
}
void PolicyValidationReportRequest::set_validation_result_type(::enterprise_management::PolicyValidationReportRequest_ValidationResultType value) {
  assert(::enterprise_management::PolicyValidationReportRequest_ValidationResultType_IsValid(value));
  set_has_validation_result_type();
  validation_result_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.PolicyValidationReportRequest.validation_result_type)
}

// repeated .enterprise_management.PolicyValueValidationResult policy_value_validation_results = 4;
int PolicyValidationReportRequest::policy_value_validation_results_size() const {
  return policy_value_validation_results_.size();
}
void PolicyValidationReportRequest::clear_policy_value_validation_results() {
  policy_value_validation_results_.Clear();
}
const ::enterprise_management::PolicyValueValidationResult& PolicyValidationReportRequest::policy_value_validation_results(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.PolicyValidationReportRequest.policy_value_validation_results)
  return policy_value_validation_results_.Get(index);
}
::enterprise_management::PolicyValueValidationResult* PolicyValidationReportRequest::mutable_policy_value_validation_results(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyValidationReportRequest.policy_value_validation_results)
  return policy_value_validation_results_.Mutable(index);
}
::enterprise_management::PolicyValueValidationResult* PolicyValidationReportRequest::add_policy_value_validation_results() {
  // @@protoc_insertion_point(field_add:enterprise_management.PolicyValidationReportRequest.policy_value_validation_results)
  return policy_value_validation_results_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyValueValidationResult >*
PolicyValidationReportRequest::mutable_policy_value_validation_results() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.PolicyValidationReportRequest.policy_value_validation_results)
  return &policy_value_validation_results_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::PolicyValueValidationResult >&
PolicyValidationReportRequest::policy_value_validation_results() const {
  // @@protoc_insertion_point(field_list:enterprise_management.PolicyValidationReportRequest.policy_value_validation_results)
  return policy_value_validation_results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyValidationReportResponse::PolicyValidationReportResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.PolicyValidationReportResponse)
}
PolicyValidationReportResponse::PolicyValidationReportResponse(const PolicyValidationReportResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyValidationReportResponse)
}

void PolicyValidationReportResponse::SharedCtor() {
  _cached_size_ = 0;
}

PolicyValidationReportResponse::~PolicyValidationReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyValidationReportResponse)
  SharedDtor();
}

void PolicyValidationReportResponse::SharedDtor() {
}

void PolicyValidationReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolicyValidationReportResponse& PolicyValidationReportResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

PolicyValidationReportResponse* PolicyValidationReportResponse::New(::google::protobuf::Arena* arena) const {
  PolicyValidationReportResponse* n = new PolicyValidationReportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolicyValidationReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyValidationReportResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PolicyValidationReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.PolicyValidationReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.PolicyValidationReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyValidationReportResponse)
  return false;
#undef DO_
}

void PolicyValidationReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyValidationReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyValidationReportResponse)
}

size_t PolicyValidationReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyValidationReportResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyValidationReportResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PolicyValidationReportResponse*>(&from));
}

void PolicyValidationReportResponse::MergeFrom(const PolicyValidationReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyValidationReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PolicyValidationReportResponse::CopyFrom(const PolicyValidationReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyValidationReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyValidationReportResponse::IsInitialized() const {
  return true;
}

void PolicyValidationReportResponse::Swap(PolicyValidationReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyValidationReportResponse::InternalSwap(PolicyValidationReportResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PolicyValidationReportResponse::GetTypeName() const {
  return "enterprise_management.PolicyValidationReportResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyValidationReportResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndroidStatus::kStatusPayloadFieldNumber;
const int AndroidStatus::kDroidGuardInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndroidStatus::AndroidStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AndroidStatus)
}
AndroidStatus::AndroidStatus(const AndroidStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_status_payload()) {
    status_payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_payload_);
  }
  droid_guard_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_droid_guard_info()) {
    droid_guard_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.droid_guard_info_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AndroidStatus)
}

void AndroidStatus::SharedCtor() {
  _cached_size_ = 0;
  status_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  droid_guard_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AndroidStatus::~AndroidStatus() {
  // @@protoc_insertion_point(destructor:enterprise_management.AndroidStatus)
  SharedDtor();
}

void AndroidStatus::SharedDtor() {
  status_payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  droid_guard_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AndroidStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AndroidStatus& AndroidStatus::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

AndroidStatus* AndroidStatus::New(::google::protobuf::Arena* arena) const {
  AndroidStatus* n = new AndroidStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AndroidStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AndroidStatus)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_status_payload()) {
      GOOGLE_DCHECK(!status_payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*status_payload_.UnsafeRawStringPointer())->clear();
    }
    if (has_droid_guard_info()) {
      GOOGLE_DCHECK(!droid_guard_info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*droid_guard_info_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AndroidStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AndroidStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string status_payload = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string droid_guard_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_droid_guard_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AndroidStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AndroidStatus)
  return false;
#undef DO_
}

void AndroidStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AndroidStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string status_payload = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status_payload(), output);
  }

  // optional string droid_guard_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->droid_guard_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AndroidStatus)
}

size_t AndroidStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AndroidStatus)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string status_payload = 1;
    if (has_status_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_payload());
    }

    // optional string droid_guard_info = 2;
    if (has_droid_guard_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->droid_guard_info());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndroidStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AndroidStatus*>(&from));
}

void AndroidStatus::MergeFrom(const AndroidStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AndroidStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_status_payload();
      status_payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_droid_guard_info();
      droid_guard_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.droid_guard_info_);
    }
  }
}

void AndroidStatus::CopyFrom(const AndroidStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AndroidStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidStatus::IsInitialized() const {
  return true;
}

void AndroidStatus::Swap(AndroidStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndroidStatus::InternalSwap(AndroidStatus* other) {
  status_payload_.Swap(&other->status_payload_);
  droid_guard_info_.Swap(&other->droid_guard_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AndroidStatus::GetTypeName() const {
  return "enterprise_management.AndroidStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AndroidStatus

// optional string status_payload = 1;
bool AndroidStatus::has_status_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AndroidStatus::set_has_status_payload() {
  _has_bits_[0] |= 0x00000001u;
}
void AndroidStatus::clear_has_status_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
void AndroidStatus::clear_status_payload() {
  status_payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status_payload();
}
const ::std::string& AndroidStatus::status_payload() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AndroidStatus.status_payload)
  return status_payload_.GetNoArena();
}
void AndroidStatus::set_status_payload(const ::std::string& value) {
  set_has_status_payload();
  status_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.AndroidStatus.status_payload)
}
#if LANG_CXX11
void AndroidStatus::set_status_payload(::std::string&& value) {
  set_has_status_payload();
  status_payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AndroidStatus.status_payload)
}
#endif
void AndroidStatus::set_status_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_status_payload();
  status_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.AndroidStatus.status_payload)
}
void AndroidStatus::set_status_payload(const char* value, size_t size) {
  set_has_status_payload();
  status_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AndroidStatus.status_payload)
}
::std::string* AndroidStatus::mutable_status_payload() {
  set_has_status_payload();
  // @@protoc_insertion_point(field_mutable:enterprise_management.AndroidStatus.status_payload)
  return status_payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AndroidStatus::release_status_payload() {
  // @@protoc_insertion_point(field_release:enterprise_management.AndroidStatus.status_payload)
  clear_has_status_payload();
  return status_payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidStatus::set_allocated_status_payload(::std::string* status_payload) {
  if (status_payload != NULL) {
    set_has_status_payload();
  } else {
    clear_has_status_payload();
  }
  status_payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_payload);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AndroidStatus.status_payload)
}

// optional string droid_guard_info = 2;
bool AndroidStatus::has_droid_guard_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AndroidStatus::set_has_droid_guard_info() {
  _has_bits_[0] |= 0x00000002u;
}
void AndroidStatus::clear_has_droid_guard_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void AndroidStatus::clear_droid_guard_info() {
  droid_guard_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_droid_guard_info();
}
const ::std::string& AndroidStatus::droid_guard_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AndroidStatus.droid_guard_info)
  return droid_guard_info_.GetNoArena();
}
void AndroidStatus::set_droid_guard_info(const ::std::string& value) {
  set_has_droid_guard_info();
  droid_guard_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.AndroidStatus.droid_guard_info)
}
#if LANG_CXX11
void AndroidStatus::set_droid_guard_info(::std::string&& value) {
  set_has_droid_guard_info();
  droid_guard_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AndroidStatus.droid_guard_info)
}
#endif
void AndroidStatus::set_droid_guard_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_droid_guard_info();
  droid_guard_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.AndroidStatus.droid_guard_info)
}
void AndroidStatus::set_droid_guard_info(const char* value, size_t size) {
  set_has_droid_guard_info();
  droid_guard_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AndroidStatus.droid_guard_info)
}
::std::string* AndroidStatus::mutable_droid_guard_info() {
  set_has_droid_guard_info();
  // @@protoc_insertion_point(field_mutable:enterprise_management.AndroidStatus.droid_guard_info)
  return droid_guard_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AndroidStatus::release_droid_guard_info() {
  // @@protoc_insertion_point(field_release:enterprise_management.AndroidStatus.droid_guard_info)
  clear_has_droid_guard_info();
  return droid_guard_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidStatus::set_allocated_droid_guard_info(::std::string* droid_guard_info) {
  if (droid_guard_info != NULL) {
    set_has_droid_guard_info();
  } else {
    clear_has_droid_guard_info();
  }
  droid_guard_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), droid_guard_info);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AndroidStatus.droid_guard_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionStatusReportRequest::kDeviceLocalAccountIdFieldNumber;
const int SessionStatusReportRequest::kInstalledAppsFieldNumber;
const int SessionStatusReportRequest::kAndroidStatusFieldNumber;
const int SessionStatusReportRequest::kUserDmTokenFieldNumber;
const int SessionStatusReportRequest::kTimeZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionStatusReportRequest::SessionStatusReportRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SessionStatusReportRequest)
}
SessionStatusReportRequest::SessionStatusReportRequest(const SessionStatusReportRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      installed_apps_(from.installed_apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_local_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_local_account_id()) {
    device_local_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_local_account_id_);
  }
  user_dm_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_dm_token()) {
    user_dm_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_dm_token_);
  }
  time_zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_time_zone()) {
    time_zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_zone_);
  }
  if (from.has_android_status()) {
    android_status_ = new ::enterprise_management::AndroidStatus(*from.android_status_);
  } else {
    android_status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SessionStatusReportRequest)
}

void SessionStatusReportRequest::SharedCtor() {
  _cached_size_ = 0;
  device_local_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_dm_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  android_status_ = NULL;
}

SessionStatusReportRequest::~SessionStatusReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.SessionStatusReportRequest)
  SharedDtor();
}

void SessionStatusReportRequest::SharedDtor() {
  device_local_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_dm_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete android_status_;
  }
}

void SessionStatusReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionStatusReportRequest& SessionStatusReportRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionStatusReportRequest* SessionStatusReportRequest::New(::google::protobuf::Arena* arena) const {
  SessionStatusReportRequest* n = new SessionStatusReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionStatusReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SessionStatusReportRequest)
  installed_apps_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_device_local_account_id()) {
      GOOGLE_DCHECK(!device_local_account_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_local_account_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_dm_token()) {
      GOOGLE_DCHECK(!user_dm_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_dm_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_time_zone()) {
      GOOGLE_DCHECK(!time_zone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*time_zone_.UnsafeRawStringPointer())->clear();
    }
    if (has_android_status()) {
      GOOGLE_DCHECK(android_status_ != NULL);
      android_status_->::enterprise_management::AndroidStatus::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionStatusReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SessionStatusReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_local_account_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_local_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.AppStatus installed_apps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_installed_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AndroidStatus android_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_android_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_dm_token = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_dm_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string time_zone = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SessionStatusReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SessionStatusReportRequest)
  return false;
#undef DO_
}

void SessionStatusReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SessionStatusReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_local_account_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device_local_account_id(), output);
  }

  // repeated .enterprise_management.AppStatus installed_apps = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->installed_apps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->installed_apps(static_cast<int>(i)), output);
  }

  // optional .enterprise_management.AndroidStatus android_status = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->android_status_, output);
  }

  // optional string user_dm_token = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->user_dm_token(), output);
  }

  // optional string time_zone = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->time_zone(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SessionStatusReportRequest)
}

size_t SessionStatusReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SessionStatusReportRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.AppStatus installed_apps = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->installed_apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->installed_apps(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string device_local_account_id = 4;
    if (has_device_local_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_local_account_id());
    }

    // optional string user_dm_token = 8;
    if (has_user_dm_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_dm_token());
    }

    // optional string time_zone = 9;
    if (has_time_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_zone());
    }

    // optional .enterprise_management.AndroidStatus android_status = 7;
    if (has_android_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->android_status_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionStatusReportRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionStatusReportRequest*>(&from));
}

void SessionStatusReportRequest::MergeFrom(const SessionStatusReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SessionStatusReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  installed_apps_.MergeFrom(from.installed_apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_local_account_id();
      device_local_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_local_account_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_dm_token();
      user_dm_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_dm_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_time_zone();
      time_zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_zone_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_android_status()->::enterprise_management::AndroidStatus::MergeFrom(from.android_status());
    }
  }
}

void SessionStatusReportRequest::CopyFrom(const SessionStatusReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SessionStatusReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStatusReportRequest::IsInitialized() const {
  return true;
}

void SessionStatusReportRequest::Swap(SessionStatusReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionStatusReportRequest::InternalSwap(SessionStatusReportRequest* other) {
  installed_apps_.InternalSwap(&other->installed_apps_);
  device_local_account_id_.Swap(&other->device_local_account_id_);
  user_dm_token_.Swap(&other->user_dm_token_);
  time_zone_.Swap(&other->time_zone_);
  std::swap(android_status_, other->android_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionStatusReportRequest::GetTypeName() const {
  return "enterprise_management.SessionStatusReportRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionStatusReportRequest

// optional string device_local_account_id = 4;
bool SessionStatusReportRequest::has_device_local_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionStatusReportRequest::set_has_device_local_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionStatusReportRequest::clear_has_device_local_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionStatusReportRequest::clear_device_local_account_id() {
  device_local_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_local_account_id();
}
const ::std::string& SessionStatusReportRequest::device_local_account_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.device_local_account_id)
  return device_local_account_id_.GetNoArena();
}
void SessionStatusReportRequest::set_device_local_account_id(const ::std::string& value) {
  set_has_device_local_account_id();
  device_local_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
#if LANG_CXX11
void SessionStatusReportRequest::set_device_local_account_id(::std::string&& value) {
  set_has_device_local_account_id();
  device_local_account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
#endif
void SessionStatusReportRequest::set_device_local_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_local_account_id();
  device_local_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
void SessionStatusReportRequest::set_device_local_account_id(const char* value, size_t size) {
  set_has_device_local_account_id();
  device_local_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
::std::string* SessionStatusReportRequest::mutable_device_local_account_id() {
  set_has_device_local_account_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.device_local_account_id)
  return device_local_account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionStatusReportRequest::release_device_local_account_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportRequest.device_local_account_id)
  clear_has_device_local_account_id();
  return device_local_account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionStatusReportRequest::set_allocated_device_local_account_id(::std::string* device_local_account_id) {
  if (device_local_account_id != NULL) {
    set_has_device_local_account_id();
  } else {
    clear_has_device_local_account_id();
  }
  device_local_account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_local_account_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}

// repeated .enterprise_management.AppStatus installed_apps = 5;
int SessionStatusReportRequest::installed_apps_size() const {
  return installed_apps_.size();
}
void SessionStatusReportRequest::clear_installed_apps() {
  installed_apps_.Clear();
}
const ::enterprise_management::AppStatus& SessionStatusReportRequest::installed_apps(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.installed_apps)
  return installed_apps_.Get(index);
}
::enterprise_management::AppStatus* SessionStatusReportRequest::mutable_installed_apps(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.installed_apps)
  return installed_apps_.Mutable(index);
}
::enterprise_management::AppStatus* SessionStatusReportRequest::add_installed_apps() {
  // @@protoc_insertion_point(field_add:enterprise_management.SessionStatusReportRequest.installed_apps)
  return installed_apps_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::AppStatus >*
SessionStatusReportRequest::mutable_installed_apps() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.SessionStatusReportRequest.installed_apps)
  return &installed_apps_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppStatus >&
SessionStatusReportRequest::installed_apps() const {
  // @@protoc_insertion_point(field_list:enterprise_management.SessionStatusReportRequest.installed_apps)
  return installed_apps_;
}

// optional .enterprise_management.AndroidStatus android_status = 7;
bool SessionStatusReportRequest::has_android_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionStatusReportRequest::set_has_android_status() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionStatusReportRequest::clear_has_android_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionStatusReportRequest::clear_android_status() {
  if (android_status_ != NULL) android_status_->::enterprise_management::AndroidStatus::Clear();
  clear_has_android_status();
}
const ::enterprise_management::AndroidStatus& SessionStatusReportRequest::android_status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.android_status)
  return android_status_ != NULL ? *android_status_
                         : *::enterprise_management::AndroidStatus::internal_default_instance();
}
::enterprise_management::AndroidStatus* SessionStatusReportRequest::mutable_android_status() {
  set_has_android_status();
  if (android_status_ == NULL) {
    android_status_ = new ::enterprise_management::AndroidStatus;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.android_status)
  return android_status_;
}
::enterprise_management::AndroidStatus* SessionStatusReportRequest::release_android_status() {
  // @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportRequest.android_status)
  clear_has_android_status();
  ::enterprise_management::AndroidStatus* temp = android_status_;
  android_status_ = NULL;
  return temp;
}
void SessionStatusReportRequest::set_allocated_android_status(::enterprise_management::AndroidStatus* android_status) {
  delete android_status_;
  android_status_ = android_status;
  if (android_status) {
    set_has_android_status();
  } else {
    clear_has_android_status();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportRequest.android_status)
}

// optional string user_dm_token = 8;
bool SessionStatusReportRequest::has_user_dm_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionStatusReportRequest::set_has_user_dm_token() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionStatusReportRequest::clear_has_user_dm_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionStatusReportRequest::clear_user_dm_token() {
  user_dm_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_dm_token();
}
const ::std::string& SessionStatusReportRequest::user_dm_token() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.user_dm_token)
  return user_dm_token_.GetNoArena();
}
void SessionStatusReportRequest::set_user_dm_token(const ::std::string& value) {
  set_has_user_dm_token();
  user_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportRequest.user_dm_token)
}
#if LANG_CXX11
void SessionStatusReportRequest::set_user_dm_token(::std::string&& value) {
  set_has_user_dm_token();
  user_dm_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.SessionStatusReportRequest.user_dm_token)
}
#endif
void SessionStatusReportRequest::set_user_dm_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_dm_token();
  user_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportRequest.user_dm_token)
}
void SessionStatusReportRequest::set_user_dm_token(const char* value, size_t size) {
  set_has_user_dm_token();
  user_dm_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportRequest.user_dm_token)
}
::std::string* SessionStatusReportRequest::mutable_user_dm_token() {
  set_has_user_dm_token();
  // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.user_dm_token)
  return user_dm_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionStatusReportRequest::release_user_dm_token() {
  // @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportRequest.user_dm_token)
  clear_has_user_dm_token();
  return user_dm_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionStatusReportRequest::set_allocated_user_dm_token(::std::string* user_dm_token) {
  if (user_dm_token != NULL) {
    set_has_user_dm_token();
  } else {
    clear_has_user_dm_token();
  }
  user_dm_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_dm_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportRequest.user_dm_token)
}

// optional string time_zone = 9;
bool SessionStatusReportRequest::has_time_zone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionStatusReportRequest::set_has_time_zone() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionStatusReportRequest::clear_has_time_zone() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionStatusReportRequest::clear_time_zone() {
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time_zone();
}
const ::std::string& SessionStatusReportRequest::time_zone() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.time_zone)
  return time_zone_.GetNoArena();
}
void SessionStatusReportRequest::set_time_zone(const ::std::string& value) {
  set_has_time_zone();
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportRequest.time_zone)
}
#if LANG_CXX11
void SessionStatusReportRequest::set_time_zone(::std::string&& value) {
  set_has_time_zone();
  time_zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.SessionStatusReportRequest.time_zone)
}
#endif
void SessionStatusReportRequest::set_time_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time_zone();
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportRequest.time_zone)
}
void SessionStatusReportRequest::set_time_zone(const char* value, size_t size) {
  set_has_time_zone();
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportRequest.time_zone)
}
::std::string* SessionStatusReportRequest::mutable_time_zone() {
  set_has_time_zone();
  // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.time_zone)
  return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionStatusReportRequest::release_time_zone() {
  // @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportRequest.time_zone)
  clear_has_time_zone();
  return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionStatusReportRequest::set_allocated_time_zone(::std::string* time_zone) {
  if (time_zone != NULL) {
    set_has_time_zone();
  } else {
    clear_has_time_zone();
  }
  time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportRequest.time_zone)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStatusReportResponse::kErrorCodeFieldNumber;
const int DeviceStatusReportResponse::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStatusReportResponse::DeviceStatusReportResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceStatusReportResponse)
}
DeviceStatusReportResponse::DeviceStatusReportResponse(const DeviceStatusReportResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStatusReportResponse)
}

void DeviceStatusReportResponse::SharedCtor() {
  _cached_size_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

DeviceStatusReportResponse::~DeviceStatusReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceStatusReportResponse)
  SharedDtor();
}

void DeviceStatusReportResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceStatusReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceStatusReportResponse& DeviceStatusReportResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceStatusReportResponse* DeviceStatusReportResponse::New(::google::protobuf::Arena* arena) const {
  DeviceStatusReportResponse* n = new DeviceStatusReportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceStatusReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStatusReportResponse)
  if (has_error_message()) {
    GOOGLE_DCHECK(!error_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*error_message_.UnsafeRawStringPointer())->clear();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceStatusReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStatusReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStatusReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStatusReportResponse)
  return false;
#undef DO_
}

void DeviceStatusReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStatusReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStatusReportResponse)
}

size_t DeviceStatusReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStatusReportResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStatusReportResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceStatusReportResponse*>(&from));
}

void DeviceStatusReportResponse::MergeFrom(const DeviceStatusReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStatusReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceStatusReportResponse::CopyFrom(const DeviceStatusReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStatusReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatusReportResponse::IsInitialized() const {
  return true;
}

void DeviceStatusReportResponse::Swap(DeviceStatusReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceStatusReportResponse::InternalSwap(DeviceStatusReportResponse* other) {
  error_message_.Swap(&other->error_message_);
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceStatusReportResponse::GetTypeName() const {
  return "enterprise_management.DeviceStatusReportResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStatusReportResponse

// optional int32 error_code = 1;
bool DeviceStatusReportResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceStatusReportResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceStatusReportResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceStatusReportResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::google::protobuf::int32 DeviceStatusReportResponse::error_code() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportResponse.error_code)
  return error_code_;
}
void DeviceStatusReportResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportResponse.error_code)
}

// optional string error_message = 2;
bool DeviceStatusReportResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceStatusReportResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceStatusReportResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceStatusReportResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& DeviceStatusReportResponse::error_message() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportResponse.error_message)
  return error_message_.GetNoArena();
}
void DeviceStatusReportResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportResponse.error_message)
}
#if LANG_CXX11
void DeviceStatusReportResponse::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStatusReportResponse.error_message)
}
#endif
void DeviceStatusReportResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportResponse.error_message)
}
void DeviceStatusReportResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportResponse.error_message)
}
::std::string* DeviceStatusReportResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatusReportResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportResponse.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportResponse.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeDesktopReportResponse::ChromeDesktopReportResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ChromeDesktopReportResponse)
}
ChromeDesktopReportResponse::ChromeDesktopReportResponse(const ChromeDesktopReportResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeDesktopReportResponse)
}

void ChromeDesktopReportResponse::SharedCtor() {
  _cached_size_ = 0;
}

ChromeDesktopReportResponse::~ChromeDesktopReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeDesktopReportResponse)
  SharedDtor();
}

void ChromeDesktopReportResponse::SharedDtor() {
}

void ChromeDesktopReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeDesktopReportResponse& ChromeDesktopReportResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeDesktopReportResponse* ChromeDesktopReportResponse::New(::google::protobuf::Arena* arena) const {
  ChromeDesktopReportResponse* n = new ChromeDesktopReportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeDesktopReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeDesktopReportResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeDesktopReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ChromeDesktopReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ChromeDesktopReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ChromeDesktopReportResponse)
  return false;
#undef DO_
}

void ChromeDesktopReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ChromeDesktopReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ChromeDesktopReportResponse)
}

size_t ChromeDesktopReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeDesktopReportResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeDesktopReportResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeDesktopReportResponse*>(&from));
}

void ChromeDesktopReportResponse::MergeFrom(const ChromeDesktopReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeDesktopReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChromeDesktopReportResponse::CopyFrom(const ChromeDesktopReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeDesktopReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeDesktopReportResponse::IsInitialized() const {
  return true;
}

void ChromeDesktopReportResponse::Swap(ChromeDesktopReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeDesktopReportResponse::InternalSwap(ChromeDesktopReportResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeDesktopReportResponse::GetTypeName() const {
  return "enterprise_management.ChromeDesktopReportResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeDesktopReportResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionStatusReportResponse::kErrorCodeFieldNumber;
const int SessionStatusReportResponse::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionStatusReportResponse::SessionStatusReportResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SessionStatusReportResponse)
}
SessionStatusReportResponse::SessionStatusReportResponse(const SessionStatusReportResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SessionStatusReportResponse)
}

void SessionStatusReportResponse::SharedCtor() {
  _cached_size_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

SessionStatusReportResponse::~SessionStatusReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.SessionStatusReportResponse)
  SharedDtor();
}

void SessionStatusReportResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionStatusReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionStatusReportResponse& SessionStatusReportResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionStatusReportResponse* SessionStatusReportResponse::New(::google::protobuf::Arena* arena) const {
  SessionStatusReportResponse* n = new SessionStatusReportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionStatusReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SessionStatusReportResponse)
  if (has_error_message()) {
    GOOGLE_DCHECK(!error_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*error_message_.UnsafeRawStringPointer())->clear();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionStatusReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SessionStatusReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SessionStatusReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SessionStatusReportResponse)
  return false;
#undef DO_
}

void SessionStatusReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SessionStatusReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SessionStatusReportResponse)
}

size_t SessionStatusReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SessionStatusReportResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionStatusReportResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionStatusReportResponse*>(&from));
}

void SessionStatusReportResponse::MergeFrom(const SessionStatusReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SessionStatusReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionStatusReportResponse::CopyFrom(const SessionStatusReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SessionStatusReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStatusReportResponse::IsInitialized() const {
  return true;
}

void SessionStatusReportResponse::Swap(SessionStatusReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionStatusReportResponse::InternalSwap(SessionStatusReportResponse* other) {
  error_message_.Swap(&other->error_message_);
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionStatusReportResponse::GetTypeName() const {
  return "enterprise_management.SessionStatusReportResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionStatusReportResponse

// optional int32 error_code = 1;
bool SessionStatusReportResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionStatusReportResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionStatusReportResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionStatusReportResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::google::protobuf::int32 SessionStatusReportResponse::error_code() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportResponse.error_code)
  return error_code_;
}
void SessionStatusReportResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportResponse.error_code)
}

// optional string error_message = 2;
bool SessionStatusReportResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionStatusReportResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionStatusReportResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionStatusReportResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& SessionStatusReportResponse::error_message() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportResponse.error_message)
  return error_message_.GetNoArena();
}
void SessionStatusReportResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportResponse.error_message)
}
#if LANG_CXX11
void SessionStatusReportResponse::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.SessionStatusReportResponse.error_message)
}
#endif
void SessionStatusReportResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportResponse.error_message)
}
void SessionStatusReportResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportResponse.error_message)
}
::std::string* SessionStatusReportResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionStatusReportResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportResponse.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionStatusReportResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportResponse.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAutoEnrollmentRequest::kRemainderFieldNumber;
const int DeviceAutoEnrollmentRequest::kModulusFieldNumber;
const int DeviceAutoEnrollmentRequest::kEnrollmentCheckTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAutoEnrollmentRequest::DeviceAutoEnrollmentRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAutoEnrollmentRequest)
}
DeviceAutoEnrollmentRequest::DeviceAutoEnrollmentRequest(const DeviceAutoEnrollmentRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&remainder_, &from.remainder_,
    static_cast<size_t>(reinterpret_cast<char*>(&enrollment_check_type_) -
    reinterpret_cast<char*>(&remainder_)) + sizeof(enrollment_check_type_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAutoEnrollmentRequest)
}

void DeviceAutoEnrollmentRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&remainder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modulus_) -
      reinterpret_cast<char*>(&remainder_)) + sizeof(modulus_));
  enrollment_check_type_ = 1;
}

DeviceAutoEnrollmentRequest::~DeviceAutoEnrollmentRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAutoEnrollmentRequest)
  SharedDtor();
}

void DeviceAutoEnrollmentRequest::SharedDtor() {
}

void DeviceAutoEnrollmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAutoEnrollmentRequest& DeviceAutoEnrollmentRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceAutoEnrollmentRequest* DeviceAutoEnrollmentRequest::New(::google::protobuf::Arena* arena) const {
  DeviceAutoEnrollmentRequest* n = new DeviceAutoEnrollmentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceAutoEnrollmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAutoEnrollmentRequest)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&remainder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modulus_) -
        reinterpret_cast<char*>(&remainder_)) + sizeof(modulus_));
    enrollment_check_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceAutoEnrollmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAutoEnrollmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 remainder = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_remainder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remainder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 modulus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_modulus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modulus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAutoEnrollmentRequest.EnrollmentCheckType enrollment_check_type = 3 [default = ENROLLMENT_CHECK_TYPE_FRE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType_IsValid(value)) {
            set_enrollment_check_type(static_cast< ::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAutoEnrollmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAutoEnrollmentRequest)
  return false;
#undef DO_
}

void DeviceAutoEnrollmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAutoEnrollmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 remainder = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->remainder(), output);
  }

  // optional int64 modulus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->modulus(), output);
  }

  // optional .enterprise_management.DeviceAutoEnrollmentRequest.EnrollmentCheckType enrollment_check_type = 3 [default = ENROLLMENT_CHECK_TYPE_FRE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->enrollment_check_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAutoEnrollmentRequest)
}

size_t DeviceAutoEnrollmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAutoEnrollmentRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 remainder = 1;
    if (has_remainder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->remainder());
    }

    // optional int64 modulus = 2;
    if (has_modulus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->modulus());
    }

    // optional .enterprise_management.DeviceAutoEnrollmentRequest.EnrollmentCheckType enrollment_check_type = 3 [default = ENROLLMENT_CHECK_TYPE_FRE];
    if (has_enrollment_check_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->enrollment_check_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAutoEnrollmentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAutoEnrollmentRequest*>(&from));
}

void DeviceAutoEnrollmentRequest::MergeFrom(const DeviceAutoEnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAutoEnrollmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      remainder_ = from.remainder_;
    }
    if (cached_has_bits & 0x00000002u) {
      modulus_ = from.modulus_;
    }
    if (cached_has_bits & 0x00000004u) {
      enrollment_check_type_ = from.enrollment_check_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceAutoEnrollmentRequest::CopyFrom(const DeviceAutoEnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAutoEnrollmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAutoEnrollmentRequest::IsInitialized() const {
  return true;
}

void DeviceAutoEnrollmentRequest::Swap(DeviceAutoEnrollmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceAutoEnrollmentRequest::InternalSwap(DeviceAutoEnrollmentRequest* other) {
  std::swap(remainder_, other->remainder_);
  std::swap(modulus_, other->modulus_);
  std::swap(enrollment_check_type_, other->enrollment_check_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAutoEnrollmentRequest::GetTypeName() const {
  return "enterprise_management.DeviceAutoEnrollmentRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAutoEnrollmentRequest

// optional int64 remainder = 1;
bool DeviceAutoEnrollmentRequest::has_remainder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAutoEnrollmentRequest::set_has_remainder() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceAutoEnrollmentRequest::clear_has_remainder() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceAutoEnrollmentRequest::clear_remainder() {
  remainder_ = GOOGLE_LONGLONG(0);
  clear_has_remainder();
}
::google::protobuf::int64 DeviceAutoEnrollmentRequest::remainder() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentRequest.remainder)
  return remainder_;
}
void DeviceAutoEnrollmentRequest::set_remainder(::google::protobuf::int64 value) {
  set_has_remainder();
  remainder_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentRequest.remainder)
}

// optional int64 modulus = 2;
bool DeviceAutoEnrollmentRequest::has_modulus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceAutoEnrollmentRequest::set_has_modulus() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceAutoEnrollmentRequest::clear_has_modulus() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceAutoEnrollmentRequest::clear_modulus() {
  modulus_ = GOOGLE_LONGLONG(0);
  clear_has_modulus();
}
::google::protobuf::int64 DeviceAutoEnrollmentRequest::modulus() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentRequest.modulus)
  return modulus_;
}
void DeviceAutoEnrollmentRequest::set_modulus(::google::protobuf::int64 value) {
  set_has_modulus();
  modulus_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentRequest.modulus)
}

// optional .enterprise_management.DeviceAutoEnrollmentRequest.EnrollmentCheckType enrollment_check_type = 3 [default = ENROLLMENT_CHECK_TYPE_FRE];
bool DeviceAutoEnrollmentRequest::has_enrollment_check_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceAutoEnrollmentRequest::set_has_enrollment_check_type() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceAutoEnrollmentRequest::clear_has_enrollment_check_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceAutoEnrollmentRequest::clear_enrollment_check_type() {
  enrollment_check_type_ = 1;
  clear_has_enrollment_check_type();
}
::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType DeviceAutoEnrollmentRequest::enrollment_check_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentRequest.enrollment_check_type)
  return static_cast< ::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType >(enrollment_check_type_);
}
void DeviceAutoEnrollmentRequest::set_enrollment_check_type(::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType value) {
  assert(::enterprise_management::DeviceAutoEnrollmentRequest_EnrollmentCheckType_IsValid(value));
  set_has_enrollment_check_type();
  enrollment_check_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentRequest.enrollment_check_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAutoEnrollmentResponse::kExpectedModulusFieldNumber;
const int DeviceAutoEnrollmentResponse::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAutoEnrollmentResponse::DeviceAutoEnrollmentResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAutoEnrollmentResponse)
}
DeviceAutoEnrollmentResponse::DeviceAutoEnrollmentResponse(const DeviceAutoEnrollmentResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hash_(from.hash_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expected_modulus_ = from.expected_modulus_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAutoEnrollmentResponse)
}

void DeviceAutoEnrollmentResponse::SharedCtor() {
  _cached_size_ = 0;
  expected_modulus_ = GOOGLE_LONGLONG(0);
}

DeviceAutoEnrollmentResponse::~DeviceAutoEnrollmentResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAutoEnrollmentResponse)
  SharedDtor();
}

void DeviceAutoEnrollmentResponse::SharedDtor() {
}

void DeviceAutoEnrollmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAutoEnrollmentResponse& DeviceAutoEnrollmentResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceAutoEnrollmentResponse* DeviceAutoEnrollmentResponse::New(::google::protobuf::Arena* arena) const {
  DeviceAutoEnrollmentResponse* n = new DeviceAutoEnrollmentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceAutoEnrollmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAutoEnrollmentResponse)
  hash_.Clear();
  expected_modulus_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceAutoEnrollmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAutoEnrollmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 expected_modulus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_expected_modulus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expected_modulus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAutoEnrollmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAutoEnrollmentResponse)
  return false;
#undef DO_
}

void DeviceAutoEnrollmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAutoEnrollmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 expected_modulus = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expected_modulus(), output);
  }

  // repeated bytes hash = 2;
  for (int i = 0, n = this->hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hash(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAutoEnrollmentResponse)
}

size_t DeviceAutoEnrollmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAutoEnrollmentResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated bytes hash = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hash_size());
  for (int i = 0, n = this->hash_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->hash(i));
  }

  // optional int64 expected_modulus = 1;
  if (has_expected_modulus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expected_modulus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAutoEnrollmentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAutoEnrollmentResponse*>(&from));
}

void DeviceAutoEnrollmentResponse::MergeFrom(const DeviceAutoEnrollmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAutoEnrollmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hash_.MergeFrom(from.hash_);
  if (from.has_expected_modulus()) {
    set_expected_modulus(from.expected_modulus());
  }
}

void DeviceAutoEnrollmentResponse::CopyFrom(const DeviceAutoEnrollmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAutoEnrollmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAutoEnrollmentResponse::IsInitialized() const {
  return true;
}

void DeviceAutoEnrollmentResponse::Swap(DeviceAutoEnrollmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceAutoEnrollmentResponse::InternalSwap(DeviceAutoEnrollmentResponse* other) {
  hash_.InternalSwap(&other->hash_);
  std::swap(expected_modulus_, other->expected_modulus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAutoEnrollmentResponse::GetTypeName() const {
  return "enterprise_management.DeviceAutoEnrollmentResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAutoEnrollmentResponse

// optional int64 expected_modulus = 1;
bool DeviceAutoEnrollmentResponse::has_expected_modulus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAutoEnrollmentResponse::set_has_expected_modulus() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceAutoEnrollmentResponse::clear_has_expected_modulus() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceAutoEnrollmentResponse::clear_expected_modulus() {
  expected_modulus_ = GOOGLE_LONGLONG(0);
  clear_has_expected_modulus();
}
::google::protobuf::int64 DeviceAutoEnrollmentResponse::expected_modulus() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentResponse.expected_modulus)
  return expected_modulus_;
}
void DeviceAutoEnrollmentResponse::set_expected_modulus(::google::protobuf::int64 value) {
  set_has_expected_modulus();
  expected_modulus_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentResponse.expected_modulus)
}

// repeated bytes hash = 2;
int DeviceAutoEnrollmentResponse::hash_size() const {
  return hash_.size();
}
void DeviceAutoEnrollmentResponse::clear_hash() {
  hash_.Clear();
}
const ::std::string& DeviceAutoEnrollmentResponse::hash(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentResponse.hash)
  return hash_.Get(index);
}
::std::string* DeviceAutoEnrollmentResponse::mutable_hash(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceAutoEnrollmentResponse.hash)
  return hash_.Mutable(index);
}
void DeviceAutoEnrollmentResponse::set_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentResponse.hash)
  hash_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DeviceAutoEnrollmentResponse::set_hash(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentResponse.hash)
  hash_.Mutable(index)->assign(std::move(value));
}
#endif
void DeviceAutoEnrollmentResponse::set_hash(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
void DeviceAutoEnrollmentResponse::set_hash(int index, const void* value, size_t size) {
  hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
::std::string* DeviceAutoEnrollmentResponse::add_hash() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceAutoEnrollmentResponse.hash)
  return hash_.Add();
}
void DeviceAutoEnrollmentResponse::add_hash(const ::std::string& value) {
  hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
#if LANG_CXX11
void DeviceAutoEnrollmentResponse::add_hash(::std::string&& value) {
  hash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
#endif
void DeviceAutoEnrollmentResponse::add_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
void DeviceAutoEnrollmentResponse::add_hash(const void* value, size_t size) {
  hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceAutoEnrollmentResponse::hash() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceAutoEnrollmentResponse.hash)
  return hash_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceAutoEnrollmentResponse::mutable_hash() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceAutoEnrollmentResponse.hash)
  return &hash_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStateRetrievalRequest::kServerBackedStateKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStateRetrievalRequest::DeviceStateRetrievalRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceStateRetrievalRequest)
}
DeviceStateRetrievalRequest::DeviceStateRetrievalRequest(const DeviceStateRetrievalRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_backed_state_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_backed_state_key()) {
    server_backed_state_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_backed_state_key_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStateRetrievalRequest)
}

void DeviceStateRetrievalRequest::SharedCtor() {
  _cached_size_ = 0;
  server_backed_state_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceStateRetrievalRequest::~DeviceStateRetrievalRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceStateRetrievalRequest)
  SharedDtor();
}

void DeviceStateRetrievalRequest::SharedDtor() {
  server_backed_state_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceStateRetrievalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceStateRetrievalRequest& DeviceStateRetrievalRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceStateRetrievalRequest* DeviceStateRetrievalRequest::New(::google::protobuf::Arena* arena) const {
  DeviceStateRetrievalRequest* n = new DeviceStateRetrievalRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceStateRetrievalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStateRetrievalRequest)
  if (has_server_backed_state_key()) {
    GOOGLE_DCHECK(!server_backed_state_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*server_backed_state_key_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceStateRetrievalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStateRetrievalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes server_backed_state_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_backed_state_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStateRetrievalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStateRetrievalRequest)
  return false;
#undef DO_
}

void DeviceStateRetrievalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStateRetrievalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes server_backed_state_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->server_backed_state_key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStateRetrievalRequest)
}

size_t DeviceStateRetrievalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStateRetrievalRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional bytes server_backed_state_key = 1;
  if (has_server_backed_state_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->server_backed_state_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStateRetrievalRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceStateRetrievalRequest*>(&from));
}

void DeviceStateRetrievalRequest::MergeFrom(const DeviceStateRetrievalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStateRetrievalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_backed_state_key()) {
    set_has_server_backed_state_key();
    server_backed_state_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_backed_state_key_);
  }
}

void DeviceStateRetrievalRequest::CopyFrom(const DeviceStateRetrievalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStateRetrievalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStateRetrievalRequest::IsInitialized() const {
  return true;
}

void DeviceStateRetrievalRequest::Swap(DeviceStateRetrievalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceStateRetrievalRequest::InternalSwap(DeviceStateRetrievalRequest* other) {
  server_backed_state_key_.Swap(&other->server_backed_state_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceStateRetrievalRequest::GetTypeName() const {
  return "enterprise_management.DeviceStateRetrievalRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStateRetrievalRequest

// optional bytes server_backed_state_key = 1;
bool DeviceStateRetrievalRequest::has_server_backed_state_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceStateRetrievalRequest::set_has_server_backed_state_key() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceStateRetrievalRequest::clear_has_server_backed_state_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceStateRetrievalRequest::clear_server_backed_state_key() {
  server_backed_state_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_backed_state_key();
}
const ::std::string& DeviceStateRetrievalRequest::server_backed_state_key() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
  return server_backed_state_key_.GetNoArena();
}
void DeviceStateRetrievalRequest::set_server_backed_state_key(const ::std::string& value) {
  set_has_server_backed_state_key();
  server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
#if LANG_CXX11
void DeviceStateRetrievalRequest::set_server_backed_state_key(::std::string&& value) {
  set_has_server_backed_state_key();
  server_backed_state_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
#endif
void DeviceStateRetrievalRequest::set_server_backed_state_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_backed_state_key();
  server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
void DeviceStateRetrievalRequest::set_server_backed_state_key(const void* value, size_t size) {
  set_has_server_backed_state_key();
  server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
::std::string* DeviceStateRetrievalRequest::mutable_server_backed_state_key() {
  set_has_server_backed_state_key();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
  return server_backed_state_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStateRetrievalRequest::release_server_backed_state_key() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
  clear_has_server_backed_state_key();
  return server_backed_state_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStateRetrievalRequest::set_allocated_server_backed_state_key(::std::string* server_backed_state_key) {
  if (server_backed_state_key != NULL) {
    set_has_server_backed_state_key();
  } else {
    clear_has_server_backed_state_key();
  }
  server_backed_state_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_backed_state_key);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStateKeyUpdateRequest::kServerBackedStateKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStateKeyUpdateRequest::DeviceStateKeyUpdateRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceStateKeyUpdateRequest)
}
DeviceStateKeyUpdateRequest::DeviceStateKeyUpdateRequest(const DeviceStateKeyUpdateRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      server_backed_state_key_(from.server_backed_state_key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStateKeyUpdateRequest)
}

void DeviceStateKeyUpdateRequest::SharedCtor() {
  _cached_size_ = 0;
}

DeviceStateKeyUpdateRequest::~DeviceStateKeyUpdateRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceStateKeyUpdateRequest)
  SharedDtor();
}

void DeviceStateKeyUpdateRequest::SharedDtor() {
}

void DeviceStateKeyUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceStateKeyUpdateRequest& DeviceStateKeyUpdateRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceStateKeyUpdateRequest* DeviceStateKeyUpdateRequest::New(::google::protobuf::Arena* arena) const {
  DeviceStateKeyUpdateRequest* n = new DeviceStateKeyUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceStateKeyUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStateKeyUpdateRequest)
  server_backed_state_key_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceStateKeyUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStateKeyUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes server_backed_state_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_server_backed_state_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStateKeyUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStateKeyUpdateRequest)
  return false;
#undef DO_
}

void DeviceStateKeyUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStateKeyUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes server_backed_state_key = 1;
  for (int i = 0, n = this->server_backed_state_key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->server_backed_state_key(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStateKeyUpdateRequest)
}

size_t DeviceStateKeyUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStateKeyUpdateRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated bytes server_backed_state_key = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->server_backed_state_key_size());
  for (int i = 0, n = this->server_backed_state_key_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->server_backed_state_key(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStateKeyUpdateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceStateKeyUpdateRequest*>(&from));
}

void DeviceStateKeyUpdateRequest::MergeFrom(const DeviceStateKeyUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStateKeyUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_backed_state_key_.MergeFrom(from.server_backed_state_key_);
}

void DeviceStateKeyUpdateRequest::CopyFrom(const DeviceStateKeyUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStateKeyUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStateKeyUpdateRequest::IsInitialized() const {
  return true;
}

void DeviceStateKeyUpdateRequest::Swap(DeviceStateKeyUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceStateKeyUpdateRequest::InternalSwap(DeviceStateKeyUpdateRequest* other) {
  server_backed_state_key_.InternalSwap(&other->server_backed_state_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceStateKeyUpdateRequest::GetTypeName() const {
  return "enterprise_management.DeviceStateKeyUpdateRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStateKeyUpdateRequest

// repeated bytes server_backed_state_key = 1;
int DeviceStateKeyUpdateRequest::server_backed_state_key_size() const {
  return server_backed_state_key_.size();
}
void DeviceStateKeyUpdateRequest::clear_server_backed_state_key() {
  server_backed_state_key_.Clear();
}
const ::std::string& DeviceStateKeyUpdateRequest::server_backed_state_key(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
  return server_backed_state_key_.Get(index);
}
::std::string* DeviceStateKeyUpdateRequest::mutable_server_backed_state_key(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
  return server_backed_state_key_.Mutable(index);
}
void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
  server_backed_state_key_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
  server_backed_state_key_.Mutable(index)->assign(std::move(value));
}
#endif
void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  server_backed_state_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, const void* value, size_t size) {
  server_backed_state_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
::std::string* DeviceStateKeyUpdateRequest::add_server_backed_state_key() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
  return server_backed_state_key_.Add();
}
void DeviceStateKeyUpdateRequest::add_server_backed_state_key(const ::std::string& value) {
  server_backed_state_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
#if LANG_CXX11
void DeviceStateKeyUpdateRequest::add_server_backed_state_key(::std::string&& value) {
  server_backed_state_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
#endif
void DeviceStateKeyUpdateRequest::add_server_backed_state_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  server_backed_state_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
void DeviceStateKeyUpdateRequest::add_server_backed_state_key(const void* value, size_t size) {
  server_backed_state_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceStateKeyUpdateRequest::server_backed_state_key() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
  return server_backed_state_key_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceStateKeyUpdateRequest::mutable_server_backed_state_key() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
  return &server_backed_state_key_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStateRetrievalResponse::kRestoreModeFieldNumber;
const int DeviceStateRetrievalResponse::kManagementDomainFieldNumber;
const int DeviceStateRetrievalResponse::kDisabledStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStateRetrievalResponse::DeviceStateRetrievalResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceStateRetrievalResponse)
}
DeviceStateRetrievalResponse::DeviceStateRetrievalResponse(const DeviceStateRetrievalResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  management_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_management_domain()) {
    management_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.management_domain_);
  }
  if (from.has_disabled_state()) {
    disabled_state_ = new ::enterprise_management::DisabledState(*from.disabled_state_);
  } else {
    disabled_state_ = NULL;
  }
  restore_mode_ = from.restore_mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStateRetrievalResponse)
}

void DeviceStateRetrievalResponse::SharedCtor() {
  _cached_size_ = 0;
  management_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&disabled_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restore_mode_) -
      reinterpret_cast<char*>(&disabled_state_)) + sizeof(restore_mode_));
}

DeviceStateRetrievalResponse::~DeviceStateRetrievalResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceStateRetrievalResponse)
  SharedDtor();
}

void DeviceStateRetrievalResponse::SharedDtor() {
  management_domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete disabled_state_;
  }
}

void DeviceStateRetrievalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceStateRetrievalResponse& DeviceStateRetrievalResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceStateRetrievalResponse* DeviceStateRetrievalResponse::New(::google::protobuf::Arena* arena) const {
  DeviceStateRetrievalResponse* n = new DeviceStateRetrievalResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceStateRetrievalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStateRetrievalResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_management_domain()) {
      GOOGLE_DCHECK(!management_domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*management_domain_.UnsafeRawStringPointer())->clear();
    }
    if (has_disabled_state()) {
      GOOGLE_DCHECK(disabled_state_ != NULL);
      disabled_state_->::enterprise_management::DisabledState::Clear();
    }
  }
  restore_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceStateRetrievalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStateRetrievalResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceStateRetrievalResponse_RestoreMode_IsValid(value)) {
            set_restore_mode(static_cast< ::enterprise_management::DeviceStateRetrievalResponse_RestoreMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string management_domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_management_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DisabledState disabled_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disabled_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStateRetrievalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStateRetrievalResponse)
  return false;
#undef DO_
}

void DeviceStateRetrievalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStateRetrievalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->restore_mode(), output);
  }

  // optional string management_domain = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->management_domain(), output);
  }

  // optional .enterprise_management.DisabledState disabled_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->disabled_state_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStateRetrievalResponse)
}

size_t DeviceStateRetrievalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStateRetrievalResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string management_domain = 2;
    if (has_management_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->management_domain());
    }

    // optional .enterprise_management.DisabledState disabled_state = 3;
    if (has_disabled_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->disabled_state_);
    }

    // optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
    if (has_restore_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->restore_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStateRetrievalResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceStateRetrievalResponse*>(&from));
}

void DeviceStateRetrievalResponse::MergeFrom(const DeviceStateRetrievalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStateRetrievalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_management_domain();
      management_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.management_domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_disabled_state()->::enterprise_management::DisabledState::MergeFrom(from.disabled_state());
    }
    if (cached_has_bits & 0x00000004u) {
      restore_mode_ = from.restore_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceStateRetrievalResponse::CopyFrom(const DeviceStateRetrievalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStateRetrievalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStateRetrievalResponse::IsInitialized() const {
  return true;
}

void DeviceStateRetrievalResponse::Swap(DeviceStateRetrievalResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceStateRetrievalResponse::InternalSwap(DeviceStateRetrievalResponse* other) {
  management_domain_.Swap(&other->management_domain_);
  std::swap(disabled_state_, other->disabled_state_);
  std::swap(restore_mode_, other->restore_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceStateRetrievalResponse::GetTypeName() const {
  return "enterprise_management.DeviceStateRetrievalResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStateRetrievalResponse

// optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
bool DeviceStateRetrievalResponse::has_restore_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceStateRetrievalResponse::set_has_restore_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceStateRetrievalResponse::clear_has_restore_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceStateRetrievalResponse::clear_restore_mode() {
  restore_mode_ = 0;
  clear_has_restore_mode();
}
::enterprise_management::DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::restore_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalResponse.restore_mode)
  return static_cast< ::enterprise_management::DeviceStateRetrievalResponse_RestoreMode >(restore_mode_);
}
void DeviceStateRetrievalResponse::set_restore_mode(::enterprise_management::DeviceStateRetrievalResponse_RestoreMode value) {
  assert(::enterprise_management::DeviceStateRetrievalResponse_RestoreMode_IsValid(value));
  set_has_restore_mode();
  restore_mode_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStateRetrievalResponse.restore_mode)
}

// optional string management_domain = 2;
bool DeviceStateRetrievalResponse::has_management_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceStateRetrievalResponse::set_has_management_domain() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceStateRetrievalResponse::clear_has_management_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceStateRetrievalResponse::clear_management_domain() {
  management_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_management_domain();
}
const ::std::string& DeviceStateRetrievalResponse::management_domain() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalResponse.management_domain)
  return management_domain_.GetNoArena();
}
void DeviceStateRetrievalResponse::set_management_domain(const ::std::string& value) {
  set_has_management_domain();
  management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
#if LANG_CXX11
void DeviceStateRetrievalResponse::set_management_domain(::std::string&& value) {
  set_has_management_domain();
  management_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
#endif
void DeviceStateRetrievalResponse::set_management_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_management_domain();
  management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
void DeviceStateRetrievalResponse::set_management_domain(const char* value, size_t size) {
  set_has_management_domain();
  management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
::std::string* DeviceStateRetrievalResponse::mutable_management_domain() {
  set_has_management_domain();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateRetrievalResponse.management_domain)
  return management_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStateRetrievalResponse::release_management_domain() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStateRetrievalResponse.management_domain)
  clear_has_management_domain();
  return management_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStateRetrievalResponse::set_allocated_management_domain(::std::string* management_domain) {
  if (management_domain != NULL) {
    set_has_management_domain();
  } else {
    clear_has_management_domain();
  }
  management_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), management_domain);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}

// optional .enterprise_management.DisabledState disabled_state = 3;
bool DeviceStateRetrievalResponse::has_disabled_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceStateRetrievalResponse::set_has_disabled_state() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceStateRetrievalResponse::clear_has_disabled_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceStateRetrievalResponse::clear_disabled_state() {
  if (disabled_state_ != NULL) disabled_state_->::enterprise_management::DisabledState::Clear();
  clear_has_disabled_state();
}
const ::enterprise_management::DisabledState& DeviceStateRetrievalResponse::disabled_state() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
  return disabled_state_ != NULL ? *disabled_state_
                         : *::enterprise_management::DisabledState::internal_default_instance();
}
::enterprise_management::DisabledState* DeviceStateRetrievalResponse::mutable_disabled_state() {
  set_has_disabled_state();
  if (disabled_state_ == NULL) {
    disabled_state_ = new ::enterprise_management::DisabledState;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
  return disabled_state_;
}
::enterprise_management::DisabledState* DeviceStateRetrievalResponse::release_disabled_state() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
  clear_has_disabled_state();
  ::enterprise_management::DisabledState* temp = disabled_state_;
  disabled_state_ = NULL;
  return temp;
}
void DeviceStateRetrievalResponse::set_allocated_disabled_state(::enterprise_management::DisabledState* disabled_state) {
  delete disabled_state_;
  disabled_state_ = disabled_state;
  if (disabled_state) {
    set_has_disabled_state();
  } else {
    clear_has_disabled_state();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInitialEnrollmentStateRequest::kSerialNumberFieldNumber;
const int DeviceInitialEnrollmentStateRequest::kBrandCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInitialEnrollmentStateRequest::DeviceInitialEnrollmentStateRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceInitialEnrollmentStateRequest)
}
DeviceInitialEnrollmentStateRequest::DeviceInitialEnrollmentStateRequest(const DeviceInitialEnrollmentStateRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  brand_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_brand_code()) {
    brand_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceInitialEnrollmentStateRequest)
}

void DeviceInitialEnrollmentStateRequest::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceInitialEnrollmentStateRequest::~DeviceInitialEnrollmentStateRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceInitialEnrollmentStateRequest)
  SharedDtor();
}

void DeviceInitialEnrollmentStateRequest::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInitialEnrollmentStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceInitialEnrollmentStateRequest& DeviceInitialEnrollmentStateRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceInitialEnrollmentStateRequest* DeviceInitialEnrollmentStateRequest::New(::google::protobuf::Arena* arena) const {
  DeviceInitialEnrollmentStateRequest* n = new DeviceInitialEnrollmentStateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInitialEnrollmentStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_brand_code()) {
      GOOGLE_DCHECK(!brand_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*brand_code_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceInitialEnrollmentStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string brand_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceInitialEnrollmentStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceInitialEnrollmentStateRequest)
  return false;
#undef DO_
}

void DeviceInitialEnrollmentStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // optional string brand_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brand_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceInitialEnrollmentStateRequest)
}

size_t DeviceInitialEnrollmentStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string brand_code = 2;
    if (has_brand_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInitialEnrollmentStateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceInitialEnrollmentStateRequest*>(&from));
}

void DeviceInitialEnrollmentStateRequest::MergeFrom(const DeviceInitialEnrollmentStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_brand_code();
      brand_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
    }
  }
}

void DeviceInitialEnrollmentStateRequest::CopyFrom(const DeviceInitialEnrollmentStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceInitialEnrollmentStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInitialEnrollmentStateRequest::IsInitialized() const {
  return true;
}

void DeviceInitialEnrollmentStateRequest::Swap(DeviceInitialEnrollmentStateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInitialEnrollmentStateRequest::InternalSwap(DeviceInitialEnrollmentStateRequest* other) {
  serial_number_.Swap(&other->serial_number_);
  brand_code_.Swap(&other->brand_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceInitialEnrollmentStateRequest::GetTypeName() const {
  return "enterprise_management.DeviceInitialEnrollmentStateRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInitialEnrollmentStateRequest

// optional string serial_number = 1;
bool DeviceInitialEnrollmentStateRequest::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceInitialEnrollmentStateRequest::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceInitialEnrollmentStateRequest::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceInitialEnrollmentStateRequest::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& DeviceInitialEnrollmentStateRequest::serial_number() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
  return serial_number_.GetNoArena();
}
void DeviceInitialEnrollmentStateRequest::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
}
#if LANG_CXX11
void DeviceInitialEnrollmentStateRequest::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
}
#endif
void DeviceInitialEnrollmentStateRequest::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
}
void DeviceInitialEnrollmentStateRequest::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
}
::std::string* DeviceInitialEnrollmentStateRequest::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInitialEnrollmentStateRequest::release_serial_number() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInitialEnrollmentStateRequest::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceInitialEnrollmentStateRequest.serial_number)
}

// optional string brand_code = 2;
bool DeviceInitialEnrollmentStateRequest::has_brand_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceInitialEnrollmentStateRequest::set_has_brand_code() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceInitialEnrollmentStateRequest::clear_has_brand_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceInitialEnrollmentStateRequest::clear_brand_code() {
  brand_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brand_code();
}
const ::std::string& DeviceInitialEnrollmentStateRequest::brand_code() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
  return brand_code_.GetNoArena();
}
void DeviceInitialEnrollmentStateRequest::set_brand_code(const ::std::string& value) {
  set_has_brand_code();
  brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
}
#if LANG_CXX11
void DeviceInitialEnrollmentStateRequest::set_brand_code(::std::string&& value) {
  set_has_brand_code();
  brand_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
}
#endif
void DeviceInitialEnrollmentStateRequest::set_brand_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brand_code();
  brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
}
void DeviceInitialEnrollmentStateRequest::set_brand_code(const char* value, size_t size) {
  set_has_brand_code();
  brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
}
::std::string* DeviceInitialEnrollmentStateRequest::mutable_brand_code() {
  set_has_brand_code();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
  return brand_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInitialEnrollmentStateRequest::release_brand_code() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
  clear_has_brand_code();
  return brand_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInitialEnrollmentStateRequest::set_allocated_brand_code(::std::string* brand_code) {
  if (brand_code != NULL) {
    set_has_brand_code();
  } else {
    clear_has_brand_code();
  }
  brand_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand_code);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceInitialEnrollmentStateRequest.brand_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInitialEnrollmentStateResponse::kInitialEnrollmentModeFieldNumber;
const int DeviceInitialEnrollmentStateResponse::kManagementDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInitialEnrollmentStateResponse::DeviceInitialEnrollmentStateResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceInitialEnrollmentStateResponse)
}
DeviceInitialEnrollmentStateResponse::DeviceInitialEnrollmentStateResponse(const DeviceInitialEnrollmentStateResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  management_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_management_domain()) {
    management_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.management_domain_);
  }
  initial_enrollment_mode_ = from.initial_enrollment_mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceInitialEnrollmentStateResponse)
}

void DeviceInitialEnrollmentStateResponse::SharedCtor() {
  _cached_size_ = 0;
  management_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_enrollment_mode_ = 0;
}

DeviceInitialEnrollmentStateResponse::~DeviceInitialEnrollmentStateResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceInitialEnrollmentStateResponse)
  SharedDtor();
}

void DeviceInitialEnrollmentStateResponse::SharedDtor() {
  management_domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInitialEnrollmentStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceInitialEnrollmentStateResponse& DeviceInitialEnrollmentStateResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceInitialEnrollmentStateResponse* DeviceInitialEnrollmentStateResponse::New(::google::protobuf::Arena* arena) const {
  DeviceInitialEnrollmentStateResponse* n = new DeviceInitialEnrollmentStateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInitialEnrollmentStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  if (has_management_domain()) {
    GOOGLE_DCHECK(!management_domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*management_domain_.UnsafeRawStringPointer())->clear();
  }
  initial_enrollment_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceInitialEnrollmentStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceInitialEnrollmentStateResponse.InitialEnrollmentMode initial_enrollment_mode = 1 [default = INITIAL_ENROLLMENT_MODE_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_IsValid(value)) {
            set_initial_enrollment_mode(static_cast< ::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string management_domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_management_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceInitialEnrollmentStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceInitialEnrollmentStateResponse)
  return false;
#undef DO_
}

void DeviceInitialEnrollmentStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceInitialEnrollmentStateResponse.InitialEnrollmentMode initial_enrollment_mode = 1 [default = INITIAL_ENROLLMENT_MODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->initial_enrollment_mode(), output);
  }

  // optional string management_domain = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->management_domain(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceInitialEnrollmentStateResponse)
}

size_t DeviceInitialEnrollmentStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string management_domain = 2;
    if (has_management_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->management_domain());
    }

    // optional .enterprise_management.DeviceInitialEnrollmentStateResponse.InitialEnrollmentMode initial_enrollment_mode = 1 [default = INITIAL_ENROLLMENT_MODE_NONE];
    if (has_initial_enrollment_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->initial_enrollment_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInitialEnrollmentStateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceInitialEnrollmentStateResponse*>(&from));
}

void DeviceInitialEnrollmentStateResponse::MergeFrom(const DeviceInitialEnrollmentStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_management_domain();
      management_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.management_domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      initial_enrollment_mode_ = from.initial_enrollment_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceInitialEnrollmentStateResponse::CopyFrom(const DeviceInitialEnrollmentStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceInitialEnrollmentStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInitialEnrollmentStateResponse::IsInitialized() const {
  return true;
}

void DeviceInitialEnrollmentStateResponse::Swap(DeviceInitialEnrollmentStateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInitialEnrollmentStateResponse::InternalSwap(DeviceInitialEnrollmentStateResponse* other) {
  management_domain_.Swap(&other->management_domain_);
  std::swap(initial_enrollment_mode_, other->initial_enrollment_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceInitialEnrollmentStateResponse::GetTypeName() const {
  return "enterprise_management.DeviceInitialEnrollmentStateResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInitialEnrollmentStateResponse

// optional .enterprise_management.DeviceInitialEnrollmentStateResponse.InitialEnrollmentMode initial_enrollment_mode = 1 [default = INITIAL_ENROLLMENT_MODE_NONE];
bool DeviceInitialEnrollmentStateResponse::has_initial_enrollment_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceInitialEnrollmentStateResponse::set_has_initial_enrollment_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceInitialEnrollmentStateResponse::clear_has_initial_enrollment_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceInitialEnrollmentStateResponse::clear_initial_enrollment_mode() {
  initial_enrollment_mode_ = 0;
  clear_has_initial_enrollment_mode();
}
::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode DeviceInitialEnrollmentStateResponse::initial_enrollment_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceInitialEnrollmentStateResponse.initial_enrollment_mode)
  return static_cast< ::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode >(initial_enrollment_mode_);
}
void DeviceInitialEnrollmentStateResponse::set_initial_enrollment_mode(::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode value) {
  assert(::enterprise_management::DeviceInitialEnrollmentStateResponse_InitialEnrollmentMode_IsValid(value));
  set_has_initial_enrollment_mode();
  initial_enrollment_mode_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceInitialEnrollmentStateResponse.initial_enrollment_mode)
}

// optional string management_domain = 2;
bool DeviceInitialEnrollmentStateResponse::has_management_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceInitialEnrollmentStateResponse::set_has_management_domain() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceInitialEnrollmentStateResponse::clear_has_management_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceInitialEnrollmentStateResponse::clear_management_domain() {
  management_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_management_domain();
}
const ::std::string& DeviceInitialEnrollmentStateResponse::management_domain() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
  return management_domain_.GetNoArena();
}
void DeviceInitialEnrollmentStateResponse::set_management_domain(const ::std::string& value) {
  set_has_management_domain();
  management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
}
#if LANG_CXX11
void DeviceInitialEnrollmentStateResponse::set_management_domain(::std::string&& value) {
  set_has_management_domain();
  management_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
}
#endif
void DeviceInitialEnrollmentStateResponse::set_management_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_management_domain();
  management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
}
void DeviceInitialEnrollmentStateResponse::set_management_domain(const char* value, size_t size) {
  set_has_management_domain();
  management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
}
::std::string* DeviceInitialEnrollmentStateResponse::mutable_management_domain() {
  set_has_management_domain();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
  return management_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInitialEnrollmentStateResponse::release_management_domain() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
  clear_has_management_domain();
  return management_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInitialEnrollmentStateResponse::set_allocated_management_domain(::std::string* management_domain) {
  if (management_domain != NULL) {
    set_has_management_domain();
  } else {
    clear_has_management_domain();
  }
  management_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), management_domain);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceInitialEnrollmentStateResponse.management_domain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevicePairingRequest::kHostDeviceIdFieldNumber;
const int DevicePairingRequest::kControllerDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DevicePairingRequest::DevicePairingRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DevicePairingRequest)
}
DevicePairingRequest::DevicePairingRequest(const DevicePairingRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host_device_id()) {
    host_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_device_id_);
  }
  controller_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_device_id()) {
    controller_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_device_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePairingRequest)
}

void DevicePairingRequest::SharedCtor() {
  _cached_size_ = 0;
  host_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DevicePairingRequest::~DevicePairingRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePairingRequest)
  SharedDtor();
}

void DevicePairingRequest::SharedDtor() {
  host_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DevicePairingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevicePairingRequest& DevicePairingRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DevicePairingRequest* DevicePairingRequest::New(::google::protobuf::Arena* arena) const {
  DevicePairingRequest* n = new DevicePairingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DevicePairingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePairingRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_host_device_id()) {
      GOOGLE_DCHECK(!host_device_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_device_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_controller_device_id()) {
      GOOGLE_DCHECK(!controller_device_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*controller_device_id_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DevicePairingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DevicePairingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host_device_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DevicePairingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePairingRequest)
  return false;
#undef DO_
}

void DevicePairingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePairingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host_device_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_device_id(), output);
  }

  // optional string controller_device_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_device_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePairingRequest)
}

size_t DevicePairingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePairingRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string host_device_id = 1;
    if (has_host_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_device_id());
    }

    // optional string controller_device_id = 2;
    if (has_controller_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_device_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevicePairingRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DevicePairingRequest*>(&from));
}

void DevicePairingRequest::MergeFrom(const DevicePairingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePairingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_host_device_id();
      host_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_device_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_device_id();
      controller_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_device_id_);
    }
  }
}

void DevicePairingRequest::CopyFrom(const DevicePairingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePairingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePairingRequest::IsInitialized() const {
  return true;
}

void DevicePairingRequest::Swap(DevicePairingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DevicePairingRequest::InternalSwap(DevicePairingRequest* other) {
  host_device_id_.Swap(&other->host_device_id_);
  controller_device_id_.Swap(&other->controller_device_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DevicePairingRequest::GetTypeName() const {
  return "enterprise_management.DevicePairingRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DevicePairingRequest

// optional string host_device_id = 1;
bool DevicePairingRequest::has_host_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DevicePairingRequest::set_has_host_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DevicePairingRequest::clear_has_host_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DevicePairingRequest::clear_host_device_id() {
  host_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_device_id();
}
const ::std::string& DevicePairingRequest::host_device_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DevicePairingRequest.host_device_id)
  return host_device_id_.GetNoArena();
}
void DevicePairingRequest::set_host_device_id(const ::std::string& value) {
  set_has_host_device_id();
  host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DevicePairingRequest.host_device_id)
}
#if LANG_CXX11
void DevicePairingRequest::set_host_device_id(::std::string&& value) {
  set_has_host_device_id();
  host_device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DevicePairingRequest.host_device_id)
}
#endif
void DevicePairingRequest::set_host_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host_device_id();
  host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DevicePairingRequest.host_device_id)
}
void DevicePairingRequest::set_host_device_id(const char* value, size_t size) {
  set_has_host_device_id();
  host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DevicePairingRequest.host_device_id)
}
::std::string* DevicePairingRequest::mutable_host_device_id() {
  set_has_host_device_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DevicePairingRequest.host_device_id)
  return host_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DevicePairingRequest::release_host_device_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.DevicePairingRequest.host_device_id)
  clear_has_host_device_id();
  return host_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DevicePairingRequest::set_allocated_host_device_id(::std::string* host_device_id) {
  if (host_device_id != NULL) {
    set_has_host_device_id();
  } else {
    clear_has_host_device_id();
  }
  host_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_device_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DevicePairingRequest.host_device_id)
}

// optional string controller_device_id = 2;
bool DevicePairingRequest::has_controller_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DevicePairingRequest::set_has_controller_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DevicePairingRequest::clear_has_controller_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DevicePairingRequest::clear_controller_device_id() {
  controller_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_device_id();
}
const ::std::string& DevicePairingRequest::controller_device_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DevicePairingRequest.controller_device_id)
  return controller_device_id_.GetNoArena();
}
void DevicePairingRequest::set_controller_device_id(const ::std::string& value) {
  set_has_controller_device_id();
  controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DevicePairingRequest.controller_device_id)
}
#if LANG_CXX11
void DevicePairingRequest::set_controller_device_id(::std::string&& value) {
  set_has_controller_device_id();
  controller_device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DevicePairingRequest.controller_device_id)
}
#endif
void DevicePairingRequest::set_controller_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_device_id();
  controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DevicePairingRequest.controller_device_id)
}
void DevicePairingRequest::set_controller_device_id(const char* value, size_t size) {
  set_has_controller_device_id();
  controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DevicePairingRequest.controller_device_id)
}
::std::string* DevicePairingRequest::mutable_controller_device_id() {
  set_has_controller_device_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DevicePairingRequest.controller_device_id)
  return controller_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DevicePairingRequest::release_controller_device_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.DevicePairingRequest.controller_device_id)
  clear_has_controller_device_id();
  return controller_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DevicePairingRequest::set_allocated_controller_device_id(::std::string* controller_device_id) {
  if (controller_device_id != NULL) {
    set_has_controller_device_id();
  } else {
    clear_has_controller_device_id();
  }
  controller_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_device_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DevicePairingRequest.controller_device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevicePairingResponse::kStatusCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DevicePairingResponse::DevicePairingResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DevicePairingResponse)
}
DevicePairingResponse::DevicePairingResponse(const DevicePairingResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePairingResponse)
}

void DevicePairingResponse::SharedCtor() {
  _cached_size_ = 0;
  status_code_ = 1;
}

DevicePairingResponse::~DevicePairingResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePairingResponse)
  SharedDtor();
}

void DevicePairingResponse::SharedDtor() {
}

void DevicePairingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevicePairingResponse& DevicePairingResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DevicePairingResponse* DevicePairingResponse::New(::google::protobuf::Arena* arena) const {
  DevicePairingResponse* n = new DevicePairingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DevicePairingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePairingResponse)
  status_code_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DevicePairingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DevicePairingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DevicePairingResponse_StatusCode_IsValid(value)) {
            set_status_code(static_cast< ::enterprise_management::DevicePairingResponse_StatusCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DevicePairingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePairingResponse)
  return false;
#undef DO_
}

void DevicePairingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePairingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePairingResponse)
}

size_t DevicePairingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePairingResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
  if (has_status_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevicePairingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DevicePairingResponse*>(&from));
}

void DevicePairingResponse::MergeFrom(const DevicePairingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePairingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status_code()) {
    set_status_code(from.status_code());
  }
}

void DevicePairingResponse::CopyFrom(const DevicePairingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePairingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePairingResponse::IsInitialized() const {
  return true;
}

void DevicePairingResponse::Swap(DevicePairingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DevicePairingResponse::InternalSwap(DevicePairingResponse* other) {
  std::swap(status_code_, other->status_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DevicePairingResponse::GetTypeName() const {
  return "enterprise_management.DevicePairingResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DevicePairingResponse

// optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
bool DevicePairingResponse::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DevicePairingResponse::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
void DevicePairingResponse::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void DevicePairingResponse::clear_status_code() {
  status_code_ = 1;
  clear_has_status_code();
}
::enterprise_management::DevicePairingResponse_StatusCode DevicePairingResponse::status_code() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DevicePairingResponse.status_code)
  return static_cast< ::enterprise_management::DevicePairingResponse_StatusCode >(status_code_);
}
void DevicePairingResponse::set_status_code(::enterprise_management::DevicePairingResponse_StatusCode value) {
  assert(::enterprise_management::DevicePairingResponse_StatusCode_IsValid(value));
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DevicePairingResponse.status_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckDevicePairingRequest::kHostDeviceIdFieldNumber;
const int CheckDevicePairingRequest::kControllerDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckDevicePairingRequest::CheckDevicePairingRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckDevicePairingRequest)
}
CheckDevicePairingRequest::CheckDevicePairingRequest(const CheckDevicePairingRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host_device_id()) {
    host_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_device_id_);
  }
  controller_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_controller_device_id()) {
    controller_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_device_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckDevicePairingRequest)
}

void CheckDevicePairingRequest::SharedCtor() {
  _cached_size_ = 0;
  host_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CheckDevicePairingRequest::~CheckDevicePairingRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckDevicePairingRequest)
  SharedDtor();
}

void CheckDevicePairingRequest::SharedDtor() {
  host_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controller_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckDevicePairingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckDevicePairingRequest& CheckDevicePairingRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckDevicePairingRequest* CheckDevicePairingRequest::New(::google::protobuf::Arena* arena) const {
  CheckDevicePairingRequest* n = new CheckDevicePairingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckDevicePairingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckDevicePairingRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_host_device_id()) {
      GOOGLE_DCHECK(!host_device_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_device_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_controller_device_id()) {
      GOOGLE_DCHECK(!controller_device_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*controller_device_id_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckDevicePairingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckDevicePairingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host_device_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controller_device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckDevicePairingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckDevicePairingRequest)
  return false;
#undef DO_
}

void CheckDevicePairingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckDevicePairingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host_device_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_device_id(), output);
  }

  // optional string controller_device_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->controller_device_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckDevicePairingRequest)
}

size_t CheckDevicePairingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckDevicePairingRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string host_device_id = 1;
    if (has_host_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_device_id());
    }

    // optional string controller_device_id = 2;
    if (has_controller_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controller_device_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckDevicePairingRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckDevicePairingRequest*>(&from));
}

void CheckDevicePairingRequest::MergeFrom(const CheckDevicePairingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckDevicePairingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_host_device_id();
      host_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_device_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_controller_device_id();
      controller_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_device_id_);
    }
  }
}

void CheckDevicePairingRequest::CopyFrom(const CheckDevicePairingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckDevicePairingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDevicePairingRequest::IsInitialized() const {
  return true;
}

void CheckDevicePairingRequest::Swap(CheckDevicePairingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckDevicePairingRequest::InternalSwap(CheckDevicePairingRequest* other) {
  host_device_id_.Swap(&other->host_device_id_);
  controller_device_id_.Swap(&other->controller_device_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckDevicePairingRequest::GetTypeName() const {
  return "enterprise_management.CheckDevicePairingRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckDevicePairingRequest

// optional string host_device_id = 1;
bool CheckDevicePairingRequest::has_host_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckDevicePairingRequest::set_has_host_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckDevicePairingRequest::clear_has_host_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckDevicePairingRequest::clear_host_device_id() {
  host_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_device_id();
}
const ::std::string& CheckDevicePairingRequest::host_device_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CheckDevicePairingRequest.host_device_id)
  return host_device_id_.GetNoArena();
}
void CheckDevicePairingRequest::set_host_device_id(const ::std::string& value) {
  set_has_host_device_id();
  host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
#if LANG_CXX11
void CheckDevicePairingRequest::set_host_device_id(::std::string&& value) {
  set_has_host_device_id();
  host_device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
#endif
void CheckDevicePairingRequest::set_host_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host_device_id();
  host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
void CheckDevicePairingRequest::set_host_device_id(const char* value, size_t size) {
  set_has_host_device_id();
  host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
::std::string* CheckDevicePairingRequest::mutable_host_device_id() {
  set_has_host_device_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.CheckDevicePairingRequest.host_device_id)
  return host_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckDevicePairingRequest::release_host_device_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.CheckDevicePairingRequest.host_device_id)
  clear_has_host_device_id();
  return host_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckDevicePairingRequest::set_allocated_host_device_id(::std::string* host_device_id) {
  if (host_device_id != NULL) {
    set_has_host_device_id();
  } else {
    clear_has_host_device_id();
  }
  host_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_device_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.CheckDevicePairingRequest.host_device_id)
}

// optional string controller_device_id = 2;
bool CheckDevicePairingRequest::has_controller_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckDevicePairingRequest::set_has_controller_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckDevicePairingRequest::clear_has_controller_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckDevicePairingRequest::clear_controller_device_id() {
  controller_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_device_id();
}
const ::std::string& CheckDevicePairingRequest::controller_device_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CheckDevicePairingRequest.controller_device_id)
  return controller_device_id_.GetNoArena();
}
void CheckDevicePairingRequest::set_controller_device_id(const ::std::string& value) {
  set_has_controller_device_id();
  controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
#if LANG_CXX11
void CheckDevicePairingRequest::set_controller_device_id(::std::string&& value) {
  set_has_controller_device_id();
  controller_device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
#endif
void CheckDevicePairingRequest::set_controller_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_device_id();
  controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
void CheckDevicePairingRequest::set_controller_device_id(const char* value, size_t size) {
  set_has_controller_device_id();
  controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
::std::string* CheckDevicePairingRequest::mutable_controller_device_id() {
  set_has_controller_device_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.CheckDevicePairingRequest.controller_device_id)
  return controller_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckDevicePairingRequest::release_controller_device_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.CheckDevicePairingRequest.controller_device_id)
  clear_has_controller_device_id();
  return controller_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckDevicePairingRequest::set_allocated_controller_device_id(::std::string* controller_device_id) {
  if (controller_device_id != NULL) {
    set_has_controller_device_id();
  } else {
    clear_has_controller_device_id();
  }
  controller_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_device_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckDevicePairingResponse::kStatusCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckDevicePairingResponse::CheckDevicePairingResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckDevicePairingResponse)
}
CheckDevicePairingResponse::CheckDevicePairingResponse(const CheckDevicePairingResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckDevicePairingResponse)
}

void CheckDevicePairingResponse::SharedCtor() {
  _cached_size_ = 0;
  status_code_ = 1;
}

CheckDevicePairingResponse::~CheckDevicePairingResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckDevicePairingResponse)
  SharedDtor();
}

void CheckDevicePairingResponse::SharedDtor() {
}

void CheckDevicePairingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckDevicePairingResponse& CheckDevicePairingResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckDevicePairingResponse* CheckDevicePairingResponse::New(::google::protobuf::Arena* arena) const {
  CheckDevicePairingResponse* n = new CheckDevicePairingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckDevicePairingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckDevicePairingResponse)
  status_code_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckDevicePairingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckDevicePairingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::CheckDevicePairingResponse_StatusCode_IsValid(value)) {
            set_status_code(static_cast< ::enterprise_management::CheckDevicePairingResponse_StatusCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckDevicePairingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckDevicePairingResponse)
  return false;
#undef DO_
}

void CheckDevicePairingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckDevicePairingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckDevicePairingResponse)
}

size_t CheckDevicePairingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckDevicePairingResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
  if (has_status_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckDevicePairingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckDevicePairingResponse*>(&from));
}

void CheckDevicePairingResponse::MergeFrom(const CheckDevicePairingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckDevicePairingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status_code()) {
    set_status_code(from.status_code());
  }
}

void CheckDevicePairingResponse::CopyFrom(const CheckDevicePairingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckDevicePairingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDevicePairingResponse::IsInitialized() const {
  return true;
}

void CheckDevicePairingResponse::Swap(CheckDevicePairingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckDevicePairingResponse::InternalSwap(CheckDevicePairingResponse* other) {
  std::swap(status_code_, other->status_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckDevicePairingResponse::GetTypeName() const {
  return "enterprise_management.CheckDevicePairingResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckDevicePairingResponse

// optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
bool CheckDevicePairingResponse::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckDevicePairingResponse::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckDevicePairingResponse::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckDevicePairingResponse::clear_status_code() {
  status_code_ = 1;
  clear_has_status_code();
}
::enterprise_management::CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::status_code() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CheckDevicePairingResponse.status_code)
  return static_cast< ::enterprise_management::CheckDevicePairingResponse_StatusCode >(status_code_);
}
void CheckDevicePairingResponse::set_status_code(::enterprise_management::CheckDevicePairingResponse_StatusCode value) {
  assert(::enterprise_management::CheckDevicePairingResponse_StatusCode_IsValid(value));
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.CheckDevicePairingResponse.status_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteCommand::kTypeFieldNumber;
const int RemoteCommand::kCommandIdFieldNumber;
const int RemoteCommand::kAgeOfCommandFieldNumber;
const int RemoteCommand::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteCommand::RemoteCommand()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.RemoteCommand)
}
RemoteCommand::RemoteCommand(const RemoteCommand& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&command_id_, &from.command_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&command_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RemoteCommand)
}

void RemoteCommand::SharedCtor() {
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_of_command_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(age_of_command_));
  type_ = -1;
}

RemoteCommand::~RemoteCommand() {
  // @@protoc_insertion_point(destructor:enterprise_management.RemoteCommand)
  SharedDtor();
}

void RemoteCommand::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoteCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoteCommand& RemoteCommand::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoteCommand* RemoteCommand::New(::google::protobuf::Arena* arena) const {
  RemoteCommand* n = new RemoteCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RemoteCommand)
  if (has_payload()) {
    GOOGLE_DCHECK(!payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*payload_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&command_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_of_command_) -
        reinterpret_cast<char*>(&command_id_)) + sizeof(age_of_command_));
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoteCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.RemoteCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.RemoteCommand.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::RemoteCommand_Type_IsValid(value)) {
            set_type(static_cast< ::enterprise_management::RemoteCommand_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 command_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_command_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &command_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 age_of_command = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_age_of_command();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &age_of_command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string payload = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.RemoteCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.RemoteCommand)
  return false;
#undef DO_
}

void RemoteCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.RemoteCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.RemoteCommand.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 command_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->command_id(), output);
  }

  // optional int64 age_of_command = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->age_of_command(), output);
  }

  // optional string payload = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->payload(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.RemoteCommand)
}

size_t RemoteCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RemoteCommand)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string payload = 4;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload());
    }

    // optional int64 command_id = 2;
    if (has_command_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->command_id());
    }

    // optional int64 age_of_command = 3;
    if (has_age_of_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->age_of_command());
    }

    // optional .enterprise_management.RemoteCommand.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoteCommand*>(&from));
}

void RemoteCommand::MergeFrom(const RemoteCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RemoteCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      command_id_ = from.command_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      age_of_command_ = from.age_of_command_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteCommand::CopyFrom(const RemoteCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RemoteCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCommand::IsInitialized() const {
  return true;
}

void RemoteCommand::Swap(RemoteCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteCommand::InternalSwap(RemoteCommand* other) {
  payload_.Swap(&other->payload_);
  std::swap(command_id_, other->command_id_);
  std::swap(age_of_command_, other->age_of_command_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RemoteCommand::GetTypeName() const {
  return "enterprise_management.RemoteCommand";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteCommand

// optional .enterprise_management.RemoteCommand.Type type = 1;
bool RemoteCommand::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RemoteCommand::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void RemoteCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void RemoteCommand::clear_type() {
  type_ = -1;
  clear_has_type();
}
::enterprise_management::RemoteCommand_Type RemoteCommand::type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.type)
  return static_cast< ::enterprise_management::RemoteCommand_Type >(type_);
}
void RemoteCommand::set_type(::enterprise_management::RemoteCommand_Type value) {
  assert(::enterprise_management::RemoteCommand_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.type)
}

// optional int64 command_id = 2;
bool RemoteCommand::has_command_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemoteCommand::set_has_command_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RemoteCommand::clear_has_command_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemoteCommand::clear_command_id() {
  command_id_ = GOOGLE_LONGLONG(0);
  clear_has_command_id();
}
::google::protobuf::int64 RemoteCommand::command_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.command_id)
  return command_id_;
}
void RemoteCommand::set_command_id(::google::protobuf::int64 value) {
  set_has_command_id();
  command_id_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.command_id)
}

// optional int64 age_of_command = 3;
bool RemoteCommand::has_age_of_command() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RemoteCommand::set_has_age_of_command() {
  _has_bits_[0] |= 0x00000004u;
}
void RemoteCommand::clear_has_age_of_command() {
  _has_bits_[0] &= ~0x00000004u;
}
void RemoteCommand::clear_age_of_command() {
  age_of_command_ = GOOGLE_LONGLONG(0);
  clear_has_age_of_command();
}
::google::protobuf::int64 RemoteCommand::age_of_command() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.age_of_command)
  return age_of_command_;
}
void RemoteCommand::set_age_of_command(::google::protobuf::int64 value) {
  set_has_age_of_command();
  age_of_command_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.age_of_command)
}

// optional string payload = 4;
bool RemoteCommand::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemoteCommand::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
void RemoteCommand::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemoteCommand::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
const ::std::string& RemoteCommand::payload() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.payload)
  return payload_.GetNoArena();
}
void RemoteCommand::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.payload)
}
#if LANG_CXX11
void RemoteCommand::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.RemoteCommand.payload)
}
#endif
void RemoteCommand::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.RemoteCommand.payload)
}
void RemoteCommand::set_payload(const char* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.RemoteCommand.payload)
}
::std::string* RemoteCommand::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:enterprise_management.RemoteCommand.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteCommand::release_payload() {
  // @@protoc_insertion_point(field_release:enterprise_management.RemoteCommand.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteCommand::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.RemoteCommand.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteCommandResult::kResultFieldNumber;
const int RemoteCommandResult::kCommandIdFieldNumber;
const int RemoteCommandResult::kTimestampFieldNumber;
const int RemoteCommandResult::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteCommandResult::RemoteCommandResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.RemoteCommandResult)
}
RemoteCommandResult::RemoteCommandResult(const RemoteCommandResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&command_id_, &from.command_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&command_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RemoteCommandResult)
}

void RemoteCommandResult::SharedCtor() {
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&command_id_)) + sizeof(result_));
}

RemoteCommandResult::~RemoteCommandResult() {
  // @@protoc_insertion_point(destructor:enterprise_management.RemoteCommandResult)
  SharedDtor();
}

void RemoteCommandResult::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoteCommandResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoteCommandResult& RemoteCommandResult::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoteCommandResult* RemoteCommandResult::New(::google::protobuf::Arena* arena) const {
  RemoteCommandResult* n = new RemoteCommandResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteCommandResult::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RemoteCommandResult)
  if (has_payload()) {
    GOOGLE_DCHECK(!payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*payload_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&command_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&command_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoteCommandResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.RemoteCommandResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::RemoteCommandResult_ResultType_IsValid(value)) {
            set_result(static_cast< ::enterprise_management::RemoteCommandResult_ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 command_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_command_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &command_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string payload = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.RemoteCommandResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.RemoteCommandResult)
  return false;
#undef DO_
}

void RemoteCommandResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.RemoteCommandResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int64 command_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->command_id(), output);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional string payload = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->payload(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.RemoteCommandResult)
}

size_t RemoteCommandResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RemoteCommandResult)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string payload = 4;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload());
    }

    // optional int64 command_id = 2;
    if (has_command_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->command_id());
    }

    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteCommandResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoteCommandResult*>(&from));
}

void RemoteCommandResult::MergeFrom(const RemoteCommandResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RemoteCommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      command_id_ = from.command_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteCommandResult::CopyFrom(const RemoteCommandResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RemoteCommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCommandResult::IsInitialized() const {
  return true;
}

void RemoteCommandResult::Swap(RemoteCommandResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteCommandResult::InternalSwap(RemoteCommandResult* other) {
  payload_.Swap(&other->payload_);
  std::swap(command_id_, other->command_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RemoteCommandResult::GetTypeName() const {
  return "enterprise_management.RemoteCommandResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteCommandResult

// optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
bool RemoteCommandResult::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RemoteCommandResult::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void RemoteCommandResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void RemoteCommandResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
::enterprise_management::RemoteCommandResult_ResultType RemoteCommandResult::result() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.result)
  return static_cast< ::enterprise_management::RemoteCommandResult_ResultType >(result_);
}
void RemoteCommandResult::set_result(::enterprise_management::RemoteCommandResult_ResultType value) {
  assert(::enterprise_management::RemoteCommandResult_ResultType_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.result)
}

// optional int64 command_id = 2;
bool RemoteCommandResult::has_command_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemoteCommandResult::set_has_command_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RemoteCommandResult::clear_has_command_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemoteCommandResult::clear_command_id() {
  command_id_ = GOOGLE_LONGLONG(0);
  clear_has_command_id();
}
::google::protobuf::int64 RemoteCommandResult::command_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.command_id)
  return command_id_;
}
void RemoteCommandResult::set_command_id(::google::protobuf::int64 value) {
  set_has_command_id();
  command_id_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.command_id)
}

// optional int64 timestamp = 3;
bool RemoteCommandResult::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RemoteCommandResult::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void RemoteCommandResult::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void RemoteCommandResult::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 RemoteCommandResult::timestamp() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.timestamp)
  return timestamp_;
}
void RemoteCommandResult::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.timestamp)
}

// optional string payload = 4;
bool RemoteCommandResult::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemoteCommandResult::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
void RemoteCommandResult::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemoteCommandResult::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
const ::std::string& RemoteCommandResult::payload() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.payload)
  return payload_.GetNoArena();
}
void RemoteCommandResult::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.payload)
}
#if LANG_CXX11
void RemoteCommandResult::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.RemoteCommandResult.payload)
}
#endif
void RemoteCommandResult::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.RemoteCommandResult.payload)
}
void RemoteCommandResult::set_payload(const char* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.RemoteCommandResult.payload)
}
::std::string* RemoteCommandResult::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:enterprise_management.RemoteCommandResult.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteCommandResult::release_payload() {
  // @@protoc_insertion_point(field_release:enterprise_management.RemoteCommandResult.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteCommandResult::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.RemoteCommandResult.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceRemoteCommandRequest::kLastCommandUniqueIdFieldNumber;
const int DeviceRemoteCommandRequest::kCommandResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceRemoteCommandRequest::DeviceRemoteCommandRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceRemoteCommandRequest)
}
DeviceRemoteCommandRequest::DeviceRemoteCommandRequest(const DeviceRemoteCommandRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      command_results_(from.command_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_command_unique_id_ = from.last_command_unique_id_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRemoteCommandRequest)
}

void DeviceRemoteCommandRequest::SharedCtor() {
  _cached_size_ = 0;
  last_command_unique_id_ = GOOGLE_LONGLONG(0);
}

DeviceRemoteCommandRequest::~DeviceRemoteCommandRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceRemoteCommandRequest)
  SharedDtor();
}

void DeviceRemoteCommandRequest::SharedDtor() {
}

void DeviceRemoteCommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceRemoteCommandRequest& DeviceRemoteCommandRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceRemoteCommandRequest* DeviceRemoteCommandRequest::New(::google::protobuf::Arena* arena) const {
  DeviceRemoteCommandRequest* n = new DeviceRemoteCommandRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceRemoteCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRemoteCommandRequest)
  command_results_.Clear();
  last_command_unique_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceRemoteCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRemoteCommandRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_command_unique_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_last_command_unique_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_command_unique_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.RemoteCommandResult command_results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_command_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRemoteCommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRemoteCommandRequest)
  return false;
#undef DO_
}

void DeviceRemoteCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRemoteCommandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_command_unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_command_unique_id(), output);
  }

  // repeated .enterprise_management.RemoteCommandResult command_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->command_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->command_results(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRemoteCommandRequest)
}

size_t DeviceRemoteCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRemoteCommandRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.RemoteCommandResult command_results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->command_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command_results(static_cast<int>(i)));
    }
  }

  // optional int64 last_command_unique_id = 1;
  if (has_last_command_unique_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_command_unique_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRemoteCommandRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceRemoteCommandRequest*>(&from));
}

void DeviceRemoteCommandRequest::MergeFrom(const DeviceRemoteCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRemoteCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_results_.MergeFrom(from.command_results_);
  if (from.has_last_command_unique_id()) {
    set_last_command_unique_id(from.last_command_unique_id());
  }
}

void DeviceRemoteCommandRequest::CopyFrom(const DeviceRemoteCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRemoteCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRemoteCommandRequest::IsInitialized() const {
  return true;
}

void DeviceRemoteCommandRequest::Swap(DeviceRemoteCommandRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceRemoteCommandRequest::InternalSwap(DeviceRemoteCommandRequest* other) {
  command_results_.InternalSwap(&other->command_results_);
  std::swap(last_command_unique_id_, other->last_command_unique_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceRemoteCommandRequest::GetTypeName() const {
  return "enterprise_management.DeviceRemoteCommandRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceRemoteCommandRequest

// optional int64 last_command_unique_id = 1;
bool DeviceRemoteCommandRequest::has_last_command_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceRemoteCommandRequest::set_has_last_command_unique_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceRemoteCommandRequest::clear_has_last_command_unique_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceRemoteCommandRequest::clear_last_command_unique_id() {
  last_command_unique_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_command_unique_id();
}
::google::protobuf::int64 DeviceRemoteCommandRequest::last_command_unique_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRemoteCommandRequest.last_command_unique_id)
  return last_command_unique_id_;
}
void DeviceRemoteCommandRequest::set_last_command_unique_id(::google::protobuf::int64 value) {
  set_has_last_command_unique_id();
  last_command_unique_id_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRemoteCommandRequest.last_command_unique_id)
}

// repeated .enterprise_management.RemoteCommandResult command_results = 2;
int DeviceRemoteCommandRequest::command_results_size() const {
  return command_results_.size();
}
void DeviceRemoteCommandRequest::clear_command_results() {
  command_results_.Clear();
}
const ::enterprise_management::RemoteCommandResult& DeviceRemoteCommandRequest::command_results(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRemoteCommandRequest.command_results)
  return command_results_.Get(index);
}
::enterprise_management::RemoteCommandResult* DeviceRemoteCommandRequest::mutable_command_results(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRemoteCommandRequest.command_results)
  return command_results_.Mutable(index);
}
::enterprise_management::RemoteCommandResult* DeviceRemoteCommandRequest::add_command_results() {
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceRemoteCommandRequest.command_results)
  return command_results_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommandResult >*
DeviceRemoteCommandRequest::mutable_command_results() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceRemoteCommandRequest.command_results)
  return &command_results_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommandResult >&
DeviceRemoteCommandRequest::command_results() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceRemoteCommandRequest.command_results)
  return command_results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceRemoteCommandResponse::kCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceRemoteCommandResponse::DeviceRemoteCommandResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceRemoteCommandResponse)
}
DeviceRemoteCommandResponse::DeviceRemoteCommandResponse(const DeviceRemoteCommandResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRemoteCommandResponse)
}

void DeviceRemoteCommandResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeviceRemoteCommandResponse::~DeviceRemoteCommandResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceRemoteCommandResponse)
  SharedDtor();
}

void DeviceRemoteCommandResponse::SharedDtor() {
}

void DeviceRemoteCommandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceRemoteCommandResponse& DeviceRemoteCommandResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceRemoteCommandResponse* DeviceRemoteCommandResponse::New(::google::protobuf::Arena* arena) const {
  DeviceRemoteCommandResponse* n = new DeviceRemoteCommandResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceRemoteCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRemoteCommandResponse)
  commands_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceRemoteCommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRemoteCommandResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.RemoteCommand commands = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRemoteCommandResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRemoteCommandResponse)
  return false;
#undef DO_
}

void DeviceRemoteCommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRemoteCommandResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.RemoteCommand commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->commands_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->commands(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRemoteCommandResponse)
}

size_t DeviceRemoteCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRemoteCommandResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.RemoteCommand commands = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->commands_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commands(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRemoteCommandResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceRemoteCommandResponse*>(&from));
}

void DeviceRemoteCommandResponse::MergeFrom(const DeviceRemoteCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRemoteCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
}

void DeviceRemoteCommandResponse::CopyFrom(const DeviceRemoteCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRemoteCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRemoteCommandResponse::IsInitialized() const {
  return true;
}

void DeviceRemoteCommandResponse::Swap(DeviceRemoteCommandResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceRemoteCommandResponse::InternalSwap(DeviceRemoteCommandResponse* other) {
  commands_.InternalSwap(&other->commands_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceRemoteCommandResponse::GetTypeName() const {
  return "enterprise_management.DeviceRemoteCommandResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceRemoteCommandResponse

// repeated .enterprise_management.RemoteCommand commands = 1;
int DeviceRemoteCommandResponse::commands_size() const {
  return commands_.size();
}
void DeviceRemoteCommandResponse::clear_commands() {
  commands_.Clear();
}
const ::enterprise_management::RemoteCommand& DeviceRemoteCommandResponse::commands(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRemoteCommandResponse.commands)
  return commands_.Get(index);
}
::enterprise_management::RemoteCommand* DeviceRemoteCommandResponse::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRemoteCommandResponse.commands)
  return commands_.Mutable(index);
}
::enterprise_management::RemoteCommand* DeviceRemoteCommandResponse::add_commands() {
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceRemoteCommandResponse.commands)
  return commands_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommand >*
DeviceRemoteCommandResponse::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceRemoteCommandResponse.commands)
  return &commands_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::RemoteCommand >&
DeviceRemoteCommandResponse::commands() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceRemoteCommandResponse.commands)
  return commands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAttributeUpdatePermissionRequest::DeviceAttributeUpdatePermissionRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdatePermissionRequest)
}
DeviceAttributeUpdatePermissionRequest::DeviceAttributeUpdatePermissionRequest(const DeviceAttributeUpdatePermissionRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdatePermissionRequest)
}

void DeviceAttributeUpdatePermissionRequest::SharedCtor() {
  _cached_size_ = 0;
}

DeviceAttributeUpdatePermissionRequest::~DeviceAttributeUpdatePermissionRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  SharedDtor();
}

void DeviceAttributeUpdatePermissionRequest::SharedDtor() {
}

void DeviceAttributeUpdatePermissionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAttributeUpdatePermissionRequest& DeviceAttributeUpdatePermissionRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceAttributeUpdatePermissionRequest* DeviceAttributeUpdatePermissionRequest::New(::google::protobuf::Arena* arena) const {
  DeviceAttributeUpdatePermissionRequest* n = new DeviceAttributeUpdatePermissionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceAttributeUpdatePermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceAttributeUpdatePermissionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  return false;
#undef DO_
}

void DeviceAttributeUpdatePermissionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdatePermissionRequest)
}

size_t DeviceAttributeUpdatePermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAttributeUpdatePermissionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAttributeUpdatePermissionRequest*>(&from));
}

void DeviceAttributeUpdatePermissionRequest::MergeFrom(const DeviceAttributeUpdatePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceAttributeUpdatePermissionRequest::CopyFrom(const DeviceAttributeUpdatePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributeUpdatePermissionRequest::IsInitialized() const {
  return true;
}

void DeviceAttributeUpdatePermissionRequest::Swap(DeviceAttributeUpdatePermissionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceAttributeUpdatePermissionRequest::InternalSwap(DeviceAttributeUpdatePermissionRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAttributeUpdatePermissionRequest::GetTypeName() const {
  return "enterprise_management.DeviceAttributeUpdatePermissionRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAttributeUpdatePermissionRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAttributeUpdatePermissionResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAttributeUpdatePermissionResponse::DeviceAttributeUpdatePermissionResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdatePermissionResponse)
}
DeviceAttributeUpdatePermissionResponse::DeviceAttributeUpdatePermissionResponse(const DeviceAttributeUpdatePermissionResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdatePermissionResponse)
}

void DeviceAttributeUpdatePermissionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

DeviceAttributeUpdatePermissionResponse::~DeviceAttributeUpdatePermissionResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  SharedDtor();
}

void DeviceAttributeUpdatePermissionResponse::SharedDtor() {
}

void DeviceAttributeUpdatePermissionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAttributeUpdatePermissionResponse& DeviceAttributeUpdatePermissionResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceAttributeUpdatePermissionResponse* DeviceAttributeUpdatePermissionResponse::New(::google::protobuf::Arena* arena) const {
  DeviceAttributeUpdatePermissionResponse* n = new DeviceAttributeUpdatePermissionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceAttributeUpdatePermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceAttributeUpdatePermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(value)) {
            set_result(static_cast< ::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  return false;
#undef DO_
}

void DeviceAttributeUpdatePermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdatePermissionResponse)
}

size_t DeviceAttributeUpdatePermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAttributeUpdatePermissionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAttributeUpdatePermissionResponse*>(&from));
}

void DeviceAttributeUpdatePermissionResponse::MergeFrom(const DeviceAttributeUpdatePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void DeviceAttributeUpdatePermissionResponse::CopyFrom(const DeviceAttributeUpdatePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributeUpdatePermissionResponse::IsInitialized() const {
  return true;
}

void DeviceAttributeUpdatePermissionResponse::Swap(DeviceAttributeUpdatePermissionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceAttributeUpdatePermissionResponse::InternalSwap(DeviceAttributeUpdatePermissionResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAttributeUpdatePermissionResponse::GetTypeName() const {
  return "enterprise_management.DeviceAttributeUpdatePermissionResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAttributeUpdatePermissionResponse

// optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
bool DeviceAttributeUpdatePermissionResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAttributeUpdatePermissionResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceAttributeUpdatePermissionResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceAttributeUpdatePermissionResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::result() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdatePermissionResponse.result)
  return static_cast< ::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType >(result_);
}
void DeviceAttributeUpdatePermissionResponse::set_result(::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType value) {
  assert(::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdatePermissionResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAttributeUpdateRequest::kAssetIdFieldNumber;
const int DeviceAttributeUpdateRequest::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAttributeUpdateRequest::DeviceAttributeUpdateRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdateRequest)
}
DeviceAttributeUpdateRequest::DeviceAttributeUpdateRequest(const DeviceAttributeUpdateRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_asset_id()) {
    asset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_id_);
  }
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_location()) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdateRequest)
}

void DeviceAttributeUpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  asset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceAttributeUpdateRequest::~DeviceAttributeUpdateRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdateRequest)
  SharedDtor();
}

void DeviceAttributeUpdateRequest::SharedDtor() {
  asset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceAttributeUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAttributeUpdateRequest& DeviceAttributeUpdateRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceAttributeUpdateRequest* DeviceAttributeUpdateRequest::New(::google::protobuf::Arena* arena) const {
  DeviceAttributeUpdateRequest* n = new DeviceAttributeUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceAttributeUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdateRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_asset_id()) {
      GOOGLE_DCHECK(!asset_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*asset_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_location()) {
      GOOGLE_DCHECK(!location_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*location_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceAttributeUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string asset_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdateRequest)
  return false;
#undef DO_
}

void DeviceAttributeUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string asset_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->asset_id(), output);
  }

  // optional string location = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->location(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdateRequest)
}

size_t DeviceAttributeUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdateRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string asset_id = 1;
    if (has_asset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asset_id());
    }

    // optional string location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAttributeUpdateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAttributeUpdateRequest*>(&from));
}

void DeviceAttributeUpdateRequest::MergeFrom(const DeviceAttributeUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_asset_id();
      asset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_location();
      location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
    }
  }
}

void DeviceAttributeUpdateRequest::CopyFrom(const DeviceAttributeUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributeUpdateRequest::IsInitialized() const {
  return true;
}

void DeviceAttributeUpdateRequest::Swap(DeviceAttributeUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceAttributeUpdateRequest::InternalSwap(DeviceAttributeUpdateRequest* other) {
  asset_id_.Swap(&other->asset_id_);
  location_.Swap(&other->location_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAttributeUpdateRequest::GetTypeName() const {
  return "enterprise_management.DeviceAttributeUpdateRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAttributeUpdateRequest

// optional string asset_id = 1;
bool DeviceAttributeUpdateRequest::has_asset_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAttributeUpdateRequest::set_has_asset_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceAttributeUpdateRequest::clear_has_asset_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceAttributeUpdateRequest::clear_asset_id() {
  asset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_asset_id();
}
const ::std::string& DeviceAttributeUpdateRequest::asset_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
  return asset_id_.GetNoArena();
}
void DeviceAttributeUpdateRequest::set_asset_id(const ::std::string& value) {
  set_has_asset_id();
  asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
#if LANG_CXX11
void DeviceAttributeUpdateRequest::set_asset_id(::std::string&& value) {
  set_has_asset_id();
  asset_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
#endif
void DeviceAttributeUpdateRequest::set_asset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_asset_id();
  asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
void DeviceAttributeUpdateRequest::set_asset_id(const char* value, size_t size) {
  set_has_asset_id();
  asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
::std::string* DeviceAttributeUpdateRequest::mutable_asset_id() {
  set_has_asset_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
  return asset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceAttributeUpdateRequest::release_asset_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
  clear_has_asset_id();
  return asset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceAttributeUpdateRequest::set_allocated_asset_id(::std::string* asset_id) {
  if (asset_id != NULL) {
    set_has_asset_id();
  } else {
    clear_has_asset_id();
  }
  asset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}

// optional string location = 2;
bool DeviceAttributeUpdateRequest::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceAttributeUpdateRequest::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceAttributeUpdateRequest::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceAttributeUpdateRequest::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location();
}
const ::std::string& DeviceAttributeUpdateRequest::location() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdateRequest.location)
  return location_.GetNoArena();
}
void DeviceAttributeUpdateRequest::set_location(const ::std::string& value) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdateRequest.location)
}
#if LANG_CXX11
void DeviceAttributeUpdateRequest::set_location(::std::string&& value) {
  set_has_location();
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceAttributeUpdateRequest.location)
}
#endif
void DeviceAttributeUpdateRequest::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceAttributeUpdateRequest.location)
}
void DeviceAttributeUpdateRequest::set_location(const char* value, size_t size) {
  set_has_location();
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceAttributeUpdateRequest.location)
}
::std::string* DeviceAttributeUpdateRequest::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceAttributeUpdateRequest.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceAttributeUpdateRequest::release_location() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceAttributeUpdateRequest.location)
  clear_has_location();
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceAttributeUpdateRequest::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceAttributeUpdateRequest.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAttributeUpdateResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAttributeUpdateResponse::DeviceAttributeUpdateResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdateResponse)
}
DeviceAttributeUpdateResponse::DeviceAttributeUpdateResponse(const DeviceAttributeUpdateResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdateResponse)
}

void DeviceAttributeUpdateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

DeviceAttributeUpdateResponse::~DeviceAttributeUpdateResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdateResponse)
  SharedDtor();
}

void DeviceAttributeUpdateResponse::SharedDtor() {
}

void DeviceAttributeUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAttributeUpdateResponse& DeviceAttributeUpdateResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceAttributeUpdateResponse* DeviceAttributeUpdateResponse::New(::google::protobuf::Arena* arena) const {
  DeviceAttributeUpdateResponse* n = new DeviceAttributeUpdateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceAttributeUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdateResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceAttributeUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceAttributeUpdateResponse_ResultType_IsValid(value)) {
            set_result(static_cast< ::enterprise_management::DeviceAttributeUpdateResponse_ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdateResponse)
  return false;
#undef DO_
}

void DeviceAttributeUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdateResponse)
}

size_t DeviceAttributeUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdateResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAttributeUpdateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAttributeUpdateResponse*>(&from));
}

void DeviceAttributeUpdateResponse::MergeFrom(const DeviceAttributeUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void DeviceAttributeUpdateResponse::CopyFrom(const DeviceAttributeUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributeUpdateResponse::IsInitialized() const {
  return true;
}

void DeviceAttributeUpdateResponse::Swap(DeviceAttributeUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceAttributeUpdateResponse::InternalSwap(DeviceAttributeUpdateResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAttributeUpdateResponse::GetTypeName() const {
  return "enterprise_management.DeviceAttributeUpdateResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAttributeUpdateResponse

// optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
bool DeviceAttributeUpdateResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAttributeUpdateResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceAttributeUpdateResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceAttributeUpdateResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::enterprise_management::DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::result() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdateResponse.result)
  return static_cast< ::enterprise_management::DeviceAttributeUpdateResponse_ResultType >(result_);
}
void DeviceAttributeUpdateResponse::set_result(::enterprise_management::DeviceAttributeUpdateResponse_ResultType value) {
  assert(::enterprise_management::DeviceAttributeUpdateResponse_ResultType_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdateResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcmIdUpdateRequest::kGcmIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcmIdUpdateRequest::GcmIdUpdateRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.GcmIdUpdateRequest)
}
GcmIdUpdateRequest::GcmIdUpdateRequest(const GcmIdUpdateRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gcm_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gcm_id()) {
    gcm_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gcm_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.GcmIdUpdateRequest)
}

void GcmIdUpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  gcm_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GcmIdUpdateRequest::~GcmIdUpdateRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.GcmIdUpdateRequest)
  SharedDtor();
}

void GcmIdUpdateRequest::SharedDtor() {
  gcm_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GcmIdUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GcmIdUpdateRequest& GcmIdUpdateRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

GcmIdUpdateRequest* GcmIdUpdateRequest::New(::google::protobuf::Arena* arena) const {
  GcmIdUpdateRequest* n = new GcmIdUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GcmIdUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.GcmIdUpdateRequest)
  if (has_gcm_id()) {
    GOOGLE_DCHECK(!gcm_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*gcm_id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GcmIdUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.GcmIdUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gcm_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcm_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.GcmIdUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.GcmIdUpdateRequest)
  return false;
#undef DO_
}

void GcmIdUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.GcmIdUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gcm_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gcm_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.GcmIdUpdateRequest)
}

size_t GcmIdUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.GcmIdUpdateRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string gcm_id = 1;
  if (has_gcm_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gcm_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcmIdUpdateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GcmIdUpdateRequest*>(&from));
}

void GcmIdUpdateRequest::MergeFrom(const GcmIdUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.GcmIdUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gcm_id()) {
    set_has_gcm_id();
    gcm_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gcm_id_);
  }
}

void GcmIdUpdateRequest::CopyFrom(const GcmIdUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.GcmIdUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmIdUpdateRequest::IsInitialized() const {
  return true;
}

void GcmIdUpdateRequest::Swap(GcmIdUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcmIdUpdateRequest::InternalSwap(GcmIdUpdateRequest* other) {
  gcm_id_.Swap(&other->gcm_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GcmIdUpdateRequest::GetTypeName() const {
  return "enterprise_management.GcmIdUpdateRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GcmIdUpdateRequest

// optional string gcm_id = 1;
bool GcmIdUpdateRequest::has_gcm_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GcmIdUpdateRequest::set_has_gcm_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GcmIdUpdateRequest::clear_has_gcm_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GcmIdUpdateRequest::clear_gcm_id() {
  gcm_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gcm_id();
}
const ::std::string& GcmIdUpdateRequest::gcm_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.GcmIdUpdateRequest.gcm_id)
  return gcm_id_.GetNoArena();
}
void GcmIdUpdateRequest::set_gcm_id(const ::std::string& value) {
  set_has_gcm_id();
  gcm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
#if LANG_CXX11
void GcmIdUpdateRequest::set_gcm_id(::std::string&& value) {
  set_has_gcm_id();
  gcm_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
#endif
void GcmIdUpdateRequest::set_gcm_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gcm_id();
  gcm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
void GcmIdUpdateRequest::set_gcm_id(const char* value, size_t size) {
  set_has_gcm_id();
  gcm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
::std::string* GcmIdUpdateRequest::mutable_gcm_id() {
  set_has_gcm_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.GcmIdUpdateRequest.gcm_id)
  return gcm_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GcmIdUpdateRequest::release_gcm_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.GcmIdUpdateRequest.gcm_id)
  clear_has_gcm_id();
  return gcm_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GcmIdUpdateRequest::set_allocated_gcm_id(::std::string* gcm_id) {
  if (gcm_id != NULL) {
    set_has_gcm_id();
  } else {
    clear_has_gcm_id();
  }
  gcm_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcm_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.GcmIdUpdateRequest.gcm_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcmIdUpdateResponse::GcmIdUpdateResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.GcmIdUpdateResponse)
}
GcmIdUpdateResponse::GcmIdUpdateResponse(const GcmIdUpdateResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.GcmIdUpdateResponse)
}

void GcmIdUpdateResponse::SharedCtor() {
  _cached_size_ = 0;
}

GcmIdUpdateResponse::~GcmIdUpdateResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.GcmIdUpdateResponse)
  SharedDtor();
}

void GcmIdUpdateResponse::SharedDtor() {
}

void GcmIdUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GcmIdUpdateResponse& GcmIdUpdateResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

GcmIdUpdateResponse* GcmIdUpdateResponse::New(::google::protobuf::Arena* arena) const {
  GcmIdUpdateResponse* n = new GcmIdUpdateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GcmIdUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.GcmIdUpdateResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GcmIdUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.GcmIdUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.GcmIdUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.GcmIdUpdateResponse)
  return false;
#undef DO_
}

void GcmIdUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.GcmIdUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.GcmIdUpdateResponse)
}

size_t GcmIdUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.GcmIdUpdateResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcmIdUpdateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GcmIdUpdateResponse*>(&from));
}

void GcmIdUpdateResponse::MergeFrom(const GcmIdUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.GcmIdUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GcmIdUpdateResponse::CopyFrom(const GcmIdUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.GcmIdUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmIdUpdateResponse::IsInitialized() const {
  return true;
}

void GcmIdUpdateResponse::Swap(GcmIdUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcmIdUpdateResponse::InternalSwap(GcmIdUpdateResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GcmIdUpdateResponse::GetTypeName() const {
  return "enterprise_management.GcmIdUpdateResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GcmIdUpdateResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAndroidManagementRequest::CheckAndroidManagementRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckAndroidManagementRequest)
}
CheckAndroidManagementRequest::CheckAndroidManagementRequest(const CheckAndroidManagementRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckAndroidManagementRequest)
}

void CheckAndroidManagementRequest::SharedCtor() {
  _cached_size_ = 0;
}

CheckAndroidManagementRequest::~CheckAndroidManagementRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckAndroidManagementRequest)
  SharedDtor();
}

void CheckAndroidManagementRequest::SharedDtor() {
}

void CheckAndroidManagementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckAndroidManagementRequest& CheckAndroidManagementRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckAndroidManagementRequest* CheckAndroidManagementRequest::New(::google::protobuf::Arena* arena) const {
  CheckAndroidManagementRequest* n = new CheckAndroidManagementRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAndroidManagementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckAndroidManagementRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckAndroidManagementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckAndroidManagementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckAndroidManagementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckAndroidManagementRequest)
  return false;
#undef DO_
}

void CheckAndroidManagementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckAndroidManagementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckAndroidManagementRequest)
}

size_t CheckAndroidManagementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckAndroidManagementRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAndroidManagementRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckAndroidManagementRequest*>(&from));
}

void CheckAndroidManagementRequest::MergeFrom(const CheckAndroidManagementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckAndroidManagementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckAndroidManagementRequest::CopyFrom(const CheckAndroidManagementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckAndroidManagementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAndroidManagementRequest::IsInitialized() const {
  return true;
}

void CheckAndroidManagementRequest::Swap(CheckAndroidManagementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAndroidManagementRequest::InternalSwap(CheckAndroidManagementRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckAndroidManagementRequest::GetTypeName() const {
  return "enterprise_management.CheckAndroidManagementRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAndroidManagementRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAndroidManagementResponse::CheckAndroidManagementResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckAndroidManagementResponse)
}
CheckAndroidManagementResponse::CheckAndroidManagementResponse(const CheckAndroidManagementResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckAndroidManagementResponse)
}

void CheckAndroidManagementResponse::SharedCtor() {
  _cached_size_ = 0;
}

CheckAndroidManagementResponse::~CheckAndroidManagementResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckAndroidManagementResponse)
  SharedDtor();
}

void CheckAndroidManagementResponse::SharedDtor() {
}

void CheckAndroidManagementResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckAndroidManagementResponse& CheckAndroidManagementResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckAndroidManagementResponse* CheckAndroidManagementResponse::New(::google::protobuf::Arena* arena) const {
  CheckAndroidManagementResponse* n = new CheckAndroidManagementResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAndroidManagementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckAndroidManagementResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckAndroidManagementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckAndroidManagementResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckAndroidManagementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckAndroidManagementResponse)
  return false;
#undef DO_
}

void CheckAndroidManagementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckAndroidManagementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckAndroidManagementResponse)
}

size_t CheckAndroidManagementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckAndroidManagementResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAndroidManagementResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckAndroidManagementResponse*>(&from));
}

void CheckAndroidManagementResponse::MergeFrom(const CheckAndroidManagementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckAndroidManagementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckAndroidManagementResponse::CopyFrom(const CheckAndroidManagementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckAndroidManagementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAndroidManagementResponse::IsInitialized() const {
  return true;
}

void CheckAndroidManagementResponse::Swap(CheckAndroidManagementResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAndroidManagementResponse::InternalSwap(CheckAndroidManagementResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckAndroidManagementResponse::GetTypeName() const {
  return "enterprise_management.CheckAndroidManagementResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAndroidManagementResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertificateBasedDeviceRegisterRequest::kSignedRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertificateBasedDeviceRegisterRequest::CertificateBasedDeviceRegisterRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CertificateBasedDeviceRegisterRequest)
}
CertificateBasedDeviceRegisterRequest::CertificateBasedDeviceRegisterRequest(const CertificateBasedDeviceRegisterRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signed_request()) {
    signed_request_ = new ::enterprise_management::SignedData(*from.signed_request_);
  } else {
    signed_request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CertificateBasedDeviceRegisterRequest)
}

void CertificateBasedDeviceRegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  signed_request_ = NULL;
}

CertificateBasedDeviceRegisterRequest::~CertificateBasedDeviceRegisterRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.CertificateBasedDeviceRegisterRequest)
  SharedDtor();
}

void CertificateBasedDeviceRegisterRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete signed_request_;
  }
}

void CertificateBasedDeviceRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CertificateBasedDeviceRegisterRequest& CertificateBasedDeviceRegisterRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CertificateBasedDeviceRegisterRequest* CertificateBasedDeviceRegisterRequest::New(::google::protobuf::Arena* arena) const {
  CertificateBasedDeviceRegisterRequest* n = new CertificateBasedDeviceRegisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertificateBasedDeviceRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  if (has_signed_request()) {
    GOOGLE_DCHECK(signed_request_ != NULL);
    signed_request_->::enterprise_management::SignedData::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CertificateBasedDeviceRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.SignedData signed_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signed_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CertificateBasedDeviceRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CertificateBasedDeviceRegisterRequest)
  return false;
#undef DO_
}

void CertificateBasedDeviceRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.SignedData signed_request = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->signed_request_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CertificateBasedDeviceRegisterRequest)
}

size_t CertificateBasedDeviceRegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .enterprise_management.SignedData signed_request = 1;
  if (has_signed_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signed_request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertificateBasedDeviceRegisterRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CertificateBasedDeviceRegisterRequest*>(&from));
}

void CertificateBasedDeviceRegisterRequest::MergeFrom(const CertificateBasedDeviceRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signed_request()) {
    mutable_signed_request()->::enterprise_management::SignedData::MergeFrom(from.signed_request());
  }
}

void CertificateBasedDeviceRegisterRequest::CopyFrom(const CertificateBasedDeviceRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateBasedDeviceRegisterRequest::IsInitialized() const {
  return true;
}

void CertificateBasedDeviceRegisterRequest::Swap(CertificateBasedDeviceRegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertificateBasedDeviceRegisterRequest::InternalSwap(CertificateBasedDeviceRegisterRequest* other) {
  std::swap(signed_request_, other->signed_request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CertificateBasedDeviceRegisterRequest::GetTypeName() const {
  return "enterprise_management.CertificateBasedDeviceRegisterRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertificateBasedDeviceRegisterRequest

// optional .enterprise_management.SignedData signed_request = 1;
bool CertificateBasedDeviceRegisterRequest::has_signed_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CertificateBasedDeviceRegisterRequest::set_has_signed_request() {
  _has_bits_[0] |= 0x00000001u;
}
void CertificateBasedDeviceRegisterRequest::clear_has_signed_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void CertificateBasedDeviceRegisterRequest::clear_signed_request() {
  if (signed_request_ != NULL) signed_request_->::enterprise_management::SignedData::Clear();
  clear_has_signed_request();
}
const ::enterprise_management::SignedData& CertificateBasedDeviceRegisterRequest::signed_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
  return signed_request_ != NULL ? *signed_request_
                         : *::enterprise_management::SignedData::internal_default_instance();
}
::enterprise_management::SignedData* CertificateBasedDeviceRegisterRequest::mutable_signed_request() {
  set_has_signed_request();
  if (signed_request_ == NULL) {
    signed_request_ = new ::enterprise_management::SignedData;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
  return signed_request_;
}
::enterprise_management::SignedData* CertificateBasedDeviceRegisterRequest::release_signed_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
  clear_has_signed_request();
  ::enterprise_management::SignedData* temp = signed_request_;
  signed_request_ = NULL;
  return temp;
}
void CertificateBasedDeviceRegisterRequest::set_allocated_signed_request(::enterprise_management::SignedData* signed_request) {
  delete signed_request_;
  signed_request_ = signed_request;
  if (signed_request) {
    set_has_signed_request();
  } else {
    clear_has_signed_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertificateBasedDeviceRegistrationData::kCertificateTypeFieldNumber;
const int CertificateBasedDeviceRegistrationData::kDeviceCertificateFieldNumber;
const int CertificateBasedDeviceRegistrationData::kDeviceRegisterRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertificateBasedDeviceRegistrationData::CertificateBasedDeviceRegistrationData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CertificateBasedDeviceRegistrationData)
}
CertificateBasedDeviceRegistrationData::CertificateBasedDeviceRegistrationData(const CertificateBasedDeviceRegistrationData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_certificate()) {
    device_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_certificate_);
  }
  if (from.has_device_register_request()) {
    device_register_request_ = new ::enterprise_management::DeviceRegisterRequest(*from.device_register_request_);
  } else {
    device_register_request_ = NULL;
  }
  certificate_type_ = from.certificate_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CertificateBasedDeviceRegistrationData)
}

void CertificateBasedDeviceRegistrationData::SharedCtor() {
  _cached_size_ = 0;
  device_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_register_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&certificate_type_) -
      reinterpret_cast<char*>(&device_register_request_)) + sizeof(certificate_type_));
}

CertificateBasedDeviceRegistrationData::~CertificateBasedDeviceRegistrationData() {
  // @@protoc_insertion_point(destructor:enterprise_management.CertificateBasedDeviceRegistrationData)
  SharedDtor();
}

void CertificateBasedDeviceRegistrationData::SharedDtor() {
  device_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete device_register_request_;
  }
}

void CertificateBasedDeviceRegistrationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CertificateBasedDeviceRegistrationData& CertificateBasedDeviceRegistrationData::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CertificateBasedDeviceRegistrationData* CertificateBasedDeviceRegistrationData::New(::google::protobuf::Arena* arena) const {
  CertificateBasedDeviceRegistrationData* n = new CertificateBasedDeviceRegistrationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertificateBasedDeviceRegistrationData::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_device_certificate()) {
      GOOGLE_DCHECK(!device_certificate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_certificate_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_register_request()) {
      GOOGLE_DCHECK(device_register_request_ != NULL);
      device_register_request_->::enterprise_management::DeviceRegisterRequest::Clear();
    }
  }
  certificate_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CertificateBasedDeviceRegistrationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType_IsValid(value)) {
            set_certificate_type(static_cast< ::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes device_certificate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_register_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CertificateBasedDeviceRegistrationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CertificateBasedDeviceRegistrationData)
  return false;
#undef DO_
}

void CertificateBasedDeviceRegistrationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->certificate_type(), output);
  }

  // optional bytes device_certificate = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->device_certificate(), output);
  }

  // optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->device_register_request_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CertificateBasedDeviceRegistrationData)
}

size_t CertificateBasedDeviceRegistrationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes device_certificate = 2;
    if (has_device_certificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_certificate());
    }

    // optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
    if (has_device_register_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_register_request_);
    }

    // optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
    if (has_certificate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->certificate_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertificateBasedDeviceRegistrationData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CertificateBasedDeviceRegistrationData*>(&from));
}

void CertificateBasedDeviceRegistrationData::MergeFrom(const CertificateBasedDeviceRegistrationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_certificate();
      device_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_certificate_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_device_register_request()->::enterprise_management::DeviceRegisterRequest::MergeFrom(from.device_register_request());
    }
    if (cached_has_bits & 0x00000004u) {
      certificate_type_ = from.certificate_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CertificateBasedDeviceRegistrationData::CopyFrom(const CertificateBasedDeviceRegistrationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CertificateBasedDeviceRegistrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateBasedDeviceRegistrationData::IsInitialized() const {
  return true;
}

void CertificateBasedDeviceRegistrationData::Swap(CertificateBasedDeviceRegistrationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertificateBasedDeviceRegistrationData::InternalSwap(CertificateBasedDeviceRegistrationData* other) {
  device_certificate_.Swap(&other->device_certificate_);
  std::swap(device_register_request_, other->device_register_request_);
  std::swap(certificate_type_, other->certificate_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CertificateBasedDeviceRegistrationData::GetTypeName() const {
  return "enterprise_management.CertificateBasedDeviceRegistrationData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertificateBasedDeviceRegistrationData

// optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
bool CertificateBasedDeviceRegistrationData::has_certificate_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CertificateBasedDeviceRegistrationData::set_has_certificate_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CertificateBasedDeviceRegistrationData::clear_has_certificate_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CertificateBasedDeviceRegistrationData::clear_certificate_type() {
  certificate_type_ = 0;
  clear_has_certificate_type();
}
::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::certificate_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegistrationData.certificate_type)
  return static_cast< ::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType >(certificate_type_);
}
void CertificateBasedDeviceRegistrationData::set_certificate_type(::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType value) {
  assert(::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType_IsValid(value));
  set_has_certificate_type();
  certificate_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.CertificateBasedDeviceRegistrationData.certificate_type)
}

// optional bytes device_certificate = 2;
bool CertificateBasedDeviceRegistrationData::has_device_certificate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CertificateBasedDeviceRegistrationData::set_has_device_certificate() {
  _has_bits_[0] |= 0x00000001u;
}
void CertificateBasedDeviceRegistrationData::clear_has_device_certificate() {
  _has_bits_[0] &= ~0x00000001u;
}
void CertificateBasedDeviceRegistrationData::clear_device_certificate() {
  device_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_certificate();
}
const ::std::string& CertificateBasedDeviceRegistrationData::device_certificate() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
  return device_certificate_.GetNoArena();
}
void CertificateBasedDeviceRegistrationData::set_device_certificate(const ::std::string& value) {
  set_has_device_certificate();
  device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
#if LANG_CXX11
void CertificateBasedDeviceRegistrationData::set_device_certificate(::std::string&& value) {
  set_has_device_certificate();
  device_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
#endif
void CertificateBasedDeviceRegistrationData::set_device_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_certificate();
  device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
void CertificateBasedDeviceRegistrationData::set_device_certificate(const void* value, size_t size) {
  set_has_device_certificate();
  device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
::std::string* CertificateBasedDeviceRegistrationData::mutable_device_certificate() {
  set_has_device_certificate();
  // @@protoc_insertion_point(field_mutable:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
  return device_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CertificateBasedDeviceRegistrationData::release_device_certificate() {
  // @@protoc_insertion_point(field_release:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
  clear_has_device_certificate();
  return device_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CertificateBasedDeviceRegistrationData::set_allocated_device_certificate(::std::string* device_certificate) {
  if (device_certificate != NULL) {
    set_has_device_certificate();
  } else {
    clear_has_device_certificate();
  }
  device_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_certificate);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}

// optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
bool CertificateBasedDeviceRegistrationData::has_device_register_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CertificateBasedDeviceRegistrationData::set_has_device_register_request() {
  _has_bits_[0] |= 0x00000002u;
}
void CertificateBasedDeviceRegistrationData::clear_has_device_register_request() {
  _has_bits_[0] &= ~0x00000002u;
}
void CertificateBasedDeviceRegistrationData::clear_device_register_request() {
  if (device_register_request_ != NULL) device_register_request_->::enterprise_management::DeviceRegisterRequest::Clear();
  clear_has_device_register_request();
}
const ::enterprise_management::DeviceRegisterRequest& CertificateBasedDeviceRegistrationData::device_register_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
  return device_register_request_ != NULL ? *device_register_request_
                         : *::enterprise_management::DeviceRegisterRequest::internal_default_instance();
}
::enterprise_management::DeviceRegisterRequest* CertificateBasedDeviceRegistrationData::mutable_device_register_request() {
  set_has_device_register_request();
  if (device_register_request_ == NULL) {
    device_register_request_ = new ::enterprise_management::DeviceRegisterRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
  return device_register_request_;
}
::enterprise_management::DeviceRegisterRequest* CertificateBasedDeviceRegistrationData::release_device_register_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
  clear_has_device_register_request();
  ::enterprise_management::DeviceRegisterRequest* temp = device_register_request_;
  device_register_request_ = NULL;
  return temp;
}
void CertificateBasedDeviceRegistrationData::set_allocated_device_register_request(::enterprise_management::DeviceRegisterRequest* device_register_request) {
  delete device_register_request_;
  device_register_request_ = device_register_request;
  if (device_register_request) {
    set_has_device_register_request();
  } else {
    clear_has_device_register_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterBrowserRequest::kMachineNameFieldNumber;
const int RegisterBrowserRequest::kOsPlatformFieldNumber;
const int RegisterBrowserRequest::kOsVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterBrowserRequest::RegisterBrowserRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.RegisterBrowserRequest)
}
RegisterBrowserRequest::RegisterBrowserRequest(const RegisterBrowserRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_name()) {
    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
  os_platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_platform()) {
    os_platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_platform_);
  }
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_version()) {
    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RegisterBrowserRequest)
}

void RegisterBrowserRequest::SharedCtor() {
  _cached_size_ = 0;
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterBrowserRequest::~RegisterBrowserRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.RegisterBrowserRequest)
  SharedDtor();
}

void RegisterBrowserRequest::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterBrowserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegisterBrowserRequest& RegisterBrowserRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegisterBrowserRequest* RegisterBrowserRequest::New(::google::protobuf::Arena* arena) const {
  RegisterBrowserRequest* n = new RegisterBrowserRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterBrowserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RegisterBrowserRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_machine_name()) {
      GOOGLE_DCHECK(!machine_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*machine_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_os_platform()) {
      GOOGLE_DCHECK(!os_platform_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*os_platform_.UnsafeRawStringPointer())->clear();
    }
    if (has_os_version()) {
      GOOGLE_DCHECK(!os_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*os_version_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterBrowserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.RegisterBrowserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string machine_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_platform = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_platform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.RegisterBrowserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.RegisterBrowserRequest)
  return false;
#undef DO_
}

void RegisterBrowserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.RegisterBrowserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string machine_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->machine_name(), output);
  }

  // optional string os_platform = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->os_platform(), output);
  }

  // optional string os_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.RegisterBrowserRequest)
}

size_t RegisterBrowserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RegisterBrowserRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string machine_name = 1;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string os_platform = 2;
    if (has_os_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_platform());
    }

    // optional string os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterBrowserRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegisterBrowserRequest*>(&from));
}

void RegisterBrowserRequest::MergeFrom(const RegisterBrowserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RegisterBrowserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_os_platform();
      os_platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_platform_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_os_version();
      os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
  }
}

void RegisterBrowserRequest::CopyFrom(const RegisterBrowserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RegisterBrowserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterBrowserRequest::IsInitialized() const {
  return true;
}

void RegisterBrowserRequest::Swap(RegisterBrowserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterBrowserRequest::InternalSwap(RegisterBrowserRequest* other) {
  machine_name_.Swap(&other->machine_name_);
  os_platform_.Swap(&other->os_platform_);
  os_version_.Swap(&other->os_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RegisterBrowserRequest::GetTypeName() const {
  return "enterprise_management.RegisterBrowserRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterBrowserRequest

// optional string machine_name = 1;
bool RegisterBrowserRequest::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegisterBrowserRequest::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RegisterBrowserRequest::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegisterBrowserRequest::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
const ::std::string& RegisterBrowserRequest::machine_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RegisterBrowserRequest.machine_name)
  return machine_name_.GetNoArena();
}
void RegisterBrowserRequest::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.RegisterBrowserRequest.machine_name)
}
#if LANG_CXX11
void RegisterBrowserRequest::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.RegisterBrowserRequest.machine_name)
}
#endif
void RegisterBrowserRequest::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.RegisterBrowserRequest.machine_name)
}
void RegisterBrowserRequest::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.RegisterBrowserRequest.machine_name)
}
::std::string* RegisterBrowserRequest::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:enterprise_management.RegisterBrowserRequest.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegisterBrowserRequest::release_machine_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.RegisterBrowserRequest.machine_name)
  clear_has_machine_name();
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterBrowserRequest::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.RegisterBrowserRequest.machine_name)
}

// optional string os_platform = 2;
bool RegisterBrowserRequest::has_os_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegisterBrowserRequest::set_has_os_platform() {
  _has_bits_[0] |= 0x00000002u;
}
void RegisterBrowserRequest::clear_has_os_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegisterBrowserRequest::clear_os_platform() {
  os_platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_platform();
}
const ::std::string& RegisterBrowserRequest::os_platform() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RegisterBrowserRequest.os_platform)
  return os_platform_.GetNoArena();
}
void RegisterBrowserRequest::set_os_platform(const ::std::string& value) {
  set_has_os_platform();
  os_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.RegisterBrowserRequest.os_platform)
}
#if LANG_CXX11
void RegisterBrowserRequest::set_os_platform(::std::string&& value) {
  set_has_os_platform();
  os_platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.RegisterBrowserRequest.os_platform)
}
#endif
void RegisterBrowserRequest::set_os_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os_platform();
  os_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.RegisterBrowserRequest.os_platform)
}
void RegisterBrowserRequest::set_os_platform(const char* value, size_t size) {
  set_has_os_platform();
  os_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.RegisterBrowserRequest.os_platform)
}
::std::string* RegisterBrowserRequest::mutable_os_platform() {
  set_has_os_platform();
  // @@protoc_insertion_point(field_mutable:enterprise_management.RegisterBrowserRequest.os_platform)
  return os_platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegisterBrowserRequest::release_os_platform() {
  // @@protoc_insertion_point(field_release:enterprise_management.RegisterBrowserRequest.os_platform)
  clear_has_os_platform();
  return os_platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterBrowserRequest::set_allocated_os_platform(::std::string* os_platform) {
  if (os_platform != NULL) {
    set_has_os_platform();
  } else {
    clear_has_os_platform();
  }
  os_platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_platform);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.RegisterBrowserRequest.os_platform)
}

// optional string os_version = 3;
bool RegisterBrowserRequest::has_os_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegisterBrowserRequest::set_has_os_version() {
  _has_bits_[0] |= 0x00000004u;
}
void RegisterBrowserRequest::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegisterBrowserRequest::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_version();
}
const ::std::string& RegisterBrowserRequest::os_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RegisterBrowserRequest.os_version)
  return os_version_.GetNoArena();
}
void RegisterBrowserRequest::set_os_version(const ::std::string& value) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.RegisterBrowserRequest.os_version)
}
#if LANG_CXX11
void RegisterBrowserRequest::set_os_version(::std::string&& value) {
  set_has_os_version();
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.RegisterBrowserRequest.os_version)
}
#endif
void RegisterBrowserRequest::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.RegisterBrowserRequest.os_version)
}
void RegisterBrowserRequest::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.RegisterBrowserRequest.os_version)
}
::std::string* RegisterBrowserRequest::mutable_os_version() {
  set_has_os_version();
  // @@protoc_insertion_point(field_mutable:enterprise_management.RegisterBrowserRequest.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegisterBrowserRequest::release_os_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.RegisterBrowserRequest.os_version)
  clear_has_os_version();
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterBrowserRequest::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    set_has_os_version();
  } else {
    clear_has_os_version();
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.RegisterBrowserRequest.os_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveDirectoryEnrollPlayUserRequest::kAuthSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveDirectoryEnrollPlayUserRequest::ActiveDirectoryEnrollPlayUserRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
}
ActiveDirectoryEnrollPlayUserRequest::ActiveDirectoryEnrollPlayUserRequest(const ActiveDirectoryEnrollPlayUserRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_session_id()) {
    auth_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
}

void ActiveDirectoryEnrollPlayUserRequest::SharedCtor() {
  _cached_size_ = 0;
  auth_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActiveDirectoryEnrollPlayUserRequest::~ActiveDirectoryEnrollPlayUserRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  SharedDtor();
}

void ActiveDirectoryEnrollPlayUserRequest::SharedDtor() {
  auth_session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActiveDirectoryEnrollPlayUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActiveDirectoryEnrollPlayUserRequest& ActiveDirectoryEnrollPlayUserRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActiveDirectoryEnrollPlayUserRequest* ActiveDirectoryEnrollPlayUserRequest::New(::google::protobuf::Arena* arena) const {
  ActiveDirectoryEnrollPlayUserRequest* n = new ActiveDirectoryEnrollPlayUserRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActiveDirectoryEnrollPlayUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  if (has_auth_session_id()) {
    GOOGLE_DCHECK(!auth_session_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*auth_session_id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActiveDirectoryEnrollPlayUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  return false;
#undef DO_
}

void ActiveDirectoryEnrollPlayUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auth_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_session_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
}

size_t ActiveDirectoryEnrollPlayUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string auth_session_id = 1;
  if (has_auth_session_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveDirectoryEnrollPlayUserRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActiveDirectoryEnrollPlayUserRequest*>(&from));
}

void ActiveDirectoryEnrollPlayUserRequest::MergeFrom(const ActiveDirectoryEnrollPlayUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auth_session_id()) {
    set_has_auth_session_id();
    auth_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_session_id_);
  }
}

void ActiveDirectoryEnrollPlayUserRequest::CopyFrom(const ActiveDirectoryEnrollPlayUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryEnrollPlayUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryEnrollPlayUserRequest::IsInitialized() const {
  return true;
}

void ActiveDirectoryEnrollPlayUserRequest::Swap(ActiveDirectoryEnrollPlayUserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveDirectoryEnrollPlayUserRequest::InternalSwap(ActiveDirectoryEnrollPlayUserRequest* other) {
  auth_session_id_.Swap(&other->auth_session_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ActiveDirectoryEnrollPlayUserRequest::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryEnrollPlayUserRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActiveDirectoryEnrollPlayUserRequest

// optional string auth_session_id = 1;
bool ActiveDirectoryEnrollPlayUserRequest::has_auth_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActiveDirectoryEnrollPlayUserRequest::set_has_auth_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActiveDirectoryEnrollPlayUserRequest::clear_has_auth_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActiveDirectoryEnrollPlayUserRequest::clear_auth_session_id() {
  auth_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_session_id();
}
const ::std::string& ActiveDirectoryEnrollPlayUserRequest::auth_session_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
  return auth_session_id_.GetNoArena();
}
void ActiveDirectoryEnrollPlayUserRequest::set_auth_session_id(const ::std::string& value) {
  set_has_auth_session_id();
  auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
}
#if LANG_CXX11
void ActiveDirectoryEnrollPlayUserRequest::set_auth_session_id(::std::string&& value) {
  set_has_auth_session_id();
  auth_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
}
#endif
void ActiveDirectoryEnrollPlayUserRequest::set_auth_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_session_id();
  auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
}
void ActiveDirectoryEnrollPlayUserRequest::set_auth_session_id(const char* value, size_t size) {
  set_has_auth_session_id();
  auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
}
::std::string* ActiveDirectoryEnrollPlayUserRequest::mutable_auth_session_id() {
  set_has_auth_session_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
  return auth_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActiveDirectoryEnrollPlayUserRequest::release_auth_session_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
  clear_has_auth_session_id();
  return auth_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActiveDirectoryEnrollPlayUserRequest::set_allocated_auth_session_id(::std::string* auth_session_id) {
  if (auth_session_id != NULL) {
    set_has_auth_session_id();
  } else {
    clear_has_auth_session_id();
  }
  auth_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_session_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryEnrollPlayUserRequest.auth_session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveDirectoryEnrollPlayUserResponse::kEnrollmentTokenFieldNumber;
const int ActiveDirectoryEnrollPlayUserResponse::kUserIdFieldNumber;
const int ActiveDirectoryEnrollPlayUserResponse::kSamlParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveDirectoryEnrollPlayUserResponse::ActiveDirectoryEnrollPlayUserResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
}
ActiveDirectoryEnrollPlayUserResponse::ActiveDirectoryEnrollPlayUserResponse(const ActiveDirectoryEnrollPlayUserResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enrollment_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enrollment_token()) {
    enrollment_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enrollment_token_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.has_saml_parameters()) {
    saml_parameters_ = new ::enterprise_management::SamlParametersProto(*from.saml_parameters_);
  } else {
    saml_parameters_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
}

void ActiveDirectoryEnrollPlayUserResponse::SharedCtor() {
  _cached_size_ = 0;
  enrollment_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  saml_parameters_ = NULL;
}

ActiveDirectoryEnrollPlayUserResponse::~ActiveDirectoryEnrollPlayUserResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  SharedDtor();
}

void ActiveDirectoryEnrollPlayUserResponse::SharedDtor() {
  enrollment_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete saml_parameters_;
  }
}

void ActiveDirectoryEnrollPlayUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActiveDirectoryEnrollPlayUserResponse& ActiveDirectoryEnrollPlayUserResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActiveDirectoryEnrollPlayUserResponse* ActiveDirectoryEnrollPlayUserResponse::New(::google::protobuf::Arena* arena) const {
  ActiveDirectoryEnrollPlayUserResponse* n = new ActiveDirectoryEnrollPlayUserResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActiveDirectoryEnrollPlayUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_enrollment_token()) {
      GOOGLE_DCHECK(!enrollment_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*enrollment_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_id()) {
      GOOGLE_DCHECK(!user_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_saml_parameters()) {
      GOOGLE_DCHECK(saml_parameters_ != NULL);
      saml_parameters_->::enterprise_management::SamlParametersProto::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActiveDirectoryEnrollPlayUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string enrollment_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enrollment_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.SamlParametersProto saml_parameters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saml_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  return false;
#undef DO_
}

void ActiveDirectoryEnrollPlayUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enrollment_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->enrollment_token(), output);
  }

  // optional string user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // optional .enterprise_management.SamlParametersProto saml_parameters = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->saml_parameters_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
}

size_t ActiveDirectoryEnrollPlayUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string enrollment_token = 1;
    if (has_enrollment_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enrollment_token());
    }

    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional .enterprise_management.SamlParametersProto saml_parameters = 3;
    if (has_saml_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->saml_parameters_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveDirectoryEnrollPlayUserResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActiveDirectoryEnrollPlayUserResponse*>(&from));
}

void ActiveDirectoryEnrollPlayUserResponse::MergeFrom(const ActiveDirectoryEnrollPlayUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_enrollment_token();
      enrollment_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enrollment_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_saml_parameters()->::enterprise_management::SamlParametersProto::MergeFrom(from.saml_parameters());
    }
  }
}

void ActiveDirectoryEnrollPlayUserResponse::CopyFrom(const ActiveDirectoryEnrollPlayUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryEnrollPlayUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryEnrollPlayUserResponse::IsInitialized() const {
  return true;
}

void ActiveDirectoryEnrollPlayUserResponse::Swap(ActiveDirectoryEnrollPlayUserResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveDirectoryEnrollPlayUserResponse::InternalSwap(ActiveDirectoryEnrollPlayUserResponse* other) {
  enrollment_token_.Swap(&other->enrollment_token_);
  user_id_.Swap(&other->user_id_);
  std::swap(saml_parameters_, other->saml_parameters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ActiveDirectoryEnrollPlayUserResponse::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryEnrollPlayUserResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActiveDirectoryEnrollPlayUserResponse

// optional string enrollment_token = 1;
bool ActiveDirectoryEnrollPlayUserResponse::has_enrollment_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActiveDirectoryEnrollPlayUserResponse::set_has_enrollment_token() {
  _has_bits_[0] |= 0x00000001u;
}
void ActiveDirectoryEnrollPlayUserResponse::clear_has_enrollment_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActiveDirectoryEnrollPlayUserResponse::clear_enrollment_token() {
  enrollment_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enrollment_token();
}
const ::std::string& ActiveDirectoryEnrollPlayUserResponse::enrollment_token() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
  return enrollment_token_.GetNoArena();
}
void ActiveDirectoryEnrollPlayUserResponse::set_enrollment_token(const ::std::string& value) {
  set_has_enrollment_token();
  enrollment_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
}
#if LANG_CXX11
void ActiveDirectoryEnrollPlayUserResponse::set_enrollment_token(::std::string&& value) {
  set_has_enrollment_token();
  enrollment_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
}
#endif
void ActiveDirectoryEnrollPlayUserResponse::set_enrollment_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enrollment_token();
  enrollment_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
}
void ActiveDirectoryEnrollPlayUserResponse::set_enrollment_token(const char* value, size_t size) {
  set_has_enrollment_token();
  enrollment_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
}
::std::string* ActiveDirectoryEnrollPlayUserResponse::mutable_enrollment_token() {
  set_has_enrollment_token();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
  return enrollment_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActiveDirectoryEnrollPlayUserResponse::release_enrollment_token() {
  // @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
  clear_has_enrollment_token();
  return enrollment_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActiveDirectoryEnrollPlayUserResponse::set_allocated_enrollment_token(::std::string* enrollment_token) {
  if (enrollment_token != NULL) {
    set_has_enrollment_token();
  } else {
    clear_has_enrollment_token();
  }
  enrollment_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enrollment_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.enrollment_token)
}

// optional string user_id = 2;
bool ActiveDirectoryEnrollPlayUserResponse::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActiveDirectoryEnrollPlayUserResponse::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ActiveDirectoryEnrollPlayUserResponse::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActiveDirectoryEnrollPlayUserResponse::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& ActiveDirectoryEnrollPlayUserResponse::user_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
  return user_id_.GetNoArena();
}
void ActiveDirectoryEnrollPlayUserResponse::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
}
#if LANG_CXX11
void ActiveDirectoryEnrollPlayUserResponse::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
}
#endif
void ActiveDirectoryEnrollPlayUserResponse::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
}
void ActiveDirectoryEnrollPlayUserResponse::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
}
::std::string* ActiveDirectoryEnrollPlayUserResponse::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActiveDirectoryEnrollPlayUserResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActiveDirectoryEnrollPlayUserResponse::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.user_id)
}

// optional .enterprise_management.SamlParametersProto saml_parameters = 3;
bool ActiveDirectoryEnrollPlayUserResponse::has_saml_parameters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActiveDirectoryEnrollPlayUserResponse::set_has_saml_parameters() {
  _has_bits_[0] |= 0x00000004u;
}
void ActiveDirectoryEnrollPlayUserResponse::clear_has_saml_parameters() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActiveDirectoryEnrollPlayUserResponse::clear_saml_parameters() {
  if (saml_parameters_ != NULL) saml_parameters_->::enterprise_management::SamlParametersProto::Clear();
  clear_has_saml_parameters();
}
const ::enterprise_management::SamlParametersProto& ActiveDirectoryEnrollPlayUserResponse::saml_parameters() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.saml_parameters)
  return saml_parameters_ != NULL ? *saml_parameters_
                         : *::enterprise_management::SamlParametersProto::internal_default_instance();
}
::enterprise_management::SamlParametersProto* ActiveDirectoryEnrollPlayUserResponse::mutable_saml_parameters() {
  set_has_saml_parameters();
  if (saml_parameters_ == NULL) {
    saml_parameters_ = new ::enterprise_management::SamlParametersProto;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.saml_parameters)
  return saml_parameters_;
}
::enterprise_management::SamlParametersProto* ActiveDirectoryEnrollPlayUserResponse::release_saml_parameters() {
  // @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.saml_parameters)
  clear_has_saml_parameters();
  ::enterprise_management::SamlParametersProto* temp = saml_parameters_;
  saml_parameters_ = NULL;
  return temp;
}
void ActiveDirectoryEnrollPlayUserResponse::set_allocated_saml_parameters(::enterprise_management::SamlParametersProto* saml_parameters) {
  delete saml_parameters_;
  saml_parameters_ = saml_parameters;
  if (saml_parameters) {
    set_has_saml_parameters();
  } else {
    clear_has_saml_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryEnrollPlayUserResponse.saml_parameters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SamlParametersProto::kAuthRedirectUrlFieldNumber;
const int SamlParametersProto::kAuthSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SamlParametersProto::SamlParametersProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SamlParametersProto)
}
SamlParametersProto::SamlParametersProto(const SamlParametersProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_redirect_url()) {
    auth_redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_redirect_url_);
  }
  auth_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_session_id()) {
    auth_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SamlParametersProto)
}

void SamlParametersProto::SharedCtor() {
  _cached_size_ = 0;
  auth_redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SamlParametersProto::~SamlParametersProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.SamlParametersProto)
  SharedDtor();
}

void SamlParametersProto::SharedDtor() {
  auth_redirect_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SamlParametersProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SamlParametersProto& SamlParametersProto::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

SamlParametersProto* SamlParametersProto::New(::google::protobuf::Arena* arena) const {
  SamlParametersProto* n = new SamlParametersProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SamlParametersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SamlParametersProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_auth_redirect_url()) {
      GOOGLE_DCHECK(!auth_redirect_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*auth_redirect_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_auth_session_id()) {
      GOOGLE_DCHECK(!auth_session_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*auth_session_id_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SamlParametersProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SamlParametersProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_redirect_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_redirect_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string auth_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SamlParametersProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SamlParametersProto)
  return false;
#undef DO_
}

void SamlParametersProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SamlParametersProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auth_redirect_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_redirect_url(), output);
  }

  // optional string auth_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->auth_session_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SamlParametersProto)
}

size_t SamlParametersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SamlParametersProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string auth_redirect_url = 1;
    if (has_auth_redirect_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_redirect_url());
    }

    // optional string auth_session_id = 2;
    if (has_auth_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_session_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SamlParametersProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SamlParametersProto*>(&from));
}

void SamlParametersProto::MergeFrom(const SamlParametersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SamlParametersProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_auth_redirect_url();
      auth_redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_redirect_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_auth_session_id();
      auth_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_session_id_);
    }
  }
}

void SamlParametersProto::CopyFrom(const SamlParametersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SamlParametersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamlParametersProto::IsInitialized() const {
  return true;
}

void SamlParametersProto::Swap(SamlParametersProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SamlParametersProto::InternalSwap(SamlParametersProto* other) {
  auth_redirect_url_.Swap(&other->auth_redirect_url_);
  auth_session_id_.Swap(&other->auth_session_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SamlParametersProto::GetTypeName() const {
  return "enterprise_management.SamlParametersProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SamlParametersProto

// optional string auth_redirect_url = 1;
bool SamlParametersProto::has_auth_redirect_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SamlParametersProto::set_has_auth_redirect_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SamlParametersProto::clear_has_auth_redirect_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SamlParametersProto::clear_auth_redirect_url() {
  auth_redirect_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_redirect_url();
}
const ::std::string& SamlParametersProto::auth_redirect_url() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SamlParametersProto.auth_redirect_url)
  return auth_redirect_url_.GetNoArena();
}
void SamlParametersProto::set_auth_redirect_url(const ::std::string& value) {
  set_has_auth_redirect_url();
  auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.SamlParametersProto.auth_redirect_url)
}
#if LANG_CXX11
void SamlParametersProto::set_auth_redirect_url(::std::string&& value) {
  set_has_auth_redirect_url();
  auth_redirect_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.SamlParametersProto.auth_redirect_url)
}
#endif
void SamlParametersProto::set_auth_redirect_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_redirect_url();
  auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.SamlParametersProto.auth_redirect_url)
}
void SamlParametersProto::set_auth_redirect_url(const char* value, size_t size) {
  set_has_auth_redirect_url();
  auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.SamlParametersProto.auth_redirect_url)
}
::std::string* SamlParametersProto::mutable_auth_redirect_url() {
  set_has_auth_redirect_url();
  // @@protoc_insertion_point(field_mutable:enterprise_management.SamlParametersProto.auth_redirect_url)
  return auth_redirect_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SamlParametersProto::release_auth_redirect_url() {
  // @@protoc_insertion_point(field_release:enterprise_management.SamlParametersProto.auth_redirect_url)
  clear_has_auth_redirect_url();
  return auth_redirect_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SamlParametersProto::set_allocated_auth_redirect_url(::std::string* auth_redirect_url) {
  if (auth_redirect_url != NULL) {
    set_has_auth_redirect_url();
  } else {
    clear_has_auth_redirect_url();
  }
  auth_redirect_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_redirect_url);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SamlParametersProto.auth_redirect_url)
}

// optional string auth_session_id = 2;
bool SamlParametersProto::has_auth_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SamlParametersProto::set_has_auth_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SamlParametersProto::clear_has_auth_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SamlParametersProto::clear_auth_session_id() {
  auth_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_session_id();
}
const ::std::string& SamlParametersProto::auth_session_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SamlParametersProto.auth_session_id)
  return auth_session_id_.GetNoArena();
}
void SamlParametersProto::set_auth_session_id(const ::std::string& value) {
  set_has_auth_session_id();
  auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.SamlParametersProto.auth_session_id)
}
#if LANG_CXX11
void SamlParametersProto::set_auth_session_id(::std::string&& value) {
  set_has_auth_session_id();
  auth_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.SamlParametersProto.auth_session_id)
}
#endif
void SamlParametersProto::set_auth_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_session_id();
  auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.SamlParametersProto.auth_session_id)
}
void SamlParametersProto::set_auth_session_id(const char* value, size_t size) {
  set_has_auth_session_id();
  auth_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.SamlParametersProto.auth_session_id)
}
::std::string* SamlParametersProto::mutable_auth_session_id() {
  set_has_auth_session_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.SamlParametersProto.auth_session_id)
  return auth_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SamlParametersProto::release_auth_session_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.SamlParametersProto.auth_session_id)
  clear_has_auth_session_id();
  return auth_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SamlParametersProto::set_allocated_auth_session_id(::std::string* auth_session_id) {
  if (auth_session_id != NULL) {
    set_has_auth_session_id();
  } else {
    clear_has_auth_session_id();
  }
  auth_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_session_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SamlParametersProto.auth_session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveDirectoryPlayActivityRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveDirectoryPlayActivityRequest::ActiveDirectoryPlayActivityRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryPlayActivityRequest)
}
ActiveDirectoryPlayActivityRequest::ActiveDirectoryPlayActivityRequest(const ActiveDirectoryPlayActivityRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryPlayActivityRequest)
}

void ActiveDirectoryPlayActivityRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActiveDirectoryPlayActivityRequest::~ActiveDirectoryPlayActivityRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryPlayActivityRequest)
  SharedDtor();
}

void ActiveDirectoryPlayActivityRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActiveDirectoryPlayActivityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActiveDirectoryPlayActivityRequest& ActiveDirectoryPlayActivityRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActiveDirectoryPlayActivityRequest* ActiveDirectoryPlayActivityRequest::New(::google::protobuf::Arena* arena) const {
  ActiveDirectoryPlayActivityRequest* n = new ActiveDirectoryPlayActivityRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActiveDirectoryPlayActivityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  if (has_user_id()) {
    GOOGLE_DCHECK(!user_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*user_id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActiveDirectoryPlayActivityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryPlayActivityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryPlayActivityRequest)
  return false;
#undef DO_
}

void ActiveDirectoryPlayActivityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryPlayActivityRequest)
}

size_t ActiveDirectoryPlayActivityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveDirectoryPlayActivityRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActiveDirectoryPlayActivityRequest*>(&from));
}

void ActiveDirectoryPlayActivityRequest::MergeFrom(const ActiveDirectoryPlayActivityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_id()) {
    set_has_user_id();
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void ActiveDirectoryPlayActivityRequest::CopyFrom(const ActiveDirectoryPlayActivityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryPlayActivityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryPlayActivityRequest::IsInitialized() const {
  return true;
}

void ActiveDirectoryPlayActivityRequest::Swap(ActiveDirectoryPlayActivityRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveDirectoryPlayActivityRequest::InternalSwap(ActiveDirectoryPlayActivityRequest* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ActiveDirectoryPlayActivityRequest::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryPlayActivityRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActiveDirectoryPlayActivityRequest

// optional string user_id = 1;
bool ActiveDirectoryPlayActivityRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActiveDirectoryPlayActivityRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActiveDirectoryPlayActivityRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActiveDirectoryPlayActivityRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& ActiveDirectoryPlayActivityRequest::user_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
  return user_id_.GetNoArena();
}
void ActiveDirectoryPlayActivityRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
}
#if LANG_CXX11
void ActiveDirectoryPlayActivityRequest::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
}
#endif
void ActiveDirectoryPlayActivityRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
}
void ActiveDirectoryPlayActivityRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
}
::std::string* ActiveDirectoryPlayActivityRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActiveDirectoryPlayActivityRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActiveDirectoryPlayActivityRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryPlayActivityRequest.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveDirectoryPlayActivityResponse::ActiveDirectoryPlayActivityResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryPlayActivityResponse)
}
ActiveDirectoryPlayActivityResponse::ActiveDirectoryPlayActivityResponse(const ActiveDirectoryPlayActivityResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryPlayActivityResponse)
}

void ActiveDirectoryPlayActivityResponse::SharedCtor() {
  _cached_size_ = 0;
}

ActiveDirectoryPlayActivityResponse::~ActiveDirectoryPlayActivityResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryPlayActivityResponse)
  SharedDtor();
}

void ActiveDirectoryPlayActivityResponse::SharedDtor() {
}

void ActiveDirectoryPlayActivityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActiveDirectoryPlayActivityResponse& ActiveDirectoryPlayActivityResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActiveDirectoryPlayActivityResponse* ActiveDirectoryPlayActivityResponse::New(::google::protobuf::Arena* arena) const {
  ActiveDirectoryPlayActivityResponse* n = new ActiveDirectoryPlayActivityResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActiveDirectoryPlayActivityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActiveDirectoryPlayActivityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryPlayActivityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryPlayActivityResponse)
  return false;
#undef DO_
}

void ActiveDirectoryPlayActivityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryPlayActivityResponse)
}

size_t ActiveDirectoryPlayActivityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveDirectoryPlayActivityResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActiveDirectoryPlayActivityResponse*>(&from));
}

void ActiveDirectoryPlayActivityResponse::MergeFrom(const ActiveDirectoryPlayActivityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ActiveDirectoryPlayActivityResponse::CopyFrom(const ActiveDirectoryPlayActivityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryPlayActivityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryPlayActivityResponse::IsInitialized() const {
  return true;
}

void ActiveDirectoryPlayActivityResponse::Swap(ActiveDirectoryPlayActivityResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveDirectoryPlayActivityResponse::InternalSwap(ActiveDirectoryPlayActivityResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ActiveDirectoryPlayActivityResponse::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryPlayActivityResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActiveDirectoryPlayActivityResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckDeviceLicenseRequest::CheckDeviceLicenseRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckDeviceLicenseRequest)
}
CheckDeviceLicenseRequest::CheckDeviceLicenseRequest(const CheckDeviceLicenseRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckDeviceLicenseRequest)
}

void CheckDeviceLicenseRequest::SharedCtor() {
  _cached_size_ = 0;
}

CheckDeviceLicenseRequest::~CheckDeviceLicenseRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckDeviceLicenseRequest)
  SharedDtor();
}

void CheckDeviceLicenseRequest::SharedDtor() {
}

void CheckDeviceLicenseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckDeviceLicenseRequest& CheckDeviceLicenseRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckDeviceLicenseRequest* CheckDeviceLicenseRequest::New(::google::protobuf::Arena* arena) const {
  CheckDeviceLicenseRequest* n = new CheckDeviceLicenseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckDeviceLicenseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckDeviceLicenseRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckDeviceLicenseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckDeviceLicenseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckDeviceLicenseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckDeviceLicenseRequest)
  return false;
#undef DO_
}

void CheckDeviceLicenseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckDeviceLicenseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckDeviceLicenseRequest)
}

size_t CheckDeviceLicenseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckDeviceLicenseRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckDeviceLicenseRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckDeviceLicenseRequest*>(&from));
}

void CheckDeviceLicenseRequest::MergeFrom(const CheckDeviceLicenseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckDeviceLicenseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckDeviceLicenseRequest::CopyFrom(const CheckDeviceLicenseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckDeviceLicenseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDeviceLicenseRequest::IsInitialized() const {
  return true;
}

void CheckDeviceLicenseRequest::Swap(CheckDeviceLicenseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckDeviceLicenseRequest::InternalSwap(CheckDeviceLicenseRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckDeviceLicenseRequest::GetTypeName() const {
  return "enterprise_management.CheckDeviceLicenseRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckDeviceLicenseRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicenseAvailability::kLicenseTypeFieldNumber;
const int LicenseAvailability::kAvailableLicensesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicenseAvailability::LicenseAvailability()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.LicenseAvailability)
}
LicenseAvailability::LicenseAvailability(const LicenseAvailability& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_license_type()) {
    license_type_ = new ::enterprise_management::LicenseType(*from.license_type_);
  } else {
    license_type_ = NULL;
  }
  available_licenses_ = from.available_licenses_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.LicenseAvailability)
}

void LicenseAvailability::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&license_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_licenses_) -
      reinterpret_cast<char*>(&license_type_)) + sizeof(available_licenses_));
}

LicenseAvailability::~LicenseAvailability() {
  // @@protoc_insertion_point(destructor:enterprise_management.LicenseAvailability)
  SharedDtor();
}

void LicenseAvailability::SharedDtor() {
  if (this != internal_default_instance()) {
    delete license_type_;
  }
}

void LicenseAvailability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LicenseAvailability& LicenseAvailability::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

LicenseAvailability* LicenseAvailability::New(::google::protobuf::Arena* arena) const {
  LicenseAvailability* n = new LicenseAvailability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LicenseAvailability::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.LicenseAvailability)
  if (has_license_type()) {
    GOOGLE_DCHECK(license_type_ != NULL);
    license_type_->::enterprise_management::LicenseType::Clear();
  }
  available_licenses_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LicenseAvailability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.LicenseAvailability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.LicenseType license_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_license_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 available_licenses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_available_licenses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_licenses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.LicenseAvailability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.LicenseAvailability)
  return false;
#undef DO_
}

void LicenseAvailability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.LicenseAvailability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.LicenseType license_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->license_type_, output);
  }

  // optional int32 available_licenses = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->available_licenses(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.LicenseAvailability)
}

size_t LicenseAvailability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.LicenseAvailability)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .enterprise_management.LicenseType license_type = 1;
    if (has_license_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->license_type_);
    }

    // optional int32 available_licenses = 2;
    if (has_available_licenses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->available_licenses());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LicenseAvailability::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LicenseAvailability*>(&from));
}

void LicenseAvailability::MergeFrom(const LicenseAvailability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.LicenseAvailability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_license_type()->::enterprise_management::LicenseType::MergeFrom(from.license_type());
    }
    if (cached_has_bits & 0x00000002u) {
      available_licenses_ = from.available_licenses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LicenseAvailability::CopyFrom(const LicenseAvailability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.LicenseAvailability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseAvailability::IsInitialized() const {
  return true;
}

void LicenseAvailability::Swap(LicenseAvailability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicenseAvailability::InternalSwap(LicenseAvailability* other) {
  std::swap(license_type_, other->license_type_);
  std::swap(available_licenses_, other->available_licenses_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LicenseAvailability::GetTypeName() const {
  return "enterprise_management.LicenseAvailability";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LicenseAvailability

// optional .enterprise_management.LicenseType license_type = 1;
bool LicenseAvailability::has_license_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LicenseAvailability::set_has_license_type() {
  _has_bits_[0] |= 0x00000001u;
}
void LicenseAvailability::clear_has_license_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void LicenseAvailability::clear_license_type() {
  if (license_type_ != NULL) license_type_->::enterprise_management::LicenseType::Clear();
  clear_has_license_type();
}
const ::enterprise_management::LicenseType& LicenseAvailability::license_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.LicenseAvailability.license_type)
  return license_type_ != NULL ? *license_type_
                         : *::enterprise_management::LicenseType::internal_default_instance();
}
::enterprise_management::LicenseType* LicenseAvailability::mutable_license_type() {
  set_has_license_type();
  if (license_type_ == NULL) {
    license_type_ = new ::enterprise_management::LicenseType;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.LicenseAvailability.license_type)
  return license_type_;
}
::enterprise_management::LicenseType* LicenseAvailability::release_license_type() {
  // @@protoc_insertion_point(field_release:enterprise_management.LicenseAvailability.license_type)
  clear_has_license_type();
  ::enterprise_management::LicenseType* temp = license_type_;
  license_type_ = NULL;
  return temp;
}
void LicenseAvailability::set_allocated_license_type(::enterprise_management::LicenseType* license_type) {
  delete license_type_;
  license_type_ = license_type;
  if (license_type) {
    set_has_license_type();
  } else {
    clear_has_license_type();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.LicenseAvailability.license_type)
}

// optional int32 available_licenses = 2;
bool LicenseAvailability::has_available_licenses() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LicenseAvailability::set_has_available_licenses() {
  _has_bits_[0] |= 0x00000002u;
}
void LicenseAvailability::clear_has_available_licenses() {
  _has_bits_[0] &= ~0x00000002u;
}
void LicenseAvailability::clear_available_licenses() {
  available_licenses_ = 0;
  clear_has_available_licenses();
}
::google::protobuf::int32 LicenseAvailability::available_licenses() const {
  // @@protoc_insertion_point(field_get:enterprise_management.LicenseAvailability.available_licenses)
  return available_licenses_;
}
void LicenseAvailability::set_available_licenses(::google::protobuf::int32 value) {
  set_has_available_licenses();
  available_licenses_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.LicenseAvailability.available_licenses)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckDeviceLicenseResponse::kLicenseSelectionModeFieldNumber;
const int CheckDeviceLicenseResponse::kLicenseAvailabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckDeviceLicenseResponse::CheckDeviceLicenseResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CheckDeviceLicenseResponse)
}
CheckDeviceLicenseResponse::CheckDeviceLicenseResponse(const CheckDeviceLicenseResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      license_availability_(from.license_availability_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  license_selection_mode_ = from.license_selection_mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckDeviceLicenseResponse)
}

void CheckDeviceLicenseResponse::SharedCtor() {
  _cached_size_ = 0;
  license_selection_mode_ = 0;
}

CheckDeviceLicenseResponse::~CheckDeviceLicenseResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.CheckDeviceLicenseResponse)
  SharedDtor();
}

void CheckDeviceLicenseResponse::SharedDtor() {
}

void CheckDeviceLicenseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckDeviceLicenseResponse& CheckDeviceLicenseResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckDeviceLicenseResponse* CheckDeviceLicenseResponse::New(::google::protobuf::Arena* arena) const {
  CheckDeviceLicenseResponse* n = new CheckDeviceLicenseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckDeviceLicenseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CheckDeviceLicenseResponse)
  license_availability_.Clear();
  license_selection_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckDeviceLicenseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CheckDeviceLicenseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.CheckDeviceLicenseResponse.LicenseSelectionMode license_selection_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode_IsValid(value)) {
            set_license_selection_mode(static_cast< ::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.LicenseAvailability license_availability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_license_availability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CheckDeviceLicenseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CheckDeviceLicenseResponse)
  return false;
#undef DO_
}

void CheckDeviceLicenseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CheckDeviceLicenseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.CheckDeviceLicenseResponse.LicenseSelectionMode license_selection_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->license_selection_mode(), output);
  }

  // repeated .enterprise_management.LicenseAvailability license_availability = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->license_availability_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->license_availability(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CheckDeviceLicenseResponse)
}

size_t CheckDeviceLicenseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckDeviceLicenseResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.LicenseAvailability license_availability = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->license_availability_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->license_availability(static_cast<int>(i)));
    }
  }

  // optional .enterprise_management.CheckDeviceLicenseResponse.LicenseSelectionMode license_selection_mode = 1;
  if (has_license_selection_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->license_selection_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckDeviceLicenseResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckDeviceLicenseResponse*>(&from));
}

void CheckDeviceLicenseResponse::MergeFrom(const CheckDeviceLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckDeviceLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  license_availability_.MergeFrom(from.license_availability_);
  if (from.has_license_selection_mode()) {
    set_license_selection_mode(from.license_selection_mode());
  }
}

void CheckDeviceLicenseResponse::CopyFrom(const CheckDeviceLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckDeviceLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDeviceLicenseResponse::IsInitialized() const {
  return true;
}

void CheckDeviceLicenseResponse::Swap(CheckDeviceLicenseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckDeviceLicenseResponse::InternalSwap(CheckDeviceLicenseResponse* other) {
  license_availability_.InternalSwap(&other->license_availability_);
  std::swap(license_selection_mode_, other->license_selection_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckDeviceLicenseResponse::GetTypeName() const {
  return "enterprise_management.CheckDeviceLicenseResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckDeviceLicenseResponse

// optional .enterprise_management.CheckDeviceLicenseResponse.LicenseSelectionMode license_selection_mode = 1;
bool CheckDeviceLicenseResponse::has_license_selection_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckDeviceLicenseResponse::set_has_license_selection_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckDeviceLicenseResponse::clear_has_license_selection_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckDeviceLicenseResponse::clear_license_selection_mode() {
  license_selection_mode_ = 0;
  clear_has_license_selection_mode();
}
::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode CheckDeviceLicenseResponse::license_selection_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CheckDeviceLicenseResponse.license_selection_mode)
  return static_cast< ::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode >(license_selection_mode_);
}
void CheckDeviceLicenseResponse::set_license_selection_mode(::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode value) {
  assert(::enterprise_management::CheckDeviceLicenseResponse_LicenseSelectionMode_IsValid(value));
  set_has_license_selection_mode();
  license_selection_mode_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.CheckDeviceLicenseResponse.license_selection_mode)
}

// repeated .enterprise_management.LicenseAvailability license_availability = 2;
int CheckDeviceLicenseResponse::license_availability_size() const {
  return license_availability_.size();
}
void CheckDeviceLicenseResponse::clear_license_availability() {
  license_availability_.Clear();
}
const ::enterprise_management::LicenseAvailability& CheckDeviceLicenseResponse::license_availability(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.CheckDeviceLicenseResponse.license_availability)
  return license_availability_.Get(index);
}
::enterprise_management::LicenseAvailability* CheckDeviceLicenseResponse::mutable_license_availability(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.CheckDeviceLicenseResponse.license_availability)
  return license_availability_.Mutable(index);
}
::enterprise_management::LicenseAvailability* CheckDeviceLicenseResponse::add_license_availability() {
  // @@protoc_insertion_point(field_add:enterprise_management.CheckDeviceLicenseResponse.license_availability)
  return license_availability_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::LicenseAvailability >*
CheckDeviceLicenseResponse::mutable_license_availability() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.CheckDeviceLicenseResponse.license_availability)
  return &license_availability_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::LicenseAvailability >&
CheckDeviceLicenseResponse::license_availability() const {
  // @@protoc_insertion_point(field_list:enterprise_management.CheckDeviceLicenseResponse.license_availability)
  return license_availability_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveDirectoryUserSigninRequest::ActiveDirectoryUserSigninRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryUserSigninRequest)
}
ActiveDirectoryUserSigninRequest::ActiveDirectoryUserSigninRequest(const ActiveDirectoryUserSigninRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryUserSigninRequest)
}

void ActiveDirectoryUserSigninRequest::SharedCtor() {
  _cached_size_ = 0;
}

ActiveDirectoryUserSigninRequest::~ActiveDirectoryUserSigninRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryUserSigninRequest)
  SharedDtor();
}

void ActiveDirectoryUserSigninRequest::SharedDtor() {
}

void ActiveDirectoryUserSigninRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActiveDirectoryUserSigninRequest& ActiveDirectoryUserSigninRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActiveDirectoryUserSigninRequest* ActiveDirectoryUserSigninRequest::New(::google::protobuf::Arena* arena) const {
  ActiveDirectoryUserSigninRequest* n = new ActiveDirectoryUserSigninRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActiveDirectoryUserSigninRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActiveDirectoryUserSigninRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryUserSigninRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryUserSigninRequest)
  return false;
#undef DO_
}

void ActiveDirectoryUserSigninRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryUserSigninRequest)
}

size_t ActiveDirectoryUserSigninRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveDirectoryUserSigninRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActiveDirectoryUserSigninRequest*>(&from));
}

void ActiveDirectoryUserSigninRequest::MergeFrom(const ActiveDirectoryUserSigninRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ActiveDirectoryUserSigninRequest::CopyFrom(const ActiveDirectoryUserSigninRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryUserSigninRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryUserSigninRequest::IsInitialized() const {
  return true;
}

void ActiveDirectoryUserSigninRequest::Swap(ActiveDirectoryUserSigninRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveDirectoryUserSigninRequest::InternalSwap(ActiveDirectoryUserSigninRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ActiveDirectoryUserSigninRequest::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryUserSigninRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActiveDirectoryUserSigninRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveDirectoryUserSigninResponse::kAuthRedirectUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveDirectoryUserSigninResponse::ActiveDirectoryUserSigninResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.ActiveDirectoryUserSigninResponse)
}
ActiveDirectoryUserSigninResponse::ActiveDirectoryUserSigninResponse(const ActiveDirectoryUserSigninResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_redirect_url()) {
    auth_redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_redirect_url_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveDirectoryUserSigninResponse)
}

void ActiveDirectoryUserSigninResponse::SharedCtor() {
  _cached_size_ = 0;
  auth_redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActiveDirectoryUserSigninResponse::~ActiveDirectoryUserSigninResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.ActiveDirectoryUserSigninResponse)
  SharedDtor();
}

void ActiveDirectoryUserSigninResponse::SharedDtor() {
  auth_redirect_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActiveDirectoryUserSigninResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActiveDirectoryUserSigninResponse& ActiveDirectoryUserSigninResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActiveDirectoryUserSigninResponse* ActiveDirectoryUserSigninResponse::New(::google::protobuf::Arena* arena) const {
  ActiveDirectoryUserSigninResponse* n = new ActiveDirectoryUserSigninResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActiveDirectoryUserSigninResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  if (has_auth_redirect_url()) {
    GOOGLE_DCHECK(!auth_redirect_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*auth_redirect_url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActiveDirectoryUserSigninResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_redirect_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_redirect_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.ActiveDirectoryUserSigninResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveDirectoryUserSigninResponse)
  return false;
#undef DO_
}

void ActiveDirectoryUserSigninResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auth_redirect_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_redirect_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveDirectoryUserSigninResponse)
}

size_t ActiveDirectoryUserSigninResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string auth_redirect_url = 1;
  if (has_auth_redirect_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_redirect_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveDirectoryUserSigninResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActiveDirectoryUserSigninResponse*>(&from));
}

void ActiveDirectoryUserSigninResponse::MergeFrom(const ActiveDirectoryUserSigninResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auth_redirect_url()) {
    set_has_auth_redirect_url();
    auth_redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_redirect_url_);
  }
}

void ActiveDirectoryUserSigninResponse::CopyFrom(const ActiveDirectoryUserSigninResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveDirectoryUserSigninResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveDirectoryUserSigninResponse::IsInitialized() const {
  return true;
}

void ActiveDirectoryUserSigninResponse::Swap(ActiveDirectoryUserSigninResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveDirectoryUserSigninResponse::InternalSwap(ActiveDirectoryUserSigninResponse* other) {
  auth_redirect_url_.Swap(&other->auth_redirect_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ActiveDirectoryUserSigninResponse::GetTypeName() const {
  return "enterprise_management.ActiveDirectoryUserSigninResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActiveDirectoryUserSigninResponse

// optional string auth_redirect_url = 1;
bool ActiveDirectoryUserSigninResponse::has_auth_redirect_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActiveDirectoryUserSigninResponse::set_has_auth_redirect_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ActiveDirectoryUserSigninResponse::clear_has_auth_redirect_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActiveDirectoryUserSigninResponse::clear_auth_redirect_url() {
  auth_redirect_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_redirect_url();
}
const ::std::string& ActiveDirectoryUserSigninResponse::auth_redirect_url() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
  return auth_redirect_url_.GetNoArena();
}
void ActiveDirectoryUserSigninResponse::set_auth_redirect_url(const ::std::string& value) {
  set_has_auth_redirect_url();
  auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
}
#if LANG_CXX11
void ActiveDirectoryUserSigninResponse::set_auth_redirect_url(::std::string&& value) {
  set_has_auth_redirect_url();
  auth_redirect_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
}
#endif
void ActiveDirectoryUserSigninResponse::set_auth_redirect_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_redirect_url();
  auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
}
void ActiveDirectoryUserSigninResponse::set_auth_redirect_url(const char* value, size_t size) {
  set_has_auth_redirect_url();
  auth_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
}
::std::string* ActiveDirectoryUserSigninResponse::mutable_auth_redirect_url() {
  set_has_auth_redirect_url();
  // @@protoc_insertion_point(field_mutable:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
  return auth_redirect_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActiveDirectoryUserSigninResponse::release_auth_redirect_url() {
  // @@protoc_insertion_point(field_release:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
  clear_has_auth_redirect_url();
  return auth_redirect_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActiveDirectoryUserSigninResponse::set_allocated_auth_redirect_url(::std::string* auth_redirect_url) {
  if (auth_redirect_url != NULL) {
    set_has_auth_redirect_url();
  } else {
    clear_has_auth_redirect_url();
  }
  auth_redirect_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_redirect_url);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveDirectoryUserSigninResponse.auth_redirect_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TpmVersionInfo::kFamilyFieldNumber;
const int TpmVersionInfo::kSpecLevelFieldNumber;
const int TpmVersionInfo::kManufacturerFieldNumber;
const int TpmVersionInfo::kTpmModelFieldNumber;
const int TpmVersionInfo::kFirmwareVersionFieldNumber;
const int TpmVersionInfo::kVendorSpecificFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TpmVersionInfo::TpmVersionInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.TpmVersionInfo)
}
TpmVersionInfo::TpmVersionInfo(const TpmVersionInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_specific_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vendor_specific()) {
    vendor_specific_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_specific_);
  }
  ::memcpy(&spec_level_, &from.spec_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpm_model_) -
    reinterpret_cast<char*>(&spec_level_)) + sizeof(tpm_model_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.TpmVersionInfo)
}

void TpmVersionInfo::SharedCtor() {
  _cached_size_ = 0;
  vendor_specific_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&spec_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpm_model_) -
      reinterpret_cast<char*>(&spec_level_)) + sizeof(tpm_model_));
}

TpmVersionInfo::~TpmVersionInfo() {
  // @@protoc_insertion_point(destructor:enterprise_management.TpmVersionInfo)
  SharedDtor();
}

void TpmVersionInfo::SharedDtor() {
  vendor_specific_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TpmVersionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TpmVersionInfo& TpmVersionInfo::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

TpmVersionInfo* TpmVersionInfo::New(::google::protobuf::Arena* arena) const {
  TpmVersionInfo* n = new TpmVersionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TpmVersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.TpmVersionInfo)
  if (has_vendor_specific()) {
    GOOGLE_DCHECK(!vendor_specific_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*vendor_specific_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&spec_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tpm_model_) -
        reinterpret_cast<char*>(&spec_level_)) + sizeof(tpm_model_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TpmVersionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.TpmVersionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 family = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_family();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 spec_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_spec_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &spec_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 manufacturer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_manufacturer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manufacturer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tpm_model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tpm_model();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpm_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 firmware_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_firmware_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &firmware_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vendor_specific = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor_specific()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.TpmVersionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.TpmVersionInfo)
  return false;
#undef DO_
}

void TpmVersionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.TpmVersionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 family = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family(), output);
  }

  // optional uint64 spec_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->spec_level(), output);
  }

  // optional uint32 manufacturer = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->manufacturer(), output);
  }

  // optional uint32 tpm_model = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tpm_model(), output);
  }

  // optional uint64 firmware_version = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->firmware_version(), output);
  }

  // optional string vendor_specific = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->vendor_specific(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.TpmVersionInfo)
}

size_t TpmVersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.TpmVersionInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional string vendor_specific = 6;
    if (has_vendor_specific()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor_specific());
    }

    // optional uint64 spec_level = 2;
    if (has_spec_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->spec_level());
    }

    // optional uint32 family = 1;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family());
    }

    // optional uint32 manufacturer = 3;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manufacturer());
    }

    // optional uint64 firmware_version = 5;
    if (has_firmware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->firmware_version());
    }

    // optional uint32 tpm_model = 4;
    if (has_tpm_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tpm_model());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpmVersionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TpmVersionInfo*>(&from));
}

void TpmVersionInfo::MergeFrom(const TpmVersionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.TpmVersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vendor_specific();
      vendor_specific_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_specific_);
    }
    if (cached_has_bits & 0x00000002u) {
      spec_level_ = from.spec_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      family_ = from.family_;
    }
    if (cached_has_bits & 0x00000008u) {
      manufacturer_ = from.manufacturer_;
    }
    if (cached_has_bits & 0x00000010u) {
      firmware_version_ = from.firmware_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      tpm_model_ = from.tpm_model_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TpmVersionInfo::CopyFrom(const TpmVersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.TpmVersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpmVersionInfo::IsInitialized() const {
  return true;
}

void TpmVersionInfo::Swap(TpmVersionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TpmVersionInfo::InternalSwap(TpmVersionInfo* other) {
  vendor_specific_.Swap(&other->vendor_specific_);
  std::swap(spec_level_, other->spec_level_);
  std::swap(family_, other->family_);
  std::swap(manufacturer_, other->manufacturer_);
  std::swap(firmware_version_, other->firmware_version_);
  std::swap(tpm_model_, other->tpm_model_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TpmVersionInfo::GetTypeName() const {
  return "enterprise_management.TpmVersionInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TpmVersionInfo

// optional uint32 family = 1;
bool TpmVersionInfo::has_family() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TpmVersionInfo::set_has_family() {
  _has_bits_[0] |= 0x00000004u;
}
void TpmVersionInfo::clear_has_family() {
  _has_bits_[0] &= ~0x00000004u;
}
void TpmVersionInfo::clear_family() {
  family_ = 0u;
  clear_has_family();
}
::google::protobuf::uint32 TpmVersionInfo::family() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.family)
  return family_;
}
void TpmVersionInfo::set_family(::google::protobuf::uint32 value) {
  set_has_family();
  family_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.family)
}

// optional uint64 spec_level = 2;
bool TpmVersionInfo::has_spec_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TpmVersionInfo::set_has_spec_level() {
  _has_bits_[0] |= 0x00000002u;
}
void TpmVersionInfo::clear_has_spec_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void TpmVersionInfo::clear_spec_level() {
  spec_level_ = GOOGLE_ULONGLONG(0);
  clear_has_spec_level();
}
::google::protobuf::uint64 TpmVersionInfo::spec_level() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.spec_level)
  return spec_level_;
}
void TpmVersionInfo::set_spec_level(::google::protobuf::uint64 value) {
  set_has_spec_level();
  spec_level_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.spec_level)
}

// optional uint32 manufacturer = 3;
bool TpmVersionInfo::has_manufacturer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TpmVersionInfo::set_has_manufacturer() {
  _has_bits_[0] |= 0x00000008u;
}
void TpmVersionInfo::clear_has_manufacturer() {
  _has_bits_[0] &= ~0x00000008u;
}
void TpmVersionInfo::clear_manufacturer() {
  manufacturer_ = 0u;
  clear_has_manufacturer();
}
::google::protobuf::uint32 TpmVersionInfo::manufacturer() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.manufacturer)
  return manufacturer_;
}
void TpmVersionInfo::set_manufacturer(::google::protobuf::uint32 value) {
  set_has_manufacturer();
  manufacturer_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.manufacturer)
}

// optional uint32 tpm_model = 4;
bool TpmVersionInfo::has_tpm_model() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TpmVersionInfo::set_has_tpm_model() {
  _has_bits_[0] |= 0x00000020u;
}
void TpmVersionInfo::clear_has_tpm_model() {
  _has_bits_[0] &= ~0x00000020u;
}
void TpmVersionInfo::clear_tpm_model() {
  tpm_model_ = 0u;
  clear_has_tpm_model();
}
::google::protobuf::uint32 TpmVersionInfo::tpm_model() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.tpm_model)
  return tpm_model_;
}
void TpmVersionInfo::set_tpm_model(::google::protobuf::uint32 value) {
  set_has_tpm_model();
  tpm_model_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.tpm_model)
}

// optional uint64 firmware_version = 5;
bool TpmVersionInfo::has_firmware_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TpmVersionInfo::set_has_firmware_version() {
  _has_bits_[0] |= 0x00000010u;
}
void TpmVersionInfo::clear_has_firmware_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void TpmVersionInfo::clear_firmware_version() {
  firmware_version_ = GOOGLE_ULONGLONG(0);
  clear_has_firmware_version();
}
::google::protobuf::uint64 TpmVersionInfo::firmware_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.firmware_version)
  return firmware_version_;
}
void TpmVersionInfo::set_firmware_version(::google::protobuf::uint64 value) {
  set_has_firmware_version();
  firmware_version_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.firmware_version)
}

// optional string vendor_specific = 6;
bool TpmVersionInfo::has_vendor_specific() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TpmVersionInfo::set_has_vendor_specific() {
  _has_bits_[0] |= 0x00000001u;
}
void TpmVersionInfo::clear_has_vendor_specific() {
  _has_bits_[0] &= ~0x00000001u;
}
void TpmVersionInfo::clear_vendor_specific() {
  vendor_specific_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vendor_specific();
}
const ::std::string& TpmVersionInfo::vendor_specific() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TpmVersionInfo.vendor_specific)
  return vendor_specific_.GetNoArena();
}
void TpmVersionInfo::set_vendor_specific(const ::std::string& value) {
  set_has_vendor_specific();
  vendor_specific_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.TpmVersionInfo.vendor_specific)
}
#if LANG_CXX11
void TpmVersionInfo::set_vendor_specific(::std::string&& value) {
  set_has_vendor_specific();
  vendor_specific_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.TpmVersionInfo.vendor_specific)
}
#endif
void TpmVersionInfo::set_vendor_specific(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vendor_specific();
  vendor_specific_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.TpmVersionInfo.vendor_specific)
}
void TpmVersionInfo::set_vendor_specific(const char* value, size_t size) {
  set_has_vendor_specific();
  vendor_specific_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.TpmVersionInfo.vendor_specific)
}
::std::string* TpmVersionInfo::mutable_vendor_specific() {
  set_has_vendor_specific();
  // @@protoc_insertion_point(field_mutable:enterprise_management.TpmVersionInfo.vendor_specific)
  return vendor_specific_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TpmVersionInfo::release_vendor_specific() {
  // @@protoc_insertion_point(field_release:enterprise_management.TpmVersionInfo.vendor_specific)
  clear_has_vendor_specific();
  return vendor_specific_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TpmVersionInfo::set_allocated_vendor_specific(::std::string* vendor_specific) {
  if (vendor_specific != NULL) {
    set_has_vendor_specific();
  } else {
    clear_has_vendor_specific();
  }
  vendor_specific_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor_specific);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.TpmVersionInfo.vendor_specific)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemState::kVolumeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemState::SystemState()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.SystemState)
}
SystemState::SystemState(const SystemState& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      volume_info_(from.volume_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SystemState)
}

void SystemState::SharedCtor() {
  _cached_size_ = 0;
}

SystemState::~SystemState() {
  // @@protoc_insertion_point(destructor:enterprise_management.SystemState)
  SharedDtor();
}

void SystemState::SharedDtor() {
}

void SystemState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemState& SystemState::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

SystemState* SystemState::New(::google::protobuf::Arena* arena) const {
  SystemState* n = new SystemState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemState::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SystemState)
  volume_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.SystemState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.VolumeInfo volume_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volume_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.SystemState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.SystemState)
  return false;
#undef DO_
}

void SystemState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.SystemState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.VolumeInfo volume_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volume_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->volume_info(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.SystemState)
}

size_t SystemState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SystemState)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.VolumeInfo volume_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->volume_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volume_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemState*>(&from));
}

void SystemState::MergeFrom(const SystemState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SystemState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_info_.MergeFrom(from.volume_info_);
}

void SystemState::CopyFrom(const SystemState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SystemState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemState::IsInitialized() const {
  return true;
}

void SystemState::Swap(SystemState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemState::InternalSwap(SystemState* other) {
  volume_info_.InternalSwap(&other->volume_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemState::GetTypeName() const {
  return "enterprise_management.SystemState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemState

// repeated .enterprise_management.VolumeInfo volume_info = 1;
int SystemState::volume_info_size() const {
  return volume_info_.size();
}
void SystemState::clear_volume_info() {
  volume_info_.Clear();
}
const ::enterprise_management::VolumeInfo& SystemState::volume_info(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.SystemState.volume_info)
  return volume_info_.Get(index);
}
::enterprise_management::VolumeInfo* SystemState::mutable_volume_info(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.SystemState.volume_info)
  return volume_info_.Mutable(index);
}
::enterprise_management::VolumeInfo* SystemState::add_volume_info() {
  // @@protoc_insertion_point(field_add:enterprise_management.SystemState.volume_info)
  return volume_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >*
SystemState::mutable_volume_info() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.SystemState.volume_info)
  return &volume_info_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::VolumeInfo >&
SystemState::volume_info() const {
  // @@protoc_insertion_point(field_list:enterprise_management.SystemState.volume_info)
  return volume_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppInstallReportLogEvent::kTimestampFieldNumber;
const int AppInstallReportLogEvent::kEventTypeFieldNumber;
const int AppInstallReportLogEvent::kStatefulTotalFieldNumber;
const int AppInstallReportLogEvent::kStatefulFreeFieldNumber;
const int AppInstallReportLogEvent::kClouddpsResponseFieldNumber;
const int AppInstallReportLogEvent::kPhoneskyLogFieldNumber;
const int AppInstallReportLogEvent::kOnlineFieldNumber;
const int AppInstallReportLogEvent::kSessionStateChangeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppInstallReportLogEvent::AppInstallReportLogEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppInstallReportLogEvent)
}
AppInstallReportLogEvent::AppInstallReportLogEvent(const AppInstallReportLogEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phonesky_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phonesky_log()) {
    phonesky_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phonesky_log_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_state_change_type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(session_state_change_type_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppInstallReportLogEvent)
}

void AppInstallReportLogEvent::SharedCtor() {
  _cached_size_ = 0;
  phonesky_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_state_change_type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(session_state_change_type_));
}

AppInstallReportLogEvent::~AppInstallReportLogEvent() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppInstallReportLogEvent)
  SharedDtor();
}

void AppInstallReportLogEvent::SharedDtor() {
  phonesky_log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AppInstallReportLogEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AppInstallReportLogEvent& AppInstallReportLogEvent::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

AppInstallReportLogEvent* AppInstallReportLogEvent::New(::google::protobuf::Arena* arena) const {
  AppInstallReportLogEvent* n = new AppInstallReportLogEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppInstallReportLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppInstallReportLogEvent)
  if (has_phonesky_log()) {
    GOOGLE_DCHECK(!phonesky_log_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*phonesky_log_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_state_change_type_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(session_state_change_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AppInstallReportLogEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppInstallReportLogEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppInstallReportLogEvent.EventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::AppInstallReportLogEvent_EventType_IsValid(value)) {
            set_event_type(static_cast< ::enterprise_management::AppInstallReportLogEvent_EventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stateful_total = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_stateful_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stateful_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stateful_free = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_stateful_free();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stateful_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clouddps_response = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_clouddps_response();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clouddps_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phonesky_log = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonesky_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool online = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppInstallReportLogEvent.SessionStateChangeType session_state_change_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType_IsValid(value)) {
            set_session_state_change_type(static_cast< ::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppInstallReportLogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppInstallReportLogEvent)
  return false;
#undef DO_
}

void AppInstallReportLogEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppInstallReportLogEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .enterprise_management.AppInstallReportLogEvent.EventType event_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // optional int64 stateful_total = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->stateful_total(), output);
  }

  // optional int64 stateful_free = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->stateful_free(), output);
  }

  // optional int32 clouddps_response = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clouddps_response(), output);
  }

  // optional string phonesky_log = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->phonesky_log(), output);
  }

  // optional bool online = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->online(), output);
  }

  // optional .enterprise_management.AppInstallReportLogEvent.SessionStateChangeType session_state_change_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->session_state_change_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppInstallReportLogEvent)
}

size_t AppInstallReportLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppInstallReportLogEvent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string phonesky_log = 6;
    if (has_phonesky_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonesky_log());
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int64 stateful_total = 3;
    if (has_stateful_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stateful_total());
    }

    // optional .enterprise_management.AppInstallReportLogEvent.EventType event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional int32 clouddps_response = 5;
    if (has_clouddps_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clouddps_response());
    }

    // optional int64 stateful_free = 4;
    if (has_stateful_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stateful_free());
    }

    // optional bool online = 7;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional .enterprise_management.AppInstallReportLogEvent.SessionStateChangeType session_state_change_type = 8;
    if (has_session_state_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_state_change_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppInstallReportLogEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AppInstallReportLogEvent*>(&from));
}

void AppInstallReportLogEvent::MergeFrom(const AppInstallReportLogEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppInstallReportLogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_phonesky_log();
      phonesky_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phonesky_log_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      stateful_total_ = from.stateful_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      clouddps_response_ = from.clouddps_response_;
    }
    if (cached_has_bits & 0x00000020u) {
      stateful_free_ = from.stateful_free_;
    }
    if (cached_has_bits & 0x00000040u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000080u) {
      session_state_change_type_ = from.session_state_change_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppInstallReportLogEvent::CopyFrom(const AppInstallReportLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppInstallReportLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInstallReportLogEvent::IsInitialized() const {
  return true;
}

void AppInstallReportLogEvent::Swap(AppInstallReportLogEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppInstallReportLogEvent::InternalSwap(AppInstallReportLogEvent* other) {
  phonesky_log_.Swap(&other->phonesky_log_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(stateful_total_, other->stateful_total_);
  std::swap(event_type_, other->event_type_);
  std::swap(clouddps_response_, other->clouddps_response_);
  std::swap(stateful_free_, other->stateful_free_);
  std::swap(online_, other->online_);
  std::swap(session_state_change_type_, other->session_state_change_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AppInstallReportLogEvent::GetTypeName() const {
  return "enterprise_management.AppInstallReportLogEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppInstallReportLogEvent

// optional int64 timestamp = 1;
bool AppInstallReportLogEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AppInstallReportLogEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void AppInstallReportLogEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void AppInstallReportLogEvent::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 AppInstallReportLogEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.timestamp)
  return timestamp_;
}
void AppInstallReportLogEvent::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.timestamp)
}

// optional .enterprise_management.AppInstallReportLogEvent.EventType event_type = 2;
bool AppInstallReportLogEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AppInstallReportLogEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000008u;
}
void AppInstallReportLogEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void AppInstallReportLogEvent::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
::enterprise_management::AppInstallReportLogEvent_EventType AppInstallReportLogEvent::event_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.event_type)
  return static_cast< ::enterprise_management::AppInstallReportLogEvent_EventType >(event_type_);
}
void AppInstallReportLogEvent::set_event_type(::enterprise_management::AppInstallReportLogEvent_EventType value) {
  assert(::enterprise_management::AppInstallReportLogEvent_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.event_type)
}

// optional int64 stateful_total = 3;
bool AppInstallReportLogEvent::has_stateful_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AppInstallReportLogEvent::set_has_stateful_total() {
  _has_bits_[0] |= 0x00000004u;
}
void AppInstallReportLogEvent::clear_has_stateful_total() {
  _has_bits_[0] &= ~0x00000004u;
}
void AppInstallReportLogEvent::clear_stateful_total() {
  stateful_total_ = GOOGLE_LONGLONG(0);
  clear_has_stateful_total();
}
::google::protobuf::int64 AppInstallReportLogEvent::stateful_total() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.stateful_total)
  return stateful_total_;
}
void AppInstallReportLogEvent::set_stateful_total(::google::protobuf::int64 value) {
  set_has_stateful_total();
  stateful_total_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.stateful_total)
}

// optional int64 stateful_free = 4;
bool AppInstallReportLogEvent::has_stateful_free() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AppInstallReportLogEvent::set_has_stateful_free() {
  _has_bits_[0] |= 0x00000020u;
}
void AppInstallReportLogEvent::clear_has_stateful_free() {
  _has_bits_[0] &= ~0x00000020u;
}
void AppInstallReportLogEvent::clear_stateful_free() {
  stateful_free_ = GOOGLE_LONGLONG(0);
  clear_has_stateful_free();
}
::google::protobuf::int64 AppInstallReportLogEvent::stateful_free() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.stateful_free)
  return stateful_free_;
}
void AppInstallReportLogEvent::set_stateful_free(::google::protobuf::int64 value) {
  set_has_stateful_free();
  stateful_free_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.stateful_free)
}

// optional int32 clouddps_response = 5;
bool AppInstallReportLogEvent::has_clouddps_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AppInstallReportLogEvent::set_has_clouddps_response() {
  _has_bits_[0] |= 0x00000010u;
}
void AppInstallReportLogEvent::clear_has_clouddps_response() {
  _has_bits_[0] &= ~0x00000010u;
}
void AppInstallReportLogEvent::clear_clouddps_response() {
  clouddps_response_ = 0;
  clear_has_clouddps_response();
}
::google::protobuf::int32 AppInstallReportLogEvent::clouddps_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.clouddps_response)
  return clouddps_response_;
}
void AppInstallReportLogEvent::set_clouddps_response(::google::protobuf::int32 value) {
  set_has_clouddps_response();
  clouddps_response_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.clouddps_response)
}

// optional string phonesky_log = 6;
bool AppInstallReportLogEvent::has_phonesky_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AppInstallReportLogEvent::set_has_phonesky_log() {
  _has_bits_[0] |= 0x00000001u;
}
void AppInstallReportLogEvent::clear_has_phonesky_log() {
  _has_bits_[0] &= ~0x00000001u;
}
void AppInstallReportLogEvent::clear_phonesky_log() {
  phonesky_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phonesky_log();
}
const ::std::string& AppInstallReportLogEvent::phonesky_log() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.phonesky_log)
  return phonesky_log_.GetNoArena();
}
void AppInstallReportLogEvent::set_phonesky_log(const ::std::string& value) {
  set_has_phonesky_log();
  phonesky_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.phonesky_log)
}
#if LANG_CXX11
void AppInstallReportLogEvent::set_phonesky_log(::std::string&& value) {
  set_has_phonesky_log();
  phonesky_log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppInstallReportLogEvent.phonesky_log)
}
#endif
void AppInstallReportLogEvent::set_phonesky_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phonesky_log();
  phonesky_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.AppInstallReportLogEvent.phonesky_log)
}
void AppInstallReportLogEvent::set_phonesky_log(const char* value, size_t size) {
  set_has_phonesky_log();
  phonesky_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AppInstallReportLogEvent.phonesky_log)
}
::std::string* AppInstallReportLogEvent::mutable_phonesky_log() {
  set_has_phonesky_log();
  // @@protoc_insertion_point(field_mutable:enterprise_management.AppInstallReportLogEvent.phonesky_log)
  return phonesky_log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppInstallReportLogEvent::release_phonesky_log() {
  // @@protoc_insertion_point(field_release:enterprise_management.AppInstallReportLogEvent.phonesky_log)
  clear_has_phonesky_log();
  return phonesky_log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppInstallReportLogEvent::set_allocated_phonesky_log(::std::string* phonesky_log) {
  if (phonesky_log != NULL) {
    set_has_phonesky_log();
  } else {
    clear_has_phonesky_log();
  }
  phonesky_log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonesky_log);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AppInstallReportLogEvent.phonesky_log)
}

// optional bool online = 7;
bool AppInstallReportLogEvent::has_online() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AppInstallReportLogEvent::set_has_online() {
  _has_bits_[0] |= 0x00000040u;
}
void AppInstallReportLogEvent::clear_has_online() {
  _has_bits_[0] &= ~0x00000040u;
}
void AppInstallReportLogEvent::clear_online() {
  online_ = false;
  clear_has_online();
}
bool AppInstallReportLogEvent::online() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.online)
  return online_;
}
void AppInstallReportLogEvent::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.online)
}

// optional .enterprise_management.AppInstallReportLogEvent.SessionStateChangeType session_state_change_type = 8;
bool AppInstallReportLogEvent::has_session_state_change_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AppInstallReportLogEvent::set_has_session_state_change_type() {
  _has_bits_[0] |= 0x00000080u;
}
void AppInstallReportLogEvent::clear_has_session_state_change_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void AppInstallReportLogEvent::clear_session_state_change_type() {
  session_state_change_type_ = 0;
  clear_has_session_state_change_type();
}
::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType AppInstallReportLogEvent::session_state_change_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportLogEvent.session_state_change_type)
  return static_cast< ::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType >(session_state_change_type_);
}
void AppInstallReportLogEvent::set_session_state_change_type(::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType value) {
  assert(::enterprise_management::AppInstallReportLogEvent_SessionStateChangeType_IsValid(value));
  set_has_session_state_change_type();
  session_state_change_type_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.AppInstallReportLogEvent.session_state_change_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppInstallReport::kPackageFieldNumber;
const int AppInstallReport::kIncompleteFieldNumber;
const int AppInstallReport::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppInstallReport::AppInstallReport()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppInstallReport)
}
AppInstallReport::AppInstallReport(const AppInstallReport& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      log_(from.log_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_package()) {
    package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  incomplete_ = from.incomplete_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppInstallReport)
}

void AppInstallReport::SharedCtor() {
  _cached_size_ = 0;
  package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incomplete_ = false;
}

AppInstallReport::~AppInstallReport() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppInstallReport)
  SharedDtor();
}

void AppInstallReport::SharedDtor() {
  package_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AppInstallReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AppInstallReport& AppInstallReport::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

AppInstallReport* AppInstallReport::New(::google::protobuf::Arena* arena) const {
  AppInstallReport* n = new AppInstallReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppInstallReport::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppInstallReport)
  log_.Clear();
  if (has_package()) {
    GOOGLE_DCHECK(!package_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*package_.UnsafeRawStringPointer())->clear();
  }
  incomplete_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AppInstallReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppInstallReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool incomplete = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_incomplete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incomplete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_management.AppInstallReportLogEvent log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppInstallReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppInstallReport)
  return false;
#undef DO_
}

void AppInstallReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppInstallReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package(), output);
  }

  // optional bool incomplete = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->incomplete(), output);
  }

  // repeated .enterprise_management.AppInstallReportLogEvent log = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->log(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppInstallReport)
}

size_t AppInstallReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppInstallReport)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.AppInstallReportLogEvent log = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->log_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string package = 1;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package());
    }

    // optional bool incomplete = 2;
    if (has_incomplete()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppInstallReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AppInstallReport*>(&from));
}

void AppInstallReport::MergeFrom(const AppInstallReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppInstallReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_.MergeFrom(from.log_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_package();
      package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_);
    }
    if (cached_has_bits & 0x00000002u) {
      incomplete_ = from.incomplete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppInstallReport::CopyFrom(const AppInstallReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppInstallReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInstallReport::IsInitialized() const {
  return true;
}

void AppInstallReport::Swap(AppInstallReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppInstallReport::InternalSwap(AppInstallReport* other) {
  log_.InternalSwap(&other->log_);
  package_.Swap(&other->package_);
  std::swap(incomplete_, other->incomplete_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AppInstallReport::GetTypeName() const {
  return "enterprise_management.AppInstallReport";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppInstallReport

// optional string package = 1;
bool AppInstallReport::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AppInstallReport::set_has_package() {
  _has_bits_[0] |= 0x00000001u;
}
void AppInstallReport::clear_has_package() {
  _has_bits_[0] &= ~0x00000001u;
}
void AppInstallReport::clear_package() {
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_package();
}
const ::std::string& AppInstallReport::package() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReport.package)
  return package_.GetNoArena();
}
void AppInstallReport::set_package(const ::std::string& value) {
  set_has_package();
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.AppInstallReport.package)
}
#if LANG_CXX11
void AppInstallReport::set_package(::std::string&& value) {
  set_has_package();
  package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AppInstallReport.package)
}
#endif
void AppInstallReport::set_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_package();
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.AppInstallReport.package)
}
void AppInstallReport::set_package(const char* value, size_t size) {
  set_has_package();
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AppInstallReport.package)
}
::std::string* AppInstallReport::mutable_package() {
  set_has_package();
  // @@protoc_insertion_point(field_mutable:enterprise_management.AppInstallReport.package)
  return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppInstallReport::release_package() {
  // @@protoc_insertion_point(field_release:enterprise_management.AppInstallReport.package)
  clear_has_package();
  return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppInstallReport::set_allocated_package(::std::string* package) {
  if (package != NULL) {
    set_has_package();
  } else {
    clear_has_package();
  }
  package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AppInstallReport.package)
}

// optional bool incomplete = 2;
bool AppInstallReport::has_incomplete() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AppInstallReport::set_has_incomplete() {
  _has_bits_[0] |= 0x00000002u;
}
void AppInstallReport::clear_has_incomplete() {
  _has_bits_[0] &= ~0x00000002u;
}
void AppInstallReport::clear_incomplete() {
  incomplete_ = false;
  clear_has_incomplete();
}
bool AppInstallReport::incomplete() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReport.incomplete)
  return incomplete_;
}
void AppInstallReport::set_incomplete(bool value) {
  set_has_incomplete();
  incomplete_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.AppInstallReport.incomplete)
}

// repeated .enterprise_management.AppInstallReportLogEvent log = 3;
int AppInstallReport::log_size() const {
  return log_.size();
}
void AppInstallReport::clear_log() {
  log_.Clear();
}
const ::enterprise_management::AppInstallReportLogEvent& AppInstallReport::log(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReport.log)
  return log_.Get(index);
}
::enterprise_management::AppInstallReportLogEvent* AppInstallReport::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AppInstallReport.log)
  return log_.Mutable(index);
}
::enterprise_management::AppInstallReportLogEvent* AppInstallReport::add_log() {
  // @@protoc_insertion_point(field_add:enterprise_management.AppInstallReport.log)
  return log_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReportLogEvent >*
AppInstallReport::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.AppInstallReport.log)
  return &log_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReportLogEvent >&
AppInstallReport::log() const {
  // @@protoc_insertion_point(field_list:enterprise_management.AppInstallReport.log)
  return log_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppInstallReportRequest::kAppInstallReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppInstallReportRequest::AppInstallReportRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppInstallReportRequest)
}
AppInstallReportRequest::AppInstallReportRequest(const AppInstallReportRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      app_install_report_(from.app_install_report_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppInstallReportRequest)
}

void AppInstallReportRequest::SharedCtor() {
  _cached_size_ = 0;
}

AppInstallReportRequest::~AppInstallReportRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppInstallReportRequest)
  SharedDtor();
}

void AppInstallReportRequest::SharedDtor() {
}

void AppInstallReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AppInstallReportRequest& AppInstallReportRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

AppInstallReportRequest* AppInstallReportRequest::New(::google::protobuf::Arena* arena) const {
  AppInstallReportRequest* n = new AppInstallReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppInstallReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppInstallReportRequest)
  app_install_report_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AppInstallReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppInstallReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enterprise_management.AppInstallReport app_install_report = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app_install_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppInstallReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppInstallReportRequest)
  return false;
#undef DO_
}

void AppInstallReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppInstallReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.AppInstallReport app_install_report = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_install_report_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->app_install_report(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppInstallReportRequest)
}

size_t AppInstallReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppInstallReportRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .enterprise_management.AppInstallReport app_install_report = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->app_install_report_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_install_report(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppInstallReportRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AppInstallReportRequest*>(&from));
}

void AppInstallReportRequest::MergeFrom(const AppInstallReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppInstallReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_install_report_.MergeFrom(from.app_install_report_);
}

void AppInstallReportRequest::CopyFrom(const AppInstallReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppInstallReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInstallReportRequest::IsInitialized() const {
  return true;
}

void AppInstallReportRequest::Swap(AppInstallReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppInstallReportRequest::InternalSwap(AppInstallReportRequest* other) {
  app_install_report_.InternalSwap(&other->app_install_report_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AppInstallReportRequest::GetTypeName() const {
  return "enterprise_management.AppInstallReportRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppInstallReportRequest

// repeated .enterprise_management.AppInstallReport app_install_report = 1;
int AppInstallReportRequest::app_install_report_size() const {
  return app_install_report_.size();
}
void AppInstallReportRequest::clear_app_install_report() {
  app_install_report_.Clear();
}
const ::enterprise_management::AppInstallReport& AppInstallReportRequest::app_install_report(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.AppInstallReportRequest.app_install_report)
  return app_install_report_.Get(index);
}
::enterprise_management::AppInstallReport* AppInstallReportRequest::mutable_app_install_report(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AppInstallReportRequest.app_install_report)
  return app_install_report_.Mutable(index);
}
::enterprise_management::AppInstallReport* AppInstallReportRequest::add_app_install_report() {
  // @@protoc_insertion_point(field_add:enterprise_management.AppInstallReportRequest.app_install_report)
  return app_install_report_.Add();
}
::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReport >*
AppInstallReportRequest::mutable_app_install_report() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.AppInstallReportRequest.app_install_report)
  return &app_install_report_;
}
const ::google::protobuf::RepeatedPtrField< ::enterprise_management::AppInstallReport >&
AppInstallReportRequest::app_install_report() const {
  // @@protoc_insertion_point(field_list:enterprise_management.AppInstallReportRequest.app_install_report)
  return app_install_report_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppInstallReportResponse::AppInstallReportResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.AppInstallReportResponse)
}
AppInstallReportResponse::AppInstallReportResponse(const AppInstallReportResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AppInstallReportResponse)
}

void AppInstallReportResponse::SharedCtor() {
  _cached_size_ = 0;
}

AppInstallReportResponse::~AppInstallReportResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.AppInstallReportResponse)
  SharedDtor();
}

void AppInstallReportResponse::SharedDtor() {
}

void AppInstallReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AppInstallReportResponse& AppInstallReportResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

AppInstallReportResponse* AppInstallReportResponse::New(::google::protobuf::Arena* arena) const {
  AppInstallReportResponse* n = new AppInstallReportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppInstallReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AppInstallReportResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AppInstallReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.AppInstallReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.AppInstallReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.AppInstallReportResponse)
  return false;
#undef DO_
}

void AppInstallReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.AppInstallReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.AppInstallReportResponse)
}

size_t AppInstallReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppInstallReportResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppInstallReportResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AppInstallReportResponse*>(&from));
}

void AppInstallReportResponse::MergeFrom(const AppInstallReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppInstallReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AppInstallReportResponse::CopyFrom(const AppInstallReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppInstallReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInstallReportResponse::IsInitialized() const {
  return true;
}

void AppInstallReportResponse::Swap(AppInstallReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppInstallReportResponse::InternalSwap(AppInstallReportResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AppInstallReportResponse::GetTypeName() const {
  return "enterprise_management.AppInstallReportResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppInstallReportResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceManagementRequest::kRegisterRequestFieldNumber;
const int DeviceManagementRequest::kUnregisterRequestFieldNumber;
const int DeviceManagementRequest::kPolicyRequestFieldNumber;
const int DeviceManagementRequest::kDeviceStatusReportRequestFieldNumber;
const int DeviceManagementRequest::kSessionStatusReportRequestFieldNumber;
const int DeviceManagementRequest::kAutoEnrollmentRequestFieldNumber;
const int DeviceManagementRequest::kCertUploadRequestFieldNumber;
const int DeviceManagementRequest::kServiceApiAccessRequestFieldNumber;
const int DeviceManagementRequest::kDeviceStateRetrievalRequestFieldNumber;
const int DeviceManagementRequest::kDeviceStateKeyUpdateRequestFieldNumber;
const int DeviceManagementRequest::kDevicePairingRequestFieldNumber;
const int DeviceManagementRequest::kCheckDevicePairingRequestFieldNumber;
const int DeviceManagementRequest::kRemoteCommandRequestFieldNumber;
const int DeviceManagementRequest::kDeviceAttributeUpdatePermissionRequestFieldNumber;
const int DeviceManagementRequest::kDeviceAttributeUpdateRequestFieldNumber;
const int DeviceManagementRequest::kGcmIdUpdateRequestFieldNumber;
const int DeviceManagementRequest::kCheckAndroidManagementRequestFieldNumber;
const int DeviceManagementRequest::kCertificateBasedRegisterRequestFieldNumber;
const int DeviceManagementRequest::kActiveDirectoryEnrollPlayUserRequestFieldNumber;
const int DeviceManagementRequest::kActiveDirectoryPlayActivityRequestFieldNumber;
const int DeviceManagementRequest::kCheckDeviceLicenseRequestFieldNumber;
const int DeviceManagementRequest::kActiveDirectoryUserSigninRequestFieldNumber;
const int DeviceManagementRequest::kRegisterBrowserRequestFieldNumber;
const int DeviceManagementRequest::kAppInstallReportRequestFieldNumber;
const int DeviceManagementRequest::kChromeDesktopReportRequestFieldNumber;
const int DeviceManagementRequest::kPolicyValidationReportRequestFieldNumber;
const int DeviceManagementRequest::kDeviceInitialEnrollmentStateRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceManagementRequest::DeviceManagementRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceManagementRequest)
}
DeviceManagementRequest::DeviceManagementRequest(const DeviceManagementRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_register_request()) {
    register_request_ = new ::enterprise_management::DeviceRegisterRequest(*from.register_request_);
  } else {
    register_request_ = NULL;
  }
  if (from.has_unregister_request()) {
    unregister_request_ = new ::enterprise_management::DeviceUnregisterRequest(*from.unregister_request_);
  } else {
    unregister_request_ = NULL;
  }
  if (from.has_policy_request()) {
    policy_request_ = new ::enterprise_management::DevicePolicyRequest(*from.policy_request_);
  } else {
    policy_request_ = NULL;
  }
  if (from.has_device_status_report_request()) {
    device_status_report_request_ = new ::enterprise_management::DeviceStatusReportRequest(*from.device_status_report_request_);
  } else {
    device_status_report_request_ = NULL;
  }
  if (from.has_session_status_report_request()) {
    session_status_report_request_ = new ::enterprise_management::SessionStatusReportRequest(*from.session_status_report_request_);
  } else {
    session_status_report_request_ = NULL;
  }
  if (from.has_auto_enrollment_request()) {
    auto_enrollment_request_ = new ::enterprise_management::DeviceAutoEnrollmentRequest(*from.auto_enrollment_request_);
  } else {
    auto_enrollment_request_ = NULL;
  }
  if (from.has_cert_upload_request()) {
    cert_upload_request_ = new ::enterprise_management::DeviceCertUploadRequest(*from.cert_upload_request_);
  } else {
    cert_upload_request_ = NULL;
  }
  if (from.has_service_api_access_request()) {
    service_api_access_request_ = new ::enterprise_management::DeviceServiceApiAccessRequest(*from.service_api_access_request_);
  } else {
    service_api_access_request_ = NULL;
  }
  if (from.has_device_state_retrieval_request()) {
    device_state_retrieval_request_ = new ::enterprise_management::DeviceStateRetrievalRequest(*from.device_state_retrieval_request_);
  } else {
    device_state_retrieval_request_ = NULL;
  }
  if (from.has_device_state_key_update_request()) {
    device_state_key_update_request_ = new ::enterprise_management::DeviceStateKeyUpdateRequest(*from.device_state_key_update_request_);
  } else {
    device_state_key_update_request_ = NULL;
  }
  if (from.has_device_pairing_request()) {
    device_pairing_request_ = new ::enterprise_management::DevicePairingRequest(*from.device_pairing_request_);
  } else {
    device_pairing_request_ = NULL;
  }
  if (from.has_check_device_pairing_request()) {
    check_device_pairing_request_ = new ::enterprise_management::CheckDevicePairingRequest(*from.check_device_pairing_request_);
  } else {
    check_device_pairing_request_ = NULL;
  }
  if (from.has_remote_command_request()) {
    remote_command_request_ = new ::enterprise_management::DeviceRemoteCommandRequest(*from.remote_command_request_);
  } else {
    remote_command_request_ = NULL;
  }
  if (from.has_device_attribute_update_permission_request()) {
    device_attribute_update_permission_request_ = new ::enterprise_management::DeviceAttributeUpdatePermissionRequest(*from.device_attribute_update_permission_request_);
  } else {
    device_attribute_update_permission_request_ = NULL;
  }
  if (from.has_device_attribute_update_request()) {
    device_attribute_update_request_ = new ::enterprise_management::DeviceAttributeUpdateRequest(*from.device_attribute_update_request_);
  } else {
    device_attribute_update_request_ = NULL;
  }
  if (from.has_gcm_id_update_request()) {
    gcm_id_update_request_ = new ::enterprise_management::GcmIdUpdateRequest(*from.gcm_id_update_request_);
  } else {
    gcm_id_update_request_ = NULL;
  }
  if (from.has_check_android_management_request()) {
    check_android_management_request_ = new ::enterprise_management::CheckAndroidManagementRequest(*from.check_android_management_request_);
  } else {
    check_android_management_request_ = NULL;
  }
  if (from.has_certificate_based_register_request()) {
    certificate_based_register_request_ = new ::enterprise_management::CertificateBasedDeviceRegisterRequest(*from.certificate_based_register_request_);
  } else {
    certificate_based_register_request_ = NULL;
  }
  if (from.has_active_directory_enroll_play_user_request()) {
    active_directory_enroll_play_user_request_ = new ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest(*from.active_directory_enroll_play_user_request_);
  } else {
    active_directory_enroll_play_user_request_ = NULL;
  }
  if (from.has_active_directory_play_activity_request()) {
    active_directory_play_activity_request_ = new ::enterprise_management::ActiveDirectoryPlayActivityRequest(*from.active_directory_play_activity_request_);
  } else {
    active_directory_play_activity_request_ = NULL;
  }
  if (from.has_check_device_license_request()) {
    check_device_license_request_ = new ::enterprise_management::CheckDeviceLicenseRequest(*from.check_device_license_request_);
  } else {
    check_device_license_request_ = NULL;
  }
  if (from.has_active_directory_user_signin_request()) {
    active_directory_user_signin_request_ = new ::enterprise_management::ActiveDirectoryUserSigninRequest(*from.active_directory_user_signin_request_);
  } else {
    active_directory_user_signin_request_ = NULL;
  }
  if (from.has_register_browser_request()) {
    register_browser_request_ = new ::enterprise_management::RegisterBrowserRequest(*from.register_browser_request_);
  } else {
    register_browser_request_ = NULL;
  }
  if (from.has_app_install_report_request()) {
    app_install_report_request_ = new ::enterprise_management::AppInstallReportRequest(*from.app_install_report_request_);
  } else {
    app_install_report_request_ = NULL;
  }
  if (from.has_chrome_desktop_report_request()) {
    chrome_desktop_report_request_ = new ::enterprise_management::ChromeDesktopReportRequest(*from.chrome_desktop_report_request_);
  } else {
    chrome_desktop_report_request_ = NULL;
  }
  if (from.has_policy_validation_report_request()) {
    policy_validation_report_request_ = new ::enterprise_management::PolicyValidationReportRequest(*from.policy_validation_report_request_);
  } else {
    policy_validation_report_request_ = NULL;
  }
  if (from.has_device_initial_enrollment_state_request()) {
    device_initial_enrollment_state_request_ = new ::enterprise_management::DeviceInitialEnrollmentStateRequest(*from.device_initial_enrollment_state_request_);
  } else {
    device_initial_enrollment_state_request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceManagementRequest)
}

void DeviceManagementRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&register_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_initial_enrollment_state_request_) -
      reinterpret_cast<char*>(&register_request_)) + sizeof(device_initial_enrollment_state_request_));
}

DeviceManagementRequest::~DeviceManagementRequest() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceManagementRequest)
  SharedDtor();
}

void DeviceManagementRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete register_request_;
  }
  if (this != internal_default_instance()) {
    delete unregister_request_;
  }
  if (this != internal_default_instance()) {
    delete policy_request_;
  }
  if (this != internal_default_instance()) {
    delete device_status_report_request_;
  }
  if (this != internal_default_instance()) {
    delete session_status_report_request_;
  }
  if (this != internal_default_instance()) {
    delete auto_enrollment_request_;
  }
  if (this != internal_default_instance()) {
    delete cert_upload_request_;
  }
  if (this != internal_default_instance()) {
    delete service_api_access_request_;
  }
  if (this != internal_default_instance()) {
    delete device_state_retrieval_request_;
  }
  if (this != internal_default_instance()) {
    delete device_state_key_update_request_;
  }
  if (this != internal_default_instance()) {
    delete device_pairing_request_;
  }
  if (this != internal_default_instance()) {
    delete check_device_pairing_request_;
  }
  if (this != internal_default_instance()) {
    delete remote_command_request_;
  }
  if (this != internal_default_instance()) {
    delete device_attribute_update_permission_request_;
  }
  if (this != internal_default_instance()) {
    delete device_attribute_update_request_;
  }
  if (this != internal_default_instance()) {
    delete gcm_id_update_request_;
  }
  if (this != internal_default_instance()) {
    delete check_android_management_request_;
  }
  if (this != internal_default_instance()) {
    delete certificate_based_register_request_;
  }
  if (this != internal_default_instance()) {
    delete active_directory_enroll_play_user_request_;
  }
  if (this != internal_default_instance()) {
    delete active_directory_play_activity_request_;
  }
  if (this != internal_default_instance()) {
    delete check_device_license_request_;
  }
  if (this != internal_default_instance()) {
    delete active_directory_user_signin_request_;
  }
  if (this != internal_default_instance()) {
    delete register_browser_request_;
  }
  if (this != internal_default_instance()) {
    delete app_install_report_request_;
  }
  if (this != internal_default_instance()) {
    delete chrome_desktop_report_request_;
  }
  if (this != internal_default_instance()) {
    delete policy_validation_report_request_;
  }
  if (this != internal_default_instance()) {
    delete device_initial_enrollment_state_request_;
  }
}

void DeviceManagementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceManagementRequest& DeviceManagementRequest::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceManagementRequest* DeviceManagementRequest::New(::google::protobuf::Arena* arena) const {
  DeviceManagementRequest* n = new DeviceManagementRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceManagementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceManagementRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_register_request()) {
      GOOGLE_DCHECK(register_request_ != NULL);
      register_request_->::enterprise_management::DeviceRegisterRequest::Clear();
    }
    if (has_unregister_request()) {
      GOOGLE_DCHECK(unregister_request_ != NULL);
      unregister_request_->::enterprise_management::DeviceUnregisterRequest::Clear();
    }
    if (has_policy_request()) {
      GOOGLE_DCHECK(policy_request_ != NULL);
      policy_request_->::enterprise_management::DevicePolicyRequest::Clear();
    }
    if (has_device_status_report_request()) {
      GOOGLE_DCHECK(device_status_report_request_ != NULL);
      device_status_report_request_->::enterprise_management::DeviceStatusReportRequest::Clear();
    }
    if (has_session_status_report_request()) {
      GOOGLE_DCHECK(session_status_report_request_ != NULL);
      session_status_report_request_->::enterprise_management::SessionStatusReportRequest::Clear();
    }
    if (has_auto_enrollment_request()) {
      GOOGLE_DCHECK(auto_enrollment_request_ != NULL);
      auto_enrollment_request_->::enterprise_management::DeviceAutoEnrollmentRequest::Clear();
    }
    if (has_cert_upload_request()) {
      GOOGLE_DCHECK(cert_upload_request_ != NULL);
      cert_upload_request_->::enterprise_management::DeviceCertUploadRequest::Clear();
    }
    if (has_service_api_access_request()) {
      GOOGLE_DCHECK(service_api_access_request_ != NULL);
      service_api_access_request_->::enterprise_management::DeviceServiceApiAccessRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_device_state_retrieval_request()) {
      GOOGLE_DCHECK(device_state_retrieval_request_ != NULL);
      device_state_retrieval_request_->::enterprise_management::DeviceStateRetrievalRequest::Clear();
    }
    if (has_device_state_key_update_request()) {
      GOOGLE_DCHECK(device_state_key_update_request_ != NULL);
      device_state_key_update_request_->::enterprise_management::DeviceStateKeyUpdateRequest::Clear();
    }
    if (has_device_pairing_request()) {
      GOOGLE_DCHECK(device_pairing_request_ != NULL);
      device_pairing_request_->::enterprise_management::DevicePairingRequest::Clear();
    }
    if (has_check_device_pairing_request()) {
      GOOGLE_DCHECK(check_device_pairing_request_ != NULL);
      check_device_pairing_request_->::enterprise_management::CheckDevicePairingRequest::Clear();
    }
    if (has_remote_command_request()) {
      GOOGLE_DCHECK(remote_command_request_ != NULL);
      remote_command_request_->::enterprise_management::DeviceRemoteCommandRequest::Clear();
    }
    if (has_device_attribute_update_permission_request()) {
      GOOGLE_DCHECK(device_attribute_update_permission_request_ != NULL);
      device_attribute_update_permission_request_->::enterprise_management::DeviceAttributeUpdatePermissionRequest::Clear();
    }
    if (has_device_attribute_update_request()) {
      GOOGLE_DCHECK(device_attribute_update_request_ != NULL);
      device_attribute_update_request_->::enterprise_management::DeviceAttributeUpdateRequest::Clear();
    }
    if (has_gcm_id_update_request()) {
      GOOGLE_DCHECK(gcm_id_update_request_ != NULL);
      gcm_id_update_request_->::enterprise_management::GcmIdUpdateRequest::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_check_android_management_request()) {
      GOOGLE_DCHECK(check_android_management_request_ != NULL);
      check_android_management_request_->::enterprise_management::CheckAndroidManagementRequest::Clear();
    }
    if (has_certificate_based_register_request()) {
      GOOGLE_DCHECK(certificate_based_register_request_ != NULL);
      certificate_based_register_request_->::enterprise_management::CertificateBasedDeviceRegisterRequest::Clear();
    }
    if (has_active_directory_enroll_play_user_request()) {
      GOOGLE_DCHECK(active_directory_enroll_play_user_request_ != NULL);
      active_directory_enroll_play_user_request_->::enterprise_management::ActiveDirectoryEnrollPlayUserRequest::Clear();
    }
    if (has_active_directory_play_activity_request()) {
      GOOGLE_DCHECK(active_directory_play_activity_request_ != NULL);
      active_directory_play_activity_request_->::enterprise_management::ActiveDirectoryPlayActivityRequest::Clear();
    }
    if (has_check_device_license_request()) {
      GOOGLE_DCHECK(check_device_license_request_ != NULL);
      check_device_license_request_->::enterprise_management::CheckDeviceLicenseRequest::Clear();
    }
    if (has_active_directory_user_signin_request()) {
      GOOGLE_DCHECK(active_directory_user_signin_request_ != NULL);
      active_directory_user_signin_request_->::enterprise_management::ActiveDirectoryUserSigninRequest::Clear();
    }
    if (has_register_browser_request()) {
      GOOGLE_DCHECK(register_browser_request_ != NULL);
      register_browser_request_->::enterprise_management::RegisterBrowserRequest::Clear();
    }
    if (has_app_install_report_request()) {
      GOOGLE_DCHECK(app_install_report_request_ != NULL);
      app_install_report_request_->::enterprise_management::AppInstallReportRequest::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 117440512u) {
    if (has_chrome_desktop_report_request()) {
      GOOGLE_DCHECK(chrome_desktop_report_request_ != NULL);
      chrome_desktop_report_request_->::enterprise_management::ChromeDesktopReportRequest::Clear();
    }
    if (has_policy_validation_report_request()) {
      GOOGLE_DCHECK(policy_validation_report_request_ != NULL);
      policy_validation_report_request_->::enterprise_management::PolicyValidationReportRequest::Clear();
    }
    if (has_device_initial_enrollment_state_request()) {
      GOOGLE_DCHECK(device_initial_enrollment_state_request_ != NULL);
      device_initial_enrollment_state_request_->::enterprise_management::DeviceInitialEnrollmentStateRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceManagementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceManagementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceRegisterRequest register_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unregister_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DevicePolicyRequest policy_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policy_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_status_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_status_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_enrollment_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert_upload_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_api_access_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_state_retrieval_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_state_key_update_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_pairing_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_device_pairing_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_command_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_attribute_update_permission_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_attribute_update_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gcm_id_update_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_android_management_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_certificate_based_register_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryEnrollPlayUserRequest active_directory_enroll_play_user_request = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_directory_enroll_play_user_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryPlayActivityRequest active_directory_play_activity_request = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_directory_play_activity_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckDeviceLicenseRequest check_device_license_request = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_device_license_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryUserSigninRequest active_directory_user_signin_request = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_directory_user_signin_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.RegisterBrowserRequest register_browser_request = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_browser_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppInstallReportRequest app_install_report_request = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_install_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ChromeDesktopReportRequest chrome_desktop_report_request = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chrome_desktop_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyValidationReportRequest policy_validation_report_request = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policy_validation_report_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceInitialEnrollmentStateRequest device_initial_enrollment_state_request = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_initial_enrollment_state_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceManagementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceManagementRequest)
  return false;
#undef DO_
}

void DeviceManagementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceManagementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceRegisterRequest register_request = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->register_request_, output);
  }

  // optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->unregister_request_, output);
  }

  // optional .enterprise_management.DevicePolicyRequest policy_request = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->policy_request_, output);
  }

  // optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->device_status_report_request_, output);
  }

  // optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->session_status_report_request_, output);
  }

  // optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->auto_enrollment_request_, output);
  }

  // optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->cert_upload_request_, output);
  }

  // optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->service_api_access_request_, output);
  }

  // optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->device_state_retrieval_request_, output);
  }

  // optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->device_state_key_update_request_, output);
  }

  // optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->device_pairing_request_, output);
  }

  // optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->check_device_pairing_request_, output);
  }

  // optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->remote_command_request_, output);
  }

  // optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->device_attribute_update_permission_request_, output);
  }

  // optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->device_attribute_update_request_, output);
  }

  // optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->gcm_id_update_request_, output);
  }

  // optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->check_android_management_request_, output);
  }

  // optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, *this->certificate_based_register_request_, output);
  }

  // optional .enterprise_management.ActiveDirectoryEnrollPlayUserRequest active_directory_enroll_play_user_request = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, *this->active_directory_enroll_play_user_request_, output);
  }

  // optional .enterprise_management.ActiveDirectoryPlayActivityRequest active_directory_play_activity_request = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, *this->active_directory_play_activity_request_, output);
  }

  // optional .enterprise_management.CheckDeviceLicenseRequest check_device_license_request = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, *this->check_device_license_request_, output);
  }

  // optional .enterprise_management.ActiveDirectoryUserSigninRequest active_directory_user_signin_request = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, *this->active_directory_user_signin_request_, output);
  }

  // optional .enterprise_management.RegisterBrowserRequest register_browser_request = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, *this->register_browser_request_, output);
  }

  // optional .enterprise_management.AppInstallReportRequest app_install_report_request = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, *this->app_install_report_request_, output);
  }

  // optional .enterprise_management.ChromeDesktopReportRequest chrome_desktop_report_request = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, *this->chrome_desktop_report_request_, output);
  }

  // optional .enterprise_management.PolicyValidationReportRequest policy_validation_report_request = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, *this->policy_validation_report_request_, output);
  }

  // optional .enterprise_management.DeviceInitialEnrollmentStateRequest device_initial_enrollment_state_request = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, *this->device_initial_enrollment_state_request_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceManagementRequest)
}

size_t DeviceManagementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceManagementRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .enterprise_management.DeviceRegisterRequest register_request = 1;
    if (has_register_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->register_request_);
    }

    // optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
    if (has_unregister_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unregister_request_);
    }

    // optional .enterprise_management.DevicePolicyRequest policy_request = 3;
    if (has_policy_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->policy_request_);
    }

    // optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
    if (has_device_status_report_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_status_report_request_);
    }

    // optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
    if (has_session_status_report_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->session_status_report_request_);
    }

    // optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
    if (has_auto_enrollment_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->auto_enrollment_request_);
    }

    // optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
    if (has_cert_upload_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cert_upload_request_);
    }

    // optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
    if (has_service_api_access_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->service_api_access_request_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
    if (has_device_state_retrieval_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_state_retrieval_request_);
    }

    // optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
    if (has_device_state_key_update_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_state_key_update_request_);
    }

    // optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
    if (has_device_pairing_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_pairing_request_);
    }

    // optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
    if (has_check_device_pairing_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->check_device_pairing_request_);
    }

    // optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
    if (has_remote_command_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->remote_command_request_);
    }

    // optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
    if (has_device_attribute_update_permission_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_attribute_update_permission_request_);
    }

    // optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
    if (has_device_attribute_update_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_attribute_update_request_);
    }

    // optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
    if (has_gcm_id_update_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gcm_id_update_request_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
    if (has_check_android_management_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->check_android_management_request_);
    }

    // optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
    if (has_certificate_based_register_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->certificate_based_register_request_);
    }

    // optional .enterprise_management.ActiveDirectoryEnrollPlayUserRequest active_directory_enroll_play_user_request = 19;
    if (has_active_directory_enroll_play_user_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->active_directory_enroll_play_user_request_);
    }

    // optional .enterprise_management.ActiveDirectoryPlayActivityRequest active_directory_play_activity_request = 20;
    if (has_active_directory_play_activity_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->active_directory_play_activity_request_);
    }

    // optional .enterprise_management.CheckDeviceLicenseRequest check_device_license_request = 21;
    if (has_check_device_license_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->check_device_license_request_);
    }

    // optional .enterprise_management.ActiveDirectoryUserSigninRequest active_directory_user_signin_request = 22;
    if (has_active_directory_user_signin_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->active_directory_user_signin_request_);
    }

    // optional .enterprise_management.RegisterBrowserRequest register_browser_request = 23;
    if (has_register_browser_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->register_browser_request_);
    }

    // optional .enterprise_management.AppInstallReportRequest app_install_report_request = 25;
    if (has_app_install_report_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->app_install_report_request_);
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional .enterprise_management.ChromeDesktopReportRequest chrome_desktop_report_request = 26;
    if (has_chrome_desktop_report_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chrome_desktop_report_request_);
    }

    // optional .enterprise_management.PolicyValidationReportRequest policy_validation_report_request = 27;
    if (has_policy_validation_report_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->policy_validation_report_request_);
    }

    // optional .enterprise_management.DeviceInitialEnrollmentStateRequest device_initial_enrollment_state_request = 28;
    if (has_device_initial_enrollment_state_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_initial_enrollment_state_request_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceManagementRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceManagementRequest*>(&from));
}

void DeviceManagementRequest::MergeFrom(const DeviceManagementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceManagementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_register_request()->::enterprise_management::DeviceRegisterRequest::MergeFrom(from.register_request());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_unregister_request()->::enterprise_management::DeviceUnregisterRequest::MergeFrom(from.unregister_request());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_policy_request()->::enterprise_management::DevicePolicyRequest::MergeFrom(from.policy_request());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_device_status_report_request()->::enterprise_management::DeviceStatusReportRequest::MergeFrom(from.device_status_report_request());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_session_status_report_request()->::enterprise_management::SessionStatusReportRequest::MergeFrom(from.session_status_report_request());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_auto_enrollment_request()->::enterprise_management::DeviceAutoEnrollmentRequest::MergeFrom(from.auto_enrollment_request());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_cert_upload_request()->::enterprise_management::DeviceCertUploadRequest::MergeFrom(from.cert_upload_request());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_service_api_access_request()->::enterprise_management::DeviceServiceApiAccessRequest::MergeFrom(from.service_api_access_request());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_device_state_retrieval_request()->::enterprise_management::DeviceStateRetrievalRequest::MergeFrom(from.device_state_retrieval_request());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_device_state_key_update_request()->::enterprise_management::DeviceStateKeyUpdateRequest::MergeFrom(from.device_state_key_update_request());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_device_pairing_request()->::enterprise_management::DevicePairingRequest::MergeFrom(from.device_pairing_request());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_check_device_pairing_request()->::enterprise_management::CheckDevicePairingRequest::MergeFrom(from.check_device_pairing_request());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_remote_command_request()->::enterprise_management::DeviceRemoteCommandRequest::MergeFrom(from.remote_command_request());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_device_attribute_update_permission_request()->::enterprise_management::DeviceAttributeUpdatePermissionRequest::MergeFrom(from.device_attribute_update_permission_request());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_device_attribute_update_request()->::enterprise_management::DeviceAttributeUpdateRequest::MergeFrom(from.device_attribute_update_request());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_gcm_id_update_request()->::enterprise_management::GcmIdUpdateRequest::MergeFrom(from.gcm_id_update_request());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_check_android_management_request()->::enterprise_management::CheckAndroidManagementRequest::MergeFrom(from.check_android_management_request());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_certificate_based_register_request()->::enterprise_management::CertificateBasedDeviceRegisterRequest::MergeFrom(from.certificate_based_register_request());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_active_directory_enroll_play_user_request()->::enterprise_management::ActiveDirectoryEnrollPlayUserRequest::MergeFrom(from.active_directory_enroll_play_user_request());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_active_directory_play_activity_request()->::enterprise_management::ActiveDirectoryPlayActivityRequest::MergeFrom(from.active_directory_play_activity_request());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_check_device_license_request()->::enterprise_management::CheckDeviceLicenseRequest::MergeFrom(from.check_device_license_request());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_active_directory_user_signin_request()->::enterprise_management::ActiveDirectoryUserSigninRequest::MergeFrom(from.active_directory_user_signin_request());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_register_browser_request()->::enterprise_management::RegisterBrowserRequest::MergeFrom(from.register_browser_request());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_app_install_report_request()->::enterprise_management::AppInstallReportRequest::MergeFrom(from.app_install_report_request());
    }
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_chrome_desktop_report_request()->::enterprise_management::ChromeDesktopReportRequest::MergeFrom(from.chrome_desktop_report_request());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_policy_validation_report_request()->::enterprise_management::PolicyValidationReportRequest::MergeFrom(from.policy_validation_report_request());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_device_initial_enrollment_state_request()->::enterprise_management::DeviceInitialEnrollmentStateRequest::MergeFrom(from.device_initial_enrollment_state_request());
    }
  }
}

void DeviceManagementRequest::CopyFrom(const DeviceManagementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceManagementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceManagementRequest::IsInitialized() const {
  if (has_device_status_report_request()) {
    if (!this->device_status_report_request_->IsInitialized()) return false;
  }
  return true;
}

void DeviceManagementRequest::Swap(DeviceManagementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceManagementRequest::InternalSwap(DeviceManagementRequest* other) {
  std::swap(register_request_, other->register_request_);
  std::swap(unregister_request_, other->unregister_request_);
  std::swap(policy_request_, other->policy_request_);
  std::swap(device_status_report_request_, other->device_status_report_request_);
  std::swap(session_status_report_request_, other->session_status_report_request_);
  std::swap(auto_enrollment_request_, other->auto_enrollment_request_);
  std::swap(cert_upload_request_, other->cert_upload_request_);
  std::swap(service_api_access_request_, other->service_api_access_request_);
  std::swap(device_state_retrieval_request_, other->device_state_retrieval_request_);
  std::swap(device_state_key_update_request_, other->device_state_key_update_request_);
  std::swap(device_pairing_request_, other->device_pairing_request_);
  std::swap(check_device_pairing_request_, other->check_device_pairing_request_);
  std::swap(remote_command_request_, other->remote_command_request_);
  std::swap(device_attribute_update_permission_request_, other->device_attribute_update_permission_request_);
  std::swap(device_attribute_update_request_, other->device_attribute_update_request_);
  std::swap(gcm_id_update_request_, other->gcm_id_update_request_);
  std::swap(check_android_management_request_, other->check_android_management_request_);
  std::swap(certificate_based_register_request_, other->certificate_based_register_request_);
  std::swap(active_directory_enroll_play_user_request_, other->active_directory_enroll_play_user_request_);
  std::swap(active_directory_play_activity_request_, other->active_directory_play_activity_request_);
  std::swap(check_device_license_request_, other->check_device_license_request_);
  std::swap(active_directory_user_signin_request_, other->active_directory_user_signin_request_);
  std::swap(register_browser_request_, other->register_browser_request_);
  std::swap(app_install_report_request_, other->app_install_report_request_);
  std::swap(chrome_desktop_report_request_, other->chrome_desktop_report_request_);
  std::swap(policy_validation_report_request_, other->policy_validation_report_request_);
  std::swap(device_initial_enrollment_state_request_, other->device_initial_enrollment_state_request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceManagementRequest::GetTypeName() const {
  return "enterprise_management.DeviceManagementRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceManagementRequest

// optional .enterprise_management.DeviceRegisterRequest register_request = 1;
bool DeviceManagementRequest::has_register_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceManagementRequest::set_has_register_request() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceManagementRequest::clear_has_register_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceManagementRequest::clear_register_request() {
  if (register_request_ != NULL) register_request_->::enterprise_management::DeviceRegisterRequest::Clear();
  clear_has_register_request();
}
const ::enterprise_management::DeviceRegisterRequest& DeviceManagementRequest::register_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.register_request)
  return register_request_ != NULL ? *register_request_
                         : *::enterprise_management::DeviceRegisterRequest::internal_default_instance();
}
::enterprise_management::DeviceRegisterRequest* DeviceManagementRequest::mutable_register_request() {
  set_has_register_request();
  if (register_request_ == NULL) {
    register_request_ = new ::enterprise_management::DeviceRegisterRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.register_request)
  return register_request_;
}
::enterprise_management::DeviceRegisterRequest* DeviceManagementRequest::release_register_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.register_request)
  clear_has_register_request();
  ::enterprise_management::DeviceRegisterRequest* temp = register_request_;
  register_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_register_request(::enterprise_management::DeviceRegisterRequest* register_request) {
  delete register_request_;
  register_request_ = register_request;
  if (register_request) {
    set_has_register_request();
  } else {
    clear_has_register_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.register_request)
}

// optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
bool DeviceManagementRequest::has_unregister_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceManagementRequest::set_has_unregister_request() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceManagementRequest::clear_has_unregister_request() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceManagementRequest::clear_unregister_request() {
  if (unregister_request_ != NULL) unregister_request_->::enterprise_management::DeviceUnregisterRequest::Clear();
  clear_has_unregister_request();
}
const ::enterprise_management::DeviceUnregisterRequest& DeviceManagementRequest::unregister_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.unregister_request)
  return unregister_request_ != NULL ? *unregister_request_
                         : *::enterprise_management::DeviceUnregisterRequest::internal_default_instance();
}
::enterprise_management::DeviceUnregisterRequest* DeviceManagementRequest::mutable_unregister_request() {
  set_has_unregister_request();
  if (unregister_request_ == NULL) {
    unregister_request_ = new ::enterprise_management::DeviceUnregisterRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.unregister_request)
  return unregister_request_;
}
::enterprise_management::DeviceUnregisterRequest* DeviceManagementRequest::release_unregister_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.unregister_request)
  clear_has_unregister_request();
  ::enterprise_management::DeviceUnregisterRequest* temp = unregister_request_;
  unregister_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_unregister_request(::enterprise_management::DeviceUnregisterRequest* unregister_request) {
  delete unregister_request_;
  unregister_request_ = unregister_request;
  if (unregister_request) {
    set_has_unregister_request();
  } else {
    clear_has_unregister_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.unregister_request)
}

// optional .enterprise_management.DevicePolicyRequest policy_request = 3;
bool DeviceManagementRequest::has_policy_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceManagementRequest::set_has_policy_request() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceManagementRequest::clear_has_policy_request() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceManagementRequest::clear_policy_request() {
  if (policy_request_ != NULL) policy_request_->::enterprise_management::DevicePolicyRequest::Clear();
  clear_has_policy_request();
}
const ::enterprise_management::DevicePolicyRequest& DeviceManagementRequest::policy_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.policy_request)
  return policy_request_ != NULL ? *policy_request_
                         : *::enterprise_management::DevicePolicyRequest::internal_default_instance();
}
::enterprise_management::DevicePolicyRequest* DeviceManagementRequest::mutable_policy_request() {
  set_has_policy_request();
  if (policy_request_ == NULL) {
    policy_request_ = new ::enterprise_management::DevicePolicyRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.policy_request)
  return policy_request_;
}
::enterprise_management::DevicePolicyRequest* DeviceManagementRequest::release_policy_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.policy_request)
  clear_has_policy_request();
  ::enterprise_management::DevicePolicyRequest* temp = policy_request_;
  policy_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_policy_request(::enterprise_management::DevicePolicyRequest* policy_request) {
  delete policy_request_;
  policy_request_ = policy_request;
  if (policy_request) {
    set_has_policy_request();
  } else {
    clear_has_policy_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.policy_request)
}

// optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
bool DeviceManagementRequest::has_device_status_report_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceManagementRequest::set_has_device_status_report_request() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceManagementRequest::clear_has_device_status_report_request() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceManagementRequest::clear_device_status_report_request() {
  if (device_status_report_request_ != NULL) device_status_report_request_->::enterprise_management::DeviceStatusReportRequest::Clear();
  clear_has_device_status_report_request();
}
const ::enterprise_management::DeviceStatusReportRequest& DeviceManagementRequest::device_status_report_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_status_report_request)
  return device_status_report_request_ != NULL ? *device_status_report_request_
                         : *::enterprise_management::DeviceStatusReportRequest::internal_default_instance();
}
::enterprise_management::DeviceStatusReportRequest* DeviceManagementRequest::mutable_device_status_report_request() {
  set_has_device_status_report_request();
  if (device_status_report_request_ == NULL) {
    device_status_report_request_ = new ::enterprise_management::DeviceStatusReportRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_status_report_request)
  return device_status_report_request_;
}
::enterprise_management::DeviceStatusReportRequest* DeviceManagementRequest::release_device_status_report_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_status_report_request)
  clear_has_device_status_report_request();
  ::enterprise_management::DeviceStatusReportRequest* temp = device_status_report_request_;
  device_status_report_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_device_status_report_request(::enterprise_management::DeviceStatusReportRequest* device_status_report_request) {
  delete device_status_report_request_;
  device_status_report_request_ = device_status_report_request;
  if (device_status_report_request) {
    set_has_device_status_report_request();
  } else {
    clear_has_device_status_report_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_status_report_request)
}

// optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
bool DeviceManagementRequest::has_session_status_report_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceManagementRequest::set_has_session_status_report_request() {
  _has_bits_[0] |= 0x00000010u;
}
void DeviceManagementRequest::clear_has_session_status_report_request() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeviceManagementRequest::clear_session_status_report_request() {
  if (session_status_report_request_ != NULL) session_status_report_request_->::enterprise_management::SessionStatusReportRequest::Clear();
  clear_has_session_status_report_request();
}
const ::enterprise_management::SessionStatusReportRequest& DeviceManagementRequest::session_status_report_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.session_status_report_request)
  return session_status_report_request_ != NULL ? *session_status_report_request_
                         : *::enterprise_management::SessionStatusReportRequest::internal_default_instance();
}
::enterprise_management::SessionStatusReportRequest* DeviceManagementRequest::mutable_session_status_report_request() {
  set_has_session_status_report_request();
  if (session_status_report_request_ == NULL) {
    session_status_report_request_ = new ::enterprise_management::SessionStatusReportRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.session_status_report_request)
  return session_status_report_request_;
}
::enterprise_management::SessionStatusReportRequest* DeviceManagementRequest::release_session_status_report_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.session_status_report_request)
  clear_has_session_status_report_request();
  ::enterprise_management::SessionStatusReportRequest* temp = session_status_report_request_;
  session_status_report_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_session_status_report_request(::enterprise_management::SessionStatusReportRequest* session_status_report_request) {
  delete session_status_report_request_;
  session_status_report_request_ = session_status_report_request;
  if (session_status_report_request) {
    set_has_session_status_report_request();
  } else {
    clear_has_session_status_report_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.session_status_report_request)
}

// optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
bool DeviceManagementRequest::has_auto_enrollment_request() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceManagementRequest::set_has_auto_enrollment_request() {
  _has_bits_[0] |= 0x00000020u;
}
void DeviceManagementRequest::clear_has_auto_enrollment_request() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeviceManagementRequest::clear_auto_enrollment_request() {
  if (auto_enrollment_request_ != NULL) auto_enrollment_request_->::enterprise_management::DeviceAutoEnrollmentRequest::Clear();
  clear_has_auto_enrollment_request();
}
const ::enterprise_management::DeviceAutoEnrollmentRequest& DeviceManagementRequest::auto_enrollment_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
  return auto_enrollment_request_ != NULL ? *auto_enrollment_request_
                         : *::enterprise_management::DeviceAutoEnrollmentRequest::internal_default_instance();
}
::enterprise_management::DeviceAutoEnrollmentRequest* DeviceManagementRequest::mutable_auto_enrollment_request() {
  set_has_auto_enrollment_request();
  if (auto_enrollment_request_ == NULL) {
    auto_enrollment_request_ = new ::enterprise_management::DeviceAutoEnrollmentRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
  return auto_enrollment_request_;
}
::enterprise_management::DeviceAutoEnrollmentRequest* DeviceManagementRequest::release_auto_enrollment_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
  clear_has_auto_enrollment_request();
  ::enterprise_management::DeviceAutoEnrollmentRequest* temp = auto_enrollment_request_;
  auto_enrollment_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_auto_enrollment_request(::enterprise_management::DeviceAutoEnrollmentRequest* auto_enrollment_request) {
  delete auto_enrollment_request_;
  auto_enrollment_request_ = auto_enrollment_request;
  if (auto_enrollment_request) {
    set_has_auto_enrollment_request();
  } else {
    clear_has_auto_enrollment_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
}

// optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
bool DeviceManagementRequest::has_cert_upload_request() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceManagementRequest::set_has_cert_upload_request() {
  _has_bits_[0] |= 0x00000040u;
}
void DeviceManagementRequest::clear_has_cert_upload_request() {
  _has_bits_[0] &= ~0x00000040u;
}
void DeviceManagementRequest::clear_cert_upload_request() {
  if (cert_upload_request_ != NULL) cert_upload_request_->::enterprise_management::DeviceCertUploadRequest::Clear();
  clear_has_cert_upload_request();
}
const ::enterprise_management::DeviceCertUploadRequest& DeviceManagementRequest::cert_upload_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.cert_upload_request)
  return cert_upload_request_ != NULL ? *cert_upload_request_
                         : *::enterprise_management::DeviceCertUploadRequest::internal_default_instance();
}
::enterprise_management::DeviceCertUploadRequest* DeviceManagementRequest::mutable_cert_upload_request() {
  set_has_cert_upload_request();
  if (cert_upload_request_ == NULL) {
    cert_upload_request_ = new ::enterprise_management::DeviceCertUploadRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.cert_upload_request)
  return cert_upload_request_;
}
::enterprise_management::DeviceCertUploadRequest* DeviceManagementRequest::release_cert_upload_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.cert_upload_request)
  clear_has_cert_upload_request();
  ::enterprise_management::DeviceCertUploadRequest* temp = cert_upload_request_;
  cert_upload_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_cert_upload_request(::enterprise_management::DeviceCertUploadRequest* cert_upload_request) {
  delete cert_upload_request_;
  cert_upload_request_ = cert_upload_request;
  if (cert_upload_request) {
    set_has_cert_upload_request();
  } else {
    clear_has_cert_upload_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.cert_upload_request)
}

// optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
bool DeviceManagementRequest::has_service_api_access_request() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceManagementRequest::set_has_service_api_access_request() {
  _has_bits_[0] |= 0x00000080u;
}
void DeviceManagementRequest::clear_has_service_api_access_request() {
  _has_bits_[0] &= ~0x00000080u;
}
void DeviceManagementRequest::clear_service_api_access_request() {
  if (service_api_access_request_ != NULL) service_api_access_request_->::enterprise_management::DeviceServiceApiAccessRequest::Clear();
  clear_has_service_api_access_request();
}
const ::enterprise_management::DeviceServiceApiAccessRequest& DeviceManagementRequest::service_api_access_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.service_api_access_request)
  return service_api_access_request_ != NULL ? *service_api_access_request_
                         : *::enterprise_management::DeviceServiceApiAccessRequest::internal_default_instance();
}
::enterprise_management::DeviceServiceApiAccessRequest* DeviceManagementRequest::mutable_service_api_access_request() {
  set_has_service_api_access_request();
  if (service_api_access_request_ == NULL) {
    service_api_access_request_ = new ::enterprise_management::DeviceServiceApiAccessRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.service_api_access_request)
  return service_api_access_request_;
}
::enterprise_management::DeviceServiceApiAccessRequest* DeviceManagementRequest::release_service_api_access_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.service_api_access_request)
  clear_has_service_api_access_request();
  ::enterprise_management::DeviceServiceApiAccessRequest* temp = service_api_access_request_;
  service_api_access_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_service_api_access_request(::enterprise_management::DeviceServiceApiAccessRequest* service_api_access_request) {
  delete service_api_access_request_;
  service_api_access_request_ = service_api_access_request;
  if (service_api_access_request) {
    set_has_service_api_access_request();
  } else {
    clear_has_service_api_access_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.service_api_access_request)
}

// optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
bool DeviceManagementRequest::has_device_state_retrieval_request() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DeviceManagementRequest::set_has_device_state_retrieval_request() {
  _has_bits_[0] |= 0x00000100u;
}
void DeviceManagementRequest::clear_has_device_state_retrieval_request() {
  _has_bits_[0] &= ~0x00000100u;
}
void DeviceManagementRequest::clear_device_state_retrieval_request() {
  if (device_state_retrieval_request_ != NULL) device_state_retrieval_request_->::enterprise_management::DeviceStateRetrievalRequest::Clear();
  clear_has_device_state_retrieval_request();
}
const ::enterprise_management::DeviceStateRetrievalRequest& DeviceManagementRequest::device_state_retrieval_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
  return device_state_retrieval_request_ != NULL ? *device_state_retrieval_request_
                         : *::enterprise_management::DeviceStateRetrievalRequest::internal_default_instance();
}
::enterprise_management::DeviceStateRetrievalRequest* DeviceManagementRequest::mutable_device_state_retrieval_request() {
  set_has_device_state_retrieval_request();
  if (device_state_retrieval_request_ == NULL) {
    device_state_retrieval_request_ = new ::enterprise_management::DeviceStateRetrievalRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
  return device_state_retrieval_request_;
}
::enterprise_management::DeviceStateRetrievalRequest* DeviceManagementRequest::release_device_state_retrieval_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
  clear_has_device_state_retrieval_request();
  ::enterprise_management::DeviceStateRetrievalRequest* temp = device_state_retrieval_request_;
  device_state_retrieval_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_device_state_retrieval_request(::enterprise_management::DeviceStateRetrievalRequest* device_state_retrieval_request) {
  delete device_state_retrieval_request_;
  device_state_retrieval_request_ = device_state_retrieval_request;
  if (device_state_retrieval_request) {
    set_has_device_state_retrieval_request();
  } else {
    clear_has_device_state_retrieval_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
}

// optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
bool DeviceManagementRequest::has_device_state_key_update_request() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DeviceManagementRequest::set_has_device_state_key_update_request() {
  _has_bits_[0] |= 0x00000200u;
}
void DeviceManagementRequest::clear_has_device_state_key_update_request() {
  _has_bits_[0] &= ~0x00000200u;
}
void DeviceManagementRequest::clear_device_state_key_update_request() {
  if (device_state_key_update_request_ != NULL) device_state_key_update_request_->::enterprise_management::DeviceStateKeyUpdateRequest::Clear();
  clear_has_device_state_key_update_request();
}
const ::enterprise_management::DeviceStateKeyUpdateRequest& DeviceManagementRequest::device_state_key_update_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
  return device_state_key_update_request_ != NULL ? *device_state_key_update_request_
                         : *::enterprise_management::DeviceStateKeyUpdateRequest::internal_default_instance();
}
::enterprise_management::DeviceStateKeyUpdateRequest* DeviceManagementRequest::mutable_device_state_key_update_request() {
  set_has_device_state_key_update_request();
  if (device_state_key_update_request_ == NULL) {
    device_state_key_update_request_ = new ::enterprise_management::DeviceStateKeyUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
  return device_state_key_update_request_;
}
::enterprise_management::DeviceStateKeyUpdateRequest* DeviceManagementRequest::release_device_state_key_update_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
  clear_has_device_state_key_update_request();
  ::enterprise_management::DeviceStateKeyUpdateRequest* temp = device_state_key_update_request_;
  device_state_key_update_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_device_state_key_update_request(::enterprise_management::DeviceStateKeyUpdateRequest* device_state_key_update_request) {
  delete device_state_key_update_request_;
  device_state_key_update_request_ = device_state_key_update_request;
  if (device_state_key_update_request) {
    set_has_device_state_key_update_request();
  } else {
    clear_has_device_state_key_update_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
}

// optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
bool DeviceManagementRequest::has_device_pairing_request() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DeviceManagementRequest::set_has_device_pairing_request() {
  _has_bits_[0] |= 0x00000400u;
}
void DeviceManagementRequest::clear_has_device_pairing_request() {
  _has_bits_[0] &= ~0x00000400u;
}
void DeviceManagementRequest::clear_device_pairing_request() {
  if (device_pairing_request_ != NULL) device_pairing_request_->::enterprise_management::DevicePairingRequest::Clear();
  clear_has_device_pairing_request();
}
const ::enterprise_management::DevicePairingRequest& DeviceManagementRequest::device_pairing_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_pairing_request)
  return device_pairing_request_ != NULL ? *device_pairing_request_
                         : *::enterprise_management::DevicePairingRequest::internal_default_instance();
}
::enterprise_management::DevicePairingRequest* DeviceManagementRequest::mutable_device_pairing_request() {
  set_has_device_pairing_request();
  if (device_pairing_request_ == NULL) {
    device_pairing_request_ = new ::enterprise_management::DevicePairingRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_pairing_request)
  return device_pairing_request_;
}
::enterprise_management::DevicePairingRequest* DeviceManagementRequest::release_device_pairing_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_pairing_request)
  clear_has_device_pairing_request();
  ::enterprise_management::DevicePairingRequest* temp = device_pairing_request_;
  device_pairing_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_device_pairing_request(::enterprise_management::DevicePairingRequest* device_pairing_request) {
  delete device_pairing_request_;
  device_pairing_request_ = device_pairing_request;
  if (device_pairing_request) {
    set_has_device_pairing_request();
  } else {
    clear_has_device_pairing_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_pairing_request)
}

// optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
bool DeviceManagementRequest::has_check_device_pairing_request() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DeviceManagementRequest::set_has_check_device_pairing_request() {
  _has_bits_[0] |= 0x00000800u;
}
void DeviceManagementRequest::clear_has_check_device_pairing_request() {
  _has_bits_[0] &= ~0x00000800u;
}
void DeviceManagementRequest::clear_check_device_pairing_request() {
  if (check_device_pairing_request_ != NULL) check_device_pairing_request_->::enterprise_management::CheckDevicePairingRequest::Clear();
  clear_has_check_device_pairing_request();
}
const ::enterprise_management::CheckDevicePairingRequest& DeviceManagementRequest::check_device_pairing_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
  return check_device_pairing_request_ != NULL ? *check_device_pairing_request_
                         : *::enterprise_management::CheckDevicePairingRequest::internal_default_instance();
}
::enterprise_management::CheckDevicePairingRequest* DeviceManagementRequest::mutable_check_device_pairing_request() {
  set_has_check_device_pairing_request();
  if (check_device_pairing_request_ == NULL) {
    check_device_pairing_request_ = new ::enterprise_management::CheckDevicePairingRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
  return check_device_pairing_request_;
}
::enterprise_management::CheckDevicePairingRequest* DeviceManagementRequest::release_check_device_pairing_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
  clear_has_check_device_pairing_request();
  ::enterprise_management::CheckDevicePairingRequest* temp = check_device_pairing_request_;
  check_device_pairing_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_check_device_pairing_request(::enterprise_management::CheckDevicePairingRequest* check_device_pairing_request) {
  delete check_device_pairing_request_;
  check_device_pairing_request_ = check_device_pairing_request;
  if (check_device_pairing_request) {
    set_has_check_device_pairing_request();
  } else {
    clear_has_check_device_pairing_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
}

// optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
bool DeviceManagementRequest::has_remote_command_request() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DeviceManagementRequest::set_has_remote_command_request() {
  _has_bits_[0] |= 0x00001000u;
}
void DeviceManagementRequest::clear_has_remote_command_request() {
  _has_bits_[0] &= ~0x00001000u;
}
void DeviceManagementRequest::clear_remote_command_request() {
  if (remote_command_request_ != NULL) remote_command_request_->::enterprise_management::DeviceRemoteCommandRequest::Clear();
  clear_has_remote_command_request();
}
const ::enterprise_management::DeviceRemoteCommandRequest& DeviceManagementRequest::remote_command_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.remote_command_request)
  return remote_command_request_ != NULL ? *remote_command_request_
                         : *::enterprise_management::DeviceRemoteCommandRequest::internal_default_instance();
}
::enterprise_management::DeviceRemoteCommandRequest* DeviceManagementRequest::mutable_remote_command_request() {
  set_has_remote_command_request();
  if (remote_command_request_ == NULL) {
    remote_command_request_ = new ::enterprise_management::DeviceRemoteCommandRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.remote_command_request)
  return remote_command_request_;
}
::enterprise_management::DeviceRemoteCommandRequest* DeviceManagementRequest::release_remote_command_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.remote_command_request)
  clear_has_remote_command_request();
  ::enterprise_management::DeviceRemoteCommandRequest* temp = remote_command_request_;
  remote_command_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_remote_command_request(::enterprise_management::DeviceRemoteCommandRequest* remote_command_request) {
  delete remote_command_request_;
  remote_command_request_ = remote_command_request;
  if (remote_command_request) {
    set_has_remote_command_request();
  } else {
    clear_has_remote_command_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.remote_command_request)
}

// optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
bool DeviceManagementRequest::has_device_attribute_update_permission_request() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DeviceManagementRequest::set_has_device_attribute_update_permission_request() {
  _has_bits_[0] |= 0x00002000u;
}
void DeviceManagementRequest::clear_has_device_attribute_update_permission_request() {
  _has_bits_[0] &= ~0x00002000u;
}
void DeviceManagementRequest::clear_device_attribute_update_permission_request() {
  if (device_attribute_update_permission_request_ != NULL) device_attribute_update_permission_request_->::enterprise_management::DeviceAttributeUpdatePermissionRequest::Clear();
  clear_has_device_attribute_update_permission_request();
}
const ::enterprise_management::DeviceAttributeUpdatePermissionRequest& DeviceManagementRequest::device_attribute_update_permission_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
  return device_attribute_update_permission_request_ != NULL ? *device_attribute_update_permission_request_
                         : *::enterprise_management::DeviceAttributeUpdatePermissionRequest::internal_default_instance();
}
::enterprise_management::DeviceAttributeUpdatePermissionRequest* DeviceManagementRequest::mutable_device_attribute_update_permission_request() {
  set_has_device_attribute_update_permission_request();
  if (device_attribute_update_permission_request_ == NULL) {
    device_attribute_update_permission_request_ = new ::enterprise_management::DeviceAttributeUpdatePermissionRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
  return device_attribute_update_permission_request_;
}
::enterprise_management::DeviceAttributeUpdatePermissionRequest* DeviceManagementRequest::release_device_attribute_update_permission_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
  clear_has_device_attribute_update_permission_request();
  ::enterprise_management::DeviceAttributeUpdatePermissionRequest* temp = device_attribute_update_permission_request_;
  device_attribute_update_permission_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_device_attribute_update_permission_request(::enterprise_management::DeviceAttributeUpdatePermissionRequest* device_attribute_update_permission_request) {
  delete device_attribute_update_permission_request_;
  device_attribute_update_permission_request_ = device_attribute_update_permission_request;
  if (device_attribute_update_permission_request) {
    set_has_device_attribute_update_permission_request();
  } else {
    clear_has_device_attribute_update_permission_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
}

// optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
bool DeviceManagementRequest::has_device_attribute_update_request() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DeviceManagementRequest::set_has_device_attribute_update_request() {
  _has_bits_[0] |= 0x00004000u;
}
void DeviceManagementRequest::clear_has_device_attribute_update_request() {
  _has_bits_[0] &= ~0x00004000u;
}
void DeviceManagementRequest::clear_device_attribute_update_request() {
  if (device_attribute_update_request_ != NULL) device_attribute_update_request_->::enterprise_management::DeviceAttributeUpdateRequest::Clear();
  clear_has_device_attribute_update_request();
}
const ::enterprise_management::DeviceAttributeUpdateRequest& DeviceManagementRequest::device_attribute_update_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
  return device_attribute_update_request_ != NULL ? *device_attribute_update_request_
                         : *::enterprise_management::DeviceAttributeUpdateRequest::internal_default_instance();
}
::enterprise_management::DeviceAttributeUpdateRequest* DeviceManagementRequest::mutable_device_attribute_update_request() {
  set_has_device_attribute_update_request();
  if (device_attribute_update_request_ == NULL) {
    device_attribute_update_request_ = new ::enterprise_management::DeviceAttributeUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
  return device_attribute_update_request_;
}
::enterprise_management::DeviceAttributeUpdateRequest* DeviceManagementRequest::release_device_attribute_update_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
  clear_has_device_attribute_update_request();
  ::enterprise_management::DeviceAttributeUpdateRequest* temp = device_attribute_update_request_;
  device_attribute_update_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_device_attribute_update_request(::enterprise_management::DeviceAttributeUpdateRequest* device_attribute_update_request) {
  delete device_attribute_update_request_;
  device_attribute_update_request_ = device_attribute_update_request;
  if (device_attribute_update_request) {
    set_has_device_attribute_update_request();
  } else {
    clear_has_device_attribute_update_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
}

// optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
bool DeviceManagementRequest::has_gcm_id_update_request() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DeviceManagementRequest::set_has_gcm_id_update_request() {
  _has_bits_[0] |= 0x00008000u;
}
void DeviceManagementRequest::clear_has_gcm_id_update_request() {
  _has_bits_[0] &= ~0x00008000u;
}
void DeviceManagementRequest::clear_gcm_id_update_request() {
  if (gcm_id_update_request_ != NULL) gcm_id_update_request_->::enterprise_management::GcmIdUpdateRequest::Clear();
  clear_has_gcm_id_update_request();
}
const ::enterprise_management::GcmIdUpdateRequest& DeviceManagementRequest::gcm_id_update_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
  return gcm_id_update_request_ != NULL ? *gcm_id_update_request_
                         : *::enterprise_management::GcmIdUpdateRequest::internal_default_instance();
}
::enterprise_management::GcmIdUpdateRequest* DeviceManagementRequest::mutable_gcm_id_update_request() {
  set_has_gcm_id_update_request();
  if (gcm_id_update_request_ == NULL) {
    gcm_id_update_request_ = new ::enterprise_management::GcmIdUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
  return gcm_id_update_request_;
}
::enterprise_management::GcmIdUpdateRequest* DeviceManagementRequest::release_gcm_id_update_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
  clear_has_gcm_id_update_request();
  ::enterprise_management::GcmIdUpdateRequest* temp = gcm_id_update_request_;
  gcm_id_update_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_gcm_id_update_request(::enterprise_management::GcmIdUpdateRequest* gcm_id_update_request) {
  delete gcm_id_update_request_;
  gcm_id_update_request_ = gcm_id_update_request;
  if (gcm_id_update_request) {
    set_has_gcm_id_update_request();
  } else {
    clear_has_gcm_id_update_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
}

// optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
bool DeviceManagementRequest::has_check_android_management_request() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DeviceManagementRequest::set_has_check_android_management_request() {
  _has_bits_[0] |= 0x00010000u;
}
void DeviceManagementRequest::clear_has_check_android_management_request() {
  _has_bits_[0] &= ~0x00010000u;
}
void DeviceManagementRequest::clear_check_android_management_request() {
  if (check_android_management_request_ != NULL) check_android_management_request_->::enterprise_management::CheckAndroidManagementRequest::Clear();
  clear_has_check_android_management_request();
}
const ::enterprise_management::CheckAndroidManagementRequest& DeviceManagementRequest::check_android_management_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.check_android_management_request)
  return check_android_management_request_ != NULL ? *check_android_management_request_
                         : *::enterprise_management::CheckAndroidManagementRequest::internal_default_instance();
}
::enterprise_management::CheckAndroidManagementRequest* DeviceManagementRequest::mutable_check_android_management_request() {
  set_has_check_android_management_request();
  if (check_android_management_request_ == NULL) {
    check_android_management_request_ = new ::enterprise_management::CheckAndroidManagementRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.check_android_management_request)
  return check_android_management_request_;
}
::enterprise_management::CheckAndroidManagementRequest* DeviceManagementRequest::release_check_android_management_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.check_android_management_request)
  clear_has_check_android_management_request();
  ::enterprise_management::CheckAndroidManagementRequest* temp = check_android_management_request_;
  check_android_management_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_check_android_management_request(::enterprise_management::CheckAndroidManagementRequest* check_android_management_request) {
  delete check_android_management_request_;
  check_android_management_request_ = check_android_management_request;
  if (check_android_management_request) {
    set_has_check_android_management_request();
  } else {
    clear_has_check_android_management_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.check_android_management_request)
}

// optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
bool DeviceManagementRequest::has_certificate_based_register_request() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DeviceManagementRequest::set_has_certificate_based_register_request() {
  _has_bits_[0] |= 0x00020000u;
}
void DeviceManagementRequest::clear_has_certificate_based_register_request() {
  _has_bits_[0] &= ~0x00020000u;
}
void DeviceManagementRequest::clear_certificate_based_register_request() {
  if (certificate_based_register_request_ != NULL) certificate_based_register_request_->::enterprise_management::CertificateBasedDeviceRegisterRequest::Clear();
  clear_has_certificate_based_register_request();
}
const ::enterprise_management::CertificateBasedDeviceRegisterRequest& DeviceManagementRequest::certificate_based_register_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
  return certificate_based_register_request_ != NULL ? *certificate_based_register_request_
                         : *::enterprise_management::CertificateBasedDeviceRegisterRequest::internal_default_instance();
}
::enterprise_management::CertificateBasedDeviceRegisterRequest* DeviceManagementRequest::mutable_certificate_based_register_request() {
  set_has_certificate_based_register_request();
  if (certificate_based_register_request_ == NULL) {
    certificate_based_register_request_ = new ::enterprise_management::CertificateBasedDeviceRegisterRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
  return certificate_based_register_request_;
}
::enterprise_management::CertificateBasedDeviceRegisterRequest* DeviceManagementRequest::release_certificate_based_register_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
  clear_has_certificate_based_register_request();
  ::enterprise_management::CertificateBasedDeviceRegisterRequest* temp = certificate_based_register_request_;
  certificate_based_register_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_certificate_based_register_request(::enterprise_management::CertificateBasedDeviceRegisterRequest* certificate_based_register_request) {
  delete certificate_based_register_request_;
  certificate_based_register_request_ = certificate_based_register_request;
  if (certificate_based_register_request) {
    set_has_certificate_based_register_request();
  } else {
    clear_has_certificate_based_register_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
}

// optional .enterprise_management.ActiveDirectoryEnrollPlayUserRequest active_directory_enroll_play_user_request = 19;
bool DeviceManagementRequest::has_active_directory_enroll_play_user_request() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DeviceManagementRequest::set_has_active_directory_enroll_play_user_request() {
  _has_bits_[0] |= 0x00040000u;
}
void DeviceManagementRequest::clear_has_active_directory_enroll_play_user_request() {
  _has_bits_[0] &= ~0x00040000u;
}
void DeviceManagementRequest::clear_active_directory_enroll_play_user_request() {
  if (active_directory_enroll_play_user_request_ != NULL) active_directory_enroll_play_user_request_->::enterprise_management::ActiveDirectoryEnrollPlayUserRequest::Clear();
  clear_has_active_directory_enroll_play_user_request();
}
const ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest& DeviceManagementRequest::active_directory_enroll_play_user_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.active_directory_enroll_play_user_request)
  return active_directory_enroll_play_user_request_ != NULL ? *active_directory_enroll_play_user_request_
                         : *::enterprise_management::ActiveDirectoryEnrollPlayUserRequest::internal_default_instance();
}
::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* DeviceManagementRequest::mutable_active_directory_enroll_play_user_request() {
  set_has_active_directory_enroll_play_user_request();
  if (active_directory_enroll_play_user_request_ == NULL) {
    active_directory_enroll_play_user_request_ = new ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.active_directory_enroll_play_user_request)
  return active_directory_enroll_play_user_request_;
}
::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* DeviceManagementRequest::release_active_directory_enroll_play_user_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.active_directory_enroll_play_user_request)
  clear_has_active_directory_enroll_play_user_request();
  ::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* temp = active_directory_enroll_play_user_request_;
  active_directory_enroll_play_user_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_active_directory_enroll_play_user_request(::enterprise_management::ActiveDirectoryEnrollPlayUserRequest* active_directory_enroll_play_user_request) {
  delete active_directory_enroll_play_user_request_;
  active_directory_enroll_play_user_request_ = active_directory_enroll_play_user_request;
  if (active_directory_enroll_play_user_request) {
    set_has_active_directory_enroll_play_user_request();
  } else {
    clear_has_active_directory_enroll_play_user_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.active_directory_enroll_play_user_request)
}

// optional .enterprise_management.ActiveDirectoryPlayActivityRequest active_directory_play_activity_request = 20;
bool DeviceManagementRequest::has_active_directory_play_activity_request() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DeviceManagementRequest::set_has_active_directory_play_activity_request() {
  _has_bits_[0] |= 0x00080000u;
}
void DeviceManagementRequest::clear_has_active_directory_play_activity_request() {
  _has_bits_[0] &= ~0x00080000u;
}
void DeviceManagementRequest::clear_active_directory_play_activity_request() {
  if (active_directory_play_activity_request_ != NULL) active_directory_play_activity_request_->::enterprise_management::ActiveDirectoryPlayActivityRequest::Clear();
  clear_has_active_directory_play_activity_request();
}
const ::enterprise_management::ActiveDirectoryPlayActivityRequest& DeviceManagementRequest::active_directory_play_activity_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.active_directory_play_activity_request)
  return active_directory_play_activity_request_ != NULL ? *active_directory_play_activity_request_
                         : *::enterprise_management::ActiveDirectoryPlayActivityRequest::internal_default_instance();
}
::enterprise_management::ActiveDirectoryPlayActivityRequest* DeviceManagementRequest::mutable_active_directory_play_activity_request() {
  set_has_active_directory_play_activity_request();
  if (active_directory_play_activity_request_ == NULL) {
    active_directory_play_activity_request_ = new ::enterprise_management::ActiveDirectoryPlayActivityRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.active_directory_play_activity_request)
  return active_directory_play_activity_request_;
}
::enterprise_management::ActiveDirectoryPlayActivityRequest* DeviceManagementRequest::release_active_directory_play_activity_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.active_directory_play_activity_request)
  clear_has_active_directory_play_activity_request();
  ::enterprise_management::ActiveDirectoryPlayActivityRequest* temp = active_directory_play_activity_request_;
  active_directory_play_activity_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_active_directory_play_activity_request(::enterprise_management::ActiveDirectoryPlayActivityRequest* active_directory_play_activity_request) {
  delete active_directory_play_activity_request_;
  active_directory_play_activity_request_ = active_directory_play_activity_request;
  if (active_directory_play_activity_request) {
    set_has_active_directory_play_activity_request();
  } else {
    clear_has_active_directory_play_activity_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.active_directory_play_activity_request)
}

// optional .enterprise_management.CheckDeviceLicenseRequest check_device_license_request = 21;
bool DeviceManagementRequest::has_check_device_license_request() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DeviceManagementRequest::set_has_check_device_license_request() {
  _has_bits_[0] |= 0x00100000u;
}
void DeviceManagementRequest::clear_has_check_device_license_request() {
  _has_bits_[0] &= ~0x00100000u;
}
void DeviceManagementRequest::clear_check_device_license_request() {
  if (check_device_license_request_ != NULL) check_device_license_request_->::enterprise_management::CheckDeviceLicenseRequest::Clear();
  clear_has_check_device_license_request();
}
const ::enterprise_management::CheckDeviceLicenseRequest& DeviceManagementRequest::check_device_license_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.check_device_license_request)
  return check_device_license_request_ != NULL ? *check_device_license_request_
                         : *::enterprise_management::CheckDeviceLicenseRequest::internal_default_instance();
}
::enterprise_management::CheckDeviceLicenseRequest* DeviceManagementRequest::mutable_check_device_license_request() {
  set_has_check_device_license_request();
  if (check_device_license_request_ == NULL) {
    check_device_license_request_ = new ::enterprise_management::CheckDeviceLicenseRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.check_device_license_request)
  return check_device_license_request_;
}
::enterprise_management::CheckDeviceLicenseRequest* DeviceManagementRequest::release_check_device_license_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.check_device_license_request)
  clear_has_check_device_license_request();
  ::enterprise_management::CheckDeviceLicenseRequest* temp = check_device_license_request_;
  check_device_license_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_check_device_license_request(::enterprise_management::CheckDeviceLicenseRequest* check_device_license_request) {
  delete check_device_license_request_;
  check_device_license_request_ = check_device_license_request;
  if (check_device_license_request) {
    set_has_check_device_license_request();
  } else {
    clear_has_check_device_license_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.check_device_license_request)
}

// optional .enterprise_management.ActiveDirectoryUserSigninRequest active_directory_user_signin_request = 22;
bool DeviceManagementRequest::has_active_directory_user_signin_request() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DeviceManagementRequest::set_has_active_directory_user_signin_request() {
  _has_bits_[0] |= 0x00200000u;
}
void DeviceManagementRequest::clear_has_active_directory_user_signin_request() {
  _has_bits_[0] &= ~0x00200000u;
}
void DeviceManagementRequest::clear_active_directory_user_signin_request() {
  if (active_directory_user_signin_request_ != NULL) active_directory_user_signin_request_->::enterprise_management::ActiveDirectoryUserSigninRequest::Clear();
  clear_has_active_directory_user_signin_request();
}
const ::enterprise_management::ActiveDirectoryUserSigninRequest& DeviceManagementRequest::active_directory_user_signin_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.active_directory_user_signin_request)
  return active_directory_user_signin_request_ != NULL ? *active_directory_user_signin_request_
                         : *::enterprise_management::ActiveDirectoryUserSigninRequest::internal_default_instance();
}
::enterprise_management::ActiveDirectoryUserSigninRequest* DeviceManagementRequest::mutable_active_directory_user_signin_request() {
  set_has_active_directory_user_signin_request();
  if (active_directory_user_signin_request_ == NULL) {
    active_directory_user_signin_request_ = new ::enterprise_management::ActiveDirectoryUserSigninRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.active_directory_user_signin_request)
  return active_directory_user_signin_request_;
}
::enterprise_management::ActiveDirectoryUserSigninRequest* DeviceManagementRequest::release_active_directory_user_signin_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.active_directory_user_signin_request)
  clear_has_active_directory_user_signin_request();
  ::enterprise_management::ActiveDirectoryUserSigninRequest* temp = active_directory_user_signin_request_;
  active_directory_user_signin_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_active_directory_user_signin_request(::enterprise_management::ActiveDirectoryUserSigninRequest* active_directory_user_signin_request) {
  delete active_directory_user_signin_request_;
  active_directory_user_signin_request_ = active_directory_user_signin_request;
  if (active_directory_user_signin_request) {
    set_has_active_directory_user_signin_request();
  } else {
    clear_has_active_directory_user_signin_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.active_directory_user_signin_request)
}

// optional .enterprise_management.RegisterBrowserRequest register_browser_request = 23;
bool DeviceManagementRequest::has_register_browser_request() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DeviceManagementRequest::set_has_register_browser_request() {
  _has_bits_[0] |= 0x00400000u;
}
void DeviceManagementRequest::clear_has_register_browser_request() {
  _has_bits_[0] &= ~0x00400000u;
}
void DeviceManagementRequest::clear_register_browser_request() {
  if (register_browser_request_ != NULL) register_browser_request_->::enterprise_management::RegisterBrowserRequest::Clear();
  clear_has_register_browser_request();
}
const ::enterprise_management::RegisterBrowserRequest& DeviceManagementRequest::register_browser_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.register_browser_request)
  return register_browser_request_ != NULL ? *register_browser_request_
                         : *::enterprise_management::RegisterBrowserRequest::internal_default_instance();
}
::enterprise_management::RegisterBrowserRequest* DeviceManagementRequest::mutable_register_browser_request() {
  set_has_register_browser_request();
  if (register_browser_request_ == NULL) {
    register_browser_request_ = new ::enterprise_management::RegisterBrowserRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.register_browser_request)
  return register_browser_request_;
}
::enterprise_management::RegisterBrowserRequest* DeviceManagementRequest::release_register_browser_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.register_browser_request)
  clear_has_register_browser_request();
  ::enterprise_management::RegisterBrowserRequest* temp = register_browser_request_;
  register_browser_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_register_browser_request(::enterprise_management::RegisterBrowserRequest* register_browser_request) {
  delete register_browser_request_;
  register_browser_request_ = register_browser_request;
  if (register_browser_request) {
    set_has_register_browser_request();
  } else {
    clear_has_register_browser_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.register_browser_request)
}

// optional .enterprise_management.AppInstallReportRequest app_install_report_request = 25;
bool DeviceManagementRequest::has_app_install_report_request() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DeviceManagementRequest::set_has_app_install_report_request() {
  _has_bits_[0] |= 0x00800000u;
}
void DeviceManagementRequest::clear_has_app_install_report_request() {
  _has_bits_[0] &= ~0x00800000u;
}
void DeviceManagementRequest::clear_app_install_report_request() {
  if (app_install_report_request_ != NULL) app_install_report_request_->::enterprise_management::AppInstallReportRequest::Clear();
  clear_has_app_install_report_request();
}
const ::enterprise_management::AppInstallReportRequest& DeviceManagementRequest::app_install_report_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.app_install_report_request)
  return app_install_report_request_ != NULL ? *app_install_report_request_
                         : *::enterprise_management::AppInstallReportRequest::internal_default_instance();
}
::enterprise_management::AppInstallReportRequest* DeviceManagementRequest::mutable_app_install_report_request() {
  set_has_app_install_report_request();
  if (app_install_report_request_ == NULL) {
    app_install_report_request_ = new ::enterprise_management::AppInstallReportRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.app_install_report_request)
  return app_install_report_request_;
}
::enterprise_management::AppInstallReportRequest* DeviceManagementRequest::release_app_install_report_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.app_install_report_request)
  clear_has_app_install_report_request();
  ::enterprise_management::AppInstallReportRequest* temp = app_install_report_request_;
  app_install_report_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_app_install_report_request(::enterprise_management::AppInstallReportRequest* app_install_report_request) {
  delete app_install_report_request_;
  app_install_report_request_ = app_install_report_request;
  if (app_install_report_request) {
    set_has_app_install_report_request();
  } else {
    clear_has_app_install_report_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.app_install_report_request)
}

// optional .enterprise_management.ChromeDesktopReportRequest chrome_desktop_report_request = 26;
bool DeviceManagementRequest::has_chrome_desktop_report_request() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void DeviceManagementRequest::set_has_chrome_desktop_report_request() {
  _has_bits_[0] |= 0x01000000u;
}
void DeviceManagementRequest::clear_has_chrome_desktop_report_request() {
  _has_bits_[0] &= ~0x01000000u;
}
void DeviceManagementRequest::clear_chrome_desktop_report_request() {
  if (chrome_desktop_report_request_ != NULL) chrome_desktop_report_request_->::enterprise_management::ChromeDesktopReportRequest::Clear();
  clear_has_chrome_desktop_report_request();
}
const ::enterprise_management::ChromeDesktopReportRequest& DeviceManagementRequest::chrome_desktop_report_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.chrome_desktop_report_request)
  return chrome_desktop_report_request_ != NULL ? *chrome_desktop_report_request_
                         : *::enterprise_management::ChromeDesktopReportRequest::internal_default_instance();
}
::enterprise_management::ChromeDesktopReportRequest* DeviceManagementRequest::mutable_chrome_desktop_report_request() {
  set_has_chrome_desktop_report_request();
  if (chrome_desktop_report_request_ == NULL) {
    chrome_desktop_report_request_ = new ::enterprise_management::ChromeDesktopReportRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.chrome_desktop_report_request)
  return chrome_desktop_report_request_;
}
::enterprise_management::ChromeDesktopReportRequest* DeviceManagementRequest::release_chrome_desktop_report_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.chrome_desktop_report_request)
  clear_has_chrome_desktop_report_request();
  ::enterprise_management::ChromeDesktopReportRequest* temp = chrome_desktop_report_request_;
  chrome_desktop_report_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_chrome_desktop_report_request(::enterprise_management::ChromeDesktopReportRequest* chrome_desktop_report_request) {
  delete chrome_desktop_report_request_;
  chrome_desktop_report_request_ = chrome_desktop_report_request;
  if (chrome_desktop_report_request) {
    set_has_chrome_desktop_report_request();
  } else {
    clear_has_chrome_desktop_report_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.chrome_desktop_report_request)
}

// optional .enterprise_management.PolicyValidationReportRequest policy_validation_report_request = 27;
bool DeviceManagementRequest::has_policy_validation_report_request() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void DeviceManagementRequest::set_has_policy_validation_report_request() {
  _has_bits_[0] |= 0x02000000u;
}
void DeviceManagementRequest::clear_has_policy_validation_report_request() {
  _has_bits_[0] &= ~0x02000000u;
}
void DeviceManagementRequest::clear_policy_validation_report_request() {
  if (policy_validation_report_request_ != NULL) policy_validation_report_request_->::enterprise_management::PolicyValidationReportRequest::Clear();
  clear_has_policy_validation_report_request();
}
const ::enterprise_management::PolicyValidationReportRequest& DeviceManagementRequest::policy_validation_report_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.policy_validation_report_request)
  return policy_validation_report_request_ != NULL ? *policy_validation_report_request_
                         : *::enterprise_management::PolicyValidationReportRequest::internal_default_instance();
}
::enterprise_management::PolicyValidationReportRequest* DeviceManagementRequest::mutable_policy_validation_report_request() {
  set_has_policy_validation_report_request();
  if (policy_validation_report_request_ == NULL) {
    policy_validation_report_request_ = new ::enterprise_management::PolicyValidationReportRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.policy_validation_report_request)
  return policy_validation_report_request_;
}
::enterprise_management::PolicyValidationReportRequest* DeviceManagementRequest::release_policy_validation_report_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.policy_validation_report_request)
  clear_has_policy_validation_report_request();
  ::enterprise_management::PolicyValidationReportRequest* temp = policy_validation_report_request_;
  policy_validation_report_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_policy_validation_report_request(::enterprise_management::PolicyValidationReportRequest* policy_validation_report_request) {
  delete policy_validation_report_request_;
  policy_validation_report_request_ = policy_validation_report_request;
  if (policy_validation_report_request) {
    set_has_policy_validation_report_request();
  } else {
    clear_has_policy_validation_report_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.policy_validation_report_request)
}

// optional .enterprise_management.DeviceInitialEnrollmentStateRequest device_initial_enrollment_state_request = 28;
bool DeviceManagementRequest::has_device_initial_enrollment_state_request() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void DeviceManagementRequest::set_has_device_initial_enrollment_state_request() {
  _has_bits_[0] |= 0x04000000u;
}
void DeviceManagementRequest::clear_has_device_initial_enrollment_state_request() {
  _has_bits_[0] &= ~0x04000000u;
}
void DeviceManagementRequest::clear_device_initial_enrollment_state_request() {
  if (device_initial_enrollment_state_request_ != NULL) device_initial_enrollment_state_request_->::enterprise_management::DeviceInitialEnrollmentStateRequest::Clear();
  clear_has_device_initial_enrollment_state_request();
}
const ::enterprise_management::DeviceInitialEnrollmentStateRequest& DeviceManagementRequest::device_initial_enrollment_state_request() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_initial_enrollment_state_request)
  return device_initial_enrollment_state_request_ != NULL ? *device_initial_enrollment_state_request_
                         : *::enterprise_management::DeviceInitialEnrollmentStateRequest::internal_default_instance();
}
::enterprise_management::DeviceInitialEnrollmentStateRequest* DeviceManagementRequest::mutable_device_initial_enrollment_state_request() {
  set_has_device_initial_enrollment_state_request();
  if (device_initial_enrollment_state_request_ == NULL) {
    device_initial_enrollment_state_request_ = new ::enterprise_management::DeviceInitialEnrollmentStateRequest;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_initial_enrollment_state_request)
  return device_initial_enrollment_state_request_;
}
::enterprise_management::DeviceInitialEnrollmentStateRequest* DeviceManagementRequest::release_device_initial_enrollment_state_request() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_initial_enrollment_state_request)
  clear_has_device_initial_enrollment_state_request();
  ::enterprise_management::DeviceInitialEnrollmentStateRequest* temp = device_initial_enrollment_state_request_;
  device_initial_enrollment_state_request_ = NULL;
  return temp;
}
void DeviceManagementRequest::set_allocated_device_initial_enrollment_state_request(::enterprise_management::DeviceInitialEnrollmentStateRequest* device_initial_enrollment_state_request) {
  delete device_initial_enrollment_state_request_;
  device_initial_enrollment_state_request_ = device_initial_enrollment_state_request;
  if (device_initial_enrollment_state_request) {
    set_has_device_initial_enrollment_state_request();
  } else {
    clear_has_device_initial_enrollment_state_request();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_initial_enrollment_state_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceManagementResponse::kErrorFieldNumber;
const int DeviceManagementResponse::kErrorMessageFieldNumber;
const int DeviceManagementResponse::kRegisterResponseFieldNumber;
const int DeviceManagementResponse::kUnregisterResponseFieldNumber;
const int DeviceManagementResponse::kPolicyResponseFieldNumber;
const int DeviceManagementResponse::kDeviceStatusReportResponseFieldNumber;
const int DeviceManagementResponse::kSessionStatusReportResponseFieldNumber;
const int DeviceManagementResponse::kAutoEnrollmentResponseFieldNumber;
const int DeviceManagementResponse::kCertUploadResponseFieldNumber;
const int DeviceManagementResponse::kServiceApiAccessResponseFieldNumber;
const int DeviceManagementResponse::kDeviceStateRetrievalResponseFieldNumber;
const int DeviceManagementResponse::kDevicePairingResponseFieldNumber;
const int DeviceManagementResponse::kCheckDevicePairingResponseFieldNumber;
const int DeviceManagementResponse::kRemoteCommandResponseFieldNumber;
const int DeviceManagementResponse::kDeviceAttributeUpdatePermissionResponseFieldNumber;
const int DeviceManagementResponse::kDeviceAttributeUpdateResponseFieldNumber;
const int DeviceManagementResponse::kGcmIdUpdateResponseFieldNumber;
const int DeviceManagementResponse::kCheckAndroidManagementResponseFieldNumber;
const int DeviceManagementResponse::kActiveDirectoryEnrollPlayUserResponseFieldNumber;
const int DeviceManagementResponse::kActiveDirectoryPlayActivityResponseFieldNumber;
const int DeviceManagementResponse::kCheckDeviceLicenseResponseFieldNumber;
const int DeviceManagementResponse::kActiveDirectoryUserSigninResponseFieldNumber;
const int DeviceManagementResponse::kChromeDesktopReportResponseFieldNumber;
const int DeviceManagementResponse::kAppInstallReportResponseFieldNumber;
const int DeviceManagementResponse::kPolicyValidationReportResponseFieldNumber;
const int DeviceManagementResponse::kDeviceInitialEnrollmentStateResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceManagementResponse::DeviceManagementResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.DeviceManagementResponse)
}
DeviceManagementResponse::DeviceManagementResponse(const DeviceManagementResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_register_response()) {
    register_response_ = new ::enterprise_management::DeviceRegisterResponse(*from.register_response_);
  } else {
    register_response_ = NULL;
  }
  if (from.has_unregister_response()) {
    unregister_response_ = new ::enterprise_management::DeviceUnregisterResponse(*from.unregister_response_);
  } else {
    unregister_response_ = NULL;
  }
  if (from.has_policy_response()) {
    policy_response_ = new ::enterprise_management::DevicePolicyResponse(*from.policy_response_);
  } else {
    policy_response_ = NULL;
  }
  if (from.has_device_status_report_response()) {
    device_status_report_response_ = new ::enterprise_management::DeviceStatusReportResponse(*from.device_status_report_response_);
  } else {
    device_status_report_response_ = NULL;
  }
  if (from.has_session_status_report_response()) {
    session_status_report_response_ = new ::enterprise_management::SessionStatusReportResponse(*from.session_status_report_response_);
  } else {
    session_status_report_response_ = NULL;
  }
  if (from.has_auto_enrollment_response()) {
    auto_enrollment_response_ = new ::enterprise_management::DeviceAutoEnrollmentResponse(*from.auto_enrollment_response_);
  } else {
    auto_enrollment_response_ = NULL;
  }
  if (from.has_cert_upload_response()) {
    cert_upload_response_ = new ::enterprise_management::DeviceCertUploadResponse(*from.cert_upload_response_);
  } else {
    cert_upload_response_ = NULL;
  }
  if (from.has_service_api_access_response()) {
    service_api_access_response_ = new ::enterprise_management::DeviceServiceApiAccessResponse(*from.service_api_access_response_);
  } else {
    service_api_access_response_ = NULL;
  }
  if (from.has_device_state_retrieval_response()) {
    device_state_retrieval_response_ = new ::enterprise_management::DeviceStateRetrievalResponse(*from.device_state_retrieval_response_);
  } else {
    device_state_retrieval_response_ = NULL;
  }
  if (from.has_device_pairing_response()) {
    device_pairing_response_ = new ::enterprise_management::DevicePairingResponse(*from.device_pairing_response_);
  } else {
    device_pairing_response_ = NULL;
  }
  if (from.has_check_device_pairing_response()) {
    check_device_pairing_response_ = new ::enterprise_management::CheckDevicePairingResponse(*from.check_device_pairing_response_);
  } else {
    check_device_pairing_response_ = NULL;
  }
  if (from.has_remote_command_response()) {
    remote_command_response_ = new ::enterprise_management::DeviceRemoteCommandResponse(*from.remote_command_response_);
  } else {
    remote_command_response_ = NULL;
  }
  if (from.has_device_attribute_update_permission_response()) {
    device_attribute_update_permission_response_ = new ::enterprise_management::DeviceAttributeUpdatePermissionResponse(*from.device_attribute_update_permission_response_);
  } else {
    device_attribute_update_permission_response_ = NULL;
  }
  if (from.has_device_attribute_update_response()) {
    device_attribute_update_response_ = new ::enterprise_management::DeviceAttributeUpdateResponse(*from.device_attribute_update_response_);
  } else {
    device_attribute_update_response_ = NULL;
  }
  if (from.has_gcm_id_update_response()) {
    gcm_id_update_response_ = new ::enterprise_management::GcmIdUpdateResponse(*from.gcm_id_update_response_);
  } else {
    gcm_id_update_response_ = NULL;
  }
  if (from.has_check_android_management_response()) {
    check_android_management_response_ = new ::enterprise_management::CheckAndroidManagementResponse(*from.check_android_management_response_);
  } else {
    check_android_management_response_ = NULL;
  }
  if (from.has_active_directory_enroll_play_user_response()) {
    active_directory_enroll_play_user_response_ = new ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse(*from.active_directory_enroll_play_user_response_);
  } else {
    active_directory_enroll_play_user_response_ = NULL;
  }
  if (from.has_active_directory_play_activity_response()) {
    active_directory_play_activity_response_ = new ::enterprise_management::ActiveDirectoryPlayActivityResponse(*from.active_directory_play_activity_response_);
  } else {
    active_directory_play_activity_response_ = NULL;
  }
  if (from.has_check_device_license_response()) {
    check_device_license_response_ = new ::enterprise_management::CheckDeviceLicenseResponse(*from.check_device_license_response_);
  } else {
    check_device_license_response_ = NULL;
  }
  if (from.has_active_directory_user_signin_response()) {
    active_directory_user_signin_response_ = new ::enterprise_management::ActiveDirectoryUserSigninResponse(*from.active_directory_user_signin_response_);
  } else {
    active_directory_user_signin_response_ = NULL;
  }
  if (from.has_chrome_desktop_report_response()) {
    chrome_desktop_report_response_ = new ::enterprise_management::ChromeDesktopReportResponse(*from.chrome_desktop_report_response_);
  } else {
    chrome_desktop_report_response_ = NULL;
  }
  if (from.has_app_install_report_response()) {
    app_install_report_response_ = new ::enterprise_management::AppInstallReportResponse(*from.app_install_report_response_);
  } else {
    app_install_report_response_ = NULL;
  }
  if (from.has_policy_validation_report_response()) {
    policy_validation_report_response_ = new ::enterprise_management::PolicyValidationReportResponse(*from.policy_validation_report_response_);
  } else {
    policy_validation_report_response_ = NULL;
  }
  if (from.has_device_initial_enrollment_state_response()) {
    device_initial_enrollment_state_response_ = new ::enterprise_management::DeviceInitialEnrollmentStateResponse(*from.device_initial_enrollment_state_response_);
  } else {
    device_initial_enrollment_state_response_ = NULL;
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceManagementResponse)
}

void DeviceManagementResponse::SharedCtor() {
  _cached_size_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&register_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&register_response_)) + sizeof(error_));
}

DeviceManagementResponse::~DeviceManagementResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceManagementResponse)
  SharedDtor();
}

void DeviceManagementResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete register_response_;
  }
  if (this != internal_default_instance()) {
    delete unregister_response_;
  }
  if (this != internal_default_instance()) {
    delete policy_response_;
  }
  if (this != internal_default_instance()) {
    delete device_status_report_response_;
  }
  if (this != internal_default_instance()) {
    delete session_status_report_response_;
  }
  if (this != internal_default_instance()) {
    delete auto_enrollment_response_;
  }
  if (this != internal_default_instance()) {
    delete cert_upload_response_;
  }
  if (this != internal_default_instance()) {
    delete service_api_access_response_;
  }
  if (this != internal_default_instance()) {
    delete device_state_retrieval_response_;
  }
  if (this != internal_default_instance()) {
    delete device_pairing_response_;
  }
  if (this != internal_default_instance()) {
    delete check_device_pairing_response_;
  }
  if (this != internal_default_instance()) {
    delete remote_command_response_;
  }
  if (this != internal_default_instance()) {
    delete device_attribute_update_permission_response_;
  }
  if (this != internal_default_instance()) {
    delete device_attribute_update_response_;
  }
  if (this != internal_default_instance()) {
    delete gcm_id_update_response_;
  }
  if (this != internal_default_instance()) {
    delete check_android_management_response_;
  }
  if (this != internal_default_instance()) {
    delete active_directory_enroll_play_user_response_;
  }
  if (this != internal_default_instance()) {
    delete active_directory_play_activity_response_;
  }
  if (this != internal_default_instance()) {
    delete check_device_license_response_;
  }
  if (this != internal_default_instance()) {
    delete active_directory_user_signin_response_;
  }
  if (this != internal_default_instance()) {
    delete chrome_desktop_report_response_;
  }
  if (this != internal_default_instance()) {
    delete app_install_report_response_;
  }
  if (this != internal_default_instance()) {
    delete policy_validation_report_response_;
  }
  if (this != internal_default_instance()) {
    delete device_initial_enrollment_state_response_;
  }
}

void DeviceManagementResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceManagementResponse& DeviceManagementResponse::default_instance() {
  protobuf_device_5fmanagement_5fbackend_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceManagementResponse* DeviceManagementResponse::New(::google::protobuf::Arena* arena) const {
  DeviceManagementResponse* n = new DeviceManagementResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceManagementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceManagementResponse)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_error_message()) {
      GOOGLE_DCHECK(!error_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_message_.UnsafeRawStringPointer())->clear();
    }
    if (has_register_response()) {
      GOOGLE_DCHECK(register_response_ != NULL);
      register_response_->::enterprise_management::DeviceRegisterResponse::Clear();
    }
    if (has_unregister_response()) {
      GOOGLE_DCHECK(unregister_response_ != NULL);
      unregister_response_->::enterprise_management::DeviceUnregisterResponse::Clear();
    }
    if (has_policy_response()) {
      GOOGLE_DCHECK(policy_response_ != NULL);
      policy_response_->::enterprise_management::DevicePolicyResponse::Clear();
    }
    if (has_device_status_report_response()) {
      GOOGLE_DCHECK(device_status_report_response_ != NULL);
      device_status_report_response_->::enterprise_management::DeviceStatusReportResponse::Clear();
    }
    if (has_session_status_report_response()) {
      GOOGLE_DCHECK(session_status_report_response_ != NULL);
      session_status_report_response_->::enterprise_management::SessionStatusReportResponse::Clear();
    }
    if (has_auto_enrollment_response()) {
      GOOGLE_DCHECK(auto_enrollment_response_ != NULL);
      auto_enrollment_response_->::enterprise_management::DeviceAutoEnrollmentResponse::Clear();
    }
    if (has_cert_upload_response()) {
      GOOGLE_DCHECK(cert_upload_response_ != NULL);
      cert_upload_response_->::enterprise_management::DeviceCertUploadResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_service_api_access_response()) {
      GOOGLE_DCHECK(service_api_access_response_ != NULL);
      service_api_access_response_->::enterprise_management::DeviceServiceApiAccessResponse::Clear();
    }
    if (has_device_state_retrieval_response()) {
      GOOGLE_DCHECK(device_state_retrieval_response_ != NULL);
      device_state_retrieval_response_->::enterprise_management::DeviceStateRetrievalResponse::Clear();
    }
    if (has_device_pairing_response()) {
      GOOGLE_DCHECK(device_pairing_response_ != NULL);
      device_pairing_response_->::enterprise_management::DevicePairingResponse::Clear();
    }
    if (has_check_device_pairing_response()) {
      GOOGLE_DCHECK(check_device_pairing_response_ != NULL);
      check_device_pairing_response_->::enterprise_management::CheckDevicePairingResponse::Clear();
    }
    if (has_remote_command_response()) {
      GOOGLE_DCHECK(remote_command_response_ != NULL);
      remote_command_response_->::enterprise_management::DeviceRemoteCommandResponse::Clear();
    }
    if (has_device_attribute_update_permission_response()) {
      GOOGLE_DCHECK(device_attribute_update_permission_response_ != NULL);
      device_attribute_update_permission_response_->::enterprise_management::DeviceAttributeUpdatePermissionResponse::Clear();
    }
    if (has_device_attribute_update_response()) {
      GOOGLE_DCHECK(device_attribute_update_response_ != NULL);
      device_attribute_update_response_->::enterprise_management::DeviceAttributeUpdateResponse::Clear();
    }
    if (has_gcm_id_update_response()) {
      GOOGLE_DCHECK(gcm_id_update_response_ != NULL);
      gcm_id_update_response_->::enterprise_management::GcmIdUpdateResponse::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_check_android_management_response()) {
      GOOGLE_DCHECK(check_android_management_response_ != NULL);
      check_android_management_response_->::enterprise_management::CheckAndroidManagementResponse::Clear();
    }
    if (has_active_directory_enroll_play_user_response()) {
      GOOGLE_DCHECK(active_directory_enroll_play_user_response_ != NULL);
      active_directory_enroll_play_user_response_->::enterprise_management::ActiveDirectoryEnrollPlayUserResponse::Clear();
    }
    if (has_active_directory_play_activity_response()) {
      GOOGLE_DCHECK(active_directory_play_activity_response_ != NULL);
      active_directory_play_activity_response_->::enterprise_management::ActiveDirectoryPlayActivityResponse::Clear();
    }
    if (has_check_device_license_response()) {
      GOOGLE_DCHECK(check_device_license_response_ != NULL);
      check_device_license_response_->::enterprise_management::CheckDeviceLicenseResponse::Clear();
    }
    if (has_active_directory_user_signin_response()) {
      GOOGLE_DCHECK(active_directory_user_signin_response_ != NULL);
      active_directory_user_signin_response_->::enterprise_management::ActiveDirectoryUserSigninResponse::Clear();
    }
    if (has_chrome_desktop_report_response()) {
      GOOGLE_DCHECK(chrome_desktop_report_response_ != NULL);
      chrome_desktop_report_response_->::enterprise_management::ChromeDesktopReportResponse::Clear();
    }
    if (has_app_install_report_response()) {
      GOOGLE_DCHECK(app_install_report_response_ != NULL);
      app_install_report_response_->::enterprise_management::AppInstallReportResponse::Clear();
    }
    if (has_policy_validation_report_response()) {
      GOOGLE_DCHECK(policy_validation_report_response_ != NULL);
      policy_validation_report_response_->::enterprise_management::PolicyValidationReportResponse::Clear();
    }
  }
  if (has_device_initial_enrollment_state_response()) {
    GOOGLE_DCHECK(device_initial_enrollment_state_response_ != NULL);
    device_initial_enrollment_state_response_->::enterprise_management::DeviceInitialEnrollmentStateResponse::Clear();
  }
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceManagementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.DeviceManagementResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.DeviceManagementResponse.ErrorCode error = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_management::DeviceManagementResponse_ErrorCode_IsValid(value)) {
            set_error(static_cast< ::enterprise_management::DeviceManagementResponse_ErrorCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRegisterResponse register_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unregister_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DevicePolicyResponse policy_response = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policy_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_status_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_status_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_enrollment_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert_upload_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_api_access_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_state_retrieval_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_pairing_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_device_pairing_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_command_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_attribute_update_permission_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_attribute_update_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gcm_id_update_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_android_management_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryEnrollPlayUserResponse active_directory_enroll_play_user_response = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_directory_enroll_play_user_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryPlayActivityResponse active_directory_play_activity_response = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_directory_play_activity_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.CheckDeviceLicenseResponse check_device_license_response = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_device_license_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ActiveDirectoryUserSigninResponse active_directory_user_signin_response = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_directory_user_signin_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.ChromeDesktopReportResponse chrome_desktop_report_response = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chrome_desktop_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.AppInstallReportResponse app_install_report_response = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_install_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.PolicyValidationReportResponse policy_validation_report_response = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policy_validation_report_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.DeviceInitialEnrollmentStateResponse device_initial_enrollment_state_response = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_initial_enrollment_state_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.DeviceManagementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceManagementResponse)
  return false;
#undef DO_
}

void DeviceManagementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceManagementResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceManagementResponse.ErrorCode error = 1 [default = SUCCESS];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // optional .enterprise_management.DeviceRegisterResponse register_response = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->register_response_, output);
  }

  // optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->unregister_response_, output);
  }

  // optional .enterprise_management.DevicePolicyResponse policy_response = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->policy_response_, output);
  }

  // optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->device_status_report_response_, output);
  }

  // optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->session_status_report_response_, output);
  }

  // optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->auto_enrollment_response_, output);
  }

  // optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->cert_upload_response_, output);
  }

  // optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->service_api_access_response_, output);
  }

  // optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->device_state_retrieval_response_, output);
  }

  // optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->device_pairing_response_, output);
  }

  // optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->check_device_pairing_response_, output);
  }

  // optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->remote_command_response_, output);
  }

  // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->device_attribute_update_permission_response_, output);
  }

  // optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->device_attribute_update_response_, output);
  }

  // optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->gcm_id_update_response_, output);
  }

  // optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, *this->check_android_management_response_, output);
  }

  // optional .enterprise_management.ActiveDirectoryEnrollPlayUserResponse active_directory_enroll_play_user_response = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, *this->active_directory_enroll_play_user_response_, output);
  }

  // optional .enterprise_management.ActiveDirectoryPlayActivityResponse active_directory_play_activity_response = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, *this->active_directory_play_activity_response_, output);
  }

  // optional .enterprise_management.CheckDeviceLicenseResponse check_device_license_response = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, *this->check_device_license_response_, output);
  }

  // optional .enterprise_management.ActiveDirectoryUserSigninResponse active_directory_user_signin_response = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, *this->active_directory_user_signin_response_, output);
  }

  // optional .enterprise_management.ChromeDesktopReportResponse chrome_desktop_report_response = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, *this->chrome_desktop_report_response_, output);
  }

  // optional .enterprise_management.AppInstallReportResponse app_install_report_response = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, *this->app_install_report_response_, output);
  }

  // optional .enterprise_management.PolicyValidationReportResponse policy_validation_report_response = 26;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, *this->policy_validation_report_response_, output);
  }

  // optional .enterprise_management.DeviceInitialEnrollmentStateResponse device_initial_enrollment_state_response = 27;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, *this->device_initial_enrollment_state_response_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceManagementResponse)
}

size_t DeviceManagementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceManagementResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional .enterprise_management.DeviceRegisterResponse register_response = 3;
    if (has_register_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->register_response_);
    }

    // optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
    if (has_unregister_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unregister_response_);
    }

    // optional .enterprise_management.DevicePolicyResponse policy_response = 5;
    if (has_policy_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->policy_response_);
    }

    // optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
    if (has_device_status_report_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_status_report_response_);
    }

    // optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
    if (has_session_status_report_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->session_status_report_response_);
    }

    // optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
    if (has_auto_enrollment_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->auto_enrollment_response_);
    }

    // optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
    if (has_cert_upload_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cert_upload_response_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
    if (has_service_api_access_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->service_api_access_response_);
    }

    // optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
    if (has_device_state_retrieval_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_state_retrieval_response_);
    }

    // optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
    if (has_device_pairing_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_pairing_response_);
    }

    // optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
    if (has_check_device_pairing_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->check_device_pairing_response_);
    }

    // optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
    if (has_remote_command_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->remote_command_response_);
    }

    // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
    if (has_device_attribute_update_permission_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_attribute_update_permission_response_);
    }

    // optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
    if (has_device_attribute_update_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_attribute_update_response_);
    }

    // optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
    if (has_gcm_id_update_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gcm_id_update_response_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
    if (has_check_android_management_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->check_android_management_response_);
    }

    // optional .enterprise_management.ActiveDirectoryEnrollPlayUserResponse active_directory_enroll_play_user_response = 19;
    if (has_active_directory_enroll_play_user_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->active_directory_enroll_play_user_response_);
    }

    // optional .enterprise_management.ActiveDirectoryPlayActivityResponse active_directory_play_activity_response = 20;
    if (has_active_directory_play_activity_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->active_directory_play_activity_response_);
    }

    // optional .enterprise_management.CheckDeviceLicenseResponse check_device_license_response = 21;
    if (has_check_device_license_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->check_device_license_response_);
    }

    // optional .enterprise_management.ActiveDirectoryUserSigninResponse active_directory_user_signin_response = 22;
    if (has_active_directory_user_signin_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->active_directory_user_signin_response_);
    }

    // optional .enterprise_management.ChromeDesktopReportResponse chrome_desktop_report_response = 23;
    if (has_chrome_desktop_report_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chrome_desktop_report_response_);
    }

    // optional .enterprise_management.AppInstallReportResponse app_install_report_response = 25;
    if (has_app_install_report_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->app_install_report_response_);
    }

    // optional .enterprise_management.PolicyValidationReportResponse policy_validation_report_response = 26;
    if (has_policy_validation_report_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->policy_validation_report_response_);
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional .enterprise_management.DeviceInitialEnrollmentStateResponse device_initial_enrollment_state_response = 27;
    if (has_device_initial_enrollment_state_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_initial_enrollment_state_response_);
    }

    // optional .enterprise_management.DeviceManagementResponse.ErrorCode error = 1 [default = SUCCESS];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceManagementResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceManagementResponse*>(&from));
}

void DeviceManagementResponse::MergeFrom(const DeviceManagementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceManagementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_register_response()->::enterprise_management::DeviceRegisterResponse::MergeFrom(from.register_response());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_unregister_response()->::enterprise_management::DeviceUnregisterResponse::MergeFrom(from.unregister_response());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_policy_response()->::enterprise_management::DevicePolicyResponse::MergeFrom(from.policy_response());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_device_status_report_response()->::enterprise_management::DeviceStatusReportResponse::MergeFrom(from.device_status_report_response());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_session_status_report_response()->::enterprise_management::SessionStatusReportResponse::MergeFrom(from.session_status_report_response());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_auto_enrollment_response()->::enterprise_management::DeviceAutoEnrollmentResponse::MergeFrom(from.auto_enrollment_response());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_cert_upload_response()->::enterprise_management::DeviceCertUploadResponse::MergeFrom(from.cert_upload_response());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_service_api_access_response()->::enterprise_management::DeviceServiceApiAccessResponse::MergeFrom(from.service_api_access_response());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_device_state_retrieval_response()->::enterprise_management::DeviceStateRetrievalResponse::MergeFrom(from.device_state_retrieval_response());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_device_pairing_response()->::enterprise_management::DevicePairingResponse::MergeFrom(from.device_pairing_response());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_check_device_pairing_response()->::enterprise_management::CheckDevicePairingResponse::MergeFrom(from.check_device_pairing_response());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_remote_command_response()->::enterprise_management::DeviceRemoteCommandResponse::MergeFrom(from.remote_command_response());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_device_attribute_update_permission_response()->::enterprise_management::DeviceAttributeUpdatePermissionResponse::MergeFrom(from.device_attribute_update_permission_response());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_device_attribute_update_response()->::enterprise_management::DeviceAttributeUpdateResponse::MergeFrom(from.device_attribute_update_response());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_gcm_id_update_response()->::enterprise_management::GcmIdUpdateResponse::MergeFrom(from.gcm_id_update_response());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_check_android_management_response()->::enterprise_management::CheckAndroidManagementResponse::MergeFrom(from.check_android_management_response());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_active_directory_enroll_play_user_response()->::enterprise_management::ActiveDirectoryEnrollPlayUserResponse::MergeFrom(from.active_directory_enroll_play_user_response());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_active_directory_play_activity_response()->::enterprise_management::ActiveDirectoryPlayActivityResponse::MergeFrom(from.active_directory_play_activity_response());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_check_device_license_response()->::enterprise_management::CheckDeviceLicenseResponse::MergeFrom(from.check_device_license_response());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_active_directory_user_signin_response()->::enterprise_management::ActiveDirectoryUserSigninResponse::MergeFrom(from.active_directory_user_signin_response());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_chrome_desktop_report_response()->::enterprise_management::ChromeDesktopReportResponse::MergeFrom(from.chrome_desktop_report_response());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_app_install_report_response()->::enterprise_management::AppInstallReportResponse::MergeFrom(from.app_install_report_response());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_policy_validation_report_response()->::enterprise_management::PolicyValidationReportResponse::MergeFrom(from.policy_validation_report_response());
    }
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_device_initial_enrollment_state_response()->::enterprise_management::DeviceInitialEnrollmentStateResponse::MergeFrom(from.device_initial_enrollment_state_response());
    }
    if (cached_has_bits & 0x02000000u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceManagementResponse::CopyFrom(const DeviceManagementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceManagementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceManagementResponse::IsInitialized() const {
  if (has_register_response()) {
    if (!this->register_response_->IsInitialized()) return false;
  }
  return true;
}

void DeviceManagementResponse::Swap(DeviceManagementResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceManagementResponse::InternalSwap(DeviceManagementResponse* other) {
  error_message_.Swap(&other->error_message_);
  std::swap(register_response_, other->register_response_);
  std::swap(unregister_response_, other->unregister_response_);
  std::swap(policy_response_, other->policy_response_);
  std::swap(device_status_report_response_, other->device_status_report_response_);
  std::swap(session_status_report_response_, other->session_status_report_response_);
  std::swap(auto_enrollment_response_, other->auto_enrollment_response_);
  std::swap(cert_upload_response_, other->cert_upload_response_);
  std::swap(service_api_access_response_, other->service_api_access_response_);
  std::swap(device_state_retrieval_response_, other->device_state_retrieval_response_);
  std::swap(device_pairing_response_, other->device_pairing_response_);
  std::swap(check_device_pairing_response_, other->check_device_pairing_response_);
  std::swap(remote_command_response_, other->remote_command_response_);
  std::swap(device_attribute_update_permission_response_, other->device_attribute_update_permission_response_);
  std::swap(device_attribute_update_response_, other->device_attribute_update_response_);
  std::swap(gcm_id_update_response_, other->gcm_id_update_response_);
  std::swap(check_android_management_response_, other->check_android_management_response_);
  std::swap(active_directory_enroll_play_user_response_, other->active_directory_enroll_play_user_response_);
  std::swap(active_directory_play_activity_response_, other->active_directory_play_activity_response_);
  std::swap(check_device_license_response_, other->check_device_license_response_);
  std::swap(active_directory_user_signin_response_, other->active_directory_user_signin_response_);
  std::swap(chrome_desktop_report_response_, other->chrome_desktop_report_response_);
  std::swap(app_install_report_response_, other->app_install_report_response_);
  std::swap(policy_validation_report_response_, other->policy_validation_report_response_);
  std::swap(device_initial_enrollment_state_response_, other->device_initial_enrollment_state_response_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceManagementResponse::GetTypeName() const {
  return "enterprise_management.DeviceManagementResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceManagementResponse

// optional .enterprise_management.DeviceManagementResponse.ErrorCode error = 1 [default = SUCCESS];
bool DeviceManagementResponse::has_error() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void DeviceManagementResponse::set_has_error() {
  _has_bits_[0] |= 0x02000000u;
}
void DeviceManagementResponse::clear_has_error() {
  _has_bits_[0] &= ~0x02000000u;
}
void DeviceManagementResponse::clear_error() {
  error_ = 0;
  clear_has_error();
}
::enterprise_management::DeviceManagementResponse_ErrorCode DeviceManagementResponse::error() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.error)
  return static_cast< ::enterprise_management::DeviceManagementResponse_ErrorCode >(error_);
}
void DeviceManagementResponse::set_error(::enterprise_management::DeviceManagementResponse_ErrorCode value) {
  assert(::enterprise_management::DeviceManagementResponse_ErrorCode_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceManagementResponse.error)
}

// optional string error_message = 2;
bool DeviceManagementResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceManagementResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceManagementResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceManagementResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& DeviceManagementResponse::error_message() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.error_message)
  return error_message_.GetNoArena();
}
void DeviceManagementResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceManagementResponse.error_message)
}
#if LANG_CXX11
void DeviceManagementResponse::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceManagementResponse.error_message)
}
#endif
void DeviceManagementResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceManagementResponse.error_message)
}
void DeviceManagementResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceManagementResponse.error_message)
}
::std::string* DeviceManagementResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceManagementResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceManagementResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.error_message)
}

// optional .enterprise_management.DeviceRegisterResponse register_response = 3;
bool DeviceManagementResponse::has_register_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceManagementResponse::set_has_register_response() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceManagementResponse::clear_has_register_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceManagementResponse::clear_register_response() {
  if (register_response_ != NULL) register_response_->::enterprise_management::DeviceRegisterResponse::Clear();
  clear_has_register_response();
}
const ::enterprise_management::DeviceRegisterResponse& DeviceManagementResponse::register_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.register_response)
  return register_response_ != NULL ? *register_response_
                         : *::enterprise_management::DeviceRegisterResponse::internal_default_instance();
}
::enterprise_management::DeviceRegisterResponse* DeviceManagementResponse::mutable_register_response() {
  set_has_register_response();
  if (register_response_ == NULL) {
    register_response_ = new ::enterprise_management::DeviceRegisterResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.register_response)
  return register_response_;
}
::enterprise_management::DeviceRegisterResponse* DeviceManagementResponse::release_register_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.register_response)
  clear_has_register_response();
  ::enterprise_management::DeviceRegisterResponse* temp = register_response_;
  register_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_register_response(::enterprise_management::DeviceRegisterResponse* register_response) {
  delete register_response_;
  register_response_ = register_response;
  if (register_response) {
    set_has_register_response();
  } else {
    clear_has_register_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.register_response)
}

// optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
bool DeviceManagementResponse::has_unregister_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceManagementResponse::set_has_unregister_response() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceManagementResponse::clear_has_unregister_response() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceManagementResponse::clear_unregister_response() {
  if (unregister_response_ != NULL) unregister_response_->::enterprise_management::DeviceUnregisterResponse::Clear();
  clear_has_unregister_response();
}
const ::enterprise_management::DeviceUnregisterResponse& DeviceManagementResponse::unregister_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.unregister_response)
  return unregister_response_ != NULL ? *unregister_response_
                         : *::enterprise_management::DeviceUnregisterResponse::internal_default_instance();
}
::enterprise_management::DeviceUnregisterResponse* DeviceManagementResponse::mutable_unregister_response() {
  set_has_unregister_response();
  if (unregister_response_ == NULL) {
    unregister_response_ = new ::enterprise_management::DeviceUnregisterResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.unregister_response)
  return unregister_response_;
}
::enterprise_management::DeviceUnregisterResponse* DeviceManagementResponse::release_unregister_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.unregister_response)
  clear_has_unregister_response();
  ::enterprise_management::DeviceUnregisterResponse* temp = unregister_response_;
  unregister_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_unregister_response(::enterprise_management::DeviceUnregisterResponse* unregister_response) {
  delete unregister_response_;
  unregister_response_ = unregister_response;
  if (unregister_response) {
    set_has_unregister_response();
  } else {
    clear_has_unregister_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.unregister_response)
}

// optional .enterprise_management.DevicePolicyResponse policy_response = 5;
bool DeviceManagementResponse::has_policy_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceManagementResponse::set_has_policy_response() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceManagementResponse::clear_has_policy_response() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceManagementResponse::clear_policy_response() {
  if (policy_response_ != NULL) policy_response_->::enterprise_management::DevicePolicyResponse::Clear();
  clear_has_policy_response();
}
const ::enterprise_management::DevicePolicyResponse& DeviceManagementResponse::policy_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.policy_response)
  return policy_response_ != NULL ? *policy_response_
                         : *::enterprise_management::DevicePolicyResponse::internal_default_instance();
}
::enterprise_management::DevicePolicyResponse* DeviceManagementResponse::mutable_policy_response() {
  set_has_policy_response();
  if (policy_response_ == NULL) {
    policy_response_ = new ::enterprise_management::DevicePolicyResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.policy_response)
  return policy_response_;
}
::enterprise_management::DevicePolicyResponse* DeviceManagementResponse::release_policy_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.policy_response)
  clear_has_policy_response();
  ::enterprise_management::DevicePolicyResponse* temp = policy_response_;
  policy_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_policy_response(::enterprise_management::DevicePolicyResponse* policy_response) {
  delete policy_response_;
  policy_response_ = policy_response;
  if (policy_response) {
    set_has_policy_response();
  } else {
    clear_has_policy_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.policy_response)
}

// optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
bool DeviceManagementResponse::has_device_status_report_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceManagementResponse::set_has_device_status_report_response() {
  _has_bits_[0] |= 0x00000010u;
}
void DeviceManagementResponse::clear_has_device_status_report_response() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeviceManagementResponse::clear_device_status_report_response() {
  if (device_status_report_response_ != NULL) device_status_report_response_->::enterprise_management::DeviceStatusReportResponse::Clear();
  clear_has_device_status_report_response();
}
const ::enterprise_management::DeviceStatusReportResponse& DeviceManagementResponse::device_status_report_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_status_report_response)
  return device_status_report_response_ != NULL ? *device_status_report_response_
                         : *::enterprise_management::DeviceStatusReportResponse::internal_default_instance();
}
::enterprise_management::DeviceStatusReportResponse* DeviceManagementResponse::mutable_device_status_report_response() {
  set_has_device_status_report_response();
  if (device_status_report_response_ == NULL) {
    device_status_report_response_ = new ::enterprise_management::DeviceStatusReportResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_status_report_response)
  return device_status_report_response_;
}
::enterprise_management::DeviceStatusReportResponse* DeviceManagementResponse::release_device_status_report_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_status_report_response)
  clear_has_device_status_report_response();
  ::enterprise_management::DeviceStatusReportResponse* temp = device_status_report_response_;
  device_status_report_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_device_status_report_response(::enterprise_management::DeviceStatusReportResponse* device_status_report_response) {
  delete device_status_report_response_;
  device_status_report_response_ = device_status_report_response;
  if (device_status_report_response) {
    set_has_device_status_report_response();
  } else {
    clear_has_device_status_report_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_status_report_response)
}

// optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
bool DeviceManagementResponse::has_session_status_report_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceManagementResponse::set_has_session_status_report_response() {
  _has_bits_[0] |= 0x00000020u;
}
void DeviceManagementResponse::clear_has_session_status_report_response() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeviceManagementResponse::clear_session_status_report_response() {
  if (session_status_report_response_ != NULL) session_status_report_response_->::enterprise_management::SessionStatusReportResponse::Clear();
  clear_has_session_status_report_response();
}
const ::enterprise_management::SessionStatusReportResponse& DeviceManagementResponse::session_status_report_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.session_status_report_response)
  return session_status_report_response_ != NULL ? *session_status_report_response_
                         : *::enterprise_management::SessionStatusReportResponse::internal_default_instance();
}
::enterprise_management::SessionStatusReportResponse* DeviceManagementResponse::mutable_session_status_report_response() {
  set_has_session_status_report_response();
  if (session_status_report_response_ == NULL) {
    session_status_report_response_ = new ::enterprise_management::SessionStatusReportResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.session_status_report_response)
  return session_status_report_response_;
}
::enterprise_management::SessionStatusReportResponse* DeviceManagementResponse::release_session_status_report_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.session_status_report_response)
  clear_has_session_status_report_response();
  ::enterprise_management::SessionStatusReportResponse* temp = session_status_report_response_;
  session_status_report_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_session_status_report_response(::enterprise_management::SessionStatusReportResponse* session_status_report_response) {
  delete session_status_report_response_;
  session_status_report_response_ = session_status_report_response;
  if (session_status_report_response) {
    set_has_session_status_report_response();
  } else {
    clear_has_session_status_report_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.session_status_report_response)
}

// optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
bool DeviceManagementResponse::has_auto_enrollment_response() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceManagementResponse::set_has_auto_enrollment_response() {
  _has_bits_[0] |= 0x00000040u;
}
void DeviceManagementResponse::clear_has_auto_enrollment_response() {
  _has_bits_[0] &= ~0x00000040u;
}
void DeviceManagementResponse::clear_auto_enrollment_response() {
  if (auto_enrollment_response_ != NULL) auto_enrollment_response_->::enterprise_management::DeviceAutoEnrollmentResponse::Clear();
  clear_has_auto_enrollment_response();
}
const ::enterprise_management::DeviceAutoEnrollmentResponse& DeviceManagementResponse::auto_enrollment_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
  return auto_enrollment_response_ != NULL ? *auto_enrollment_response_
                         : *::enterprise_management::DeviceAutoEnrollmentResponse::internal_default_instance();
}
::enterprise_management::DeviceAutoEnrollmentResponse* DeviceManagementResponse::mutable_auto_enrollment_response() {
  set_has_auto_enrollment_response();
  if (auto_enrollment_response_ == NULL) {
    auto_enrollment_response_ = new ::enterprise_management::DeviceAutoEnrollmentResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
  return auto_enrollment_response_;
}
::enterprise_management::DeviceAutoEnrollmentResponse* DeviceManagementResponse::release_auto_enrollment_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
  clear_has_auto_enrollment_response();
  ::enterprise_management::DeviceAutoEnrollmentResponse* temp = auto_enrollment_response_;
  auto_enrollment_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_auto_enrollment_response(::enterprise_management::DeviceAutoEnrollmentResponse* auto_enrollment_response) {
  delete auto_enrollment_response_;
  auto_enrollment_response_ = auto_enrollment_response;
  if (auto_enrollment_response) {
    set_has_auto_enrollment_response();
  } else {
    clear_has_auto_enrollment_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
}

// optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
bool DeviceManagementResponse::has_cert_upload_response() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceManagementResponse::set_has_cert_upload_response() {
  _has_bits_[0] |= 0x00000080u;
}
void DeviceManagementResponse::clear_has_cert_upload_response() {
  _has_bits_[0] &= ~0x00000080u;
}
void DeviceManagementResponse::clear_cert_upload_response() {
  if (cert_upload_response_ != NULL) cert_upload_response_->::enterprise_management::DeviceCertUploadResponse::Clear();
  clear_has_cert_upload_response();
}
const ::enterprise_management::DeviceCertUploadResponse& DeviceManagementResponse::cert_upload_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.cert_upload_response)
  return cert_upload_response_ != NULL ? *cert_upload_response_
                         : *::enterprise_management::DeviceCertUploadResponse::internal_default_instance();
}
::enterprise_management::DeviceCertUploadResponse* DeviceManagementResponse::mutable_cert_upload_response() {
  set_has_cert_upload_response();
  if (cert_upload_response_ == NULL) {
    cert_upload_response_ = new ::enterprise_management::DeviceCertUploadResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.cert_upload_response)
  return cert_upload_response_;
}
::enterprise_management::DeviceCertUploadResponse* DeviceManagementResponse::release_cert_upload_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.cert_upload_response)
  clear_has_cert_upload_response();
  ::enterprise_management::DeviceCertUploadResponse* temp = cert_upload_response_;
  cert_upload_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_cert_upload_response(::enterprise_management::DeviceCertUploadResponse* cert_upload_response) {
  delete cert_upload_response_;
  cert_upload_response_ = cert_upload_response;
  if (cert_upload_response) {
    set_has_cert_upload_response();
  } else {
    clear_has_cert_upload_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.cert_upload_response)
}

// optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
bool DeviceManagementResponse::has_service_api_access_response() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DeviceManagementResponse::set_has_service_api_access_response() {
  _has_bits_[0] |= 0x00000100u;
}
void DeviceManagementResponse::clear_has_service_api_access_response() {
  _has_bits_[0] &= ~0x00000100u;
}
void DeviceManagementResponse::clear_service_api_access_response() {
  if (service_api_access_response_ != NULL) service_api_access_response_->::enterprise_management::DeviceServiceApiAccessResponse::Clear();
  clear_has_service_api_access_response();
}
const ::enterprise_management::DeviceServiceApiAccessResponse& DeviceManagementResponse::service_api_access_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.service_api_access_response)
  return service_api_access_response_ != NULL ? *service_api_access_response_
                         : *::enterprise_management::DeviceServiceApiAccessResponse::internal_default_instance();
}
::enterprise_management::DeviceServiceApiAccessResponse* DeviceManagementResponse::mutable_service_api_access_response() {
  set_has_service_api_access_response();
  if (service_api_access_response_ == NULL) {
    service_api_access_response_ = new ::enterprise_management::DeviceServiceApiAccessResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.service_api_access_response)
  return service_api_access_response_;
}
::enterprise_management::DeviceServiceApiAccessResponse* DeviceManagementResponse::release_service_api_access_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.service_api_access_response)
  clear_has_service_api_access_response();
  ::enterprise_management::DeviceServiceApiAccessResponse* temp = service_api_access_response_;
  service_api_access_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_service_api_access_response(::enterprise_management::DeviceServiceApiAccessResponse* service_api_access_response) {
  delete service_api_access_response_;
  service_api_access_response_ = service_api_access_response;
  if (service_api_access_response) {
    set_has_service_api_access_response();
  } else {
    clear_has_service_api_access_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.service_api_access_response)
}

// optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
bool DeviceManagementResponse::has_device_state_retrieval_response() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DeviceManagementResponse::set_has_device_state_retrieval_response() {
  _has_bits_[0] |= 0x00000200u;
}
void DeviceManagementResponse::clear_has_device_state_retrieval_response() {
  _has_bits_[0] &= ~0x00000200u;
}
void DeviceManagementResponse::clear_device_state_retrieval_response() {
  if (device_state_retrieval_response_ != NULL) device_state_retrieval_response_->::enterprise_management::DeviceStateRetrievalResponse::Clear();
  clear_has_device_state_retrieval_response();
}
const ::enterprise_management::DeviceStateRetrievalResponse& DeviceManagementResponse::device_state_retrieval_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
  return device_state_retrieval_response_ != NULL ? *device_state_retrieval_response_
                         : *::enterprise_management::DeviceStateRetrievalResponse::internal_default_instance();
}
::enterprise_management::DeviceStateRetrievalResponse* DeviceManagementResponse::mutable_device_state_retrieval_response() {
  set_has_device_state_retrieval_response();
  if (device_state_retrieval_response_ == NULL) {
    device_state_retrieval_response_ = new ::enterprise_management::DeviceStateRetrievalResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
  return device_state_retrieval_response_;
}
::enterprise_management::DeviceStateRetrievalResponse* DeviceManagementResponse::release_device_state_retrieval_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
  clear_has_device_state_retrieval_response();
  ::enterprise_management::DeviceStateRetrievalResponse* temp = device_state_retrieval_response_;
  device_state_retrieval_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_device_state_retrieval_response(::enterprise_management::DeviceStateRetrievalResponse* device_state_retrieval_response) {
  delete device_state_retrieval_response_;
  device_state_retrieval_response_ = device_state_retrieval_response;
  if (device_state_retrieval_response) {
    set_has_device_state_retrieval_response();
  } else {
    clear_has_device_state_retrieval_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
}

// optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
bool DeviceManagementResponse::has_device_pairing_response() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DeviceManagementResponse::set_has_device_pairing_response() {
  _has_bits_[0] |= 0x00000400u;
}
void DeviceManagementResponse::clear_has_device_pairing_response() {
  _has_bits_[0] &= ~0x00000400u;
}
void DeviceManagementResponse::clear_device_pairing_response() {
  if (device_pairing_response_ != NULL) device_pairing_response_->::enterprise_management::DevicePairingResponse::Clear();
  clear_has_device_pairing_response();
}
const ::enterprise_management::DevicePairingResponse& DeviceManagementResponse::device_pairing_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_pairing_response)
  return device_pairing_response_ != NULL ? *device_pairing_response_
                         : *::enterprise_management::DevicePairingResponse::internal_default_instance();
}
::enterprise_management::DevicePairingResponse* DeviceManagementResponse::mutable_device_pairing_response() {
  set_has_device_pairing_response();
  if (device_pairing_response_ == NULL) {
    device_pairing_response_ = new ::enterprise_management::DevicePairingResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_pairing_response)
  return device_pairing_response_;
}
::enterprise_management::DevicePairingResponse* DeviceManagementResponse::release_device_pairing_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_pairing_response)
  clear_has_device_pairing_response();
  ::enterprise_management::DevicePairingResponse* temp = device_pairing_response_;
  device_pairing_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_device_pairing_response(::enterprise_management::DevicePairingResponse* device_pairing_response) {
  delete device_pairing_response_;
  device_pairing_response_ = device_pairing_response;
  if (device_pairing_response) {
    set_has_device_pairing_response();
  } else {
    clear_has_device_pairing_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_pairing_response)
}

// optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
bool DeviceManagementResponse::has_check_device_pairing_response() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DeviceManagementResponse::set_has_check_device_pairing_response() {
  _has_bits_[0] |= 0x00000800u;
}
void DeviceManagementResponse::clear_has_check_device_pairing_response() {
  _has_bits_[0] &= ~0x00000800u;
}
void DeviceManagementResponse::clear_check_device_pairing_response() {
  if (check_device_pairing_response_ != NULL) check_device_pairing_response_->::enterprise_management::CheckDevicePairingResponse::Clear();
  clear_has_check_device_pairing_response();
}
const ::enterprise_management::CheckDevicePairingResponse& DeviceManagementResponse::check_device_pairing_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
  return check_device_pairing_response_ != NULL ? *check_device_pairing_response_
                         : *::enterprise_management::CheckDevicePairingResponse::internal_default_instance();
}
::enterprise_management::CheckDevicePairingResponse* DeviceManagementResponse::mutable_check_device_pairing_response() {
  set_has_check_device_pairing_response();
  if (check_device_pairing_response_ == NULL) {
    check_device_pairing_response_ = new ::enterprise_management::CheckDevicePairingResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
  return check_device_pairing_response_;
}
::enterprise_management::CheckDevicePairingResponse* DeviceManagementResponse::release_check_device_pairing_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
  clear_has_check_device_pairing_response();
  ::enterprise_management::CheckDevicePairingResponse* temp = check_device_pairing_response_;
  check_device_pairing_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_check_device_pairing_response(::enterprise_management::CheckDevicePairingResponse* check_device_pairing_response) {
  delete check_device_pairing_response_;
  check_device_pairing_response_ = check_device_pairing_response;
  if (check_device_pairing_response) {
    set_has_check_device_pairing_response();
  } else {
    clear_has_check_device_pairing_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
}

// optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
bool DeviceManagementResponse::has_remote_command_response() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DeviceManagementResponse::set_has_remote_command_response() {
  _has_bits_[0] |= 0x00001000u;
}
void DeviceManagementResponse::clear_has_remote_command_response() {
  _has_bits_[0] &= ~0x00001000u;
}
void DeviceManagementResponse::clear_remote_command_response() {
  if (remote_command_response_ != NULL) remote_command_response_->::enterprise_management::DeviceRemoteCommandResponse::Clear();
  clear_has_remote_command_response();
}
const ::enterprise_management::DeviceRemoteCommandResponse& DeviceManagementResponse::remote_command_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.remote_command_response)
  return remote_command_response_ != NULL ? *remote_command_response_
                         : *::enterprise_management::DeviceRemoteCommandResponse::internal_default_instance();
}
::enterprise_management::DeviceRemoteCommandResponse* DeviceManagementResponse::mutable_remote_command_response() {
  set_has_remote_command_response();
  if (remote_command_response_ == NULL) {
    remote_command_response_ = new ::enterprise_management::DeviceRemoteCommandResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.remote_command_response)
  return remote_command_response_;
}
::enterprise_management::DeviceRemoteCommandResponse* DeviceManagementResponse::release_remote_command_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.remote_command_response)
  clear_has_remote_command_response();
  ::enterprise_management::DeviceRemoteCommandResponse* temp = remote_command_response_;
  remote_command_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_remote_command_response(::enterprise_management::DeviceRemoteCommandResponse* remote_command_response) {
  delete remote_command_response_;
  remote_command_response_ = remote_command_response;
  if (remote_command_response) {
    set_has_remote_command_response();
  } else {
    clear_has_remote_command_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.remote_command_response)
}

// optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
bool DeviceManagementResponse::has_device_attribute_update_permission_response() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DeviceManagementResponse::set_has_device_attribute_update_permission_response() {
  _has_bits_[0] |= 0x00002000u;
}
void DeviceManagementResponse::clear_has_device_attribute_update_permission_response() {
  _has_bits_[0] &= ~0x00002000u;
}
void DeviceManagementResponse::clear_device_attribute_update_permission_response() {
  if (device_attribute_update_permission_response_ != NULL) device_attribute_update_permission_response_->::enterprise_management::DeviceAttributeUpdatePermissionResponse::Clear();
  clear_has_device_attribute_update_permission_response();
}
const ::enterprise_management::DeviceAttributeUpdatePermissionResponse& DeviceManagementResponse::device_attribute_update_permission_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
  return device_attribute_update_permission_response_ != NULL ? *device_attribute_update_permission_response_
                         : *::enterprise_management::DeviceAttributeUpdatePermissionResponse::internal_default_instance();
}
::enterprise_management::DeviceAttributeUpdatePermissionResponse* DeviceManagementResponse::mutable_device_attribute_update_permission_response() {
  set_has_device_attribute_update_permission_response();
  if (device_attribute_update_permission_response_ == NULL) {
    device_attribute_update_permission_response_ = new ::enterprise_management::DeviceAttributeUpdatePermissionResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
  return device_attribute_update_permission_response_;
}
::enterprise_management::DeviceAttributeUpdatePermissionResponse* DeviceManagementResponse::release_device_attribute_update_permission_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
  clear_has_device_attribute_update_permission_response();
  ::enterprise_management::DeviceAttributeUpdatePermissionResponse* temp = device_attribute_update_permission_response_;
  device_attribute_update_permission_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_device_attribute_update_permission_response(::enterprise_management::DeviceAttributeUpdatePermissionResponse* device_attribute_update_permission_response) {
  delete device_attribute_update_permission_response_;
  device_attribute_update_permission_response_ = device_attribute_update_permission_response;
  if (device_attribute_update_permission_response) {
    set_has_device_attribute_update_permission_response();
  } else {
    clear_has_device_attribute_update_permission_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
}

// optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
bool DeviceManagementResponse::has_device_attribute_update_response() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DeviceManagementResponse::set_has_device_attribute_update_response() {
  _has_bits_[0] |= 0x00004000u;
}
void DeviceManagementResponse::clear_has_device_attribute_update_response() {
  _has_bits_[0] &= ~0x00004000u;
}
void DeviceManagementResponse::clear_device_attribute_update_response() {
  if (device_attribute_update_response_ != NULL) device_attribute_update_response_->::enterprise_management::DeviceAttributeUpdateResponse::Clear();
  clear_has_device_attribute_update_response();
}
const ::enterprise_management::DeviceAttributeUpdateResponse& DeviceManagementResponse::device_attribute_update_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
  return device_attribute_update_response_ != NULL ? *device_attribute_update_response_
                         : *::enterprise_management::DeviceAttributeUpdateResponse::internal_default_instance();
}
::enterprise_management::DeviceAttributeUpdateResponse* DeviceManagementResponse::mutable_device_attribute_update_response() {
  set_has_device_attribute_update_response();
  if (device_attribute_update_response_ == NULL) {
    device_attribute_update_response_ = new ::enterprise_management::DeviceAttributeUpdateResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
  return device_attribute_update_response_;
}
::enterprise_management::DeviceAttributeUpdateResponse* DeviceManagementResponse::release_device_attribute_update_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
  clear_has_device_attribute_update_response();
  ::enterprise_management::DeviceAttributeUpdateResponse* temp = device_attribute_update_response_;
  device_attribute_update_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_device_attribute_update_response(::enterprise_management::DeviceAttributeUpdateResponse* device_attribute_update_response) {
  delete device_attribute_update_response_;
  device_attribute_update_response_ = device_attribute_update_response;
  if (device_attribute_update_response) {
    set_has_device_attribute_update_response();
  } else {
    clear_has_device_attribute_update_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
}

// optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
bool DeviceManagementResponse::has_gcm_id_update_response() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DeviceManagementResponse::set_has_gcm_id_update_response() {
  _has_bits_[0] |= 0x00008000u;
}
void DeviceManagementResponse::clear_has_gcm_id_update_response() {
  _has_bits_[0] &= ~0x00008000u;
}
void DeviceManagementResponse::clear_gcm_id_update_response() {
  if (gcm_id_update_response_ != NULL) gcm_id_update_response_->::enterprise_management::GcmIdUpdateResponse::Clear();
  clear_has_gcm_id_update_response();
}
const ::enterprise_management::GcmIdUpdateResponse& DeviceManagementResponse::gcm_id_update_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
  return gcm_id_update_response_ != NULL ? *gcm_id_update_response_
                         : *::enterprise_management::GcmIdUpdateResponse::internal_default_instance();
}
::enterprise_management::GcmIdUpdateResponse* DeviceManagementResponse::mutable_gcm_id_update_response() {
  set_has_gcm_id_update_response();
  if (gcm_id_update_response_ == NULL) {
    gcm_id_update_response_ = new ::enterprise_management::GcmIdUpdateResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
  return gcm_id_update_response_;
}
::enterprise_management::GcmIdUpdateResponse* DeviceManagementResponse::release_gcm_id_update_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
  clear_has_gcm_id_update_response();
  ::enterprise_management::GcmIdUpdateResponse* temp = gcm_id_update_response_;
  gcm_id_update_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_gcm_id_update_response(::enterprise_management::GcmIdUpdateResponse* gcm_id_update_response) {
  delete gcm_id_update_response_;
  gcm_id_update_response_ = gcm_id_update_response;
  if (gcm_id_update_response) {
    set_has_gcm_id_update_response();
  } else {
    clear_has_gcm_id_update_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
}

// optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
bool DeviceManagementResponse::has_check_android_management_response() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DeviceManagementResponse::set_has_check_android_management_response() {
  _has_bits_[0] |= 0x00010000u;
}
void DeviceManagementResponse::clear_has_check_android_management_response() {
  _has_bits_[0] &= ~0x00010000u;
}
void DeviceManagementResponse::clear_check_android_management_response() {
  if (check_android_management_response_ != NULL) check_android_management_response_->::enterprise_management::CheckAndroidManagementResponse::Clear();
  clear_has_check_android_management_response();
}
const ::enterprise_management::CheckAndroidManagementResponse& DeviceManagementResponse::check_android_management_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.check_android_management_response)
  return check_android_management_response_ != NULL ? *check_android_management_response_
                         : *::enterprise_management::CheckAndroidManagementResponse::internal_default_instance();
}
::enterprise_management::CheckAndroidManagementResponse* DeviceManagementResponse::mutable_check_android_management_response() {
  set_has_check_android_management_response();
  if (check_android_management_response_ == NULL) {
    check_android_management_response_ = new ::enterprise_management::CheckAndroidManagementResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.check_android_management_response)
  return check_android_management_response_;
}
::enterprise_management::CheckAndroidManagementResponse* DeviceManagementResponse::release_check_android_management_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.check_android_management_response)
  clear_has_check_android_management_response();
  ::enterprise_management::CheckAndroidManagementResponse* temp = check_android_management_response_;
  check_android_management_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_check_android_management_response(::enterprise_management::CheckAndroidManagementResponse* check_android_management_response) {
  delete check_android_management_response_;
  check_android_management_response_ = check_android_management_response;
  if (check_android_management_response) {
    set_has_check_android_management_response();
  } else {
    clear_has_check_android_management_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.check_android_management_response)
}

// optional .enterprise_management.ActiveDirectoryEnrollPlayUserResponse active_directory_enroll_play_user_response = 19;
bool DeviceManagementResponse::has_active_directory_enroll_play_user_response() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DeviceManagementResponse::set_has_active_directory_enroll_play_user_response() {
  _has_bits_[0] |= 0x00020000u;
}
void DeviceManagementResponse::clear_has_active_directory_enroll_play_user_response() {
  _has_bits_[0] &= ~0x00020000u;
}
void DeviceManagementResponse::clear_active_directory_enroll_play_user_response() {
  if (active_directory_enroll_play_user_response_ != NULL) active_directory_enroll_play_user_response_->::enterprise_management::ActiveDirectoryEnrollPlayUserResponse::Clear();
  clear_has_active_directory_enroll_play_user_response();
}
const ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse& DeviceManagementResponse::active_directory_enroll_play_user_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.active_directory_enroll_play_user_response)
  return active_directory_enroll_play_user_response_ != NULL ? *active_directory_enroll_play_user_response_
                         : *::enterprise_management::ActiveDirectoryEnrollPlayUserResponse::internal_default_instance();
}
::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* DeviceManagementResponse::mutable_active_directory_enroll_play_user_response() {
  set_has_active_directory_enroll_play_user_response();
  if (active_directory_enroll_play_user_response_ == NULL) {
    active_directory_enroll_play_user_response_ = new ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.active_directory_enroll_play_user_response)
  return active_directory_enroll_play_user_response_;
}
::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* DeviceManagementResponse::release_active_directory_enroll_play_user_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.active_directory_enroll_play_user_response)
  clear_has_active_directory_enroll_play_user_response();
  ::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* temp = active_directory_enroll_play_user_response_;
  active_directory_enroll_play_user_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_active_directory_enroll_play_user_response(::enterprise_management::ActiveDirectoryEnrollPlayUserResponse* active_directory_enroll_play_user_response) {
  delete active_directory_enroll_play_user_response_;
  active_directory_enroll_play_user_response_ = active_directory_enroll_play_user_response;
  if (active_directory_enroll_play_user_response) {
    set_has_active_directory_enroll_play_user_response();
  } else {
    clear_has_active_directory_enroll_play_user_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.active_directory_enroll_play_user_response)
}

// optional .enterprise_management.ActiveDirectoryPlayActivityResponse active_directory_play_activity_response = 20;
bool DeviceManagementResponse::has_active_directory_play_activity_response() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DeviceManagementResponse::set_has_active_directory_play_activity_response() {
  _has_bits_[0] |= 0x00040000u;
}
void DeviceManagementResponse::clear_has_active_directory_play_activity_response() {
  _has_bits_[0] &= ~0x00040000u;
}
void DeviceManagementResponse::clear_active_directory_play_activity_response() {
  if (active_directory_play_activity_response_ != NULL) active_directory_play_activity_response_->::enterprise_management::ActiveDirectoryPlayActivityResponse::Clear();
  clear_has_active_directory_play_activity_response();
}
const ::enterprise_management::ActiveDirectoryPlayActivityResponse& DeviceManagementResponse::active_directory_play_activity_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.active_directory_play_activity_response)
  return active_directory_play_activity_response_ != NULL ? *active_directory_play_activity_response_
                         : *::enterprise_management::ActiveDirectoryPlayActivityResponse::internal_default_instance();
}
::enterprise_management::ActiveDirectoryPlayActivityResponse* DeviceManagementResponse::mutable_active_directory_play_activity_response() {
  set_has_active_directory_play_activity_response();
  if (active_directory_play_activity_response_ == NULL) {
    active_directory_play_activity_response_ = new ::enterprise_management::ActiveDirectoryPlayActivityResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.active_directory_play_activity_response)
  return active_directory_play_activity_response_;
}
::enterprise_management::ActiveDirectoryPlayActivityResponse* DeviceManagementResponse::release_active_directory_play_activity_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.active_directory_play_activity_response)
  clear_has_active_directory_play_activity_response();
  ::enterprise_management::ActiveDirectoryPlayActivityResponse* temp = active_directory_play_activity_response_;
  active_directory_play_activity_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_active_directory_play_activity_response(::enterprise_management::ActiveDirectoryPlayActivityResponse* active_directory_play_activity_response) {
  delete active_directory_play_activity_response_;
  active_directory_play_activity_response_ = active_directory_play_activity_response;
  if (active_directory_play_activity_response) {
    set_has_active_directory_play_activity_response();
  } else {
    clear_has_active_directory_play_activity_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.active_directory_play_activity_response)
}

// optional .enterprise_management.CheckDeviceLicenseResponse check_device_license_response = 21;
bool DeviceManagementResponse::has_check_device_license_response() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DeviceManagementResponse::set_has_check_device_license_response() {
  _has_bits_[0] |= 0x00080000u;
}
void DeviceManagementResponse::clear_has_check_device_license_response() {
  _has_bits_[0] &= ~0x00080000u;
}
void DeviceManagementResponse::clear_check_device_license_response() {
  if (check_device_license_response_ != NULL) check_device_license_response_->::enterprise_management::CheckDeviceLicenseResponse::Clear();
  clear_has_check_device_license_response();
}
const ::enterprise_management::CheckDeviceLicenseResponse& DeviceManagementResponse::check_device_license_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.check_device_license_response)
  return check_device_license_response_ != NULL ? *check_device_license_response_
                         : *::enterprise_management::CheckDeviceLicenseResponse::internal_default_instance();
}
::enterprise_management::CheckDeviceLicenseResponse* DeviceManagementResponse::mutable_check_device_license_response() {
  set_has_check_device_license_response();
  if (check_device_license_response_ == NULL) {
    check_device_license_response_ = new ::enterprise_management::CheckDeviceLicenseResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.check_device_license_response)
  return check_device_license_response_;
}
::enterprise_management::CheckDeviceLicenseResponse* DeviceManagementResponse::release_check_device_license_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.check_device_license_response)
  clear_has_check_device_license_response();
  ::enterprise_management::CheckDeviceLicenseResponse* temp = check_device_license_response_;
  check_device_license_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_check_device_license_response(::enterprise_management::CheckDeviceLicenseResponse* check_device_license_response) {
  delete check_device_license_response_;
  check_device_license_response_ = check_device_license_response;
  if (check_device_license_response) {
    set_has_check_device_license_response();
  } else {
    clear_has_check_device_license_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.check_device_license_response)
}

// optional .enterprise_management.ActiveDirectoryUserSigninResponse active_directory_user_signin_response = 22;
bool DeviceManagementResponse::has_active_directory_user_signin_response() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DeviceManagementResponse::set_has_active_directory_user_signin_response() {
  _has_bits_[0] |= 0x00100000u;
}
void DeviceManagementResponse::clear_has_active_directory_user_signin_response() {
  _has_bits_[0] &= ~0x00100000u;
}
void DeviceManagementResponse::clear_active_directory_user_signin_response() {
  if (active_directory_user_signin_response_ != NULL) active_directory_user_signin_response_->::enterprise_management::ActiveDirectoryUserSigninResponse::Clear();
  clear_has_active_directory_user_signin_response();
}
const ::enterprise_management::ActiveDirectoryUserSigninResponse& DeviceManagementResponse::active_directory_user_signin_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.active_directory_user_signin_response)
  return active_directory_user_signin_response_ != NULL ? *active_directory_user_signin_response_
                         : *::enterprise_management::ActiveDirectoryUserSigninResponse::internal_default_instance();
}
::enterprise_management::ActiveDirectoryUserSigninResponse* DeviceManagementResponse::mutable_active_directory_user_signin_response() {
  set_has_active_directory_user_signin_response();
  if (active_directory_user_signin_response_ == NULL) {
    active_directory_user_signin_response_ = new ::enterprise_management::ActiveDirectoryUserSigninResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.active_directory_user_signin_response)
  return active_directory_user_signin_response_;
}
::enterprise_management::ActiveDirectoryUserSigninResponse* DeviceManagementResponse::release_active_directory_user_signin_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.active_directory_user_signin_response)
  clear_has_active_directory_user_signin_response();
  ::enterprise_management::ActiveDirectoryUserSigninResponse* temp = active_directory_user_signin_response_;
  active_directory_user_signin_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_active_directory_user_signin_response(::enterprise_management::ActiveDirectoryUserSigninResponse* active_directory_user_signin_response) {
  delete active_directory_user_signin_response_;
  active_directory_user_signin_response_ = active_directory_user_signin_response;
  if (active_directory_user_signin_response) {
    set_has_active_directory_user_signin_response();
  } else {
    clear_has_active_directory_user_signin_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.active_directory_user_signin_response)
}

// optional .enterprise_management.ChromeDesktopReportResponse chrome_desktop_report_response = 23;
bool DeviceManagementResponse::has_chrome_desktop_report_response() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DeviceManagementResponse::set_has_chrome_desktop_report_response() {
  _has_bits_[0] |= 0x00200000u;
}
void DeviceManagementResponse::clear_has_chrome_desktop_report_response() {
  _has_bits_[0] &= ~0x00200000u;
}
void DeviceManagementResponse::clear_chrome_desktop_report_response() {
  if (chrome_desktop_report_response_ != NULL) chrome_desktop_report_response_->::enterprise_management::ChromeDesktopReportResponse::Clear();
  clear_has_chrome_desktop_report_response();
}
const ::enterprise_management::ChromeDesktopReportResponse& DeviceManagementResponse::chrome_desktop_report_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.chrome_desktop_report_response)
  return chrome_desktop_report_response_ != NULL ? *chrome_desktop_report_response_
                         : *::enterprise_management::ChromeDesktopReportResponse::internal_default_instance();
}
::enterprise_management::ChromeDesktopReportResponse* DeviceManagementResponse::mutable_chrome_desktop_report_response() {
  set_has_chrome_desktop_report_response();
  if (chrome_desktop_report_response_ == NULL) {
    chrome_desktop_report_response_ = new ::enterprise_management::ChromeDesktopReportResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.chrome_desktop_report_response)
  return chrome_desktop_report_response_;
}
::enterprise_management::ChromeDesktopReportResponse* DeviceManagementResponse::release_chrome_desktop_report_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.chrome_desktop_report_response)
  clear_has_chrome_desktop_report_response();
  ::enterprise_management::ChromeDesktopReportResponse* temp = chrome_desktop_report_response_;
  chrome_desktop_report_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_chrome_desktop_report_response(::enterprise_management::ChromeDesktopReportResponse* chrome_desktop_report_response) {
  delete chrome_desktop_report_response_;
  chrome_desktop_report_response_ = chrome_desktop_report_response;
  if (chrome_desktop_report_response) {
    set_has_chrome_desktop_report_response();
  } else {
    clear_has_chrome_desktop_report_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.chrome_desktop_report_response)
}

// optional .enterprise_management.AppInstallReportResponse app_install_report_response = 25;
bool DeviceManagementResponse::has_app_install_report_response() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DeviceManagementResponse::set_has_app_install_report_response() {
  _has_bits_[0] |= 0x00400000u;
}
void DeviceManagementResponse::clear_has_app_install_report_response() {
  _has_bits_[0] &= ~0x00400000u;
}
void DeviceManagementResponse::clear_app_install_report_response() {
  if (app_install_report_response_ != NULL) app_install_report_response_->::enterprise_management::AppInstallReportResponse::Clear();
  clear_has_app_install_report_response();
}
const ::enterprise_management::AppInstallReportResponse& DeviceManagementResponse::app_install_report_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.app_install_report_response)
  return app_install_report_response_ != NULL ? *app_install_report_response_
                         : *::enterprise_management::AppInstallReportResponse::internal_default_instance();
}
::enterprise_management::AppInstallReportResponse* DeviceManagementResponse::mutable_app_install_report_response() {
  set_has_app_install_report_response();
  if (app_install_report_response_ == NULL) {
    app_install_report_response_ = new ::enterprise_management::AppInstallReportResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.app_install_report_response)
  return app_install_report_response_;
}
::enterprise_management::AppInstallReportResponse* DeviceManagementResponse::release_app_install_report_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.app_install_report_response)
  clear_has_app_install_report_response();
  ::enterprise_management::AppInstallReportResponse* temp = app_install_report_response_;
  app_install_report_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_app_install_report_response(::enterprise_management::AppInstallReportResponse* app_install_report_response) {
  delete app_install_report_response_;
  app_install_report_response_ = app_install_report_response;
  if (app_install_report_response) {
    set_has_app_install_report_response();
  } else {
    clear_has_app_install_report_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.app_install_report_response)
}

// optional .enterprise_management.PolicyValidationReportResponse policy_validation_report_response = 26;
bool DeviceManagementResponse::has_policy_validation_report_response() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DeviceManagementResponse::set_has_policy_validation_report_response() {
  _has_bits_[0] |= 0x00800000u;
}
void DeviceManagementResponse::clear_has_policy_validation_report_response() {
  _has_bits_[0] &= ~0x00800000u;
}
void DeviceManagementResponse::clear_policy_validation_report_response() {
  if (policy_validation_report_response_ != NULL) policy_validation_report_response_->::enterprise_management::PolicyValidationReportResponse::Clear();
  clear_has_policy_validation_report_response();
}
const ::enterprise_management::PolicyValidationReportResponse& DeviceManagementResponse::policy_validation_report_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.policy_validation_report_response)
  return policy_validation_report_response_ != NULL ? *policy_validation_report_response_
                         : *::enterprise_management::PolicyValidationReportResponse::internal_default_instance();
}
::enterprise_management::PolicyValidationReportResponse* DeviceManagementResponse::mutable_policy_validation_report_response() {
  set_has_policy_validation_report_response();
  if (policy_validation_report_response_ == NULL) {
    policy_validation_report_response_ = new ::enterprise_management::PolicyValidationReportResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.policy_validation_report_response)
  return policy_validation_report_response_;
}
::enterprise_management::PolicyValidationReportResponse* DeviceManagementResponse::release_policy_validation_report_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.policy_validation_report_response)
  clear_has_policy_validation_report_response();
  ::enterprise_management::PolicyValidationReportResponse* temp = policy_validation_report_response_;
  policy_validation_report_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_policy_validation_report_response(::enterprise_management::PolicyValidationReportResponse* policy_validation_report_response) {
  delete policy_validation_report_response_;
  policy_validation_report_response_ = policy_validation_report_response;
  if (policy_validation_report_response) {
    set_has_policy_validation_report_response();
  } else {
    clear_has_policy_validation_report_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.policy_validation_report_response)
}

// optional .enterprise_management.DeviceInitialEnrollmentStateResponse device_initial_enrollment_state_response = 27;
bool DeviceManagementResponse::has_device_initial_enrollment_state_response() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void DeviceManagementResponse::set_has_device_initial_enrollment_state_response() {
  _has_bits_[0] |= 0x01000000u;
}
void DeviceManagementResponse::clear_has_device_initial_enrollment_state_response() {
  _has_bits_[0] &= ~0x01000000u;
}
void DeviceManagementResponse::clear_device_initial_enrollment_state_response() {
  if (device_initial_enrollment_state_response_ != NULL) device_initial_enrollment_state_response_->::enterprise_management::DeviceInitialEnrollmentStateResponse::Clear();
  clear_has_device_initial_enrollment_state_response();
}
const ::enterprise_management::DeviceInitialEnrollmentStateResponse& DeviceManagementResponse::device_initial_enrollment_state_response() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_initial_enrollment_state_response)
  return device_initial_enrollment_state_response_ != NULL ? *device_initial_enrollment_state_response_
                         : *::enterprise_management::DeviceInitialEnrollmentStateResponse::internal_default_instance();
}
::enterprise_management::DeviceInitialEnrollmentStateResponse* DeviceManagementResponse::mutable_device_initial_enrollment_state_response() {
  set_has_device_initial_enrollment_state_response();
  if (device_initial_enrollment_state_response_ == NULL) {
    device_initial_enrollment_state_response_ = new ::enterprise_management::DeviceInitialEnrollmentStateResponse;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_initial_enrollment_state_response)
  return device_initial_enrollment_state_response_;
}
::enterprise_management::DeviceInitialEnrollmentStateResponse* DeviceManagementResponse::release_device_initial_enrollment_state_response() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_initial_enrollment_state_response)
  clear_has_device_initial_enrollment_state_response();
  ::enterprise_management::DeviceInitialEnrollmentStateResponse* temp = device_initial_enrollment_state_response_;
  device_initial_enrollment_state_response_ = NULL;
  return temp;
}
void DeviceManagementResponse::set_allocated_device_initial_enrollment_state_response(::enterprise_management::DeviceInitialEnrollmentStateResponse* device_initial_enrollment_state_response) {
  delete device_initial_enrollment_state_response_;
  device_initial_enrollment_state_response_ = device_initial_enrollment_state_response;
  if (device_initial_enrollment_state_response) {
    set_has_device_initial_enrollment_state_response();
  } else {
    clear_has_device_initial_enrollment_state_response();
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_initial_enrollment_state_response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace enterprise_management

// @@protoc_insertion_point(global_scope)
