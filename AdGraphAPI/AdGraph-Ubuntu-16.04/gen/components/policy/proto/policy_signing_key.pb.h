// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy_signing_key.proto

#ifndef PROTOBUF_policy_5fsigning_5fkey_2eproto__INCLUDED
#define PROTOBUF_policy_5fsigning_5fkey_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include "components/policy/proto/policy_proto_export.h"
namespace enterprise_management {
class PolicySigningKey;
class PolicySigningKeyDefaultTypeInternal;
POLICY_PROTO_EXPORT extern PolicySigningKeyDefaultTypeInternal _PolicySigningKey_default_instance_;
}  // namespace enterprise_management

namespace enterprise_management {

namespace protobuf_policy_5fsigning_5fkey_2eproto {
// Internal implementation detail -- do not call these.
struct POLICY_PROTO_EXPORT TableStruct {
static const ::google::protobuf::internal::ParseTableField entries[];
static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
static const ::google::protobuf::internal::ParseTable schema[];
static const ::google::protobuf::uint32 offsets[];
static void InitDefaultsImpl();
static void Shutdown();
};
void POLICY_PROTO_EXPORT AddDescriptors();
void POLICY_PROTO_EXPORT InitDefaults();
}  // namespace protobuf_policy_5fsigning_5fkey_2eproto

// ===================================================================

class POLICY_PROTO_EXPORT PolicySigningKey : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PolicySigningKey) */ {
public:
PolicySigningKey();
virtual ~PolicySigningKey();

PolicySigningKey(const PolicySigningKey& from);

inline PolicySigningKey& operator=(const PolicySigningKey& from) {
CopyFrom(from);
return *this;
}

inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}

inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const PolicySigningKey& default_instance();

static inline const PolicySigningKey* internal_default_instance() {
return reinterpret_cast<const PolicySigningKey*>(
&_PolicySigningKey_default_instance_);
}
static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
0;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(PolicySigningKey* other);

// implements Message ----------------------------------------------

inline PolicySigningKey* New() const PROTOBUF_FINAL { return New(NULL); }

PolicySigningKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
PROTOBUF_FINAL;
void CopyFrom(const PolicySigningKey& from);
void MergeFrom(const PolicySigningKey& from);
void Clear() PROTOBUF_FINAL;
bool IsInitialized() const PROTOBUF_FINAL;

size_t ByteSizeLong() const PROTOBUF_FINAL;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
void DiscardUnknownFields();
int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PolicySigningKey* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const PROTOBUF_FINAL;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional bytes signing_key = 1;
bool has_signing_key() const;
void clear_signing_key();
static const int kSigningKeyFieldNumber = 1;
const ::std::string& signing_key() const;
void set_signing_key(const ::std::string& value);
#if LANG_CXX11
void set_signing_key(::std::string&& value);
#endif
void set_signing_key(const char* value);
void set_signing_key(const void* value, size_t size);
::std::string* mutable_signing_key();
::std::string* release_signing_key();
void set_allocated_signing_key(::std::string* signing_key);

// optional bytes signing_key_signature = 2;
bool has_signing_key_signature() const;
void clear_signing_key_signature();
static const int kSigningKeySignatureFieldNumber = 2;
const ::std::string& signing_key_signature() const;
void set_signing_key_signature(const ::std::string& value);
#if LANG_CXX11
void set_signing_key_signature(::std::string&& value);
#endif
void set_signing_key_signature(const char* value);
void set_signing_key_signature(const void* value, size_t size);
::std::string* mutable_signing_key_signature();
::std::string* release_signing_key_signature();
void set_allocated_signing_key_signature(::std::string* signing_key_signature);

// optional bytes verification_key = 3;
bool has_verification_key() const;
void clear_verification_key();
static const int kVerificationKeyFieldNumber = 3;
const ::std::string& verification_key() const;
void set_verification_key(const ::std::string& value);
#if LANG_CXX11
void set_verification_key(::std::string&& value);
#endif
void set_verification_key(const char* value);
void set_verification_key(const void* value, size_t size);
::std::string* mutable_verification_key();
::std::string* release_verification_key();
void set_allocated_verification_key(::std::string* verification_key);

// @@protoc_insertion_point(class_scope:enterprise_management.PolicySigningKey)
private:
void set_has_signing_key();
void clear_has_signing_key();
void set_has_signing_key_signature();
void clear_has_signing_key_signature();
void set_has_verification_key();
void clear_has_verification_key();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable int _cached_size_;
::google::protobuf::internal::ArenaStringPtr signing_key_;
::google::protobuf::internal::ArenaStringPtr signing_key_signature_;
::google::protobuf::internal::ArenaStringPtr verification_key_;
friend struct protobuf_policy_5fsigning_5fkey_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicySigningKey

// optional bytes signing_key = 1;
inline bool PolicySigningKey::has_signing_key() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicySigningKey::set_has_signing_key() {
_has_bits_[0] |= 0x00000001u;
}
inline void PolicySigningKey::clear_has_signing_key() {
_has_bits_[0] &= ~0x00000001u;
}
inline void PolicySigningKey::clear_signing_key() {
signing_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_signing_key();
}
inline const ::std::string& PolicySigningKey::signing_key() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.signing_key)
return signing_key_.GetNoArena();
}
inline void PolicySigningKey::set_signing_key(const ::std::string& value) {
set_has_signing_key();
signing_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.signing_key)
}
#if LANG_CXX11
inline void PolicySigningKey::set_signing_key(::std::string&& value) {
set_has_signing_key();
signing_key_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicySigningKey.signing_key)
}
#endif
inline void PolicySigningKey::set_signing_key(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_signing_key();
signing_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicySigningKey.signing_key)
}
inline void PolicySigningKey::set_signing_key(const void* value, size_t size) {
set_has_signing_key();
signing_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicySigningKey.signing_key)
}
inline ::std::string* PolicySigningKey::mutable_signing_key() {
set_has_signing_key();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.signing_key)
return signing_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicySigningKey::release_signing_key() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.signing_key)
clear_has_signing_key();
return signing_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicySigningKey::set_allocated_signing_key(::std::string* signing_key) {
if (signing_key != NULL) {
set_has_signing_key();
} else {
clear_has_signing_key();
}
signing_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signing_key);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.signing_key)
}

// optional bytes signing_key_signature = 2;
inline bool PolicySigningKey::has_signing_key_signature() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicySigningKey::set_has_signing_key_signature() {
_has_bits_[0] |= 0x00000002u;
}
inline void PolicySigningKey::clear_has_signing_key_signature() {
_has_bits_[0] &= ~0x00000002u;
}
inline void PolicySigningKey::clear_signing_key_signature() {
signing_key_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_signing_key_signature();
}
inline const ::std::string& PolicySigningKey::signing_key_signature() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.signing_key_signature)
return signing_key_signature_.GetNoArena();
}
inline void PolicySigningKey::set_signing_key_signature(const ::std::string& value) {
set_has_signing_key_signature();
signing_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.signing_key_signature)
}
#if LANG_CXX11
inline void PolicySigningKey::set_signing_key_signature(::std::string&& value) {
set_has_signing_key_signature();
signing_key_signature_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicySigningKey.signing_key_signature)
}
#endif
inline void PolicySigningKey::set_signing_key_signature(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_signing_key_signature();
signing_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicySigningKey.signing_key_signature)
}
inline void PolicySigningKey::set_signing_key_signature(const void* value, size_t size) {
set_has_signing_key_signature();
signing_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicySigningKey.signing_key_signature)
}
inline ::std::string* PolicySigningKey::mutable_signing_key_signature() {
set_has_signing_key_signature();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.signing_key_signature)
return signing_key_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicySigningKey::release_signing_key_signature() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.signing_key_signature)
clear_has_signing_key_signature();
return signing_key_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicySigningKey::set_allocated_signing_key_signature(::std::string* signing_key_signature) {
if (signing_key_signature != NULL) {
set_has_signing_key_signature();
} else {
clear_has_signing_key_signature();
}
signing_key_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signing_key_signature);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.signing_key_signature)
}

// optional bytes verification_key = 3;
inline bool PolicySigningKey::has_verification_key() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicySigningKey::set_has_verification_key() {
_has_bits_[0] |= 0x00000004u;
}
inline void PolicySigningKey::clear_has_verification_key() {
_has_bits_[0] &= ~0x00000004u;
}
inline void PolicySigningKey::clear_verification_key() {
verification_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_verification_key();
}
inline const ::std::string& PolicySigningKey::verification_key() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.verification_key)
return verification_key_.GetNoArena();
}
inline void PolicySigningKey::set_verification_key(const ::std::string& value) {
set_has_verification_key();
verification_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.verification_key)
}
#if LANG_CXX11
inline void PolicySigningKey::set_verification_key(::std::string&& value) {
set_has_verification_key();
verification_key_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.PolicySigningKey.verification_key)
}
#endif
inline void PolicySigningKey::set_verification_key(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_verification_key();
verification_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.PolicySigningKey.verification_key)
}
inline void PolicySigningKey::set_verification_key(const void* value, size_t size) {
set_has_verification_key();
verification_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicySigningKey.verification_key)
}
inline ::std::string* PolicySigningKey::mutable_verification_key() {
set_has_verification_key();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.verification_key)
return verification_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicySigningKey::release_verification_key() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.verification_key)
clear_has_verification_key();
return verification_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicySigningKey::set_allocated_verification_key(::std::string* verification_key) {
if (verification_key != NULL) {
set_has_verification_key();
} else {
clear_has_verification_key();
}
verification_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verification_key);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.verification_key)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace enterprise_management

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_policy_5fsigning_5fkey_2eproto__INCLUDED
