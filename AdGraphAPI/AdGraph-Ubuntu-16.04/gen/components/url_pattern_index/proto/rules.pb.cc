// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rules.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rules.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace url_pattern_index {
namespace proto {
class DomainListItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DomainListItem> {
} _DomainListItem_default_instance_;
class UrlRuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UrlRule> {
} _UrlRule_default_instance_;
class CssRuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CssRule> {
} _CssRule_default_instance_;
class CommentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Comment> {
} _Comment_default_instance_;
class FilteringRulesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FilteringRules> {
} _FilteringRules_default_instance_;

namespace protobuf_rules_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DomainListItem_default_instance_.Shutdown();
  _UrlRule_default_instance_.Shutdown();
  _CssRule_default_instance_.Shutdown();
  _Comment_default_instance_.Shutdown();
  _FilteringRules_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DomainListItem_default_instance_.DefaultConstruct();
  _UrlRule_default_instance_.DefaultConstruct();
  _CssRule_default_instance_.DefaultConstruct();
  _Comment_default_instance_.DefaultConstruct();
  _FilteringRules_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_rules_2eproto

bool RuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool UrlPatternType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool AnchorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ElementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8191:
      return true;
    default:
      return false;
  }
}

bool ActivationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 15:
      return true;
    default:
      return false;
  }
}

bool RuleSemantics_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DomainListItem::kDomainFieldNumber;
const int DomainListItem::kExcludeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DomainListItem::DomainListItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rules_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:url_pattern_index.proto.DomainListItem)
}
DomainListItem::DomainListItem(const DomainListItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  exclude_ = from.exclude_;
  // @@protoc_insertion_point(copy_constructor:url_pattern_index.proto.DomainListItem)
}

void DomainListItem::SharedCtor() {
  _cached_size_ = 0;
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exclude_ = false;
}

DomainListItem::~DomainListItem() {
  // @@protoc_insertion_point(destructor:url_pattern_index.proto.DomainListItem)
  SharedDtor();
}

void DomainListItem::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DomainListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DomainListItem& DomainListItem::default_instance() {
  protobuf_rules_2eproto::InitDefaults();
  return *internal_default_instance();
}

DomainListItem* DomainListItem::New(::google::protobuf::Arena* arena) const {
  DomainListItem* n = new DomainListItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DomainListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:url_pattern_index.proto.DomainListItem)
  if (has_domain()) {
    GOOGLE_DCHECK(!domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*domain_.UnsafeRawStringPointer())->clear();
  }
  exclude_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DomainListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:url_pattern_index.proto.DomainListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exclude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_exclude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:url_pattern_index.proto.DomainListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:url_pattern_index.proto.DomainListItem)
  return false;
#undef DO_
}

void DomainListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:url_pattern_index.proto.DomainListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // optional bool exclude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->exclude(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:url_pattern_index.proto.DomainListItem)
}

size_t DomainListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:url_pattern_index.proto.DomainListItem)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional bool exclude = 2;
    if (has_exclude()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DomainListItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DomainListItem*>(&from));
}

void DomainListItem::MergeFrom(const DomainListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:url_pattern_index.proto.DomainListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      exclude_ = from.exclude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DomainListItem::CopyFrom(const DomainListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:url_pattern_index.proto.DomainListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainListItem::IsInitialized() const {
  return true;
}

void DomainListItem::Swap(DomainListItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DomainListItem::InternalSwap(DomainListItem* other) {
  domain_.Swap(&other->domain_);
  std::swap(exclude_, other->exclude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DomainListItem::GetTypeName() const {
  return "url_pattern_index.proto.DomainListItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DomainListItem

// optional string domain = 1;
bool DomainListItem::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DomainListItem::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
void DomainListItem::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
void DomainListItem::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
const ::std::string& DomainListItem::domain() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.DomainListItem.domain)
  return domain_.GetNoArena();
}
void DomainListItem::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.DomainListItem.domain)
}
#if LANG_CXX11
void DomainListItem::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:url_pattern_index.proto.DomainListItem.domain)
}
#endif
void DomainListItem::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:url_pattern_index.proto.DomainListItem.domain)
}
void DomainListItem::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:url_pattern_index.proto.DomainListItem.domain)
}
::std::string* DomainListItem::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:url_pattern_index.proto.DomainListItem.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DomainListItem::release_domain() {
  // @@protoc_insertion_point(field_release:url_pattern_index.proto.DomainListItem.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DomainListItem::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:url_pattern_index.proto.DomainListItem.domain)
}

// optional bool exclude = 2;
bool DomainListItem::has_exclude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DomainListItem::set_has_exclude() {
  _has_bits_[0] |= 0x00000002u;
}
void DomainListItem::clear_has_exclude() {
  _has_bits_[0] &= ~0x00000002u;
}
void DomainListItem::clear_exclude() {
  exclude_ = false;
  clear_has_exclude();
}
bool DomainListItem::exclude() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.DomainListItem.exclude)
  return exclude_;
}
void DomainListItem::set_exclude(bool value) {
  set_has_exclude();
  exclude_ = value;
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.DomainListItem.exclude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlRule::kSemanticsFieldNumber;
const int UrlRule::kSourceTypeFieldNumber;
const int UrlRule::kElementTypesFieldNumber;
const int UrlRule::kActivationTypesFieldNumber;
const int UrlRule::kDomainsFieldNumber;
const int UrlRule::kUrlPatternTypeFieldNumber;
const int UrlRule::kAnchorLeftFieldNumber;
const int UrlRule::kAnchorRightFieldNumber;
const int UrlRule::kMatchCaseFieldNumber;
const int UrlRule::kUrlPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlRule::UrlRule()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rules_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:url_pattern_index.proto.UrlRule)
}
UrlRule::UrlRule(const UrlRule& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      domains_(from.domains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_pattern()) {
    url_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_pattern_);
  }
  ::memcpy(&semantics_, &from.semantics_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_case_) -
    reinterpret_cast<char*>(&semantics_)) + sizeof(match_case_));
  // @@protoc_insertion_point(copy_constructor:url_pattern_index.proto.UrlRule)
}

void UrlRule::SharedCtor() {
  _cached_size_ = 0;
  url_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&semantics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_case_) -
      reinterpret_cast<char*>(&semantics_)) + sizeof(match_case_));
}

UrlRule::~UrlRule() {
  // @@protoc_insertion_point(destructor:url_pattern_index.proto.UrlRule)
  SharedDtor();
}

void UrlRule::SharedDtor() {
  url_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UrlRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UrlRule& UrlRule::default_instance() {
  protobuf_rules_2eproto::InitDefaults();
  return *internal_default_instance();
}

UrlRule* UrlRule::New(::google::protobuf::Arena* arena) const {
  UrlRule* n = new UrlRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UrlRule::Clear() {
// @@protoc_insertion_point(message_clear_start:url_pattern_index.proto.UrlRule)
  domains_.Clear();
  if (has_url_pattern()) {
    GOOGLE_DCHECK(!url_pattern_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_pattern_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&semantics_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&anchor_right_) -
        reinterpret_cast<char*>(&semantics_)) + sizeof(anchor_right_));
  }
  match_case_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UrlRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:url_pattern_index.proto.UrlRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::url_pattern_index::proto::RuleSemantics_IsValid(value)) {
            set_semantics(static_cast< ::url_pattern_index::proto::RuleSemantics >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .url_pattern_index.proto.SourceType source_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::url_pattern_index::proto::SourceType_IsValid(value)) {
            set_source_type(static_cast< ::url_pattern_index::proto::SourceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 element_types = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_element_types();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &element_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 activation_types = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_activation_types();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activation_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .url_pattern_index.proto.DomainListItem domains = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domains()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .url_pattern_index.proto.UrlPatternType url_pattern_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::url_pattern_index::proto::UrlPatternType_IsValid(value)) {
            set_url_pattern_type(static_cast< ::url_pattern_index::proto::UrlPatternType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .url_pattern_index.proto.AnchorType anchor_left = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::url_pattern_index::proto::AnchorType_IsValid(value)) {
            set_anchor_left(static_cast< ::url_pattern_index::proto::AnchorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .url_pattern_index.proto.AnchorType anchor_right = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::url_pattern_index::proto::AnchorType_IsValid(value)) {
            set_anchor_right(static_cast< ::url_pattern_index::proto::AnchorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool match_case = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_match_case();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_case_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_pattern = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_pattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:url_pattern_index.proto.UrlRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:url_pattern_index.proto.UrlRule)
  return false;
#undef DO_
}

void UrlRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:url_pattern_index.proto.UrlRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->semantics(), output);
  }

  // optional .url_pattern_index.proto.SourceType source_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source_type(), output);
  }

  // optional int32 element_types = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->element_types(), output);
  }

  // optional int32 activation_types = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->activation_types(), output);
  }

  // repeated .url_pattern_index.proto.DomainListItem domains = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->domains_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->domains(static_cast<int>(i)), output);
  }

  // optional .url_pattern_index.proto.UrlPatternType url_pattern_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->url_pattern_type(), output);
  }

  // optional .url_pattern_index.proto.AnchorType anchor_left = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->anchor_left(), output);
  }

  // optional .url_pattern_index.proto.AnchorType anchor_right = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->anchor_right(), output);
  }

  // optional bool match_case = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->match_case(), output);
  }

  // optional string url_pattern = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->url_pattern(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:url_pattern_index.proto.UrlRule)
}

size_t UrlRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:url_pattern_index.proto.UrlRule)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .url_pattern_index.proto.DomainListItem domains = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->domains_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->domains(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string url_pattern = 10;
    if (has_url_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_pattern());
    }

    // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
    if (has_semantics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->semantics());
    }

    // optional .url_pattern_index.proto.SourceType source_type = 2;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_type());
    }

    // optional int32 element_types = 3;
    if (has_element_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->element_types());
    }

    // optional int32 activation_types = 4;
    if (has_activation_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activation_types());
    }

    // optional .url_pattern_index.proto.UrlPatternType url_pattern_type = 6;
    if (has_url_pattern_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->url_pattern_type());
    }

    // optional .url_pattern_index.proto.AnchorType anchor_left = 7;
    if (has_anchor_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->anchor_left());
    }

    // optional .url_pattern_index.proto.AnchorType anchor_right = 8;
    if (has_anchor_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->anchor_right());
    }

  }
  // optional bool match_case = 9;
  if (has_match_case()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlRule::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UrlRule*>(&from));
}

void UrlRule::MergeFrom(const UrlRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:url_pattern_index.proto.UrlRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url_pattern();
      url_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_pattern_);
    }
    if (cached_has_bits & 0x00000002u) {
      semantics_ = from.semantics_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_type_ = from.source_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      element_types_ = from.element_types_;
    }
    if (cached_has_bits & 0x00000010u) {
      activation_types_ = from.activation_types_;
    }
    if (cached_has_bits & 0x00000020u) {
      url_pattern_type_ = from.url_pattern_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      anchor_left_ = from.anchor_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      anchor_right_ = from.anchor_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_match_case(from.match_case());
  }
}

void UrlRule::CopyFrom(const UrlRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:url_pattern_index.proto.UrlRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlRule::IsInitialized() const {
  return true;
}

void UrlRule::Swap(UrlRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlRule::InternalSwap(UrlRule* other) {
  domains_.InternalSwap(&other->domains_);
  url_pattern_.Swap(&other->url_pattern_);
  std::swap(semantics_, other->semantics_);
  std::swap(source_type_, other->source_type_);
  std::swap(element_types_, other->element_types_);
  std::swap(activation_types_, other->activation_types_);
  std::swap(url_pattern_type_, other->url_pattern_type_);
  std::swap(anchor_left_, other->anchor_left_);
  std::swap(anchor_right_, other->anchor_right_);
  std::swap(match_case_, other->match_case_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UrlRule::GetTypeName() const {
  return "url_pattern_index.proto.UrlRule";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UrlRule

// optional .url_pattern_index.proto.RuleSemantics semantics = 1;
bool UrlRule::has_semantics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UrlRule::set_has_semantics() {
  _has_bits_[0] |= 0x00000002u;
}
void UrlRule::clear_has_semantics() {
  _has_bits_[0] &= ~0x00000002u;
}
void UrlRule::clear_semantics() {
  semantics_ = 0;
  clear_has_semantics();
}
::url_pattern_index::proto::RuleSemantics UrlRule::semantics() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.UrlRule.semantics)
  return static_cast< ::url_pattern_index::proto::RuleSemantics >(semantics_);
}
void UrlRule::set_semantics(::url_pattern_index::proto::RuleSemantics value) {
  assert(::url_pattern_index::proto::RuleSemantics_IsValid(value));
  set_has_semantics();
  semantics_ = value;
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.UrlRule.semantics)
}

// optional .url_pattern_index.proto.SourceType source_type = 2;
bool UrlRule::has_source_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UrlRule::set_has_source_type() {
  _has_bits_[0] |= 0x00000004u;
}
void UrlRule::clear_has_source_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void UrlRule::clear_source_type() {
  source_type_ = 0;
  clear_has_source_type();
}
::url_pattern_index::proto::SourceType UrlRule::source_type() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.UrlRule.source_type)
  return static_cast< ::url_pattern_index::proto::SourceType >(source_type_);
}
void UrlRule::set_source_type(::url_pattern_index::proto::SourceType value) {
  assert(::url_pattern_index::proto::SourceType_IsValid(value));
  set_has_source_type();
  source_type_ = value;
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.UrlRule.source_type)
}

// optional int32 element_types = 3;
bool UrlRule::has_element_types() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UrlRule::set_has_element_types() {
  _has_bits_[0] |= 0x00000008u;
}
void UrlRule::clear_has_element_types() {
  _has_bits_[0] &= ~0x00000008u;
}
void UrlRule::clear_element_types() {
  element_types_ = 0;
  clear_has_element_types();
}
::google::protobuf::int32 UrlRule::element_types() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.UrlRule.element_types)
  return element_types_;
}
void UrlRule::set_element_types(::google::protobuf::int32 value) {
  set_has_element_types();
  element_types_ = value;
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.UrlRule.element_types)
}

// optional int32 activation_types = 4;
bool UrlRule::has_activation_types() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UrlRule::set_has_activation_types() {
  _has_bits_[0] |= 0x00000010u;
}
void UrlRule::clear_has_activation_types() {
  _has_bits_[0] &= ~0x00000010u;
}
void UrlRule::clear_activation_types() {
  activation_types_ = 0;
  clear_has_activation_types();
}
::google::protobuf::int32 UrlRule::activation_types() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.UrlRule.activation_types)
  return activation_types_;
}
void UrlRule::set_activation_types(::google::protobuf::int32 value) {
  set_has_activation_types();
  activation_types_ = value;
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.UrlRule.activation_types)
}

// repeated .url_pattern_index.proto.DomainListItem domains = 5;
int UrlRule::domains_size() const {
  return domains_.size();
}
void UrlRule::clear_domains() {
  domains_.Clear();
}
const ::url_pattern_index::proto::DomainListItem& UrlRule::domains(int index) const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.UrlRule.domains)
  return domains_.Get(index);
}
::url_pattern_index::proto::DomainListItem* UrlRule::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:url_pattern_index.proto.UrlRule.domains)
  return domains_.Mutable(index);
}
::url_pattern_index::proto::DomainListItem* UrlRule::add_domains() {
  // @@protoc_insertion_point(field_add:url_pattern_index.proto.UrlRule.domains)
  return domains_.Add();
}
::google::protobuf::RepeatedPtrField< ::url_pattern_index::proto::DomainListItem >*
UrlRule::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:url_pattern_index.proto.UrlRule.domains)
  return &domains_;
}
const ::google::protobuf::RepeatedPtrField< ::url_pattern_index::proto::DomainListItem >&
UrlRule::domains() const {
  // @@protoc_insertion_point(field_list:url_pattern_index.proto.UrlRule.domains)
  return domains_;
}

// optional .url_pattern_index.proto.UrlPatternType url_pattern_type = 6;
bool UrlRule::has_url_pattern_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UrlRule::set_has_url_pattern_type() {
  _has_bits_[0] |= 0x00000020u;
}
void UrlRule::clear_has_url_pattern_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void UrlRule::clear_url_pattern_type() {
  url_pattern_type_ = 0;
  clear_has_url_pattern_type();
}
::url_pattern_index::proto::UrlPatternType UrlRule::url_pattern_type() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.UrlRule.url_pattern_type)
  return static_cast< ::url_pattern_index::proto::UrlPatternType >(url_pattern_type_);
}
void UrlRule::set_url_pattern_type(::url_pattern_index::proto::UrlPatternType value) {
  assert(::url_pattern_index::proto::UrlPatternType_IsValid(value));
  set_has_url_pattern_type();
  url_pattern_type_ = value;
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.UrlRule.url_pattern_type)
}

// optional .url_pattern_index.proto.AnchorType anchor_left = 7;
bool UrlRule::has_anchor_left() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UrlRule::set_has_anchor_left() {
  _has_bits_[0] |= 0x00000040u;
}
void UrlRule::clear_has_anchor_left() {
  _has_bits_[0] &= ~0x00000040u;
}
void UrlRule::clear_anchor_left() {
  anchor_left_ = 0;
  clear_has_anchor_left();
}
::url_pattern_index::proto::AnchorType UrlRule::anchor_left() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.UrlRule.anchor_left)
  return static_cast< ::url_pattern_index::proto::AnchorType >(anchor_left_);
}
void UrlRule::set_anchor_left(::url_pattern_index::proto::AnchorType value) {
  assert(::url_pattern_index::proto::AnchorType_IsValid(value));
  set_has_anchor_left();
  anchor_left_ = value;
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.UrlRule.anchor_left)
}

// optional .url_pattern_index.proto.AnchorType anchor_right = 8;
bool UrlRule::has_anchor_right() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UrlRule::set_has_anchor_right() {
  _has_bits_[0] |= 0x00000080u;
}
void UrlRule::clear_has_anchor_right() {
  _has_bits_[0] &= ~0x00000080u;
}
void UrlRule::clear_anchor_right() {
  anchor_right_ = 0;
  clear_has_anchor_right();
}
::url_pattern_index::proto::AnchorType UrlRule::anchor_right() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.UrlRule.anchor_right)
  return static_cast< ::url_pattern_index::proto::AnchorType >(anchor_right_);
}
void UrlRule::set_anchor_right(::url_pattern_index::proto::AnchorType value) {
  assert(::url_pattern_index::proto::AnchorType_IsValid(value));
  set_has_anchor_right();
  anchor_right_ = value;
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.UrlRule.anchor_right)
}

// optional bool match_case = 9;
bool UrlRule::has_match_case() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UrlRule::set_has_match_case() {
  _has_bits_[0] |= 0x00000100u;
}
void UrlRule::clear_has_match_case() {
  _has_bits_[0] &= ~0x00000100u;
}
void UrlRule::clear_match_case() {
  match_case_ = false;
  clear_has_match_case();
}
bool UrlRule::match_case() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.UrlRule.match_case)
  return match_case_;
}
void UrlRule::set_match_case(bool value) {
  set_has_match_case();
  match_case_ = value;
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.UrlRule.match_case)
}

// optional string url_pattern = 10;
bool UrlRule::has_url_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UrlRule::set_has_url_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
void UrlRule::clear_has_url_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
void UrlRule::clear_url_pattern() {
  url_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_pattern();
}
const ::std::string& UrlRule::url_pattern() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.UrlRule.url_pattern)
  return url_pattern_.GetNoArena();
}
void UrlRule::set_url_pattern(const ::std::string& value) {
  set_has_url_pattern();
  url_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.UrlRule.url_pattern)
}
#if LANG_CXX11
void UrlRule::set_url_pattern(::std::string&& value) {
  set_has_url_pattern();
  url_pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:url_pattern_index.proto.UrlRule.url_pattern)
}
#endif
void UrlRule::set_url_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_pattern();
  url_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:url_pattern_index.proto.UrlRule.url_pattern)
}
void UrlRule::set_url_pattern(const char* value, size_t size) {
  set_has_url_pattern();
  url_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:url_pattern_index.proto.UrlRule.url_pattern)
}
::std::string* UrlRule::mutable_url_pattern() {
  set_has_url_pattern();
  // @@protoc_insertion_point(field_mutable:url_pattern_index.proto.UrlRule.url_pattern)
  return url_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlRule::release_url_pattern() {
  // @@protoc_insertion_point(field_release:url_pattern_index.proto.UrlRule.url_pattern)
  clear_has_url_pattern();
  return url_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlRule::set_allocated_url_pattern(::std::string* url_pattern) {
  if (url_pattern != NULL) {
    set_has_url_pattern();
  } else {
    clear_has_url_pattern();
  }
  url_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_pattern);
  // @@protoc_insertion_point(field_set_allocated:url_pattern_index.proto.UrlRule.url_pattern)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CssRule::kSemanticsFieldNumber;
const int CssRule::kDomainsFieldNumber;
const int CssRule::kCssSelectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CssRule::CssRule()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rules_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:url_pattern_index.proto.CssRule)
}
CssRule::CssRule(const CssRule& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      domains_(from.domains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  css_selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_css_selector()) {
    css_selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.css_selector_);
  }
  semantics_ = from.semantics_;
  // @@protoc_insertion_point(copy_constructor:url_pattern_index.proto.CssRule)
}

void CssRule::SharedCtor() {
  _cached_size_ = 0;
  css_selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  semantics_ = 0;
}

CssRule::~CssRule() {
  // @@protoc_insertion_point(destructor:url_pattern_index.proto.CssRule)
  SharedDtor();
}

void CssRule::SharedDtor() {
  css_selector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CssRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CssRule& CssRule::default_instance() {
  protobuf_rules_2eproto::InitDefaults();
  return *internal_default_instance();
}

CssRule* CssRule::New(::google::protobuf::Arena* arena) const {
  CssRule* n = new CssRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CssRule::Clear() {
// @@protoc_insertion_point(message_clear_start:url_pattern_index.proto.CssRule)
  domains_.Clear();
  if (has_css_selector()) {
    GOOGLE_DCHECK(!css_selector_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*css_selector_.UnsafeRawStringPointer())->clear();
  }
  semantics_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CssRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:url_pattern_index.proto.CssRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::url_pattern_index::proto::RuleSemantics_IsValid(value)) {
            set_semantics(static_cast< ::url_pattern_index::proto::RuleSemantics >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .url_pattern_index.proto.DomainListItem domains = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domains()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string css_selector = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_css_selector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:url_pattern_index.proto.CssRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:url_pattern_index.proto.CssRule)
  return false;
#undef DO_
}

void CssRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:url_pattern_index.proto.CssRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->semantics(), output);
  }

  // repeated .url_pattern_index.proto.DomainListItem domains = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->domains_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->domains(static_cast<int>(i)), output);
  }

  // optional string css_selector = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->css_selector(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:url_pattern_index.proto.CssRule)
}

size_t CssRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:url_pattern_index.proto.CssRule)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .url_pattern_index.proto.DomainListItem domains = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->domains_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->domains(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string css_selector = 3;
    if (has_css_selector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->css_selector());
    }

    // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
    if (has_semantics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->semantics());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CssRule::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CssRule*>(&from));
}

void CssRule::MergeFrom(const CssRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:url_pattern_index.proto.CssRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_css_selector();
      css_selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.css_selector_);
    }
    if (cached_has_bits & 0x00000002u) {
      semantics_ = from.semantics_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CssRule::CopyFrom(const CssRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:url_pattern_index.proto.CssRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CssRule::IsInitialized() const {
  return true;
}

void CssRule::Swap(CssRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CssRule::InternalSwap(CssRule* other) {
  domains_.InternalSwap(&other->domains_);
  css_selector_.Swap(&other->css_selector_);
  std::swap(semantics_, other->semantics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CssRule::GetTypeName() const {
  return "url_pattern_index.proto.CssRule";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CssRule

// optional .url_pattern_index.proto.RuleSemantics semantics = 1;
bool CssRule::has_semantics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CssRule::set_has_semantics() {
  _has_bits_[0] |= 0x00000002u;
}
void CssRule::clear_has_semantics() {
  _has_bits_[0] &= ~0x00000002u;
}
void CssRule::clear_semantics() {
  semantics_ = 0;
  clear_has_semantics();
}
::url_pattern_index::proto::RuleSemantics CssRule::semantics() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.CssRule.semantics)
  return static_cast< ::url_pattern_index::proto::RuleSemantics >(semantics_);
}
void CssRule::set_semantics(::url_pattern_index::proto::RuleSemantics value) {
  assert(::url_pattern_index::proto::RuleSemantics_IsValid(value));
  set_has_semantics();
  semantics_ = value;
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.CssRule.semantics)
}

// repeated .url_pattern_index.proto.DomainListItem domains = 2;
int CssRule::domains_size() const {
  return domains_.size();
}
void CssRule::clear_domains() {
  domains_.Clear();
}
const ::url_pattern_index::proto::DomainListItem& CssRule::domains(int index) const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.CssRule.domains)
  return domains_.Get(index);
}
::url_pattern_index::proto::DomainListItem* CssRule::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:url_pattern_index.proto.CssRule.domains)
  return domains_.Mutable(index);
}
::url_pattern_index::proto::DomainListItem* CssRule::add_domains() {
  // @@protoc_insertion_point(field_add:url_pattern_index.proto.CssRule.domains)
  return domains_.Add();
}
::google::protobuf::RepeatedPtrField< ::url_pattern_index::proto::DomainListItem >*
CssRule::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:url_pattern_index.proto.CssRule.domains)
  return &domains_;
}
const ::google::protobuf::RepeatedPtrField< ::url_pattern_index::proto::DomainListItem >&
CssRule::domains() const {
  // @@protoc_insertion_point(field_list:url_pattern_index.proto.CssRule.domains)
  return domains_;
}

// optional string css_selector = 3;
bool CssRule::has_css_selector() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CssRule::set_has_css_selector() {
  _has_bits_[0] |= 0x00000001u;
}
void CssRule::clear_has_css_selector() {
  _has_bits_[0] &= ~0x00000001u;
}
void CssRule::clear_css_selector() {
  css_selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_css_selector();
}
const ::std::string& CssRule::css_selector() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.CssRule.css_selector)
  return css_selector_.GetNoArena();
}
void CssRule::set_css_selector(const ::std::string& value) {
  set_has_css_selector();
  css_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.CssRule.css_selector)
}
#if LANG_CXX11
void CssRule::set_css_selector(::std::string&& value) {
  set_has_css_selector();
  css_selector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:url_pattern_index.proto.CssRule.css_selector)
}
#endif
void CssRule::set_css_selector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_css_selector();
  css_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:url_pattern_index.proto.CssRule.css_selector)
}
void CssRule::set_css_selector(const char* value, size_t size) {
  set_has_css_selector();
  css_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:url_pattern_index.proto.CssRule.css_selector)
}
::std::string* CssRule::mutable_css_selector() {
  set_has_css_selector();
  // @@protoc_insertion_point(field_mutable:url_pattern_index.proto.CssRule.css_selector)
  return css_selector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CssRule::release_css_selector() {
  // @@protoc_insertion_point(field_release:url_pattern_index.proto.CssRule.css_selector)
  clear_has_css_selector();
  return css_selector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CssRule::set_allocated_css_selector(::std::string* css_selector) {
  if (css_selector != NULL) {
    set_has_css_selector();
  } else {
    clear_has_css_selector();
  }
  css_selector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), css_selector);
  // @@protoc_insertion_point(field_set_allocated:url_pattern_index.proto.CssRule.css_selector)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Comment::kTextFieldNumber;
const int Comment::kKeyFieldNumber;
const int Comment::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Comment::Comment()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rules_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:url_pattern_index.proto.Comment)
}
Comment::Comment(const Comment& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:url_pattern_index.proto.Comment)
}

void Comment::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Comment::~Comment() {
  // @@protoc_insertion_point(destructor:url_pattern_index.proto.Comment)
  SharedDtor();
}

void Comment::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Comment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Comment& Comment::default_instance() {
  protobuf_rules_2eproto::InitDefaults();
  return *internal_default_instance();
}

Comment* Comment::New(::google::protobuf::Arena* arena) const {
  Comment* n = new Comment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Comment::Clear() {
// @@protoc_insertion_point(message_clear_start:url_pattern_index.proto.Comment)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_text()) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Comment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:url_pattern_index.proto.Comment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:url_pattern_index.proto.Comment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:url_pattern_index.proto.Comment)
  return false;
#undef DO_
}

void Comment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:url_pattern_index.proto.Comment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:url_pattern_index.proto.Comment)
}

size_t Comment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:url_pattern_index.proto.Comment)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Comment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Comment*>(&from));
}

void Comment::MergeFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:url_pattern_index.proto.Comment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void Comment::CopyFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:url_pattern_index.proto.Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comment::IsInitialized() const {
  return true;
}

void Comment::Swap(Comment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Comment::InternalSwap(Comment* other) {
  text_.Swap(&other->text_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Comment::GetTypeName() const {
  return "url_pattern_index.proto.Comment";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Comment

// optional string text = 1;
bool Comment::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Comment::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void Comment::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void Comment::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Comment::text() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.Comment.text)
  return text_.GetNoArena();
}
void Comment::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.Comment.text)
}
#if LANG_CXX11
void Comment::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:url_pattern_index.proto.Comment.text)
}
#endif
void Comment::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:url_pattern_index.proto.Comment.text)
}
void Comment::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:url_pattern_index.proto.Comment.text)
}
::std::string* Comment::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:url_pattern_index.proto.Comment.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Comment::release_text() {
  // @@protoc_insertion_point(field_release:url_pattern_index.proto.Comment.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Comment::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:url_pattern_index.proto.Comment.text)
}

// optional string key = 2;
bool Comment::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Comment::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void Comment::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void Comment::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Comment::key() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.Comment.key)
  return key_.GetNoArena();
}
void Comment::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.Comment.key)
}
#if LANG_CXX11
void Comment::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:url_pattern_index.proto.Comment.key)
}
#endif
void Comment::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:url_pattern_index.proto.Comment.key)
}
void Comment::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:url_pattern_index.proto.Comment.key)
}
::std::string* Comment::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:url_pattern_index.proto.Comment.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Comment::release_key() {
  // @@protoc_insertion_point(field_release:url_pattern_index.proto.Comment.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Comment::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:url_pattern_index.proto.Comment.key)
}

// optional string value = 3;
bool Comment::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Comment::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void Comment::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void Comment::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& Comment::value() const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.Comment.value)
  return value_.GetNoArena();
}
void Comment::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:url_pattern_index.proto.Comment.value)
}
#if LANG_CXX11
void Comment::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:url_pattern_index.proto.Comment.value)
}
#endif
void Comment::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:url_pattern_index.proto.Comment.value)
}
void Comment::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:url_pattern_index.proto.Comment.value)
}
::std::string* Comment::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:url_pattern_index.proto.Comment.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Comment::release_value() {
  // @@protoc_insertion_point(field_release:url_pattern_index.proto.Comment.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Comment::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:url_pattern_index.proto.Comment.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilteringRules::kUrlRulesFieldNumber;
const int FilteringRules::kCssRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilteringRules::FilteringRules()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rules_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:url_pattern_index.proto.FilteringRules)
}
FilteringRules::FilteringRules(const FilteringRules& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      url_rules_(from.url_rules_),
      css_rules_(from.css_rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:url_pattern_index.proto.FilteringRules)
}

void FilteringRules::SharedCtor() {
  _cached_size_ = 0;
}

FilteringRules::~FilteringRules() {
  // @@protoc_insertion_point(destructor:url_pattern_index.proto.FilteringRules)
  SharedDtor();
}

void FilteringRules::SharedDtor() {
}

void FilteringRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FilteringRules& FilteringRules::default_instance() {
  protobuf_rules_2eproto::InitDefaults();
  return *internal_default_instance();
}

FilteringRules* FilteringRules::New(::google::protobuf::Arena* arena) const {
  FilteringRules* n = new FilteringRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilteringRules::Clear() {
// @@protoc_insertion_point(message_clear_start:url_pattern_index.proto.FilteringRules)
  url_rules_.Clear();
  css_rules_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FilteringRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:url_pattern_index.proto.FilteringRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .url_pattern_index.proto.UrlRule url_rules = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_url_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .url_pattern_index.proto.CssRule css_rules = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_css_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:url_pattern_index.proto.FilteringRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:url_pattern_index.proto.FilteringRules)
  return false;
#undef DO_
}

void FilteringRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:url_pattern_index.proto.FilteringRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .url_pattern_index.proto.UrlRule url_rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->url_rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->url_rules(static_cast<int>(i)), output);
  }

  // repeated .url_pattern_index.proto.CssRule css_rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->css_rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->css_rules(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:url_pattern_index.proto.FilteringRules)
}

size_t FilteringRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:url_pattern_index.proto.FilteringRules)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .url_pattern_index.proto.UrlRule url_rules = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->url_rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->url_rules(static_cast<int>(i)));
    }
  }

  // repeated .url_pattern_index.proto.CssRule css_rules = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->css_rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->css_rules(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilteringRules::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FilteringRules*>(&from));
}

void FilteringRules::MergeFrom(const FilteringRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:url_pattern_index.proto.FilteringRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_rules_.MergeFrom(from.url_rules_);
  css_rules_.MergeFrom(from.css_rules_);
}

void FilteringRules::CopyFrom(const FilteringRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:url_pattern_index.proto.FilteringRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilteringRules::IsInitialized() const {
  return true;
}

void FilteringRules::Swap(FilteringRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilteringRules::InternalSwap(FilteringRules* other) {
  url_rules_.InternalSwap(&other->url_rules_);
  css_rules_.InternalSwap(&other->css_rules_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FilteringRules::GetTypeName() const {
  return "url_pattern_index.proto.FilteringRules";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilteringRules

// repeated .url_pattern_index.proto.UrlRule url_rules = 1;
int FilteringRules::url_rules_size() const {
  return url_rules_.size();
}
void FilteringRules::clear_url_rules() {
  url_rules_.Clear();
}
const ::url_pattern_index::proto::UrlRule& FilteringRules::url_rules(int index) const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.FilteringRules.url_rules)
  return url_rules_.Get(index);
}
::url_pattern_index::proto::UrlRule* FilteringRules::mutable_url_rules(int index) {
  // @@protoc_insertion_point(field_mutable:url_pattern_index.proto.FilteringRules.url_rules)
  return url_rules_.Mutable(index);
}
::url_pattern_index::proto::UrlRule* FilteringRules::add_url_rules() {
  // @@protoc_insertion_point(field_add:url_pattern_index.proto.FilteringRules.url_rules)
  return url_rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::url_pattern_index::proto::UrlRule >*
FilteringRules::mutable_url_rules() {
  // @@protoc_insertion_point(field_mutable_list:url_pattern_index.proto.FilteringRules.url_rules)
  return &url_rules_;
}
const ::google::protobuf::RepeatedPtrField< ::url_pattern_index::proto::UrlRule >&
FilteringRules::url_rules() const {
  // @@protoc_insertion_point(field_list:url_pattern_index.proto.FilteringRules.url_rules)
  return url_rules_;
}

// repeated .url_pattern_index.proto.CssRule css_rules = 2;
int FilteringRules::css_rules_size() const {
  return css_rules_.size();
}
void FilteringRules::clear_css_rules() {
  css_rules_.Clear();
}
const ::url_pattern_index::proto::CssRule& FilteringRules::css_rules(int index) const {
  // @@protoc_insertion_point(field_get:url_pattern_index.proto.FilteringRules.css_rules)
  return css_rules_.Get(index);
}
::url_pattern_index::proto::CssRule* FilteringRules::mutable_css_rules(int index) {
  // @@protoc_insertion_point(field_mutable:url_pattern_index.proto.FilteringRules.css_rules)
  return css_rules_.Mutable(index);
}
::url_pattern_index::proto::CssRule* FilteringRules::add_css_rules() {
  // @@protoc_insertion_point(field_add:url_pattern_index.proto.FilteringRules.css_rules)
  return css_rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::url_pattern_index::proto::CssRule >*
FilteringRules::mutable_css_rules() {
  // @@protoc_insertion_point(field_mutable_list:url_pattern_index.proto.FilteringRules.css_rules)
  return &css_rules_;
}
const ::google::protobuf::RepeatedPtrField< ::url_pattern_index::proto::CssRule >&
FilteringRules::css_rules() const {
  // @@protoc_insertion_point(field_list:url_pattern_index.proto.FilteringRules.css_rules)
  return css_rules_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace url_pattern_index

// @@protoc_insertion_point(global_scope)
