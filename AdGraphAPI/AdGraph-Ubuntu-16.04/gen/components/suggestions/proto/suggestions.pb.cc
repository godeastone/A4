// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suggestions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "suggestions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace suggestions {
class SuggestionsProfileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SuggestionsProfile> {
} _SuggestionsProfile_default_instance_;
class ChromeSuggestionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeSuggestion> {
} _ChromeSuggestion_default_instance_;
class SuggestionsBlacklistDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SuggestionsBlacklist> {
} _SuggestionsBlacklist_default_instance_;
class ImageDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageData> {
} _ImageData_default_instance_;

namespace protobuf_suggestions_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SuggestionsProfile_default_instance_.Shutdown();
  _ChromeSuggestion_default_instance_.Shutdown();
  _SuggestionsBlacklist_default_instance_.Shutdown();
  _ImageData_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SuggestionsProfile_default_instance_.DefaultConstruct();
  _ChromeSuggestion_default_instance_.DefaultConstruct();
  _SuggestionsBlacklist_default_instance_.DefaultConstruct();
  _ImageData_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_suggestions_2eproto

bool ProviderId_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggestionsProfile::kSuggestionsFieldNumber;
const int SuggestionsProfile::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggestionsProfile::SuggestionsProfile()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggestions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suggestions.SuggestionsProfile)
}
SuggestionsProfile::SuggestionsProfile(const SuggestionsProfile& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      suggestions_(from.suggestions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:suggestions.SuggestionsProfile)
}

void SuggestionsProfile::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
}

SuggestionsProfile::~SuggestionsProfile() {
  // @@protoc_insertion_point(destructor:suggestions.SuggestionsProfile)
  SharedDtor();
}

void SuggestionsProfile::SharedDtor() {
}

void SuggestionsProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SuggestionsProfile& SuggestionsProfile::default_instance() {
  protobuf_suggestions_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggestionsProfile* SuggestionsProfile::New(::google::protobuf::Arena* arena) const {
  SuggestionsProfile* n = new SuggestionsProfile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggestionsProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:suggestions.SuggestionsProfile)
  suggestions_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggestionsProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:suggestions.SuggestionsProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .suggestions.ChromeSuggestion suggestions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suggestions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suggestions.SuggestionsProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suggestions.SuggestionsProfile)
  return false;
#undef DO_
}

void SuggestionsProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suggestions.SuggestionsProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .suggestions.ChromeSuggestion suggestions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->suggestions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->suggestions(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->timestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suggestions.SuggestionsProfile)
}

size_t SuggestionsProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suggestions.SuggestionsProfile)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .suggestions.ChromeSuggestion suggestions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->suggestions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suggestions(static_cast<int>(i)));
    }
  }

  // optional int64 timestamp = 16;
  if (has_timestamp()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggestionsProfile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SuggestionsProfile*>(&from));
}

void SuggestionsProfile::MergeFrom(const SuggestionsProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suggestions.SuggestionsProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  suggestions_.MergeFrom(from.suggestions_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void SuggestionsProfile::CopyFrom(const SuggestionsProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suggestions.SuggestionsProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestionsProfile::IsInitialized() const {
  return true;
}

void SuggestionsProfile::Swap(SuggestionsProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggestionsProfile::InternalSwap(SuggestionsProfile* other) {
  suggestions_.InternalSwap(&other->suggestions_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SuggestionsProfile::GetTypeName() const {
  return "suggestions.SuggestionsProfile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggestionsProfile

// repeated .suggestions.ChromeSuggestion suggestions = 1;
int SuggestionsProfile::suggestions_size() const {
  return suggestions_.size();
}
void SuggestionsProfile::clear_suggestions() {
  suggestions_.Clear();
}
const ::suggestions::ChromeSuggestion& SuggestionsProfile::suggestions(int index) const {
  // @@protoc_insertion_point(field_get:suggestions.SuggestionsProfile.suggestions)
  return suggestions_.Get(index);
}
::suggestions::ChromeSuggestion* SuggestionsProfile::mutable_suggestions(int index) {
  // @@protoc_insertion_point(field_mutable:suggestions.SuggestionsProfile.suggestions)
  return suggestions_.Mutable(index);
}
::suggestions::ChromeSuggestion* SuggestionsProfile::add_suggestions() {
  // @@protoc_insertion_point(field_add:suggestions.SuggestionsProfile.suggestions)
  return suggestions_.Add();
}
::google::protobuf::RepeatedPtrField< ::suggestions::ChromeSuggestion >*
SuggestionsProfile::mutable_suggestions() {
  // @@protoc_insertion_point(field_mutable_list:suggestions.SuggestionsProfile.suggestions)
  return &suggestions_;
}
const ::google::protobuf::RepeatedPtrField< ::suggestions::ChromeSuggestion >&
SuggestionsProfile::suggestions() const {
  // @@protoc_insertion_point(field_list:suggestions.SuggestionsProfile.suggestions)
  return suggestions_;
}

// optional int64 timestamp = 16;
bool SuggestionsProfile::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggestionsProfile::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggestionsProfile::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggestionsProfile::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 SuggestionsProfile::timestamp() const {
  // @@protoc_insertion_point(field_get:suggestions.SuggestionsProfile.timestamp)
  return timestamp_;
}
void SuggestionsProfile::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:suggestions.SuggestionsProfile.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeSuggestion::kUrlFieldNumber;
const int ChromeSuggestion::kTitleFieldNumber;
const int ChromeSuggestion::kFaviconUrlFieldNumber;
const int ChromeSuggestion::kThumbnailFieldNumber;
const int ChromeSuggestion::kProvidersFieldNumber;
const int ChromeSuggestion::kExpiryTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeSuggestion::ChromeSuggestion()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggestions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suggestions.ChromeSuggestion)
}
ChromeSuggestion::ChromeSuggestion(const ChromeSuggestion& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      providers_(from.providers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  favicon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_favicon_url()) {
    favicon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_url_);
  }
  thumbnail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thumbnail()) {
    thumbnail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_);
  }
  expiry_ts_ = from.expiry_ts_;
  // @@protoc_insertion_point(copy_constructor:suggestions.ChromeSuggestion)
}

void ChromeSuggestion::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiry_ts_ = GOOGLE_LONGLONG(0);
}

ChromeSuggestion::~ChromeSuggestion() {
  // @@protoc_insertion_point(destructor:suggestions.ChromeSuggestion)
  SharedDtor();
}

void ChromeSuggestion::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChromeSuggestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeSuggestion& ChromeSuggestion::default_instance() {
  protobuf_suggestions_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeSuggestion* ChromeSuggestion::New(::google::protobuf::Arena* arena) const {
  ChromeSuggestion* n = new ChromeSuggestion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:suggestions.ChromeSuggestion)
  providers_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_favicon_url()) {
      GOOGLE_DCHECK(!favicon_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*favicon_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_thumbnail()) {
      GOOGLE_DCHECK(!thumbnail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*thumbnail_.UnsafeRawStringPointer())->clear();
    }
  }
  expiry_ts_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeSuggestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:suggestions.ChromeSuggestion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string favicon_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thumbnail = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suggestions.ProviderId providers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::suggestions::ProviderId_IsValid(value)) {
            add_providers(static_cast< ::suggestions::ProviderId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::suggestions::ProviderId_IsValid,
                 &unknown_fields_stream,
                 this->mutable_providers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expiry_ts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_expiry_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suggestions.ChromeSuggestion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suggestions.ChromeSuggestion)
  return false;
#undef DO_
}

void ChromeSuggestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suggestions.ChromeSuggestion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string favicon_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->favicon_url(), output);
  }

  // optional string thumbnail = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->thumbnail(), output);
  }

  // repeated .suggestions.ProviderId providers = 5;
  for (int i = 0, n = this->providers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->providers(i), output);
  }

  // optional int64 expiry_ts = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->expiry_ts(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suggestions.ChromeSuggestion)
}

size_t ChromeSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suggestions.ChromeSuggestion)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .suggestions.ProviderId providers = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->providers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->providers(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string favicon_url = 3;
    if (has_favicon_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon_url());
    }

    // optional string thumbnail = 4;
    if (has_thumbnail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail());
    }

    // optional int64 expiry_ts = 7;
    if (has_expiry_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry_ts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeSuggestion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeSuggestion*>(&from));
}

void ChromeSuggestion::MergeFrom(const ChromeSuggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suggestions.ChromeSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  providers_.MergeFrom(from.providers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_favicon_url();
      favicon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_thumbnail();
      thumbnail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_);
    }
    if (cached_has_bits & 0x00000010u) {
      expiry_ts_ = from.expiry_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeSuggestion::CopyFrom(const ChromeSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suggestions.ChromeSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSuggestion::IsInitialized() const {
  return true;
}

void ChromeSuggestion::Swap(ChromeSuggestion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeSuggestion::InternalSwap(ChromeSuggestion* other) {
  providers_.InternalSwap(&other->providers_);
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  favicon_url_.Swap(&other->favicon_url_);
  thumbnail_.Swap(&other->thumbnail_);
  std::swap(expiry_ts_, other->expiry_ts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeSuggestion::GetTypeName() const {
  return "suggestions.ChromeSuggestion";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeSuggestion

// optional string url = 1;
bool ChromeSuggestion::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeSuggestion::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeSuggestion::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeSuggestion::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ChromeSuggestion::url() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.url)
  return url_.GetNoArena();
}
void ChromeSuggestion::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.url)
}
#if LANG_CXX11
void ChromeSuggestion::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ChromeSuggestion.url)
}
#endif
void ChromeSuggestion::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.url)
}
void ChromeSuggestion::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.url)
}
::std::string* ChromeSuggestion::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeSuggestion::release_url() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeSuggestion::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.url)
}

// optional string title = 2;
bool ChromeSuggestion::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeSuggestion::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromeSuggestion::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromeSuggestion::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& ChromeSuggestion::title() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.title)
  return title_.GetNoArena();
}
void ChromeSuggestion::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.title)
}
#if LANG_CXX11
void ChromeSuggestion::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ChromeSuggestion.title)
}
#endif
void ChromeSuggestion::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.title)
}
void ChromeSuggestion::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.title)
}
::std::string* ChromeSuggestion::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeSuggestion::release_title() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeSuggestion::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.title)
}

// optional string favicon_url = 3;
bool ChromeSuggestion::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChromeSuggestion::set_has_favicon_url() {
  _has_bits_[0] |= 0x00000004u;
}
void ChromeSuggestion::clear_has_favicon_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChromeSuggestion::clear_favicon_url() {
  favicon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon_url();
}
const ::std::string& ChromeSuggestion::favicon_url() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.favicon_url)
  return favicon_url_.GetNoArena();
}
void ChromeSuggestion::set_favicon_url(const ::std::string& value) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.favicon_url)
}
#if LANG_CXX11
void ChromeSuggestion::set_favicon_url(::std::string&& value) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ChromeSuggestion.favicon_url)
}
#endif
void ChromeSuggestion::set_favicon_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.favicon_url)
}
void ChromeSuggestion::set_favicon_url(const char* value, size_t size) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.favicon_url)
}
::std::string* ChromeSuggestion::mutable_favicon_url() {
  set_has_favicon_url();
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.favicon_url)
  return favicon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeSuggestion::release_favicon_url() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.favicon_url)
  clear_has_favicon_url();
  return favicon_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeSuggestion::set_allocated_favicon_url(::std::string* favicon_url) {
  if (favicon_url != NULL) {
    set_has_favicon_url();
  } else {
    clear_has_favicon_url();
  }
  favicon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.favicon_url)
}

// optional string thumbnail = 4;
bool ChromeSuggestion::has_thumbnail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChromeSuggestion::set_has_thumbnail() {
  _has_bits_[0] |= 0x00000008u;
}
void ChromeSuggestion::clear_has_thumbnail() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChromeSuggestion::clear_thumbnail() {
  thumbnail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_thumbnail();
}
const ::std::string& ChromeSuggestion::thumbnail() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.thumbnail)
  return thumbnail_.GetNoArena();
}
void ChromeSuggestion::set_thumbnail(const ::std::string& value) {
  set_has_thumbnail();
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.thumbnail)
}
#if LANG_CXX11
void ChromeSuggestion::set_thumbnail(::std::string&& value) {
  set_has_thumbnail();
  thumbnail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ChromeSuggestion.thumbnail)
}
#endif
void ChromeSuggestion::set_thumbnail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_thumbnail();
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.thumbnail)
}
void ChromeSuggestion::set_thumbnail(const char* value, size_t size) {
  set_has_thumbnail();
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.thumbnail)
}
::std::string* ChromeSuggestion::mutable_thumbnail() {
  set_has_thumbnail();
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.thumbnail)
  return thumbnail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromeSuggestion::release_thumbnail() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.thumbnail)
  clear_has_thumbnail();
  return thumbnail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromeSuggestion::set_allocated_thumbnail(::std::string* thumbnail) {
  if (thumbnail != NULL) {
    set_has_thumbnail();
  } else {
    clear_has_thumbnail();
  }
  thumbnail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.thumbnail)
}

// repeated .suggestions.ProviderId providers = 5;
int ChromeSuggestion::providers_size() const {
  return providers_.size();
}
void ChromeSuggestion::clear_providers() {
  providers_.Clear();
}
::suggestions::ProviderId ChromeSuggestion::providers(int index) const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.providers)
  return static_cast< ::suggestions::ProviderId >(providers_.Get(index));
}
void ChromeSuggestion::set_providers(int index, ::suggestions::ProviderId value) {
  assert(::suggestions::ProviderId_IsValid(value));
  providers_.Set(index, value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.providers)
}
void ChromeSuggestion::add_providers(::suggestions::ProviderId value) {
  assert(::suggestions::ProviderId_IsValid(value));
  providers_.Add(value);
  // @@protoc_insertion_point(field_add:suggestions.ChromeSuggestion.providers)
}
const ::google::protobuf::RepeatedField<int>&
ChromeSuggestion::providers() const {
  // @@protoc_insertion_point(field_list:suggestions.ChromeSuggestion.providers)
  return providers_;
}
::google::protobuf::RepeatedField<int>*
ChromeSuggestion::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:suggestions.ChromeSuggestion.providers)
  return &providers_;
}

// optional int64 expiry_ts = 7;
bool ChromeSuggestion::has_expiry_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChromeSuggestion::set_has_expiry_ts() {
  _has_bits_[0] |= 0x00000010u;
}
void ChromeSuggestion::clear_has_expiry_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChromeSuggestion::clear_expiry_ts() {
  expiry_ts_ = GOOGLE_LONGLONG(0);
  clear_has_expiry_ts();
}
::google::protobuf::int64 ChromeSuggestion::expiry_ts() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.expiry_ts)
  return expiry_ts_;
}
void ChromeSuggestion::set_expiry_ts(::google::protobuf::int64 value) {
  set_has_expiry_ts();
  expiry_ts_ = value;
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.expiry_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggestionsBlacklist::kUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggestionsBlacklist::SuggestionsBlacklist()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggestions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suggestions.SuggestionsBlacklist)
}
SuggestionsBlacklist::SuggestionsBlacklist(const SuggestionsBlacklist& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suggestions.SuggestionsBlacklist)
}

void SuggestionsBlacklist::SharedCtor() {
  _cached_size_ = 0;
}

SuggestionsBlacklist::~SuggestionsBlacklist() {
  // @@protoc_insertion_point(destructor:suggestions.SuggestionsBlacklist)
  SharedDtor();
}

void SuggestionsBlacklist::SharedDtor() {
}

void SuggestionsBlacklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SuggestionsBlacklist& SuggestionsBlacklist::default_instance() {
  protobuf_suggestions_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggestionsBlacklist* SuggestionsBlacklist::New(::google::protobuf::Arena* arena) const {
  SuggestionsBlacklist* n = new SuggestionsBlacklist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggestionsBlacklist::Clear() {
// @@protoc_insertion_point(message_clear_start:suggestions.SuggestionsBlacklist)
  urls_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggestionsBlacklist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:suggestions.SuggestionsBlacklist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string urls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suggestions.SuggestionsBlacklist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suggestions.SuggestionsBlacklist)
  return false;
#undef DO_
}

void SuggestionsBlacklist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suggestions.SuggestionsBlacklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->urls(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suggestions.SuggestionsBlacklist)
}

size_t SuggestionsBlacklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suggestions.SuggestionsBlacklist)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string urls = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggestionsBlacklist::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SuggestionsBlacklist*>(&from));
}

void SuggestionsBlacklist::MergeFrom(const SuggestionsBlacklist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suggestions.SuggestionsBlacklist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
}

void SuggestionsBlacklist::CopyFrom(const SuggestionsBlacklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suggestions.SuggestionsBlacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestionsBlacklist::IsInitialized() const {
  return true;
}

void SuggestionsBlacklist::Swap(SuggestionsBlacklist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggestionsBlacklist::InternalSwap(SuggestionsBlacklist* other) {
  urls_.InternalSwap(&other->urls_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SuggestionsBlacklist::GetTypeName() const {
  return "suggestions.SuggestionsBlacklist";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggestionsBlacklist

// repeated string urls = 1;
int SuggestionsBlacklist::urls_size() const {
  return urls_.size();
}
void SuggestionsBlacklist::clear_urls() {
  urls_.Clear();
}
const ::std::string& SuggestionsBlacklist::urls(int index) const {
  // @@protoc_insertion_point(field_get:suggestions.SuggestionsBlacklist.urls)
  return urls_.Get(index);
}
::std::string* SuggestionsBlacklist::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:suggestions.SuggestionsBlacklist.urls)
  return urls_.Mutable(index);
}
void SuggestionsBlacklist::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:suggestions.SuggestionsBlacklist.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SuggestionsBlacklist::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:suggestions.SuggestionsBlacklist.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
void SuggestionsBlacklist::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:suggestions.SuggestionsBlacklist.urls)
}
void SuggestionsBlacklist::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:suggestions.SuggestionsBlacklist.urls)
}
::std::string* SuggestionsBlacklist::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:suggestions.SuggestionsBlacklist.urls)
  return urls_.Add();
}
void SuggestionsBlacklist::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:suggestions.SuggestionsBlacklist.urls)
}
#if LANG_CXX11
void SuggestionsBlacklist::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:suggestions.SuggestionsBlacklist.urls)
}
#endif
void SuggestionsBlacklist::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:suggestions.SuggestionsBlacklist.urls)
}
void SuggestionsBlacklist::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:suggestions.SuggestionsBlacklist.urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SuggestionsBlacklist::urls() const {
  // @@protoc_insertion_point(field_list:suggestions.SuggestionsBlacklist.urls)
  return urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SuggestionsBlacklist::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:suggestions.SuggestionsBlacklist.urls)
  return &urls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageData::kUrlFieldNumber;
const int ImageData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageData::ImageData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggestions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:suggestions.ImageData)
}
ImageData::ImageData(const ImageData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:suggestions.ImageData)
}

void ImageData::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ImageData::~ImageData() {
  // @@protoc_insertion_point(destructor:suggestions.ImageData)
  SharedDtor();
}

void ImageData::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageData& ImageData::default_instance() {
  protobuf_suggestions_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageData* ImageData::New(::google::protobuf::Arena* arena) const {
  ImageData* n = new ImageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:suggestions.ImageData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:suggestions.ImageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suggestions.ImageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suggestions.ImageData)
  return false;
#undef DO_
}

void ImageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suggestions.ImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suggestions.ImageData)
}

size_t ImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suggestions.ImageData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageData*>(&from));
}

void ImageData::MergeFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suggestions.ImageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void ImageData::CopyFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suggestions.ImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData::IsInitialized() const {
  return true;
}

void ImageData::Swap(ImageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageData::InternalSwap(ImageData* other) {
  url_.Swap(&other->url_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageData::GetTypeName() const {
  return "suggestions.ImageData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageData

// optional string url = 1;
bool ImageData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ImageData::url() const {
  // @@protoc_insertion_point(field_get:suggestions.ImageData.url)
  return url_.GetNoArena();
}
void ImageData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ImageData.url)
}
#if LANG_CXX11
void ImageData::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ImageData.url)
}
#endif
void ImageData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ImageData.url)
}
void ImageData::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ImageData.url)
}
::std::string* ImageData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:suggestions.ImageData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageData::release_url() {
  // @@protoc_insertion_point(field_release:suggestions.ImageData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ImageData.url)
}

// optional bytes data = 2;
bool ImageData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& ImageData::data() const {
  // @@protoc_insertion_point(field_get:suggestions.ImageData.data)
  return data_.GetNoArena();
}
void ImageData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ImageData.data)
}
#if LANG_CXX11
void ImageData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ImageData.data)
}
#endif
void ImageData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ImageData.data)
}
void ImageData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ImageData.data)
}
::std::string* ImageData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:suggestions.ImageData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageData::release_data() {
  // @@protoc_insertion_point(field_release:suggestions.ImageData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ImageData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace suggestions

// @@protoc_insertion_point(global_scope)
