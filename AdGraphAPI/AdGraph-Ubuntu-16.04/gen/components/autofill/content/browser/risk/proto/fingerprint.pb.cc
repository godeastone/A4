// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fingerprint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fingerprint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace autofill {
namespace risk {
class Fingerprint_DimensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_Dimension> {
} _Fingerprint_Dimension_default_instance_;
class Fingerprint_MachineCharacteristics_PluginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_MachineCharacteristics_Plugin> {
} _Fingerprint_MachineCharacteristics_Plugin_default_instance_;
class Fingerprint_MachineCharacteristics_CpuDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_MachineCharacteristics_Cpu> {
} _Fingerprint_MachineCharacteristics_Cpu_default_instance_;
class Fingerprint_MachineCharacteristics_GraphicsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_MachineCharacteristics_Graphics> {
} _Fingerprint_MachineCharacteristics_Graphics_default_instance_;
class Fingerprint_MachineCharacteristicsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_MachineCharacteristics> {
} _Fingerprint_MachineCharacteristics_default_instance_;
class Fingerprint_TransientStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_TransientState> {
} _Fingerprint_TransientState_default_instance_;
class Fingerprint_PerformanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_Performance> {
} _Fingerprint_Performance_default_instance_;
class Fingerprint_UserCharacteristics_VectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_UserCharacteristics_Vector> {
} _Fingerprint_UserCharacteristics_Vector_default_instance_;
class Fingerprint_UserCharacteristics_LocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_UserCharacteristics_Location> {
} _Fingerprint_UserCharacteristics_Location_default_instance_;
class Fingerprint_UserCharacteristicsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_UserCharacteristics> {
} _Fingerprint_UserCharacteristics_default_instance_;
class Fingerprint_MetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint_Metadata> {
} _Fingerprint_Metadata_default_instance_;
class FingerprintDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fingerprint> {
} _Fingerprint_default_instance_;

namespace protobuf_fingerprint_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Fingerprint_Dimension_default_instance_.Shutdown();
  _Fingerprint_MachineCharacteristics_Plugin_default_instance_.Shutdown();
  _Fingerprint_MachineCharacteristics_Cpu_default_instance_.Shutdown();
  _Fingerprint_MachineCharacteristics_Graphics_default_instance_.Shutdown();
  _Fingerprint_MachineCharacteristics_default_instance_.Shutdown();
  _Fingerprint_TransientState_default_instance_.Shutdown();
  _Fingerprint_Performance_default_instance_.Shutdown();
  _Fingerprint_UserCharacteristics_Vector_default_instance_.Shutdown();
  _Fingerprint_UserCharacteristics_Location_default_instance_.Shutdown();
  _Fingerprint_UserCharacteristics_default_instance_.Shutdown();
  _Fingerprint_Metadata_default_instance_.Shutdown();
  _Fingerprint_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Fingerprint_Dimension_default_instance_.DefaultConstruct();
  _Fingerprint_MachineCharacteristics_Plugin_default_instance_.DefaultConstruct();
  _Fingerprint_MachineCharacteristics_Cpu_default_instance_.DefaultConstruct();
  _Fingerprint_MachineCharacteristics_Graphics_default_instance_.DefaultConstruct();
  _Fingerprint_MachineCharacteristics_default_instance_.DefaultConstruct();
  _Fingerprint_TransientState_default_instance_.DefaultConstruct();
  _Fingerprint_Performance_default_instance_.DefaultConstruct();
  _Fingerprint_UserCharacteristics_Vector_default_instance_.DefaultConstruct();
  _Fingerprint_UserCharacteristics_Location_default_instance_.DefaultConstruct();
  _Fingerprint_UserCharacteristics_default_instance_.DefaultConstruct();
  _Fingerprint_Metadata_default_instance_.DefaultConstruct();
  _Fingerprint_default_instance_.DefaultConstruct();
  _Fingerprint_MachineCharacteristics_default_instance_.get_mutable()->screen_size_ = const_cast< ::autofill::risk::Fingerprint_Dimension*>(
      ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
  _Fingerprint_MachineCharacteristics_default_instance_.get_mutable()->unavailable_screen_size_ = const_cast< ::autofill::risk::Fingerprint_Dimension*>(
      ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
  _Fingerprint_MachineCharacteristics_default_instance_.get_mutable()->cpu_ = const_cast< ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu*>(
      ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::internal_default_instance());
  _Fingerprint_MachineCharacteristics_default_instance_.get_mutable()->graphics_card_ = const_cast< ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics*>(
      ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::internal_default_instance());
  _Fingerprint_TransientState_default_instance_.get_mutable()->inner_window_size_ = const_cast< ::autofill::risk::Fingerprint_Dimension*>(
      ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
  _Fingerprint_TransientState_default_instance_.get_mutable()->outer_window_size_ = const_cast< ::autofill::risk::Fingerprint_Dimension*>(
      ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
  _Fingerprint_UserCharacteristics_default_instance_.get_mutable()->device_orientation_ = const_cast< ::autofill::risk::Fingerprint_UserCharacteristics_Vector*>(
      ::autofill::risk::Fingerprint_UserCharacteristics_Vector::internal_default_instance());
  _Fingerprint_UserCharacteristics_default_instance_.get_mutable()->device_acceleration_ = const_cast< ::autofill::risk::Fingerprint_UserCharacteristics_Vector*>(
      ::autofill::risk::Fingerprint_UserCharacteristics_Vector::internal_default_instance());
  _Fingerprint_UserCharacteristics_default_instance_.get_mutable()->location_ = const_cast< ::autofill::risk::Fingerprint_UserCharacteristics_Location*>(
      ::autofill::risk::Fingerprint_UserCharacteristics_Location::internal_default_instance());
  _Fingerprint_default_instance_.get_mutable()->machine_characteristics_ = const_cast< ::autofill::risk::Fingerprint_MachineCharacteristics*>(
      ::autofill::risk::Fingerprint_MachineCharacteristics::internal_default_instance());
  _Fingerprint_default_instance_.get_mutable()->performance_ = const_cast< ::autofill::risk::Fingerprint_Performance*>(
      ::autofill::risk::Fingerprint_Performance::internal_default_instance());
  _Fingerprint_default_instance_.get_mutable()->user_characteristics_ = const_cast< ::autofill::risk::Fingerprint_UserCharacteristics*>(
      ::autofill::risk::Fingerprint_UserCharacteristics::internal_default_instance());
  _Fingerprint_default_instance_.get_mutable()->transient_state_ = const_cast< ::autofill::risk::Fingerprint_TransientState*>(
      ::autofill::risk::Fingerprint_TransientState::internal_default_instance());
  _Fingerprint_default_instance_.get_mutable()->metadata_ = const_cast< ::autofill::risk::Fingerprint_Metadata*>(
      ::autofill::risk::Fingerprint_Metadata::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_fingerprint_2eproto

bool Fingerprint_MachineCharacteristics_BrowserFeature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::FEATURE_UNKNOWN;
const Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::DEPRECATED_FEATURE_AUTOCHECKOUT;
const Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::FEATURE_REQUEST_AUTOCOMPLETE;
const Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::BrowserFeature_MIN;
const Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::BrowserFeature_MAX;
const int Fingerprint_MachineCharacteristics::BrowserFeature_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_Dimension::kWidthFieldNumber;
const int Fingerprint_Dimension::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_Dimension::Fingerprint_Dimension()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.Dimension)
}
Fingerprint_Dimension::Fingerprint_Dimension(const Fingerprint_Dimension& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.Dimension)
}

void Fingerprint_Dimension::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Fingerprint_Dimension::~Fingerprint_Dimension() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.Dimension)
  SharedDtor();
}

void Fingerprint_Dimension::SharedDtor() {
}

void Fingerprint_Dimension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_Dimension& Fingerprint_Dimension::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_Dimension* Fingerprint_Dimension::New(::google::protobuf::Arena* arena) const {
  Fingerprint_Dimension* n = new Fingerprint_Dimension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.Dimension)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_Dimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.Dimension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.Dimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.Dimension)
  return false;
#undef DO_
}

void Fingerprint_Dimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.Dimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.Dimension)
}

size_t Fingerprint_Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.Dimension)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_Dimension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_Dimension*>(&from));
}

void Fingerprint_Dimension::MergeFrom(const Fingerprint_Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_Dimension::CopyFrom(const Fingerprint_Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_Dimension::IsInitialized() const {
  return true;
}

void Fingerprint_Dimension::Swap(Fingerprint_Dimension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_Dimension::InternalSwap(Fingerprint_Dimension* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_Dimension::GetTypeName() const {
  return "autofill.risk.Fingerprint.Dimension";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_Dimension

// optional int32 width = 1;
bool Fingerprint_Dimension::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_Dimension::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_Dimension::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_Dimension::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 Fingerprint_Dimension::width() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Dimension.width)
  return width_;
}
void Fingerprint_Dimension::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Dimension.width)
}

// optional int32 height = 2;
bool Fingerprint_Dimension::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_Dimension::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_Dimension::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_Dimension::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 Fingerprint_Dimension::height() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Dimension.height)
  return height_;
}
void Fingerprint_Dimension::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Dimension.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_MachineCharacteristics_Plugin::kNameFieldNumber;
const int Fingerprint_MachineCharacteristics_Plugin::kDescriptionFieldNumber;
const int Fingerprint_MachineCharacteristics_Plugin::kMimeTypeFieldNumber;
const int Fingerprint_MachineCharacteristics_Plugin::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_MachineCharacteristics_Plugin::Fingerprint_MachineCharacteristics_Plugin()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
}
Fingerprint_MachineCharacteristics_Plugin::Fingerprint_MachineCharacteristics_Plugin(const Fingerprint_MachineCharacteristics_Plugin& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mime_type_(from.mime_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
}

void Fingerprint_MachineCharacteristics_Plugin::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Fingerprint_MachineCharacteristics_Plugin::~Fingerprint_MachineCharacteristics_Plugin() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  SharedDtor();
}

void Fingerprint_MachineCharacteristics_Plugin::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fingerprint_MachineCharacteristics_Plugin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_MachineCharacteristics_Plugin& Fingerprint_MachineCharacteristics_Plugin::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_MachineCharacteristics_Plugin* Fingerprint_MachineCharacteristics_Plugin::New(::google::protobuf::Arena* arena) const {
  Fingerprint_MachineCharacteristics_Plugin* n = new Fingerprint_MachineCharacteristics_Plugin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_MachineCharacteristics_Plugin::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  mime_type_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_MachineCharacteristics_Plugin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mime_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mime_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  return false;
#undef DO_
}

void Fingerprint_MachineCharacteristics_Plugin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // repeated string mime_type = 3;
  for (int i = 0, n = this->mime_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mime_type(i), output);
  }

  // optional string version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
}

size_t Fingerprint_MachineCharacteristics_Plugin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string mime_type = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mime_type_size());
  for (int i = 0, n = this->mime_type_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mime_type(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_MachineCharacteristics_Plugin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_MachineCharacteristics_Plugin*>(&from));
}

void Fingerprint_MachineCharacteristics_Plugin::MergeFrom(const Fingerprint_MachineCharacteristics_Plugin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mime_type_.MergeFrom(from.mime_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
  }
}

void Fingerprint_MachineCharacteristics_Plugin::CopyFrom(const Fingerprint_MachineCharacteristics_Plugin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_MachineCharacteristics_Plugin::IsInitialized() const {
  return true;
}

void Fingerprint_MachineCharacteristics_Plugin::Swap(Fingerprint_MachineCharacteristics_Plugin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_MachineCharacteristics_Plugin::InternalSwap(Fingerprint_MachineCharacteristics_Plugin* other) {
  mime_type_.InternalSwap(&other->mime_type_);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  version_.Swap(&other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_MachineCharacteristics_Plugin::GetTypeName() const {
  return "autofill.risk.Fingerprint.MachineCharacteristics.Plugin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_MachineCharacteristics_Plugin

// optional string name = 1;
bool Fingerprint_MachineCharacteristics_Plugin::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_MachineCharacteristics_Plugin::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_MachineCharacteristics_Plugin::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_MachineCharacteristics_Plugin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Fingerprint_MachineCharacteristics_Plugin::name() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
  return name_.GetNoArena();
}
void Fingerprint_MachineCharacteristics_Plugin::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics_Plugin::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
}
#endif
void Fingerprint_MachineCharacteristics_Plugin::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
}
void Fingerprint_MachineCharacteristics_Plugin::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
}
::std::string* Fingerprint_MachineCharacteristics_Plugin::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics_Plugin::release_name() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics_Plugin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
}

// optional string description = 2;
bool Fingerprint_MachineCharacteristics_Plugin::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_MachineCharacteristics_Plugin::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_MachineCharacteristics_Plugin::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_MachineCharacteristics_Plugin::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& Fingerprint_MachineCharacteristics_Plugin::description() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
  return description_.GetNoArena();
}
void Fingerprint_MachineCharacteristics_Plugin::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics_Plugin::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
}
#endif
void Fingerprint_MachineCharacteristics_Plugin::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
}
void Fingerprint_MachineCharacteristics_Plugin::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
}
::std::string* Fingerprint_MachineCharacteristics_Plugin::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics_Plugin::release_description() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics_Plugin::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
}

// repeated string mime_type = 3;
int Fingerprint_MachineCharacteristics_Plugin::mime_type_size() const {
  return mime_type_.size();
}
void Fingerprint_MachineCharacteristics_Plugin::clear_mime_type() {
  mime_type_.Clear();
}
const ::std::string& Fingerprint_MachineCharacteristics_Plugin::mime_type(int index) const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
  return mime_type_.Get(index);
}
::std::string* Fingerprint_MachineCharacteristics_Plugin::mutable_mime_type(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
  return mime_type_.Mutable(index);
}
void Fingerprint_MachineCharacteristics_Plugin::set_mime_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
  mime_type_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics_Plugin::set_mime_type(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
  mime_type_.Mutable(index)->assign(std::move(value));
}
#endif
void Fingerprint_MachineCharacteristics_Plugin::set_mime_type(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mime_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
}
void Fingerprint_MachineCharacteristics_Plugin::set_mime_type(int index, const char* value, size_t size) {
  mime_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
}
::std::string* Fingerprint_MachineCharacteristics_Plugin::add_mime_type() {
  // @@protoc_insertion_point(field_add_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
  return mime_type_.Add();
}
void Fingerprint_MachineCharacteristics_Plugin::add_mime_type(const ::std::string& value) {
  mime_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics_Plugin::add_mime_type(::std::string&& value) {
  mime_type_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
}
#endif
void Fingerprint_MachineCharacteristics_Plugin::add_mime_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mime_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
}
void Fingerprint_MachineCharacteristics_Plugin::add_mime_type(const char* value, size_t size) {
  mime_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Fingerprint_MachineCharacteristics_Plugin::mime_type() const {
  // @@protoc_insertion_point(field_list:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
  return mime_type_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Fingerprint_MachineCharacteristics_Plugin::mutable_mime_type() {
  // @@protoc_insertion_point(field_mutable_list:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
  return &mime_type_;
}

// optional string version = 4;
bool Fingerprint_MachineCharacteristics_Plugin::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fingerprint_MachineCharacteristics_Plugin::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void Fingerprint_MachineCharacteristics_Plugin::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fingerprint_MachineCharacteristics_Plugin::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& Fingerprint_MachineCharacteristics_Plugin::version() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
  return version_.GetNoArena();
}
void Fingerprint_MachineCharacteristics_Plugin::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics_Plugin::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
}
#endif
void Fingerprint_MachineCharacteristics_Plugin::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
}
void Fingerprint_MachineCharacteristics_Plugin::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
}
::std::string* Fingerprint_MachineCharacteristics_Plugin::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics_Plugin::release_version() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics_Plugin::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_MachineCharacteristics_Cpu::kVendorNameFieldNumber;
const int Fingerprint_MachineCharacteristics_Cpu::kBrandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_MachineCharacteristics_Cpu::Fingerprint_MachineCharacteristics_Cpu()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
}
Fingerprint_MachineCharacteristics_Cpu::Fingerprint_MachineCharacteristics_Cpu(const Fingerprint_MachineCharacteristics_Cpu& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vendor_name()) {
    vendor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
  }
  brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_brand()) {
    brand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
  }
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
}

void Fingerprint_MachineCharacteristics_Cpu::SharedCtor() {
  _cached_size_ = 0;
  vendor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Fingerprint_MachineCharacteristics_Cpu::~Fingerprint_MachineCharacteristics_Cpu() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  SharedDtor();
}

void Fingerprint_MachineCharacteristics_Cpu::SharedDtor() {
  vendor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fingerprint_MachineCharacteristics_Cpu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_MachineCharacteristics_Cpu& Fingerprint_MachineCharacteristics_Cpu::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_MachineCharacteristics_Cpu* Fingerprint_MachineCharacteristics_Cpu::New(::google::protobuf::Arena* arena) const {
  Fingerprint_MachineCharacteristics_Cpu* n = new Fingerprint_MachineCharacteristics_Cpu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_MachineCharacteristics_Cpu::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_vendor_name()) {
      GOOGLE_DCHECK(!vendor_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vendor_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_brand()) {
      GOOGLE_DCHECK(!brand_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*brand_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_MachineCharacteristics_Cpu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vendor_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string brand = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  return false;
#undef DO_
}

void Fingerprint_MachineCharacteristics_Cpu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vendor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendor_name(), output);
  }

  // optional string brand = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brand(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
}

size_t Fingerprint_MachineCharacteristics_Cpu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string vendor_name = 1;
    if (has_vendor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor_name());
    }

    // optional string brand = 2;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_MachineCharacteristics_Cpu::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_MachineCharacteristics_Cpu*>(&from));
}

void Fingerprint_MachineCharacteristics_Cpu::MergeFrom(const Fingerprint_MachineCharacteristics_Cpu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vendor_name();
      vendor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_brand();
      brand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
    }
  }
}

void Fingerprint_MachineCharacteristics_Cpu::CopyFrom(const Fingerprint_MachineCharacteristics_Cpu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_MachineCharacteristics_Cpu::IsInitialized() const {
  return true;
}

void Fingerprint_MachineCharacteristics_Cpu::Swap(Fingerprint_MachineCharacteristics_Cpu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_MachineCharacteristics_Cpu::InternalSwap(Fingerprint_MachineCharacteristics_Cpu* other) {
  vendor_name_.Swap(&other->vendor_name_);
  brand_.Swap(&other->brand_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_MachineCharacteristics_Cpu::GetTypeName() const {
  return "autofill.risk.Fingerprint.MachineCharacteristics.Cpu";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_MachineCharacteristics_Cpu

// optional string vendor_name = 1;
bool Fingerprint_MachineCharacteristics_Cpu::has_vendor_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_MachineCharacteristics_Cpu::set_has_vendor_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_MachineCharacteristics_Cpu::clear_has_vendor_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_MachineCharacteristics_Cpu::clear_vendor_name() {
  vendor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vendor_name();
}
const ::std::string& Fingerprint_MachineCharacteristics_Cpu::vendor_name() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
  return vendor_name_.GetNoArena();
}
void Fingerprint_MachineCharacteristics_Cpu::set_vendor_name(const ::std::string& value) {
  set_has_vendor_name();
  vendor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics_Cpu::set_vendor_name(::std::string&& value) {
  set_has_vendor_name();
  vendor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
}
#endif
void Fingerprint_MachineCharacteristics_Cpu::set_vendor_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vendor_name();
  vendor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
}
void Fingerprint_MachineCharacteristics_Cpu::set_vendor_name(const char* value, size_t size) {
  set_has_vendor_name();
  vendor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
}
::std::string* Fingerprint_MachineCharacteristics_Cpu::mutable_vendor_name() {
  set_has_vendor_name();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
  return vendor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics_Cpu::release_vendor_name() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
  clear_has_vendor_name();
  return vendor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics_Cpu::set_allocated_vendor_name(::std::string* vendor_name) {
  if (vendor_name != NULL) {
    set_has_vendor_name();
  } else {
    clear_has_vendor_name();
  }
  vendor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor_name);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
}

// optional string brand = 2;
bool Fingerprint_MachineCharacteristics_Cpu::has_brand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_MachineCharacteristics_Cpu::set_has_brand() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_MachineCharacteristics_Cpu::clear_has_brand() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_MachineCharacteristics_Cpu::clear_brand() {
  brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brand();
}
const ::std::string& Fingerprint_MachineCharacteristics_Cpu::brand() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
  return brand_.GetNoArena();
}
void Fingerprint_MachineCharacteristics_Cpu::set_brand(const ::std::string& value) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics_Cpu::set_brand(::std::string&& value) {
  set_has_brand();
  brand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
}
#endif
void Fingerprint_MachineCharacteristics_Cpu::set_brand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
}
void Fingerprint_MachineCharacteristics_Cpu::set_brand(const char* value, size_t size) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
}
::std::string* Fingerprint_MachineCharacteristics_Cpu::mutable_brand() {
  set_has_brand();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
  return brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics_Cpu::release_brand() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
  clear_has_brand();
  return brand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics_Cpu::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    set_has_brand();
  } else {
    clear_has_brand();
  }
  brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_MachineCharacteristics_Graphics::kVendorIdFieldNumber;
const int Fingerprint_MachineCharacteristics_Graphics::kDeviceIdFieldNumber;
const int Fingerprint_MachineCharacteristics_Graphics::kDriverVersionFieldNumber;
const int Fingerprint_MachineCharacteristics_Graphics::kDriverDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_MachineCharacteristics_Graphics::Fingerprint_MachineCharacteristics_Graphics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
}
Fingerprint_MachineCharacteristics_Graphics::Fingerprint_MachineCharacteristics_Graphics(const Fingerprint_MachineCharacteristics_Graphics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  driver_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_driver_version()) {
    driver_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
  }
  driver_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_driver_date()) {
    driver_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_date_);
  }
  ::memcpy(&vendor_id_, &from.vendor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&vendor_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
}

void Fingerprint_MachineCharacteristics_Graphics::SharedCtor() {
  _cached_size_ = 0;
  driver_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vendor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_id_) -
      reinterpret_cast<char*>(&vendor_id_)) + sizeof(device_id_));
}

Fingerprint_MachineCharacteristics_Graphics::~Fingerprint_MachineCharacteristics_Graphics() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  SharedDtor();
}

void Fingerprint_MachineCharacteristics_Graphics::SharedDtor() {
  driver_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fingerprint_MachineCharacteristics_Graphics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_MachineCharacteristics_Graphics& Fingerprint_MachineCharacteristics_Graphics::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_MachineCharacteristics_Graphics* Fingerprint_MachineCharacteristics_Graphics::New(::google::protobuf::Arena* arena) const {
  Fingerprint_MachineCharacteristics_Graphics* n = new Fingerprint_MachineCharacteristics_Graphics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_MachineCharacteristics_Graphics::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_driver_version()) {
      GOOGLE_DCHECK(!driver_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*driver_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_driver_date()) {
      GOOGLE_DCHECK(!driver_date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*driver_date_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&vendor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&vendor_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_MachineCharacteristics_Graphics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vendor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_vendor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string driver_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string driver_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  return false;
#undef DO_
}

void Fingerprint_MachineCharacteristics_Graphics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 vendor_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vendor_id(), output);
  }

  // optional uint32 device_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->device_id(), output);
  }

  // optional string driver_version = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->driver_version(), output);
  }

  // optional string driver_date = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->driver_date(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
}

size_t Fingerprint_MachineCharacteristics_Graphics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string driver_version = 3;
    if (has_driver_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver_version());
    }

    // optional string driver_date = 4;
    if (has_driver_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver_date());
    }

    // optional uint32 vendor_id = 1;
    if (has_vendor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vendor_id());
    }

    // optional uint32 device_id = 2;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_MachineCharacteristics_Graphics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_MachineCharacteristics_Graphics*>(&from));
}

void Fingerprint_MachineCharacteristics_Graphics::MergeFrom(const Fingerprint_MachineCharacteristics_Graphics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_driver_version();
      driver_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_driver_date();
      driver_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_date_);
    }
    if (cached_has_bits & 0x00000004u) {
      vendor_id_ = from.vendor_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_MachineCharacteristics_Graphics::CopyFrom(const Fingerprint_MachineCharacteristics_Graphics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_MachineCharacteristics_Graphics::IsInitialized() const {
  return true;
}

void Fingerprint_MachineCharacteristics_Graphics::Swap(Fingerprint_MachineCharacteristics_Graphics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_MachineCharacteristics_Graphics::InternalSwap(Fingerprint_MachineCharacteristics_Graphics* other) {
  driver_version_.Swap(&other->driver_version_);
  driver_date_.Swap(&other->driver_date_);
  std::swap(vendor_id_, other->vendor_id_);
  std::swap(device_id_, other->device_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_MachineCharacteristics_Graphics::GetTypeName() const {
  return "autofill.risk.Fingerprint.MachineCharacteristics.Graphics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_MachineCharacteristics_Graphics

// optional uint32 vendor_id = 1;
bool Fingerprint_MachineCharacteristics_Graphics::has_vendor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fingerprint_MachineCharacteristics_Graphics::set_has_vendor_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Fingerprint_MachineCharacteristics_Graphics::clear_has_vendor_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fingerprint_MachineCharacteristics_Graphics::clear_vendor_id() {
  vendor_id_ = 0u;
  clear_has_vendor_id();
}
::google::protobuf::uint32 Fingerprint_MachineCharacteristics_Graphics::vendor_id() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.vendor_id)
  return vendor_id_;
}
void Fingerprint_MachineCharacteristics_Graphics::set_vendor_id(::google::protobuf::uint32 value) {
  set_has_vendor_id();
  vendor_id_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.vendor_id)
}

// optional uint32 device_id = 2;
bool Fingerprint_MachineCharacteristics_Graphics::has_device_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Fingerprint_MachineCharacteristics_Graphics::set_has_device_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Fingerprint_MachineCharacteristics_Graphics::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Fingerprint_MachineCharacteristics_Graphics::clear_device_id() {
  device_id_ = 0u;
  clear_has_device_id();
}
::google::protobuf::uint32 Fingerprint_MachineCharacteristics_Graphics::device_id() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.device_id)
  return device_id_;
}
void Fingerprint_MachineCharacteristics_Graphics::set_device_id(::google::protobuf::uint32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.device_id)
}

// optional string driver_version = 3;
bool Fingerprint_MachineCharacteristics_Graphics::has_driver_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_MachineCharacteristics_Graphics::set_has_driver_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_MachineCharacteristics_Graphics::clear_has_driver_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_MachineCharacteristics_Graphics::clear_driver_version() {
  driver_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver_version();
}
const ::std::string& Fingerprint_MachineCharacteristics_Graphics::driver_version() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
  return driver_version_.GetNoArena();
}
void Fingerprint_MachineCharacteristics_Graphics::set_driver_version(const ::std::string& value) {
  set_has_driver_version();
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics_Graphics::set_driver_version(::std::string&& value) {
  set_has_driver_version();
  driver_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
}
#endif
void Fingerprint_MachineCharacteristics_Graphics::set_driver_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_driver_version();
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
}
void Fingerprint_MachineCharacteristics_Graphics::set_driver_version(const char* value, size_t size) {
  set_has_driver_version();
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
}
::std::string* Fingerprint_MachineCharacteristics_Graphics::mutable_driver_version() {
  set_has_driver_version();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
  return driver_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics_Graphics::release_driver_version() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
  clear_has_driver_version();
  return driver_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics_Graphics::set_allocated_driver_version(::std::string* driver_version) {
  if (driver_version != NULL) {
    set_has_driver_version();
  } else {
    clear_has_driver_version();
  }
  driver_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_version);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
}

// optional string driver_date = 4;
bool Fingerprint_MachineCharacteristics_Graphics::has_driver_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_MachineCharacteristics_Graphics::set_has_driver_date() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_MachineCharacteristics_Graphics::clear_has_driver_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_MachineCharacteristics_Graphics::clear_driver_date() {
  driver_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driver_date();
}
const ::std::string& Fingerprint_MachineCharacteristics_Graphics::driver_date() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
  return driver_date_.GetNoArena();
}
void Fingerprint_MachineCharacteristics_Graphics::set_driver_date(const ::std::string& value) {
  set_has_driver_date();
  driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics_Graphics::set_driver_date(::std::string&& value) {
  set_has_driver_date();
  driver_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
}
#endif
void Fingerprint_MachineCharacteristics_Graphics::set_driver_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_driver_date();
  driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
}
void Fingerprint_MachineCharacteristics_Graphics::set_driver_date(const char* value, size_t size) {
  set_has_driver_date();
  driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
}
::std::string* Fingerprint_MachineCharacteristics_Graphics::mutable_driver_date() {
  set_has_driver_date();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
  return driver_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics_Graphics::release_driver_date() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
  clear_has_driver_date();
  return driver_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics_Graphics::set_allocated_driver_date(::std::string* driver_date) {
  if (driver_date != NULL) {
    set_has_driver_date();
  } else {
    clear_has_driver_date();
  }
  driver_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_date);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_MachineCharacteristics::kUserAndDeviceNameHashFieldNumber;
const int Fingerprint_MachineCharacteristics::kOperatingSystemBuildFieldNumber;
const int Fingerprint_MachineCharacteristics::kBrowserInstallTimeHoursFieldNumber;
const int Fingerprint_MachineCharacteristics::kFontFieldNumber;
const int Fingerprint_MachineCharacteristics::kPluginFieldNumber;
const int Fingerprint_MachineCharacteristics::kUtcOffsetMsFieldNumber;
const int Fingerprint_MachineCharacteristics::kBrowserLanguageFieldNumber;
const int Fingerprint_MachineCharacteristics::kRequestedLanguageFieldNumber;
const int Fingerprint_MachineCharacteristics::kCharsetFieldNumber;
const int Fingerprint_MachineCharacteristics::kScreenCountFieldNumber;
const int Fingerprint_MachineCharacteristics::kScreenSizeFieldNumber;
const int Fingerprint_MachineCharacteristics::kScreenColorDepthFieldNumber;
const int Fingerprint_MachineCharacteristics::kUnavailableScreenSizeFieldNumber;
const int Fingerprint_MachineCharacteristics::kUserAgentFieldNumber;
const int Fingerprint_MachineCharacteristics::kPartitionSizeFieldNumber;
const int Fingerprint_MachineCharacteristics::kCpuFieldNumber;
const int Fingerprint_MachineCharacteristics::kRamFieldNumber;
const int Fingerprint_MachineCharacteristics::kGraphicsCardFieldNumber;
const int Fingerprint_MachineCharacteristics::kBrowserBuildFieldNumber;
const int Fingerprint_MachineCharacteristics::kBrowserFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_MachineCharacteristics::Fingerprint_MachineCharacteristics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics)
}
Fingerprint_MachineCharacteristics::Fingerprint_MachineCharacteristics(const Fingerprint_MachineCharacteristics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      font_(from.font_),
      plugin_(from.plugin_),
      requested_language_(from.requested_language_),
      partition_size_(from.partition_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operating_system_build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_operating_system_build()) {
    operating_system_build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operating_system_build_);
  }
  browser_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_browser_language()) {
    browser_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_language_);
  }
  charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_charset()) {
    charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charset_);
  }
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_agent()) {
    user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
  }
  browser_build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_browser_build()) {
    browser_build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_build_);
  }
  if (from.has_screen_size()) {
    screen_size_ = new ::autofill::risk::Fingerprint_Dimension(*from.screen_size_);
  } else {
    screen_size_ = NULL;
  }
  if (from.has_unavailable_screen_size()) {
    unavailable_screen_size_ = new ::autofill::risk::Fingerprint_Dimension(*from.unavailable_screen_size_);
  } else {
    unavailable_screen_size_ = NULL;
  }
  if (from.has_cpu()) {
    cpu_ = new ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu(*from.cpu_);
  } else {
    cpu_ = NULL;
  }
  if (from.has_graphics_card()) {
    graphics_card_ = new ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics(*from.graphics_card_);
  } else {
    graphics_card_ = NULL;
  }
  ::memcpy(&user_and_device_name_hash_, &from.user_and_device_name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_feature_) -
    reinterpret_cast<char*>(&user_and_device_name_hash_)) + sizeof(browser_feature_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics)
}

void Fingerprint_MachineCharacteristics::SharedCtor() {
  _cached_size_ = 0;
  operating_system_build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&screen_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&browser_feature_) -
      reinterpret_cast<char*>(&screen_size_)) + sizeof(browser_feature_));
}

Fingerprint_MachineCharacteristics::~Fingerprint_MachineCharacteristics() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics)
  SharedDtor();
}

void Fingerprint_MachineCharacteristics::SharedDtor() {
  operating_system_build_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_build_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete screen_size_;
  }
  if (this != internal_default_instance()) {
    delete unavailable_screen_size_;
  }
  if (this != internal_default_instance()) {
    delete cpu_;
  }
  if (this != internal_default_instance()) {
    delete graphics_card_;
  }
}

void Fingerprint_MachineCharacteristics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_MachineCharacteristics& Fingerprint_MachineCharacteristics::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_MachineCharacteristics* Fingerprint_MachineCharacteristics::New(::google::protobuf::Arena* arena) const {
  Fingerprint_MachineCharacteristics* n = new Fingerprint_MachineCharacteristics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_MachineCharacteristics::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics)
  font_.Clear();
  plugin_.Clear();
  requested_language_.Clear();
  partition_size_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_operating_system_build()) {
      GOOGLE_DCHECK(!operating_system_build_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*operating_system_build_.UnsafeRawStringPointer())->clear();
    }
    if (has_browser_language()) {
      GOOGLE_DCHECK(!browser_language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*browser_language_.UnsafeRawStringPointer())->clear();
    }
    if (has_charset()) {
      GOOGLE_DCHECK(!charset_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*charset_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_agent()) {
      GOOGLE_DCHECK(!user_agent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_agent_.UnsafeRawStringPointer())->clear();
    }
    if (has_browser_build()) {
      GOOGLE_DCHECK(!browser_build_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*browser_build_.UnsafeRawStringPointer())->clear();
    }
    if (has_screen_size()) {
      GOOGLE_DCHECK(screen_size_ != NULL);
      screen_size_->::autofill::risk::Fingerprint_Dimension::Clear();
    }
    if (has_unavailable_screen_size()) {
      GOOGLE_DCHECK(unavailable_screen_size_ != NULL);
      unavailable_screen_size_->::autofill::risk::Fingerprint_Dimension::Clear();
    }
    if (has_cpu()) {
      GOOGLE_DCHECK(cpu_ != NULL);
      cpu_->::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::Clear();
    }
  }
  if (has_graphics_card()) {
    GOOGLE_DCHECK(graphics_card_ != NULL);
    graphics_card_->::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::Clear();
  }
  if (_has_bits_[8 / 32] & 65024u) {
    ::memset(&user_and_device_name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_feature_) -
        reinterpret_cast<char*>(&user_and_device_name_hash_)) + sizeof(browser_feature_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_MachineCharacteristics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_and_device_name_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_user_and_device_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_and_device_name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string operating_system_build = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operating_system_build()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 browser_install_time_hours = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_browser_install_time_hours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &browser_install_time_hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string font = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_font()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plugin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 utc_offset_ms = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_utc_offset_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &utc_offset_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string browser_language = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_language()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string requested_language = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_requested_language()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string charset = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_screen_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_color_depth = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_screen_color_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_color_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unavailable_screen_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_agent = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partition_size = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120u, input, this->mutable_partition_size())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(122u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partition_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cpu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ram = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_ram();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ram_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graphics_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string browser_build = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_build()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature_IsValid(value)) {
            set_browser_feature(static_cast< ::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature >(value));
          } else {
            unknown_fields_stream.WriteVarint32(160u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics)
  return false;
#undef DO_
}

void Fingerprint_MachineCharacteristics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 user_and_device_name_hash = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_and_device_name_hash(), output);
  }

  // optional string operating_system_build = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->operating_system_build(), output);
  }

  // optional int64 browser_install_time_hours = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->browser_install_time_hours(), output);
  }

  // repeated string font = 4;
  for (int i = 0, n = this->font_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->font(i), output);
  }

  // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plugin_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->plugin(static_cast<int>(i)), output);
  }

  // optional int64 utc_offset_ms = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->utc_offset_ms(), output);
  }

  // optional string browser_language = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->browser_language(), output);
  }

  // repeated string requested_language = 8;
  for (int i = 0, n = this->requested_language_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->requested_language(i), output);
  }

  // optional string charset = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->charset(), output);
  }

  // optional int32 screen_count = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->screen_count(), output);
  }

  // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->screen_size_, output);
  }

  // optional int32 screen_color_depth = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->screen_color_depth(), output);
  }

  // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->unavailable_screen_size_, output);
  }

  // optional string user_agent = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->user_agent(), output);
  }

  // repeated int32 partition_size = 15;
  for (int i = 0, n = this->partition_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->partition_size(i), output);
  }

  // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->cpu_, output);
  }

  // optional int64 ram = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->ram(), output);
  }

  // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, *this->graphics_card_, output);
  }

  // optional string browser_build = 19;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->browser_build(), output);
  }

  // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->browser_feature(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics)
}

size_t Fingerprint_MachineCharacteristics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string font = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->font_size());
  for (int i = 0, n = this->font_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->font(i));
  }

  // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->plugin_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin(static_cast<int>(i)));
    }
  }

  // repeated string requested_language = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->requested_language_size());
  for (int i = 0, n = this->requested_language_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->requested_language(i));
  }

  // repeated int32 partition_size = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->partition_size_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->partition_size_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string operating_system_build = 2;
    if (has_operating_system_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operating_system_build());
    }

    // optional string browser_language = 7;
    if (has_browser_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browser_language());
    }

    // optional string charset = 9;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

    // optional string user_agent = 14;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional string browser_build = 19;
    if (has_browser_build()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browser_build());
    }

    // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
    if (has_screen_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->screen_size_);
    }

    // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
    if (has_unavailable_screen_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unavailable_screen_size_);
    }

    // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
    if (has_cpu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cpu_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
    if (has_graphics_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->graphics_card_);
    }

    // optional fixed64 user_and_device_name_hash = 1;
    if (has_user_and_device_name_hash()) {
      total_size += 1 + 8;
    }

    // optional int64 browser_install_time_hours = 3;
    if (has_browser_install_time_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->browser_install_time_hours());
    }

    // optional int64 utc_offset_ms = 6;
    if (has_utc_offset_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->utc_offset_ms());
    }

    // optional int32 screen_count = 10;
    if (has_screen_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_count());
    }

    // optional int32 screen_color_depth = 12;
    if (has_screen_color_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_color_depth());
    }

    // optional int64 ram = 17;
    if (has_ram()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ram());
    }

    // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
    if (has_browser_feature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->browser_feature());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_MachineCharacteristics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_MachineCharacteristics*>(&from));
}

void Fingerprint_MachineCharacteristics::MergeFrom(const Fingerprint_MachineCharacteristics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  font_.MergeFrom(from.font_);
  plugin_.MergeFrom(from.plugin_);
  requested_language_.MergeFrom(from.requested_language_);
  partition_size_.MergeFrom(from.partition_size_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_operating_system_build();
      operating_system_build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operating_system_build_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_browser_language();
      browser_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_language_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_charset();
      charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charset_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_user_agent();
      user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_browser_build();
      browser_build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_build_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_screen_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.screen_size());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_unavailable_screen_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.unavailable_screen_size());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_cpu()->::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::MergeFrom(from.cpu());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_graphics_card()->::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::MergeFrom(from.graphics_card());
    }
    if (cached_has_bits & 0x00000200u) {
      user_and_device_name_hash_ = from.user_and_device_name_hash_;
    }
    if (cached_has_bits & 0x00000400u) {
      browser_install_time_hours_ = from.browser_install_time_hours_;
    }
    if (cached_has_bits & 0x00000800u) {
      utc_offset_ms_ = from.utc_offset_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      screen_count_ = from.screen_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      screen_color_depth_ = from.screen_color_depth_;
    }
    if (cached_has_bits & 0x00004000u) {
      ram_ = from.ram_;
    }
    if (cached_has_bits & 0x00008000u) {
      browser_feature_ = from.browser_feature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_MachineCharacteristics::CopyFrom(const Fingerprint_MachineCharacteristics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_MachineCharacteristics::IsInitialized() const {
  return true;
}

void Fingerprint_MachineCharacteristics::Swap(Fingerprint_MachineCharacteristics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_MachineCharacteristics::InternalSwap(Fingerprint_MachineCharacteristics* other) {
  font_.InternalSwap(&other->font_);
  plugin_.InternalSwap(&other->plugin_);
  requested_language_.InternalSwap(&other->requested_language_);
  partition_size_.InternalSwap(&other->partition_size_);
  operating_system_build_.Swap(&other->operating_system_build_);
  browser_language_.Swap(&other->browser_language_);
  charset_.Swap(&other->charset_);
  user_agent_.Swap(&other->user_agent_);
  browser_build_.Swap(&other->browser_build_);
  std::swap(screen_size_, other->screen_size_);
  std::swap(unavailable_screen_size_, other->unavailable_screen_size_);
  std::swap(cpu_, other->cpu_);
  std::swap(graphics_card_, other->graphics_card_);
  std::swap(user_and_device_name_hash_, other->user_and_device_name_hash_);
  std::swap(browser_install_time_hours_, other->browser_install_time_hours_);
  std::swap(utc_offset_ms_, other->utc_offset_ms_);
  std::swap(screen_count_, other->screen_count_);
  std::swap(screen_color_depth_, other->screen_color_depth_);
  std::swap(ram_, other->ram_);
  std::swap(browser_feature_, other->browser_feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_MachineCharacteristics::GetTypeName() const {
  return "autofill.risk.Fingerprint.MachineCharacteristics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_MachineCharacteristics

// optional fixed64 user_and_device_name_hash = 1;
bool Fingerprint_MachineCharacteristics::has_user_and_device_name_hash() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_user_and_device_name_hash() {
  _has_bits_[0] |= 0x00000200u;
}
void Fingerprint_MachineCharacteristics::clear_has_user_and_device_name_hash() {
  _has_bits_[0] &= ~0x00000200u;
}
void Fingerprint_MachineCharacteristics::clear_user_and_device_name_hash() {
  user_and_device_name_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_user_and_device_name_hash();
}
::google::protobuf::uint64 Fingerprint_MachineCharacteristics::user_and_device_name_hash() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.user_and_device_name_hash)
  return user_and_device_name_hash_;
}
void Fingerprint_MachineCharacteristics::set_user_and_device_name_hash(::google::protobuf::uint64 value) {
  set_has_user_and_device_name_hash();
  user_and_device_name_hash_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.user_and_device_name_hash)
}

// optional string operating_system_build = 2;
bool Fingerprint_MachineCharacteristics::has_operating_system_build() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_operating_system_build() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_MachineCharacteristics::clear_has_operating_system_build() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_MachineCharacteristics::clear_operating_system_build() {
  operating_system_build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operating_system_build();
}
const ::std::string& Fingerprint_MachineCharacteristics::operating_system_build() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
  return operating_system_build_.GetNoArena();
}
void Fingerprint_MachineCharacteristics::set_operating_system_build(const ::std::string& value) {
  set_has_operating_system_build();
  operating_system_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics::set_operating_system_build(::std::string&& value) {
  set_has_operating_system_build();
  operating_system_build_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
}
#endif
void Fingerprint_MachineCharacteristics::set_operating_system_build(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_operating_system_build();
  operating_system_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
}
void Fingerprint_MachineCharacteristics::set_operating_system_build(const char* value, size_t size) {
  set_has_operating_system_build();
  operating_system_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
}
::std::string* Fingerprint_MachineCharacteristics::mutable_operating_system_build() {
  set_has_operating_system_build();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
  return operating_system_build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics::release_operating_system_build() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
  clear_has_operating_system_build();
  return operating_system_build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics::set_allocated_operating_system_build(::std::string* operating_system_build) {
  if (operating_system_build != NULL) {
    set_has_operating_system_build();
  } else {
    clear_has_operating_system_build();
  }
  operating_system_build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operating_system_build);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
}

// optional int64 browser_install_time_hours = 3;
bool Fingerprint_MachineCharacteristics::has_browser_install_time_hours() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_browser_install_time_hours() {
  _has_bits_[0] |= 0x00000400u;
}
void Fingerprint_MachineCharacteristics::clear_has_browser_install_time_hours() {
  _has_bits_[0] &= ~0x00000400u;
}
void Fingerprint_MachineCharacteristics::clear_browser_install_time_hours() {
  browser_install_time_hours_ = GOOGLE_LONGLONG(0);
  clear_has_browser_install_time_hours();
}
::google::protobuf::int64 Fingerprint_MachineCharacteristics::browser_install_time_hours() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.browser_install_time_hours)
  return browser_install_time_hours_;
}
void Fingerprint_MachineCharacteristics::set_browser_install_time_hours(::google::protobuf::int64 value) {
  set_has_browser_install_time_hours();
  browser_install_time_hours_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.browser_install_time_hours)
}

// repeated string font = 4;
int Fingerprint_MachineCharacteristics::font_size() const {
  return font_.size();
}
void Fingerprint_MachineCharacteristics::clear_font() {
  font_.Clear();
}
const ::std::string& Fingerprint_MachineCharacteristics::font(int index) const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.font)
  return font_.Get(index);
}
::std::string* Fingerprint_MachineCharacteristics::mutable_font(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.font)
  return font_.Mutable(index);
}
void Fingerprint_MachineCharacteristics::set_font(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.font)
  font_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics::set_font(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.font)
  font_.Mutable(index)->assign(std::move(value));
}
#endif
void Fingerprint_MachineCharacteristics::set_font(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  font_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.font)
}
void Fingerprint_MachineCharacteristics::set_font(int index, const char* value, size_t size) {
  font_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.font)
}
::std::string* Fingerprint_MachineCharacteristics::add_font() {
  // @@protoc_insertion_point(field_add_mutable:autofill.risk.Fingerprint.MachineCharacteristics.font)
  return font_.Add();
}
void Fingerprint_MachineCharacteristics::add_font(const ::std::string& value) {
  font_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.font)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics::add_font(::std::string&& value) {
  font_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.font)
}
#endif
void Fingerprint_MachineCharacteristics::add_font(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  font_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:autofill.risk.Fingerprint.MachineCharacteristics.font)
}
void Fingerprint_MachineCharacteristics::add_font(const char* value, size_t size) {
  font_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:autofill.risk.Fingerprint.MachineCharacteristics.font)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Fingerprint_MachineCharacteristics::font() const {
  // @@protoc_insertion_point(field_list:autofill.risk.Fingerprint.MachineCharacteristics.font)
  return font_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Fingerprint_MachineCharacteristics::mutable_font() {
  // @@protoc_insertion_point(field_mutable_list:autofill.risk.Fingerprint.MachineCharacteristics.font)
  return &font_;
}

// repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
int Fingerprint_MachineCharacteristics::plugin_size() const {
  return plugin_.size();
}
void Fingerprint_MachineCharacteristics::clear_plugin() {
  plugin_.Clear();
}
const ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin& Fingerprint_MachineCharacteristics::plugin(int index) const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.plugin)
  return plugin_.Get(index);
}
::autofill::risk::Fingerprint_MachineCharacteristics_Plugin* Fingerprint_MachineCharacteristics::mutable_plugin(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.plugin)
  return plugin_.Mutable(index);
}
::autofill::risk::Fingerprint_MachineCharacteristics_Plugin* Fingerprint_MachineCharacteristics::add_plugin() {
  // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.plugin)
  return plugin_.Add();
}
::google::protobuf::RepeatedPtrField< ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin >*
Fingerprint_MachineCharacteristics::mutable_plugin() {
  // @@protoc_insertion_point(field_mutable_list:autofill.risk.Fingerprint.MachineCharacteristics.plugin)
  return &plugin_;
}
const ::google::protobuf::RepeatedPtrField< ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin >&
Fingerprint_MachineCharacteristics::plugin() const {
  // @@protoc_insertion_point(field_list:autofill.risk.Fingerprint.MachineCharacteristics.plugin)
  return plugin_;
}

// optional int64 utc_offset_ms = 6;
bool Fingerprint_MachineCharacteristics::has_utc_offset_ms() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_utc_offset_ms() {
  _has_bits_[0] |= 0x00000800u;
}
void Fingerprint_MachineCharacteristics::clear_has_utc_offset_ms() {
  _has_bits_[0] &= ~0x00000800u;
}
void Fingerprint_MachineCharacteristics::clear_utc_offset_ms() {
  utc_offset_ms_ = GOOGLE_LONGLONG(0);
  clear_has_utc_offset_ms();
}
::google::protobuf::int64 Fingerprint_MachineCharacteristics::utc_offset_ms() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.utc_offset_ms)
  return utc_offset_ms_;
}
void Fingerprint_MachineCharacteristics::set_utc_offset_ms(::google::protobuf::int64 value) {
  set_has_utc_offset_ms();
  utc_offset_ms_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.utc_offset_ms)
}

// optional string browser_language = 7;
bool Fingerprint_MachineCharacteristics::has_browser_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_browser_language() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_MachineCharacteristics::clear_has_browser_language() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_MachineCharacteristics::clear_browser_language() {
  browser_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_browser_language();
}
const ::std::string& Fingerprint_MachineCharacteristics::browser_language() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
  return browser_language_.GetNoArena();
}
void Fingerprint_MachineCharacteristics::set_browser_language(const ::std::string& value) {
  set_has_browser_language();
  browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics::set_browser_language(::std::string&& value) {
  set_has_browser_language();
  browser_language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
}
#endif
void Fingerprint_MachineCharacteristics::set_browser_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_browser_language();
  browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
}
void Fingerprint_MachineCharacteristics::set_browser_language(const char* value, size_t size) {
  set_has_browser_language();
  browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
}
::std::string* Fingerprint_MachineCharacteristics::mutable_browser_language() {
  set_has_browser_language();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
  return browser_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics::release_browser_language() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
  clear_has_browser_language();
  return browser_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics::set_allocated_browser_language(::std::string* browser_language) {
  if (browser_language != NULL) {
    set_has_browser_language();
  } else {
    clear_has_browser_language();
  }
  browser_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_language);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
}

// repeated string requested_language = 8;
int Fingerprint_MachineCharacteristics::requested_language_size() const {
  return requested_language_.size();
}
void Fingerprint_MachineCharacteristics::clear_requested_language() {
  requested_language_.Clear();
}
const ::std::string& Fingerprint_MachineCharacteristics::requested_language(int index) const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
  return requested_language_.Get(index);
}
::std::string* Fingerprint_MachineCharacteristics::mutable_requested_language(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
  return requested_language_.Mutable(index);
}
void Fingerprint_MachineCharacteristics::set_requested_language(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
  requested_language_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics::set_requested_language(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
  requested_language_.Mutable(index)->assign(std::move(value));
}
#endif
void Fingerprint_MachineCharacteristics::set_requested_language(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requested_language_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
}
void Fingerprint_MachineCharacteristics::set_requested_language(int index, const char* value, size_t size) {
  requested_language_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
}
::std::string* Fingerprint_MachineCharacteristics::add_requested_language() {
  // @@protoc_insertion_point(field_add_mutable:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
  return requested_language_.Add();
}
void Fingerprint_MachineCharacteristics::add_requested_language(const ::std::string& value) {
  requested_language_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics::add_requested_language(::std::string&& value) {
  requested_language_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
}
#endif
void Fingerprint_MachineCharacteristics::add_requested_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requested_language_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
}
void Fingerprint_MachineCharacteristics::add_requested_language(const char* value, size_t size) {
  requested_language_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Fingerprint_MachineCharacteristics::requested_language() const {
  // @@protoc_insertion_point(field_list:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
  return requested_language_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Fingerprint_MachineCharacteristics::mutable_requested_language() {
  // @@protoc_insertion_point(field_mutable_list:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
  return &requested_language_;
}

// optional string charset = 9;
bool Fingerprint_MachineCharacteristics::has_charset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_charset() {
  _has_bits_[0] |= 0x00000004u;
}
void Fingerprint_MachineCharacteristics::clear_has_charset() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fingerprint_MachineCharacteristics::clear_charset() {
  charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_charset();
}
const ::std::string& Fingerprint_MachineCharacteristics::charset() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.charset)
  return charset_.GetNoArena();
}
void Fingerprint_MachineCharacteristics::set_charset(const ::std::string& value) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.charset)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics::set_charset(::std::string&& value) {
  set_has_charset();
  charset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.charset)
}
#endif
void Fingerprint_MachineCharacteristics::set_charset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.charset)
}
void Fingerprint_MachineCharacteristics::set_charset(const char* value, size_t size) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.charset)
}
::std::string* Fingerprint_MachineCharacteristics::mutable_charset() {
  set_has_charset();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.charset)
  return charset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics::release_charset() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.charset)
  clear_has_charset();
  return charset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics::set_allocated_charset(::std::string* charset) {
  if (charset != NULL) {
    set_has_charset();
  } else {
    clear_has_charset();
  }
  charset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), charset);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.charset)
}

// optional int32 screen_count = 10;
bool Fingerprint_MachineCharacteristics::has_screen_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_screen_count() {
  _has_bits_[0] |= 0x00001000u;
}
void Fingerprint_MachineCharacteristics::clear_has_screen_count() {
  _has_bits_[0] &= ~0x00001000u;
}
void Fingerprint_MachineCharacteristics::clear_screen_count() {
  screen_count_ = 0;
  clear_has_screen_count();
}
::google::protobuf::int32 Fingerprint_MachineCharacteristics::screen_count() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.screen_count)
  return screen_count_;
}
void Fingerprint_MachineCharacteristics::set_screen_count(::google::protobuf::int32 value) {
  set_has_screen_count();
  screen_count_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.screen_count)
}

// optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
bool Fingerprint_MachineCharacteristics::has_screen_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_screen_size() {
  _has_bits_[0] |= 0x00000020u;
}
void Fingerprint_MachineCharacteristics::clear_has_screen_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void Fingerprint_MachineCharacteristics::clear_screen_size() {
  if (screen_size_ != NULL) screen_size_->::autofill::risk::Fingerprint_Dimension::Clear();
  clear_has_screen_size();
}
const ::autofill::risk::Fingerprint_Dimension& Fingerprint_MachineCharacteristics::screen_size() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.screen_size)
  return screen_size_ != NULL ? *screen_size_
                         : *::autofill::risk::Fingerprint_Dimension::internal_default_instance();
}
::autofill::risk::Fingerprint_Dimension* Fingerprint_MachineCharacteristics::mutable_screen_size() {
  set_has_screen_size();
  if (screen_size_ == NULL) {
    screen_size_ = new ::autofill::risk::Fingerprint_Dimension;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.screen_size)
  return screen_size_;
}
::autofill::risk::Fingerprint_Dimension* Fingerprint_MachineCharacteristics::release_screen_size() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.screen_size)
  clear_has_screen_size();
  ::autofill::risk::Fingerprint_Dimension* temp = screen_size_;
  screen_size_ = NULL;
  return temp;
}
void Fingerprint_MachineCharacteristics::set_allocated_screen_size(::autofill::risk::Fingerprint_Dimension* screen_size) {
  delete screen_size_;
  screen_size_ = screen_size;
  if (screen_size) {
    set_has_screen_size();
  } else {
    clear_has_screen_size();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.screen_size)
}

// optional int32 screen_color_depth = 12;
bool Fingerprint_MachineCharacteristics::has_screen_color_depth() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_screen_color_depth() {
  _has_bits_[0] |= 0x00002000u;
}
void Fingerprint_MachineCharacteristics::clear_has_screen_color_depth() {
  _has_bits_[0] &= ~0x00002000u;
}
void Fingerprint_MachineCharacteristics::clear_screen_color_depth() {
  screen_color_depth_ = 0;
  clear_has_screen_color_depth();
}
::google::protobuf::int32 Fingerprint_MachineCharacteristics::screen_color_depth() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.screen_color_depth)
  return screen_color_depth_;
}
void Fingerprint_MachineCharacteristics::set_screen_color_depth(::google::protobuf::int32 value) {
  set_has_screen_color_depth();
  screen_color_depth_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.screen_color_depth)
}

// optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
bool Fingerprint_MachineCharacteristics::has_unavailable_screen_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_unavailable_screen_size() {
  _has_bits_[0] |= 0x00000040u;
}
void Fingerprint_MachineCharacteristics::clear_has_unavailable_screen_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void Fingerprint_MachineCharacteristics::clear_unavailable_screen_size() {
  if (unavailable_screen_size_ != NULL) unavailable_screen_size_->::autofill::risk::Fingerprint_Dimension::Clear();
  clear_has_unavailable_screen_size();
}
const ::autofill::risk::Fingerprint_Dimension& Fingerprint_MachineCharacteristics::unavailable_screen_size() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.unavailable_screen_size)
  return unavailable_screen_size_ != NULL ? *unavailable_screen_size_
                         : *::autofill::risk::Fingerprint_Dimension::internal_default_instance();
}
::autofill::risk::Fingerprint_Dimension* Fingerprint_MachineCharacteristics::mutable_unavailable_screen_size() {
  set_has_unavailable_screen_size();
  if (unavailable_screen_size_ == NULL) {
    unavailable_screen_size_ = new ::autofill::risk::Fingerprint_Dimension;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.unavailable_screen_size)
  return unavailable_screen_size_;
}
::autofill::risk::Fingerprint_Dimension* Fingerprint_MachineCharacteristics::release_unavailable_screen_size() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.unavailable_screen_size)
  clear_has_unavailable_screen_size();
  ::autofill::risk::Fingerprint_Dimension* temp = unavailable_screen_size_;
  unavailable_screen_size_ = NULL;
  return temp;
}
void Fingerprint_MachineCharacteristics::set_allocated_unavailable_screen_size(::autofill::risk::Fingerprint_Dimension* unavailable_screen_size) {
  delete unavailable_screen_size_;
  unavailable_screen_size_ = unavailable_screen_size;
  if (unavailable_screen_size) {
    set_has_unavailable_screen_size();
  } else {
    clear_has_unavailable_screen_size();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.unavailable_screen_size)
}

// optional string user_agent = 14;
bool Fingerprint_MachineCharacteristics::has_user_agent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_user_agent() {
  _has_bits_[0] |= 0x00000008u;
}
void Fingerprint_MachineCharacteristics::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000008u;
}
void Fingerprint_MachineCharacteristics::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_agent();
}
const ::std::string& Fingerprint_MachineCharacteristics::user_agent() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
  return user_agent_.GetNoArena();
}
void Fingerprint_MachineCharacteristics::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics::set_user_agent(::std::string&& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
}
#endif
void Fingerprint_MachineCharacteristics::set_user_agent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
}
void Fingerprint_MachineCharacteristics::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
}
::std::string* Fingerprint_MachineCharacteristics::mutable_user_agent() {
  set_has_user_agent();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
  return user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics::release_user_agent() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
  clear_has_user_agent();
  return user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent != NULL) {
    set_has_user_agent();
  } else {
    clear_has_user_agent();
  }
  user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
}

// repeated int32 partition_size = 15;
int Fingerprint_MachineCharacteristics::partition_size_size() const {
  return partition_size_.size();
}
void Fingerprint_MachineCharacteristics::clear_partition_size() {
  partition_size_.Clear();
}
::google::protobuf::int32 Fingerprint_MachineCharacteristics::partition_size(int index) const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.partition_size)
  return partition_size_.Get(index);
}
void Fingerprint_MachineCharacteristics::set_partition_size(int index, ::google::protobuf::int32 value) {
  partition_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.partition_size)
}
void Fingerprint_MachineCharacteristics::add_partition_size(::google::protobuf::int32 value) {
  partition_size_.Add(value);
  // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.partition_size)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Fingerprint_MachineCharacteristics::partition_size() const {
  // @@protoc_insertion_point(field_list:autofill.risk.Fingerprint.MachineCharacteristics.partition_size)
  return partition_size_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Fingerprint_MachineCharacteristics::mutable_partition_size() {
  // @@protoc_insertion_point(field_mutable_list:autofill.risk.Fingerprint.MachineCharacteristics.partition_size)
  return &partition_size_;
}

// optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
bool Fingerprint_MachineCharacteristics::has_cpu() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_cpu() {
  _has_bits_[0] |= 0x00000080u;
}
void Fingerprint_MachineCharacteristics::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000080u;
}
void Fingerprint_MachineCharacteristics::clear_cpu() {
  if (cpu_ != NULL) cpu_->::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::Clear();
  clear_has_cpu();
}
const ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu& Fingerprint_MachineCharacteristics::cpu() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.cpu)
  return cpu_ != NULL ? *cpu_
                         : *::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::internal_default_instance();
}
::autofill::risk::Fingerprint_MachineCharacteristics_Cpu* Fingerprint_MachineCharacteristics::mutable_cpu() {
  set_has_cpu();
  if (cpu_ == NULL) {
    cpu_ = new ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.cpu)
  return cpu_;
}
::autofill::risk::Fingerprint_MachineCharacteristics_Cpu* Fingerprint_MachineCharacteristics::release_cpu() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.cpu)
  clear_has_cpu();
  ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu* temp = cpu_;
  cpu_ = NULL;
  return temp;
}
void Fingerprint_MachineCharacteristics::set_allocated_cpu(::autofill::risk::Fingerprint_MachineCharacteristics_Cpu* cpu) {
  delete cpu_;
  cpu_ = cpu;
  if (cpu) {
    set_has_cpu();
  } else {
    clear_has_cpu();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.cpu)
}

// optional int64 ram = 17;
bool Fingerprint_MachineCharacteristics::has_ram() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_ram() {
  _has_bits_[0] |= 0x00004000u;
}
void Fingerprint_MachineCharacteristics::clear_has_ram() {
  _has_bits_[0] &= ~0x00004000u;
}
void Fingerprint_MachineCharacteristics::clear_ram() {
  ram_ = GOOGLE_LONGLONG(0);
  clear_has_ram();
}
::google::protobuf::int64 Fingerprint_MachineCharacteristics::ram() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.ram)
  return ram_;
}
void Fingerprint_MachineCharacteristics::set_ram(::google::protobuf::int64 value) {
  set_has_ram();
  ram_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.ram)
}

// optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
bool Fingerprint_MachineCharacteristics::has_graphics_card() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_graphics_card() {
  _has_bits_[0] |= 0x00000100u;
}
void Fingerprint_MachineCharacteristics::clear_has_graphics_card() {
  _has_bits_[0] &= ~0x00000100u;
}
void Fingerprint_MachineCharacteristics::clear_graphics_card() {
  if (graphics_card_ != NULL) graphics_card_->::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::Clear();
  clear_has_graphics_card();
}
const ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics& Fingerprint_MachineCharacteristics::graphics_card() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.graphics_card)
  return graphics_card_ != NULL ? *graphics_card_
                         : *::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::internal_default_instance();
}
::autofill::risk::Fingerprint_MachineCharacteristics_Graphics* Fingerprint_MachineCharacteristics::mutable_graphics_card() {
  set_has_graphics_card();
  if (graphics_card_ == NULL) {
    graphics_card_ = new ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.graphics_card)
  return graphics_card_;
}
::autofill::risk::Fingerprint_MachineCharacteristics_Graphics* Fingerprint_MachineCharacteristics::release_graphics_card() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.graphics_card)
  clear_has_graphics_card();
  ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics* temp = graphics_card_;
  graphics_card_ = NULL;
  return temp;
}
void Fingerprint_MachineCharacteristics::set_allocated_graphics_card(::autofill::risk::Fingerprint_MachineCharacteristics_Graphics* graphics_card) {
  delete graphics_card_;
  graphics_card_ = graphics_card;
  if (graphics_card) {
    set_has_graphics_card();
  } else {
    clear_has_graphics_card();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.graphics_card)
}

// optional string browser_build = 19;
bool Fingerprint_MachineCharacteristics::has_browser_build() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_browser_build() {
  _has_bits_[0] |= 0x00000010u;
}
void Fingerprint_MachineCharacteristics::clear_has_browser_build() {
  _has_bits_[0] &= ~0x00000010u;
}
void Fingerprint_MachineCharacteristics::clear_browser_build() {
  browser_build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_browser_build();
}
const ::std::string& Fingerprint_MachineCharacteristics::browser_build() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
  return browser_build_.GetNoArena();
}
void Fingerprint_MachineCharacteristics::set_browser_build(const ::std::string& value) {
  set_has_browser_build();
  browser_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
}
#if LANG_CXX11
void Fingerprint_MachineCharacteristics::set_browser_build(::std::string&& value) {
  set_has_browser_build();
  browser_build_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
}
#endif
void Fingerprint_MachineCharacteristics::set_browser_build(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_browser_build();
  browser_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
}
void Fingerprint_MachineCharacteristics::set_browser_build(const char* value, size_t size) {
  set_has_browser_build();
  browser_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
}
::std::string* Fingerprint_MachineCharacteristics::mutable_browser_build() {
  set_has_browser_build();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
  return browser_build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_MachineCharacteristics::release_browser_build() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
  clear_has_browser_build();
  return browser_build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_MachineCharacteristics::set_allocated_browser_build(::std::string* browser_build) {
  if (browser_build != NULL) {
    set_has_browser_build();
  } else {
    clear_has_browser_build();
  }
  browser_build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_build);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
}

// optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
bool Fingerprint_MachineCharacteristics::has_browser_feature() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Fingerprint_MachineCharacteristics::set_has_browser_feature() {
  _has_bits_[0] |= 0x00008000u;
}
void Fingerprint_MachineCharacteristics::clear_has_browser_feature() {
  _has_bits_[0] &= ~0x00008000u;
}
void Fingerprint_MachineCharacteristics::clear_browser_feature() {
  browser_feature_ = 0;
  clear_has_browser_feature();
}
::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::browser_feature() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.browser_feature)
  return static_cast< ::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature >(browser_feature_);
}
void Fingerprint_MachineCharacteristics::set_browser_feature(::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature value) {
  assert(::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature_IsValid(value));
  set_has_browser_feature();
  browser_feature_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.browser_feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_TransientState::kInnerWindowSizeFieldNumber;
const int Fingerprint_TransientState::kOuterWindowSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_TransientState::Fingerprint_TransientState()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.TransientState)
}
Fingerprint_TransientState::Fingerprint_TransientState(const Fingerprint_TransientState& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inner_window_size()) {
    inner_window_size_ = new ::autofill::risk::Fingerprint_Dimension(*from.inner_window_size_);
  } else {
    inner_window_size_ = NULL;
  }
  if (from.has_outer_window_size()) {
    outer_window_size_ = new ::autofill::risk::Fingerprint_Dimension(*from.outer_window_size_);
  } else {
    outer_window_size_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.TransientState)
}

void Fingerprint_TransientState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&inner_window_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outer_window_size_) -
      reinterpret_cast<char*>(&inner_window_size_)) + sizeof(outer_window_size_));
}

Fingerprint_TransientState::~Fingerprint_TransientState() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.TransientState)
  SharedDtor();
}

void Fingerprint_TransientState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete inner_window_size_;
  }
  if (this != internal_default_instance()) {
    delete outer_window_size_;
  }
}

void Fingerprint_TransientState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_TransientState& Fingerprint_TransientState::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_TransientState* Fingerprint_TransientState::New(::google::protobuf::Arena* arena) const {
  Fingerprint_TransientState* n = new Fingerprint_TransientState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_TransientState::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.TransientState)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_inner_window_size()) {
      GOOGLE_DCHECK(inner_window_size_ != NULL);
      inner_window_size_->::autofill::risk::Fingerprint_Dimension::Clear();
    }
    if (has_outer_window_size()) {
      GOOGLE_DCHECK(outer_window_size_ != NULL);
      outer_window_size_->::autofill::risk::Fingerprint_Dimension::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_TransientState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.TransientState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_window_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outer_window_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.TransientState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.TransientState)
  return false;
#undef DO_
}

void Fingerprint_TransientState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.TransientState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->inner_window_size_, output);
  }

  // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->outer_window_size_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.TransientState)
}

size_t Fingerprint_TransientState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.TransientState)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
    if (has_inner_window_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_window_size_);
    }

    // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
    if (has_outer_window_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->outer_window_size_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_TransientState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_TransientState*>(&from));
}

void Fingerprint_TransientState::MergeFrom(const Fingerprint_TransientState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.TransientState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_inner_window_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.inner_window_size());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_outer_window_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.outer_window_size());
    }
  }
}

void Fingerprint_TransientState::CopyFrom(const Fingerprint_TransientState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.TransientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_TransientState::IsInitialized() const {
  return true;
}

void Fingerprint_TransientState::Swap(Fingerprint_TransientState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_TransientState::InternalSwap(Fingerprint_TransientState* other) {
  std::swap(inner_window_size_, other->inner_window_size_);
  std::swap(outer_window_size_, other->outer_window_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_TransientState::GetTypeName() const {
  return "autofill.risk.Fingerprint.TransientState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_TransientState

// optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
bool Fingerprint_TransientState::has_inner_window_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_TransientState::set_has_inner_window_size() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_TransientState::clear_has_inner_window_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_TransientState::clear_inner_window_size() {
  if (inner_window_size_ != NULL) inner_window_size_->::autofill::risk::Fingerprint_Dimension::Clear();
  clear_has_inner_window_size();
}
const ::autofill::risk::Fingerprint_Dimension& Fingerprint_TransientState::inner_window_size() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.TransientState.inner_window_size)
  return inner_window_size_ != NULL ? *inner_window_size_
                         : *::autofill::risk::Fingerprint_Dimension::internal_default_instance();
}
::autofill::risk::Fingerprint_Dimension* Fingerprint_TransientState::mutable_inner_window_size() {
  set_has_inner_window_size();
  if (inner_window_size_ == NULL) {
    inner_window_size_ = new ::autofill::risk::Fingerprint_Dimension;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.TransientState.inner_window_size)
  return inner_window_size_;
}
::autofill::risk::Fingerprint_Dimension* Fingerprint_TransientState::release_inner_window_size() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.TransientState.inner_window_size)
  clear_has_inner_window_size();
  ::autofill::risk::Fingerprint_Dimension* temp = inner_window_size_;
  inner_window_size_ = NULL;
  return temp;
}
void Fingerprint_TransientState::set_allocated_inner_window_size(::autofill::risk::Fingerprint_Dimension* inner_window_size) {
  delete inner_window_size_;
  inner_window_size_ = inner_window_size;
  if (inner_window_size) {
    set_has_inner_window_size();
  } else {
    clear_has_inner_window_size();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.TransientState.inner_window_size)
}

// optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
bool Fingerprint_TransientState::has_outer_window_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_TransientState::set_has_outer_window_size() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_TransientState::clear_has_outer_window_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_TransientState::clear_outer_window_size() {
  if (outer_window_size_ != NULL) outer_window_size_->::autofill::risk::Fingerprint_Dimension::Clear();
  clear_has_outer_window_size();
}
const ::autofill::risk::Fingerprint_Dimension& Fingerprint_TransientState::outer_window_size() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.TransientState.outer_window_size)
  return outer_window_size_ != NULL ? *outer_window_size_
                         : *::autofill::risk::Fingerprint_Dimension::internal_default_instance();
}
::autofill::risk::Fingerprint_Dimension* Fingerprint_TransientState::mutable_outer_window_size() {
  set_has_outer_window_size();
  if (outer_window_size_ == NULL) {
    outer_window_size_ = new ::autofill::risk::Fingerprint_Dimension;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.TransientState.outer_window_size)
  return outer_window_size_;
}
::autofill::risk::Fingerprint_Dimension* Fingerprint_TransientState::release_outer_window_size() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.TransientState.outer_window_size)
  clear_has_outer_window_size();
  ::autofill::risk::Fingerprint_Dimension* temp = outer_window_size_;
  outer_window_size_ = NULL;
  return temp;
}
void Fingerprint_TransientState::set_allocated_outer_window_size(::autofill::risk::Fingerprint_Dimension* outer_window_size) {
  delete outer_window_size_;
  outer_window_size_ = outer_window_size;
  if (outer_window_size) {
    set_has_outer_window_size();
  } else {
    clear_has_outer_window_size();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.TransientState.outer_window_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_Performance::kBandwidthFieldNumber;
const int Fingerprint_Performance::kMeteredFieldNumber;
const int Fingerprint_Performance::kNetworkTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_Performance::Fingerprint_Performance()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.Performance)
}
Fingerprint_Performance::Fingerprint_Performance(const Fingerprint_Performance& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_network_type()) {
    network_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_type_);
  }
  ::memcpy(&bandwidth_, &from.bandwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&metered_) -
    reinterpret_cast<char*>(&bandwidth_)) + sizeof(metered_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.Performance)
}

void Fingerprint_Performance::SharedCtor() {
  _cached_size_ = 0;
  network_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bandwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metered_) -
      reinterpret_cast<char*>(&bandwidth_)) + sizeof(metered_));
}

Fingerprint_Performance::~Fingerprint_Performance() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.Performance)
  SharedDtor();
}

void Fingerprint_Performance::SharedDtor() {
  network_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fingerprint_Performance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_Performance& Fingerprint_Performance::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_Performance* Fingerprint_Performance::New(::google::protobuf::Arena* arena) const {
  Fingerprint_Performance* n = new Fingerprint_Performance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_Performance::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.Performance)
  if (has_network_type()) {
    GOOGLE_DCHECK(!network_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*network_type_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&bandwidth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&metered_) -
        reinterpret_cast<char*>(&bandwidth_)) + sizeof(metered_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_Performance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.Performance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float bandwidth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_bandwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool metered = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_metered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &metered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string network_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.Performance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.Performance)
  return false;
#undef DO_
}

void Fingerprint_Performance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.Performance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float bandwidth = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bandwidth(), output);
  }

  // optional bool metered = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->metered(), output);
  }

  // optional string network_type = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->network_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.Performance)
}

size_t Fingerprint_Performance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.Performance)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string network_type = 3;
    if (has_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_type());
    }

    // optional float bandwidth = 1;
    if (has_bandwidth()) {
      total_size += 1 + 4;
    }

    // optional bool metered = 2;
    if (has_metered()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_Performance::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_Performance*>(&from));
}

void Fingerprint_Performance::MergeFrom(const Fingerprint_Performance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.Performance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_network_type();
      network_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      bandwidth_ = from.bandwidth_;
    }
    if (cached_has_bits & 0x00000004u) {
      metered_ = from.metered_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_Performance::CopyFrom(const Fingerprint_Performance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_Performance::IsInitialized() const {
  return true;
}

void Fingerprint_Performance::Swap(Fingerprint_Performance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_Performance::InternalSwap(Fingerprint_Performance* other) {
  network_type_.Swap(&other->network_type_);
  std::swap(bandwidth_, other->bandwidth_);
  std::swap(metered_, other->metered_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_Performance::GetTypeName() const {
  return "autofill.risk.Fingerprint.Performance";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_Performance

// optional float bandwidth = 1;
bool Fingerprint_Performance::has_bandwidth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_Performance::set_has_bandwidth() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_Performance::clear_has_bandwidth() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_Performance::clear_bandwidth() {
  bandwidth_ = 0;
  clear_has_bandwidth();
}
float Fingerprint_Performance::bandwidth() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Performance.bandwidth)
  return bandwidth_;
}
void Fingerprint_Performance::set_bandwidth(float value) {
  set_has_bandwidth();
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Performance.bandwidth)
}

// optional bool metered = 2;
bool Fingerprint_Performance::has_metered() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fingerprint_Performance::set_has_metered() {
  _has_bits_[0] |= 0x00000004u;
}
void Fingerprint_Performance::clear_has_metered() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fingerprint_Performance::clear_metered() {
  metered_ = false;
  clear_has_metered();
}
bool Fingerprint_Performance::metered() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Performance.metered)
  return metered_;
}
void Fingerprint_Performance::set_metered(bool value) {
  set_has_metered();
  metered_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Performance.metered)
}

// optional string network_type = 3;
bool Fingerprint_Performance::has_network_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_Performance::set_has_network_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_Performance::clear_has_network_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_Performance::clear_network_type() {
  network_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network_type();
}
const ::std::string& Fingerprint_Performance::network_type() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Performance.network_type)
  return network_type_.GetNoArena();
}
void Fingerprint_Performance::set_network_type(const ::std::string& value) {
  set_has_network_type();
  network_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Performance.network_type)
}
#if LANG_CXX11
void Fingerprint_Performance::set_network_type(::std::string&& value) {
  set_has_network_type();
  network_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.risk.Fingerprint.Performance.network_type)
}
#endif
void Fingerprint_Performance::set_network_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_network_type();
  network_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.Performance.network_type)
}
void Fingerprint_Performance::set_network_type(const char* value, size_t size) {
  set_has_network_type();
  network_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.Performance.network_type)
}
::std::string* Fingerprint_Performance::mutable_network_type() {
  set_has_network_type();
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.Performance.network_type)
  return network_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fingerprint_Performance::release_network_type() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.Performance.network_type)
  clear_has_network_type();
  return network_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fingerprint_Performance::set_allocated_network_type(::std::string* network_type) {
  if (network_type != NULL) {
    set_has_network_type();
  } else {
    clear_has_network_type();
  }
  network_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_type);
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.Performance.network_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_UserCharacteristics_Vector::kXFieldNumber;
const int Fingerprint_UserCharacteristics_Vector::kYFieldNumber;
const int Fingerprint_UserCharacteristics_Vector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_UserCharacteristics_Vector::Fingerprint_UserCharacteristics_Vector()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.UserCharacteristics.Vector)
}
Fingerprint_UserCharacteristics_Vector::Fingerprint_UserCharacteristics_Vector(const Fingerprint_UserCharacteristics_Vector& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.UserCharacteristics.Vector)
}

void Fingerprint_UserCharacteristics_Vector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Fingerprint_UserCharacteristics_Vector::~Fingerprint_UserCharacteristics_Vector() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  SharedDtor();
}

void Fingerprint_UserCharacteristics_Vector::SharedDtor() {
}

void Fingerprint_UserCharacteristics_Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_UserCharacteristics_Vector& Fingerprint_UserCharacteristics_Vector::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics_Vector::New(::google::protobuf::Arena* arena) const {
  Fingerprint_UserCharacteristics_Vector* n = new Fingerprint_UserCharacteristics_Vector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_UserCharacteristics_Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_UserCharacteristics_Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  return false;
#undef DO_
}

void Fingerprint_UserCharacteristics_Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.UserCharacteristics.Vector)
}

size_t Fingerprint_UserCharacteristics_Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_UserCharacteristics_Vector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_UserCharacteristics_Vector*>(&from));
}

void Fingerprint_UserCharacteristics_Vector::MergeFrom(const Fingerprint_UserCharacteristics_Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_UserCharacteristics_Vector::CopyFrom(const Fingerprint_UserCharacteristics_Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_UserCharacteristics_Vector::IsInitialized() const {
  return true;
}

void Fingerprint_UserCharacteristics_Vector::Swap(Fingerprint_UserCharacteristics_Vector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_UserCharacteristics_Vector::InternalSwap(Fingerprint_UserCharacteristics_Vector* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_UserCharacteristics_Vector::GetTypeName() const {
  return "autofill.risk.Fingerprint.UserCharacteristics.Vector";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_UserCharacteristics_Vector

// optional int32 x = 1;
bool Fingerprint_UserCharacteristics_Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_UserCharacteristics_Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_UserCharacteristics_Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_UserCharacteristics_Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Fingerprint_UserCharacteristics_Vector::x() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Vector.x)
  return x_;
}
void Fingerprint_UserCharacteristics_Vector::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Vector.x)
}

// optional int32 y = 2;
bool Fingerprint_UserCharacteristics_Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_UserCharacteristics_Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_UserCharacteristics_Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_UserCharacteristics_Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Fingerprint_UserCharacteristics_Vector::y() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Vector.y)
  return y_;
}
void Fingerprint_UserCharacteristics_Vector::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Vector.y)
}

// optional int32 z = 3;
bool Fingerprint_UserCharacteristics_Vector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fingerprint_UserCharacteristics_Vector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Fingerprint_UserCharacteristics_Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fingerprint_UserCharacteristics_Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 Fingerprint_UserCharacteristics_Vector::z() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Vector.z)
  return z_;
}
void Fingerprint_UserCharacteristics_Vector::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Vector.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_UserCharacteristics_Location::kAltitudeFieldNumber;
const int Fingerprint_UserCharacteristics_Location::kLatitudeFieldNumber;
const int Fingerprint_UserCharacteristics_Location::kLongitudeFieldNumber;
const int Fingerprint_UserCharacteristics_Location::kAccuracyFieldNumber;
const int Fingerprint_UserCharacteristics_Location::kTimeInMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_UserCharacteristics_Location::Fingerprint_UserCharacteristics_Location()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.UserCharacteristics.Location)
}
Fingerprint_UserCharacteristics_Location::Fingerprint_UserCharacteristics_Location(const Fingerprint_UserCharacteristics_Location& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&altitude_, &from.altitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_in_ms_) -
    reinterpret_cast<char*>(&altitude_)) + sizeof(time_in_ms_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.UserCharacteristics.Location)
}

void Fingerprint_UserCharacteristics_Location::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_in_ms_) -
      reinterpret_cast<char*>(&altitude_)) + sizeof(time_in_ms_));
}

Fingerprint_UserCharacteristics_Location::~Fingerprint_UserCharacteristics_Location() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.UserCharacteristics.Location)
  SharedDtor();
}

void Fingerprint_UserCharacteristics_Location::SharedDtor() {
}

void Fingerprint_UserCharacteristics_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_UserCharacteristics_Location& Fingerprint_UserCharacteristics_Location::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_UserCharacteristics_Location* Fingerprint_UserCharacteristics_Location::New(::google::protobuf::Arena* arena) const {
  Fingerprint_UserCharacteristics_Location* n = new Fingerprint_UserCharacteristics_Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_UserCharacteristics_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&altitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_in_ms_) -
        reinterpret_cast<char*>(&altitude_)) + sizeof(time_in_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_UserCharacteristics_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double altitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accuracy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_accuracy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_in_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_time_in_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_in_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.UserCharacteristics.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.UserCharacteristics.Location)
  return false;
#undef DO_
}

void Fingerprint_UserCharacteristics_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double altitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->altitude(), output);
  }

  // optional double latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // optional double longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // optional double accuracy = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->accuracy(), output);
  }

  // optional int64 time_in_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->time_in_ms(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.UserCharacteristics.Location)
}

size_t Fingerprint_UserCharacteristics_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional double altitude = 1;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double accuracy = 4;
    if (has_accuracy()) {
      total_size += 1 + 8;
    }

    // optional int64 time_in_ms = 5;
    if (has_time_in_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_in_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_UserCharacteristics_Location::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_UserCharacteristics_Location*>(&from));
}

void Fingerprint_UserCharacteristics_Location::MergeFrom(const Fingerprint_UserCharacteristics_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      accuracy_ = from.accuracy_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_in_ms_ = from.time_in_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_UserCharacteristics_Location::CopyFrom(const Fingerprint_UserCharacteristics_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_UserCharacteristics_Location::IsInitialized() const {
  return true;
}

void Fingerprint_UserCharacteristics_Location::Swap(Fingerprint_UserCharacteristics_Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_UserCharacteristics_Location::InternalSwap(Fingerprint_UserCharacteristics_Location* other) {
  std::swap(altitude_, other->altitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(accuracy_, other->accuracy_);
  std::swap(time_in_ms_, other->time_in_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_UserCharacteristics_Location::GetTypeName() const {
  return "autofill.risk.Fingerprint.UserCharacteristics.Location";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_UserCharacteristics_Location

// optional double altitude = 1;
bool Fingerprint_UserCharacteristics_Location::has_altitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_UserCharacteristics_Location::set_has_altitude() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_UserCharacteristics_Location::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_UserCharacteristics_Location::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
double Fingerprint_UserCharacteristics_Location::altitude() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Location.altitude)
  return altitude_;
}
void Fingerprint_UserCharacteristics_Location::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Location.altitude)
}

// optional double latitude = 2;
bool Fingerprint_UserCharacteristics_Location::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_UserCharacteristics_Location::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_UserCharacteristics_Location::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_UserCharacteristics_Location::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double Fingerprint_UserCharacteristics_Location::latitude() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Location.latitude)
  return latitude_;
}
void Fingerprint_UserCharacteristics_Location::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Location.latitude)
}

// optional double longitude = 3;
bool Fingerprint_UserCharacteristics_Location::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fingerprint_UserCharacteristics_Location::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
void Fingerprint_UserCharacteristics_Location::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fingerprint_UserCharacteristics_Location::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double Fingerprint_UserCharacteristics_Location::longitude() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Location.longitude)
  return longitude_;
}
void Fingerprint_UserCharacteristics_Location::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Location.longitude)
}

// optional double accuracy = 4;
bool Fingerprint_UserCharacteristics_Location::has_accuracy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Fingerprint_UserCharacteristics_Location::set_has_accuracy() {
  _has_bits_[0] |= 0x00000008u;
}
void Fingerprint_UserCharacteristics_Location::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000008u;
}
void Fingerprint_UserCharacteristics_Location::clear_accuracy() {
  accuracy_ = 0;
  clear_has_accuracy();
}
double Fingerprint_UserCharacteristics_Location::accuracy() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Location.accuracy)
  return accuracy_;
}
void Fingerprint_UserCharacteristics_Location::set_accuracy(double value) {
  set_has_accuracy();
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Location.accuracy)
}

// optional int64 time_in_ms = 5;
bool Fingerprint_UserCharacteristics_Location::has_time_in_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Fingerprint_UserCharacteristics_Location::set_has_time_in_ms() {
  _has_bits_[0] |= 0x00000010u;
}
void Fingerprint_UserCharacteristics_Location::clear_has_time_in_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
void Fingerprint_UserCharacteristics_Location::clear_time_in_ms() {
  time_in_ms_ = GOOGLE_LONGLONG(0);
  clear_has_time_in_ms();
}
::google::protobuf::int64 Fingerprint_UserCharacteristics_Location::time_in_ms() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Location.time_in_ms)
  return time_in_ms_;
}
void Fingerprint_UserCharacteristics_Location::set_time_in_ms(::google::protobuf::int64 value) {
  set_has_time_in_ms();
  time_in_ms_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Location.time_in_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_UserCharacteristics::kForceFieldNumber;
const int Fingerprint_UserCharacteristics::kTouchWidthFieldNumber;
const int Fingerprint_UserCharacteristics::kTouchHeightFieldNumber;
const int Fingerprint_UserCharacteristics::kTouchRotationFieldNumber;
const int Fingerprint_UserCharacteristics::kDeviceOrientationFieldNumber;
const int Fingerprint_UserCharacteristics::kDeviceAccelerationFieldNumber;
const int Fingerprint_UserCharacteristics::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_UserCharacteristics::Fingerprint_UserCharacteristics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.UserCharacteristics)
}
Fingerprint_UserCharacteristics::Fingerprint_UserCharacteristics(const Fingerprint_UserCharacteristics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_device_orientation()) {
    device_orientation_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Vector(*from.device_orientation_);
  } else {
    device_orientation_ = NULL;
  }
  if (from.has_device_acceleration()) {
    device_acceleration_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Vector(*from.device_acceleration_);
  } else {
    device_acceleration_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&force_, &from.force_,
    static_cast<size_t>(reinterpret_cast<char*>(&touch_rotation_) -
    reinterpret_cast<char*>(&force_)) + sizeof(touch_rotation_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.UserCharacteristics)
}

void Fingerprint_UserCharacteristics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&device_orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touch_rotation_) -
      reinterpret_cast<char*>(&device_orientation_)) + sizeof(touch_rotation_));
}

Fingerprint_UserCharacteristics::~Fingerprint_UserCharacteristics() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.UserCharacteristics)
  SharedDtor();
}

void Fingerprint_UserCharacteristics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete device_orientation_;
  }
  if (this != internal_default_instance()) {
    delete device_acceleration_;
  }
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void Fingerprint_UserCharacteristics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_UserCharacteristics& Fingerprint_UserCharacteristics::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_UserCharacteristics* Fingerprint_UserCharacteristics::New(::google::protobuf::Arena* arena) const {
  Fingerprint_UserCharacteristics* n = new Fingerprint_UserCharacteristics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_UserCharacteristics::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.UserCharacteristics)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_device_orientation()) {
      GOOGLE_DCHECK(device_orientation_ != NULL);
      device_orientation_->::autofill::risk::Fingerprint_UserCharacteristics_Vector::Clear();
    }
    if (has_device_acceleration()) {
      GOOGLE_DCHECK(device_acceleration_ != NULL);
      device_acceleration_->::autofill::risk::Fingerprint_UserCharacteristics_Vector::Clear();
    }
    if (has_location()) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::autofill::risk::Fingerprint_UserCharacteristics_Location::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&force_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&touch_rotation_) -
        reinterpret_cast<char*>(&force_)) + sizeof(touch_rotation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_UserCharacteristics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.UserCharacteristics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float force = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float touch_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_touch_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &touch_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float touch_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_touch_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &touch_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 touch_rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_touch_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &touch_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.UserCharacteristics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.UserCharacteristics)
  return false;
#undef DO_
}

void Fingerprint_UserCharacteristics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.UserCharacteristics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float force = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->force(), output);
  }

  // optional float touch_width = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->touch_width(), output);
  }

  // optional float touch_height = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->touch_height(), output);
  }

  // optional int32 touch_rotation = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->touch_rotation(), output);
  }

  // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->device_orientation_, output);
  }

  // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->device_acceleration_, output);
  }

  // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->location_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.UserCharacteristics)
}

size_t Fingerprint_UserCharacteristics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.UserCharacteristics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
    if (has_device_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_orientation_);
    }

    // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
    if (has_device_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_acceleration_);
    }

    // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional float force = 1;
    if (has_force()) {
      total_size += 1 + 4;
    }

    // optional float touch_width = 2;
    if (has_touch_width()) {
      total_size += 1 + 4;
    }

    // optional float touch_height = 3;
    if (has_touch_height()) {
      total_size += 1 + 4;
    }

    // optional int32 touch_rotation = 4;
    if (has_touch_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->touch_rotation());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_UserCharacteristics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_UserCharacteristics*>(&from));
}

void Fingerprint_UserCharacteristics::MergeFrom(const Fingerprint_UserCharacteristics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.UserCharacteristics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_device_orientation()->::autofill::risk::Fingerprint_UserCharacteristics_Vector::MergeFrom(from.device_orientation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_device_acceleration()->::autofill::risk::Fingerprint_UserCharacteristics_Vector::MergeFrom(from.device_acceleration());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_location()->::autofill::risk::Fingerprint_UserCharacteristics_Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000008u) {
      force_ = from.force_;
    }
    if (cached_has_bits & 0x00000010u) {
      touch_width_ = from.touch_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      touch_height_ = from.touch_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      touch_rotation_ = from.touch_rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_UserCharacteristics::CopyFrom(const Fingerprint_UserCharacteristics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.UserCharacteristics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_UserCharacteristics::IsInitialized() const {
  return true;
}

void Fingerprint_UserCharacteristics::Swap(Fingerprint_UserCharacteristics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_UserCharacteristics::InternalSwap(Fingerprint_UserCharacteristics* other) {
  std::swap(device_orientation_, other->device_orientation_);
  std::swap(device_acceleration_, other->device_acceleration_);
  std::swap(location_, other->location_);
  std::swap(force_, other->force_);
  std::swap(touch_width_, other->touch_width_);
  std::swap(touch_height_, other->touch_height_);
  std::swap(touch_rotation_, other->touch_rotation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_UserCharacteristics::GetTypeName() const {
  return "autofill.risk.Fingerprint.UserCharacteristics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_UserCharacteristics

// optional float force = 1;
bool Fingerprint_UserCharacteristics::has_force() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Fingerprint_UserCharacteristics::set_has_force() {
  _has_bits_[0] |= 0x00000008u;
}
void Fingerprint_UserCharacteristics::clear_has_force() {
  _has_bits_[0] &= ~0x00000008u;
}
void Fingerprint_UserCharacteristics::clear_force() {
  force_ = 0;
  clear_has_force();
}
float Fingerprint_UserCharacteristics::force() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.force)
  return force_;
}
void Fingerprint_UserCharacteristics::set_force(float value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.force)
}

// optional float touch_width = 2;
bool Fingerprint_UserCharacteristics::has_touch_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Fingerprint_UserCharacteristics::set_has_touch_width() {
  _has_bits_[0] |= 0x00000010u;
}
void Fingerprint_UserCharacteristics::clear_has_touch_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void Fingerprint_UserCharacteristics::clear_touch_width() {
  touch_width_ = 0;
  clear_has_touch_width();
}
float Fingerprint_UserCharacteristics::touch_width() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.touch_width)
  return touch_width_;
}
void Fingerprint_UserCharacteristics::set_touch_width(float value) {
  set_has_touch_width();
  touch_width_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.touch_width)
}

// optional float touch_height = 3;
bool Fingerprint_UserCharacteristics::has_touch_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Fingerprint_UserCharacteristics::set_has_touch_height() {
  _has_bits_[0] |= 0x00000020u;
}
void Fingerprint_UserCharacteristics::clear_has_touch_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void Fingerprint_UserCharacteristics::clear_touch_height() {
  touch_height_ = 0;
  clear_has_touch_height();
}
float Fingerprint_UserCharacteristics::touch_height() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.touch_height)
  return touch_height_;
}
void Fingerprint_UserCharacteristics::set_touch_height(float value) {
  set_has_touch_height();
  touch_height_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.touch_height)
}

// optional int32 touch_rotation = 4;
bool Fingerprint_UserCharacteristics::has_touch_rotation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Fingerprint_UserCharacteristics::set_has_touch_rotation() {
  _has_bits_[0] |= 0x00000040u;
}
void Fingerprint_UserCharacteristics::clear_has_touch_rotation() {
  _has_bits_[0] &= ~0x00000040u;
}
void Fingerprint_UserCharacteristics::clear_touch_rotation() {
  touch_rotation_ = 0;
  clear_has_touch_rotation();
}
::google::protobuf::int32 Fingerprint_UserCharacteristics::touch_rotation() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.touch_rotation)
  return touch_rotation_;
}
void Fingerprint_UserCharacteristics::set_touch_rotation(::google::protobuf::int32 value) {
  set_has_touch_rotation();
  touch_rotation_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.touch_rotation)
}

// optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
bool Fingerprint_UserCharacteristics::has_device_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_UserCharacteristics::set_has_device_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_UserCharacteristics::clear_has_device_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_UserCharacteristics::clear_device_orientation() {
  if (device_orientation_ != NULL) device_orientation_->::autofill::risk::Fingerprint_UserCharacteristics_Vector::Clear();
  clear_has_device_orientation();
}
const ::autofill::risk::Fingerprint_UserCharacteristics_Vector& Fingerprint_UserCharacteristics::device_orientation() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.device_orientation)
  return device_orientation_ != NULL ? *device_orientation_
                         : *::autofill::risk::Fingerprint_UserCharacteristics_Vector::internal_default_instance();
}
::autofill::risk::Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics::mutable_device_orientation() {
  set_has_device_orientation();
  if (device_orientation_ == NULL) {
    device_orientation_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Vector;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.UserCharacteristics.device_orientation)
  return device_orientation_;
}
::autofill::risk::Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics::release_device_orientation() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.UserCharacteristics.device_orientation)
  clear_has_device_orientation();
  ::autofill::risk::Fingerprint_UserCharacteristics_Vector* temp = device_orientation_;
  device_orientation_ = NULL;
  return temp;
}
void Fingerprint_UserCharacteristics::set_allocated_device_orientation(::autofill::risk::Fingerprint_UserCharacteristics_Vector* device_orientation) {
  delete device_orientation_;
  device_orientation_ = device_orientation;
  if (device_orientation) {
    set_has_device_orientation();
  } else {
    clear_has_device_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.UserCharacteristics.device_orientation)
}

// optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
bool Fingerprint_UserCharacteristics::has_device_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_UserCharacteristics::set_has_device_acceleration() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_UserCharacteristics::clear_has_device_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_UserCharacteristics::clear_device_acceleration() {
  if (device_acceleration_ != NULL) device_acceleration_->::autofill::risk::Fingerprint_UserCharacteristics_Vector::Clear();
  clear_has_device_acceleration();
}
const ::autofill::risk::Fingerprint_UserCharacteristics_Vector& Fingerprint_UserCharacteristics::device_acceleration() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.device_acceleration)
  return device_acceleration_ != NULL ? *device_acceleration_
                         : *::autofill::risk::Fingerprint_UserCharacteristics_Vector::internal_default_instance();
}
::autofill::risk::Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics::mutable_device_acceleration() {
  set_has_device_acceleration();
  if (device_acceleration_ == NULL) {
    device_acceleration_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Vector;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.UserCharacteristics.device_acceleration)
  return device_acceleration_;
}
::autofill::risk::Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics::release_device_acceleration() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.UserCharacteristics.device_acceleration)
  clear_has_device_acceleration();
  ::autofill::risk::Fingerprint_UserCharacteristics_Vector* temp = device_acceleration_;
  device_acceleration_ = NULL;
  return temp;
}
void Fingerprint_UserCharacteristics::set_allocated_device_acceleration(::autofill::risk::Fingerprint_UserCharacteristics_Vector* device_acceleration) {
  delete device_acceleration_;
  device_acceleration_ = device_acceleration;
  if (device_acceleration) {
    set_has_device_acceleration();
  } else {
    clear_has_device_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.UserCharacteristics.device_acceleration)
}

// optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
bool Fingerprint_UserCharacteristics::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fingerprint_UserCharacteristics::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
void Fingerprint_UserCharacteristics::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fingerprint_UserCharacteristics::clear_location() {
  if (location_ != NULL) location_->::autofill::risk::Fingerprint_UserCharacteristics_Location::Clear();
  clear_has_location();
}
const ::autofill::risk::Fingerprint_UserCharacteristics_Location& Fingerprint_UserCharacteristics::location() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.location)
  return location_ != NULL ? *location_
                         : *::autofill::risk::Fingerprint_UserCharacteristics_Location::internal_default_instance();
}
::autofill::risk::Fingerprint_UserCharacteristics_Location* Fingerprint_UserCharacteristics::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Location;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.UserCharacteristics.location)
  return location_;
}
::autofill::risk::Fingerprint_UserCharacteristics_Location* Fingerprint_UserCharacteristics::release_location() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.UserCharacteristics.location)
  clear_has_location();
  ::autofill::risk::Fingerprint_UserCharacteristics_Location* temp = location_;
  location_ = NULL;
  return temp;
}
void Fingerprint_UserCharacteristics::set_allocated_location(::autofill::risk::Fingerprint_UserCharacteristics_Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.UserCharacteristics.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint_Metadata::kTimestampMsFieldNumber;
const int Fingerprint_Metadata::kObfuscatedGaiaIdFieldNumber;
const int Fingerprint_Metadata::kFingerprinterVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint_Metadata::Fingerprint_Metadata()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.Metadata)
}
Fingerprint_Metadata::Fingerprint_Metadata(const Fingerprint_Metadata& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&fingerprinter_version_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(fingerprinter_version_));
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.Metadata)
}

void Fingerprint_Metadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fingerprinter_version_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(fingerprinter_version_));
}

Fingerprint_Metadata::~Fingerprint_Metadata() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.Metadata)
  SharedDtor();
}

void Fingerprint_Metadata::SharedDtor() {
}

void Fingerprint_Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint_Metadata& Fingerprint_Metadata::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint_Metadata* Fingerprint_Metadata::New(::google::protobuf::Arena* arena) const {
  Fingerprint_Metadata* n = new Fingerprint_Metadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.Metadata)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fingerprinter_version_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(fingerprinter_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint_Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 obfuscated_gaia_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_obfuscated_gaia_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obfuscated_gaia_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fingerprinter_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fingerprinter_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fingerprinter_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.Metadata)
  return false;
#undef DO_
}

void Fingerprint_Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint64 obfuscated_gaia_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->obfuscated_gaia_id(), output);
  }

  // optional int32 fingerprinter_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fingerprinter_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.Metadata)
}

size_t Fingerprint_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.Metadata)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint64 obfuscated_gaia_id = 2;
    if (has_obfuscated_gaia_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obfuscated_gaia_id());
    }

    // optional int32 fingerprinter_version = 3;
    if (has_fingerprinter_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fingerprinter_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint_Metadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint_Metadata*>(&from));
}

void Fingerprint_Metadata::MergeFrom(const Fingerprint_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      obfuscated_gaia_id_ = from.obfuscated_gaia_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      fingerprinter_version_ = from.fingerprinter_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fingerprint_Metadata::CopyFrom(const Fingerprint_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint_Metadata::IsInitialized() const {
  return true;
}

void Fingerprint_Metadata::Swap(Fingerprint_Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint_Metadata::InternalSwap(Fingerprint_Metadata* other) {
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(obfuscated_gaia_id_, other->obfuscated_gaia_id_);
  std::swap(fingerprinter_version_, other->fingerprinter_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint_Metadata::GetTypeName() const {
  return "autofill.risk.Fingerprint.Metadata";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint_Metadata

// optional int64 timestamp_ms = 1;
bool Fingerprint_Metadata::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint_Metadata::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint_Metadata::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint_Metadata::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 Fingerprint_Metadata::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Metadata.timestamp_ms)
  return timestamp_ms_;
}
void Fingerprint_Metadata::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Metadata.timestamp_ms)
}

// optional uint64 obfuscated_gaia_id = 2;
bool Fingerprint_Metadata::has_obfuscated_gaia_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint_Metadata::set_has_obfuscated_gaia_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint_Metadata::clear_has_obfuscated_gaia_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint_Metadata::clear_obfuscated_gaia_id() {
  obfuscated_gaia_id_ = GOOGLE_ULONGLONG(0);
  clear_has_obfuscated_gaia_id();
}
::google::protobuf::uint64 Fingerprint_Metadata::obfuscated_gaia_id() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Metadata.obfuscated_gaia_id)
  return obfuscated_gaia_id_;
}
void Fingerprint_Metadata::set_obfuscated_gaia_id(::google::protobuf::uint64 value) {
  set_has_obfuscated_gaia_id();
  obfuscated_gaia_id_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Metadata.obfuscated_gaia_id)
}

// optional int32 fingerprinter_version = 3;
bool Fingerprint_Metadata::has_fingerprinter_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fingerprint_Metadata::set_has_fingerprinter_version() {
  _has_bits_[0] |= 0x00000004u;
}
void Fingerprint_Metadata::clear_has_fingerprinter_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fingerprint_Metadata::clear_fingerprinter_version() {
  fingerprinter_version_ = 0;
  clear_has_fingerprinter_version();
}
::google::protobuf::int32 Fingerprint_Metadata::fingerprinter_version() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Metadata.fingerprinter_version)
  return fingerprinter_version_;
}
void Fingerprint_Metadata::set_fingerprinter_version(::google::protobuf::int32 value) {
  set_has_fingerprinter_version();
  fingerprinter_version_ = value;
  // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Metadata.fingerprinter_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fingerprint::kMachineCharacteristicsFieldNumber;
const int Fingerprint::kPerformanceFieldNumber;
const int Fingerprint::kUserCharacteristicsFieldNumber;
const int Fingerprint::kTransientStateFieldNumber;
const int Fingerprint::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fingerprint::Fingerprint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fingerprint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint)
}
Fingerprint::Fingerprint(const Fingerprint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_machine_characteristics()) {
    machine_characteristics_ = new ::autofill::risk::Fingerprint_MachineCharacteristics(*from.machine_characteristics_);
  } else {
    machine_characteristics_ = NULL;
  }
  if (from.has_performance()) {
    performance_ = new ::autofill::risk::Fingerprint_Performance(*from.performance_);
  } else {
    performance_ = NULL;
  }
  if (from.has_user_characteristics()) {
    user_characteristics_ = new ::autofill::risk::Fingerprint_UserCharacteristics(*from.user_characteristics_);
  } else {
    user_characteristics_ = NULL;
  }
  if (from.has_transient_state()) {
    transient_state_ = new ::autofill::risk::Fingerprint_TransientState(*from.transient_state_);
  } else {
    transient_state_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::autofill::risk::Fingerprint_Metadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint)
}

void Fingerprint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&machine_characteristics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&machine_characteristics_)) + sizeof(metadata_));
}

Fingerprint::~Fingerprint() {
  // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint)
  SharedDtor();
}

void Fingerprint::SharedDtor() {
  if (this != internal_default_instance()) {
    delete machine_characteristics_;
  }
  if (this != internal_default_instance()) {
    delete performance_;
  }
  if (this != internal_default_instance()) {
    delete user_characteristics_;
  }
  if (this != internal_default_instance()) {
    delete transient_state_;
  }
  if (this != internal_default_instance()) {
    delete metadata_;
  }
}

void Fingerprint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fingerprint& Fingerprint::default_instance() {
  protobuf_fingerprint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fingerprint* Fingerprint::New(::google::protobuf::Arena* arena) const {
  Fingerprint* n = new Fingerprint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fingerprint::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_machine_characteristics()) {
      GOOGLE_DCHECK(machine_characteristics_ != NULL);
      machine_characteristics_->::autofill::risk::Fingerprint_MachineCharacteristics::Clear();
    }
    if (has_performance()) {
      GOOGLE_DCHECK(performance_ != NULL);
      performance_->::autofill::risk::Fingerprint_Performance::Clear();
    }
    if (has_user_characteristics()) {
      GOOGLE_DCHECK(user_characteristics_ != NULL);
      user_characteristics_->::autofill::risk::Fingerprint_UserCharacteristics::Clear();
    }
    if (has_transient_state()) {
      GOOGLE_DCHECK(transient_state_ != NULL);
      transient_state_->::autofill::risk::Fingerprint_TransientState::Clear();
    }
    if (has_metadata()) {
      GOOGLE_DCHECK(metadata_ != NULL);
      metadata_->::autofill::risk::Fingerprint_Metadata::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fingerprint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine_characteristics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.Performance performance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_performance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_characteristics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transient_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint)
  return false;
#undef DO_
}

void Fingerprint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->machine_characteristics_, output);
  }

  // optional .autofill.risk.Fingerprint.Performance performance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->performance_, output);
  }

  // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->user_characteristics_, output);
  }

  // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->transient_state_, output);
  }

  // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->metadata_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint)
}

size_t Fingerprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
    if (has_machine_characteristics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->machine_characteristics_);
    }

    // optional .autofill.risk.Fingerprint.Performance performance = 2;
    if (has_performance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->performance_);
    }

    // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
    if (has_user_characteristics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_characteristics_);
    }

    // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
    if (has_transient_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transient_state_);
    }

    // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metadata_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fingerprint*>(&from));
}

void Fingerprint::MergeFrom(const Fingerprint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_machine_characteristics()->::autofill::risk::Fingerprint_MachineCharacteristics::MergeFrom(from.machine_characteristics());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_performance()->::autofill::risk::Fingerprint_Performance::MergeFrom(from.performance());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_user_characteristics()->::autofill::risk::Fingerprint_UserCharacteristics::MergeFrom(from.user_characteristics());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_transient_state()->::autofill::risk::Fingerprint_TransientState::MergeFrom(from.transient_state());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_metadata()->::autofill::risk::Fingerprint_Metadata::MergeFrom(from.metadata());
    }
  }
}

void Fingerprint::CopyFrom(const Fingerprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint::IsInitialized() const {
  return true;
}

void Fingerprint::Swap(Fingerprint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fingerprint::InternalSwap(Fingerprint* other) {
  std::swap(machine_characteristics_, other->machine_characteristics_);
  std::swap(performance_, other->performance_);
  std::swap(user_characteristics_, other->user_characteristics_);
  std::swap(transient_state_, other->transient_state_);
  std::swap(metadata_, other->metadata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fingerprint::GetTypeName() const {
  return "autofill.risk.Fingerprint";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fingerprint

// optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
bool Fingerprint::has_machine_characteristics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fingerprint::set_has_machine_characteristics() {
  _has_bits_[0] |= 0x00000001u;
}
void Fingerprint::clear_has_machine_characteristics() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fingerprint::clear_machine_characteristics() {
  if (machine_characteristics_ != NULL) machine_characteristics_->::autofill::risk::Fingerprint_MachineCharacteristics::Clear();
  clear_has_machine_characteristics();
}
const ::autofill::risk::Fingerprint_MachineCharacteristics& Fingerprint::machine_characteristics() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.machine_characteristics)
  return machine_characteristics_ != NULL ? *machine_characteristics_
                         : *::autofill::risk::Fingerprint_MachineCharacteristics::internal_default_instance();
}
::autofill::risk::Fingerprint_MachineCharacteristics* Fingerprint::mutable_machine_characteristics() {
  set_has_machine_characteristics();
  if (machine_characteristics_ == NULL) {
    machine_characteristics_ = new ::autofill::risk::Fingerprint_MachineCharacteristics;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.machine_characteristics)
  return machine_characteristics_;
}
::autofill::risk::Fingerprint_MachineCharacteristics* Fingerprint::release_machine_characteristics() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.machine_characteristics)
  clear_has_machine_characteristics();
  ::autofill::risk::Fingerprint_MachineCharacteristics* temp = machine_characteristics_;
  machine_characteristics_ = NULL;
  return temp;
}
void Fingerprint::set_allocated_machine_characteristics(::autofill::risk::Fingerprint_MachineCharacteristics* machine_characteristics) {
  delete machine_characteristics_;
  machine_characteristics_ = machine_characteristics;
  if (machine_characteristics) {
    set_has_machine_characteristics();
  } else {
    clear_has_machine_characteristics();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.machine_characteristics)
}

// optional .autofill.risk.Fingerprint.Performance performance = 2;
bool Fingerprint::has_performance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fingerprint::set_has_performance() {
  _has_bits_[0] |= 0x00000002u;
}
void Fingerprint::clear_has_performance() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fingerprint::clear_performance() {
  if (performance_ != NULL) performance_->::autofill::risk::Fingerprint_Performance::Clear();
  clear_has_performance();
}
const ::autofill::risk::Fingerprint_Performance& Fingerprint::performance() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.performance)
  return performance_ != NULL ? *performance_
                         : *::autofill::risk::Fingerprint_Performance::internal_default_instance();
}
::autofill::risk::Fingerprint_Performance* Fingerprint::mutable_performance() {
  set_has_performance();
  if (performance_ == NULL) {
    performance_ = new ::autofill::risk::Fingerprint_Performance;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.performance)
  return performance_;
}
::autofill::risk::Fingerprint_Performance* Fingerprint::release_performance() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.performance)
  clear_has_performance();
  ::autofill::risk::Fingerprint_Performance* temp = performance_;
  performance_ = NULL;
  return temp;
}
void Fingerprint::set_allocated_performance(::autofill::risk::Fingerprint_Performance* performance) {
  delete performance_;
  performance_ = performance;
  if (performance) {
    set_has_performance();
  } else {
    clear_has_performance();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.performance)
}

// optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
bool Fingerprint::has_user_characteristics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fingerprint::set_has_user_characteristics() {
  _has_bits_[0] |= 0x00000004u;
}
void Fingerprint::clear_has_user_characteristics() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fingerprint::clear_user_characteristics() {
  if (user_characteristics_ != NULL) user_characteristics_->::autofill::risk::Fingerprint_UserCharacteristics::Clear();
  clear_has_user_characteristics();
}
const ::autofill::risk::Fingerprint_UserCharacteristics& Fingerprint::user_characteristics() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.user_characteristics)
  return user_characteristics_ != NULL ? *user_characteristics_
                         : *::autofill::risk::Fingerprint_UserCharacteristics::internal_default_instance();
}
::autofill::risk::Fingerprint_UserCharacteristics* Fingerprint::mutable_user_characteristics() {
  set_has_user_characteristics();
  if (user_characteristics_ == NULL) {
    user_characteristics_ = new ::autofill::risk::Fingerprint_UserCharacteristics;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.user_characteristics)
  return user_characteristics_;
}
::autofill::risk::Fingerprint_UserCharacteristics* Fingerprint::release_user_characteristics() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.user_characteristics)
  clear_has_user_characteristics();
  ::autofill::risk::Fingerprint_UserCharacteristics* temp = user_characteristics_;
  user_characteristics_ = NULL;
  return temp;
}
void Fingerprint::set_allocated_user_characteristics(::autofill::risk::Fingerprint_UserCharacteristics* user_characteristics) {
  delete user_characteristics_;
  user_characteristics_ = user_characteristics;
  if (user_characteristics) {
    set_has_user_characteristics();
  } else {
    clear_has_user_characteristics();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.user_characteristics)
}

// optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
bool Fingerprint::has_transient_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Fingerprint::set_has_transient_state() {
  _has_bits_[0] |= 0x00000008u;
}
void Fingerprint::clear_has_transient_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void Fingerprint::clear_transient_state() {
  if (transient_state_ != NULL) transient_state_->::autofill::risk::Fingerprint_TransientState::Clear();
  clear_has_transient_state();
}
const ::autofill::risk::Fingerprint_TransientState& Fingerprint::transient_state() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.transient_state)
  return transient_state_ != NULL ? *transient_state_
                         : *::autofill::risk::Fingerprint_TransientState::internal_default_instance();
}
::autofill::risk::Fingerprint_TransientState* Fingerprint::mutable_transient_state() {
  set_has_transient_state();
  if (transient_state_ == NULL) {
    transient_state_ = new ::autofill::risk::Fingerprint_TransientState;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.transient_state)
  return transient_state_;
}
::autofill::risk::Fingerprint_TransientState* Fingerprint::release_transient_state() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.transient_state)
  clear_has_transient_state();
  ::autofill::risk::Fingerprint_TransientState* temp = transient_state_;
  transient_state_ = NULL;
  return temp;
}
void Fingerprint::set_allocated_transient_state(::autofill::risk::Fingerprint_TransientState* transient_state) {
  delete transient_state_;
  transient_state_ = transient_state;
  if (transient_state) {
    set_has_transient_state();
  } else {
    clear_has_transient_state();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.transient_state)
}

// optional .autofill.risk.Fingerprint.Metadata metadata = 5;
bool Fingerprint::has_metadata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Fingerprint::set_has_metadata() {
  _has_bits_[0] |= 0x00000010u;
}
void Fingerprint::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000010u;
}
void Fingerprint::clear_metadata() {
  if (metadata_ != NULL) metadata_->::autofill::risk::Fingerprint_Metadata::Clear();
  clear_has_metadata();
}
const ::autofill::risk::Fingerprint_Metadata& Fingerprint::metadata() const {
  // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::autofill::risk::Fingerprint_Metadata::internal_default_instance();
}
::autofill::risk::Fingerprint_Metadata* Fingerprint::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) {
    metadata_ = new ::autofill::risk::Fingerprint_Metadata;
  }
  // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.metadata)
  return metadata_;
}
::autofill::risk::Fingerprint_Metadata* Fingerprint::release_metadata() {
  // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.metadata)
  clear_has_metadata();
  ::autofill::risk::Fingerprint_Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Fingerprint::set_allocated_metadata(::autofill::risk::Fingerprint_Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace risk
}  // namespace autofill

// @@protoc_insertion_point(global_scope)
