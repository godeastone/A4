// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autofill_sync.proto

#ifndef PROTOBUF_autofill_5fsync_2eproto__INCLUDED
#define PROTOBUF_autofill_5fsync_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace autofill {
class AutofillSyncStorageKey;
class AutofillSyncStorageKeyDefaultTypeInternal;
extern AutofillSyncStorageKeyDefaultTypeInternal _AutofillSyncStorageKey_default_instance_;
}  // namespace autofill

namespace autofill {

namespace protobuf_autofill_5fsync_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_autofill_5fsync_2eproto

// ===================================================================

class AutofillSyncStorageKey : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:autofill.AutofillSyncStorageKey) */ {
 public:
  AutofillSyncStorageKey();
  virtual ~AutofillSyncStorageKey();

  AutofillSyncStorageKey(const AutofillSyncStorageKey& from);

  inline AutofillSyncStorageKey& operator=(const AutofillSyncStorageKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AutofillSyncStorageKey& default_instance();

  static inline const AutofillSyncStorageKey* internal_default_instance() {
    return reinterpret_cast<const AutofillSyncStorageKey*>(
               &_AutofillSyncStorageKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AutofillSyncStorageKey* other);

  // implements Message ----------------------------------------------

  inline AutofillSyncStorageKey* New() const PROTOBUF_FINAL { return New(NULL); }

  AutofillSyncStorageKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AutofillSyncStorageKey& from);
  void MergeFrom(const AutofillSyncStorageKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillSyncStorageKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:autofill.AutofillSyncStorageKey)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_autofill_5fsync_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillSyncStorageKey

// optional string name = 1;
inline bool AutofillSyncStorageKey::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutofillSyncStorageKey::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutofillSyncStorageKey::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutofillSyncStorageKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AutofillSyncStorageKey::name() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillSyncStorageKey.name)
  return name_.GetNoArena();
}
inline void AutofillSyncStorageKey::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillSyncStorageKey.name)
}
#if LANG_CXX11
inline void AutofillSyncStorageKey::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillSyncStorageKey.name)
}
#endif
inline void AutofillSyncStorageKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillSyncStorageKey.name)
}
inline void AutofillSyncStorageKey::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillSyncStorageKey.name)
}
inline ::std::string* AutofillSyncStorageKey::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillSyncStorageKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutofillSyncStorageKey::release_name() {
  // @@protoc_insertion_point(field_release:autofill.AutofillSyncStorageKey.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillSyncStorageKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillSyncStorageKey.name)
}

// optional string value = 2;
inline bool AutofillSyncStorageKey::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutofillSyncStorageKey::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutofillSyncStorageKey::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutofillSyncStorageKey::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& AutofillSyncStorageKey::value() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillSyncStorageKey.value)
  return value_.GetNoArena();
}
inline void AutofillSyncStorageKey::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillSyncStorageKey.value)
}
#if LANG_CXX11
inline void AutofillSyncStorageKey::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillSyncStorageKey.value)
}
#endif
inline void AutofillSyncStorageKey::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillSyncStorageKey.value)
}
inline void AutofillSyncStorageKey::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillSyncStorageKey.value)
}
inline ::std::string* AutofillSyncStorageKey::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillSyncStorageKey.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutofillSyncStorageKey::release_value() {
  // @@protoc_insertion_point(field_release:autofill.AutofillSyncStorageKey.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillSyncStorageKey::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillSyncStorageKey.value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace autofill

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_autofill_5fsync_2eproto__INCLUDED
