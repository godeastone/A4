// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace autofill {
class AutofillQueryContents_Form_FieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutofillQueryContents_Form_Field> {
} _AutofillQueryContents_Form_Field_default_instance_;
class AutofillQueryContents_FormDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutofillQueryContents_Form> {
} _AutofillQueryContents_Form_default_instance_;
class AutofillQueryContentsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutofillQueryContents> {
} _AutofillQueryContents_default_instance_;
class AutofillQueryResponseContents_Field_FieldPredictionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutofillQueryResponseContents_Field_FieldPrediction> {
} _AutofillQueryResponseContents_Field_FieldPrediction_default_instance_;
class AutofillQueryResponseContents_FieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutofillQueryResponseContents_Field> {
} _AutofillQueryResponseContents_Field_default_instance_;
class AutofillQueryResponseContentsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutofillQueryResponseContents> {
} _AutofillQueryResponseContents_default_instance_;
class AutofillUploadContents_FieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutofillUploadContents_Field> {
} _AutofillUploadContents_Field_default_instance_;
class AutofillUploadContentsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutofillUploadContents> {
} _AutofillUploadContents_default_instance_;

namespace protobuf_server_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _AutofillQueryContents_Form_Field_default_instance_.Shutdown();
  _AutofillQueryContents_Form_default_instance_.Shutdown();
  _AutofillQueryContents_default_instance_.Shutdown();
  _AutofillQueryResponseContents_Field_FieldPrediction_default_instance_.Shutdown();
  _AutofillQueryResponseContents_Field_default_instance_.Shutdown();
  _AutofillQueryResponseContents_default_instance_.Shutdown();
  _AutofillUploadContents_Field_default_instance_.Shutdown();
  _AutofillUploadContents_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AutofillQueryContents_Form_Field_default_instance_.DefaultConstruct();
  _AutofillQueryContents_Form_default_instance_.DefaultConstruct();
  _AutofillQueryContents_default_instance_.DefaultConstruct();
  _AutofillQueryResponseContents_Field_FieldPrediction_default_instance_.DefaultConstruct();
  _AutofillQueryResponseContents_Field_default_instance_.DefaultConstruct();
  _AutofillQueryResponseContents_default_instance_.DefaultConstruct();
  _AutofillUploadContents_Field_default_instance_.DefaultConstruct();
  _AutofillUploadContents_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_server_2eproto

bool AutofillUploadContents_Field_PasswordGenerationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::NO_GENERATION;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::AUTOMATICALLY_TRIGGERED_GENERATION_ON_SIGN_UP_FORM;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::AUTOMATICALLY_TRIGGERED_GENERATION_ON_CHANGE_PASSWORD_FORM;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::MANUALLY_TRIGGERED_GENERATION_ON_SIGN_UP_FORM;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::MANUALLY_TRIGGERED_GENERATION_ON_CHANGE_PASSWORD_FORM;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::IGNORED_GENERATION_POPUP;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::PasswordGenerationType_MIN;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::PasswordGenerationType_MAX;
const int AutofillUploadContents_Field::PasswordGenerationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AutofillUploadContents_Field_FormClassifierOutcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::NO_OUTCOME;
const AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::NON_GENERATION_ELEMENT;
const AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::GENERATION_ELEMENT;
const AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::FormClassifierOutcome_MIN;
const AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::FormClassifierOutcome_MAX;
const int AutofillUploadContents_Field::FormClassifierOutcome_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AutofillUploadContents_Field_VoteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::NO_INFORMATION;
const AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::CREDENTIALS_REUSED;
const AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::USERNAME_OVERWRITTEN;
const AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::USERNAME_EDITED;
const AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::BASE_HEURISTIC;
const AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::HTML_CLASSIFIER;
const AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::FIRST_USE;
const AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::VoteType_MIN;
const AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::VoteType_MAX;
const int AutofillUploadContents_Field::VoteType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryContents_Form_Field::kSignatureFieldNumber;
const int AutofillQueryContents_Form_Field::kNameFieldNumber;
const int AutofillQueryContents_Form_Field::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryContents_Form_Field::AutofillQueryContents_Form_Field()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryContents.Form.Field)
}
AutofillQueryContents_Form_Field::AutofillQueryContents_Form_Field(const AutofillQueryContents_Form_Field& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  signature_ = from.signature_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryContents.Form.Field)
}

void AutofillQueryContents_Form_Field::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = 0u;
}

AutofillQueryContents_Form_Field::~AutofillQueryContents_Form_Field() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryContents.Form.Field)
  SharedDtor();
}

void AutofillQueryContents_Form_Field::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AutofillQueryContents_Form_Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryContents_Form_Field& AutofillQueryContents_Form_Field::default_instance() {
  protobuf_server_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutofillQueryContents_Form_Field* AutofillQueryContents_Form_Field::New(::google::protobuf::Arena* arena) const {
  AutofillQueryContents_Form_Field* n = new AutofillQueryContents_Form_Field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutofillQueryContents_Form_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryContents.Form.Field)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
  }
  signature_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutofillQueryContents_Form_Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryContents.Form.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_signature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryContents.Form.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryContents.Form.Field)
  return false;
#undef DO_
}

void AutofillQueryContents_Form_Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryContents.Form.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 signature = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->signature(), output);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional string type = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryContents.Form.Field)
}

size_t AutofillQueryContents_Form_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryContents.Form.Field)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required fixed32 signature = 5;
  if (has_signature()) {
    total_size += 1 + 4;
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillQueryContents_Form_Field::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillQueryContents_Form_Field*>(&from));
}

void AutofillQueryContents_Form_Field::MergeFrom(const AutofillQueryContents_Form_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryContents.Form.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      signature_ = from.signature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillQueryContents_Form_Field::CopyFrom(const AutofillQueryContents_Form_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryContents.Form.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryContents_Form_Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void AutofillQueryContents_Form_Field::Swap(AutofillQueryContents_Form_Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutofillQueryContents_Form_Field::InternalSwap(AutofillQueryContents_Form_Field* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  std::swap(signature_, other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryContents_Form_Field::GetTypeName() const {
  return "autofill.AutofillQueryContents.Form.Field";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillQueryContents_Form_Field

// required fixed32 signature = 5;
bool AutofillQueryContents_Form_Field::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutofillQueryContents_Form_Field::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void AutofillQueryContents_Form_Field::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void AutofillQueryContents_Form_Field::clear_signature() {
  signature_ = 0u;
  clear_has_signature();
}
::google::protobuf::uint32 AutofillQueryContents_Form_Field::signature() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.Form.Field.signature)
  return signature_;
}
void AutofillQueryContents_Form_Field::set_signature(::google::protobuf::uint32 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryContents.Form.Field.signature)
}

// optional string name = 8;
bool AutofillQueryContents_Form_Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryContents_Form_Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryContents_Form_Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryContents_Form_Field::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& AutofillQueryContents_Form_Field::name() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.Form.Field.name)
  return name_.GetNoArena();
}
void AutofillQueryContents_Form_Field::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryContents.Form.Field.name)
}
#if LANG_CXX11
void AutofillQueryContents_Form_Field::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillQueryContents.Form.Field.name)
}
#endif
void AutofillQueryContents_Form_Field::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillQueryContents.Form.Field.name)
}
void AutofillQueryContents_Form_Field::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillQueryContents.Form.Field.name)
}
::std::string* AutofillQueryContents_Form_Field::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryContents.Form.Field.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillQueryContents_Form_Field::release_name() {
  // @@protoc_insertion_point(field_release:autofill.AutofillQueryContents.Form.Field.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillQueryContents_Form_Field::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillQueryContents.Form.Field.name)
}

// optional string type = 9;
bool AutofillQueryContents_Form_Field::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutofillQueryContents_Form_Field::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void AutofillQueryContents_Form_Field::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutofillQueryContents_Form_Field::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& AutofillQueryContents_Form_Field::type() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.Form.Field.type)
  return type_.GetNoArena();
}
void AutofillQueryContents_Form_Field::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryContents.Form.Field.type)
}
#if LANG_CXX11
void AutofillQueryContents_Form_Field::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillQueryContents.Form.Field.type)
}
#endif
void AutofillQueryContents_Form_Field::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillQueryContents.Form.Field.type)
}
void AutofillQueryContents_Form_Field::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillQueryContents.Form.Field.type)
}
::std::string* AutofillQueryContents_Form_Field::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryContents.Form.Field.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillQueryContents_Form_Field::release_type() {
  // @@protoc_insertion_point(field_release:autofill.AutofillQueryContents.Form.Field.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillQueryContents_Form_Field::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillQueryContents.Form.Field.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryContents_Form::kSignatureFieldNumber;
const int AutofillQueryContents_Form::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryContents_Form::AutofillQueryContents_Form()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryContents.Form)
}
AutofillQueryContents_Form::AutofillQueryContents_Form(const AutofillQueryContents_Form& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_ = from.signature_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryContents.Form)
}

void AutofillQueryContents_Form::SharedCtor() {
  _cached_size_ = 0;
  signature_ = GOOGLE_ULONGLONG(0);
}

AutofillQueryContents_Form::~AutofillQueryContents_Form() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryContents.Form)
  SharedDtor();
}

void AutofillQueryContents_Form::SharedDtor() {
}

void AutofillQueryContents_Form::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryContents_Form& AutofillQueryContents_Form::default_instance() {
  protobuf_server_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutofillQueryContents_Form* AutofillQueryContents_Form::New(::google::protobuf::Arena* arena) const {
  AutofillQueryContents_Form* n = new AutofillQueryContents_Form;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutofillQueryContents_Form::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryContents.Form)
  field_.Clear();
  signature_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutofillQueryContents_Form::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryContents.Form)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 signature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_signature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Field = 4 { ... };
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(35u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                4, input, add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryContents.Form)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryContents.Form)
  return false;
#undef DO_
}

void AutofillQueryContents_Form::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryContents.Form)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 signature = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->signature(), output);
  }

  // repeated group Field = 4 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      4, this->field(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryContents.Form)
}

size_t AutofillQueryContents_Form::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryContents.Form)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required fixed64 signature = 3;
  if (has_signature()) {
    total_size += 1 + 8;
  }
  // repeated group Field = 4 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->field_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->field(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillQueryContents_Form::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillQueryContents_Form*>(&from));
}

void AutofillQueryContents_Form::MergeFrom(const AutofillQueryContents_Form& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryContents.Form)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  if (from.has_signature()) {
    set_signature(from.signature());
  }
}

void AutofillQueryContents_Form::CopyFrom(const AutofillQueryContents_Form& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryContents.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryContents_Form::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->field())) return false;
  return true;
}

void AutofillQueryContents_Form::Swap(AutofillQueryContents_Form* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutofillQueryContents_Form::InternalSwap(AutofillQueryContents_Form* other) {
  field_.InternalSwap(&other->field_);
  std::swap(signature_, other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryContents_Form::GetTypeName() const {
  return "autofill.AutofillQueryContents.Form";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillQueryContents_Form

// required fixed64 signature = 3;
bool AutofillQueryContents_Form::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryContents_Form::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryContents_Form::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryContents_Form::clear_signature() {
  signature_ = GOOGLE_ULONGLONG(0);
  clear_has_signature();
}
::google::protobuf::uint64 AutofillQueryContents_Form::signature() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.Form.signature)
  return signature_;
}
void AutofillQueryContents_Form::set_signature(::google::protobuf::uint64 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryContents.Form.signature)
}

// repeated group Field = 4 { ... };
int AutofillQueryContents_Form::field_size() const {
  return field_.size();
}
void AutofillQueryContents_Form::clear_field() {
  field_.Clear();
}
const ::autofill::AutofillQueryContents_Form_Field& AutofillQueryContents_Form::field(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.Form.field)
  return field_.Get(index);
}
::autofill::AutofillQueryContents_Form_Field* AutofillQueryContents_Form::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryContents.Form.field)
  return field_.Mutable(index);
}
::autofill::AutofillQueryContents_Form_Field* AutofillQueryContents_Form::add_field() {
  // @@protoc_insertion_point(field_add:autofill.AutofillQueryContents.Form.field)
  return field_.Add();
}
::google::protobuf::RepeatedPtrField< ::autofill::AutofillQueryContents_Form_Field >*
AutofillQueryContents_Form::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillQueryContents.Form.field)
  return &field_;
}
const ::google::protobuf::RepeatedPtrField< ::autofill::AutofillQueryContents_Form_Field >&
AutofillQueryContents_Form::field() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillQueryContents.Form.field)
  return field_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryContents::kClientVersionFieldNumber;
const int AutofillQueryContents::kFormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryContents::AutofillQueryContents()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryContents)
}
AutofillQueryContents::AutofillQueryContents(const AutofillQueryContents& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      form_(from.form_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_version()) {
    client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryContents)
}

void AutofillQueryContents::SharedCtor() {
  _cached_size_ = 0;
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AutofillQueryContents::~AutofillQueryContents() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryContents)
  SharedDtor();
}

void AutofillQueryContents::SharedDtor() {
  client_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AutofillQueryContents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryContents& AutofillQueryContents::default_instance() {
  protobuf_server_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutofillQueryContents* AutofillQueryContents::New(::google::protobuf::Arena* arena) const {
  AutofillQueryContents* n = new AutofillQueryContents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutofillQueryContents::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryContents)
  form_.Clear();
  if (has_client_version()) {
    GOOGLE_DCHECK(!client_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*client_version_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutofillQueryContents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryContents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Form = 2 { ... };
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(19u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, add_form()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryContents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryContents)
  return false;
#undef DO_
}

void AutofillQueryContents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryContents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_version(), output);
  }

  // repeated group Form = 2 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->form_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      2, this->form(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryContents)
}

size_t AutofillQueryContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryContents)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required string client_version = 1;
  if (has_client_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_version());
  }
  // repeated group Form = 2 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->form_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->form(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillQueryContents::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillQueryContents*>(&from));
}

void AutofillQueryContents::MergeFrom(const AutofillQueryContents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryContents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  form_.MergeFrom(from.form_);
  if (from.has_client_version()) {
    set_has_client_version();
    client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
}

void AutofillQueryContents::CopyFrom(const AutofillQueryContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryContents::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->form())) return false;
  return true;
}

void AutofillQueryContents::Swap(AutofillQueryContents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutofillQueryContents::InternalSwap(AutofillQueryContents* other) {
  form_.InternalSwap(&other->form_);
  client_version_.Swap(&other->client_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryContents::GetTypeName() const {
  return "autofill.AutofillQueryContents";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillQueryContents

// required string client_version = 1;
bool AutofillQueryContents::has_client_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryContents::set_has_client_version() {
  _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryContents::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryContents::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_version();
}
const ::std::string& AutofillQueryContents::client_version() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.client_version)
  return client_version_.GetNoArena();
}
void AutofillQueryContents::set_client_version(const ::std::string& value) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryContents.client_version)
}
#if LANG_CXX11
void AutofillQueryContents::set_client_version(::std::string&& value) {
  set_has_client_version();
  client_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillQueryContents.client_version)
}
#endif
void AutofillQueryContents::set_client_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillQueryContents.client_version)
}
void AutofillQueryContents::set_client_version(const char* value, size_t size) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillQueryContents.client_version)
}
::std::string* AutofillQueryContents::mutable_client_version() {
  set_has_client_version();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryContents.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillQueryContents::release_client_version() {
  // @@protoc_insertion_point(field_release:autofill.AutofillQueryContents.client_version)
  clear_has_client_version();
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillQueryContents::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    set_has_client_version();
  } else {
    clear_has_client_version();
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillQueryContents.client_version)
}

// repeated group Form = 2 { ... };
int AutofillQueryContents::form_size() const {
  return form_.size();
}
void AutofillQueryContents::clear_form() {
  form_.Clear();
}
const ::autofill::AutofillQueryContents_Form& AutofillQueryContents::form(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.form)
  return form_.Get(index);
}
::autofill::AutofillQueryContents_Form* AutofillQueryContents::mutable_form(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryContents.form)
  return form_.Mutable(index);
}
::autofill::AutofillQueryContents_Form* AutofillQueryContents::add_form() {
  // @@protoc_insertion_point(field_add:autofill.AutofillQueryContents.form)
  return form_.Add();
}
::google::protobuf::RepeatedPtrField< ::autofill::AutofillQueryContents_Form >*
AutofillQueryContents::mutable_form() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillQueryContents.form)
  return &form_;
}
const ::google::protobuf::RepeatedPtrField< ::autofill::AutofillQueryContents_Form >&
AutofillQueryContents::form() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillQueryContents.form)
  return form_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryResponseContents_Field_FieldPrediction::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryResponseContents_Field_FieldPrediction::AutofillQueryResponseContents_Field_FieldPrediction()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
}
AutofillQueryResponseContents_Field_FieldPrediction::AutofillQueryResponseContents_Field_FieldPrediction(const AutofillQueryResponseContents_Field_FieldPrediction& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
}

void AutofillQueryResponseContents_Field_FieldPrediction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
}

AutofillQueryResponseContents_Field_FieldPrediction::~AutofillQueryResponseContents_Field_FieldPrediction() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  SharedDtor();
}

void AutofillQueryResponseContents_Field_FieldPrediction::SharedDtor() {
}

void AutofillQueryResponseContents_Field_FieldPrediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryResponseContents_Field_FieldPrediction& AutofillQueryResponseContents_Field_FieldPrediction::default_instance() {
  protobuf_server_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutofillQueryResponseContents_Field_FieldPrediction* AutofillQueryResponseContents_Field_FieldPrediction::New(::google::protobuf::Arena* arena) const {
  AutofillQueryResponseContents_Field_FieldPrediction* n = new AutofillQueryResponseContents_Field_FieldPrediction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutofillQueryResponseContents_Field_FieldPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutofillQueryResponseContents_Field_FieldPrediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  return false;
#undef DO_
}

void AutofillQueryResponseContents_Field_FieldPrediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
}

size_t AutofillQueryResponseContents_Field_FieldPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional fixed32 type = 1;
  if (has_type()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillQueryResponseContents_Field_FieldPrediction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillQueryResponseContents_Field_FieldPrediction*>(&from));
}

void AutofillQueryResponseContents_Field_FieldPrediction::MergeFrom(const AutofillQueryResponseContents_Field_FieldPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void AutofillQueryResponseContents_Field_FieldPrediction::CopyFrom(const AutofillQueryResponseContents_Field_FieldPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponseContents.Field.FieldPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponseContents_Field_FieldPrediction::IsInitialized() const {
  return true;
}

void AutofillQueryResponseContents_Field_FieldPrediction::Swap(AutofillQueryResponseContents_Field_FieldPrediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutofillQueryResponseContents_Field_FieldPrediction::InternalSwap(AutofillQueryResponseContents_Field_FieldPrediction* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryResponseContents_Field_FieldPrediction::GetTypeName() const {
  return "autofill.AutofillQueryResponseContents.Field.FieldPrediction";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillQueryResponseContents_Field_FieldPrediction

// optional fixed32 type = 1;
bool AutofillQueryResponseContents_Field_FieldPrediction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryResponseContents_Field_FieldPrediction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryResponseContents_Field_FieldPrediction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryResponseContents_Field_FieldPrediction::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 AutofillQueryResponseContents_Field_FieldPrediction::type() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponseContents.Field.FieldPrediction.type)
  return type_;
}
void AutofillQueryResponseContents_Field_FieldPrediction::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryResponseContents.Field.FieldPrediction.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryResponseContents_Field::kOverallTypePredictionFieldNumber;
const int AutofillQueryResponseContents_Field::kPredictionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryResponseContents_Field::AutofillQueryResponseContents_Field()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponseContents.Field)
}
AutofillQueryResponseContents_Field::AutofillQueryResponseContents_Field(const AutofillQueryResponseContents_Field& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  overall_type_prediction_ = from.overall_type_prediction_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponseContents.Field)
}

void AutofillQueryResponseContents_Field::SharedCtor() {
  _cached_size_ = 0;
  overall_type_prediction_ = 0u;
}

AutofillQueryResponseContents_Field::~AutofillQueryResponseContents_Field() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponseContents.Field)
  SharedDtor();
}

void AutofillQueryResponseContents_Field::SharedDtor() {
}

void AutofillQueryResponseContents_Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryResponseContents_Field& AutofillQueryResponseContents_Field::default_instance() {
  protobuf_server_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutofillQueryResponseContents_Field* AutofillQueryResponseContents_Field::New(::google::protobuf::Arena* arena) const {
  AutofillQueryResponseContents_Field* n = new AutofillQueryResponseContents_Field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutofillQueryResponseContents_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponseContents.Field)
  predictions_.Clear();
  overall_type_prediction_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutofillQueryResponseContents_Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponseContents.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 overall_type_prediction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_overall_type_prediction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &overall_type_prediction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autofill.AutofillQueryResponseContents.Field.FieldPrediction predictions = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponseContents.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponseContents.Field)
  return false;
#undef DO_
}

void AutofillQueryResponseContents_Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponseContents.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 overall_type_prediction = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->overall_type_prediction(), output);
  }

  // repeated .autofill.AutofillQueryResponseContents.Field.FieldPrediction predictions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predictions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->predictions(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponseContents.Field)
}

size_t AutofillQueryResponseContents_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponseContents.Field)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required fixed32 overall_type_prediction = 3;
  if (has_overall_type_prediction()) {
    total_size += 1 + 4;
  }
  // repeated .autofill.AutofillQueryResponseContents.Field.FieldPrediction predictions = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predictions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillQueryResponseContents_Field::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillQueryResponseContents_Field*>(&from));
}

void AutofillQueryResponseContents_Field::MergeFrom(const AutofillQueryResponseContents_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponseContents.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  if (from.has_overall_type_prediction()) {
    set_overall_type_prediction(from.overall_type_prediction());
  }
}

void AutofillQueryResponseContents_Field::CopyFrom(const AutofillQueryResponseContents_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponseContents.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponseContents_Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AutofillQueryResponseContents_Field::Swap(AutofillQueryResponseContents_Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutofillQueryResponseContents_Field::InternalSwap(AutofillQueryResponseContents_Field* other) {
  predictions_.InternalSwap(&other->predictions_);
  std::swap(overall_type_prediction_, other->overall_type_prediction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryResponseContents_Field::GetTypeName() const {
  return "autofill.AutofillQueryResponseContents.Field";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillQueryResponseContents_Field

// required fixed32 overall_type_prediction = 3;
bool AutofillQueryResponseContents_Field::has_overall_type_prediction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryResponseContents_Field::set_has_overall_type_prediction() {
  _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryResponseContents_Field::clear_has_overall_type_prediction() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryResponseContents_Field::clear_overall_type_prediction() {
  overall_type_prediction_ = 0u;
  clear_has_overall_type_prediction();
}
::google::protobuf::uint32 AutofillQueryResponseContents_Field::overall_type_prediction() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponseContents.Field.overall_type_prediction)
  return overall_type_prediction_;
}
void AutofillQueryResponseContents_Field::set_overall_type_prediction(::google::protobuf::uint32 value) {
  set_has_overall_type_prediction();
  overall_type_prediction_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryResponseContents.Field.overall_type_prediction)
}

// repeated .autofill.AutofillQueryResponseContents.Field.FieldPrediction predictions = 7;
int AutofillQueryResponseContents_Field::predictions_size() const {
  return predictions_.size();
}
void AutofillQueryResponseContents_Field::clear_predictions() {
  predictions_.Clear();
}
const ::autofill::AutofillQueryResponseContents_Field_FieldPrediction& AutofillQueryResponseContents_Field::predictions(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponseContents.Field.predictions)
  return predictions_.Get(index);
}
::autofill::AutofillQueryResponseContents_Field_FieldPrediction* AutofillQueryResponseContents_Field::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryResponseContents.Field.predictions)
  return predictions_.Mutable(index);
}
::autofill::AutofillQueryResponseContents_Field_FieldPrediction* AutofillQueryResponseContents_Field::add_predictions() {
  // @@protoc_insertion_point(field_add:autofill.AutofillQueryResponseContents.Field.predictions)
  return predictions_.Add();
}
::google::protobuf::RepeatedPtrField< ::autofill::AutofillQueryResponseContents_Field_FieldPrediction >*
AutofillQueryResponseContents_Field::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillQueryResponseContents.Field.predictions)
  return &predictions_;
}
const ::google::protobuf::RepeatedPtrField< ::autofill::AutofillQueryResponseContents_Field_FieldPrediction >&
AutofillQueryResponseContents_Field::predictions() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillQueryResponseContents.Field.predictions)
  return predictions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryResponseContents::kUploadRequiredFieldNumber;
const int AutofillQueryResponseContents::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryResponseContents::AutofillQueryResponseContents()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponseContents)
}
AutofillQueryResponseContents::AutofillQueryResponseContents(const AutofillQueryResponseContents& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upload_required_ = from.upload_required_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponseContents)
}

void AutofillQueryResponseContents::SharedCtor() {
  _cached_size_ = 0;
  upload_required_ = false;
}

AutofillQueryResponseContents::~AutofillQueryResponseContents() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponseContents)
  SharedDtor();
}

void AutofillQueryResponseContents::SharedDtor() {
}

void AutofillQueryResponseContents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryResponseContents& AutofillQueryResponseContents::default_instance() {
  protobuf_server_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutofillQueryResponseContents* AutofillQueryResponseContents::New(::google::protobuf::Arena* arena) const {
  AutofillQueryResponseContents* n = new AutofillQueryResponseContents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutofillQueryResponseContents::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponseContents)
  field_.Clear();
  upload_required_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutofillQueryResponseContents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponseContents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool upload_required = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_upload_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Field = 2 { ... };
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(19u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponseContents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponseContents)
  return false;
#undef DO_
}

void AutofillQueryResponseContents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponseContents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool upload_required = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->upload_required(), output);
  }

  // repeated group Field = 2 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      2, this->field(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponseContents)
}

size_t AutofillQueryResponseContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponseContents)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated group Field = 2 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->field_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->field(static_cast<int>(i)));
    }
  }

  // optional bool upload_required = 1;
  if (has_upload_required()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillQueryResponseContents::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillQueryResponseContents*>(&from));
}

void AutofillQueryResponseContents::MergeFrom(const AutofillQueryResponseContents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponseContents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  if (from.has_upload_required()) {
    set_upload_required(from.upload_required());
  }
}

void AutofillQueryResponseContents::CopyFrom(const AutofillQueryResponseContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponseContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponseContents::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->field())) return false;
  return true;
}

void AutofillQueryResponseContents::Swap(AutofillQueryResponseContents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutofillQueryResponseContents::InternalSwap(AutofillQueryResponseContents* other) {
  field_.InternalSwap(&other->field_);
  std::swap(upload_required_, other->upload_required_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryResponseContents::GetTypeName() const {
  return "autofill.AutofillQueryResponseContents";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillQueryResponseContents

// optional bool upload_required = 1;
bool AutofillQueryResponseContents::has_upload_required() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryResponseContents::set_has_upload_required() {
  _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryResponseContents::clear_has_upload_required() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryResponseContents::clear_upload_required() {
  upload_required_ = false;
  clear_has_upload_required();
}
bool AutofillQueryResponseContents::upload_required() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponseContents.upload_required)
  return upload_required_;
}
void AutofillQueryResponseContents::set_upload_required(bool value) {
  set_has_upload_required();
  upload_required_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryResponseContents.upload_required)
}

// repeated group Field = 2 { ... };
int AutofillQueryResponseContents::field_size() const {
  return field_.size();
}
void AutofillQueryResponseContents::clear_field() {
  field_.Clear();
}
const ::autofill::AutofillQueryResponseContents_Field& AutofillQueryResponseContents::field(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponseContents.field)
  return field_.Get(index);
}
::autofill::AutofillQueryResponseContents_Field* AutofillQueryResponseContents::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryResponseContents.field)
  return field_.Mutable(index);
}
::autofill::AutofillQueryResponseContents_Field* AutofillQueryResponseContents::add_field() {
  // @@protoc_insertion_point(field_add:autofill.AutofillQueryResponseContents.field)
  return field_.Add();
}
::google::protobuf::RepeatedPtrField< ::autofill::AutofillQueryResponseContents_Field >*
AutofillQueryResponseContents::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillQueryResponseContents.field)
  return &field_;
}
const ::google::protobuf::RepeatedPtrField< ::autofill::AutofillQueryResponseContents_Field >&
AutofillQueryResponseContents::field() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillQueryResponseContents.field)
  return field_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillUploadContents_Field::kSignatureFieldNumber;
const int AutofillUploadContents_Field::kAutofillTypeFieldNumber;
const int AutofillUploadContents_Field::kNameFieldNumber;
const int AutofillUploadContents_Field::kAutocompleteFieldNumber;
const int AutofillUploadContents_Field::kTypeFieldNumber;
const int AutofillUploadContents_Field::kGenerationTypeFieldNumber;
const int AutofillUploadContents_Field::kFormClassifierOutcomeFieldNumber;
const int AutofillUploadContents_Field::kCssClassesFieldNumber;
const int AutofillUploadContents_Field::kPropertiesMaskFieldNumber;
const int AutofillUploadContents_Field::kIdFieldNumber;
const int AutofillUploadContents_Field::kGeneratedPasswordChangedFieldNumber;
const int AutofillUploadContents_Field::kVoteTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillUploadContents_Field::AutofillUploadContents_Field()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillUploadContents.Field)
}
AutofillUploadContents_Field::AutofillUploadContents_Field(const AutofillUploadContents_Field& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  autocomplete_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_autocomplete()) {
    autocomplete_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autocomplete_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  css_classes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_css_classes()) {
    css_classes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.css_classes_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&signature_, &from.signature_,
    static_cast<size_t>(reinterpret_cast<char*>(&generated_password_changed_) -
    reinterpret_cast<char*>(&signature_)) + sizeof(generated_password_changed_));
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillUploadContents.Field)
}

void AutofillUploadContents_Field::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autocomplete_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  css_classes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&generated_password_changed_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(generated_password_changed_));
}

AutofillUploadContents_Field::~AutofillUploadContents_Field() {
  // @@protoc_insertion_point(destructor:autofill.AutofillUploadContents.Field)
  SharedDtor();
}

void AutofillUploadContents_Field::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autocomplete_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  css_classes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AutofillUploadContents_Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillUploadContents_Field& AutofillUploadContents_Field::default_instance() {
  protobuf_server_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutofillUploadContents_Field* AutofillUploadContents_Field::New(::google::protobuf::Arena* arena) const {
  AutofillUploadContents_Field* n = new AutofillUploadContents_Field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutofillUploadContents_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillUploadContents.Field)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_autocomplete()) {
      GOOGLE_DCHECK(!autocomplete_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*autocomplete_.UnsafeRawStringPointer())->clear();
    }
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (has_css_classes()) {
      GOOGLE_DCHECK(!css_classes_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*css_classes_.UnsafeRawStringPointer())->clear();
    }
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&signature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_type_) -
        reinterpret_cast<char*>(&signature_)) + sizeof(vote_type_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&generation_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&generated_password_changed_) -
        reinterpret_cast<char*>(&generation_type_)) + sizeof(generated_password_changed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutofillUploadContents_Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillUploadContents.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_signature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed32 autofill_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_autofill_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &autofill_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string autocomplete = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autocomplete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autofill::AutofillUploadContents_Field_PasswordGenerationType_IsValid(value)) {
            set_generation_type(static_cast< ::autofill::AutofillUploadContents_Field_PasswordGenerationType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(136u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillUploadContents.Field.FormClassifierOutcome form_classifier_outcome = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autofill::AutofillUploadContents_Field_FormClassifierOutcome_IsValid(value)) {
            set_form_classifier_outcome(static_cast< ::autofill::AutofillUploadContents_Field_FormClassifierOutcome >(value));
          } else {
            unknown_fields_stream.WriteVarint32(144u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string css_classes = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_css_classes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 properties_mask = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_properties_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &properties_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool generated_password_changed = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_generated_password_changed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generated_password_changed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autofill.AutofillUploadContents.Field.VoteType vote_type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::autofill::AutofillUploadContents_Field_VoteType_IsValid(value)) {
            set_vote_type(static_cast< ::autofill::AutofillUploadContents_Field_VoteType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(184u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillUploadContents.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillUploadContents.Field)
  return false;
#undef DO_
}

void AutofillUploadContents_Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillUploadContents.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 signature = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->signature(), output);
  }

  // required fixed32 autofill_type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->autofill_type(), output);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional string autocomplete = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->autocomplete(), output);
  }

  // optional string type = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->type(), output);
  }

  // optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->generation_type(), output);
  }

  // optional .autofill.AutofillUploadContents.Field.FormClassifierOutcome form_classifier_outcome = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->form_classifier_outcome(), output);
  }

  // optional string css_classes = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->css_classes(), output);
  }

  // optional uint32 properties_mask = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->properties_mask(), output);
  }

  // optional string id = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->id(), output);
  }

  // optional bool generated_password_changed = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->generated_password_changed(), output);
  }

  // optional .autofill.AutofillUploadContents.Field.VoteType vote_type = 23;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->vote_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillUploadContents.Field)
}

size_t AutofillUploadContents_Field::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autofill.AutofillUploadContents.Field)
  size_t total_size = 0;

  if (has_signature()) {
    // required fixed32 signature = 6;
    total_size += 1 + 4;
  }

  if (has_autofill_type()) {
    // required fixed32 autofill_type = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t AutofillUploadContents_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillUploadContents.Field)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000060) ^ 0x00000060) == 0) {  // All required fields are present.
    // required fixed32 signature = 6;
    total_size += 1 + 4;

    // required fixed32 autofill_type = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string autocomplete = 9;
    if (has_autocomplete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->autocomplete());
    }

    // optional string type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string css_classes = 19;
    if (has_css_classes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->css_classes());
    }

    // optional string id = 21;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // optional .autofill.AutofillUploadContents.Field.VoteType vote_type = 23;
  if (has_vote_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vote_type());
  }

  if (_has_bits_[8 / 32] & 3840u) {
    // optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
    if (has_generation_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->generation_type());
    }

    // optional .autofill.AutofillUploadContents.Field.FormClassifierOutcome form_classifier_outcome = 18;
    if (has_form_classifier_outcome()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->form_classifier_outcome());
    }

    // optional uint32 properties_mask = 20;
    if (has_properties_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->properties_mask());
    }

    // optional bool generated_password_changed = 22;
    if (has_generated_password_changed()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillUploadContents_Field::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillUploadContents_Field*>(&from));
}

void AutofillUploadContents_Field::MergeFrom(const AutofillUploadContents_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillUploadContents.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_autocomplete();
      autocomplete_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autocomplete_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_css_classes();
      css_classes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.css_classes_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000020u) {
      signature_ = from.signature_;
    }
    if (cached_has_bits & 0x00000040u) {
      autofill_type_ = from.autofill_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      vote_type_ = from.vote_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      generation_type_ = from.generation_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      form_classifier_outcome_ = from.form_classifier_outcome_;
    }
    if (cached_has_bits & 0x00000400u) {
      properties_mask_ = from.properties_mask_;
    }
    if (cached_has_bits & 0x00000800u) {
      generated_password_changed_ = from.generated_password_changed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillUploadContents_Field::CopyFrom(const AutofillUploadContents_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillUploadContents.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillUploadContents_Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000060) != 0x00000060) return false;
  return true;
}

void AutofillUploadContents_Field::Swap(AutofillUploadContents_Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutofillUploadContents_Field::InternalSwap(AutofillUploadContents_Field* other) {
  name_.Swap(&other->name_);
  autocomplete_.Swap(&other->autocomplete_);
  type_.Swap(&other->type_);
  css_classes_.Swap(&other->css_classes_);
  id_.Swap(&other->id_);
  std::swap(signature_, other->signature_);
  std::swap(autofill_type_, other->autofill_type_);
  std::swap(vote_type_, other->vote_type_);
  std::swap(generation_type_, other->generation_type_);
  std::swap(form_classifier_outcome_, other->form_classifier_outcome_);
  std::swap(properties_mask_, other->properties_mask_);
  std::swap(generated_password_changed_, other->generated_password_changed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillUploadContents_Field::GetTypeName() const {
  return "autofill.AutofillUploadContents.Field";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillUploadContents_Field

// required fixed32 signature = 6;
bool AutofillUploadContents_Field::has_signature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AutofillUploadContents_Field::set_has_signature() {
  _has_bits_[0] |= 0x00000020u;
}
void AutofillUploadContents_Field::clear_has_signature() {
  _has_bits_[0] &= ~0x00000020u;
}
void AutofillUploadContents_Field::clear_signature() {
  signature_ = 0u;
  clear_has_signature();
}
::google::protobuf::uint32 AutofillUploadContents_Field::signature() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.signature)
  return signature_;
}
void AutofillUploadContents_Field::set_signature(::google::protobuf::uint32 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.signature)
}

// required fixed32 autofill_type = 7;
bool AutofillUploadContents_Field::has_autofill_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AutofillUploadContents_Field::set_has_autofill_type() {
  _has_bits_[0] |= 0x00000040u;
}
void AutofillUploadContents_Field::clear_has_autofill_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void AutofillUploadContents_Field::clear_autofill_type() {
  autofill_type_ = 0u;
  clear_has_autofill_type();
}
::google::protobuf::uint32 AutofillUploadContents_Field::autofill_type() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.autofill_type)
  return autofill_type_;
}
void AutofillUploadContents_Field::set_autofill_type(::google::protobuf::uint32 value) {
  set_has_autofill_type();
  autofill_type_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.autofill_type)
}

// optional string name = 8;
bool AutofillUploadContents_Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillUploadContents_Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void AutofillUploadContents_Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutofillUploadContents_Field::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& AutofillUploadContents_Field::name() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.name)
  return name_.GetNoArena();
}
void AutofillUploadContents_Field::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.name)
}
#if LANG_CXX11
void AutofillUploadContents_Field::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillUploadContents.Field.name)
}
#endif
void AutofillUploadContents_Field::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.Field.name)
}
void AutofillUploadContents_Field::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.Field.name)
}
::std::string* AutofillUploadContents_Field::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.Field.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents_Field::release_name() {
  // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.Field.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.Field.name)
}

// optional string autocomplete = 9;
bool AutofillUploadContents_Field::has_autocomplete() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutofillUploadContents_Field::set_has_autocomplete() {
  _has_bits_[0] |= 0x00000002u;
}
void AutofillUploadContents_Field::clear_has_autocomplete() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutofillUploadContents_Field::clear_autocomplete() {
  autocomplete_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_autocomplete();
}
const ::std::string& AutofillUploadContents_Field::autocomplete() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.autocomplete)
  return autocomplete_.GetNoArena();
}
void AutofillUploadContents_Field::set_autocomplete(const ::std::string& value) {
  set_has_autocomplete();
  autocomplete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.autocomplete)
}
#if LANG_CXX11
void AutofillUploadContents_Field::set_autocomplete(::std::string&& value) {
  set_has_autocomplete();
  autocomplete_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillUploadContents.Field.autocomplete)
}
#endif
void AutofillUploadContents_Field::set_autocomplete(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_autocomplete();
  autocomplete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.Field.autocomplete)
}
void AutofillUploadContents_Field::set_autocomplete(const char* value, size_t size) {
  set_has_autocomplete();
  autocomplete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.Field.autocomplete)
}
::std::string* AutofillUploadContents_Field::mutable_autocomplete() {
  set_has_autocomplete();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.Field.autocomplete)
  return autocomplete_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents_Field::release_autocomplete() {
  // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.Field.autocomplete)
  clear_has_autocomplete();
  return autocomplete_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_allocated_autocomplete(::std::string* autocomplete) {
  if (autocomplete != NULL) {
    set_has_autocomplete();
  } else {
    clear_has_autocomplete();
  }
  autocomplete_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autocomplete);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.Field.autocomplete)
}

// optional string type = 10;
bool AutofillUploadContents_Field::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutofillUploadContents_Field::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void AutofillUploadContents_Field::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void AutofillUploadContents_Field::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& AutofillUploadContents_Field::type() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.type)
  return type_.GetNoArena();
}
void AutofillUploadContents_Field::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.type)
}
#if LANG_CXX11
void AutofillUploadContents_Field::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillUploadContents.Field.type)
}
#endif
void AutofillUploadContents_Field::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.Field.type)
}
void AutofillUploadContents_Field::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.Field.type)
}
::std::string* AutofillUploadContents_Field::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.Field.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents_Field::release_type() {
  // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.Field.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.Field.type)
}

// optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
bool AutofillUploadContents_Field::has_generation_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AutofillUploadContents_Field::set_has_generation_type() {
  _has_bits_[0] |= 0x00000100u;
}
void AutofillUploadContents_Field::clear_has_generation_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void AutofillUploadContents_Field::clear_generation_type() {
  generation_type_ = 0;
  clear_has_generation_type();
}
::autofill::AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::generation_type() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.generation_type)
  return static_cast< ::autofill::AutofillUploadContents_Field_PasswordGenerationType >(generation_type_);
}
void AutofillUploadContents_Field::set_generation_type(::autofill::AutofillUploadContents_Field_PasswordGenerationType value) {
  assert(::autofill::AutofillUploadContents_Field_PasswordGenerationType_IsValid(value));
  set_has_generation_type();
  generation_type_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.generation_type)
}

// optional .autofill.AutofillUploadContents.Field.FormClassifierOutcome form_classifier_outcome = 18;
bool AutofillUploadContents_Field::has_form_classifier_outcome() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AutofillUploadContents_Field::set_has_form_classifier_outcome() {
  _has_bits_[0] |= 0x00000200u;
}
void AutofillUploadContents_Field::clear_has_form_classifier_outcome() {
  _has_bits_[0] &= ~0x00000200u;
}
void AutofillUploadContents_Field::clear_form_classifier_outcome() {
  form_classifier_outcome_ = 0;
  clear_has_form_classifier_outcome();
}
::autofill::AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::form_classifier_outcome() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.form_classifier_outcome)
  return static_cast< ::autofill::AutofillUploadContents_Field_FormClassifierOutcome >(form_classifier_outcome_);
}
void AutofillUploadContents_Field::set_form_classifier_outcome(::autofill::AutofillUploadContents_Field_FormClassifierOutcome value) {
  assert(::autofill::AutofillUploadContents_Field_FormClassifierOutcome_IsValid(value));
  set_has_form_classifier_outcome();
  form_classifier_outcome_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.form_classifier_outcome)
}

// optional string css_classes = 19;
bool AutofillUploadContents_Field::has_css_classes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AutofillUploadContents_Field::set_has_css_classes() {
  _has_bits_[0] |= 0x00000008u;
}
void AutofillUploadContents_Field::clear_has_css_classes() {
  _has_bits_[0] &= ~0x00000008u;
}
void AutofillUploadContents_Field::clear_css_classes() {
  css_classes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_css_classes();
}
const ::std::string& AutofillUploadContents_Field::css_classes() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.css_classes)
  return css_classes_.GetNoArena();
}
void AutofillUploadContents_Field::set_css_classes(const ::std::string& value) {
  set_has_css_classes();
  css_classes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.css_classes)
}
#if LANG_CXX11
void AutofillUploadContents_Field::set_css_classes(::std::string&& value) {
  set_has_css_classes();
  css_classes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillUploadContents.Field.css_classes)
}
#endif
void AutofillUploadContents_Field::set_css_classes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_css_classes();
  css_classes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.Field.css_classes)
}
void AutofillUploadContents_Field::set_css_classes(const char* value, size_t size) {
  set_has_css_classes();
  css_classes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.Field.css_classes)
}
::std::string* AutofillUploadContents_Field::mutable_css_classes() {
  set_has_css_classes();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.Field.css_classes)
  return css_classes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents_Field::release_css_classes() {
  // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.Field.css_classes)
  clear_has_css_classes();
  return css_classes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_allocated_css_classes(::std::string* css_classes) {
  if (css_classes != NULL) {
    set_has_css_classes();
  } else {
    clear_has_css_classes();
  }
  css_classes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), css_classes);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.Field.css_classes)
}

// optional uint32 properties_mask = 20;
bool AutofillUploadContents_Field::has_properties_mask() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AutofillUploadContents_Field::set_has_properties_mask() {
  _has_bits_[0] |= 0x00000400u;
}
void AutofillUploadContents_Field::clear_has_properties_mask() {
  _has_bits_[0] &= ~0x00000400u;
}
void AutofillUploadContents_Field::clear_properties_mask() {
  properties_mask_ = 0u;
  clear_has_properties_mask();
}
::google::protobuf::uint32 AutofillUploadContents_Field::properties_mask() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.properties_mask)
  return properties_mask_;
}
void AutofillUploadContents_Field::set_properties_mask(::google::protobuf::uint32 value) {
  set_has_properties_mask();
  properties_mask_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.properties_mask)
}

// optional string id = 21;
bool AutofillUploadContents_Field::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AutofillUploadContents_Field::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void AutofillUploadContents_Field::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void AutofillUploadContents_Field::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& AutofillUploadContents_Field::id() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.id)
  return id_.GetNoArena();
}
void AutofillUploadContents_Field::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.id)
}
#if LANG_CXX11
void AutofillUploadContents_Field::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillUploadContents.Field.id)
}
#endif
void AutofillUploadContents_Field::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.Field.id)
}
void AutofillUploadContents_Field::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.Field.id)
}
::std::string* AutofillUploadContents_Field::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.Field.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents_Field::release_id() {
  // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.Field.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.Field.id)
}

// optional bool generated_password_changed = 22;
bool AutofillUploadContents_Field::has_generated_password_changed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AutofillUploadContents_Field::set_has_generated_password_changed() {
  _has_bits_[0] |= 0x00000800u;
}
void AutofillUploadContents_Field::clear_has_generated_password_changed() {
  _has_bits_[0] &= ~0x00000800u;
}
void AutofillUploadContents_Field::clear_generated_password_changed() {
  generated_password_changed_ = false;
  clear_has_generated_password_changed();
}
bool AutofillUploadContents_Field::generated_password_changed() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.generated_password_changed)
  return generated_password_changed_;
}
void AutofillUploadContents_Field::set_generated_password_changed(bool value) {
  set_has_generated_password_changed();
  generated_password_changed_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.generated_password_changed)
}

// optional .autofill.AutofillUploadContents.Field.VoteType vote_type = 23;
bool AutofillUploadContents_Field::has_vote_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AutofillUploadContents_Field::set_has_vote_type() {
  _has_bits_[0] |= 0x00000080u;
}
void AutofillUploadContents_Field::clear_has_vote_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void AutofillUploadContents_Field::clear_vote_type() {
  vote_type_ = 0;
  clear_has_vote_type();
}
::autofill::AutofillUploadContents_Field_VoteType AutofillUploadContents_Field::vote_type() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.vote_type)
  return static_cast< ::autofill::AutofillUploadContents_Field_VoteType >(vote_type_);
}
void AutofillUploadContents_Field::set_vote_type(::autofill::AutofillUploadContents_Field_VoteType value) {
  assert(::autofill::AutofillUploadContents_Field_VoteType_IsValid(value));
  set_has_vote_type();
  vote_type_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.vote_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillUploadContents::kClientVersionFieldNumber;
const int AutofillUploadContents::kFormSignatureFieldNumber;
const int AutofillUploadContents::kAutofillUsedFieldNumber;
const int AutofillUploadContents::kDataPresentFieldNumber;
const int AutofillUploadContents::kFieldFieldNumber;
const int AutofillUploadContents::kActionSignatureFieldNumber;
const int AutofillUploadContents::kLoginFormSignatureFieldNumber;
const int AutofillUploadContents::kSubmissionFieldNumber;
const int AutofillUploadContents::kFormNameFieldNumber;
const int AutofillUploadContents::kPasswordsRevealedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillUploadContents::AutofillUploadContents()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_server_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autofill.AutofillUploadContents)
}
AutofillUploadContents::AutofillUploadContents(const AutofillUploadContents& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_version()) {
    client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
  data_present_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_present()) {
    data_present_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_present_);
  }
  form_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_form_name()) {
    form_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_name_);
  }
  ::memcpy(&form_signature_, &from.form_signature_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_form_signature_) -
    reinterpret_cast<char*>(&form_signature_)) + sizeof(login_form_signature_));
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillUploadContents)
}

void AutofillUploadContents::SharedCtor() {
  _cached_size_ = 0;
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_present_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&form_signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_form_signature_) -
      reinterpret_cast<char*>(&form_signature_)) + sizeof(login_form_signature_));
}

AutofillUploadContents::~AutofillUploadContents() {
  // @@protoc_insertion_point(destructor:autofill.AutofillUploadContents)
  SharedDtor();
}

void AutofillUploadContents::SharedDtor() {
  client_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_present_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AutofillUploadContents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillUploadContents& AutofillUploadContents::default_instance() {
  protobuf_server_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutofillUploadContents* AutofillUploadContents::New(::google::protobuf::Arena* arena) const {
  AutofillUploadContents* n = new AutofillUploadContents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutofillUploadContents::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillUploadContents)
  field_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_client_version()) {
      GOOGLE_DCHECK(!client_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_data_present()) {
      GOOGLE_DCHECK(!data_present_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_present_.UnsafeRawStringPointer())->clear();
    }
    if (has_form_name()) {
      GOOGLE_DCHECK(!form_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*form_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&form_signature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_signature_) -
        reinterpret_cast<char*>(&form_signature_)) + sizeof(action_signature_));
  }
  login_form_signature_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutofillUploadContents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:autofill.AutofillUploadContents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed64 form_signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_form_signature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &form_signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool autofill_used = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_autofill_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autofill_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string data_present = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_present()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Field = 5 { ... };
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(43u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                5, input, add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 action_signature = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_action_signature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &action_signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 login_form_signature = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_login_form_signature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &login_form_signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool submission = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_submission();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &submission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string form_name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_form_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool passwords_revealed = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_passwords_revealed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passwords_revealed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autofill.AutofillUploadContents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autofill.AutofillUploadContents)
  return false;
#undef DO_
}

void AutofillUploadContents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autofill.AutofillUploadContents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_version(), output);
  }

  // required fixed64 form_signature = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->form_signature(), output);
  }

  // required bool autofill_used = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autofill_used(), output);
  }

  // required string data_present = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data_present(), output);
  }

  // repeated group Field = 5 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      5, this->field(static_cast<int>(i)), output);
  }

  // optional fixed64 action_signature = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->action_signature(), output);
  }

  // optional fixed64 login_form_signature = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(14, this->login_form_signature(), output);
  }

  // optional bool submission = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->submission(), output);
  }

  // optional string form_name = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->form_name(), output);
  }

  // optional bool passwords_revealed = 24;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->passwords_revealed(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:autofill.AutofillUploadContents)
}

size_t AutofillUploadContents::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:autofill.AutofillUploadContents)
  size_t total_size = 0;

  if (has_client_version()) {
    // required string client_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_version());
  }

  if (has_data_present()) {
    // required string data_present = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_present());
  }

  if (has_form_signature()) {
    // required fixed64 form_signature = 2;
    total_size += 1 + 8;
  }

  if (has_autofill_used()) {
    // required bool autofill_used = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t AutofillUploadContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillUploadContents)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required string client_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_version());

    // required string data_present = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_present());

    // required fixed64 form_signature = 2;
    total_size += 1 + 8;

    // required bool autofill_used = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated group Field = 5 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->field_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->field(static_cast<int>(i)));
    }
  }

  // optional string form_name = 16;
  if (has_form_name()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->form_name());
  }

  if (_has_bits_[0 / 32] & 224u) {
    // optional bool submission = 15;
    if (has_submission()) {
      total_size += 1 + 1;
    }

    // optional bool passwords_revealed = 24;
    if (has_passwords_revealed()) {
      total_size += 2 + 1;
    }

    // optional fixed64 action_signature = 13;
    if (has_action_signature()) {
      total_size += 1 + 8;
    }

  }
  // optional fixed64 login_form_signature = 14;
  if (has_login_form_signature()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillUploadContents::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillUploadContents*>(&from));
}

void AutofillUploadContents::MergeFrom(const AutofillUploadContents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillUploadContents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_client_version();
      client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data_present();
      data_present_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_present_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_form_name();
      form_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      form_signature_ = from.form_signature_;
    }
    if (cached_has_bits & 0x00000010u) {
      autofill_used_ = from.autofill_used_;
    }
    if (cached_has_bits & 0x00000020u) {
      submission_ = from.submission_;
    }
    if (cached_has_bits & 0x00000040u) {
      passwords_revealed_ = from.passwords_revealed_;
    }
    if (cached_has_bits & 0x00000080u) {
      action_signature_ = from.action_signature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_login_form_signature(from.login_form_signature());
  }
}

void AutofillUploadContents::CopyFrom(const AutofillUploadContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillUploadContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillUploadContents::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->field())) return false;
  return true;
}

void AutofillUploadContents::Swap(AutofillUploadContents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutofillUploadContents::InternalSwap(AutofillUploadContents* other) {
  field_.InternalSwap(&other->field_);
  client_version_.Swap(&other->client_version_);
  data_present_.Swap(&other->data_present_);
  form_name_.Swap(&other->form_name_);
  std::swap(form_signature_, other->form_signature_);
  std::swap(autofill_used_, other->autofill_used_);
  std::swap(submission_, other->submission_);
  std::swap(passwords_revealed_, other->passwords_revealed_);
  std::swap(action_signature_, other->action_signature_);
  std::swap(login_form_signature_, other->login_form_signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillUploadContents::GetTypeName() const {
  return "autofill.AutofillUploadContents";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillUploadContents

// required string client_version = 1;
bool AutofillUploadContents::has_client_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillUploadContents::set_has_client_version() {
  _has_bits_[0] |= 0x00000001u;
}
void AutofillUploadContents::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutofillUploadContents::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_version();
}
const ::std::string& AutofillUploadContents::client_version() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.client_version)
  return client_version_.GetNoArena();
}
void AutofillUploadContents::set_client_version(const ::std::string& value) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.client_version)
}
#if LANG_CXX11
void AutofillUploadContents::set_client_version(::std::string&& value) {
  set_has_client_version();
  client_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillUploadContents.client_version)
}
#endif
void AutofillUploadContents::set_client_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.client_version)
}
void AutofillUploadContents::set_client_version(const char* value, size_t size) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.client_version)
}
::std::string* AutofillUploadContents::mutable_client_version() {
  set_has_client_version();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents::release_client_version() {
  // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.client_version)
  clear_has_client_version();
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    set_has_client_version();
  } else {
    clear_has_client_version();
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.client_version)
}

// required fixed64 form_signature = 2;
bool AutofillUploadContents::has_form_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AutofillUploadContents::set_has_form_signature() {
  _has_bits_[0] |= 0x00000008u;
}
void AutofillUploadContents::clear_has_form_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
void AutofillUploadContents::clear_form_signature() {
  form_signature_ = GOOGLE_ULONGLONG(0);
  clear_has_form_signature();
}
::google::protobuf::uint64 AutofillUploadContents::form_signature() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.form_signature)
  return form_signature_;
}
void AutofillUploadContents::set_form_signature(::google::protobuf::uint64 value) {
  set_has_form_signature();
  form_signature_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.form_signature)
}

// required bool autofill_used = 3;
bool AutofillUploadContents::has_autofill_used() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AutofillUploadContents::set_has_autofill_used() {
  _has_bits_[0] |= 0x00000010u;
}
void AutofillUploadContents::clear_has_autofill_used() {
  _has_bits_[0] &= ~0x00000010u;
}
void AutofillUploadContents::clear_autofill_used() {
  autofill_used_ = false;
  clear_has_autofill_used();
}
bool AutofillUploadContents::autofill_used() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.autofill_used)
  return autofill_used_;
}
void AutofillUploadContents::set_autofill_used(bool value) {
  set_has_autofill_used();
  autofill_used_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.autofill_used)
}

// required string data_present = 4;
bool AutofillUploadContents::has_data_present() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutofillUploadContents::set_has_data_present() {
  _has_bits_[0] |= 0x00000002u;
}
void AutofillUploadContents::clear_has_data_present() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutofillUploadContents::clear_data_present() {
  data_present_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_present();
}
const ::std::string& AutofillUploadContents::data_present() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.data_present)
  return data_present_.GetNoArena();
}
void AutofillUploadContents::set_data_present(const ::std::string& value) {
  set_has_data_present();
  data_present_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.data_present)
}
#if LANG_CXX11
void AutofillUploadContents::set_data_present(::std::string&& value) {
  set_has_data_present();
  data_present_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillUploadContents.data_present)
}
#endif
void AutofillUploadContents::set_data_present(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data_present();
  data_present_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.data_present)
}
void AutofillUploadContents::set_data_present(const char* value, size_t size) {
  set_has_data_present();
  data_present_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.data_present)
}
::std::string* AutofillUploadContents::mutable_data_present() {
  set_has_data_present();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.data_present)
  return data_present_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents::release_data_present() {
  // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.data_present)
  clear_has_data_present();
  return data_present_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents::set_allocated_data_present(::std::string* data_present) {
  if (data_present != NULL) {
    set_has_data_present();
  } else {
    clear_has_data_present();
  }
  data_present_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_present);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.data_present)
}

// repeated group Field = 5 { ... };
int AutofillUploadContents::field_size() const {
  return field_.size();
}
void AutofillUploadContents::clear_field() {
  field_.Clear();
}
const ::autofill::AutofillUploadContents_Field& AutofillUploadContents::field(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.field)
  return field_.Get(index);
}
::autofill::AutofillUploadContents_Field* AutofillUploadContents::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.field)
  return field_.Mutable(index);
}
::autofill::AutofillUploadContents_Field* AutofillUploadContents::add_field() {
  // @@protoc_insertion_point(field_add:autofill.AutofillUploadContents.field)
  return field_.Add();
}
::google::protobuf::RepeatedPtrField< ::autofill::AutofillUploadContents_Field >*
AutofillUploadContents::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillUploadContents.field)
  return &field_;
}
const ::google::protobuf::RepeatedPtrField< ::autofill::AutofillUploadContents_Field >&
AutofillUploadContents::field() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillUploadContents.field)
  return field_;
}

// optional fixed64 action_signature = 13;
bool AutofillUploadContents::has_action_signature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AutofillUploadContents::set_has_action_signature() {
  _has_bits_[0] |= 0x00000080u;
}
void AutofillUploadContents::clear_has_action_signature() {
  _has_bits_[0] &= ~0x00000080u;
}
void AutofillUploadContents::clear_action_signature() {
  action_signature_ = GOOGLE_ULONGLONG(0);
  clear_has_action_signature();
}
::google::protobuf::uint64 AutofillUploadContents::action_signature() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.action_signature)
  return action_signature_;
}
void AutofillUploadContents::set_action_signature(::google::protobuf::uint64 value) {
  set_has_action_signature();
  action_signature_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.action_signature)
}

// optional fixed64 login_form_signature = 14;
bool AutofillUploadContents::has_login_form_signature() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AutofillUploadContents::set_has_login_form_signature() {
  _has_bits_[0] |= 0x00000100u;
}
void AutofillUploadContents::clear_has_login_form_signature() {
  _has_bits_[0] &= ~0x00000100u;
}
void AutofillUploadContents::clear_login_form_signature() {
  login_form_signature_ = GOOGLE_ULONGLONG(0);
  clear_has_login_form_signature();
}
::google::protobuf::uint64 AutofillUploadContents::login_form_signature() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.login_form_signature)
  return login_form_signature_;
}
void AutofillUploadContents::set_login_form_signature(::google::protobuf::uint64 value) {
  set_has_login_form_signature();
  login_form_signature_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.login_form_signature)
}

// optional bool submission = 15;
bool AutofillUploadContents::has_submission() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AutofillUploadContents::set_has_submission() {
  _has_bits_[0] |= 0x00000020u;
}
void AutofillUploadContents::clear_has_submission() {
  _has_bits_[0] &= ~0x00000020u;
}
void AutofillUploadContents::clear_submission() {
  submission_ = false;
  clear_has_submission();
}
bool AutofillUploadContents::submission() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.submission)
  return submission_;
}
void AutofillUploadContents::set_submission(bool value) {
  set_has_submission();
  submission_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.submission)
}

// optional string form_name = 16;
bool AutofillUploadContents::has_form_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutofillUploadContents::set_has_form_name() {
  _has_bits_[0] |= 0x00000004u;
}
void AutofillUploadContents::clear_has_form_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void AutofillUploadContents::clear_form_name() {
  form_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_form_name();
}
const ::std::string& AutofillUploadContents::form_name() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.form_name)
  return form_name_.GetNoArena();
}
void AutofillUploadContents::set_form_name(const ::std::string& value) {
  set_has_form_name();
  form_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.form_name)
}
#if LANG_CXX11
void AutofillUploadContents::set_form_name(::std::string&& value) {
  set_has_form_name();
  form_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autofill.AutofillUploadContents.form_name)
}
#endif
void AutofillUploadContents::set_form_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_form_name();
  form_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.form_name)
}
void AutofillUploadContents::set_form_name(const char* value, size_t size) {
  set_has_form_name();
  form_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.form_name)
}
::std::string* AutofillUploadContents::mutable_form_name() {
  set_has_form_name();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.form_name)
  return form_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents::release_form_name() {
  // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.form_name)
  clear_has_form_name();
  return form_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents::set_allocated_form_name(::std::string* form_name) {
  if (form_name != NULL) {
    set_has_form_name();
  } else {
    clear_has_form_name();
  }
  form_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), form_name);
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.form_name)
}

// optional bool passwords_revealed = 24;
bool AutofillUploadContents::has_passwords_revealed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AutofillUploadContents::set_has_passwords_revealed() {
  _has_bits_[0] |= 0x00000040u;
}
void AutofillUploadContents::clear_has_passwords_revealed() {
  _has_bits_[0] &= ~0x00000040u;
}
void AutofillUploadContents::clear_passwords_revealed() {
  passwords_revealed_ = false;
  clear_has_passwords_revealed();
}
bool AutofillUploadContents::passwords_revealed() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.passwords_revealed)
  return passwords_revealed_;
}
void AutofillUploadContents::set_passwords_revealed(bool value) {
  set_has_passwords_revealed();
  passwords_revealed_ = value;
  // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.passwords_revealed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill

// @@protoc_insertion_point(global_scope)
