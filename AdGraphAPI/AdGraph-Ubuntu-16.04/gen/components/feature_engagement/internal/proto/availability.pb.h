// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: availability.proto

#ifndef PROTOBUF_availability_2eproto__INCLUDED
#define PROTOBUF_availability_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace feature_engagement {
class Availability;
class AvailabilityDefaultTypeInternal;
extern AvailabilityDefaultTypeInternal _Availability_default_instance_;
}  // namespace feature_engagement

namespace feature_engagement {

namespace protobuf_availability_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_availability_2eproto

// ===================================================================

class Availability : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:feature_engagement.Availability) */ {
 public:
  Availability();
  virtual ~Availability();

  Availability(const Availability& from);

  inline Availability& operator=(const Availability& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Availability& default_instance();

  static inline const Availability* internal_default_instance() {
    return reinterpret_cast<const Availability*>(
               &_Availability_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Availability* other);

  // implements Message ----------------------------------------------

  inline Availability* New() const PROTOBUF_FINAL { return New(NULL); }

  Availability* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Availability& from);
  void MergeFrom(const Availability& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Availability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string feature_name = 1;
  bool has_feature_name() const;
  void clear_feature_name();
  static const int kFeatureNameFieldNumber = 1;
  const ::std::string& feature_name() const;
  void set_feature_name(const ::std::string& value);
  #if LANG_CXX11
  void set_feature_name(::std::string&& value);
  #endif
  void set_feature_name(const char* value);
  void set_feature_name(const char* value, size_t size);
  ::std::string* mutable_feature_name();
  ::std::string* release_feature_name();
  void set_allocated_feature_name(::std::string* feature_name);

  // optional uint32 day = 2;
  bool has_day() const;
  void clear_day();
  static const int kDayFieldNumber = 2;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:feature_engagement.Availability)
 private:
  void set_has_feature_name();
  void clear_has_feature_name();
  void set_has_day();
  void clear_has_day();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr feature_name_;
  ::google::protobuf::uint32 day_;
  friend struct protobuf_availability_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Availability

// optional string feature_name = 1;
inline bool Availability::has_feature_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Availability::set_has_feature_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Availability::clear_has_feature_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Availability::clear_feature_name() {
  feature_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_feature_name();
}
inline const ::std::string& Availability::feature_name() const {
  // @@protoc_insertion_point(field_get:feature_engagement.Availability.feature_name)
  return feature_name_.GetNoArena();
}
inline void Availability::set_feature_name(const ::std::string& value) {
  set_has_feature_name();
  feature_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feature_engagement.Availability.feature_name)
}
#if LANG_CXX11
inline void Availability::set_feature_name(::std::string&& value) {
  set_has_feature_name();
  feature_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:feature_engagement.Availability.feature_name)
}
#endif
inline void Availability::set_feature_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_feature_name();
  feature_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feature_engagement.Availability.feature_name)
}
inline void Availability::set_feature_name(const char* value, size_t size) {
  set_has_feature_name();
  feature_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feature_engagement.Availability.feature_name)
}
inline ::std::string* Availability::mutable_feature_name() {
  set_has_feature_name();
  // @@protoc_insertion_point(field_mutable:feature_engagement.Availability.feature_name)
  return feature_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Availability::release_feature_name() {
  // @@protoc_insertion_point(field_release:feature_engagement.Availability.feature_name)
  clear_has_feature_name();
  return feature_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Availability::set_allocated_feature_name(::std::string* feature_name) {
  if (feature_name != NULL) {
    set_has_feature_name();
  } else {
    clear_has_feature_name();
  }
  feature_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature_name);
  // @@protoc_insertion_point(field_set_allocated:feature_engagement.Availability.feature_name)
}

// optional uint32 day = 2;
inline bool Availability::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Availability::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Availability::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Availability::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 Availability::day() const {
  // @@protoc_insertion_point(field_get:feature_engagement.Availability.day)
  return day_;
}
inline void Availability::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:feature_engagement.Availability.day)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace feature_engagement

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_availability_2eproto__INCLUDED
