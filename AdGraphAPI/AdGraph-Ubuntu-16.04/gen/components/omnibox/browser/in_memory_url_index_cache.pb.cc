// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_memory_url_index_cache.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "in_memory_url_index_cache.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace in_memory_url_index {
class InMemoryURLIndexCacheItem_WordListItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordListItem> {
} _InMemoryURLIndexCacheItem_WordListItem_default_instance_;
class InMemoryURLIndexCacheItem_WordMapItem_WordMapEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry> {
} _InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_WordMapItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordMapItem> {
} _InMemoryURLIndexCacheItem_WordMapItem_default_instance_;
class InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry> {
} _InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_CharWordMapItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_CharWordMapItem> {
} _InMemoryURLIndexCacheItem_CharWordMapItem_default_instance_;
class InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry> {
} _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_WordIDHistoryMapItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordIDHistoryMapItem> {
} _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_default_instance_;
class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo> {
} _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_default_instance_;
class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry> {
} _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_HistoryInfoMapItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_HistoryInfoMapItem> {
} _InMemoryURLIndexCacheItem_HistoryInfoMapItem_default_instance_;
class InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry> {
} _InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_WordStartsMapItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordStartsMapItem> {
} _InMemoryURLIndexCacheItem_WordStartsMapItem_default_instance_;
class InMemoryURLIndexCacheItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem> {
} _InMemoryURLIndexCacheItem_default_instance_;

namespace protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _InMemoryURLIndexCacheItem_WordListItem_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_WordMapItem_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_CharWordMapItem_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_HistoryInfoMapItem_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_WordStartsMapItem_default_instance_.Shutdown();
  _InMemoryURLIndexCacheItem_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _InMemoryURLIndexCacheItem_WordListItem_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_WordMapItem_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_CharWordMapItem_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_HistoryInfoMapItem_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_WordStartsMapItem_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_default_instance_.DefaultConstruct();
  _InMemoryURLIndexCacheItem_default_instance_.get_mutable()->word_list_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::internal_default_instance());
  _InMemoryURLIndexCacheItem_default_instance_.get_mutable()->word_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::internal_default_instance());
  _InMemoryURLIndexCacheItem_default_instance_.get_mutable()->char_word_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::internal_default_instance());
  _InMemoryURLIndexCacheItem_default_instance_.get_mutable()->word_id_history_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::internal_default_instance());
  _InMemoryURLIndexCacheItem_default_instance_.get_mutable()->history_info_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::internal_default_instance());
  _InMemoryURLIndexCacheItem_default_instance_.get_mutable()->word_starts_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordListItem::kWordCountFieldNumber;
const int InMemoryURLIndexCacheItem_WordListItem::kWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordListItem::InMemoryURLIndexCacheItem_WordListItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}
InMemoryURLIndexCacheItem_WordListItem::InMemoryURLIndexCacheItem_WordListItem(const InMemoryURLIndexCacheItem_WordListItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      word_(from.word_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_count_ = from.word_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}

void InMemoryURLIndexCacheItem_WordListItem::SharedCtor() {
  _cached_size_ = 0;
  word_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordListItem::~InMemoryURLIndexCacheItem_WordListItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordListItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordListItem& InMemoryURLIndexCacheItem_WordListItem::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_WordListItem* InMemoryURLIndexCacheItem_WordListItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordListItem* n = new InMemoryURLIndexCacheItem_WordListItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  word_.Clear();
  word_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_WordListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 word_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_word_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &word_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string word = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_word()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 word_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->word_count(), output);
  }

  // repeated string word = 2;
  for (int i = 0, n = this->word_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->word(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}

size_t InMemoryURLIndexCacheItem_WordListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required uint32 word_count = 1;
  if (has_word_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->word_count());
  }
  // repeated string word = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->word_size());
  for (int i = 0, n = this->word_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->word(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordListItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordListItem*>(&from));
}

void InMemoryURLIndexCacheItem_WordListItem::MergeFrom(const InMemoryURLIndexCacheItem_WordListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_.MergeFrom(from.word_);
  if (from.has_word_count()) {
    set_word_count(from.word_count());
  }
}

void InMemoryURLIndexCacheItem_WordListItem::CopyFrom(const InMemoryURLIndexCacheItem_WordListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordListItem::Swap(InMemoryURLIndexCacheItem_WordListItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordListItem::InternalSwap(InMemoryURLIndexCacheItem_WordListItem* other) {
  word_.InternalSwap(&other->word_);
  std::swap(word_count_, other->word_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordListItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_WordListItem

// required uint32 word_count = 1;
bool InMemoryURLIndexCacheItem_WordListItem::has_word_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordListItem::set_has_word_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordListItem::clear_has_word_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordListItem::clear_word_count() {
  word_count_ = 0u;
  clear_has_word_count();
}
::google::protobuf::uint32 InMemoryURLIndexCacheItem_WordListItem::word_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word_count)
  return word_count_;
}
void InMemoryURLIndexCacheItem_WordListItem::set_word_count(::google::protobuf::uint32 value) {
  set_has_word_count();
  word_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word_count)
}

// repeated string word = 2;
int InMemoryURLIndexCacheItem_WordListItem::word_size() const {
  return word_.size();
}
void InMemoryURLIndexCacheItem_WordListItem::clear_word() {
  word_.Clear();
}
const ::std::string& InMemoryURLIndexCacheItem_WordListItem::word(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_.Get(index);
}
::std::string* InMemoryURLIndexCacheItem_WordListItem::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_.Mutable(index);
}
void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  word_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  word_.Mutable(index)->assign(std::move(value));
}
#endif
void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  word_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, const char* value, size_t size) {
  word_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
::std::string* InMemoryURLIndexCacheItem_WordListItem::add_word() {
  // @@protoc_insertion_point(field_add_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_.Add();
}
void InMemoryURLIndexCacheItem_WordListItem::add_word(const ::std::string& value) {
  word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
#if LANG_CXX11
void InMemoryURLIndexCacheItem_WordListItem::add_word(::std::string&& value) {
  word_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
#endif
void InMemoryURLIndexCacheItem_WordListItem::add_word(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
void InMemoryURLIndexCacheItem_WordListItem::add_word(const char* value, size_t size) {
  word_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
InMemoryURLIndexCacheItem_WordListItem::word() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
InMemoryURLIndexCacheItem_WordListItem::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return &word_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::kWordFieldNumber;
const int InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::kWordIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}
InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_word()) {
    word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  word_id_ = from.word_id_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SharedCtor() {
  _cached_size_ = 0;
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  word_id_ = 0;
}

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::~InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SharedDtor() {
  word_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* n = new InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  if (has_word()) {
    GOOGLE_DCHECK(!word_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*word_.UnsafeRawStringPointer())->clear();
  }
  word_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string word = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 word_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_word_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string word = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  // required int32 word_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->word_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}

size_t InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  size_t total_size = 0;

  if (has_word()) {
    // required string word = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->word());
  }

  if (has_word_id()) {
    // required int32 word_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string word = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->word());

    // required int32 word_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry*>(&from));
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_word();
      word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
    }
    if (cached_has_bits & 0x00000002u) {
      word_id_ = from.word_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::Swap(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* other) {
  word_.Swap(&other->word_);
  std::swap(word_id_, other->word_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry

// required string word = 1;
bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::clear_word() {
  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_word();
}
const ::std::string& InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::word() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
  return word_.GetNoArena();
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(const ::std::string& value) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
#if LANG_CXX11
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(::std::string&& value) {
  set_has_word();
  word_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
#endif
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(const char* value, size_t size) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
::std::string* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::mutable_word() {
  set_has_word();
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
  return word_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::release_word() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
  clear_has_word();
  return word_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_allocated_word(::std::string* word) {
  if (word != NULL) {
    set_has_word();
  } else {
    clear_has_word();
  }
  word_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}

// required int32 word_id = 2;
bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::has_word_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_has_word_id() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::clear_has_word_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::clear_word_id() {
  word_id_ = 0;
  clear_has_word_id();
}
::google::protobuf::int32 InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::word_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word_id)
  return word_id_;
}
void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word_id(::google::protobuf::int32 value) {
  set_has_word_id();
  word_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordMapItem::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_WordMapItem::kWordMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordMapItem::InMemoryURLIndexCacheItem_WordMapItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}
InMemoryURLIndexCacheItem_WordMapItem::InMemoryURLIndexCacheItem_WordMapItem(const InMemoryURLIndexCacheItem_WordMapItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      word_map_entry_(from.word_map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}

void InMemoryURLIndexCacheItem_WordMapItem::SharedCtor() {
  _cached_size_ = 0;
  item_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordMapItem::~InMemoryURLIndexCacheItem_WordMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordMapItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordMapItem& InMemoryURLIndexCacheItem_WordMapItem::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_WordMapItem* InMemoryURLIndexCacheItem_WordMapItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordMapItem* n = new InMemoryURLIndexCacheItem_WordMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  word_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_WordMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_word_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->word_map_entry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->word_map_entry(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}

size_t InMemoryURLIndexCacheItem_WordMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->word_map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->word_map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordMapItem*>(&from));
}

void InMemoryURLIndexCacheItem_WordMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_map_entry_.MergeFrom(from.word_map_entry_);
  if (from.has_item_count()) {
    set_item_count(from.item_count());
  }
}

void InMemoryURLIndexCacheItem_WordMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->word_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordMapItem::Swap(InMemoryURLIndexCacheItem_WordMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordMapItem* other) {
  word_map_entry_.InternalSwap(&other->word_map_entry_);
  std::swap(item_count_, other->item_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_WordMapItem

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_WordMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordMapItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordMapItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordMapItem::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
::google::protobuf::uint32 InMemoryURLIndexCacheItem_WordMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.item_count)
  return item_count_;
}
void InMemoryURLIndexCacheItem_WordMapItem::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
int InMemoryURLIndexCacheItem_WordMapItem::word_map_entry_size() const {
  return word_map_entry_.size();
}
void InMemoryURLIndexCacheItem_WordMapItem::clear_word_map_entry() {
  word_map_entry_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& InMemoryURLIndexCacheItem_WordMapItem::word_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* InMemoryURLIndexCacheItem_WordMapItem::mutable_word_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* InMemoryURLIndexCacheItem_WordMapItem::add_word_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >*
InMemoryURLIndexCacheItem_WordMapItem::mutable_word_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return &word_map_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >&
InMemoryURLIndexCacheItem_WordMapItem::word_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::kChar16FieldNumber;
const int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::kWordIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}
InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      word_id_(from.word_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_count_, &from.item_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_16_) -
    reinterpret_cast<char*>(&item_count_)) + sizeof(char_16_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&char_16_) -
      reinterpret_cast<char*>(&item_count_)) + sizeof(char_16_));
}

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::~InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SharedDtor() {
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* n = new InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  word_id_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&char_16_) -
        reinterpret_cast<char*>(&item_count_)) + sizeof(char_16_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 char_16 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_char_16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 word_id = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_word_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_word_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // required int32 char_16 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->char_16(), output);
  }

  // repeated int32 word_id = 3 [packed = true];
  if (this->word_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _word_id_cached_byte_size_));
  }
  for (int i = 0, n = this->word_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->word_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}

size_t InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  size_t total_size = 0;

  if (has_item_count()) {
    // required uint32 item_count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }

  if (has_char_16()) {
    // required int32 char_16 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->char_16());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 item_count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());

    // required int32 char_16 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->char_16());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 word_id = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->word_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _word_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry*>(&from));
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_id_.MergeFrom(from.word_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_count_ = from.item_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      char_16_ = from.char_16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::Swap(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InternalSwap(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* other) {
  word_id_.InternalSwap(&other->word_id_);
  std::swap(item_count_, other->item_count_);
  std::swap(char_16_, other->char_16_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
::google::protobuf::uint32 InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.item_count)
  return item_count_;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.item_count)
}

// required int32 char_16 = 2;
bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::has_char_16() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_has_char_16() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_has_char_16() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_char_16() {
  char_16_ = 0;
  clear_has_char_16();
}
::google::protobuf::int32 InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::char_16() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.char_16)
  return char_16_;
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_char_16(::google::protobuf::int32 value) {
  set_has_char_16();
  char_16_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.char_16)
}

// repeated int32 word_id = 3 [packed = true];
int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::word_id_size() const {
  return word_id_.size();
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_word_id() {
  word_id_.Clear();
}
::google::protobuf::int32 InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::word_id(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
  return word_id_.Get(index);
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_word_id(int index, ::google::protobuf::int32 value) {
  word_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
}
void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::add_word_id(::google::protobuf::int32 value) {
  word_id_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::word_id() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
  return word_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::mutable_word_id() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
  return &word_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_CharWordMapItem::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_CharWordMapItem::kCharWordMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_CharWordMapItem::InMemoryURLIndexCacheItem_CharWordMapItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}
InMemoryURLIndexCacheItem_CharWordMapItem::InMemoryURLIndexCacheItem_CharWordMapItem(const InMemoryURLIndexCacheItem_CharWordMapItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      char_word_map_entry_(from.char_word_map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SharedCtor() {
  _cached_size_ = 0;
  item_count_ = 0u;
}

InMemoryURLIndexCacheItem_CharWordMapItem::~InMemoryURLIndexCacheItem_CharWordMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_CharWordMapItem& InMemoryURLIndexCacheItem_CharWordMapItem::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_CharWordMapItem* InMemoryURLIndexCacheItem_CharWordMapItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_CharWordMapItem* n = new InMemoryURLIndexCacheItem_CharWordMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_CharWordMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  char_word_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_CharWordMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_char_word_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->char_word_map_entry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->char_word_map_entry(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}

size_t InMemoryURLIndexCacheItem_CharWordMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->char_word_map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char_word_map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_CharWordMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_CharWordMapItem*>(&from));
}

void InMemoryURLIndexCacheItem_CharWordMapItem::MergeFrom(const InMemoryURLIndexCacheItem_CharWordMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  char_word_map_entry_.MergeFrom(from.char_word_map_entry_);
  if (from.has_item_count()) {
    set_item_count(from.item_count());
  }
}

void InMemoryURLIndexCacheItem_CharWordMapItem::CopyFrom(const InMemoryURLIndexCacheItem_CharWordMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_CharWordMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->char_word_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_CharWordMapItem::Swap(InMemoryURLIndexCacheItem_CharWordMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_CharWordMapItem::InternalSwap(InMemoryURLIndexCacheItem_CharWordMapItem* other) {
  char_word_map_entry_.InternalSwap(&other->char_word_map_entry_);
  std::swap(item_count_, other->item_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_CharWordMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_CharWordMapItem

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_CharWordMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_CharWordMapItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_CharWordMapItem::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
::google::protobuf::uint32 InMemoryURLIndexCacheItem_CharWordMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.item_count)
  return item_count_;
}
void InMemoryURLIndexCacheItem_CharWordMapItem::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
int InMemoryURLIndexCacheItem_CharWordMapItem::char_word_map_entry_size() const {
  return char_word_map_entry_.size();
}
void InMemoryURLIndexCacheItem_CharWordMapItem::clear_char_word_map_entry() {
  char_word_map_entry_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& InMemoryURLIndexCacheItem_CharWordMapItem::char_word_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* InMemoryURLIndexCacheItem_CharWordMapItem::mutable_char_word_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* InMemoryURLIndexCacheItem_CharWordMapItem::add_char_word_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >*
InMemoryURLIndexCacheItem_CharWordMapItem::mutable_char_word_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return &char_word_map_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >&
InMemoryURLIndexCacheItem_CharWordMapItem::char_word_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::kWordIdFieldNumber;
const int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::kHistoryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}
InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      history_id_(from.history_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_count_, &from.item_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&word_id_) -
    reinterpret_cast<char*>(&item_count_)) + sizeof(word_id_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&word_id_) -
      reinterpret_cast<char*>(&item_count_)) + sizeof(word_id_));
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::~InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* n = new InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  history_id_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&word_id_) -
        reinterpret_cast<char*>(&item_count_)) + sizeof(word_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 word_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_word_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 history_id = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_history_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_history_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // required int32 word_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->word_id(), output);
  }

  // repeated int64 history_id = 3 [packed = true];
  if (this->history_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _history_id_cached_byte_size_));
  }
  for (int i = 0, n = this->history_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->history_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}

size_t InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  size_t total_size = 0;

  if (has_item_count()) {
    // required uint32 item_count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }

  if (has_word_id()) {
    // required int32 word_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 item_count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());

    // required int32 word_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int64 history_id = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->history_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _history_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry*>(&from));
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_id_.MergeFrom(from.history_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_count_ = from.item_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      word_id_ = from.word_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::Swap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* other) {
  history_id_.InternalSwap(&other->history_id_);
  std::swap(item_count_, other->item_count_);
  std::swap(word_id_, other->word_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
::google::protobuf::uint32 InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.item_count)
  return item_count_;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.item_count)
}

// required int32 word_id = 2;
bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::has_word_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_has_word_id() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_has_word_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_word_id() {
  word_id_ = 0;
  clear_has_word_id();
}
::google::protobuf::int32 InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::word_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.word_id)
  return word_id_;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_word_id(::google::protobuf::int32 value) {
  set_has_word_id();
  word_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.word_id)
}

// repeated int64 history_id = 3 [packed = true];
int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::history_id_size() const {
  return history_id_.size();
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_history_id() {
  history_id_.Clear();
}
::google::protobuf::int64 InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::history_id(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
  return history_id_.Get(index);
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_history_id(int index, ::google::protobuf::int64 value) {
  history_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::add_history_id(::google::protobuf::int64 value) {
  history_id_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::history_id() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
  return history_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::mutable_history_id() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
  return &history_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordIDHistoryMapItem::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_WordIDHistoryMapItem::kWordIdHistoryMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InMemoryURLIndexCacheItem_WordIDHistoryMapItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}
InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InMemoryURLIndexCacheItem_WordIDHistoryMapItem(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      word_id_history_map_entry_(from.word_id_history_map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SharedCtor() {
  _cached_size_ = 0;
  item_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem::~InMemoryURLIndexCacheItem_WordIDHistoryMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& InMemoryURLIndexCacheItem_WordIDHistoryMapItem::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem* n = new InMemoryURLIndexCacheItem_WordIDHistoryMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  word_id_history_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_word_id_history_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->word_id_history_map_entry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->word_id_history_map_entry(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}

size_t InMemoryURLIndexCacheItem_WordIDHistoryMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->word_id_history_map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->word_id_history_map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordIDHistoryMapItem*>(&from));
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_id_history_map_entry_.MergeFrom(from.word_id_history_map_entry_);
  if (from.has_item_count()) {
    set_item_count(from.item_count());
  }
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->word_id_history_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::Swap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem* other) {
  word_id_history_map_entry_.InternalSwap(&other->word_id_history_map_entry_);
  std::swap(item_count_, other->item_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordIDHistoryMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_WordIDHistoryMapItem

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
::google::protobuf::uint32 InMemoryURLIndexCacheItem_WordIDHistoryMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.item_count)
  return item_count_;
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
int InMemoryURLIndexCacheItem_WordIDHistoryMapItem::word_id_history_map_entry_size() const {
  return word_id_history_map_entry_.size();
}
void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::clear_word_id_history_map_entry() {
  word_id_history_map_entry_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& InMemoryURLIndexCacheItem_WordIDHistoryMapItem::word_id_history_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::mutable_word_id_history_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::add_word_id_history_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >*
InMemoryURLIndexCacheItem_WordIDHistoryMapItem::mutable_word_id_history_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return &word_id_history_map_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >&
InMemoryURLIndexCacheItem_WordIDHistoryMapItem::word_id_history_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::kVisitTimeFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::kTransitionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&visit_time_, &from.visit_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&transition_type_) -
    reinterpret_cast<char*>(&visit_time_)) + sizeof(transition_type_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&visit_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transition_type_) -
      reinterpret_cast<char*>(&visit_time_)) + sizeof(transition_type_));
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SharedDtor() {
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* n = new InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&visit_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transition_type_) -
        reinterpret_cast<char*>(&visit_time_)) + sizeof(transition_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 visit_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_visit_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &visit_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 transition_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_transition_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transition_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 visit_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->visit_time(), output);
  }

  // required uint64 transition_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->transition_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}

size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  size_t total_size = 0;

  if (has_visit_time()) {
    // required int64 visit_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->visit_time());
  }

  if (has_transition_type()) {
    // required uint64 transition_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->transition_type());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 visit_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->visit_time());

    // required uint64 transition_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->transition_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo*>(&from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      visit_time_ = from.visit_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      transition_type_ = from.transition_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::Swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* other) {
  std::swap(visit_time_, other->visit_time_);
  std::swap(transition_type_, other->transition_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo

// required int64 visit_time = 1;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::has_visit_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::set_has_visit_time() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::clear_has_visit_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::clear_visit_time() {
  visit_time_ = GOOGLE_LONGLONG(0);
  clear_has_visit_time();
}
::google::protobuf::int64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::visit_time() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.visit_time)
  return visit_time_;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::set_visit_time(::google::protobuf::int64 value) {
  set_has_visit_time();
  visit_time_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.visit_time)
}

// required uint64 transition_type = 2;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::has_transition_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::set_has_transition_type() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::clear_has_transition_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::clear_transition_type() {
  transition_type_ = GOOGLE_ULONGLONG(0);
  clear_has_transition_type();
}
::google::protobuf::uint64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::transition_type() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.transition_type)
  return transition_type_;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::set_transition_type(::google::protobuf::uint64 value) {
  set_has_transition_type();
  transition_type_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.transition_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kHistoryIdFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kVisitCountFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kTypedCountFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kLastVisitFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kUrlFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kTitleFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::kVisitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      visits_(from.visits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&history_id_, &from.history_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_visit_) -
    reinterpret_cast<char*>(&history_id_)) + sizeof(last_visit_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&history_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_visit_) -
      reinterpret_cast<char*>(&history_id_)) + sizeof(last_visit_));
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* n = new InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  visits_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&history_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_visit_) -
        reinterpret_cast<char*>(&history_id_)) + sizeof(last_visit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 history_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_history_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &history_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 visit_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_visit_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visit_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typed_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_typed_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_visit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_last_visit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_visit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_visits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 history_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->history_id(), output);
  }

  // required int32 visit_count = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->visit_count(), output);
  }

  // required int32 typed_count = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typed_count(), output);
  }

  // required int64 last_visit = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_visit(), output);
  }

  // required string url = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->title(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->visits(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}

size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_history_id()) {
    // required int64 history_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->history_id());
  }

  if (has_visit_count()) {
    // required int32 visit_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visit_count());
  }

  if (has_typed_count()) {
    // required int32 typed_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typed_count());
  }

  if (has_last_visit()) {
    // required int64 last_visit = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_visit());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required string url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required int64 history_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->history_id());

    // required int32 visit_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visit_count());

    // required int32 typed_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typed_count());

    // required int64 last_visit = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_visit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->visits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visits(static_cast<int>(i)));
    }
  }

  // optional string title = 6;
  if (has_title()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry*>(&from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  visits_.MergeFrom(from.visits_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      history_id_ = from.history_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      visit_count_ = from.visit_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      typed_count_ = from.typed_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_visit_ = from.last_visit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->visits())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::Swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* other) {
  visits_.InternalSwap(&other->visits_);
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  std::swap(history_id_, other->history_id_);
  std::swap(visit_count_, other->visit_count_);
  std::swap(typed_count_, other->typed_count_);
  std::swap(last_visit_, other->last_visit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry

// required int64 history_id = 1;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_history_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_history_id() {
  _has_bits_[0] |= 0x00000004u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_history_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_history_id() {
  history_id_ = GOOGLE_LONGLONG(0);
  clear_has_history_id();
}
::google::protobuf::int64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::history_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.history_id)
  return history_id_;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_history_id(::google::protobuf::int64 value) {
  set_has_history_id();
  history_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.history_id)
}

// required int32 visit_count = 2;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_visit_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_visit_count() {
  _has_bits_[0] |= 0x00000008u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_visit_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_visit_count() {
  visit_count_ = 0;
  clear_has_visit_count();
}
::google::protobuf::int32 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visit_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visit_count)
  return visit_count_;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_visit_count(::google::protobuf::int32 value) {
  set_has_visit_count();
  visit_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visit_count)
}

// required int32 typed_count = 3;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_typed_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_typed_count() {
  _has_bits_[0] |= 0x00000010u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_typed_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_typed_count() {
  typed_count_ = 0;
  clear_has_typed_count();
}
::google::protobuf::int32 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::typed_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.typed_count)
  return typed_count_;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_typed_count(::google::protobuf::int32 value) {
  set_has_typed_count();
  typed_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.typed_count)
}

// required int64 last_visit = 4;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_last_visit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_last_visit() {
  _has_bits_[0] |= 0x00000020u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_last_visit() {
  _has_bits_[0] &= ~0x00000020u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_last_visit() {
  last_visit_ = GOOGLE_LONGLONG(0);
  clear_has_last_visit();
}
::google::protobuf::int64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::last_visit() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.last_visit)
  return last_visit_;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_last_visit(::google::protobuf::int64 value) {
  set_has_last_visit();
  last_visit_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.last_visit)
}

// required string url = 5;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::url() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
  return url_.GetNoArena();
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
#if LANG_CXX11
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
#endif
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
::std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::release_url() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}

// optional string title = 6;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::title() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
  return title_.GetNoArena();
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
#if LANG_CXX11
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
#endif
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
::std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::release_title() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visits_size() const {
  return visits_.size();
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_visits() {
  visits_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visits(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_visits(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::add_visits() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >*
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_visits() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return &visits_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >&
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visits() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_HistoryInfoMapItem::kHistoryInfoMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_HistoryInfoMapItem::InMemoryURLIndexCacheItem_HistoryInfoMapItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}
InMemoryURLIndexCacheItem_HistoryInfoMapItem::InMemoryURLIndexCacheItem_HistoryInfoMapItem(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      history_info_map_entry_(from.history_info_map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SharedCtor() {
  _cached_size_ = 0;
  item_count_ = 0u;
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem::~InMemoryURLIndexCacheItem_HistoryInfoMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_HistoryInfoMapItem& InMemoryURLIndexCacheItem_HistoryInfoMapItem::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem* InMemoryURLIndexCacheItem_HistoryInfoMapItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_HistoryInfoMapItem* n = new InMemoryURLIndexCacheItem_HistoryInfoMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  history_info_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_info_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_info_map_entry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->history_info_map_entry(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}

size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->history_info_map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_info_map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem*>(&from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_info_map_entry_.MergeFrom(from.history_info_map_entry_);
  if (from.has_item_count()) {
    set_item_count(from.item_count());
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->history_info_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::Swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem* other) {
  history_info_map_entry_.InternalSwap(&other->history_info_map_entry_);
  std::swap(item_count_, other->item_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_HistoryInfoMapItem

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
::google::protobuf::uint32 InMemoryURLIndexCacheItem_HistoryInfoMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.item_count)
  return item_count_;
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
int InMemoryURLIndexCacheItem_HistoryInfoMapItem::history_info_map_entry_size() const {
  return history_info_map_entry_.size();
}
void InMemoryURLIndexCacheItem_HistoryInfoMapItem::clear_history_info_map_entry() {
  history_info_map_entry_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& InMemoryURLIndexCacheItem_HistoryInfoMapItem::history_info_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* InMemoryURLIndexCacheItem_HistoryInfoMapItem::mutable_history_info_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* InMemoryURLIndexCacheItem_HistoryInfoMapItem::add_history_info_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >*
InMemoryURLIndexCacheItem_HistoryInfoMapItem::mutable_history_info_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return &history_info_map_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >&
InMemoryURLIndexCacheItem_HistoryInfoMapItem::history_info_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::kHistoryIdFieldNumber;
const int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::kUrlWordStartsFieldNumber;
const int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::kTitleWordStartsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      url_word_starts_(from.url_word_starts_),
      title_word_starts_(from.title_word_starts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  history_id_ = from.history_id_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SharedCtor() {
  _cached_size_ = 0;
  history_id_ = GOOGLE_LONGLONG(0);
}

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::~InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* n = new InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  url_word_starts_.Clear();
  title_word_starts_.Clear();
  history_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 history_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_history_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &history_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 url_word_starts = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_url_word_starts())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_url_word_starts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 title_word_starts = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_title_word_starts())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_title_word_starts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 history_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->history_id(), output);
  }

  // repeated int32 url_word_starts = 2 [packed = true];
  if (this->url_word_starts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _url_word_starts_cached_byte_size_));
  }
  for (int i = 0, n = this->url_word_starts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->url_word_starts(i), output);
  }

  // repeated int32 title_word_starts = 3 [packed = true];
  if (this->title_word_starts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _title_word_starts_cached_byte_size_));
  }
  for (int i = 0, n = this->title_word_starts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->title_word_starts(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}

size_t InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required int64 history_id = 1;
  if (has_history_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->history_id());
  }
  // repeated int32 url_word_starts = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->url_word_starts_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _url_word_starts_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 title_word_starts = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->title_word_starts_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _title_word_starts_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry*>(&from));
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_word_starts_.MergeFrom(from.url_word_starts_);
  title_word_starts_.MergeFrom(from.title_word_starts_);
  if (from.has_history_id()) {
    set_history_id(from.history_id());
  }
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::Swap(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* other) {
  url_word_starts_.InternalSwap(&other->url_word_starts_);
  title_word_starts_.InternalSwap(&other->title_word_starts_);
  std::swap(history_id_, other->history_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry

// required int64 history_id = 1;
bool InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::has_history_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_has_history_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_has_history_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_history_id() {
  history_id_ = GOOGLE_LONGLONG(0);
  clear_has_history_id();
}
::google::protobuf::int64 InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::history_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.history_id)
  return history_id_;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_history_id(::google::protobuf::int64 value) {
  set_has_history_id();
  history_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.history_id)
}

// repeated int32 url_word_starts = 2 [packed = true];
int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::url_word_starts_size() const {
  return url_word_starts_.size();
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_url_word_starts() {
  url_word_starts_.Clear();
}
::google::protobuf::int32 InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::url_word_starts(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
  return url_word_starts_.Get(index);
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_url_word_starts(int index, ::google::protobuf::int32 value) {
  url_word_starts_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::add_url_word_starts(::google::protobuf::int32 value) {
  url_word_starts_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::url_word_starts() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
  return url_word_starts_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::mutable_url_word_starts() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
  return &url_word_starts_;
}

// repeated int32 title_word_starts = 3 [packed = true];
int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::title_word_starts_size() const {
  return title_word_starts_.size();
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_title_word_starts() {
  title_word_starts_.Clear();
}
::google::protobuf::int32 InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::title_word_starts(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
  return title_word_starts_.Get(index);
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_title_word_starts(int index, ::google::protobuf::int32 value) {
  title_word_starts_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
}
void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::add_title_word_starts(::google::protobuf::int32 value) {
  title_word_starts_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::title_word_starts() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
  return title_word_starts_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::mutable_title_word_starts() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
  return &title_word_starts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem_WordStartsMapItem::kItemCountFieldNumber;
const int InMemoryURLIndexCacheItem_WordStartsMapItem::kWordStartsMapEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem_WordStartsMapItem::InMemoryURLIndexCacheItem_WordStartsMapItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}
InMemoryURLIndexCacheItem_WordStartsMapItem::InMemoryURLIndexCacheItem_WordStartsMapItem(const InMemoryURLIndexCacheItem_WordStartsMapItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      word_starts_map_entry_(from.word_starts_map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SharedCtor() {
  _cached_size_ = 0;
  item_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordStartsMapItem::~InMemoryURLIndexCacheItem_WordStartsMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem_WordStartsMapItem& InMemoryURLIndexCacheItem_WordStartsMapItem::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem_WordStartsMapItem* InMemoryURLIndexCacheItem_WordStartsMapItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem_WordStartsMapItem* n = new InMemoryURLIndexCacheItem_WordStartsMapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  word_starts_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_word_starts_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->word_starts_map_entry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->word_starts_map_entry(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}

size_t InMemoryURLIndexCacheItem_WordStartsMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->word_starts_map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->word_starts_map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem_WordStartsMapItem*>(&from));
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_starts_map_entry_.MergeFrom(from.word_starts_map_entry_);
  if (from.has_item_count()) {
    set_item_count(from.item_count());
  }
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->word_starts_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::Swap(InMemoryURLIndexCacheItem_WordStartsMapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordStartsMapItem* other) {
  word_starts_map_entry_.InternalSwap(&other->word_starts_map_entry_);
  std::swap(item_count_, other->item_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem_WordStartsMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem_WordStartsMapItem

// required uint32 item_count = 1;
bool InMemoryURLIndexCacheItem_WordStartsMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
::google::protobuf::uint32 InMemoryURLIndexCacheItem_WordStartsMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.item_count)
  return item_count_;
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
int InMemoryURLIndexCacheItem_WordStartsMapItem::word_starts_map_entry_size() const {
  return word_starts_map_entry_.size();
}
void InMemoryURLIndexCacheItem_WordStartsMapItem::clear_word_starts_map_entry() {
  word_starts_map_entry_.Clear();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& InMemoryURLIndexCacheItem_WordStartsMapItem::word_starts_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_.Get(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* InMemoryURLIndexCacheItem_WordStartsMapItem::mutable_word_starts_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_.Mutable(index);
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* InMemoryURLIndexCacheItem_WordStartsMapItem::add_word_starts_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >*
InMemoryURLIndexCacheItem_WordStartsMapItem::mutable_word_starts_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return &word_starts_map_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >&
InMemoryURLIndexCacheItem_WordStartsMapItem::word_starts_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InMemoryURLIndexCacheItem::kLastRebuildTimestampFieldNumber;
const int InMemoryURLIndexCacheItem::kVersionFieldNumber;
const int InMemoryURLIndexCacheItem::kHistoryItemCountFieldNumber;
const int InMemoryURLIndexCacheItem::kWordListFieldNumber;
const int InMemoryURLIndexCacheItem::kWordMapFieldNumber;
const int InMemoryURLIndexCacheItem::kCharWordMapFieldNumber;
const int InMemoryURLIndexCacheItem::kWordIdHistoryMapFieldNumber;
const int InMemoryURLIndexCacheItem::kHistoryInfoMapFieldNumber;
const int InMemoryURLIndexCacheItem::kWordStartsMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InMemoryURLIndexCacheItem::InMemoryURLIndexCacheItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem)
}
InMemoryURLIndexCacheItem::InMemoryURLIndexCacheItem(const InMemoryURLIndexCacheItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_word_list()) {
    word_list_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem(*from.word_list_);
  } else {
    word_list_ = NULL;
  }
  if (from.has_word_map()) {
    word_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem(*from.word_map_);
  } else {
    word_map_ = NULL;
  }
  if (from.has_char_word_map()) {
    char_word_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem(*from.char_word_map_);
  } else {
    char_word_map_ = NULL;
  }
  if (from.has_word_id_history_map()) {
    word_id_history_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem(*from.word_id_history_map_);
  } else {
    word_id_history_map_ = NULL;
  }
  if (from.has_history_info_map()) {
    history_info_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem(*from.history_info_map_);
  } else {
    history_info_map_ = NULL;
  }
  if (from.has_word_starts_map()) {
    word_starts_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem(*from.word_starts_map_);
  } else {
    word_starts_map_ = NULL;
  }
  ::memcpy(&last_rebuild_timestamp_, &from.last_rebuild_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&history_item_count_) -
    reinterpret_cast<char*>(&last_rebuild_timestamp_)) + sizeof(history_item_count_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem)
}

void InMemoryURLIndexCacheItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&word_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&history_item_count_) -
      reinterpret_cast<char*>(&word_list_)) + sizeof(history_item_count_));
}

InMemoryURLIndexCacheItem::~InMemoryURLIndexCacheItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete word_list_;
  }
  if (this != internal_default_instance()) {
    delete word_map_;
  }
  if (this != internal_default_instance()) {
    delete char_word_map_;
  }
  if (this != internal_default_instance()) {
    delete word_id_history_map_;
  }
  if (this != internal_default_instance()) {
    delete history_info_map_;
  }
  if (this != internal_default_instance()) {
    delete word_starts_map_;
  }
}

void InMemoryURLIndexCacheItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InMemoryURLIndexCacheItem& InMemoryURLIndexCacheItem::default_instance() {
  protobuf_in_5fmemory_5furl_5findex_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

InMemoryURLIndexCacheItem* InMemoryURLIndexCacheItem::New(::google::protobuf::Arena* arena) const {
  InMemoryURLIndexCacheItem* n = new InMemoryURLIndexCacheItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InMemoryURLIndexCacheItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_word_list()) {
      GOOGLE_DCHECK(word_list_ != NULL);
      word_list_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::Clear();
    }
    if (has_word_map()) {
      GOOGLE_DCHECK(word_map_ != NULL);
      word_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::Clear();
    }
    if (has_char_word_map()) {
      GOOGLE_DCHECK(char_word_map_ != NULL);
      char_word_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::Clear();
    }
    if (has_word_id_history_map()) {
      GOOGLE_DCHECK(word_id_history_map_ != NULL);
      word_id_history_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::Clear();
    }
    if (has_history_info_map()) {
      GOOGLE_DCHECK(history_info_map_ != NULL);
      history_info_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::Clear();
    }
    if (has_word_starts_map()) {
      GOOGLE_DCHECK(word_starts_map_ != NULL);
      word_starts_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&last_rebuild_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&last_rebuild_timestamp_)) + sizeof(version_));
  }
  history_item_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InMemoryURLIndexCacheItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_rebuild_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_last_rebuild_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_rebuild_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 history_item_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_history_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_word_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_word_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_word_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_word_id_history_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_info_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_word_starts_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem)
  return false;
#undef DO_
}

void InMemoryURLIndexCacheItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_rebuild_timestamp = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_rebuild_timestamp(), output);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // required int32 history_item_count = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->history_item_count(), output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->word_list_, output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->word_map_, output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->char_word_map_, output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->word_id_history_map_, output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->history_info_map_, output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->word_starts_map_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem)
}

size_t InMemoryURLIndexCacheItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  size_t total_size = 0;

  if (has_last_rebuild_timestamp()) {
    // required int64 last_rebuild_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_rebuild_timestamp());
  }

  if (has_history_item_count()) {
    // required int32 history_item_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->history_item_count());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000140) ^ 0x00000140) == 0) {  // All required fields are present.
    // required int64 last_rebuild_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_rebuild_timestamp());

    // required int32 history_item_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->history_item_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
    if (has_word_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->word_list_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
    if (has_word_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->word_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
    if (has_char_word_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->char_word_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
    if (has_word_id_history_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->word_id_history_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
    if (has_history_info_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->history_info_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
    if (has_word_starts_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->word_starts_map_);
    }

  }
  // optional int32 version = 2;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InMemoryURLIndexCacheItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InMemoryURLIndexCacheItem*>(&from));
}

void InMemoryURLIndexCacheItem::MergeFrom(const InMemoryURLIndexCacheItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_word_list()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::MergeFrom(from.word_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_word_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::MergeFrom(from.word_map());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_char_word_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::MergeFrom(from.char_word_map());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_word_id_history_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergeFrom(from.word_id_history_map());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_history_info_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergeFrom(from.history_info_map());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_word_starts_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::MergeFrom(from.word_starts_map());
    }
    if (cached_has_bits & 0x00000040u) {
      last_rebuild_timestamp_ = from.last_rebuild_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_history_item_count(from.history_item_count());
  }
}

void InMemoryURLIndexCacheItem::CopyFrom(const InMemoryURLIndexCacheItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000140) != 0x00000140) return false;
  if (has_word_list()) {
    if (!this->word_list_->IsInitialized()) return false;
  }
  if (has_word_map()) {
    if (!this->word_map_->IsInitialized()) return false;
  }
  if (has_char_word_map()) {
    if (!this->char_word_map_->IsInitialized()) return false;
  }
  if (has_word_id_history_map()) {
    if (!this->word_id_history_map_->IsInitialized()) return false;
  }
  if (has_history_info_map()) {
    if (!this->history_info_map_->IsInitialized()) return false;
  }
  if (has_word_starts_map()) {
    if (!this->word_starts_map_->IsInitialized()) return false;
  }
  return true;
}

void InMemoryURLIndexCacheItem::Swap(InMemoryURLIndexCacheItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InMemoryURLIndexCacheItem::InternalSwap(InMemoryURLIndexCacheItem* other) {
  std::swap(word_list_, other->word_list_);
  std::swap(word_map_, other->word_map_);
  std::swap(char_word_map_, other->char_word_map_);
  std::swap(word_id_history_map_, other->word_id_history_map_);
  std::swap(history_info_map_, other->history_info_map_);
  std::swap(word_starts_map_, other->word_starts_map_);
  std::swap(last_rebuild_timestamp_, other->last_rebuild_timestamp_);
  std::swap(version_, other->version_);
  std::swap(history_item_count_, other->history_item_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InMemoryURLIndexCacheItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InMemoryURLIndexCacheItem

// required int64 last_rebuild_timestamp = 1;
bool InMemoryURLIndexCacheItem::has_last_rebuild_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_last_rebuild_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void InMemoryURLIndexCacheItem::clear_has_last_rebuild_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void InMemoryURLIndexCacheItem::clear_last_rebuild_timestamp() {
  last_rebuild_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_rebuild_timestamp();
}
::google::protobuf::int64 InMemoryURLIndexCacheItem::last_rebuild_timestamp() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.last_rebuild_timestamp)
  return last_rebuild_timestamp_;
}
void InMemoryURLIndexCacheItem::set_last_rebuild_timestamp(::google::protobuf::int64 value) {
  set_has_last_rebuild_timestamp();
  last_rebuild_timestamp_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.last_rebuild_timestamp)
}

// optional int32 version = 2;
bool InMemoryURLIndexCacheItem::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
void InMemoryURLIndexCacheItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
void InMemoryURLIndexCacheItem::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 InMemoryURLIndexCacheItem::version() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.version)
  return version_;
}
void InMemoryURLIndexCacheItem::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.version)
}

// required int32 history_item_count = 3;
bool InMemoryURLIndexCacheItem::has_history_item_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_history_item_count() {
  _has_bits_[0] |= 0x00000100u;
}
void InMemoryURLIndexCacheItem::clear_has_history_item_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void InMemoryURLIndexCacheItem::clear_history_item_count() {
  history_item_count_ = 0;
  clear_has_history_item_count();
}
::google::protobuf::int32 InMemoryURLIndexCacheItem::history_item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.history_item_count)
  return history_item_count_;
}
void InMemoryURLIndexCacheItem::set_history_item_count(::google::protobuf::int32 value) {
  set_has_history_item_count();
  history_item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.history_item_count)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
bool InMemoryURLIndexCacheItem::has_word_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_word_list() {
  _has_bits_[0] |= 0x00000001u;
}
void InMemoryURLIndexCacheItem::clear_has_word_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void InMemoryURLIndexCacheItem::clear_word_list() {
  if (word_list_ != NULL) word_list_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::Clear();
  clear_has_word_list();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem& InMemoryURLIndexCacheItem::word_list() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
  return word_list_ != NULL ? *word_list_
                         : *::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::internal_default_instance();
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* InMemoryURLIndexCacheItem::mutable_word_list() {
  set_has_word_list();
  if (word_list_ == NULL) {
    word_list_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
  return word_list_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* InMemoryURLIndexCacheItem::release_word_list() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
  clear_has_word_list();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* temp = word_list_;
  word_list_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_word_list(::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* word_list) {
  delete word_list_;
  word_list_ = word_list;
  if (word_list) {
    set_has_word_list();
  } else {
    clear_has_word_list();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
bool InMemoryURLIndexCacheItem::has_word_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_word_map() {
  _has_bits_[0] |= 0x00000002u;
}
void InMemoryURLIndexCacheItem::clear_has_word_map() {
  _has_bits_[0] &= ~0x00000002u;
}
void InMemoryURLIndexCacheItem::clear_word_map() {
  if (word_map_ != NULL) word_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::Clear();
  clear_has_word_map();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem& InMemoryURLIndexCacheItem::word_map() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
  return word_map_ != NULL ? *word_map_
                         : *::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::internal_default_instance();
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* InMemoryURLIndexCacheItem::mutable_word_map() {
  set_has_word_map();
  if (word_map_ == NULL) {
    word_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
  return word_map_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* InMemoryURLIndexCacheItem::release_word_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
  clear_has_word_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* temp = word_map_;
  word_map_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_word_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* word_map) {
  delete word_map_;
  word_map_ = word_map;
  if (word_map) {
    set_has_word_map();
  } else {
    clear_has_word_map();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
bool InMemoryURLIndexCacheItem::has_char_word_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_char_word_map() {
  _has_bits_[0] |= 0x00000004u;
}
void InMemoryURLIndexCacheItem::clear_has_char_word_map() {
  _has_bits_[0] &= ~0x00000004u;
}
void InMemoryURLIndexCacheItem::clear_char_word_map() {
  if (char_word_map_ != NULL) char_word_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::Clear();
  clear_has_char_word_map();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem& InMemoryURLIndexCacheItem::char_word_map() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
  return char_word_map_ != NULL ? *char_word_map_
                         : *::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::internal_default_instance();
}
::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* InMemoryURLIndexCacheItem::mutable_char_word_map() {
  set_has_char_word_map();
  if (char_word_map_ == NULL) {
    char_word_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
  return char_word_map_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* InMemoryURLIndexCacheItem::release_char_word_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
  clear_has_char_word_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* temp = char_word_map_;
  char_word_map_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_char_word_map(::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* char_word_map) {
  delete char_word_map_;
  char_word_map_ = char_word_map;
  if (char_word_map) {
    set_has_char_word_map();
  } else {
    clear_has_char_word_map();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
bool InMemoryURLIndexCacheItem::has_word_id_history_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_word_id_history_map() {
  _has_bits_[0] |= 0x00000008u;
}
void InMemoryURLIndexCacheItem::clear_has_word_id_history_map() {
  _has_bits_[0] &= ~0x00000008u;
}
void InMemoryURLIndexCacheItem::clear_word_id_history_map() {
  if (word_id_history_map_ != NULL) word_id_history_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::Clear();
  clear_has_word_id_history_map();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem& InMemoryURLIndexCacheItem::word_id_history_map() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
  return word_id_history_map_ != NULL ? *word_id_history_map_
                         : *::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::internal_default_instance();
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* InMemoryURLIndexCacheItem::mutable_word_id_history_map() {
  set_has_word_id_history_map();
  if (word_id_history_map_ == NULL) {
    word_id_history_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
  return word_id_history_map_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* InMemoryURLIndexCacheItem::release_word_id_history_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
  clear_has_word_id_history_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* temp = word_id_history_map_;
  word_id_history_map_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_word_id_history_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* word_id_history_map) {
  delete word_id_history_map_;
  word_id_history_map_ = word_id_history_map;
  if (word_id_history_map) {
    set_has_word_id_history_map();
  } else {
    clear_has_word_id_history_map();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
bool InMemoryURLIndexCacheItem::has_history_info_map() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_history_info_map() {
  _has_bits_[0] |= 0x00000010u;
}
void InMemoryURLIndexCacheItem::clear_has_history_info_map() {
  _has_bits_[0] &= ~0x00000010u;
}
void InMemoryURLIndexCacheItem::clear_history_info_map() {
  if (history_info_map_ != NULL) history_info_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::Clear();
  clear_has_history_info_map();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem& InMemoryURLIndexCacheItem::history_info_map() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
  return history_info_map_ != NULL ? *history_info_map_
                         : *::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::internal_default_instance();
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* InMemoryURLIndexCacheItem::mutable_history_info_map() {
  set_has_history_info_map();
  if (history_info_map_ == NULL) {
    history_info_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
  return history_info_map_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* InMemoryURLIndexCacheItem::release_history_info_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
  clear_has_history_info_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* temp = history_info_map_;
  history_info_map_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_history_info_map(::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* history_info_map) {
  delete history_info_map_;
  history_info_map_ = history_info_map;
  if (history_info_map) {
    set_has_history_info_map();
  } else {
    clear_has_history_info_map();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
bool InMemoryURLIndexCacheItem::has_word_starts_map() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InMemoryURLIndexCacheItem::set_has_word_starts_map() {
  _has_bits_[0] |= 0x00000020u;
}
void InMemoryURLIndexCacheItem::clear_has_word_starts_map() {
  _has_bits_[0] &= ~0x00000020u;
}
void InMemoryURLIndexCacheItem::clear_word_starts_map() {
  if (word_starts_map_ != NULL) word_starts_map_->::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::Clear();
  clear_has_word_starts_map();
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem& InMemoryURLIndexCacheItem::word_starts_map() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
  return word_starts_map_ != NULL ? *word_starts_map_
                         : *::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::internal_default_instance();
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* InMemoryURLIndexCacheItem::mutable_word_starts_map() {
  set_has_word_starts_map();
  if (word_starts_map_ == NULL) {
    word_starts_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
  return word_starts_map_;
}
::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* InMemoryURLIndexCacheItem::release_word_starts_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
  clear_has_word_starts_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* temp = word_starts_map_;
  word_starts_map_ = NULL;
  return temp;
}
void InMemoryURLIndexCacheItem::set_allocated_word_starts_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* word_starts_map) {
  delete word_starts_map_;
  word_starts_map_ = word_starts_map;
  if (word_starts_map) {
    set_has_word_starts_map();
  } else {
    clear_has_word_starts_map();
  }
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace in_memory_url_index

// @@protoc_insertion_point(global_scope)
