// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chrome.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace userfeedback {
class ChromeDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeData> {
} _ChromeData_default_instance_;
class ChromeOsDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeOsData> {
} _ChromeOsData_default_instance_;
class ChromeBrowserDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromeBrowserData> {
} _ChromeBrowserData_default_instance_;

namespace protobuf_chrome_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ChromeData_default_instance_.Shutdown();
  _ChromeOsData_default_instance_.Shutdown();
  _ChromeBrowserData_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ChromeData_default_instance_.DefaultConstruct();
  _ChromeOsData_default_instance_.DefaultConstruct();
  _ChromeBrowserData_default_instance_.DefaultConstruct();
  _ChromeData_default_instance_.get_mutable()->chrome_os_data_ = const_cast< ::userfeedback::ChromeOsData*>(
      ::userfeedback::ChromeOsData::internal_default_instance());
  _ChromeData_default_instance_.get_mutable()->chrome_browser_data_ = const_cast< ::userfeedback::ChromeBrowserData*>(
      ::userfeedback::ChromeBrowserData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_chrome_2eproto

bool ChromeData_ChromePlatform_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeData_ChromePlatform ChromeData::CHROME_OS;
const ChromeData_ChromePlatform ChromeData::CHROME_BROWSER;
const ChromeData_ChromePlatform ChromeData::ChromePlatform_MIN;
const ChromeData_ChromePlatform ChromeData::ChromePlatform_MAX;
const int ChromeData::ChromePlatform_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ChromeOsData_ChromeOsCategory_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeOsData_ChromeOsCategory ChromeOsData::CONNECTIVITY;
const ChromeOsData_ChromeOsCategory ChromeOsData::SYNC;
const ChromeOsData_ChromeOsCategory ChromeOsData::CRASH;
const ChromeOsData_ChromeOsCategory ChromeOsData::PAGE_FORMATTING_OR_LAYOUT;
const ChromeOsData_ChromeOsCategory ChromeOsData::EXTENSIONS_OR_APPS;
const ChromeOsData_ChromeOsCategory ChromeOsData::STANDBY_OR_RESUME;
const ChromeOsData_ChromeOsCategory ChromeOsData::PHISHING_PAGE;
const ChromeOsData_ChromeOsCategory ChromeOsData::OTHER;
const ChromeOsData_ChromeOsCategory ChromeOsData::AUTOFILL;
const ChromeOsData_ChromeOsCategory ChromeOsData::ChromeOsCategory_MIN;
const ChromeOsData_ChromeOsCategory ChromeOsData::ChromeOsCategory_MAX;
const int ChromeOsData::ChromeOsCategory_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ChromeBrowserData_ChromeBrowserCategory_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PAGE_FORMATTING_OR_LAYOUT;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PAGES_NOT_LOADING;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PLUGINS;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::TABS_OR_WINDOWS;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::SYNCED_PREFERENCES;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::CRASH;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::EXTENSIONS_OR_APPS;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PHISHING_PAGE;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::OTHER;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::AUTOFILL;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::ChromeBrowserCategory_MIN;
const ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::ChromeBrowserCategory_MAX;
const int ChromeBrowserData::ChromeBrowserCategory_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeData::kChromePlatformFieldNumber;
const int ChromeData::kChromeOsDataFieldNumber;
const int ChromeData::kChromeBrowserDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeData::ChromeData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chrome_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ChromeData)
}
ChromeData::ChromeData(const ChromeData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chrome_os_data()) {
    chrome_os_data_ = new ::userfeedback::ChromeOsData(*from.chrome_os_data_);
  } else {
    chrome_os_data_ = NULL;
  }
  if (from.has_chrome_browser_data()) {
    chrome_browser_data_ = new ::userfeedback::ChromeBrowserData(*from.chrome_browser_data_);
  } else {
    chrome_browser_data_ = NULL;
  }
  chrome_platform_ = from.chrome_platform_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.ChromeData)
}

void ChromeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chrome_os_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chrome_browser_data_) -
      reinterpret_cast<char*>(&chrome_os_data_)) + sizeof(chrome_browser_data_));
  chrome_platform_ = 1;
}

ChromeData::~ChromeData() {
  // @@protoc_insertion_point(destructor:userfeedback.ChromeData)
  SharedDtor();
}

void ChromeData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete chrome_os_data_;
  }
  if (this != internal_default_instance()) {
    delete chrome_browser_data_;
  }
}

void ChromeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeData& ChromeData::default_instance() {
  protobuf_chrome_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeData* ChromeData::New(::google::protobuf::Arena* arena) const {
  ChromeData* n = new ChromeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ChromeData)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_chrome_os_data()) {
      GOOGLE_DCHECK(chrome_os_data_ != NULL);
      chrome_os_data_->::userfeedback::ChromeOsData::Clear();
    }
    if (has_chrome_browser_data()) {
      GOOGLE_DCHECK(chrome_browser_data_ != NULL);
      chrome_browser_data_->::userfeedback::ChromeBrowserData::Clear();
    }
    chrome_platform_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ChromeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userfeedback::ChromeData_ChromePlatform_IsValid(value)) {
            set_chrome_platform(static_cast< ::userfeedback::ChromeData_ChromePlatform >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.ChromeOsData chrome_os_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chrome_os_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chrome_browser_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ChromeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ChromeData)
  return false;
#undef DO_
}

void ChromeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ChromeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chrome_platform(), output);
  }

  // optional .userfeedback.ChromeOsData chrome_os_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->chrome_os_data_, output);
  }

  // optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->chrome_browser_data_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ChromeData)
}

size_t ChromeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ChromeData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .userfeedback.ChromeOsData chrome_os_data = 2;
    if (has_chrome_os_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chrome_os_data_);
    }

    // optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
    if (has_chrome_browser_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chrome_browser_data_);
    }

    // optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
    if (has_chrome_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chrome_platform());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeData*>(&from));
}

void ChromeData::MergeFrom(const ChromeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ChromeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_chrome_os_data()->::userfeedback::ChromeOsData::MergeFrom(from.chrome_os_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chrome_browser_data()->::userfeedback::ChromeBrowserData::MergeFrom(from.chrome_browser_data());
    }
    if (cached_has_bits & 0x00000004u) {
      chrome_platform_ = from.chrome_platform_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeData::CopyFrom(const ChromeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ChromeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeData::IsInitialized() const {
  return true;
}

void ChromeData::Swap(ChromeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeData::InternalSwap(ChromeData* other) {
  std::swap(chrome_os_data_, other->chrome_os_data_);
  std::swap(chrome_browser_data_, other->chrome_browser_data_);
  std::swap(chrome_platform_, other->chrome_platform_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeData::GetTypeName() const {
  return "userfeedback.ChromeData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeData

// optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
bool ChromeData::has_chrome_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChromeData::set_has_chrome_platform() {
  _has_bits_[0] |= 0x00000004u;
}
void ChromeData::clear_has_chrome_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChromeData::clear_chrome_platform() {
  chrome_platform_ = 1;
  clear_has_chrome_platform();
}
::userfeedback::ChromeData_ChromePlatform ChromeData::chrome_platform() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeData.chrome_platform)
  return static_cast< ::userfeedback::ChromeData_ChromePlatform >(chrome_platform_);
}
void ChromeData::set_chrome_platform(::userfeedback::ChromeData_ChromePlatform value) {
  assert(::userfeedback::ChromeData_ChromePlatform_IsValid(value));
  set_has_chrome_platform();
  chrome_platform_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ChromeData.chrome_platform)
}

// optional .userfeedback.ChromeOsData chrome_os_data = 2;
bool ChromeData::has_chrome_os_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeData::set_has_chrome_os_data() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeData::clear_has_chrome_os_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeData::clear_chrome_os_data() {
  if (chrome_os_data_ != NULL) chrome_os_data_->::userfeedback::ChromeOsData::Clear();
  clear_has_chrome_os_data();
}
const ::userfeedback::ChromeOsData& ChromeData::chrome_os_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeData.chrome_os_data)
  return chrome_os_data_ != NULL ? *chrome_os_data_
                         : *::userfeedback::ChromeOsData::internal_default_instance();
}
::userfeedback::ChromeOsData* ChromeData::mutable_chrome_os_data() {
  set_has_chrome_os_data();
  if (chrome_os_data_ == NULL) {
    chrome_os_data_ = new ::userfeedback::ChromeOsData;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ChromeData.chrome_os_data)
  return chrome_os_data_;
}
::userfeedback::ChromeOsData* ChromeData::release_chrome_os_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ChromeData.chrome_os_data)
  clear_has_chrome_os_data();
  ::userfeedback::ChromeOsData* temp = chrome_os_data_;
  chrome_os_data_ = NULL;
  return temp;
}
void ChromeData::set_allocated_chrome_os_data(::userfeedback::ChromeOsData* chrome_os_data) {
  delete chrome_os_data_;
  chrome_os_data_ = chrome_os_data;
  if (chrome_os_data) {
    set_has_chrome_os_data();
  } else {
    clear_has_chrome_os_data();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ChromeData.chrome_os_data)
}

// optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
bool ChromeData::has_chrome_browser_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeData::set_has_chrome_browser_data() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromeData::clear_has_chrome_browser_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromeData::clear_chrome_browser_data() {
  if (chrome_browser_data_ != NULL) chrome_browser_data_->::userfeedback::ChromeBrowserData::Clear();
  clear_has_chrome_browser_data();
}
const ::userfeedback::ChromeBrowserData& ChromeData::chrome_browser_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeData.chrome_browser_data)
  return chrome_browser_data_ != NULL ? *chrome_browser_data_
                         : *::userfeedback::ChromeBrowserData::internal_default_instance();
}
::userfeedback::ChromeBrowserData* ChromeData::mutable_chrome_browser_data() {
  set_has_chrome_browser_data();
  if (chrome_browser_data_ == NULL) {
    chrome_browser_data_ = new ::userfeedback::ChromeBrowserData;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ChromeData.chrome_browser_data)
  return chrome_browser_data_;
}
::userfeedback::ChromeBrowserData* ChromeData::release_chrome_browser_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ChromeData.chrome_browser_data)
  clear_has_chrome_browser_data();
  ::userfeedback::ChromeBrowserData* temp = chrome_browser_data_;
  chrome_browser_data_ = NULL;
  return temp;
}
void ChromeData::set_allocated_chrome_browser_data(::userfeedback::ChromeBrowserData* chrome_browser_data) {
  delete chrome_browser_data_;
  chrome_browser_data_ = chrome_browser_data;
  if (chrome_browser_data) {
    set_has_chrome_browser_data();
  } else {
    clear_has_chrome_browser_data();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ChromeData.chrome_browser_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeOsData::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeOsData::ChromeOsData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chrome_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ChromeOsData)
}
ChromeOsData::ChromeOsData(const ChromeOsData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_ = from.category_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.ChromeOsData)
}

void ChromeOsData::SharedCtor() {
  _cached_size_ = 0;
  category_ = 8;
}

ChromeOsData::~ChromeOsData() {
  // @@protoc_insertion_point(destructor:userfeedback.ChromeOsData)
  SharedDtor();
}

void ChromeOsData::SharedDtor() {
}

void ChromeOsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeOsData& ChromeOsData::default_instance() {
  protobuf_chrome_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeOsData* ChromeOsData::New(::google::protobuf::Arena* arena) const {
  ChromeOsData* n = new ChromeOsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeOsData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ChromeOsData)
  category_ = 8;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeOsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ChromeOsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userfeedback::ChromeOsData_ChromeOsCategory_IsValid(value)) {
            set_category(static_cast< ::userfeedback::ChromeOsData_ChromeOsCategory >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ChromeOsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ChromeOsData)
  return false;
#undef DO_
}

void ChromeOsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ChromeOsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->category(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ChromeOsData)
}

size_t ChromeOsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ChromeOsData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
  if (has_category()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeOsData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeOsData*>(&from));
}

void ChromeOsData::MergeFrom(const ChromeOsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ChromeOsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_category()) {
    set_category(from.category());
  }
}

void ChromeOsData::CopyFrom(const ChromeOsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ChromeOsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeOsData::IsInitialized() const {
  return true;
}

void ChromeOsData::Swap(ChromeOsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeOsData::InternalSwap(ChromeOsData* other) {
  std::swap(category_, other->category_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeOsData::GetTypeName() const {
  return "userfeedback.ChromeOsData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeOsData

// optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
bool ChromeOsData::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeOsData::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeOsData::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeOsData::clear_category() {
  category_ = 8;
  clear_has_category();
}
::userfeedback::ChromeOsData_ChromeOsCategory ChromeOsData::category() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeOsData.category)
  return static_cast< ::userfeedback::ChromeOsData_ChromeOsCategory >(category_);
}
void ChromeOsData::set_category(::userfeedback::ChromeOsData_ChromeOsCategory value) {
  assert(::userfeedback::ChromeOsData_ChromeOsCategory_IsValid(value));
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ChromeOsData.category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeBrowserData::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeBrowserData::ChromeBrowserData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chrome_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ChromeBrowserData)
}
ChromeBrowserData::ChromeBrowserData(const ChromeBrowserData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_ = from.category_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.ChromeBrowserData)
}

void ChromeBrowserData::SharedCtor() {
  _cached_size_ = 0;
  category_ = 9;
}

ChromeBrowserData::~ChromeBrowserData() {
  // @@protoc_insertion_point(destructor:userfeedback.ChromeBrowserData)
  SharedDtor();
}

void ChromeBrowserData::SharedDtor() {
}

void ChromeBrowserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeBrowserData& ChromeBrowserData::default_instance() {
  protobuf_chrome_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeBrowserData* ChromeBrowserData::New(::google::protobuf::Arena* arena) const {
  ChromeBrowserData* n = new ChromeBrowserData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeBrowserData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ChromeBrowserData)
  category_ = 9;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeBrowserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ChromeBrowserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::userfeedback::ChromeBrowserData_ChromeBrowserCategory_IsValid(value)) {
            set_category(static_cast< ::userfeedback::ChromeBrowserData_ChromeBrowserCategory >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ChromeBrowserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ChromeBrowserData)
  return false;
#undef DO_
}

void ChromeBrowserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ChromeBrowserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->category(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ChromeBrowserData)
}

size_t ChromeBrowserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ChromeBrowserData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
  if (has_category()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeBrowserData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromeBrowserData*>(&from));
}

void ChromeBrowserData::MergeFrom(const ChromeBrowserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ChromeBrowserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_category()) {
    set_category(from.category());
  }
}

void ChromeBrowserData::CopyFrom(const ChromeBrowserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ChromeBrowserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeBrowserData::IsInitialized() const {
  return true;
}

void ChromeBrowserData::Swap(ChromeBrowserData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeBrowserData::InternalSwap(ChromeBrowserData* other) {
  std::swap(category_, other->category_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeBrowserData::GetTypeName() const {
  return "userfeedback.ChromeBrowserData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeBrowserData

// optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
bool ChromeBrowserData::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeBrowserData::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeBrowserData::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeBrowserData::clear_category() {
  category_ = 9;
  clear_has_category();
}
::userfeedback::ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::category() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeBrowserData.category)
  return static_cast< ::userfeedback::ChromeBrowserData_ChromeBrowserCategory >(category_);
}
void ChromeBrowserData::set_category(::userfeedback::ChromeBrowserData_ChromeBrowserCategory value) {
  assert(::userfeedback::ChromeBrowserData_ChromeBrowserCategory_IsValid(value));
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ChromeBrowserData.category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)
