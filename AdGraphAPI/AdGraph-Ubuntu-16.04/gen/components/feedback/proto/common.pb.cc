// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace userfeedback {
class CommonDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonData> {
} _CommonData_default_instance_;

namespace protobuf_common_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _CommonData_default_instance_.Shutdown();
  CommonData::_default_source_description_language_.Shutdown();
  CommonData::_default_ui_language_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  CommonData::_default_source_description_language_.DefaultConstruct();
  *CommonData::_default_source_description_language_.get_mutable() = ::std::string("en", 2);
  CommonData::_default_ui_language_.DefaultConstruct();
  *CommonData::_default_ui_language_.get_mutable() = ::std::string("en_US", 5);
  _CommonData_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_common_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> CommonData::_default_source_description_language_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> CommonData::_default_ui_language_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonData::kGaiaIdFieldNumber;
const int CommonData::kDescriptionFieldNumber;
const int CommonData::kDescriptionTranslatedFieldNumber;
const int CommonData::kSourceDescriptionLanguageFieldNumber;
const int CommonData::kUiLanguageFieldNumber;
const int CommonData::kUserEmailFieldNumber;
const int CommonData::kUniqueReportIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonData::CommonData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.CommonData)
}
CommonData::CommonData(const CommonData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  user_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_email()) {
    user_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_email_);
  }
  description_translated_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description_translated()) {
    description_translated_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_translated_);
  }
  source_description_language_.UnsafeSetDefault(&CommonData::_default_source_description_language_.get());
  if (from.has_source_description_language()) {
    source_description_language_.AssignWithDefault(&CommonData::_default_source_description_language_.get(), from.source_description_language_);
  }
  ui_language_.UnsafeSetDefault(&CommonData::_default_ui_language_.get());
  if (from.has_ui_language()) {
    ui_language_.AssignWithDefault(&CommonData::_default_ui_language_.get(), from.ui_language_);
  }
  unique_report_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unique_report_identifier()) {
    unique_report_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_report_identifier_);
  }
  gaia_id_ = from.gaia_id_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.CommonData)
}

void CommonData::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_translated_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_description_language_.UnsafeSetDefault(&CommonData::_default_source_description_language_.get());
  ui_language_.UnsafeSetDefault(&CommonData::_default_ui_language_.get());
  unique_report_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gaia_id_ = GOOGLE_ULONGLONG(0);
}

CommonData::~CommonData() {
  // @@protoc_insertion_point(destructor:userfeedback.CommonData)
  SharedDtor();
}

void CommonData::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_translated_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_description_language_.DestroyNoArena(&CommonData::_default_source_description_language_.get());
  ui_language_.DestroyNoArena(&CommonData::_default_ui_language_.get());
  unique_report_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommonData& CommonData::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonData* CommonData::New(::google::protobuf::Arena* arena) const {
  CommonData* n = new CommonData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.CommonData)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_email()) {
      GOOGLE_DCHECK(!user_email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_email_.UnsafeRawStringPointer())->clear();
    }
    if (has_description_translated()) {
      GOOGLE_DCHECK(!description_translated_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_translated_.UnsafeRawStringPointer())->clear();
    }
    if (has_source_description_language()) {
      GOOGLE_DCHECK(!source_description_language_.IsDefault(&CommonData::_default_source_description_language_.get()));
      (*source_description_language_.UnsafeRawStringPointer())->assign(*&CommonData::_default_source_description_language_.get());
    }
    if (has_ui_language()) {
      GOOGLE_DCHECK(!ui_language_.IsDefault(&CommonData::_default_ui_language_.get()));
      (*ui_language_.UnsafeRawStringPointer())->assign(*&CommonData::_default_ui_language_.get());
    }
    if (has_unique_report_identifier()) {
      GOOGLE_DCHECK(!unique_report_identifier_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*unique_report_identifier_.UnsafeRawStringPointer())->clear();
    }
  }
  gaia_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.CommonData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 gaia_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_gaia_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gaia_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_email = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description_translated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description_translated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_description_language = 5 [default = "en"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_description_language()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ui_language = 6 [default = "en_US"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ui_language()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unique_report_identifier = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_report_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.CommonData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.CommonData)
  return false;
#undef DO_
}

void CommonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.CommonData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gaia_id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->gaia_id(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string user_email = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_email(), output);
  }

  // optional string description_translated = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description_translated(), output);
  }

  // optional string source_description_language = 5 [default = "en"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_description_language(), output);
  }

  // optional string ui_language = 6 [default = "en_US"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ui_language(), output);
  }

  // optional string unique_report_identifier = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->unique_report_identifier(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.CommonData)
}

size_t CommonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.CommonData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string user_email = 3;
    if (has_user_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_email());
    }

    // optional string description_translated = 4;
    if (has_description_translated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description_translated());
    }

    // optional string source_description_language = 5 [default = "en"];
    if (has_source_description_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_description_language());
    }

    // optional string ui_language = 6 [default = "en_US"];
    if (has_ui_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ui_language());
    }

    // optional string unique_report_identifier = 7;
    if (has_unique_report_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unique_report_identifier());
    }

    // optional fixed64 gaia_id = 1;
    if (has_gaia_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommonData*>(&from));
}

void CommonData::MergeFrom(const CommonData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.CommonData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_email();
      user_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_email_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_description_translated();
      description_translated_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_translated_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_source_description_language();
      source_description_language_.AssignWithDefault(&CommonData::_default_source_description_language_.get(), from.source_description_language_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_ui_language();
      ui_language_.AssignWithDefault(&CommonData::_default_ui_language_.get(), from.ui_language_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_unique_report_identifier();
      unique_report_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_report_identifier_);
    }
    if (cached_has_bits & 0x00000040u) {
      gaia_id_ = from.gaia_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommonData::CopyFrom(const CommonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.CommonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonData::IsInitialized() const {
  return true;
}

void CommonData::Swap(CommonData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonData::InternalSwap(CommonData* other) {
  description_.Swap(&other->description_);
  user_email_.Swap(&other->user_email_);
  description_translated_.Swap(&other->description_translated_);
  source_description_language_.Swap(&other->source_description_language_);
  ui_language_.Swap(&other->ui_language_);
  unique_report_identifier_.Swap(&other->unique_report_identifier_);
  std::swap(gaia_id_, other->gaia_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommonData::GetTypeName() const {
  return "userfeedback.CommonData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonData

// optional fixed64 gaia_id = 1;
bool CommonData::has_gaia_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CommonData::set_has_gaia_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CommonData::clear_has_gaia_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CommonData::clear_gaia_id() {
  gaia_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gaia_id();
}
::google::protobuf::uint64 CommonData::gaia_id() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.gaia_id)
  return gaia_id_;
}
void CommonData::set_gaia_id(::google::protobuf::uint64 value) {
  set_has_gaia_id();
  gaia_id_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.gaia_id)
}

// optional string description = 2;
bool CommonData::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommonData::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CommonData::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommonData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& CommonData::description() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.description)
  return description_.GetNoArena();
}
void CommonData::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.description)
}
#if LANG_CXX11
void CommonData::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.description)
}
#endif
void CommonData::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.description)
}
void CommonData::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.description)
}
::std::string* CommonData::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommonData::release_description() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommonData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.description)
}

// optional string description_translated = 4;
bool CommonData::has_description_translated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommonData::set_has_description_translated() {
  _has_bits_[0] |= 0x00000004u;
}
void CommonData::clear_has_description_translated() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommonData::clear_description_translated() {
  description_translated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description_translated();
}
const ::std::string& CommonData::description_translated() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.description_translated)
  return description_translated_.GetNoArena();
}
void CommonData::set_description_translated(const ::std::string& value) {
  set_has_description_translated();
  description_translated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.description_translated)
}
#if LANG_CXX11
void CommonData::set_description_translated(::std::string&& value) {
  set_has_description_translated();
  description_translated_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.description_translated)
}
#endif
void CommonData::set_description_translated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description_translated();
  description_translated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.description_translated)
}
void CommonData::set_description_translated(const char* value, size_t size) {
  set_has_description_translated();
  description_translated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.description_translated)
}
::std::string* CommonData::mutable_description_translated() {
  set_has_description_translated();
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.description_translated)
  return description_translated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommonData::release_description_translated() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.description_translated)
  clear_has_description_translated();
  return description_translated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommonData::set_allocated_description_translated(::std::string* description_translated) {
  if (description_translated != NULL) {
    set_has_description_translated();
  } else {
    clear_has_description_translated();
  }
  description_translated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description_translated);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.description_translated)
}

// optional string source_description_language = 5 [default = "en"];
bool CommonData::has_source_description_language() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CommonData::set_has_source_description_language() {
  _has_bits_[0] |= 0x00000008u;
}
void CommonData::clear_has_source_description_language() {
  _has_bits_[0] &= ~0x00000008u;
}
void CommonData::clear_source_description_language() {
  source_description_language_.ClearToDefaultNoArena(&CommonData::_default_source_description_language_.get());
  clear_has_source_description_language();
}
const ::std::string& CommonData::source_description_language() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.source_description_language)
  return source_description_language_.GetNoArena();
}
void CommonData::set_source_description_language(const ::std::string& value) {
  set_has_source_description_language();
  source_description_language_.SetNoArena(&CommonData::_default_source_description_language_.get(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.source_description_language)
}
#if LANG_CXX11
void CommonData::set_source_description_language(::std::string&& value) {
  set_has_source_description_language();
  source_description_language_.SetNoArena(
    &CommonData::_default_source_description_language_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.source_description_language)
}
#endif
void CommonData::set_source_description_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_description_language();
  source_description_language_.SetNoArena(&CommonData::_default_source_description_language_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.source_description_language)
}
void CommonData::set_source_description_language(const char* value, size_t size) {
  set_has_source_description_language();
  source_description_language_.SetNoArena(&CommonData::_default_source_description_language_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.source_description_language)
}
::std::string* CommonData::mutable_source_description_language() {
  set_has_source_description_language();
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.source_description_language)
  return source_description_language_.MutableNoArena(&CommonData::_default_source_description_language_.get());
}
::std::string* CommonData::release_source_description_language() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.source_description_language)
  clear_has_source_description_language();
  return source_description_language_.ReleaseNoArena(&CommonData::_default_source_description_language_.get());
}
void CommonData::set_allocated_source_description_language(::std::string* source_description_language) {
  if (source_description_language != NULL) {
    set_has_source_description_language();
  } else {
    clear_has_source_description_language();
  }
  source_description_language_.SetAllocatedNoArena(&CommonData::_default_source_description_language_.get(), source_description_language);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.source_description_language)
}

// optional string ui_language = 6 [default = "en_US"];
bool CommonData::has_ui_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CommonData::set_has_ui_language() {
  _has_bits_[0] |= 0x00000010u;
}
void CommonData::clear_has_ui_language() {
  _has_bits_[0] &= ~0x00000010u;
}
void CommonData::clear_ui_language() {
  ui_language_.ClearToDefaultNoArena(&CommonData::_default_ui_language_.get());
  clear_has_ui_language();
}
const ::std::string& CommonData::ui_language() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.ui_language)
  return ui_language_.GetNoArena();
}
void CommonData::set_ui_language(const ::std::string& value) {
  set_has_ui_language();
  ui_language_.SetNoArena(&CommonData::_default_ui_language_.get(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.ui_language)
}
#if LANG_CXX11
void CommonData::set_ui_language(::std::string&& value) {
  set_has_ui_language();
  ui_language_.SetNoArena(
    &CommonData::_default_ui_language_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.ui_language)
}
#endif
void CommonData::set_ui_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ui_language();
  ui_language_.SetNoArena(&CommonData::_default_ui_language_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.ui_language)
}
void CommonData::set_ui_language(const char* value, size_t size) {
  set_has_ui_language();
  ui_language_.SetNoArena(&CommonData::_default_ui_language_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.ui_language)
}
::std::string* CommonData::mutable_ui_language() {
  set_has_ui_language();
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.ui_language)
  return ui_language_.MutableNoArena(&CommonData::_default_ui_language_.get());
}
::std::string* CommonData::release_ui_language() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.ui_language)
  clear_has_ui_language();
  return ui_language_.ReleaseNoArena(&CommonData::_default_ui_language_.get());
}
void CommonData::set_allocated_ui_language(::std::string* ui_language) {
  if (ui_language != NULL) {
    set_has_ui_language();
  } else {
    clear_has_ui_language();
  }
  ui_language_.SetAllocatedNoArena(&CommonData::_default_ui_language_.get(), ui_language);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.ui_language)
}

// optional string user_email = 3;
bool CommonData::has_user_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommonData::set_has_user_email() {
  _has_bits_[0] |= 0x00000002u;
}
void CommonData::clear_has_user_email() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommonData::clear_user_email() {
  user_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_email();
}
const ::std::string& CommonData::user_email() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.user_email)
  return user_email_.GetNoArena();
}
void CommonData::set_user_email(const ::std::string& value) {
  set_has_user_email();
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.user_email)
}
#if LANG_CXX11
void CommonData::set_user_email(::std::string&& value) {
  set_has_user_email();
  user_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.user_email)
}
#endif
void CommonData::set_user_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_email();
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.user_email)
}
void CommonData::set_user_email(const char* value, size_t size) {
  set_has_user_email();
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.user_email)
}
::std::string* CommonData::mutable_user_email() {
  set_has_user_email();
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.user_email)
  return user_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommonData::release_user_email() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.user_email)
  clear_has_user_email();
  return user_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommonData::set_allocated_user_email(::std::string* user_email) {
  if (user_email != NULL) {
    set_has_user_email();
  } else {
    clear_has_user_email();
  }
  user_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_email);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.user_email)
}

// optional string unique_report_identifier = 7;
bool CommonData::has_unique_report_identifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CommonData::set_has_unique_report_identifier() {
  _has_bits_[0] |= 0x00000020u;
}
void CommonData::clear_has_unique_report_identifier() {
  _has_bits_[0] &= ~0x00000020u;
}
void CommonData::clear_unique_report_identifier() {
  unique_report_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unique_report_identifier();
}
const ::std::string& CommonData::unique_report_identifier() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.unique_report_identifier)
  return unique_report_identifier_.GetNoArena();
}
void CommonData::set_unique_report_identifier(const ::std::string& value) {
  set_has_unique_report_identifier();
  unique_report_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.unique_report_identifier)
}
#if LANG_CXX11
void CommonData::set_unique_report_identifier(::std::string&& value) {
  set_has_unique_report_identifier();
  unique_report_identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.unique_report_identifier)
}
#endif
void CommonData::set_unique_report_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unique_report_identifier();
  unique_report_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.unique_report_identifier)
}
void CommonData::set_unique_report_identifier(const char* value, size_t size) {
  set_has_unique_report_identifier();
  unique_report_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.unique_report_identifier)
}
::std::string* CommonData::mutable_unique_report_identifier() {
  set_has_unique_report_identifier();
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.unique_report_identifier)
  return unique_report_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommonData::release_unique_report_identifier() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.unique_report_identifier)
  clear_has_unique_report_identifier();
  return unique_report_identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommonData::set_allocated_unique_report_identifier(::std::string* unique_report_identifier) {
  if (unique_report_identifier != NULL) {
    set_has_unique_report_identifier();
  } else {
    clear_has_unique_report_identifier();
  }
  unique_report_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_report_identifier);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.unique_report_identifier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)
