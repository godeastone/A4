// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extension.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "extension.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace userfeedback {
class ExtensionPageRequestParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExtensionPageRequestParams> {
} _ExtensionPageRequestParams_default_instance_;
class PostedScreenshotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PostedScreenshot> {
} _PostedScreenshot_default_instance_;
class ExtensionErrorsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExtensionErrors> {
} _ExtensionErrors_default_instance_;
class ExtensionSubmitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExtensionSubmit> {
} _ExtensionSubmit_default_instance_;
class SuggestQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SuggestQuery> {
} _SuggestQuery_default_instance_;

namespace protobuf_extension_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ExtensionPageRequestParams_default_instance_.Shutdown();
  _PostedScreenshot_default_instance_.Shutdown();
  _ExtensionErrors_default_instance_.Shutdown();
  _ExtensionSubmit_default_instance_.Shutdown();
  _SuggestQuery_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::userfeedback::protobuf_common_2eproto::InitDefaults();
  ::userfeedback::protobuf_chrome_2eproto::InitDefaults();
  ::userfeedback::protobuf_dom_2eproto::InitDefaults();
  ::userfeedback::protobuf_math_2eproto::InitDefaults();
  ::userfeedback::protobuf_web_2eproto::InitDefaults();
  _ExtensionPageRequestParams_default_instance_.DefaultConstruct();
  _PostedScreenshot_default_instance_.DefaultConstruct();
  _ExtensionErrors_default_instance_.DefaultConstruct();
  _ExtensionSubmit_default_instance_.DefaultConstruct();
  _SuggestQuery_default_instance_.DefaultConstruct();
  _ExtensionPageRequestParams_default_instance_.get_mutable()->extension_details_ = const_cast< ::userfeedback::ExtensionDetails*>(
      ::userfeedback::ExtensionDetails::internal_default_instance());
  _PostedScreenshot_default_instance_.get_mutable()->dimensions_ = const_cast< ::userfeedback::Dimensions*>(
      ::userfeedback::Dimensions::internal_default_instance());
  _ExtensionSubmit_default_instance_.get_mutable()->common_data_ = const_cast< ::userfeedback::CommonData*>(
      ::userfeedback::CommonData::internal_default_instance());
  _ExtensionSubmit_default_instance_.get_mutable()->web_data_ = const_cast< ::userfeedback::WebData*>(
      ::userfeedback::WebData::internal_default_instance());
  _ExtensionSubmit_default_instance_.get_mutable()->screenshot_ = const_cast< ::userfeedback::PostedScreenshot*>(
      ::userfeedback::PostedScreenshot::internal_default_instance());
  _ExtensionSubmit_default_instance_.get_mutable()->chrome_data_ = const_cast< ::userfeedback::ChromeData*>(
      ::userfeedback::ChromeData::internal_default_instance());
  _SuggestQuery_default_instance_.get_mutable()->common_data_ = const_cast< ::userfeedback::CommonData*>(
      ::userfeedback::CommonData::internal_default_instance());
  _SuggestQuery_default_instance_.get_mutable()->web_data_ = const_cast< ::userfeedback::WebData*>(
      ::userfeedback::WebData::internal_default_instance());
  _SuggestQuery_default_instance_.get_mutable()->html_document_structure_ = const_cast< ::userfeedback::HtmlDocument*>(
      ::userfeedback::HtmlDocument::internal_default_instance());
  _SuggestQuery_default_instance_.get_mutable()->chrome_data_ = const_cast< ::userfeedback::ChromeData*>(
      ::userfeedback::ChromeData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::userfeedback::protobuf_common_2eproto::AddDescriptors();
  ::userfeedback::protobuf_chrome_2eproto::AddDescriptors();
  ::userfeedback::protobuf_dom_2eproto::AddDescriptors();
  ::userfeedback::protobuf_math_2eproto::AddDescriptors();
  ::userfeedback::protobuf_web_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_extension_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtensionPageRequestParams::kExtensionDetailsFieldNumber;
const int ExtensionPageRequestParams::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtensionPageRequestParams::ExtensionPageRequestParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_extension_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ExtensionPageRequestParams)
}
ExtensionPageRequestParams::ExtensionPageRequestParams(const ExtensionPageRequestParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_extension_details()) {
    extension_details_ = new ::userfeedback::ExtensionDetails(*from.extension_details_);
  } else {
    extension_details_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:userfeedback.ExtensionPageRequestParams)
}

void ExtensionPageRequestParams::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_details_ = NULL;
}

ExtensionPageRequestParams::~ExtensionPageRequestParams() {
  // @@protoc_insertion_point(destructor:userfeedback.ExtensionPageRequestParams)
  SharedDtor();
}

void ExtensionPageRequestParams::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete extension_details_;
  }
}

void ExtensionPageRequestParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExtensionPageRequestParams& ExtensionPageRequestParams::default_instance() {
  protobuf_extension_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExtensionPageRequestParams* ExtensionPageRequestParams::New(::google::protobuf::Arena* arena) const {
  ExtensionPageRequestParams* n = new ExtensionPageRequestParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtensionPageRequestParams::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ExtensionPageRequestParams)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_extension_details()) {
      GOOGLE_DCHECK(extension_details_ != NULL);
      extension_details_->::userfeedback::ExtensionDetails::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExtensionPageRequestParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ExtensionPageRequestParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .userfeedback.ExtensionDetails extension_details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ExtensionPageRequestParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ExtensionPageRequestParams)
  return false;
#undef DO_
}

void ExtensionPageRequestParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ExtensionPageRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .userfeedback.ExtensionDetails extension_details = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->extension_details_, output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ExtensionPageRequestParams)
}

size_t ExtensionPageRequestParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.ExtensionPageRequestParams)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_extension_details()) {
    // required .userfeedback.ExtensionDetails extension_details = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extension_details_);
  }

  return total_size;
}
size_t ExtensionPageRequestParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ExtensionPageRequestParams)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required .userfeedback.ExtensionDetails extension_details = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extension_details_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtensionPageRequestParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExtensionPageRequestParams*>(&from));
}

void ExtensionPageRequestParams::MergeFrom(const ExtensionPageRequestParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ExtensionPageRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_extension_details()->::userfeedback::ExtensionDetails::MergeFrom(from.extension_details());
    }
  }
}

void ExtensionPageRequestParams::CopyFrom(const ExtensionPageRequestParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ExtensionPageRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionPageRequestParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_extension_details()) {
    if (!this->extension_details_->IsInitialized()) return false;
  }
  return true;
}

void ExtensionPageRequestParams::Swap(ExtensionPageRequestParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtensionPageRequestParams::InternalSwap(ExtensionPageRequestParams* other) {
  url_.Swap(&other->url_);
  std::swap(extension_details_, other->extension_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ExtensionPageRequestParams::GetTypeName() const {
  return "userfeedback.ExtensionPageRequestParams";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtensionPageRequestParams

// required .userfeedback.ExtensionDetails extension_details = 1;
bool ExtensionPageRequestParams::has_extension_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExtensionPageRequestParams::set_has_extension_details() {
  _has_bits_[0] |= 0x00000002u;
}
void ExtensionPageRequestParams::clear_has_extension_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExtensionPageRequestParams::clear_extension_details() {
  if (extension_details_ != NULL) extension_details_->::userfeedback::ExtensionDetails::Clear();
  clear_has_extension_details();
}
const ::userfeedback::ExtensionDetails& ExtensionPageRequestParams::extension_details() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionPageRequestParams.extension_details)
  return extension_details_ != NULL ? *extension_details_
                         : *::userfeedback::ExtensionDetails::internal_default_instance();
}
::userfeedback::ExtensionDetails* ExtensionPageRequestParams::mutable_extension_details() {
  set_has_extension_details();
  if (extension_details_ == NULL) {
    extension_details_ = new ::userfeedback::ExtensionDetails;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionPageRequestParams.extension_details)
  return extension_details_;
}
::userfeedback::ExtensionDetails* ExtensionPageRequestParams::release_extension_details() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionPageRequestParams.extension_details)
  clear_has_extension_details();
  ::userfeedback::ExtensionDetails* temp = extension_details_;
  extension_details_ = NULL;
  return temp;
}
void ExtensionPageRequestParams::set_allocated_extension_details(::userfeedback::ExtensionDetails* extension_details) {
  delete extension_details_;
  extension_details_ = extension_details;
  if (extension_details) {
    set_has_extension_details();
  } else {
    clear_has_extension_details();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionPageRequestParams.extension_details)
}

// required string url = 2;
bool ExtensionPageRequestParams::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExtensionPageRequestParams::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ExtensionPageRequestParams::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExtensionPageRequestParams::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ExtensionPageRequestParams::url() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionPageRequestParams.url)
  return url_.GetNoArena();
}
void ExtensionPageRequestParams::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionPageRequestParams.url)
}
#if LANG_CXX11
void ExtensionPageRequestParams::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ExtensionPageRequestParams.url)
}
#endif
void ExtensionPageRequestParams::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionPageRequestParams.url)
}
void ExtensionPageRequestParams::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionPageRequestParams.url)
}
::std::string* ExtensionPageRequestParams::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionPageRequestParams.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExtensionPageRequestParams::release_url() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionPageRequestParams.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExtensionPageRequestParams::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionPageRequestParams.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostedScreenshot::kMimeTypeFieldNumber;
const int PostedScreenshot::kDimensionsFieldNumber;
const int PostedScreenshot::kBase64ContentFieldNumber;
const int PostedScreenshot::kBinaryContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostedScreenshot::PostedScreenshot()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_extension_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.PostedScreenshot)
}
PostedScreenshot::PostedScreenshot(const PostedScreenshot& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mime_type()) {
    mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
  base64_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base64_content()) {
    base64_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base64_content_);
  }
  binary_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_binary_content()) {
    binary_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_content_);
  }
  if (from.has_dimensions()) {
    dimensions_ = new ::userfeedback::Dimensions(*from.dimensions_);
  } else {
    dimensions_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:userfeedback.PostedScreenshot)
}

void PostedScreenshot::SharedCtor() {
  _cached_size_ = 0;
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base64_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dimensions_ = NULL;
}

PostedScreenshot::~PostedScreenshot() {
  // @@protoc_insertion_point(destructor:userfeedback.PostedScreenshot)
  SharedDtor();
}

void PostedScreenshot::SharedDtor() {
  mime_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base64_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete dimensions_;
  }
}

void PostedScreenshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PostedScreenshot& PostedScreenshot::default_instance() {
  protobuf_extension_2eproto::InitDefaults();
  return *internal_default_instance();
}

PostedScreenshot* PostedScreenshot::New(::google::protobuf::Arena* arena) const {
  PostedScreenshot* n = new PostedScreenshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostedScreenshot::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.PostedScreenshot)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_mime_type()) {
      GOOGLE_DCHECK(!mime_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mime_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_base64_content()) {
      GOOGLE_DCHECK(!base64_content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*base64_content_.UnsafeRawStringPointer())->clear();
    }
    if (has_binary_content()) {
      GOOGLE_DCHECK(!binary_content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*binary_content_.UnsafeRawStringPointer())->clear();
    }
    if (has_dimensions()) {
      GOOGLE_DCHECK(dimensions_ != NULL);
      dimensions_->::userfeedback::Dimensions::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PostedScreenshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.PostedScreenshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mime_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .userfeedback.Dimensions dimensions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string base64_content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base64_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes binary_content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.PostedScreenshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.PostedScreenshot)
  return false;
#undef DO_
}

void PostedScreenshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.PostedScreenshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string mime_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mime_type(), output);
  }

  // required .userfeedback.Dimensions dimensions = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->dimensions_, output);
  }

  // optional string base64_content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->base64_content(), output);
  }

  // optional bytes binary_content = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->binary_content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.PostedScreenshot)
}

size_t PostedScreenshot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.PostedScreenshot)
  size_t total_size = 0;

  if (has_mime_type()) {
    // required string mime_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mime_type());
  }

  if (has_dimensions()) {
    // required .userfeedback.Dimensions dimensions = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dimensions_);
  }

  return total_size;
}
size_t PostedScreenshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.PostedScreenshot)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string mime_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mime_type());

    // required .userfeedback.Dimensions dimensions = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dimensions_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string base64_content = 3;
    if (has_base64_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base64_content());
    }

    // optional bytes binary_content = 4;
    if (has_binary_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary_content());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostedScreenshot::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PostedScreenshot*>(&from));
}

void PostedScreenshot::MergeFrom(const PostedScreenshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.PostedScreenshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mime_type();
      mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_base64_content();
      base64_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base64_content_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_binary_content();
      binary_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_content_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_dimensions()->::userfeedback::Dimensions::MergeFrom(from.dimensions());
    }
  }
}

void PostedScreenshot::CopyFrom(const PostedScreenshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.PostedScreenshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostedScreenshot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  if (has_dimensions()) {
    if (!this->dimensions_->IsInitialized()) return false;
  }
  return true;
}

void PostedScreenshot::Swap(PostedScreenshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostedScreenshot::InternalSwap(PostedScreenshot* other) {
  mime_type_.Swap(&other->mime_type_);
  base64_content_.Swap(&other->base64_content_);
  binary_content_.Swap(&other->binary_content_);
  std::swap(dimensions_, other->dimensions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PostedScreenshot::GetTypeName() const {
  return "userfeedback.PostedScreenshot";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostedScreenshot

// required string mime_type = 1;
bool PostedScreenshot::has_mime_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PostedScreenshot::set_has_mime_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PostedScreenshot::clear_has_mime_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PostedScreenshot::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mime_type();
}
const ::std::string& PostedScreenshot::mime_type() const {
  // @@protoc_insertion_point(field_get:userfeedback.PostedScreenshot.mime_type)
  return mime_type_.GetNoArena();
}
void PostedScreenshot::set_mime_type(const ::std::string& value) {
  set_has_mime_type();
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.PostedScreenshot.mime_type)
}
#if LANG_CXX11
void PostedScreenshot::set_mime_type(::std::string&& value) {
  set_has_mime_type();
  mime_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.PostedScreenshot.mime_type)
}
#endif
void PostedScreenshot::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mime_type();
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.PostedScreenshot.mime_type)
}
void PostedScreenshot::set_mime_type(const char* value, size_t size) {
  set_has_mime_type();
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.PostedScreenshot.mime_type)
}
::std::string* PostedScreenshot::mutable_mime_type() {
  set_has_mime_type();
  // @@protoc_insertion_point(field_mutable:userfeedback.PostedScreenshot.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PostedScreenshot::release_mime_type() {
  // @@protoc_insertion_point(field_release:userfeedback.PostedScreenshot.mime_type)
  clear_has_mime_type();
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PostedScreenshot::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    set_has_mime_type();
  } else {
    clear_has_mime_type();
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.PostedScreenshot.mime_type)
}

// required .userfeedback.Dimensions dimensions = 2;
bool PostedScreenshot::has_dimensions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PostedScreenshot::set_has_dimensions() {
  _has_bits_[0] |= 0x00000008u;
}
void PostedScreenshot::clear_has_dimensions() {
  _has_bits_[0] &= ~0x00000008u;
}
void PostedScreenshot::clear_dimensions() {
  if (dimensions_ != NULL) dimensions_->::userfeedback::Dimensions::Clear();
  clear_has_dimensions();
}
const ::userfeedback::Dimensions& PostedScreenshot::dimensions() const {
  // @@protoc_insertion_point(field_get:userfeedback.PostedScreenshot.dimensions)
  return dimensions_ != NULL ? *dimensions_
                         : *::userfeedback::Dimensions::internal_default_instance();
}
::userfeedback::Dimensions* PostedScreenshot::mutable_dimensions() {
  set_has_dimensions();
  if (dimensions_ == NULL) {
    dimensions_ = new ::userfeedback::Dimensions;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.PostedScreenshot.dimensions)
  return dimensions_;
}
::userfeedback::Dimensions* PostedScreenshot::release_dimensions() {
  // @@protoc_insertion_point(field_release:userfeedback.PostedScreenshot.dimensions)
  clear_has_dimensions();
  ::userfeedback::Dimensions* temp = dimensions_;
  dimensions_ = NULL;
  return temp;
}
void PostedScreenshot::set_allocated_dimensions(::userfeedback::Dimensions* dimensions) {
  delete dimensions_;
  dimensions_ = dimensions;
  if (dimensions) {
    set_has_dimensions();
  } else {
    clear_has_dimensions();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.PostedScreenshot.dimensions)
}

// optional string base64_content = 3;
bool PostedScreenshot::has_base64_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PostedScreenshot::set_has_base64_content() {
  _has_bits_[0] |= 0x00000002u;
}
void PostedScreenshot::clear_has_base64_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void PostedScreenshot::clear_base64_content() {
  base64_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base64_content();
}
const ::std::string& PostedScreenshot::base64_content() const {
  // @@protoc_insertion_point(field_get:userfeedback.PostedScreenshot.base64_content)
  return base64_content_.GetNoArena();
}
void PostedScreenshot::set_base64_content(const ::std::string& value) {
  set_has_base64_content();
  base64_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.PostedScreenshot.base64_content)
}
#if LANG_CXX11
void PostedScreenshot::set_base64_content(::std::string&& value) {
  set_has_base64_content();
  base64_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.PostedScreenshot.base64_content)
}
#endif
void PostedScreenshot::set_base64_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_base64_content();
  base64_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.PostedScreenshot.base64_content)
}
void PostedScreenshot::set_base64_content(const char* value, size_t size) {
  set_has_base64_content();
  base64_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.PostedScreenshot.base64_content)
}
::std::string* PostedScreenshot::mutable_base64_content() {
  set_has_base64_content();
  // @@protoc_insertion_point(field_mutable:userfeedback.PostedScreenshot.base64_content)
  return base64_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PostedScreenshot::release_base64_content() {
  // @@protoc_insertion_point(field_release:userfeedback.PostedScreenshot.base64_content)
  clear_has_base64_content();
  return base64_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PostedScreenshot::set_allocated_base64_content(::std::string* base64_content) {
  if (base64_content != NULL) {
    set_has_base64_content();
  } else {
    clear_has_base64_content();
  }
  base64_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base64_content);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.PostedScreenshot.base64_content)
}

// optional bytes binary_content = 4;
bool PostedScreenshot::has_binary_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PostedScreenshot::set_has_binary_content() {
  _has_bits_[0] |= 0x00000004u;
}
void PostedScreenshot::clear_has_binary_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void PostedScreenshot::clear_binary_content() {
  binary_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_binary_content();
}
const ::std::string& PostedScreenshot::binary_content() const {
  // @@protoc_insertion_point(field_get:userfeedback.PostedScreenshot.binary_content)
  return binary_content_.GetNoArena();
}
void PostedScreenshot::set_binary_content(const ::std::string& value) {
  set_has_binary_content();
  binary_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.PostedScreenshot.binary_content)
}
#if LANG_CXX11
void PostedScreenshot::set_binary_content(::std::string&& value) {
  set_has_binary_content();
  binary_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.PostedScreenshot.binary_content)
}
#endif
void PostedScreenshot::set_binary_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_binary_content();
  binary_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.PostedScreenshot.binary_content)
}
void PostedScreenshot::set_binary_content(const void* value, size_t size) {
  set_has_binary_content();
  binary_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.PostedScreenshot.binary_content)
}
::std::string* PostedScreenshot::mutable_binary_content() {
  set_has_binary_content();
  // @@protoc_insertion_point(field_mutable:userfeedback.PostedScreenshot.binary_content)
  return binary_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PostedScreenshot::release_binary_content() {
  // @@protoc_insertion_point(field_release:userfeedback.PostedScreenshot.binary_content)
  clear_has_binary_content();
  return binary_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PostedScreenshot::set_allocated_binary_content(::std::string* binary_content) {
  if (binary_content != NULL) {
    set_has_binary_content();
  } else {
    clear_has_binary_content();
  }
  binary_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_content);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.PostedScreenshot.binary_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtensionErrors::kNumberOfAttemptsFieldNumber;
const int ExtensionErrors::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtensionErrors::ExtensionErrors()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_extension_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ExtensionErrors)
}
ExtensionErrors::ExtensionErrors(const ExtensionErrors& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errors_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errors()) {
    errors_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errors_);
  }
  number_of_attempts_ = from.number_of_attempts_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.ExtensionErrors)
}

void ExtensionErrors::SharedCtor() {
  _cached_size_ = 0;
  errors_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_of_attempts_ = 0;
}

ExtensionErrors::~ExtensionErrors() {
  // @@protoc_insertion_point(destructor:userfeedback.ExtensionErrors)
  SharedDtor();
}

void ExtensionErrors::SharedDtor() {
  errors_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExtensionErrors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExtensionErrors& ExtensionErrors::default_instance() {
  protobuf_extension_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExtensionErrors* ExtensionErrors::New(::google::protobuf::Arena* arena) const {
  ExtensionErrors* n = new ExtensionErrors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtensionErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ExtensionErrors)
  if (has_errors()) {
    GOOGLE_DCHECK(!errors_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*errors_.UnsafeRawStringPointer())->clear();
  }
  number_of_attempts_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExtensionErrors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ExtensionErrors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number_of_attempts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_number_of_attempts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ExtensionErrors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ExtensionErrors)
  return false;
#undef DO_
}

void ExtensionErrors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ExtensionErrors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 number_of_attempts = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number_of_attempts(), output);
  }

  // required string errors = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errors(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ExtensionErrors)
}

size_t ExtensionErrors::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.ExtensionErrors)
  size_t total_size = 0;

  if (has_errors()) {
    // required string errors = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errors());
  }

  if (has_number_of_attempts()) {
    // required int32 number_of_attempts = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_attempts());
  }

  return total_size;
}
size_t ExtensionErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ExtensionErrors)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string errors = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errors());

    // required int32 number_of_attempts = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_attempts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtensionErrors::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExtensionErrors*>(&from));
}

void ExtensionErrors::MergeFrom(const ExtensionErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ExtensionErrors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errors();
      errors_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errors_);
    }
    if (cached_has_bits & 0x00000002u) {
      number_of_attempts_ = from.number_of_attempts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExtensionErrors::CopyFrom(const ExtensionErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ExtensionErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionErrors::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ExtensionErrors::Swap(ExtensionErrors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtensionErrors::InternalSwap(ExtensionErrors* other) {
  errors_.Swap(&other->errors_);
  std::swap(number_of_attempts_, other->number_of_attempts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ExtensionErrors::GetTypeName() const {
  return "userfeedback.ExtensionErrors";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtensionErrors

// required int32 number_of_attempts = 1;
bool ExtensionErrors::has_number_of_attempts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExtensionErrors::set_has_number_of_attempts() {
  _has_bits_[0] |= 0x00000002u;
}
void ExtensionErrors::clear_has_number_of_attempts() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExtensionErrors::clear_number_of_attempts() {
  number_of_attempts_ = 0;
  clear_has_number_of_attempts();
}
::google::protobuf::int32 ExtensionErrors::number_of_attempts() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionErrors.number_of_attempts)
  return number_of_attempts_;
}
void ExtensionErrors::set_number_of_attempts(::google::protobuf::int32 value) {
  set_has_number_of_attempts();
  number_of_attempts_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionErrors.number_of_attempts)
}

// required string errors = 2;
bool ExtensionErrors::has_errors() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExtensionErrors::set_has_errors() {
  _has_bits_[0] |= 0x00000001u;
}
void ExtensionErrors::clear_has_errors() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExtensionErrors::clear_errors() {
  errors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errors();
}
const ::std::string& ExtensionErrors::errors() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionErrors.errors)
  return errors_.GetNoArena();
}
void ExtensionErrors::set_errors(const ::std::string& value) {
  set_has_errors();
  errors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionErrors.errors)
}
#if LANG_CXX11
void ExtensionErrors::set_errors(::std::string&& value) {
  set_has_errors();
  errors_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ExtensionErrors.errors)
}
#endif
void ExtensionErrors::set_errors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errors();
  errors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionErrors.errors)
}
void ExtensionErrors::set_errors(const char* value, size_t size) {
  set_has_errors();
  errors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionErrors.errors)
}
::std::string* ExtensionErrors::mutable_errors() {
  set_has_errors();
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionErrors.errors)
  return errors_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExtensionErrors::release_errors() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionErrors.errors)
  clear_has_errors();
  return errors_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExtensionErrors::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    set_has_errors();
  } else {
    clear_has_errors();
  }
  errors_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errors);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionErrors.errors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtensionSubmit::kCommonDataFieldNumber;
const int ExtensionSubmit::kWebDataFieldNumber;
const int ExtensionSubmit::kTypeIdFieldNumber;
const int ExtensionSubmit::kScreenshotFieldNumber;
const int ExtensionSubmit::kChromeDataFieldNumber;
const int ExtensionSubmit::kProductSpecificBinaryDataFieldNumber;
const int ExtensionSubmit::kCategoryTagFieldNumber;
const int ExtensionSubmit::kProductIdFieldNumber;
const int ExtensionSubmit::kBucketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtensionSubmit::ExtensionSubmit()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_extension_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ExtensionSubmit)
}
ExtensionSubmit::ExtensionSubmit(const ExtensionSubmit& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      product_specific_binary_data_(from.product_specific_binary_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category_tag()) {
    category_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_tag_);
  }
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bucket()) {
    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.has_common_data()) {
    common_data_ = new ::userfeedback::CommonData(*from.common_data_);
  } else {
    common_data_ = NULL;
  }
  if (from.has_web_data()) {
    web_data_ = new ::userfeedback::WebData(*from.web_data_);
  } else {
    web_data_ = NULL;
  }
  if (from.has_screenshot()) {
    screenshot_ = new ::userfeedback::PostedScreenshot(*from.screenshot_);
  } else {
    screenshot_ = NULL;
  }
  if (from.has_chrome_data()) {
    chrome_data_ = new ::userfeedback::ChromeData(*from.chrome_data_);
  } else {
    chrome_data_ = NULL;
  }
  ::memcpy(&type_id_, &from.type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&type_id_)) + sizeof(product_id_));
  // @@protoc_insertion_point(copy_constructor:userfeedback.ExtensionSubmit)
}

void ExtensionSubmit::SharedCtor() {
  _cached_size_ = 0;
  category_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&common_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_id_) -
      reinterpret_cast<char*>(&common_data_)) + sizeof(product_id_));
}

ExtensionSubmit::~ExtensionSubmit() {
  // @@protoc_insertion_point(destructor:userfeedback.ExtensionSubmit)
  SharedDtor();
}

void ExtensionSubmit::SharedDtor() {
  category_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete common_data_;
  }
  if (this != internal_default_instance()) {
    delete web_data_;
  }
  if (this != internal_default_instance()) {
    delete screenshot_;
  }
  if (this != internal_default_instance()) {
    delete chrome_data_;
  }
}

void ExtensionSubmit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExtensionSubmit& ExtensionSubmit::default_instance() {
  protobuf_extension_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExtensionSubmit* ExtensionSubmit::New(::google::protobuf::Arena* arena) const {
  ExtensionSubmit* n = new ExtensionSubmit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtensionSubmit::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ExtensionSubmit)
  product_specific_binary_data_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_category_tag()) {
      GOOGLE_DCHECK(!category_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*category_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_bucket()) {
      GOOGLE_DCHECK(!bucket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bucket_.UnsafeRawStringPointer())->clear();
    }
    if (has_common_data()) {
      GOOGLE_DCHECK(common_data_ != NULL);
      common_data_->::userfeedback::CommonData::Clear();
    }
    if (has_web_data()) {
      GOOGLE_DCHECK(web_data_ != NULL);
      web_data_->::userfeedback::WebData::Clear();
    }
    if (has_screenshot()) {
      GOOGLE_DCHECK(screenshot_ != NULL);
      screenshot_->::userfeedback::PostedScreenshot::Clear();
    }
    if (has_chrome_data()) {
      GOOGLE_DCHECK(chrome_data_ != NULL);
      chrome_data_->::userfeedback::ChromeData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&type_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&product_id_) -
        reinterpret_cast<char*>(&type_id_)) + sizeof(product_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExtensionSubmit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ExtensionSubmit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .userfeedback.CommonData common_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .userfeedback.WebData web_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_web_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.PostedScreenshot screenshot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screenshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.ChromeData chrome_data = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chrome_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_product_specific_binary_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string category_tag = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 product_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_product_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bucket = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ExtensionSubmit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ExtensionSubmit)
  return false;
#undef DO_
}

void ExtensionSubmit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ExtensionSubmit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .userfeedback.CommonData common_data = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->common_data_, output);
  }

  // required .userfeedback.WebData web_data = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->web_data_, output);
  }

  // required int32 type_id = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type_id(), output);
  }

  // optional .userfeedback.PostedScreenshot screenshot = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->screenshot_, output);
  }

  // optional .userfeedback.ChromeData chrome_data = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->chrome_data_, output);
  }

  // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->product_specific_binary_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->product_specific_binary_data(static_cast<int>(i)), output);
  }

  // optional string category_tag = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->category_tag(), output);
  }

  // optional int32 product_id = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->product_id(), output);
  }

  // optional string bucket = 18;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->bucket(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ExtensionSubmit)
}

size_t ExtensionSubmit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.ExtensionSubmit)
  size_t total_size = 0;

  if (has_common_data()) {
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_data_);
  }

  if (has_web_data()) {
    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->web_data_);
  }

  if (has_type_id()) {
    // required int32 type_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());
  }

  return total_size;
}
size_t ExtensionSubmit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ExtensionSubmit)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x0000004c) ^ 0x0000004c) == 0) {  // All required fields are present.
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_data_);

    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->web_data_);

    // required int32 type_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->product_specific_binary_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product_specific_binary_data(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string category_tag = 16;
    if (has_category_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_tag());
    }

    // optional string bucket = 18;
    if (has_bucket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bucket());
    }

  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional .userfeedback.PostedScreenshot screenshot = 4;
    if (has_screenshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->screenshot_);
    }

    // optional .userfeedback.ChromeData chrome_data = 14;
    if (has_chrome_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chrome_data_);
    }

  }
  // optional int32 product_id = 17;
  if (has_product_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->product_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtensionSubmit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExtensionSubmit*>(&from));
}

void ExtensionSubmit::MergeFrom(const ExtensionSubmit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ExtensionSubmit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  product_specific_binary_data_.MergeFrom(from.product_specific_binary_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_category_tag();
      category_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bucket();
      bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_common_data()->::userfeedback::CommonData::MergeFrom(from.common_data());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_web_data()->::userfeedback::WebData::MergeFrom(from.web_data());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_screenshot()->::userfeedback::PostedScreenshot::MergeFrom(from.screenshot());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_chrome_data()->::userfeedback::ChromeData::MergeFrom(from.chrome_data());
    }
    if (cached_has_bits & 0x00000040u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      product_id_ = from.product_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExtensionSubmit::CopyFrom(const ExtensionSubmit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ExtensionSubmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionSubmit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004c) != 0x0000004c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->product_specific_binary_data())) return false;
  if (has_web_data()) {
    if (!this->web_data_->IsInitialized()) return false;
  }
  if (has_screenshot()) {
    if (!this->screenshot_->IsInitialized()) return false;
  }
  return true;
}

void ExtensionSubmit::Swap(ExtensionSubmit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtensionSubmit::InternalSwap(ExtensionSubmit* other) {
  product_specific_binary_data_.InternalSwap(&other->product_specific_binary_data_);
  category_tag_.Swap(&other->category_tag_);
  bucket_.Swap(&other->bucket_);
  std::swap(common_data_, other->common_data_);
  std::swap(web_data_, other->web_data_);
  std::swap(screenshot_, other->screenshot_);
  std::swap(chrome_data_, other->chrome_data_);
  std::swap(type_id_, other->type_id_);
  std::swap(product_id_, other->product_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ExtensionSubmit::GetTypeName() const {
  return "userfeedback.ExtensionSubmit";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtensionSubmit

// required .userfeedback.CommonData common_data = 1;
bool ExtensionSubmit::has_common_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExtensionSubmit::set_has_common_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ExtensionSubmit::clear_has_common_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExtensionSubmit::clear_common_data() {
  if (common_data_ != NULL) common_data_->::userfeedback::CommonData::Clear();
  clear_has_common_data();
}
const ::userfeedback::CommonData& ExtensionSubmit::common_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.common_data)
  return common_data_ != NULL ? *common_data_
                         : *::userfeedback::CommonData::internal_default_instance();
}
::userfeedback::CommonData* ExtensionSubmit::mutable_common_data() {
  set_has_common_data();
  if (common_data_ == NULL) {
    common_data_ = new ::userfeedback::CommonData;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.common_data)
  return common_data_;
}
::userfeedback::CommonData* ExtensionSubmit::release_common_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.common_data)
  clear_has_common_data();
  ::userfeedback::CommonData* temp = common_data_;
  common_data_ = NULL;
  return temp;
}
void ExtensionSubmit::set_allocated_common_data(::userfeedback::CommonData* common_data) {
  delete common_data_;
  common_data_ = common_data;
  if (common_data) {
    set_has_common_data();
  } else {
    clear_has_common_data();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.common_data)
}

// required .userfeedback.WebData web_data = 2;
bool ExtensionSubmit::has_web_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ExtensionSubmit::set_has_web_data() {
  _has_bits_[0] |= 0x00000008u;
}
void ExtensionSubmit::clear_has_web_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void ExtensionSubmit::clear_web_data() {
  if (web_data_ != NULL) web_data_->::userfeedback::WebData::Clear();
  clear_has_web_data();
}
const ::userfeedback::WebData& ExtensionSubmit::web_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.web_data)
  return web_data_ != NULL ? *web_data_
                         : *::userfeedback::WebData::internal_default_instance();
}
::userfeedback::WebData* ExtensionSubmit::mutable_web_data() {
  set_has_web_data();
  if (web_data_ == NULL) {
    web_data_ = new ::userfeedback::WebData;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.web_data)
  return web_data_;
}
::userfeedback::WebData* ExtensionSubmit::release_web_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.web_data)
  clear_has_web_data();
  ::userfeedback::WebData* temp = web_data_;
  web_data_ = NULL;
  return temp;
}
void ExtensionSubmit::set_allocated_web_data(::userfeedback::WebData* web_data) {
  delete web_data_;
  web_data_ = web_data;
  if (web_data) {
    set_has_web_data();
  } else {
    clear_has_web_data();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.web_data)
}

// required int32 type_id = 3;
bool ExtensionSubmit::has_type_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ExtensionSubmit::set_has_type_id() {
  _has_bits_[0] |= 0x00000040u;
}
void ExtensionSubmit::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void ExtensionSubmit::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
::google::protobuf::int32 ExtensionSubmit::type_id() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.type_id)
  return type_id_;
}
void ExtensionSubmit::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionSubmit.type_id)
}

// optional .userfeedback.PostedScreenshot screenshot = 4;
bool ExtensionSubmit::has_screenshot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ExtensionSubmit::set_has_screenshot() {
  _has_bits_[0] |= 0x00000010u;
}
void ExtensionSubmit::clear_has_screenshot() {
  _has_bits_[0] &= ~0x00000010u;
}
void ExtensionSubmit::clear_screenshot() {
  if (screenshot_ != NULL) screenshot_->::userfeedback::PostedScreenshot::Clear();
  clear_has_screenshot();
}
const ::userfeedback::PostedScreenshot& ExtensionSubmit::screenshot() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.screenshot)
  return screenshot_ != NULL ? *screenshot_
                         : *::userfeedback::PostedScreenshot::internal_default_instance();
}
::userfeedback::PostedScreenshot* ExtensionSubmit::mutable_screenshot() {
  set_has_screenshot();
  if (screenshot_ == NULL) {
    screenshot_ = new ::userfeedback::PostedScreenshot;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.screenshot)
  return screenshot_;
}
::userfeedback::PostedScreenshot* ExtensionSubmit::release_screenshot() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.screenshot)
  clear_has_screenshot();
  ::userfeedback::PostedScreenshot* temp = screenshot_;
  screenshot_ = NULL;
  return temp;
}
void ExtensionSubmit::set_allocated_screenshot(::userfeedback::PostedScreenshot* screenshot) {
  delete screenshot_;
  screenshot_ = screenshot;
  if (screenshot) {
    set_has_screenshot();
  } else {
    clear_has_screenshot();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.screenshot)
}

// optional .userfeedback.ChromeData chrome_data = 14;
bool ExtensionSubmit::has_chrome_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ExtensionSubmit::set_has_chrome_data() {
  _has_bits_[0] |= 0x00000020u;
}
void ExtensionSubmit::clear_has_chrome_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void ExtensionSubmit::clear_chrome_data() {
  if (chrome_data_ != NULL) chrome_data_->::userfeedback::ChromeData::Clear();
  clear_has_chrome_data();
}
const ::userfeedback::ChromeData& ExtensionSubmit::chrome_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.chrome_data)
  return chrome_data_ != NULL ? *chrome_data_
                         : *::userfeedback::ChromeData::internal_default_instance();
}
::userfeedback::ChromeData* ExtensionSubmit::mutable_chrome_data() {
  set_has_chrome_data();
  if (chrome_data_ == NULL) {
    chrome_data_ = new ::userfeedback::ChromeData;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.chrome_data)
  return chrome_data_;
}
::userfeedback::ChromeData* ExtensionSubmit::release_chrome_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.chrome_data)
  clear_has_chrome_data();
  ::userfeedback::ChromeData* temp = chrome_data_;
  chrome_data_ = NULL;
  return temp;
}
void ExtensionSubmit::set_allocated_chrome_data(::userfeedback::ChromeData* chrome_data) {
  delete chrome_data_;
  chrome_data_ = chrome_data;
  if (chrome_data) {
    set_has_chrome_data();
  } else {
    clear_has_chrome_data();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.chrome_data)
}

// repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
int ExtensionSubmit::product_specific_binary_data_size() const {
  return product_specific_binary_data_.size();
}
void ExtensionSubmit::clear_product_specific_binary_data() {
  product_specific_binary_data_.Clear();
}
const ::userfeedback::ProductSpecificBinaryData& ExtensionSubmit::product_specific_binary_data(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.product_specific_binary_data)
  return product_specific_binary_data_.Get(index);
}
::userfeedback::ProductSpecificBinaryData* ExtensionSubmit::mutable_product_specific_binary_data(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.product_specific_binary_data)
  return product_specific_binary_data_.Mutable(index);
}
::userfeedback::ProductSpecificBinaryData* ExtensionSubmit::add_product_specific_binary_data() {
  // @@protoc_insertion_point(field_add:userfeedback.ExtensionSubmit.product_specific_binary_data)
  return product_specific_binary_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::userfeedback::ProductSpecificBinaryData >*
ExtensionSubmit::mutable_product_specific_binary_data() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.ExtensionSubmit.product_specific_binary_data)
  return &product_specific_binary_data_;
}
const ::google::protobuf::RepeatedPtrField< ::userfeedback::ProductSpecificBinaryData >&
ExtensionSubmit::product_specific_binary_data() const {
  // @@protoc_insertion_point(field_list:userfeedback.ExtensionSubmit.product_specific_binary_data)
  return product_specific_binary_data_;
}

// optional string category_tag = 16;
bool ExtensionSubmit::has_category_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExtensionSubmit::set_has_category_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void ExtensionSubmit::clear_has_category_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExtensionSubmit::clear_category_tag() {
  category_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category_tag();
}
const ::std::string& ExtensionSubmit::category_tag() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.category_tag)
  return category_tag_.GetNoArena();
}
void ExtensionSubmit::set_category_tag(const ::std::string& value) {
  set_has_category_tag();
  category_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionSubmit.category_tag)
}
#if LANG_CXX11
void ExtensionSubmit::set_category_tag(::std::string&& value) {
  set_has_category_tag();
  category_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ExtensionSubmit.category_tag)
}
#endif
void ExtensionSubmit::set_category_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category_tag();
  category_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionSubmit.category_tag)
}
void ExtensionSubmit::set_category_tag(const char* value, size_t size) {
  set_has_category_tag();
  category_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionSubmit.category_tag)
}
::std::string* ExtensionSubmit::mutable_category_tag() {
  set_has_category_tag();
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.category_tag)
  return category_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExtensionSubmit::release_category_tag() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.category_tag)
  clear_has_category_tag();
  return category_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExtensionSubmit::set_allocated_category_tag(::std::string* category_tag) {
  if (category_tag != NULL) {
    set_has_category_tag();
  } else {
    clear_has_category_tag();
  }
  category_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category_tag);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.category_tag)
}

// optional int32 product_id = 17;
bool ExtensionSubmit::has_product_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ExtensionSubmit::set_has_product_id() {
  _has_bits_[0] |= 0x00000080u;
}
void ExtensionSubmit::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void ExtensionSubmit::clear_product_id() {
  product_id_ = 0;
  clear_has_product_id();
}
::google::protobuf::int32 ExtensionSubmit::product_id() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.product_id)
  return product_id_;
}
void ExtensionSubmit::set_product_id(::google::protobuf::int32 value) {
  set_has_product_id();
  product_id_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionSubmit.product_id)
}

// optional string bucket = 18;
bool ExtensionSubmit::has_bucket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExtensionSubmit::set_has_bucket() {
  _has_bits_[0] |= 0x00000002u;
}
void ExtensionSubmit::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExtensionSubmit::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bucket();
}
const ::std::string& ExtensionSubmit::bucket() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.bucket)
  return bucket_.GetNoArena();
}
void ExtensionSubmit::set_bucket(const ::std::string& value) {
  set_has_bucket();
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionSubmit.bucket)
}
#if LANG_CXX11
void ExtensionSubmit::set_bucket(::std::string&& value) {
  set_has_bucket();
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ExtensionSubmit.bucket)
}
#endif
void ExtensionSubmit::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bucket();
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionSubmit.bucket)
}
void ExtensionSubmit::set_bucket(const char* value, size_t size) {
  set_has_bucket();
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionSubmit.bucket)
}
::std::string* ExtensionSubmit::mutable_bucket() {
  set_has_bucket();
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExtensionSubmit::release_bucket() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.bucket)
  clear_has_bucket();
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExtensionSubmit::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    set_has_bucket();
  } else {
    clear_has_bucket();
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.bucket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggestQuery::kCommonDataFieldNumber;
const int SuggestQuery::kWebDataFieldNumber;
const int SuggestQuery::kTypeIdFieldNumber;
const int SuggestQuery::kHtmlDocumentStructureFieldNumber;
const int SuggestQuery::kChromeDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggestQuery::SuggestQuery()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_extension_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.SuggestQuery)
}
SuggestQuery::SuggestQuery(const SuggestQuery& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common_data()) {
    common_data_ = new ::userfeedback::CommonData(*from.common_data_);
  } else {
    common_data_ = NULL;
  }
  if (from.has_web_data()) {
    web_data_ = new ::userfeedback::WebData(*from.web_data_);
  } else {
    web_data_ = NULL;
  }
  if (from.has_html_document_structure()) {
    html_document_structure_ = new ::userfeedback::HtmlDocument(*from.html_document_structure_);
  } else {
    html_document_structure_ = NULL;
  }
  if (from.has_chrome_data()) {
    chrome_data_ = new ::userfeedback::ChromeData(*from.chrome_data_);
  } else {
    chrome_data_ = NULL;
  }
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.SuggestQuery)
}

void SuggestQuery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&common_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_id_) -
      reinterpret_cast<char*>(&common_data_)) + sizeof(type_id_));
}

SuggestQuery::~SuggestQuery() {
  // @@protoc_insertion_point(destructor:userfeedback.SuggestQuery)
  SharedDtor();
}

void SuggestQuery::SharedDtor() {
  if (this != internal_default_instance()) {
    delete common_data_;
  }
  if (this != internal_default_instance()) {
    delete web_data_;
  }
  if (this != internal_default_instance()) {
    delete html_document_structure_;
  }
  if (this != internal_default_instance()) {
    delete chrome_data_;
  }
}

void SuggestQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SuggestQuery& SuggestQuery::default_instance() {
  protobuf_extension_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggestQuery* SuggestQuery::New(::google::protobuf::Arena* arena) const {
  SuggestQuery* n = new SuggestQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.SuggestQuery)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_common_data()) {
      GOOGLE_DCHECK(common_data_ != NULL);
      common_data_->::userfeedback::CommonData::Clear();
    }
    if (has_web_data()) {
      GOOGLE_DCHECK(web_data_ != NULL);
      web_data_->::userfeedback::WebData::Clear();
    }
    if (has_html_document_structure()) {
      GOOGLE_DCHECK(html_document_structure_ != NULL);
      html_document_structure_->::userfeedback::HtmlDocument::Clear();
    }
    if (has_chrome_data()) {
      GOOGLE_DCHECK(chrome_data_ != NULL);
      chrome_data_->::userfeedback::ChromeData::Clear();
    }
  }
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggestQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:userfeedback.SuggestQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .userfeedback.CommonData common_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .userfeedback.WebData web_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_web_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.HtmlDocument html_document_structure = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_html_document_structure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.ChromeData chrome_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chrome_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.SuggestQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.SuggestQuery)
  return false;
#undef DO_
}

void SuggestQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.SuggestQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .userfeedback.CommonData common_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->common_data_, output);
  }

  // required .userfeedback.WebData web_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->web_data_, output);
  }

  // required int32 type_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type_id(), output);
  }

  // optional .userfeedback.HtmlDocument html_document_structure = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->html_document_structure_, output);
  }

  // optional .userfeedback.ChromeData chrome_data = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->chrome_data_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.SuggestQuery)
}

size_t SuggestQuery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.SuggestQuery)
  size_t total_size = 0;

  if (has_common_data()) {
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_data_);
  }

  if (has_web_data()) {
    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->web_data_);
  }

  if (has_type_id()) {
    // required int32 type_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());
  }

  return total_size;
}
size_t SuggestQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.SuggestQuery)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_data_);

    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->web_data_);

    // required int32 type_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional .userfeedback.HtmlDocument html_document_structure = 4;
    if (has_html_document_structure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->html_document_structure_);
    }

    // optional .userfeedback.ChromeData chrome_data = 5;
    if (has_chrome_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chrome_data_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggestQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SuggestQuery*>(&from));
}

void SuggestQuery::MergeFrom(const SuggestQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.SuggestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_common_data()->::userfeedback::CommonData::MergeFrom(from.common_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_web_data()->::userfeedback::WebData::MergeFrom(from.web_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_html_document_structure()->::userfeedback::HtmlDocument::MergeFrom(from.html_document_structure());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_chrome_data()->::userfeedback::ChromeData::MergeFrom(from.chrome_data());
    }
    if (cached_has_bits & 0x00000010u) {
      type_id_ = from.type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggestQuery::CopyFrom(const SuggestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.SuggestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  if (has_web_data()) {
    if (!this->web_data_->IsInitialized()) return false;
  }
  if (has_html_document_structure()) {
    if (!this->html_document_structure_->IsInitialized()) return false;
  }
  return true;
}

void SuggestQuery::Swap(SuggestQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggestQuery::InternalSwap(SuggestQuery* other) {
  std::swap(common_data_, other->common_data_);
  std::swap(web_data_, other->web_data_);
  std::swap(html_document_structure_, other->html_document_structure_);
  std::swap(chrome_data_, other->chrome_data_);
  std::swap(type_id_, other->type_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SuggestQuery::GetTypeName() const {
  return "userfeedback.SuggestQuery";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggestQuery

// required .userfeedback.CommonData common_data = 1;
bool SuggestQuery::has_common_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggestQuery::set_has_common_data() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggestQuery::clear_has_common_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggestQuery::clear_common_data() {
  if (common_data_ != NULL) common_data_->::userfeedback::CommonData::Clear();
  clear_has_common_data();
}
const ::userfeedback::CommonData& SuggestQuery::common_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.SuggestQuery.common_data)
  return common_data_ != NULL ? *common_data_
                         : *::userfeedback::CommonData::internal_default_instance();
}
::userfeedback::CommonData* SuggestQuery::mutable_common_data() {
  set_has_common_data();
  if (common_data_ == NULL) {
    common_data_ = new ::userfeedback::CommonData;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.SuggestQuery.common_data)
  return common_data_;
}
::userfeedback::CommonData* SuggestQuery::release_common_data() {
  // @@protoc_insertion_point(field_release:userfeedback.SuggestQuery.common_data)
  clear_has_common_data();
  ::userfeedback::CommonData* temp = common_data_;
  common_data_ = NULL;
  return temp;
}
void SuggestQuery::set_allocated_common_data(::userfeedback::CommonData* common_data) {
  delete common_data_;
  common_data_ = common_data;
  if (common_data) {
    set_has_common_data();
  } else {
    clear_has_common_data();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.SuggestQuery.common_data)
}

// required .userfeedback.WebData web_data = 2;
bool SuggestQuery::has_web_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggestQuery::set_has_web_data() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggestQuery::clear_has_web_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggestQuery::clear_web_data() {
  if (web_data_ != NULL) web_data_->::userfeedback::WebData::Clear();
  clear_has_web_data();
}
const ::userfeedback::WebData& SuggestQuery::web_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.SuggestQuery.web_data)
  return web_data_ != NULL ? *web_data_
                         : *::userfeedback::WebData::internal_default_instance();
}
::userfeedback::WebData* SuggestQuery::mutable_web_data() {
  set_has_web_data();
  if (web_data_ == NULL) {
    web_data_ = new ::userfeedback::WebData;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.SuggestQuery.web_data)
  return web_data_;
}
::userfeedback::WebData* SuggestQuery::release_web_data() {
  // @@protoc_insertion_point(field_release:userfeedback.SuggestQuery.web_data)
  clear_has_web_data();
  ::userfeedback::WebData* temp = web_data_;
  web_data_ = NULL;
  return temp;
}
void SuggestQuery::set_allocated_web_data(::userfeedback::WebData* web_data) {
  delete web_data_;
  web_data_ = web_data;
  if (web_data) {
    set_has_web_data();
  } else {
    clear_has_web_data();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.SuggestQuery.web_data)
}

// required int32 type_id = 3;
bool SuggestQuery::has_type_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SuggestQuery::set_has_type_id() {
  _has_bits_[0] |= 0x00000010u;
}
void SuggestQuery::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void SuggestQuery::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
::google::protobuf::int32 SuggestQuery::type_id() const {
  // @@protoc_insertion_point(field_get:userfeedback.SuggestQuery.type_id)
  return type_id_;
}
void SuggestQuery::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.SuggestQuery.type_id)
}

// optional .userfeedback.HtmlDocument html_document_structure = 4;
bool SuggestQuery::has_html_document_structure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggestQuery::set_has_html_document_structure() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggestQuery::clear_has_html_document_structure() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggestQuery::clear_html_document_structure() {
  if (html_document_structure_ != NULL) html_document_structure_->::userfeedback::HtmlDocument::Clear();
  clear_has_html_document_structure();
}
const ::userfeedback::HtmlDocument& SuggestQuery::html_document_structure() const {
  // @@protoc_insertion_point(field_get:userfeedback.SuggestQuery.html_document_structure)
  return html_document_structure_ != NULL ? *html_document_structure_
                         : *::userfeedback::HtmlDocument::internal_default_instance();
}
::userfeedback::HtmlDocument* SuggestQuery::mutable_html_document_structure() {
  set_has_html_document_structure();
  if (html_document_structure_ == NULL) {
    html_document_structure_ = new ::userfeedback::HtmlDocument;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.SuggestQuery.html_document_structure)
  return html_document_structure_;
}
::userfeedback::HtmlDocument* SuggestQuery::release_html_document_structure() {
  // @@protoc_insertion_point(field_release:userfeedback.SuggestQuery.html_document_structure)
  clear_has_html_document_structure();
  ::userfeedback::HtmlDocument* temp = html_document_structure_;
  html_document_structure_ = NULL;
  return temp;
}
void SuggestQuery::set_allocated_html_document_structure(::userfeedback::HtmlDocument* html_document_structure) {
  delete html_document_structure_;
  html_document_structure_ = html_document_structure;
  if (html_document_structure) {
    set_has_html_document_structure();
  } else {
    clear_has_html_document_structure();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.SuggestQuery.html_document_structure)
}

// optional .userfeedback.ChromeData chrome_data = 5;
bool SuggestQuery::has_chrome_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SuggestQuery::set_has_chrome_data() {
  _has_bits_[0] |= 0x00000008u;
}
void SuggestQuery::clear_has_chrome_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void SuggestQuery::clear_chrome_data() {
  if (chrome_data_ != NULL) chrome_data_->::userfeedback::ChromeData::Clear();
  clear_has_chrome_data();
}
const ::userfeedback::ChromeData& SuggestQuery::chrome_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.SuggestQuery.chrome_data)
  return chrome_data_ != NULL ? *chrome_data_
                         : *::userfeedback::ChromeData::internal_default_instance();
}
::userfeedback::ChromeData* SuggestQuery::mutable_chrome_data() {
  set_has_chrome_data();
  if (chrome_data_ == NULL) {
    chrome_data_ = new ::userfeedback::ChromeData;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.SuggestQuery.chrome_data)
  return chrome_data_;
}
::userfeedback::ChromeData* SuggestQuery::release_chrome_data() {
  // @@protoc_insertion_point(field_release:userfeedback.SuggestQuery.chrome_data)
  clear_has_chrome_data();
  ::userfeedback::ChromeData* temp = chrome_data_;
  chrome_data_ = NULL;
  return temp;
}
void SuggestQuery::set_allocated_chrome_data(::userfeedback::ChromeData* chrome_data) {
  delete chrome_data_;
  chrome_data_ = chrome_data;
  if (chrome_data) {
    set_has_chrome_data();
  } else {
    clear_has_chrome_data();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.SuggestQuery.chrome_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)
