// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotations.proto

#ifndef PROTOBUF_annotations_2eproto__INCLUDED
#define PROTOBUF_annotations_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "math.pb.h"
#include "dom.pb.h"
// @@protoc_insertion_point(includes)
namespace userfeedback {
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
}  // namespace userfeedback

namespace userfeedback {

namespace protobuf_annotations_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_annotations_2eproto

// ===================================================================

class Annotation : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.Annotation) */ {
 public:
  Annotation();
  virtual ~Annotation();

  Annotation(const Annotation& from);

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Annotation& default_instance();

  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Annotation* other);

  // implements Message ----------------------------------------------

  inline Annotation* New() const PROTOBUF_FINAL { return New(NULL); }

  Annotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Annotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string snippet = 2;
  bool has_snippet() const;
  void clear_snippet();
  static const int kSnippetFieldNumber = 2;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  #if LANG_CXX11
  void set_snippet(::std::string&& value);
  #endif
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);

  // required .userfeedback.Rectangle rectangle = 1;
  bool has_rectangle() const;
  void clear_rectangle();
  static const int kRectangleFieldNumber = 1;
  const ::userfeedback::Rectangle& rectangle() const;
  ::userfeedback::Rectangle* mutable_rectangle();
  ::userfeedback::Rectangle* release_rectangle();
  void set_allocated_rectangle(::userfeedback::Rectangle* rectangle);

  // optional .userfeedback.HtmlPath annotatedElementPath = 3;
  bool has_annotatedelementpath() const;
  void clear_annotatedelementpath();
  static const int kAnnotatedElementPathFieldNumber = 3;
  const ::userfeedback::HtmlPath& annotatedelementpath() const;
  ::userfeedback::HtmlPath* mutable_annotatedelementpath();
  ::userfeedback::HtmlPath* release_annotatedelementpath();
  void set_allocated_annotatedelementpath(::userfeedback::HtmlPath* annotatedelementpath);

  // @@protoc_insertion_point(class_scope:userfeedback.Annotation)
 private:
  void set_has_rectangle();
  void clear_has_rectangle();
  void set_has_snippet();
  void clear_has_snippet();
  void set_has_annotatedelementpath();
  void clear_has_annotatedelementpath();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  ::userfeedback::Rectangle* rectangle_;
  ::userfeedback::HtmlPath* annotatedelementpath_;
  friend struct protobuf_annotations_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Annotation

// required .userfeedback.Rectangle rectangle = 1;
inline bool Annotation::has_rectangle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotation::set_has_rectangle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotation::clear_has_rectangle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotation::clear_rectangle() {
  if (rectangle_ != NULL) rectangle_->::userfeedback::Rectangle::Clear();
  clear_has_rectangle();
}
inline const ::userfeedback::Rectangle& Annotation::rectangle() const {
  // @@protoc_insertion_point(field_get:userfeedback.Annotation.rectangle)
  return rectangle_ != NULL ? *rectangle_
                         : *::userfeedback::Rectangle::internal_default_instance();
}
inline ::userfeedback::Rectangle* Annotation::mutable_rectangle() {
  set_has_rectangle();
  if (rectangle_ == NULL) {
    rectangle_ = new ::userfeedback::Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.Annotation.rectangle)
  return rectangle_;
}
inline ::userfeedback::Rectangle* Annotation::release_rectangle() {
  // @@protoc_insertion_point(field_release:userfeedback.Annotation.rectangle)
  clear_has_rectangle();
  ::userfeedback::Rectangle* temp = rectangle_;
  rectangle_ = NULL;
  return temp;
}
inline void Annotation::set_allocated_rectangle(::userfeedback::Rectangle* rectangle) {
  delete rectangle_;
  rectangle_ = rectangle;
  if (rectangle) {
    set_has_rectangle();
  } else {
    clear_has_rectangle();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Annotation.rectangle)
}

// optional string snippet = 2;
inline bool Annotation::has_snippet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotation::set_has_snippet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotation::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotation::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
inline const ::std::string& Annotation::snippet() const {
  // @@protoc_insertion_point(field_get:userfeedback.Annotation.snippet)
  return snippet_.GetNoArena();
}
inline void Annotation::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Annotation.snippet)
}
#if LANG_CXX11
inline void Annotation::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Annotation.snippet)
}
#endif
inline void Annotation::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Annotation.snippet)
}
inline void Annotation::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Annotation.snippet)
}
inline ::std::string* Annotation::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:userfeedback.Annotation.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Annotation::release_snippet() {
  // @@protoc_insertion_point(field_release:userfeedback.Annotation.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Annotation::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Annotation.snippet)
}

// optional .userfeedback.HtmlPath annotatedElementPath = 3;
inline bool Annotation::has_annotatedelementpath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Annotation::set_has_annotatedelementpath() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Annotation::clear_has_annotatedelementpath() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Annotation::clear_annotatedelementpath() {
  if (annotatedelementpath_ != NULL) annotatedelementpath_->::userfeedback::HtmlPath::Clear();
  clear_has_annotatedelementpath();
}
inline const ::userfeedback::HtmlPath& Annotation::annotatedelementpath() const {
  // @@protoc_insertion_point(field_get:userfeedback.Annotation.annotatedElementPath)
  return annotatedelementpath_ != NULL ? *annotatedelementpath_
                         : *::userfeedback::HtmlPath::internal_default_instance();
}
inline ::userfeedback::HtmlPath* Annotation::mutable_annotatedelementpath() {
  set_has_annotatedelementpath();
  if (annotatedelementpath_ == NULL) {
    annotatedelementpath_ = new ::userfeedback::HtmlPath;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.Annotation.annotatedElementPath)
  return annotatedelementpath_;
}
inline ::userfeedback::HtmlPath* Annotation::release_annotatedelementpath() {
  // @@protoc_insertion_point(field_release:userfeedback.Annotation.annotatedElementPath)
  clear_has_annotatedelementpath();
  ::userfeedback::HtmlPath* temp = annotatedelementpath_;
  annotatedelementpath_ = NULL;
  return temp;
}
inline void Annotation::set_allocated_annotatedelementpath(::userfeedback::HtmlPath* annotatedelementpath) {
  delete annotatedelementpath_;
  annotatedelementpath_ = annotatedelementpath;
  if (annotatedelementpath) {
    set_has_annotatedelementpath();
  } else {
    clear_has_annotatedelementpath();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Annotation.annotatedElementPath)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_annotations_2eproto__INCLUDED
