// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dom.proto

#ifndef PROTOBUF_dom_2eproto__INCLUDED
#define PROTOBUF_dom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace userfeedback {
class HtmlDocument;
class HtmlDocumentDefaultTypeInternal;
extern HtmlDocumentDefaultTypeInternal _HtmlDocument_default_instance_;
class HtmlElement;
class HtmlElementDefaultTypeInternal;
extern HtmlElementDefaultTypeInternal _HtmlElement_default_instance_;
class HtmlPath;
class HtmlPathDefaultTypeInternal;
extern HtmlPathDefaultTypeInternal _HtmlPath_default_instance_;
class Navigator;
class NavigatorDefaultTypeInternal;
extern NavigatorDefaultTypeInternal _Navigator_default_instance_;
}  // namespace userfeedback

namespace userfeedback {

namespace protobuf_dom_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dom_2eproto

// ===================================================================

class HtmlDocument : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.HtmlDocument) */ {
 public:
  HtmlDocument();
  virtual ~HtmlDocument();

  HtmlDocument(const HtmlDocument& from);

  inline HtmlDocument& operator=(const HtmlDocument& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HtmlDocument& default_instance();

  static inline const HtmlDocument* internal_default_instance() {
    return reinterpret_cast<const HtmlDocument*>(
               &_HtmlDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(HtmlDocument* other);

  // implements Message ----------------------------------------------

  inline HtmlDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  HtmlDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HtmlDocument& from);
  void MergeFrom(const HtmlDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HtmlDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional .userfeedback.HtmlElement document_element = 3;
  bool has_document_element() const;
  void clear_document_element();
  static const int kDocumentElementFieldNumber = 3;
  const ::userfeedback::HtmlElement& document_element() const;
  ::userfeedback::HtmlElement* mutable_document_element();
  ::userfeedback::HtmlElement* release_document_element();
  void set_allocated_document_element(::userfeedback::HtmlElement* document_element);

  // @@protoc_insertion_point(class_scope:userfeedback.HtmlDocument)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_title();
  void clear_has_title();
  void set_has_document_element();
  void clear_has_document_element();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::userfeedback::HtmlElement* document_element_;
  friend struct protobuf_dom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HtmlElement : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.HtmlElement) */ {
 public:
  HtmlElement();
  virtual ~HtmlElement();

  HtmlElement(const HtmlElement& from);

  inline HtmlElement& operator=(const HtmlElement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HtmlElement& default_instance();

  static inline const HtmlElement* internal_default_instance() {
    return reinterpret_cast<const HtmlElement*>(
               &_HtmlElement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(HtmlElement* other);

  // implements Message ----------------------------------------------

  inline HtmlElement* New() const PROTOBUF_FINAL { return New(NULL); }

  HtmlElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HtmlElement& from);
  void MergeFrom(const HtmlElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HtmlElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .userfeedback.HtmlElement child_element = 4;
  int child_element_size() const;
  void clear_child_element();
  static const int kChildElementFieldNumber = 4;
  const ::userfeedback::HtmlElement& child_element(int index) const;
  ::userfeedback::HtmlElement* mutable_child_element(int index);
  ::userfeedback::HtmlElement* add_child_element();
  ::google::protobuf::RepeatedPtrField< ::userfeedback::HtmlElement >*
      mutable_child_element();
  const ::google::protobuf::RepeatedPtrField< ::userfeedback::HtmlElement >&
      child_element() const;

  // required string tag_name = 1;
  bool has_tag_name() const;
  void clear_tag_name();
  static const int kTagNameFieldNumber = 1;
  const ::std::string& tag_name() const;
  void set_tag_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tag_name(::std::string&& value);
  #endif
  void set_tag_name(const char* value);
  void set_tag_name(const char* value, size_t size);
  ::std::string* mutable_tag_name();
  ::std::string* release_tag_name();
  void set_allocated_tag_name(::std::string* tag_name);

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string class_name = 3;
  bool has_class_name() const;
  void clear_class_name();
  static const int kClassNameFieldNumber = 3;
  const ::std::string& class_name() const;
  void set_class_name(const ::std::string& value);
  #if LANG_CXX11
  void set_class_name(::std::string&& value);
  #endif
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  ::std::string* mutable_class_name();
  ::std::string* release_class_name();
  void set_allocated_class_name(::std::string* class_name);

  // optional .userfeedback.HtmlDocument frame_content_document = 5;
  bool has_frame_content_document() const;
  void clear_frame_content_document();
  static const int kFrameContentDocumentFieldNumber = 5;
  const ::userfeedback::HtmlDocument& frame_content_document() const;
  ::userfeedback::HtmlDocument* mutable_frame_content_document();
  ::userfeedback::HtmlDocument* release_frame_content_document();
  void set_allocated_frame_content_document(::userfeedback::HtmlDocument* frame_content_document);

  // @@protoc_insertion_point(class_scope:userfeedback.HtmlElement)
 private:
  void set_has_tag_name();
  void clear_has_tag_name();
  void set_has_id();
  void clear_has_id();
  void set_has_class_name();
  void clear_has_class_name();
  void set_has_frame_content_document();
  void clear_has_frame_content_document();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::userfeedback::HtmlElement > child_element_;
  ::google::protobuf::internal::ArenaStringPtr tag_name_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr class_name_;
  ::userfeedback::HtmlDocument* frame_content_document_;
  friend struct protobuf_dom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Navigator : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.Navigator) */ {
 public:
  Navigator();
  virtual ~Navigator();

  Navigator(const Navigator& from);

  inline Navigator& operator=(const Navigator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Navigator& default_instance();

  static inline const Navigator* internal_default_instance() {
    return reinterpret_cast<const Navigator*>(
               &_Navigator_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Navigator* other);

  // implements Message ----------------------------------------------

  inline Navigator* New() const PROTOBUF_FINAL { return New(NULL); }

  Navigator* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Navigator& from);
  void MergeFrom(const Navigator& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Navigator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string plugin_name = 14;
  int plugin_name_size() const;
  void clear_plugin_name();
  static const int kPluginNameFieldNumber = 14;
  const ::std::string& plugin_name(int index) const;
  ::std::string* mutable_plugin_name(int index);
  void set_plugin_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_plugin_name(int index, ::std::string&& value);
  #endif
  void set_plugin_name(int index, const char* value);
  void set_plugin_name(int index, const char* value, size_t size);
  ::std::string* add_plugin_name();
  void add_plugin_name(const ::std::string& value);
  #if LANG_CXX11
  void add_plugin_name(::std::string&& value);
  #endif
  void add_plugin_name(const char* value);
  void add_plugin_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& plugin_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_plugin_name();

  // optional string app_code_name = 1;
  bool has_app_code_name() const;
  void clear_app_code_name();
  static const int kAppCodeNameFieldNumber = 1;
  const ::std::string& app_code_name() const;
  void set_app_code_name(const ::std::string& value);
  #if LANG_CXX11
  void set_app_code_name(::std::string&& value);
  #endif
  void set_app_code_name(const char* value);
  void set_app_code_name(const char* value, size_t size);
  ::std::string* mutable_app_code_name();
  ::std::string* release_app_code_name();
  void set_allocated_app_code_name(::std::string* app_code_name);

  // optional string app_name = 2;
  bool has_app_name() const;
  void clear_app_name();
  static const int kAppNameFieldNumber = 2;
  const ::std::string& app_name() const;
  void set_app_name(const ::std::string& value);
  #if LANG_CXX11
  void set_app_name(::std::string&& value);
  #endif
  void set_app_name(const char* value);
  void set_app_name(const char* value, size_t size);
  ::std::string* mutable_app_name();
  ::std::string* release_app_name();
  void set_allocated_app_name(::std::string* app_name);

  // optional string app_version = 3;
  bool has_app_version() const;
  void clear_app_version();
  static const int kAppVersionFieldNumber = 3;
  const ::std::string& app_version() const;
  void set_app_version(const ::std::string& value);
  #if LANG_CXX11
  void set_app_version(::std::string&& value);
  #endif
  void set_app_version(const char* value);
  void set_app_version(const char* value, size_t size);
  ::std::string* mutable_app_version();
  ::std::string* release_app_version();
  void set_allocated_app_version(::std::string* app_version);

  // optional string app_minor_version = 4;
  bool has_app_minor_version() const;
  void clear_app_minor_version();
  static const int kAppMinorVersionFieldNumber = 4;
  const ::std::string& app_minor_version() const;
  void set_app_minor_version(const ::std::string& value);
  #if LANG_CXX11
  void set_app_minor_version(::std::string&& value);
  #endif
  void set_app_minor_version(const char* value);
  void set_app_minor_version(const char* value, size_t size);
  ::std::string* mutable_app_minor_version();
  ::std::string* release_app_minor_version();
  void set_allocated_app_minor_version(::std::string* app_minor_version);

  // optional string cpu_class = 6;
  bool has_cpu_class() const;
  void clear_cpu_class();
  static const int kCpuClassFieldNumber = 6;
  const ::std::string& cpu_class() const;
  void set_cpu_class(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu_class(::std::string&& value);
  #endif
  void set_cpu_class(const char* value);
  void set_cpu_class(const char* value, size_t size);
  ::std::string* mutable_cpu_class();
  ::std::string* release_cpu_class();
  void set_allocated_cpu_class(::std::string* cpu_class);

  // optional string platform = 8;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 8;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // optional string browser_language = 9;
  bool has_browser_language() const;
  void clear_browser_language();
  static const int kBrowserLanguageFieldNumber = 9;
  const ::std::string& browser_language() const;
  void set_browser_language(const ::std::string& value);
  #if LANG_CXX11
  void set_browser_language(::std::string&& value);
  #endif
  void set_browser_language(const char* value);
  void set_browser_language(const char* value, size_t size);
  ::std::string* mutable_browser_language();
  ::std::string* release_browser_language();
  void set_allocated_browser_language(::std::string* browser_language);

  // optional string system_language = 10;
  bool has_system_language() const;
  void clear_system_language();
  static const int kSystemLanguageFieldNumber = 10;
  const ::std::string& system_language() const;
  void set_system_language(const ::std::string& value);
  #if LANG_CXX11
  void set_system_language(::std::string&& value);
  #endif
  void set_system_language(const char* value);
  void set_system_language(const char* value, size_t size);
  ::std::string* mutable_system_language();
  ::std::string* release_system_language();
  void set_allocated_system_language(::std::string* system_language);

  // optional string user_agent = 11;
  bool has_user_agent() const;
  void clear_user_agent();
  static const int kUserAgentFieldNumber = 11;
  const ::std::string& user_agent() const;
  void set_user_agent(const ::std::string& value);
  #if LANG_CXX11
  void set_user_agent(::std::string&& value);
  #endif
  void set_user_agent(const char* value);
  void set_user_agent(const char* value, size_t size);
  ::std::string* mutable_user_agent();
  ::std::string* release_user_agent();
  void set_allocated_user_agent(::std::string* user_agent);

  // optional bool cookie_enabled = 5;
  bool has_cookie_enabled() const;
  void clear_cookie_enabled();
  static const int kCookieEnabledFieldNumber = 5;
  bool cookie_enabled() const;
  void set_cookie_enabled(bool value);

  // optional bool on_line = 7;
  bool has_on_line() const;
  void clear_on_line();
  static const int kOnLineFieldNumber = 7;
  bool on_line() const;
  void set_on_line(bool value);

  // optional bool java_enabled = 12;
  bool has_java_enabled() const;
  void clear_java_enabled();
  static const int kJavaEnabledFieldNumber = 12;
  bool java_enabled() const;
  void set_java_enabled(bool value);

  // optional bool taint_enabled = 13;
  bool has_taint_enabled() const;
  void clear_taint_enabled();
  static const int kTaintEnabledFieldNumber = 13;
  bool taint_enabled() const;
  void set_taint_enabled(bool value);

  // @@protoc_insertion_point(class_scope:userfeedback.Navigator)
 private:
  void set_has_app_code_name();
  void clear_has_app_code_name();
  void set_has_app_name();
  void clear_has_app_name();
  void set_has_app_version();
  void clear_has_app_version();
  void set_has_app_minor_version();
  void clear_has_app_minor_version();
  void set_has_cookie_enabled();
  void clear_has_cookie_enabled();
  void set_has_cpu_class();
  void clear_has_cpu_class();
  void set_has_on_line();
  void clear_has_on_line();
  void set_has_platform();
  void clear_has_platform();
  void set_has_browser_language();
  void clear_has_browser_language();
  void set_has_system_language();
  void clear_has_system_language();
  void set_has_user_agent();
  void clear_has_user_agent();
  void set_has_java_enabled();
  void clear_has_java_enabled();
  void set_has_taint_enabled();
  void clear_has_taint_enabled();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> plugin_name_;
  ::google::protobuf::internal::ArenaStringPtr app_code_name_;
  ::google::protobuf::internal::ArenaStringPtr app_name_;
  ::google::protobuf::internal::ArenaStringPtr app_version_;
  ::google::protobuf::internal::ArenaStringPtr app_minor_version_;
  ::google::protobuf::internal::ArenaStringPtr cpu_class_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::internal::ArenaStringPtr browser_language_;
  ::google::protobuf::internal::ArenaStringPtr system_language_;
  ::google::protobuf::internal::ArenaStringPtr user_agent_;
  bool cookie_enabled_;
  bool on_line_;
  bool java_enabled_;
  bool taint_enabled_;
  friend struct protobuf_dom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HtmlPath : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.HtmlPath) */ {
 public:
  HtmlPath();
  virtual ~HtmlPath();

  HtmlPath(const HtmlPath& from);

  inline HtmlPath& operator=(const HtmlPath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HtmlPath& default_instance();

  static inline const HtmlPath* internal_default_instance() {
    return reinterpret_cast<const HtmlPath*>(
               &_HtmlPath_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(HtmlPath* other);

  // implements Message ----------------------------------------------

  inline HtmlPath* New() const PROTOBUF_FINAL { return New(NULL); }

  HtmlPath* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HtmlPath& from);
  void MergeFrom(const HtmlPath& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HtmlPath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 index = 1;
  int index_size() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index(int index) const;
  void set_index(int index, ::google::protobuf::int32 value);
  void add_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:userfeedback.HtmlPath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > index_;
  friend struct protobuf_dom_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HtmlDocument

// required string url = 1;
inline bool HtmlDocument::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HtmlDocument::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HtmlDocument::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HtmlDocument::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& HtmlDocument::url() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlDocument.url)
  return url_.GetNoArena();
}
inline void HtmlDocument::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlDocument.url)
}
#if LANG_CXX11
inline void HtmlDocument::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.HtmlDocument.url)
}
#endif
inline void HtmlDocument::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.HtmlDocument.url)
}
inline void HtmlDocument::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.HtmlDocument.url)
}
inline ::std::string* HtmlDocument::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlDocument.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HtmlDocument::release_url() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlDocument.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HtmlDocument::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlDocument.url)
}

// optional string title = 2;
inline bool HtmlDocument::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HtmlDocument::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HtmlDocument::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HtmlDocument::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& HtmlDocument::title() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlDocument.title)
  return title_.GetNoArena();
}
inline void HtmlDocument::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlDocument.title)
}
#if LANG_CXX11
inline void HtmlDocument::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.HtmlDocument.title)
}
#endif
inline void HtmlDocument::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.HtmlDocument.title)
}
inline void HtmlDocument::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.HtmlDocument.title)
}
inline ::std::string* HtmlDocument::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlDocument.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HtmlDocument::release_title() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlDocument.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HtmlDocument::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlDocument.title)
}

// optional .userfeedback.HtmlElement document_element = 3;
inline bool HtmlDocument::has_document_element() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HtmlDocument::set_has_document_element() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HtmlDocument::clear_has_document_element() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HtmlDocument::clear_document_element() {
  if (document_element_ != NULL) document_element_->::userfeedback::HtmlElement::Clear();
  clear_has_document_element();
}
inline const ::userfeedback::HtmlElement& HtmlDocument::document_element() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlDocument.document_element)
  return document_element_ != NULL ? *document_element_
                         : *::userfeedback::HtmlElement::internal_default_instance();
}
inline ::userfeedback::HtmlElement* HtmlDocument::mutable_document_element() {
  set_has_document_element();
  if (document_element_ == NULL) {
    document_element_ = new ::userfeedback::HtmlElement;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlDocument.document_element)
  return document_element_;
}
inline ::userfeedback::HtmlElement* HtmlDocument::release_document_element() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlDocument.document_element)
  clear_has_document_element();
  ::userfeedback::HtmlElement* temp = document_element_;
  document_element_ = NULL;
  return temp;
}
inline void HtmlDocument::set_allocated_document_element(::userfeedback::HtmlElement* document_element) {
  delete document_element_;
  document_element_ = document_element;
  if (document_element) {
    set_has_document_element();
  } else {
    clear_has_document_element();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlDocument.document_element)
}

// -------------------------------------------------------------------

// HtmlElement

// required string tag_name = 1;
inline bool HtmlElement::has_tag_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HtmlElement::set_has_tag_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HtmlElement::clear_has_tag_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HtmlElement::clear_tag_name() {
  tag_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag_name();
}
inline const ::std::string& HtmlElement::tag_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.tag_name)
  return tag_name_.GetNoArena();
}
inline void HtmlElement::set_tag_name(const ::std::string& value) {
  set_has_tag_name();
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlElement.tag_name)
}
#if LANG_CXX11
inline void HtmlElement::set_tag_name(::std::string&& value) {
  set_has_tag_name();
  tag_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.HtmlElement.tag_name)
}
#endif
inline void HtmlElement::set_tag_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag_name();
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.HtmlElement.tag_name)
}
inline void HtmlElement::set_tag_name(const char* value, size_t size) {
  set_has_tag_name();
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.HtmlElement.tag_name)
}
inline ::std::string* HtmlElement::mutable_tag_name() {
  set_has_tag_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.tag_name)
  return tag_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HtmlElement::release_tag_name() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.tag_name)
  clear_has_tag_name();
  return tag_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HtmlElement::set_allocated_tag_name(::std::string* tag_name) {
  if (tag_name != NULL) {
    set_has_tag_name();
  } else {
    clear_has_tag_name();
  }
  tag_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag_name);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.tag_name)
}

// optional string id = 2;
inline bool HtmlElement::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HtmlElement::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HtmlElement::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HtmlElement::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& HtmlElement::id() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.id)
  return id_.GetNoArena();
}
inline void HtmlElement::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlElement.id)
}
#if LANG_CXX11
inline void HtmlElement::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.HtmlElement.id)
}
#endif
inline void HtmlElement::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.HtmlElement.id)
}
inline void HtmlElement::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.HtmlElement.id)
}
inline ::std::string* HtmlElement::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HtmlElement::release_id() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HtmlElement::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.id)
}

// optional string class_name = 3;
inline bool HtmlElement::has_class_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HtmlElement::set_has_class_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HtmlElement::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HtmlElement::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_name();
}
inline const ::std::string& HtmlElement::class_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.class_name)
  return class_name_.GetNoArena();
}
inline void HtmlElement::set_class_name(const ::std::string& value) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlElement.class_name)
}
#if LANG_CXX11
inline void HtmlElement::set_class_name(::std::string&& value) {
  set_has_class_name();
  class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.HtmlElement.class_name)
}
#endif
inline void HtmlElement::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.HtmlElement.class_name)
}
inline void HtmlElement::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.HtmlElement.class_name)
}
inline ::std::string* HtmlElement::mutable_class_name() {
  set_has_class_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HtmlElement::release_class_name() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.class_name)
  clear_has_class_name();
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HtmlElement::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    set_has_class_name();
  } else {
    clear_has_class_name();
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.class_name)
}

// repeated .userfeedback.HtmlElement child_element = 4;
inline int HtmlElement::child_element_size() const {
  return child_element_.size();
}
inline void HtmlElement::clear_child_element() {
  child_element_.Clear();
}
inline const ::userfeedback::HtmlElement& HtmlElement::child_element(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.child_element)
  return child_element_.Get(index);
}
inline ::userfeedback::HtmlElement* HtmlElement::mutable_child_element(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.child_element)
  return child_element_.Mutable(index);
}
inline ::userfeedback::HtmlElement* HtmlElement::add_child_element() {
  // @@protoc_insertion_point(field_add:userfeedback.HtmlElement.child_element)
  return child_element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::userfeedback::HtmlElement >*
HtmlElement::mutable_child_element() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.HtmlElement.child_element)
  return &child_element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::userfeedback::HtmlElement >&
HtmlElement::child_element() const {
  // @@protoc_insertion_point(field_list:userfeedback.HtmlElement.child_element)
  return child_element_;
}

// optional .userfeedback.HtmlDocument frame_content_document = 5;
inline bool HtmlElement::has_frame_content_document() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HtmlElement::set_has_frame_content_document() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HtmlElement::clear_has_frame_content_document() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HtmlElement::clear_frame_content_document() {
  if (frame_content_document_ != NULL) frame_content_document_->::userfeedback::HtmlDocument::Clear();
  clear_has_frame_content_document();
}
inline const ::userfeedback::HtmlDocument& HtmlElement::frame_content_document() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.frame_content_document)
  return frame_content_document_ != NULL ? *frame_content_document_
                         : *::userfeedback::HtmlDocument::internal_default_instance();
}
inline ::userfeedback::HtmlDocument* HtmlElement::mutable_frame_content_document() {
  set_has_frame_content_document();
  if (frame_content_document_ == NULL) {
    frame_content_document_ = new ::userfeedback::HtmlDocument;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.frame_content_document)
  return frame_content_document_;
}
inline ::userfeedback::HtmlDocument* HtmlElement::release_frame_content_document() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.frame_content_document)
  clear_has_frame_content_document();
  ::userfeedback::HtmlDocument* temp = frame_content_document_;
  frame_content_document_ = NULL;
  return temp;
}
inline void HtmlElement::set_allocated_frame_content_document(::userfeedback::HtmlDocument* frame_content_document) {
  delete frame_content_document_;
  frame_content_document_ = frame_content_document;
  if (frame_content_document) {
    set_has_frame_content_document();
  } else {
    clear_has_frame_content_document();
  }
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.frame_content_document)
}

// -------------------------------------------------------------------

// Navigator

// optional string app_code_name = 1;
inline bool Navigator::has_app_code_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Navigator::set_has_app_code_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Navigator::clear_has_app_code_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Navigator::clear_app_code_name() {
  app_code_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_code_name();
}
inline const ::std::string& Navigator::app_code_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_code_name)
  return app_code_name_.GetNoArena();
}
inline void Navigator::set_app_code_name(const ::std::string& value) {
  set_has_app_code_name();
  app_code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_code_name)
}
#if LANG_CXX11
inline void Navigator::set_app_code_name(::std::string&& value) {
  set_has_app_code_name();
  app_code_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Navigator.app_code_name)
}
#endif
inline void Navigator::set_app_code_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_code_name();
  app_code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.app_code_name)
}
inline void Navigator::set_app_code_name(const char* value, size_t size) {
  set_has_app_code_name();
  app_code_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.app_code_name)
}
inline ::std::string* Navigator::mutable_app_code_name() {
  set_has_app_code_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_code_name)
  return app_code_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Navigator::release_app_code_name() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_code_name)
  clear_has_app_code_name();
  return app_code_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Navigator::set_allocated_app_code_name(::std::string* app_code_name) {
  if (app_code_name != NULL) {
    set_has_app_code_name();
  } else {
    clear_has_app_code_name();
  }
  app_code_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_code_name);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_code_name)
}

// optional string app_name = 2;
inline bool Navigator::has_app_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Navigator::set_has_app_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Navigator::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Navigator::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_name();
}
inline const ::std::string& Navigator::app_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_name)
  return app_name_.GetNoArena();
}
inline void Navigator::set_app_name(const ::std::string& value) {
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_name)
}
#if LANG_CXX11
inline void Navigator::set_app_name(::std::string&& value) {
  set_has_app_name();
  app_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Navigator.app_name)
}
#endif
inline void Navigator::set_app_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.app_name)
}
inline void Navigator::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.app_name)
}
inline ::std::string* Navigator::mutable_app_name() {
  set_has_app_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_name)
  return app_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Navigator::release_app_name() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_name)
  clear_has_app_name();
  return app_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Navigator::set_allocated_app_name(::std::string* app_name) {
  if (app_name != NULL) {
    set_has_app_name();
  } else {
    clear_has_app_name();
  }
  app_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_name)
}

// optional string app_version = 3;
inline bool Navigator::has_app_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Navigator::set_has_app_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Navigator::clear_has_app_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Navigator::clear_app_version() {
  app_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_version();
}
inline const ::std::string& Navigator::app_version() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_version)
  return app_version_.GetNoArena();
}
inline void Navigator::set_app_version(const ::std::string& value) {
  set_has_app_version();
  app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_version)
}
#if LANG_CXX11
inline void Navigator::set_app_version(::std::string&& value) {
  set_has_app_version();
  app_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Navigator.app_version)
}
#endif
inline void Navigator::set_app_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_version();
  app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.app_version)
}
inline void Navigator::set_app_version(const char* value, size_t size) {
  set_has_app_version();
  app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.app_version)
}
inline ::std::string* Navigator::mutable_app_version() {
  set_has_app_version();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_version)
  return app_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Navigator::release_app_version() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_version)
  clear_has_app_version();
  return app_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Navigator::set_allocated_app_version(::std::string* app_version) {
  if (app_version != NULL) {
    set_has_app_version();
  } else {
    clear_has_app_version();
  }
  app_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_version);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_version)
}

// optional string app_minor_version = 4;
inline bool Navigator::has_app_minor_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Navigator::set_has_app_minor_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Navigator::clear_has_app_minor_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Navigator::clear_app_minor_version() {
  app_minor_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_minor_version();
}
inline const ::std::string& Navigator::app_minor_version() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_minor_version)
  return app_minor_version_.GetNoArena();
}
inline void Navigator::set_app_minor_version(const ::std::string& value) {
  set_has_app_minor_version();
  app_minor_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_minor_version)
}
#if LANG_CXX11
inline void Navigator::set_app_minor_version(::std::string&& value) {
  set_has_app_minor_version();
  app_minor_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Navigator.app_minor_version)
}
#endif
inline void Navigator::set_app_minor_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_minor_version();
  app_minor_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.app_minor_version)
}
inline void Navigator::set_app_minor_version(const char* value, size_t size) {
  set_has_app_minor_version();
  app_minor_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.app_minor_version)
}
inline ::std::string* Navigator::mutable_app_minor_version() {
  set_has_app_minor_version();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_minor_version)
  return app_minor_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Navigator::release_app_minor_version() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_minor_version)
  clear_has_app_minor_version();
  return app_minor_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Navigator::set_allocated_app_minor_version(::std::string* app_minor_version) {
  if (app_minor_version != NULL) {
    set_has_app_minor_version();
  } else {
    clear_has_app_minor_version();
  }
  app_minor_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_minor_version);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_minor_version)
}

// optional bool cookie_enabled = 5;
inline bool Navigator::has_cookie_enabled() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Navigator::set_has_cookie_enabled() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Navigator::clear_has_cookie_enabled() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Navigator::clear_cookie_enabled() {
  cookie_enabled_ = false;
  clear_has_cookie_enabled();
}
inline bool Navigator::cookie_enabled() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.cookie_enabled)
  return cookie_enabled_;
}
inline void Navigator::set_cookie_enabled(bool value) {
  set_has_cookie_enabled();
  cookie_enabled_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.cookie_enabled)
}

// optional string cpu_class = 6;
inline bool Navigator::has_cpu_class() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Navigator::set_has_cpu_class() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Navigator::clear_has_cpu_class() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Navigator::clear_cpu_class() {
  cpu_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpu_class();
}
inline const ::std::string& Navigator::cpu_class() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.cpu_class)
  return cpu_class_.GetNoArena();
}
inline void Navigator::set_cpu_class(const ::std::string& value) {
  set_has_cpu_class();
  cpu_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.cpu_class)
}
#if LANG_CXX11
inline void Navigator::set_cpu_class(::std::string&& value) {
  set_has_cpu_class();
  cpu_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Navigator.cpu_class)
}
#endif
inline void Navigator::set_cpu_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cpu_class();
  cpu_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.cpu_class)
}
inline void Navigator::set_cpu_class(const char* value, size_t size) {
  set_has_cpu_class();
  cpu_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.cpu_class)
}
inline ::std::string* Navigator::mutable_cpu_class() {
  set_has_cpu_class();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.cpu_class)
  return cpu_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Navigator::release_cpu_class() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.cpu_class)
  clear_has_cpu_class();
  return cpu_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Navigator::set_allocated_cpu_class(::std::string* cpu_class) {
  if (cpu_class != NULL) {
    set_has_cpu_class();
  } else {
    clear_has_cpu_class();
  }
  cpu_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_class);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.cpu_class)
}

// optional bool on_line = 7;
inline bool Navigator::has_on_line() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Navigator::set_has_on_line() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Navigator::clear_has_on_line() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Navigator::clear_on_line() {
  on_line_ = false;
  clear_has_on_line();
}
inline bool Navigator::on_line() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.on_line)
  return on_line_;
}
inline void Navigator::set_on_line(bool value) {
  set_has_on_line();
  on_line_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.on_line)
}

// optional string platform = 8;
inline bool Navigator::has_platform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Navigator::set_has_platform() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Navigator::clear_has_platform() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Navigator::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
inline const ::std::string& Navigator::platform() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.platform)
  return platform_.GetNoArena();
}
inline void Navigator::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.platform)
}
#if LANG_CXX11
inline void Navigator::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Navigator.platform)
}
#endif
inline void Navigator::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.platform)
}
inline void Navigator::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.platform)
}
inline ::std::string* Navigator::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Navigator::release_platform() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Navigator::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.platform)
}

// optional string browser_language = 9;
inline bool Navigator::has_browser_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Navigator::set_has_browser_language() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Navigator::clear_has_browser_language() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Navigator::clear_browser_language() {
  browser_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_browser_language();
}
inline const ::std::string& Navigator::browser_language() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.browser_language)
  return browser_language_.GetNoArena();
}
inline void Navigator::set_browser_language(const ::std::string& value) {
  set_has_browser_language();
  browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.browser_language)
}
#if LANG_CXX11
inline void Navigator::set_browser_language(::std::string&& value) {
  set_has_browser_language();
  browser_language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Navigator.browser_language)
}
#endif
inline void Navigator::set_browser_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_browser_language();
  browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.browser_language)
}
inline void Navigator::set_browser_language(const char* value, size_t size) {
  set_has_browser_language();
  browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.browser_language)
}
inline ::std::string* Navigator::mutable_browser_language() {
  set_has_browser_language();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.browser_language)
  return browser_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Navigator::release_browser_language() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.browser_language)
  clear_has_browser_language();
  return browser_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Navigator::set_allocated_browser_language(::std::string* browser_language) {
  if (browser_language != NULL) {
    set_has_browser_language();
  } else {
    clear_has_browser_language();
  }
  browser_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_language);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.browser_language)
}

// optional string system_language = 10;
inline bool Navigator::has_system_language() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Navigator::set_has_system_language() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Navigator::clear_has_system_language() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Navigator::clear_system_language() {
  system_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system_language();
}
inline const ::std::string& Navigator::system_language() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.system_language)
  return system_language_.GetNoArena();
}
inline void Navigator::set_system_language(const ::std::string& value) {
  set_has_system_language();
  system_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.system_language)
}
#if LANG_CXX11
inline void Navigator::set_system_language(::std::string&& value) {
  set_has_system_language();
  system_language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Navigator.system_language)
}
#endif
inline void Navigator::set_system_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_system_language();
  system_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.system_language)
}
inline void Navigator::set_system_language(const char* value, size_t size) {
  set_has_system_language();
  system_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.system_language)
}
inline ::std::string* Navigator::mutable_system_language() {
  set_has_system_language();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.system_language)
  return system_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Navigator::release_system_language() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.system_language)
  clear_has_system_language();
  return system_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Navigator::set_allocated_system_language(::std::string* system_language) {
  if (system_language != NULL) {
    set_has_system_language();
  } else {
    clear_has_system_language();
  }
  system_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_language);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.system_language)
}

// optional string user_agent = 11;
inline bool Navigator::has_user_agent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Navigator::set_has_user_agent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Navigator::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Navigator::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_agent();
}
inline const ::std::string& Navigator::user_agent() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.user_agent)
  return user_agent_.GetNoArena();
}
inline void Navigator::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.user_agent)
}
#if LANG_CXX11
inline void Navigator::set_user_agent(::std::string&& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Navigator.user_agent)
}
#endif
inline void Navigator::set_user_agent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.user_agent)
}
inline void Navigator::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.user_agent)
}
inline ::std::string* Navigator::mutable_user_agent() {
  set_has_user_agent();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.user_agent)
  return user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Navigator::release_user_agent() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.user_agent)
  clear_has_user_agent();
  return user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Navigator::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent != NULL) {
    set_has_user_agent();
  } else {
    clear_has_user_agent();
  }
  user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.user_agent)
}

// optional bool java_enabled = 12;
inline bool Navigator::has_java_enabled() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Navigator::set_has_java_enabled() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Navigator::clear_has_java_enabled() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Navigator::clear_java_enabled() {
  java_enabled_ = false;
  clear_has_java_enabled();
}
inline bool Navigator::java_enabled() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.java_enabled)
  return java_enabled_;
}
inline void Navigator::set_java_enabled(bool value) {
  set_has_java_enabled();
  java_enabled_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.java_enabled)
}

// optional bool taint_enabled = 13;
inline bool Navigator::has_taint_enabled() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Navigator::set_has_taint_enabled() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Navigator::clear_has_taint_enabled() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Navigator::clear_taint_enabled() {
  taint_enabled_ = false;
  clear_has_taint_enabled();
}
inline bool Navigator::taint_enabled() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.taint_enabled)
  return taint_enabled_;
}
inline void Navigator::set_taint_enabled(bool value) {
  set_has_taint_enabled();
  taint_enabled_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.taint_enabled)
}

// repeated string plugin_name = 14;
inline int Navigator::plugin_name_size() const {
  return plugin_name_.size();
}
inline void Navigator::clear_plugin_name() {
  plugin_name_.Clear();
}
inline const ::std::string& Navigator::plugin_name(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.plugin_name)
  return plugin_name_.Get(index);
}
inline ::std::string* Navigator::mutable_plugin_name(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.plugin_name)
  return plugin_name_.Mutable(index);
}
inline void Navigator::set_plugin_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.plugin_name)
  plugin_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Navigator::set_plugin_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.plugin_name)
  plugin_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Navigator::set_plugin_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  plugin_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.plugin_name)
}
inline void Navigator::set_plugin_name(int index, const char* value, size_t size) {
  plugin_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.plugin_name)
}
inline ::std::string* Navigator::add_plugin_name() {
  // @@protoc_insertion_point(field_add_mutable:userfeedback.Navigator.plugin_name)
  return plugin_name_.Add();
}
inline void Navigator::add_plugin_name(const ::std::string& value) {
  plugin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:userfeedback.Navigator.plugin_name)
}
#if LANG_CXX11
inline void Navigator::add_plugin_name(::std::string&& value) {
  plugin_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:userfeedback.Navigator.plugin_name)
}
#endif
inline void Navigator::add_plugin_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  plugin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:userfeedback.Navigator.plugin_name)
}
inline void Navigator::add_plugin_name(const char* value, size_t size) {
  plugin_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:userfeedback.Navigator.plugin_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Navigator::plugin_name() const {
  // @@protoc_insertion_point(field_list:userfeedback.Navigator.plugin_name)
  return plugin_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Navigator::mutable_plugin_name() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.Navigator.plugin_name)
  return &plugin_name_;
}

// -------------------------------------------------------------------

// HtmlPath

// repeated int32 index = 1;
inline int HtmlPath::index_size() const {
  return index_.size();
}
inline void HtmlPath::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::int32 HtmlPath::index(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlPath.index)
  return index_.Get(index);
}
inline void HtmlPath::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlPath.index)
}
inline void HtmlPath::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:userfeedback.HtmlPath.index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HtmlPath::index() const {
  // @@protoc_insertion_point(field_list:userfeedback.HtmlPath.index)
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HtmlPath::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.HtmlPath.index)
  return &index_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dom_2eproto__INCLUDED
