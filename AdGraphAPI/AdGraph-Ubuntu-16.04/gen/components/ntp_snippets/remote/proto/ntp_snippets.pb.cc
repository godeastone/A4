// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntp_snippets.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ntp_snippets.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace ntp_snippets {
class SnippetSourceProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnippetSourceProto> {
} _SnippetSourceProto_default_instance_;
class SnippetProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnippetProto> {
} _SnippetProto_default_instance_;
class SnippetImageProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnippetImageProto> {
} _SnippetImageProto_default_instance_;

namespace protobuf_ntp_5fsnippets_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SnippetSourceProto_default_instance_.Shutdown();
  _SnippetProto_default_instance_.Shutdown();
  _SnippetImageProto_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SnippetSourceProto_default_instance_.DefaultConstruct();
  _SnippetProto_default_instance_.DefaultConstruct();
  _SnippetImageProto_default_instance_.DefaultConstruct();
  _SnippetProto_default_instance_.get_mutable()->source_ = const_cast< ::ntp_snippets::SnippetSourceProto*>(
      ::ntp_snippets::SnippetSourceProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_ntp_5fsnippets_2eproto

bool SnippetProto_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SnippetProto_ContentType SnippetProto::UNKNOWN;
const SnippetProto_ContentType SnippetProto::VIDEO;
const SnippetProto_ContentType SnippetProto::ContentType_MIN;
const SnippetProto_ContentType SnippetProto::ContentType_MAX;
const int SnippetProto::ContentType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnippetSourceProto::kUrlFieldNumber;
const int SnippetSourceProto::kPublisherNameFieldNumber;
const int SnippetSourceProto::kAmpUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnippetSourceProto::SnippetSourceProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ntp_5fsnippets_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntp_snippets.SnippetSourceProto)
}
SnippetSourceProto::SnippetSourceProto(const SnippetSourceProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  publisher_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_publisher_name()) {
    publisher_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publisher_name_);
  }
  amp_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_amp_url()) {
    amp_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_url_);
  }
  // @@protoc_insertion_point(copy_constructor:ntp_snippets.SnippetSourceProto)
}

void SnippetSourceProto::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SnippetSourceProto::~SnippetSourceProto() {
  // @@protoc_insertion_point(destructor:ntp_snippets.SnippetSourceProto)
  SharedDtor();
}

void SnippetSourceProto::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnippetSourceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SnippetSourceProto& SnippetSourceProto::default_instance() {
  protobuf_ntp_5fsnippets_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnippetSourceProto* SnippetSourceProto::New(::google::protobuf::Arena* arena) const {
  SnippetSourceProto* n = new SnippetSourceProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnippetSourceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ntp_snippets.SnippetSourceProto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_publisher_name()) {
      GOOGLE_DCHECK(!publisher_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*publisher_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_amp_url()) {
      GOOGLE_DCHECK(!amp_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*amp_url_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnippetSourceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ntp_snippets.SnippetSourceProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string publisher_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string amp_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amp_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ntp_snippets.SnippetSourceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ntp_snippets.SnippetSourceProto)
  return false;
#undef DO_
}

void SnippetSourceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ntp_snippets.SnippetSourceProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string publisher_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->publisher_name(), output);
  }

  // optional string amp_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->amp_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ntp_snippets.SnippetSourceProto)
}

size_t SnippetSourceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntp_snippets.SnippetSourceProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string publisher_name = 2;
    if (has_publisher_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher_name());
    }

    // optional string amp_url = 3;
    if (has_amp_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amp_url());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnippetSourceProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SnippetSourceProto*>(&from));
}

void SnippetSourceProto::MergeFrom(const SnippetSourceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntp_snippets.SnippetSourceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_publisher_name();
      publisher_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publisher_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_amp_url();
      amp_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_url_);
    }
  }
}

void SnippetSourceProto::CopyFrom(const SnippetSourceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntp_snippets.SnippetSourceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetSourceProto::IsInitialized() const {
  return true;
}

void SnippetSourceProto::Swap(SnippetSourceProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnippetSourceProto::InternalSwap(SnippetSourceProto* other) {
  url_.Swap(&other->url_);
  publisher_name_.Swap(&other->publisher_name_);
  amp_url_.Swap(&other->amp_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SnippetSourceProto::GetTypeName() const {
  return "ntp_snippets.SnippetSourceProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnippetSourceProto

// optional string url = 1;
bool SnippetSourceProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnippetSourceProto::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SnippetSourceProto::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnippetSourceProto::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& SnippetSourceProto::url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.url)
  return url_.GetNoArena();
}
void SnippetSourceProto::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.url)
}
#if LANG_CXX11
void SnippetSourceProto::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetSourceProto.url)
}
#endif
void SnippetSourceProto::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.url)
}
void SnippetSourceProto::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.url)
}
::std::string* SnippetSourceProto::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnippetSourceProto::release_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnippetSourceProto::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.url)
}

// optional string publisher_name = 2;
bool SnippetSourceProto::has_publisher_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnippetSourceProto::set_has_publisher_name() {
  _has_bits_[0] |= 0x00000002u;
}
void SnippetSourceProto::clear_has_publisher_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnippetSourceProto::clear_publisher_name() {
  publisher_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publisher_name();
}
const ::std::string& SnippetSourceProto::publisher_name() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.publisher_name)
  return publisher_name_.GetNoArena();
}
void SnippetSourceProto::set_publisher_name(const ::std::string& value) {
  set_has_publisher_name();
  publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.publisher_name)
}
#if LANG_CXX11
void SnippetSourceProto::set_publisher_name(::std::string&& value) {
  set_has_publisher_name();
  publisher_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetSourceProto.publisher_name)
}
#endif
void SnippetSourceProto::set_publisher_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publisher_name();
  publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.publisher_name)
}
void SnippetSourceProto::set_publisher_name(const char* value, size_t size) {
  set_has_publisher_name();
  publisher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.publisher_name)
}
::std::string* SnippetSourceProto::mutable_publisher_name() {
  set_has_publisher_name();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.publisher_name)
  return publisher_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnippetSourceProto::release_publisher_name() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.publisher_name)
  clear_has_publisher_name();
  return publisher_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnippetSourceProto::set_allocated_publisher_name(::std::string* publisher_name) {
  if (publisher_name != NULL) {
    set_has_publisher_name();
  } else {
    clear_has_publisher_name();
  }
  publisher_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisher_name);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.publisher_name)
}

// optional string amp_url = 3;
bool SnippetSourceProto::has_amp_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnippetSourceProto::set_has_amp_url() {
  _has_bits_[0] |= 0x00000004u;
}
void SnippetSourceProto::clear_has_amp_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnippetSourceProto::clear_amp_url() {
  amp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_amp_url();
}
const ::std::string& SnippetSourceProto::amp_url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.amp_url)
  return amp_url_.GetNoArena();
}
void SnippetSourceProto::set_amp_url(const ::std::string& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.amp_url)
}
#if LANG_CXX11
void SnippetSourceProto::set_amp_url(::std::string&& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetSourceProto.amp_url)
}
#endif
void SnippetSourceProto::set_amp_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.amp_url)
}
void SnippetSourceProto::set_amp_url(const char* value, size_t size) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.amp_url)
}
::std::string* SnippetSourceProto::mutable_amp_url() {
  set_has_amp_url();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.amp_url)
  return amp_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnippetSourceProto::release_amp_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.amp_url)
  clear_has_amp_url();
  return amp_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnippetSourceProto::set_allocated_amp_url(::std::string* amp_url) {
  if (amp_url != NULL) {
    set_has_amp_url();
  } else {
    clear_has_amp_url();
  }
  amp_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amp_url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.amp_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnippetProto::kIdsFieldNumber;
const int SnippetProto::kTitleFieldNumber;
const int SnippetProto::kSnippetFieldNumber;
const int SnippetProto::kSalientImageUrlFieldNumber;
const int SnippetProto::kPublishDateFieldNumber;
const int SnippetProto::kExpiryDateFieldNumber;
const int SnippetProto::kScoreFieldNumber;
const int SnippetProto::kSourceFieldNumber;
const int SnippetProto::kDismissedFieldNumber;
const int SnippetProto::kRemoteCategoryIdFieldNumber;
const int SnippetProto::kFetchDateFieldNumber;
const int SnippetProto::kContentTypeFieldNumber;
const int SnippetProto::kRankFieldNumber;
const int SnippetProto::kImageDominantColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnippetProto::SnippetProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ntp_5fsnippets_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntp_snippets.SnippetProto)
}
SnippetProto::SnippetProto(const SnippetProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snippet()) {
    snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
  }
  salient_image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_salient_image_url()) {
    salient_image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salient_image_url_);
  }
  if (from.has_source()) {
    source_ = new ::ntp_snippets::SnippetSourceProto(*from.source_);
  } else {
    source_ = NULL;
  }
  ::memcpy(&publish_date_, &from.publish_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_dominant_color_) -
    reinterpret_cast<char*>(&publish_date_)) + sizeof(image_dominant_color_));
  // @@protoc_insertion_point(copy_constructor:ntp_snippets.SnippetProto)
}

void SnippetProto::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salient_image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_dominant_color_) -
      reinterpret_cast<char*>(&source_)) + sizeof(image_dominant_color_));
}

SnippetProto::~SnippetProto() {
  // @@protoc_insertion_point(destructor:ntp_snippets.SnippetProto)
  SharedDtor();
}

void SnippetProto::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salient_image_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete source_;
  }
}

void SnippetProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SnippetProto& SnippetProto::default_instance() {
  protobuf_ntp_5fsnippets_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnippetProto* SnippetProto::New(::google::protobuf::Arena* arena) const {
  SnippetProto* n = new SnippetProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnippetProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ntp_snippets.SnippetProto)
  ids_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_snippet()) {
      GOOGLE_DCHECK(!snippet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*snippet_.UnsafeRawStringPointer())->clear();
    }
    if (has_salient_image_url()) {
      GOOGLE_DCHECK(!salient_image_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*salient_image_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_source()) {
      GOOGLE_DCHECK(source_ != NULL);
      source_->::ntp_snippets::SnippetSourceProto::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&publish_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dismissed_) -
        reinterpret_cast<char*>(&publish_date_)) + sizeof(dismissed_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&fetch_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&image_dominant_color_) -
        reinterpret_cast<char*>(&fetch_date_)) + sizeof(image_dominant_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnippetProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ntp_snippets.SnippetProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string snippet = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snippet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string salient_image_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salient_image_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 publish_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_publish_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &publish_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expiry_date = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_expiry_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ntp_snippets.SnippetSourceProto source = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dismissed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_dismissed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dismissed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 remote_category_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_remote_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remote_category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 fetch_date = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_fetch_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fetch_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ntp_snippets.SnippetProto.ContentType content_type = 12 [default = UNKNOWN];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ntp_snippets::SnippetProto_ContentType_IsValid(value)) {
            set_content_type(static_cast< ::ntp_snippets::SnippetProto_ContentType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rank = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 image_dominant_color = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_image_dominant_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &image_dominant_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ntp_snippets.SnippetProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ntp_snippets.SnippetProto)
  return false;
#undef DO_
}

void SnippetProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ntp_snippets.SnippetProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string snippet = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->snippet(), output);
  }

  // optional string salient_image_url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->salient_image_url(), output);
  }

  // optional int64 publish_date = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->publish_date(), output);
  }

  // optional int64 expiry_date = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->expiry_date(), output);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->score(), output);
  }

  // optional .ntp_snippets.SnippetSourceProto source = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->source_, output);
  }

  // optional bool dismissed = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->dismissed(), output);
  }

  // optional int32 remote_category_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->remote_category_id(), output);
  }

  // optional int64 fetch_date = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->fetch_date(), output);
  }

  // optional .ntp_snippets.SnippetProto.ContentType content_type = 12 [default = UNKNOWN];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->content_type(), output);
  }

  // optional int32 rank = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rank(), output);
  }

  // optional fixed32 image_dominant_color = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->image_dominant_color(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ntp_snippets.SnippetProto)
}

size_t SnippetProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntp_snippets.SnippetProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ids_size());
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string snippet = 3;
    if (has_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snippet());
    }

    // optional string salient_image_url = 4;
    if (has_salient_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->salient_image_url());
    }

    // optional .ntp_snippets.SnippetSourceProto source = 8;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_);
    }

    // optional int64 publish_date = 5;
    if (has_publish_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->publish_date());
    }

    // optional int64 expiry_date = 6;
    if (has_expiry_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry_date());
    }

    // optional float score = 7;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional bool dismissed = 9;
    if (has_dismissed()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int64 fetch_date = 11;
    if (has_fetch_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fetch_date());
    }

    // optional int32 remote_category_id = 10;
    if (has_remote_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remote_category_id());
    }

    // optional .ntp_snippets.SnippetProto.ContentType content_type = 12 [default = UNKNOWN];
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->content_type());
    }

    // optional int32 rank = 13;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional fixed32 image_dominant_color = 14;
    if (has_image_dominant_color()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnippetProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SnippetProto*>(&from));
}

void SnippetProto::MergeFrom(const SnippetProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntp_snippets.SnippetProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_snippet();
      snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_salient_image_url();
      salient_image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salient_image_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_source()->::ntp_snippets::SnippetSourceProto::MergeFrom(from.source());
    }
    if (cached_has_bits & 0x00000010u) {
      publish_date_ = from.publish_date_;
    }
    if (cached_has_bits & 0x00000020u) {
      expiry_date_ = from.expiry_date_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      dismissed_ = from.dismissed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      fetch_date_ = from.fetch_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      remote_category_id_ = from.remote_category_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      content_type_ = from.content_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00001000u) {
      image_dominant_color_ = from.image_dominant_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnippetProto::CopyFrom(const SnippetProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntp_snippets.SnippetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetProto::IsInitialized() const {
  return true;
}

void SnippetProto::Swap(SnippetProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnippetProto::InternalSwap(SnippetProto* other) {
  ids_.InternalSwap(&other->ids_);
  title_.Swap(&other->title_);
  snippet_.Swap(&other->snippet_);
  salient_image_url_.Swap(&other->salient_image_url_);
  std::swap(source_, other->source_);
  std::swap(publish_date_, other->publish_date_);
  std::swap(expiry_date_, other->expiry_date_);
  std::swap(score_, other->score_);
  std::swap(dismissed_, other->dismissed_);
  std::swap(fetch_date_, other->fetch_date_);
  std::swap(remote_category_id_, other->remote_category_id_);
  std::swap(content_type_, other->content_type_);
  std::swap(rank_, other->rank_);
  std::swap(image_dominant_color_, other->image_dominant_color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SnippetProto::GetTypeName() const {
  return "ntp_snippets.SnippetProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnippetProto

// repeated string ids = 1;
int SnippetProto::ids_size() const {
  return ids_.size();
}
void SnippetProto::clear_ids() {
  ids_.Clear();
}
const ::std::string& SnippetProto::ids(int index) const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.ids)
  return ids_.Get(index);
}
::std::string* SnippetProto::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.ids)
  return ids_.Mutable(index);
}
void SnippetProto::set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.ids)
  ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SnippetProto::set_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
#endif
void SnippetProto::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.ids)
}
void SnippetProto::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.ids)
}
::std::string* SnippetProto::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:ntp_snippets.SnippetProto.ids)
  return ids_.Add();
}
void SnippetProto::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ntp_snippets.SnippetProto.ids)
}
#if LANG_CXX11
void SnippetProto::add_ids(::std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ntp_snippets.SnippetProto.ids)
}
#endif
void SnippetProto::add_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ntp_snippets.SnippetProto.ids)
}
void SnippetProto::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ntp_snippets.SnippetProto.ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SnippetProto::ids() const {
  // @@protoc_insertion_point(field_list:ntp_snippets.SnippetProto.ids)
  return ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SnippetProto::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:ntp_snippets.SnippetProto.ids)
  return &ids_;
}

// optional string title = 2;
bool SnippetProto::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnippetProto::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void SnippetProto::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnippetProto::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& SnippetProto::title() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.title)
  return title_.GetNoArena();
}
void SnippetProto::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.title)
}
#if LANG_CXX11
void SnippetProto::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetProto.title)
}
#endif
void SnippetProto::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.title)
}
void SnippetProto::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.title)
}
::std::string* SnippetProto::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnippetProto::release_title() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnippetProto::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.title)
}

// optional string snippet = 3;
bool SnippetProto::has_snippet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnippetProto::set_has_snippet() {
  _has_bits_[0] |= 0x00000002u;
}
void SnippetProto::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnippetProto::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
const ::std::string& SnippetProto::snippet() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.snippet)
  return snippet_.GetNoArena();
}
void SnippetProto::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.snippet)
}
#if LANG_CXX11
void SnippetProto::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetProto.snippet)
}
#endif
void SnippetProto::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.snippet)
}
void SnippetProto::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.snippet)
}
::std::string* SnippetProto::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnippetProto::release_snippet() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnippetProto::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.snippet)
}

// optional string salient_image_url = 4;
bool SnippetProto::has_salient_image_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnippetProto::set_has_salient_image_url() {
  _has_bits_[0] |= 0x00000004u;
}
void SnippetProto::clear_has_salient_image_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnippetProto::clear_salient_image_url() {
  salient_image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_salient_image_url();
}
const ::std::string& SnippetProto::salient_image_url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.salient_image_url)
  return salient_image_url_.GetNoArena();
}
void SnippetProto::set_salient_image_url(const ::std::string& value) {
  set_has_salient_image_url();
  salient_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.salient_image_url)
}
#if LANG_CXX11
void SnippetProto::set_salient_image_url(::std::string&& value) {
  set_has_salient_image_url();
  salient_image_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetProto.salient_image_url)
}
#endif
void SnippetProto::set_salient_image_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_salient_image_url();
  salient_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.salient_image_url)
}
void SnippetProto::set_salient_image_url(const char* value, size_t size) {
  set_has_salient_image_url();
  salient_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.salient_image_url)
}
::std::string* SnippetProto::mutable_salient_image_url() {
  set_has_salient_image_url();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.salient_image_url)
  return salient_image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnippetProto::release_salient_image_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.salient_image_url)
  clear_has_salient_image_url();
  return salient_image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnippetProto::set_allocated_salient_image_url(::std::string* salient_image_url) {
  if (salient_image_url != NULL) {
    set_has_salient_image_url();
  } else {
    clear_has_salient_image_url();
  }
  salient_image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salient_image_url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.salient_image_url)
}

// optional int64 publish_date = 5;
bool SnippetProto::has_publish_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnippetProto::set_has_publish_date() {
  _has_bits_[0] |= 0x00000010u;
}
void SnippetProto::clear_has_publish_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnippetProto::clear_publish_date() {
  publish_date_ = GOOGLE_LONGLONG(0);
  clear_has_publish_date();
}
::google::protobuf::int64 SnippetProto::publish_date() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.publish_date)
  return publish_date_;
}
void SnippetProto::set_publish_date(::google::protobuf::int64 value) {
  set_has_publish_date();
  publish_date_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.publish_date)
}

// optional int64 expiry_date = 6;
bool SnippetProto::has_expiry_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnippetProto::set_has_expiry_date() {
  _has_bits_[0] |= 0x00000020u;
}
void SnippetProto::clear_has_expiry_date() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnippetProto::clear_expiry_date() {
  expiry_date_ = GOOGLE_LONGLONG(0);
  clear_has_expiry_date();
}
::google::protobuf::int64 SnippetProto::expiry_date() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.expiry_date)
  return expiry_date_;
}
void SnippetProto::set_expiry_date(::google::protobuf::int64 value) {
  set_has_expiry_date();
  expiry_date_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.expiry_date)
}

// optional float score = 7;
bool SnippetProto::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnippetProto::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
void SnippetProto::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnippetProto::clear_score() {
  score_ = 0;
  clear_has_score();
}
float SnippetProto::score() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.score)
  return score_;
}
void SnippetProto::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.score)
}

// optional .ntp_snippets.SnippetSourceProto source = 8;
bool SnippetProto::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnippetProto::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
void SnippetProto::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnippetProto::clear_source() {
  if (source_ != NULL) source_->::ntp_snippets::SnippetSourceProto::Clear();
  clear_has_source();
}
const ::ntp_snippets::SnippetSourceProto& SnippetProto::source() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.source)
  return source_ != NULL ? *source_
                         : *::ntp_snippets::SnippetSourceProto::internal_default_instance();
}
::ntp_snippets::SnippetSourceProto* SnippetProto::mutable_source() {
  set_has_source();
  if (source_ == NULL) {
    source_ = new ::ntp_snippets::SnippetSourceProto;
  }
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.source)
  return source_;
}
::ntp_snippets::SnippetSourceProto* SnippetProto::release_source() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.source)
  clear_has_source();
  ::ntp_snippets::SnippetSourceProto* temp = source_;
  source_ = NULL;
  return temp;
}
void SnippetProto::set_allocated_source(::ntp_snippets::SnippetSourceProto* source) {
  delete source_;
  source_ = source;
  if (source) {
    set_has_source();
  } else {
    clear_has_source();
  }
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.source)
}

// optional bool dismissed = 9;
bool SnippetProto::has_dismissed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnippetProto::set_has_dismissed() {
  _has_bits_[0] |= 0x00000080u;
}
void SnippetProto::clear_has_dismissed() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnippetProto::clear_dismissed() {
  dismissed_ = false;
  clear_has_dismissed();
}
bool SnippetProto::dismissed() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.dismissed)
  return dismissed_;
}
void SnippetProto::set_dismissed(bool value) {
  set_has_dismissed();
  dismissed_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.dismissed)
}

// optional int32 remote_category_id = 10;
bool SnippetProto::has_remote_category_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SnippetProto::set_has_remote_category_id() {
  _has_bits_[0] |= 0x00000200u;
}
void SnippetProto::clear_has_remote_category_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void SnippetProto::clear_remote_category_id() {
  remote_category_id_ = 0;
  clear_has_remote_category_id();
}
::google::protobuf::int32 SnippetProto::remote_category_id() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.remote_category_id)
  return remote_category_id_;
}
void SnippetProto::set_remote_category_id(::google::protobuf::int32 value) {
  set_has_remote_category_id();
  remote_category_id_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.remote_category_id)
}

// optional int64 fetch_date = 11;
bool SnippetProto::has_fetch_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SnippetProto::set_has_fetch_date() {
  _has_bits_[0] |= 0x00000100u;
}
void SnippetProto::clear_has_fetch_date() {
  _has_bits_[0] &= ~0x00000100u;
}
void SnippetProto::clear_fetch_date() {
  fetch_date_ = GOOGLE_LONGLONG(0);
  clear_has_fetch_date();
}
::google::protobuf::int64 SnippetProto::fetch_date() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.fetch_date)
  return fetch_date_;
}
void SnippetProto::set_fetch_date(::google::protobuf::int64 value) {
  set_has_fetch_date();
  fetch_date_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.fetch_date)
}

// optional .ntp_snippets.SnippetProto.ContentType content_type = 12 [default = UNKNOWN];
bool SnippetProto::has_content_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SnippetProto::set_has_content_type() {
  _has_bits_[0] |= 0x00000400u;
}
void SnippetProto::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void SnippetProto::clear_content_type() {
  content_type_ = 0;
  clear_has_content_type();
}
::ntp_snippets::SnippetProto_ContentType SnippetProto::content_type() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.content_type)
  return static_cast< ::ntp_snippets::SnippetProto_ContentType >(content_type_);
}
void SnippetProto::set_content_type(::ntp_snippets::SnippetProto_ContentType value) {
  assert(::ntp_snippets::SnippetProto_ContentType_IsValid(value));
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.content_type)
}

// optional int32 rank = 13;
bool SnippetProto::has_rank() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SnippetProto::set_has_rank() {
  _has_bits_[0] |= 0x00000800u;
}
void SnippetProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000800u;
}
void SnippetProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
::google::protobuf::int32 SnippetProto::rank() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.rank)
  return rank_;
}
void SnippetProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.rank)
}

// optional fixed32 image_dominant_color = 14;
bool SnippetProto::has_image_dominant_color() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SnippetProto::set_has_image_dominant_color() {
  _has_bits_[0] |= 0x00001000u;
}
void SnippetProto::clear_has_image_dominant_color() {
  _has_bits_[0] &= ~0x00001000u;
}
void SnippetProto::clear_image_dominant_color() {
  image_dominant_color_ = 0u;
  clear_has_image_dominant_color();
}
::google::protobuf::uint32 SnippetProto::image_dominant_color() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.image_dominant_color)
  return image_dominant_color_;
}
void SnippetProto::set_image_dominant_color(::google::protobuf::uint32 value) {
  set_has_image_dominant_color();
  image_dominant_color_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.image_dominant_color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnippetImageProto::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnippetImageProto::SnippetImageProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ntp_5fsnippets_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntp_snippets.SnippetImageProto)
}
SnippetImageProto::SnippetImageProto(const SnippetImageProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:ntp_snippets.SnippetImageProto)
}

void SnippetImageProto::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SnippetImageProto::~SnippetImageProto() {
  // @@protoc_insertion_point(destructor:ntp_snippets.SnippetImageProto)
  SharedDtor();
}

void SnippetImageProto::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnippetImageProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SnippetImageProto& SnippetImageProto::default_instance() {
  protobuf_ntp_5fsnippets_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnippetImageProto* SnippetImageProto::New(::google::protobuf::Arena* arena) const {
  SnippetImageProto* n = new SnippetImageProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnippetImageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ntp_snippets.SnippetImageProto)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnippetImageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ntp_snippets.SnippetImageProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ntp_snippets.SnippetImageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ntp_snippets.SnippetImageProto)
  return false;
#undef DO_
}

void SnippetImageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ntp_snippets.SnippetImageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ntp_snippets.SnippetImageProto)
}

size_t SnippetImageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntp_snippets.SnippetImageProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnippetImageProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SnippetImageProto*>(&from));
}

void SnippetImageProto::MergeFrom(const SnippetImageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntp_snippets.SnippetImageProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void SnippetImageProto::CopyFrom(const SnippetImageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntp_snippets.SnippetImageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetImageProto::IsInitialized() const {
  return true;
}

void SnippetImageProto::Swap(SnippetImageProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnippetImageProto::InternalSwap(SnippetImageProto* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SnippetImageProto::GetTypeName() const {
  return "ntp_snippets.SnippetImageProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnippetImageProto

// optional bytes data = 1;
bool SnippetImageProto::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnippetImageProto::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void SnippetImageProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnippetImageProto::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& SnippetImageProto::data() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetImageProto.data)
  return data_.GetNoArena();
}
void SnippetImageProto::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetImageProto.data)
}
#if LANG_CXX11
void SnippetImageProto::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetImageProto.data)
}
#endif
void SnippetImageProto::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetImageProto.data)
}
void SnippetImageProto::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetImageProto.data)
}
::std::string* SnippetImageProto::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetImageProto.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnippetImageProto::release_data() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetImageProto.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnippetImageProto::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetImageProto.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ntp_snippets

// @@protoc_insertion_point(global_scope)
