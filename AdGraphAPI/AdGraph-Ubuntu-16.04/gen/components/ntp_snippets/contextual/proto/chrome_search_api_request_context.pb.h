// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_search_api_request_context.proto

#ifndef PROTOBUF_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto__INCLUDED
#define PROTOBUF_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace contextual_suggestions {
class ClientId;
class ClientIdDefaultTypeInternal;
extern ClientIdDefaultTypeInternal _ClientId_default_instance_;
class CookieRequestContext;
class CookieRequestContextDefaultTypeInternal;
extern CookieRequestContextDefaultTypeInternal _CookieRequestContext_default_instance_;
class LocalizationContext;
class LocalizationContextDefaultTypeInternal;
extern LocalizationContextDefaultTypeInternal _LocalizationContext_default_instance_;
class SearchApiClientContext;
class SearchApiClientContextDefaultTypeInternal;
extern SearchApiClientContextDefaultTypeInternal _SearchApiClientContext_default_instance_;
class SearchApiRequestContext;
class SearchApiRequestContextDefaultTypeInternal;
extern SearchApiRequestContextDefaultTypeInternal _SearchApiRequestContext_default_instance_;
}  // namespace contextual_suggestions

namespace contextual_suggestions {

namespace protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto

enum ClientId_ClientType {
  ClientId_ClientType_UNKNOWN_CLIENT_TYPE = 0,
  ClientId_ClientType_ANDROID_CHROME = 79
};
bool ClientId_ClientType_IsValid(int value);
const ClientId_ClientType ClientId_ClientType_ClientType_MIN = ClientId_ClientType_UNKNOWN_CLIENT_TYPE;
const ClientId_ClientType ClientId_ClientType_ClientType_MAX = ClientId_ClientType_ANDROID_CHROME;
const int ClientId_ClientType_ClientType_ARRAYSIZE = ClientId_ClientType_ClientType_MAX + 1;

// ===================================================================

class SearchApiRequestContext : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.SearchApiRequestContext) */ {
 public:
  SearchApiRequestContext();
  virtual ~SearchApiRequestContext();

  SearchApiRequestContext(const SearchApiRequestContext& from);

  inline SearchApiRequestContext& operator=(const SearchApiRequestContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SearchApiRequestContext& default_instance();

  static inline const SearchApiRequestContext* internal_default_instance() {
    return reinterpret_cast<const SearchApiRequestContext*>(
               &_SearchApiRequestContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SearchApiRequestContext* other);

  // implements Message ----------------------------------------------

  inline SearchApiRequestContext* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchApiRequestContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SearchApiRequestContext& from);
  void MergeFrom(const SearchApiRequestContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchApiRequestContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .contextual_suggestions.SearchApiClientContext client_context = 2;
  bool has_client_context() const;
  void clear_client_context();
  static const int kClientContextFieldNumber = 2;
  const ::contextual_suggestions::SearchApiClientContext& client_context() const;
  ::contextual_suggestions::SearchApiClientContext* mutable_client_context();
  ::contextual_suggestions::SearchApiClientContext* release_client_context();
  void set_allocated_client_context(::contextual_suggestions::SearchApiClientContext* client_context);

  // optional .contextual_suggestions.CookieRequestContext cookie_context = 3;
  bool has_cookie_context() const;
  void clear_cookie_context();
  static const int kCookieContextFieldNumber = 3;
  const ::contextual_suggestions::CookieRequestContext& cookie_context() const;
  ::contextual_suggestions::CookieRequestContext* mutable_cookie_context();
  ::contextual_suggestions::CookieRequestContext* release_cookie_context();
  void set_allocated_cookie_context(::contextual_suggestions::CookieRequestContext* cookie_context);

  // optional .contextual_suggestions.LocalizationContext localization_context = 4;
  bool has_localization_context() const;
  void clear_localization_context();
  static const int kLocalizationContextFieldNumber = 4;
  const ::contextual_suggestions::LocalizationContext& localization_context() const;
  ::contextual_suggestions::LocalizationContext* mutable_localization_context();
  ::contextual_suggestions::LocalizationContext* release_localization_context();
  void set_allocated_localization_context(::contextual_suggestions::LocalizationContext* localization_context);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.SearchApiRequestContext)
 private:
  void set_has_client_context();
  void clear_has_client_context();
  void set_has_localization_context();
  void clear_has_localization_context();
  void set_has_cookie_context();
  void clear_has_cookie_context();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::contextual_suggestions::SearchApiClientContext* client_context_;
  ::contextual_suggestions::CookieRequestContext* cookie_context_;
  ::contextual_suggestions::LocalizationContext* localization_context_;
  friend struct protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchApiClientContext : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.SearchApiClientContext) */ {
 public:
  SearchApiClientContext();
  virtual ~SearchApiClientContext();

  SearchApiClientContext(const SearchApiClientContext& from);

  inline SearchApiClientContext& operator=(const SearchApiClientContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SearchApiClientContext& default_instance();

  static inline const SearchApiClientContext* internal_default_instance() {
    return reinterpret_cast<const SearchApiClientContext*>(
               &_SearchApiClientContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SearchApiClientContext* other);

  // implements Message ----------------------------------------------

  inline SearchApiClientContext* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchApiClientContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SearchApiClientContext& from);
  void MergeFrom(const SearchApiClientContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchApiClientContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .contextual_suggestions.ClientId client_id = 1;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::contextual_suggestions::ClientId& client_id() const;
  ::contextual_suggestions::ClientId* mutable_client_id();
  ::contextual_suggestions::ClientId* release_client_id();
  void set_allocated_client_id(::contextual_suggestions::ClientId* client_id);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.SearchApiClientContext)
 private:
  void set_has_client_id();
  void clear_has_client_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::contextual_suggestions::ClientId* client_id_;
  friend struct protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientId : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.ClientId) */ {
 public:
  ClientId();
  virtual ~ClientId();

  ClientId(const ClientId& from);

  inline ClientId& operator=(const ClientId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientId& default_instance();

  static inline const ClientId* internal_default_instance() {
    return reinterpret_cast<const ClientId*>(
               &_ClientId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ClientId* other);

  // implements Message ----------------------------------------------

  inline ClientId* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClientId& from);
  void MergeFrom(const ClientId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ClientId_ClientType ClientType;
  static const ClientType UNKNOWN_CLIENT_TYPE =
    ClientId_ClientType_UNKNOWN_CLIENT_TYPE;
  static const ClientType ANDROID_CHROME =
    ClientId_ClientType_ANDROID_CHROME;
  static inline bool ClientType_IsValid(int value) {
    return ClientId_ClientType_IsValid(value);
  }
  static const ClientType ClientType_MIN =
    ClientId_ClientType_ClientType_MIN;
  static const ClientType ClientType_MAX =
    ClientId_ClientType_ClientType_MAX;
  static const int ClientType_ARRAYSIZE =
    ClientId_ClientType_ClientType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .contextual_suggestions.ClientId.ClientType client_type = 1;
  bool has_client_type() const;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 1;
  ::contextual_suggestions::ClientId_ClientType client_type() const;
  void set_client_type(::contextual_suggestions::ClientId_ClientType value);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.ClientId)
 private:
  void set_has_client_type();
  void clear_has_client_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int client_type_;
  friend struct protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocalizationContext : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.LocalizationContext) */ {
 public:
  LocalizationContext();
  virtual ~LocalizationContext();

  LocalizationContext(const LocalizationContext& from);

  inline LocalizationContext& operator=(const LocalizationContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LocalizationContext& default_instance();

  static inline const LocalizationContext* internal_default_instance() {
    return reinterpret_cast<const LocalizationContext*>(
               &_LocalizationContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(LocalizationContext* other);

  // implements Message ----------------------------------------------

  inline LocalizationContext* New() const PROTOBUF_FINAL { return New(NULL); }

  LocalizationContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LocalizationContext& from);
  void MergeFrom(const LocalizationContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalizationContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string language_code = 1;
  bool has_language_code() const;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 1;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // optional string country_code = 2;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 2;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string search_domain = 4;
  bool has_search_domain() const;
  void clear_search_domain();
  static const int kSearchDomainFieldNumber = 4;
  const ::std::string& search_domain() const;
  void set_search_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_search_domain(::std::string&& value);
  #endif
  void set_search_domain(const char* value);
  void set_search_domain(const char* value, size_t size);
  ::std::string* mutable_search_domain();
  ::std::string* release_search_domain();
  void set_allocated_search_domain(::std::string* search_domain);

  // optional string spoken_language = 7;
  bool has_spoken_language() const;
  void clear_spoken_language();
  static const int kSpokenLanguageFieldNumber = 7;
  const ::std::string& spoken_language() const;
  void set_spoken_language(const ::std::string& value);
  #if LANG_CXX11
  void set_spoken_language(::std::string&& value);
  #endif
  void set_spoken_language(const char* value);
  void set_spoken_language(const char* value, size_t size);
  ::std::string* mutable_spoken_language();
  ::std::string* release_spoken_language();
  void set_allocated_spoken_language(::std::string* spoken_language);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.LocalizationContext)
 private:
  void set_has_language_code();
  void clear_has_language_code();
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_search_domain();
  void clear_has_search_domain();
  void set_has_spoken_language();
  void clear_has_spoken_language();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr search_domain_;
  ::google::protobuf::internal::ArenaStringPtr spoken_language_;
  friend struct protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CookieRequestContext : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.CookieRequestContext) */ {
 public:
  CookieRequestContext();
  virtual ~CookieRequestContext();

  CookieRequestContext(const CookieRequestContext& from);

  inline CookieRequestContext& operator=(const CookieRequestContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CookieRequestContext& default_instance();

  static inline const CookieRequestContext* internal_default_instance() {
    return reinterpret_cast<const CookieRequestContext*>(
               &_CookieRequestContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CookieRequestContext* other);

  // implements Message ----------------------------------------------

  inline CookieRequestContext* New() const PROTOBUF_FINAL { return New(NULL); }

  CookieRequestContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CookieRequestContext& from);
  void MergeFrom(const CookieRequestContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CookieRequestContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nid = 1;
  bool has_nid() const;
  void clear_nid();
  static const int kNidFieldNumber = 1;
  const ::std::string& nid() const;
  void set_nid(const ::std::string& value);
  #if LANG_CXX11
  void set_nid(::std::string&& value);
  #endif
  void set_nid(const char* value);
  void set_nid(const char* value, size_t size);
  ::std::string* mutable_nid();
  ::std::string* release_nid();
  void set_allocated_nid(::std::string* nid);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.CookieRequestContext)
 private:
  void set_has_nid();
  void clear_has_nid();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nid_;
  friend struct protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchApiRequestContext

// optional .contextual_suggestions.SearchApiClientContext client_context = 2;
inline bool SearchApiRequestContext::has_client_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchApiRequestContext::set_has_client_context() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchApiRequestContext::clear_has_client_context() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchApiRequestContext::clear_client_context() {
  if (client_context_ != NULL) client_context_->::contextual_suggestions::SearchApiClientContext::Clear();
  clear_has_client_context();
}
inline const ::contextual_suggestions::SearchApiClientContext& SearchApiRequestContext::client_context() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.SearchApiRequestContext.client_context)
  return client_context_ != NULL ? *client_context_
                         : *::contextual_suggestions::SearchApiClientContext::internal_default_instance();
}
inline ::contextual_suggestions::SearchApiClientContext* SearchApiRequestContext::mutable_client_context() {
  set_has_client_context();
  if (client_context_ == NULL) {
    client_context_ = new ::contextual_suggestions::SearchApiClientContext;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.SearchApiRequestContext.client_context)
  return client_context_;
}
inline ::contextual_suggestions::SearchApiClientContext* SearchApiRequestContext::release_client_context() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.SearchApiRequestContext.client_context)
  clear_has_client_context();
  ::contextual_suggestions::SearchApiClientContext* temp = client_context_;
  client_context_ = NULL;
  return temp;
}
inline void SearchApiRequestContext::set_allocated_client_context(::contextual_suggestions::SearchApiClientContext* client_context) {
  delete client_context_;
  client_context_ = client_context;
  if (client_context) {
    set_has_client_context();
  } else {
    clear_has_client_context();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.SearchApiRequestContext.client_context)
}

// optional .contextual_suggestions.LocalizationContext localization_context = 4;
inline bool SearchApiRequestContext::has_localization_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchApiRequestContext::set_has_localization_context() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchApiRequestContext::clear_has_localization_context() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchApiRequestContext::clear_localization_context() {
  if (localization_context_ != NULL) localization_context_->::contextual_suggestions::LocalizationContext::Clear();
  clear_has_localization_context();
}
inline const ::contextual_suggestions::LocalizationContext& SearchApiRequestContext::localization_context() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.SearchApiRequestContext.localization_context)
  return localization_context_ != NULL ? *localization_context_
                         : *::contextual_suggestions::LocalizationContext::internal_default_instance();
}
inline ::contextual_suggestions::LocalizationContext* SearchApiRequestContext::mutable_localization_context() {
  set_has_localization_context();
  if (localization_context_ == NULL) {
    localization_context_ = new ::contextual_suggestions::LocalizationContext;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.SearchApiRequestContext.localization_context)
  return localization_context_;
}
inline ::contextual_suggestions::LocalizationContext* SearchApiRequestContext::release_localization_context() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.SearchApiRequestContext.localization_context)
  clear_has_localization_context();
  ::contextual_suggestions::LocalizationContext* temp = localization_context_;
  localization_context_ = NULL;
  return temp;
}
inline void SearchApiRequestContext::set_allocated_localization_context(::contextual_suggestions::LocalizationContext* localization_context) {
  delete localization_context_;
  localization_context_ = localization_context;
  if (localization_context) {
    set_has_localization_context();
  } else {
    clear_has_localization_context();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.SearchApiRequestContext.localization_context)
}

// optional .contextual_suggestions.CookieRequestContext cookie_context = 3;
inline bool SearchApiRequestContext::has_cookie_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchApiRequestContext::set_has_cookie_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchApiRequestContext::clear_has_cookie_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchApiRequestContext::clear_cookie_context() {
  if (cookie_context_ != NULL) cookie_context_->::contextual_suggestions::CookieRequestContext::Clear();
  clear_has_cookie_context();
}
inline const ::contextual_suggestions::CookieRequestContext& SearchApiRequestContext::cookie_context() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.SearchApiRequestContext.cookie_context)
  return cookie_context_ != NULL ? *cookie_context_
                         : *::contextual_suggestions::CookieRequestContext::internal_default_instance();
}
inline ::contextual_suggestions::CookieRequestContext* SearchApiRequestContext::mutable_cookie_context() {
  set_has_cookie_context();
  if (cookie_context_ == NULL) {
    cookie_context_ = new ::contextual_suggestions::CookieRequestContext;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.SearchApiRequestContext.cookie_context)
  return cookie_context_;
}
inline ::contextual_suggestions::CookieRequestContext* SearchApiRequestContext::release_cookie_context() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.SearchApiRequestContext.cookie_context)
  clear_has_cookie_context();
  ::contextual_suggestions::CookieRequestContext* temp = cookie_context_;
  cookie_context_ = NULL;
  return temp;
}
inline void SearchApiRequestContext::set_allocated_cookie_context(::contextual_suggestions::CookieRequestContext* cookie_context) {
  delete cookie_context_;
  cookie_context_ = cookie_context;
  if (cookie_context) {
    set_has_cookie_context();
  } else {
    clear_has_cookie_context();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.SearchApiRequestContext.cookie_context)
}

// -------------------------------------------------------------------

// SearchApiClientContext

// optional .contextual_suggestions.ClientId client_id = 1;
inline bool SearchApiClientContext::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchApiClientContext::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchApiClientContext::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchApiClientContext::clear_client_id() {
  if (client_id_ != NULL) client_id_->::contextual_suggestions::ClientId::Clear();
  clear_has_client_id();
}
inline const ::contextual_suggestions::ClientId& SearchApiClientContext::client_id() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.SearchApiClientContext.client_id)
  return client_id_ != NULL ? *client_id_
                         : *::contextual_suggestions::ClientId::internal_default_instance();
}
inline ::contextual_suggestions::ClientId* SearchApiClientContext::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == NULL) {
    client_id_ = new ::contextual_suggestions::ClientId;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.SearchApiClientContext.client_id)
  return client_id_;
}
inline ::contextual_suggestions::ClientId* SearchApiClientContext::release_client_id() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.SearchApiClientContext.client_id)
  clear_has_client_id();
  ::contextual_suggestions::ClientId* temp = client_id_;
  client_id_ = NULL;
  return temp;
}
inline void SearchApiClientContext::set_allocated_client_id(::contextual_suggestions::ClientId* client_id) {
  delete client_id_;
  client_id_ = client_id;
  if (client_id) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.SearchApiClientContext.client_id)
}

// -------------------------------------------------------------------

// ClientId

// optional .contextual_suggestions.ClientId.ClientType client_type = 1;
inline bool ClientId::has_client_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientId::set_has_client_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientId::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientId::clear_client_type() {
  client_type_ = 0;
  clear_has_client_type();
}
inline ::contextual_suggestions::ClientId_ClientType ClientId::client_type() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.ClientId.client_type)
  return static_cast< ::contextual_suggestions::ClientId_ClientType >(client_type_);
}
inline void ClientId::set_client_type(::contextual_suggestions::ClientId_ClientType value) {
  assert(::contextual_suggestions::ClientId_ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.ClientId.client_type)
}

// -------------------------------------------------------------------

// LocalizationContext

// optional string language_code = 1;
inline bool LocalizationContext::has_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalizationContext::set_has_language_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalizationContext::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalizationContext::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language_code();
}
inline const ::std::string& LocalizationContext::language_code() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.LocalizationContext.language_code)
  return language_code_.GetNoArena();
}
inline void LocalizationContext::set_language_code(const ::std::string& value) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.LocalizationContext.language_code)
}
#if LANG_CXX11
inline void LocalizationContext::set_language_code(::std::string&& value) {
  set_has_language_code();
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.LocalizationContext.language_code)
}
#endif
inline void LocalizationContext::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.LocalizationContext.language_code)
}
inline void LocalizationContext::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.LocalizationContext.language_code)
}
inline ::std::string* LocalizationContext::mutable_language_code() {
  set_has_language_code();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.LocalizationContext.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocalizationContext::release_language_code() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.LocalizationContext.language_code)
  clear_has_language_code();
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalizationContext::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    set_has_language_code();
  } else {
    clear_has_language_code();
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.LocalizationContext.language_code)
}

// optional string country_code = 2;
inline bool LocalizationContext::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalizationContext::set_has_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocalizationContext::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocalizationContext::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
inline const ::std::string& LocalizationContext::country_code() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.LocalizationContext.country_code)
  return country_code_.GetNoArena();
}
inline void LocalizationContext::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.LocalizationContext.country_code)
}
#if LANG_CXX11
inline void LocalizationContext::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.LocalizationContext.country_code)
}
#endif
inline void LocalizationContext::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.LocalizationContext.country_code)
}
inline void LocalizationContext::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.LocalizationContext.country_code)
}
inline ::std::string* LocalizationContext::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.LocalizationContext.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocalizationContext::release_country_code() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.LocalizationContext.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalizationContext::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.LocalizationContext.country_code)
}

// optional string search_domain = 4;
inline bool LocalizationContext::has_search_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocalizationContext::set_has_search_domain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocalizationContext::clear_has_search_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocalizationContext::clear_search_domain() {
  search_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_domain();
}
inline const ::std::string& LocalizationContext::search_domain() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.LocalizationContext.search_domain)
  return search_domain_.GetNoArena();
}
inline void LocalizationContext::set_search_domain(const ::std::string& value) {
  set_has_search_domain();
  search_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.LocalizationContext.search_domain)
}
#if LANG_CXX11
inline void LocalizationContext::set_search_domain(::std::string&& value) {
  set_has_search_domain();
  search_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.LocalizationContext.search_domain)
}
#endif
inline void LocalizationContext::set_search_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_domain();
  search_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.LocalizationContext.search_domain)
}
inline void LocalizationContext::set_search_domain(const char* value, size_t size) {
  set_has_search_domain();
  search_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.LocalizationContext.search_domain)
}
inline ::std::string* LocalizationContext::mutable_search_domain() {
  set_has_search_domain();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.LocalizationContext.search_domain)
  return search_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocalizationContext::release_search_domain() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.LocalizationContext.search_domain)
  clear_has_search_domain();
  return search_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalizationContext::set_allocated_search_domain(::std::string* search_domain) {
  if (search_domain != NULL) {
    set_has_search_domain();
  } else {
    clear_has_search_domain();
  }
  search_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_domain);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.LocalizationContext.search_domain)
}

// optional string spoken_language = 7;
inline bool LocalizationContext::has_spoken_language() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocalizationContext::set_has_spoken_language() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocalizationContext::clear_has_spoken_language() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocalizationContext::clear_spoken_language() {
  spoken_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spoken_language();
}
inline const ::std::string& LocalizationContext::spoken_language() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.LocalizationContext.spoken_language)
  return spoken_language_.GetNoArena();
}
inline void LocalizationContext::set_spoken_language(const ::std::string& value) {
  set_has_spoken_language();
  spoken_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.LocalizationContext.spoken_language)
}
#if LANG_CXX11
inline void LocalizationContext::set_spoken_language(::std::string&& value) {
  set_has_spoken_language();
  spoken_language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.LocalizationContext.spoken_language)
}
#endif
inline void LocalizationContext::set_spoken_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_spoken_language();
  spoken_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.LocalizationContext.spoken_language)
}
inline void LocalizationContext::set_spoken_language(const char* value, size_t size) {
  set_has_spoken_language();
  spoken_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.LocalizationContext.spoken_language)
}
inline ::std::string* LocalizationContext::mutable_spoken_language() {
  set_has_spoken_language();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.LocalizationContext.spoken_language)
  return spoken_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocalizationContext::release_spoken_language() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.LocalizationContext.spoken_language)
  clear_has_spoken_language();
  return spoken_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalizationContext::set_allocated_spoken_language(::std::string* spoken_language) {
  if (spoken_language != NULL) {
    set_has_spoken_language();
  } else {
    clear_has_spoken_language();
  }
  spoken_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spoken_language);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.LocalizationContext.spoken_language)
}

// -------------------------------------------------------------------

// CookieRequestContext

// optional string nid = 1;
inline bool CookieRequestContext::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CookieRequestContext::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CookieRequestContext::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CookieRequestContext::clear_nid() {
  nid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nid();
}
inline const ::std::string& CookieRequestContext::nid() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.CookieRequestContext.nid)
  return nid_.GetNoArena();
}
inline void CookieRequestContext::set_nid(const ::std::string& value) {
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.CookieRequestContext.nid)
}
#if LANG_CXX11
inline void CookieRequestContext::set_nid(::std::string&& value) {
  set_has_nid();
  nid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.CookieRequestContext.nid)
}
#endif
inline void CookieRequestContext::set_nid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.CookieRequestContext.nid)
}
inline void CookieRequestContext::set_nid(const char* value, size_t size) {
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.CookieRequestContext.nid)
}
inline ::std::string* CookieRequestContext::mutable_nid() {
  set_has_nid();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.CookieRequestContext.nid)
  return nid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookieRequestContext::release_nid() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.CookieRequestContext.nid)
  clear_has_nid();
  return nid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieRequestContext::set_allocated_nid(::std::string* nid) {
  if (nid != NULL) {
    set_has_nid();
  } else {
    clear_has_nid();
  }
  nid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nid);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.CookieRequestContext.nid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace contextual_suggestions

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::contextual_suggestions::ClientId_ClientType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto__INCLUDED
