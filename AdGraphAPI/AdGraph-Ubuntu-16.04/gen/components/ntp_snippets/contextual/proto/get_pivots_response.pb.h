// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_pivots_response.proto

#ifndef PROTOBUF_get_5fpivots_5fresponse_2eproto__INCLUDED
#define PROTOBUF_get_5fpivots_5fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace contextual_suggestions {
class AutoPeekConditions;
class AutoPeekConditionsDefaultTypeInternal;
extern AutoPeekConditionsDefaultTypeInternal _AutoPeekConditions_default_instance_;
class ClusterLabel;
class ClusterLabelDefaultTypeInternal;
extern ClusterLabelDefaultTypeInternal _ClusterLabel_default_instance_;
class GetPivotsResponse;
class GetPivotsResponseDefaultTypeInternal;
extern GetPivotsResponseDefaultTypeInternal _GetPivotsResponse_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageId;
class ImageIdDefaultTypeInternal;
extern ImageIdDefaultTypeInternal _ImageId_default_instance_;
class ImageSource;
class ImageSourceDefaultTypeInternal;
extern ImageSourceDefaultTypeInternal _ImageSource_default_instance_;
class PeekText;
class PeekTextDefaultTypeInternal;
extern PeekTextDefaultTypeInternal _PeekText_default_instance_;
class PivotCluster;
class PivotClusterDefaultTypeInternal;
extern PivotClusterDefaultTypeInternal _PivotCluster_default_instance_;
class PivotDocument;
class PivotDocumentDefaultTypeInternal;
extern PivotDocumentDefaultTypeInternal _PivotDocument_default_instance_;
class PivotItem;
class PivotItemDefaultTypeInternal;
extern PivotItemDefaultTypeInternal _PivotItem_default_instance_;
class Pivots;
class PivotsDefaultTypeInternal;
extern PivotsDefaultTypeInternal _Pivots_default_instance_;
class RasterImage;
class RasterImageDefaultTypeInternal;
extern RasterImageDefaultTypeInternal _RasterImage_default_instance_;
class Url;
class UrlDefaultTypeInternal;
extern UrlDefaultTypeInternal _Url_default_instance_;
}  // namespace contextual_suggestions

namespace contextual_suggestions {

namespace protobuf_get_5fpivots_5fresponse_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_get_5fpivots_5fresponse_2eproto

// ===================================================================

class GetPivotsResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.GetPivotsResponse) */ {
 public:
  GetPivotsResponse();
  virtual ~GetPivotsResponse();

  GetPivotsResponse(const GetPivotsResponse& from);

  inline GetPivotsResponse& operator=(const GetPivotsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GetPivotsResponse& default_instance();

  static inline const GetPivotsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPivotsResponse*>(
               &_GetPivotsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(GetPivotsResponse* other);

  // implements Message ----------------------------------------------

  inline GetPivotsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPivotsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const GetPivotsResponse& from);
  void MergeFrom(const GetPivotsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPivotsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .contextual_suggestions.Pivots pivots = 2;
  bool has_pivots() const;
  void clear_pivots();
  static const int kPivotsFieldNumber = 2;
  const ::contextual_suggestions::Pivots& pivots() const;
  ::contextual_suggestions::Pivots* mutable_pivots();
  ::contextual_suggestions::Pivots* release_pivots();
  void set_allocated_pivots(::contextual_suggestions::Pivots* pivots);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.GetPivotsResponse)
 private:
  void set_has_pivots();
  void clear_has_pivots();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::contextual_suggestions::Pivots* pivots_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pivots : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.Pivots) */ {
 public:
  Pivots();
  virtual ~Pivots();

  Pivots(const Pivots& from);

  inline Pivots& operator=(const Pivots& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Pivots& default_instance();

  static inline const Pivots* internal_default_instance() {
    return reinterpret_cast<const Pivots*>(
               &_Pivots_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Pivots* other);

  // implements Message ----------------------------------------------

  inline Pivots* New() const PROTOBUF_FINAL { return New(NULL); }

  Pivots* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Pivots& from);
  void MergeFrom(const Pivots& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pivots* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .contextual_suggestions.PivotItem item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::contextual_suggestions::PivotItem& item(int index) const;
  ::contextual_suggestions::PivotItem* mutable_item(int index);
  ::contextual_suggestions::PivotItem* add_item();
  ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >&
      item() const;

  // optional .contextual_suggestions.AutoPeekConditions auto_peek_conditions = 3;
  bool has_auto_peek_conditions() const;
  void clear_auto_peek_conditions();
  static const int kAutoPeekConditionsFieldNumber = 3;
  const ::contextual_suggestions::AutoPeekConditions& auto_peek_conditions() const;
  ::contextual_suggestions::AutoPeekConditions* mutable_auto_peek_conditions();
  ::contextual_suggestions::AutoPeekConditions* release_auto_peek_conditions();
  void set_allocated_auto_peek_conditions(::contextual_suggestions::AutoPeekConditions* auto_peek_conditions);

  // optional .contextual_suggestions.PeekText peek_text = 4;
  bool has_peek_text() const;
  void clear_peek_text();
  static const int kPeekTextFieldNumber = 4;
  const ::contextual_suggestions::PeekText& peek_text() const;
  ::contextual_suggestions::PeekText* mutable_peek_text();
  ::contextual_suggestions::PeekText* release_peek_text();
  void set_allocated_peek_text(::contextual_suggestions::PeekText* peek_text);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.Pivots)
 private:
  void set_has_auto_peek_conditions();
  void clear_has_auto_peek_conditions();
  void set_has_peek_text();
  void clear_has_peek_text();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem > item_;
  ::contextual_suggestions::AutoPeekConditions* auto_peek_conditions_;
  ::contextual_suggestions::PeekText* peek_text_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PivotItem : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.PivotItem) */ {
 public:
  PivotItem();
  virtual ~PivotItem();

  PivotItem(const PivotItem& from);

  inline PivotItem& operator=(const PivotItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PivotItem& default_instance();

  enum KindCase {
    kDocument = 1,
    kCluster = 6,
    KIND_NOT_SET = 0,
  };

  static inline const PivotItem* internal_default_instance() {
    return reinterpret_cast<const PivotItem*>(
               &_PivotItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PivotItem* other);

  // implements Message ----------------------------------------------

  inline PivotItem* New() const PROTOBUF_FINAL { return New(NULL); }

  PivotItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PivotItem& from);
  void MergeFrom(const PivotItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PivotItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .contextual_suggestions.PivotDocument document = 1;
  bool has_document() const;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::contextual_suggestions::PivotDocument& document() const;
  ::contextual_suggestions::PivotDocument* mutable_document();
  ::contextual_suggestions::PivotDocument* release_document();
  void set_allocated_document(::contextual_suggestions::PivotDocument* document);

  // optional .contextual_suggestions.PivotCluster cluster = 6;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 6;
  const ::contextual_suggestions::PivotCluster& cluster() const;
  ::contextual_suggestions::PivotCluster* mutable_cluster();
  ::contextual_suggestions::PivotCluster* release_cluster();
  void set_allocated_cluster(::contextual_suggestions::PivotCluster* cluster);

  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:contextual_suggestions.PivotItem)
 private:
  void set_has_document();
  void set_has_cluster();

  inline bool has_kind() const;
  void clear_kind();
  inline void clear_has_kind();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  union KindUnion {
    KindUnion() {}
    ::contextual_suggestions::PivotDocument* document_;
    ::contextual_suggestions::PivotCluster* cluster_;
  } kind_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PivotDocument : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.PivotDocument) */ {
 public:
  PivotDocument();
  virtual ~PivotDocument();

  PivotDocument(const PivotDocument& from);

  inline PivotDocument& operator=(const PivotDocument& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PivotDocument& default_instance();

  static inline const PivotDocument* internal_default_instance() {
    return reinterpret_cast<const PivotDocument*>(
               &_PivotDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PivotDocument* other);

  // implements Message ----------------------------------------------

  inline PivotDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  PivotDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PivotDocument& from);
  void MergeFrom(const PivotDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PivotDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string summary = 4;
  bool has_summary() const;
  void clear_summary();
  static const int kSummaryFieldNumber = 4;
  const ::std::string& summary() const;
  void set_summary(const ::std::string& value);
  #if LANG_CXX11
  void set_summary(::std::string&& value);
  #endif
  void set_summary(const char* value);
  void set_summary(const char* value, size_t size);
  ::std::string* mutable_summary();
  ::std::string* release_summary();
  void set_allocated_summary(::std::string* summary);

  // optional string site_name = 5;
  bool has_site_name() const;
  void clear_site_name();
  static const int kSiteNameFieldNumber = 5;
  const ::std::string& site_name() const;
  void set_site_name(const ::std::string& value);
  #if LANG_CXX11
  void set_site_name(::std::string&& value);
  #endif
  void set_site_name(const char* value);
  void set_site_name(const char* value, size_t size);
  ::std::string* mutable_site_name();
  ::std::string* release_site_name();
  void set_allocated_site_name(::std::string* site_name);

  // optional .contextual_suggestions.Url url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::contextual_suggestions::Url& url() const;
  ::contextual_suggestions::Url* mutable_url();
  ::contextual_suggestions::Url* release_url();
  void set_allocated_url(::contextual_suggestions::Url* url);

  // optional .contextual_suggestions.Image image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::contextual_suggestions::Image& image() const;
  ::contextual_suggestions::Image* mutable_image();
  ::contextual_suggestions::Image* release_image();
  void set_allocated_image(::contextual_suggestions::Image* image);

  // optional .contextual_suggestions.Image favicon_image = 6;
  bool has_favicon_image() const;
  void clear_favicon_image();
  static const int kFaviconImageFieldNumber = 6;
  const ::contextual_suggestions::Image& favicon_image() const;
  ::contextual_suggestions::Image* mutable_favicon_image();
  ::contextual_suggestions::Image* release_favicon_image();
  void set_allocated_favicon_image(::contextual_suggestions::Image* favicon_image);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.PivotDocument)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_image();
  void clear_has_image();
  void set_has_title();
  void clear_has_title();
  void set_has_summary();
  void clear_has_summary();
  void set_has_site_name();
  void clear_has_site_name();
  void set_has_favicon_image();
  void clear_has_favicon_image();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr summary_;
  ::google::protobuf::internal::ArenaStringPtr site_name_;
  ::contextual_suggestions::Url* url_;
  ::contextual_suggestions::Image* image_;
  ::contextual_suggestions::Image* favicon_image_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PivotCluster : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.PivotCluster) */ {
 public:
  PivotCluster();
  virtual ~PivotCluster();

  PivotCluster(const PivotCluster& from);

  inline PivotCluster& operator=(const PivotCluster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PivotCluster& default_instance();

  static inline const PivotCluster* internal_default_instance() {
    return reinterpret_cast<const PivotCluster*>(
               &_PivotCluster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PivotCluster* other);

  // implements Message ----------------------------------------------

  inline PivotCluster* New() const PROTOBUF_FINAL { return New(NULL); }

  PivotCluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PivotCluster& from);
  void MergeFrom(const PivotCluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PivotCluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .contextual_suggestions.PivotItem item = 2;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 2;
  const ::contextual_suggestions::PivotItem& item(int index) const;
  ::contextual_suggestions::PivotItem* mutable_item(int index);
  ::contextual_suggestions::PivotItem* add_item();
  ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >&
      item() const;

  // optional .contextual_suggestions.ClusterLabel label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::contextual_suggestions::ClusterLabel& label() const;
  ::contextual_suggestions::ClusterLabel* mutable_label();
  ::contextual_suggestions::ClusterLabel* release_label();
  void set_allocated_label(::contextual_suggestions::ClusterLabel* label);

  // optional int32 num_items_to_display_pre_expansion = 3 [default = 1];
  bool has_num_items_to_display_pre_expansion() const;
  void clear_num_items_to_display_pre_expansion();
  static const int kNumItemsToDisplayPreExpansionFieldNumber = 3;
  ::google::protobuf::int32 num_items_to_display_pre_expansion() const;
  void set_num_items_to_display_pre_expansion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.PivotCluster)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_num_items_to_display_pre_expansion();
  void clear_has_num_items_to_display_pre_expansion();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem > item_;
  ::contextual_suggestions::ClusterLabel* label_;
  ::google::protobuf::int32 num_items_to_display_pre_expansion_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterLabel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.ClusterLabel) */ {
 public:
  ClusterLabel();
  virtual ~ClusterLabel();

  ClusterLabel(const ClusterLabel& from);

  inline ClusterLabel& operator=(const ClusterLabel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClusterLabel& default_instance();

  static inline const ClusterLabel* internal_default_instance() {
    return reinterpret_cast<const ClusterLabel*>(
               &_ClusterLabel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ClusterLabel* other);

  // implements Message ----------------------------------------------

  inline ClusterLabel* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterLabel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClusterLabel& from);
  void MergeFrom(const ClusterLabel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClusterLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.ClusterLabel)
 private:
  void set_has_label();
  void clear_has_label();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AutoPeekConditions : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.AutoPeekConditions) */ {
 public:
  AutoPeekConditions();
  virtual ~AutoPeekConditions();

  AutoPeekConditions(const AutoPeekConditions& from);

  inline AutoPeekConditions& operator=(const AutoPeekConditions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AutoPeekConditions& default_instance();

  static inline const AutoPeekConditions* internal_default_instance() {
    return reinterpret_cast<const AutoPeekConditions*>(
               &_AutoPeekConditions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AutoPeekConditions* other);

  // implements Message ----------------------------------------------

  inline AutoPeekConditions* New() const PROTOBUF_FINAL { return New(NULL); }

  AutoPeekConditions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AutoPeekConditions& from);
  void MergeFrom(const AutoPeekConditions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutoPeekConditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float page_scroll_percentage = 2 [default = 0];
  bool has_page_scroll_percentage() const;
  void clear_page_scroll_percentage();
  static const int kPageScrollPercentageFieldNumber = 2;
  float page_scroll_percentage() const;
  void set_page_scroll_percentage(float value);

  // optional float minimum_seconds_on_page = 3 [default = 0];
  bool has_minimum_seconds_on_page() const;
  void clear_minimum_seconds_on_page();
  static const int kMinimumSecondsOnPageFieldNumber = 3;
  float minimum_seconds_on_page() const;
  void set_minimum_seconds_on_page(float value);

  // optional uint64 maximum_number_of_peeks = 4 [default = 0];
  bool has_maximum_number_of_peeks() const;
  void clear_maximum_number_of_peeks();
  static const int kMaximumNumberOfPeeksFieldNumber = 4;
  ::google::protobuf::uint64 maximum_number_of_peeks() const;
  void set_maximum_number_of_peeks(::google::protobuf::uint64 value);

  // optional float confidence = 1 [default = 1];
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 1;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.AutoPeekConditions)
 private:
  void set_has_confidence();
  void clear_has_confidence();
  void set_has_page_scroll_percentage();
  void clear_has_page_scroll_percentage();
  void set_has_minimum_seconds_on_page();
  void clear_has_minimum_seconds_on_page();
  void set_has_maximum_number_of_peeks();
  void clear_has_maximum_number_of_peeks();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float page_scroll_percentage_;
  float minimum_seconds_on_page_;
  ::google::protobuf::uint64 maximum_number_of_peeks_;
  float confidence_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeekText : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.PeekText) */ {
 public:
  PeekText();
  virtual ~PeekText();

  PeekText(const PeekText& from);

  inline PeekText& operator=(const PeekText& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PeekText& default_instance();

  static inline const PeekText* internal_default_instance() {
    return reinterpret_cast<const PeekText*>(
               &_PeekText_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PeekText* other);

  // implements Message ----------------------------------------------

  inline PeekText* New() const PROTOBUF_FINAL { return New(NULL); }

  PeekText* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PeekText& from);
  void MergeFrom(const PeekText& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeekText* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.PeekText)
 private:
  void set_has_text();
  void clear_has_text();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Url : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.Url) */ {
 public:
  Url();
  virtual ~Url();

  Url(const Url& from);

  inline Url& operator=(const Url& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Url& default_instance();

  static inline const Url* internal_default_instance() {
    return reinterpret_cast<const Url*>(
               &_Url_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Url* other);

  // implements Message ----------------------------------------------

  inline Url* New() const PROTOBUF_FINAL { return New(NULL); }

  Url* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Url& from);
  void MergeFrom(const Url& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Url* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string raw_url = 1;
  bool has_raw_url() const;
  void clear_raw_url();
  static const int kRawUrlFieldNumber = 1;
  const ::std::string& raw_url() const;
  void set_raw_url(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_url(::std::string&& value);
  #endif
  void set_raw_url(const char* value);
  void set_raw_url(const char* value, size_t size);
  ::std::string* mutable_raw_url();
  ::std::string* release_raw_url();
  void set_allocated_raw_url(::std::string* raw_url);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.Url)
 private:
  void set_has_raw_url();
  void clear_has_raw_url();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr raw_url_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Image& default_instance();

  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Image* other);

  // implements Message ----------------------------------------------

  inline Image* New() const PROTOBUF_FINAL { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .contextual_suggestions.ImageId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::contextual_suggestions::ImageId& id() const;
  ::contextual_suggestions::ImageId* mutable_id();
  ::contextual_suggestions::ImageId* release_id();
  void set_allocated_id(::contextual_suggestions::ImageId* id);

  // optional .contextual_suggestions.ImageSource source_data = 2;
  bool has_source_data() const;
  void clear_source_data();
  static const int kSourceDataFieldNumber = 2;
  const ::contextual_suggestions::ImageSource& source_data() const;
  ::contextual_suggestions::ImageSource* mutable_source_data();
  ::contextual_suggestions::ImageSource* release_source_data();
  void set_allocated_source_data(::contextual_suggestions::ImageSource* source_data);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.Image)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_source_data();
  void clear_has_source_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::contextual_suggestions::ImageId* id_;
  ::contextual_suggestions::ImageSource* source_data_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageId : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.ImageId) */ {
 public:
  ImageId();
  virtual ~ImageId();

  ImageId(const ImageId& from);

  inline ImageId& operator=(const ImageId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ImageId& default_instance();

  static inline const ImageId* internal_default_instance() {
    return reinterpret_cast<const ImageId*>(
               &_ImageId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ImageId* other);

  // implements Message ----------------------------------------------

  inline ImageId* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ImageId& from);
  void MergeFrom(const ImageId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string encrypted_docid = 1;
  bool has_encrypted_docid() const;
  void clear_encrypted_docid();
  static const int kEncryptedDocidFieldNumber = 1;
  const ::std::string& encrypted_docid() const;
  void set_encrypted_docid(const ::std::string& value);
  #if LANG_CXX11
  void set_encrypted_docid(::std::string&& value);
  #endif
  void set_encrypted_docid(const char* value);
  void set_encrypted_docid(const char* value, size_t size);
  ::std::string* mutable_encrypted_docid();
  ::std::string* release_encrypted_docid();
  void set_allocated_encrypted_docid(::std::string* encrypted_docid);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.ImageId)
 private:
  void set_has_encrypted_docid();
  void clear_has_encrypted_docid();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr encrypted_docid_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageSource : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.ImageSource) */ {
 public:
  ImageSource();
  virtual ~ImageSource();

  ImageSource(const ImageSource& from);

  inline ImageSource& operator=(const ImageSource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ImageSource& default_instance();

  static inline const ImageSource* internal_default_instance() {
    return reinterpret_cast<const ImageSource*>(
               &_ImageSource_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ImageSource* other);

  // implements Message ----------------------------------------------

  inline ImageSource* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ImageSource& from);
  void MergeFrom(const ImageSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .contextual_suggestions.RasterImage raster = 1;
  bool has_raster() const;
  void clear_raster();
  static const int kRasterFieldNumber = 1;
  const ::contextual_suggestions::RasterImage& raster() const;
  ::contextual_suggestions::RasterImage* mutable_raster();
  ::contextual_suggestions::RasterImage* release_raster();
  void set_allocated_raster(::contextual_suggestions::RasterImage* raster);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.ImageSource)
 private:
  void set_has_raster();
  void clear_has_raster();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::contextual_suggestions::RasterImage* raster_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RasterImage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.RasterImage) */ {
 public:
  RasterImage();
  virtual ~RasterImage();

  RasterImage(const RasterImage& from);

  inline RasterImage& operator=(const RasterImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RasterImage& default_instance();

  static inline const RasterImage* internal_default_instance() {
    return reinterpret_cast<const RasterImage*>(
               &_RasterImage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RasterImage* other);

  // implements Message ----------------------------------------------

  inline RasterImage* New() const PROTOBUF_FINAL { return New(NULL); }

  RasterImage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RasterImage& from);
  void MergeFrom(const RasterImage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RasterImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .contextual_suggestions.Url url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::contextual_suggestions::Url& url() const;
  ::contextual_suggestions::Url* mutable_url();
  ::contextual_suggestions::Url* release_url();
  void set_allocated_url(::contextual_suggestions::Url* url);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.RasterImage)
 private:
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::contextual_suggestions::Url* url_;
  friend struct protobuf_get_5fpivots_5fresponse_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPivotsResponse

// optional .contextual_suggestions.Pivots pivots = 2;
inline bool GetPivotsResponse::has_pivots() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPivotsResponse::set_has_pivots() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPivotsResponse::clear_has_pivots() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPivotsResponse::clear_pivots() {
  if (pivots_ != NULL) pivots_->::contextual_suggestions::Pivots::Clear();
  clear_has_pivots();
}
inline const ::contextual_suggestions::Pivots& GetPivotsResponse::pivots() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsResponse.pivots)
  return pivots_ != NULL ? *pivots_
                         : *::contextual_suggestions::Pivots::internal_default_instance();
}
inline ::contextual_suggestions::Pivots* GetPivotsResponse::mutable_pivots() {
  set_has_pivots();
  if (pivots_ == NULL) {
    pivots_ = new ::contextual_suggestions::Pivots;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsResponse.pivots)
  return pivots_;
}
inline ::contextual_suggestions::Pivots* GetPivotsResponse::release_pivots() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsResponse.pivots)
  clear_has_pivots();
  ::contextual_suggestions::Pivots* temp = pivots_;
  pivots_ = NULL;
  return temp;
}
inline void GetPivotsResponse::set_allocated_pivots(::contextual_suggestions::Pivots* pivots) {
  delete pivots_;
  pivots_ = pivots;
  if (pivots) {
    set_has_pivots();
  } else {
    clear_has_pivots();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsResponse.pivots)
}

// -------------------------------------------------------------------

// Pivots

// repeated .contextual_suggestions.PivotItem item = 1;
inline int Pivots::item_size() const {
  return item_.size();
}
inline void Pivots::clear_item() {
  item_.Clear();
}
inline const ::contextual_suggestions::PivotItem& Pivots::item(int index) const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Pivots.item)
  return item_.Get(index);
}
inline ::contextual_suggestions::PivotItem* Pivots::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Pivots.item)
  return item_.Mutable(index);
}
inline ::contextual_suggestions::PivotItem* Pivots::add_item() {
  // @@protoc_insertion_point(field_add:contextual_suggestions.Pivots.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >*
Pivots::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:contextual_suggestions.Pivots.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >&
Pivots::item() const {
  // @@protoc_insertion_point(field_list:contextual_suggestions.Pivots.item)
  return item_;
}

// optional .contextual_suggestions.AutoPeekConditions auto_peek_conditions = 3;
inline bool Pivots::has_auto_peek_conditions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pivots::set_has_auto_peek_conditions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pivots::clear_has_auto_peek_conditions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pivots::clear_auto_peek_conditions() {
  if (auto_peek_conditions_ != NULL) auto_peek_conditions_->::contextual_suggestions::AutoPeekConditions::Clear();
  clear_has_auto_peek_conditions();
}
inline const ::contextual_suggestions::AutoPeekConditions& Pivots::auto_peek_conditions() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Pivots.auto_peek_conditions)
  return auto_peek_conditions_ != NULL ? *auto_peek_conditions_
                         : *::contextual_suggestions::AutoPeekConditions::internal_default_instance();
}
inline ::contextual_suggestions::AutoPeekConditions* Pivots::mutable_auto_peek_conditions() {
  set_has_auto_peek_conditions();
  if (auto_peek_conditions_ == NULL) {
    auto_peek_conditions_ = new ::contextual_suggestions::AutoPeekConditions;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Pivots.auto_peek_conditions)
  return auto_peek_conditions_;
}
inline ::contextual_suggestions::AutoPeekConditions* Pivots::release_auto_peek_conditions() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.Pivots.auto_peek_conditions)
  clear_has_auto_peek_conditions();
  ::contextual_suggestions::AutoPeekConditions* temp = auto_peek_conditions_;
  auto_peek_conditions_ = NULL;
  return temp;
}
inline void Pivots::set_allocated_auto_peek_conditions(::contextual_suggestions::AutoPeekConditions* auto_peek_conditions) {
  delete auto_peek_conditions_;
  auto_peek_conditions_ = auto_peek_conditions;
  if (auto_peek_conditions) {
    set_has_auto_peek_conditions();
  } else {
    clear_has_auto_peek_conditions();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.Pivots.auto_peek_conditions)
}

// optional .contextual_suggestions.PeekText peek_text = 4;
inline bool Pivots::has_peek_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pivots::set_has_peek_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pivots::clear_has_peek_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pivots::clear_peek_text() {
  if (peek_text_ != NULL) peek_text_->::contextual_suggestions::PeekText::Clear();
  clear_has_peek_text();
}
inline const ::contextual_suggestions::PeekText& Pivots::peek_text() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Pivots.peek_text)
  return peek_text_ != NULL ? *peek_text_
                         : *::contextual_suggestions::PeekText::internal_default_instance();
}
inline ::contextual_suggestions::PeekText* Pivots::mutable_peek_text() {
  set_has_peek_text();
  if (peek_text_ == NULL) {
    peek_text_ = new ::contextual_suggestions::PeekText;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Pivots.peek_text)
  return peek_text_;
}
inline ::contextual_suggestions::PeekText* Pivots::release_peek_text() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.Pivots.peek_text)
  clear_has_peek_text();
  ::contextual_suggestions::PeekText* temp = peek_text_;
  peek_text_ = NULL;
  return temp;
}
inline void Pivots::set_allocated_peek_text(::contextual_suggestions::PeekText* peek_text) {
  delete peek_text_;
  peek_text_ = peek_text;
  if (peek_text) {
    set_has_peek_text();
  } else {
    clear_has_peek_text();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.Pivots.peek_text)
}

// -------------------------------------------------------------------

// PivotItem

// optional .contextual_suggestions.PivotDocument document = 1;
inline bool PivotItem::has_document() const {
  return kind_case() == kDocument;
}
inline void PivotItem::set_has_document() {
  _oneof_case_[0] = kDocument;
}
inline void PivotItem::clear_document() {
  if (has_document()) {
    delete kind_.document_;
    clear_has_kind();
  }
}
inline  const ::contextual_suggestions::PivotDocument& PivotItem::document() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotItem.document)
  return has_document()
      ? *kind_.document_
      : ::contextual_suggestions::PivotDocument::default_instance();
}
inline ::contextual_suggestions::PivotDocument* PivotItem::mutable_document() {
  if (!has_document()) {
    clear_kind();
    set_has_document();
    kind_.document_ = new ::contextual_suggestions::PivotDocument;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotItem.document)
  return kind_.document_;
}
inline ::contextual_suggestions::PivotDocument* PivotItem::release_document() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotItem.document)
  if (has_document()) {
    clear_has_kind();
    ::contextual_suggestions::PivotDocument* temp = kind_.document_;
    kind_.document_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PivotItem::set_allocated_document(::contextual_suggestions::PivotDocument* document) {
  clear_kind();
  if (document) {
    set_has_document();
    kind_.document_ = document;
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotItem.document)
}

// optional .contextual_suggestions.PivotCluster cluster = 6;
inline bool PivotItem::has_cluster() const {
  return kind_case() == kCluster;
}
inline void PivotItem::set_has_cluster() {
  _oneof_case_[0] = kCluster;
}
inline void PivotItem::clear_cluster() {
  if (has_cluster()) {
    delete kind_.cluster_;
    clear_has_kind();
  }
}
inline  const ::contextual_suggestions::PivotCluster& PivotItem::cluster() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotItem.cluster)
  return has_cluster()
      ? *kind_.cluster_
      : ::contextual_suggestions::PivotCluster::default_instance();
}
inline ::contextual_suggestions::PivotCluster* PivotItem::mutable_cluster() {
  if (!has_cluster()) {
    clear_kind();
    set_has_cluster();
    kind_.cluster_ = new ::contextual_suggestions::PivotCluster;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotItem.cluster)
  return kind_.cluster_;
}
inline ::contextual_suggestions::PivotCluster* PivotItem::release_cluster() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotItem.cluster)
  if (has_cluster()) {
    clear_has_kind();
    ::contextual_suggestions::PivotCluster* temp = kind_.cluster_;
    kind_.cluster_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PivotItem::set_allocated_cluster(::contextual_suggestions::PivotCluster* cluster) {
  clear_kind();
  if (cluster) {
    set_has_cluster();
    kind_.cluster_ = cluster;
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotItem.cluster)
}

inline bool PivotItem::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void PivotItem::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline PivotItem::KindCase PivotItem::kind_case() const {
  return PivotItem::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PivotDocument

// optional .contextual_suggestions.Url url = 1;
inline bool PivotDocument::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PivotDocument::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PivotDocument::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PivotDocument::clear_url() {
  if (url_ != NULL) url_->::contextual_suggestions::Url::Clear();
  clear_has_url();
}
inline const ::contextual_suggestions::Url& PivotDocument::url() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.url)
  return url_ != NULL ? *url_
                         : *::contextual_suggestions::Url::internal_default_instance();
}
inline ::contextual_suggestions::Url* PivotDocument::mutable_url() {
  set_has_url();
  if (url_ == NULL) {
    url_ = new ::contextual_suggestions::Url;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.url)
  return url_;
}
inline ::contextual_suggestions::Url* PivotDocument::release_url() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.url)
  clear_has_url();
  ::contextual_suggestions::Url* temp = url_;
  url_ = NULL;
  return temp;
}
inline void PivotDocument::set_allocated_url(::contextual_suggestions::Url* url) {
  delete url_;
  url_ = url;
  if (url) {
    set_has_url();
  } else {
    clear_has_url();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.url)
}

// optional .contextual_suggestions.Image image = 2;
inline bool PivotDocument::has_image() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PivotDocument::set_has_image() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PivotDocument::clear_has_image() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PivotDocument::clear_image() {
  if (image_ != NULL) image_->::contextual_suggestions::Image::Clear();
  clear_has_image();
}
inline const ::contextual_suggestions::Image& PivotDocument::image() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.image)
  return image_ != NULL ? *image_
                         : *::contextual_suggestions::Image::internal_default_instance();
}
inline ::contextual_suggestions::Image* PivotDocument::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::contextual_suggestions::Image;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.image)
  return image_;
}
inline ::contextual_suggestions::Image* PivotDocument::release_image() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.image)
  clear_has_image();
  ::contextual_suggestions::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline void PivotDocument::set_allocated_image(::contextual_suggestions::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.image)
}

// optional string title = 3;
inline bool PivotDocument::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PivotDocument::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PivotDocument::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PivotDocument::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& PivotDocument::title() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.title)
  return title_.GetNoArena();
}
inline void PivotDocument::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocument.title)
}
#if LANG_CXX11
inline void PivotDocument::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.PivotDocument.title)
}
#endif
inline void PivotDocument::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.PivotDocument.title)
}
inline void PivotDocument::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.PivotDocument.title)
}
inline ::std::string* PivotDocument::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PivotDocument::release_title() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PivotDocument::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.title)
}

// optional string summary = 4;
inline bool PivotDocument::has_summary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PivotDocument::set_has_summary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PivotDocument::clear_has_summary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PivotDocument::clear_summary() {
  summary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_summary();
}
inline const ::std::string& PivotDocument::summary() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.summary)
  return summary_.GetNoArena();
}
inline void PivotDocument::set_summary(const ::std::string& value) {
  set_has_summary();
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocument.summary)
}
#if LANG_CXX11
inline void PivotDocument::set_summary(::std::string&& value) {
  set_has_summary();
  summary_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.PivotDocument.summary)
}
#endif
inline void PivotDocument::set_summary(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_summary();
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.PivotDocument.summary)
}
inline void PivotDocument::set_summary(const char* value, size_t size) {
  set_has_summary();
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.PivotDocument.summary)
}
inline ::std::string* PivotDocument::mutable_summary() {
  set_has_summary();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.summary)
  return summary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PivotDocument::release_summary() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.summary)
  clear_has_summary();
  return summary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PivotDocument::set_allocated_summary(::std::string* summary) {
  if (summary != NULL) {
    set_has_summary();
  } else {
    clear_has_summary();
  }
  summary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), summary);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.summary)
}

// optional string site_name = 5;
inline bool PivotDocument::has_site_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PivotDocument::set_has_site_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PivotDocument::clear_has_site_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PivotDocument::clear_site_name() {
  site_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_name();
}
inline const ::std::string& PivotDocument::site_name() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.site_name)
  return site_name_.GetNoArena();
}
inline void PivotDocument::set_site_name(const ::std::string& value) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocument.site_name)
}
#if LANG_CXX11
inline void PivotDocument::set_site_name(::std::string&& value) {
  set_has_site_name();
  site_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.PivotDocument.site_name)
}
#endif
inline void PivotDocument::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.PivotDocument.site_name)
}
inline void PivotDocument::set_site_name(const char* value, size_t size) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.PivotDocument.site_name)
}
inline ::std::string* PivotDocument::mutable_site_name() {
  set_has_site_name();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.site_name)
  return site_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PivotDocument::release_site_name() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.site_name)
  clear_has_site_name();
  return site_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PivotDocument::set_allocated_site_name(::std::string* site_name) {
  if (site_name != NULL) {
    set_has_site_name();
  } else {
    clear_has_site_name();
  }
  site_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_name);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.site_name)
}

// optional .contextual_suggestions.Image favicon_image = 6;
inline bool PivotDocument::has_favicon_image() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PivotDocument::set_has_favicon_image() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PivotDocument::clear_has_favicon_image() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PivotDocument::clear_favicon_image() {
  if (favicon_image_ != NULL) favicon_image_->::contextual_suggestions::Image::Clear();
  clear_has_favicon_image();
}
inline const ::contextual_suggestions::Image& PivotDocument::favicon_image() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.favicon_image)
  return favicon_image_ != NULL ? *favicon_image_
                         : *::contextual_suggestions::Image::internal_default_instance();
}
inline ::contextual_suggestions::Image* PivotDocument::mutable_favicon_image() {
  set_has_favicon_image();
  if (favicon_image_ == NULL) {
    favicon_image_ = new ::contextual_suggestions::Image;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.favicon_image)
  return favicon_image_;
}
inline ::contextual_suggestions::Image* PivotDocument::release_favicon_image() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.favicon_image)
  clear_has_favicon_image();
  ::contextual_suggestions::Image* temp = favicon_image_;
  favicon_image_ = NULL;
  return temp;
}
inline void PivotDocument::set_allocated_favicon_image(::contextual_suggestions::Image* favicon_image) {
  delete favicon_image_;
  favicon_image_ = favicon_image;
  if (favicon_image) {
    set_has_favicon_image();
  } else {
    clear_has_favicon_image();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.favicon_image)
}

// -------------------------------------------------------------------

// PivotCluster

// optional .contextual_suggestions.ClusterLabel label = 1;
inline bool PivotCluster::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PivotCluster::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PivotCluster::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PivotCluster::clear_label() {
  if (label_ != NULL) label_->::contextual_suggestions::ClusterLabel::Clear();
  clear_has_label();
}
inline const ::contextual_suggestions::ClusterLabel& PivotCluster::label() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotCluster.label)
  return label_ != NULL ? *label_
                         : *::contextual_suggestions::ClusterLabel::internal_default_instance();
}
inline ::contextual_suggestions::ClusterLabel* PivotCluster::mutable_label() {
  set_has_label();
  if (label_ == NULL) {
    label_ = new ::contextual_suggestions::ClusterLabel;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotCluster.label)
  return label_;
}
inline ::contextual_suggestions::ClusterLabel* PivotCluster::release_label() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotCluster.label)
  clear_has_label();
  ::contextual_suggestions::ClusterLabel* temp = label_;
  label_ = NULL;
  return temp;
}
inline void PivotCluster::set_allocated_label(::contextual_suggestions::ClusterLabel* label) {
  delete label_;
  label_ = label;
  if (label) {
    set_has_label();
  } else {
    clear_has_label();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotCluster.label)
}

// repeated .contextual_suggestions.PivotItem item = 2;
inline int PivotCluster::item_size() const {
  return item_.size();
}
inline void PivotCluster::clear_item() {
  item_.Clear();
}
inline const ::contextual_suggestions::PivotItem& PivotCluster::item(int index) const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotCluster.item)
  return item_.Get(index);
}
inline ::contextual_suggestions::PivotItem* PivotCluster::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotCluster.item)
  return item_.Mutable(index);
}
inline ::contextual_suggestions::PivotItem* PivotCluster::add_item() {
  // @@protoc_insertion_point(field_add:contextual_suggestions.PivotCluster.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >*
PivotCluster::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:contextual_suggestions.PivotCluster.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >&
PivotCluster::item() const {
  // @@protoc_insertion_point(field_list:contextual_suggestions.PivotCluster.item)
  return item_;
}

// optional int32 num_items_to_display_pre_expansion = 3 [default = 1];
inline bool PivotCluster::has_num_items_to_display_pre_expansion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PivotCluster::set_has_num_items_to_display_pre_expansion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PivotCluster::clear_has_num_items_to_display_pre_expansion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PivotCluster::clear_num_items_to_display_pre_expansion() {
  num_items_to_display_pre_expansion_ = 1;
  clear_has_num_items_to_display_pre_expansion();
}
inline ::google::protobuf::int32 PivotCluster::num_items_to_display_pre_expansion() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotCluster.num_items_to_display_pre_expansion)
  return num_items_to_display_pre_expansion_;
}
inline void PivotCluster::set_num_items_to_display_pre_expansion(::google::protobuf::int32 value) {
  set_has_num_items_to_display_pre_expansion();
  num_items_to_display_pre_expansion_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotCluster.num_items_to_display_pre_expansion)
}

// -------------------------------------------------------------------

// ClusterLabel

// optional string label = 1;
inline bool ClusterLabel::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterLabel::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterLabel::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterLabel::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& ClusterLabel::label() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.ClusterLabel.label)
  return label_.GetNoArena();
}
inline void ClusterLabel::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.ClusterLabel.label)
}
#if LANG_CXX11
inline void ClusterLabel::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.ClusterLabel.label)
}
#endif
inline void ClusterLabel::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.ClusterLabel.label)
}
inline void ClusterLabel::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.ClusterLabel.label)
}
inline ::std::string* ClusterLabel::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.ClusterLabel.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterLabel::release_label() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.ClusterLabel.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterLabel::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.ClusterLabel.label)
}

// -------------------------------------------------------------------

// AutoPeekConditions

// optional float confidence = 1 [default = 1];
inline bool AutoPeekConditions::has_confidence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutoPeekConditions::set_has_confidence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AutoPeekConditions::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AutoPeekConditions::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
inline float AutoPeekConditions::confidence() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.AutoPeekConditions.confidence)
  return confidence_;
}
inline void AutoPeekConditions::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.AutoPeekConditions.confidence)
}

// optional float page_scroll_percentage = 2 [default = 0];
inline bool AutoPeekConditions::has_page_scroll_percentage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoPeekConditions::set_has_page_scroll_percentage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoPeekConditions::clear_has_page_scroll_percentage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoPeekConditions::clear_page_scroll_percentage() {
  page_scroll_percentage_ = 0;
  clear_has_page_scroll_percentage();
}
inline float AutoPeekConditions::page_scroll_percentage() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.AutoPeekConditions.page_scroll_percentage)
  return page_scroll_percentage_;
}
inline void AutoPeekConditions::set_page_scroll_percentage(float value) {
  set_has_page_scroll_percentage();
  page_scroll_percentage_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.AutoPeekConditions.page_scroll_percentage)
}

// optional float minimum_seconds_on_page = 3 [default = 0];
inline bool AutoPeekConditions::has_minimum_seconds_on_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoPeekConditions::set_has_minimum_seconds_on_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoPeekConditions::clear_has_minimum_seconds_on_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoPeekConditions::clear_minimum_seconds_on_page() {
  minimum_seconds_on_page_ = 0;
  clear_has_minimum_seconds_on_page();
}
inline float AutoPeekConditions::minimum_seconds_on_page() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.AutoPeekConditions.minimum_seconds_on_page)
  return minimum_seconds_on_page_;
}
inline void AutoPeekConditions::set_minimum_seconds_on_page(float value) {
  set_has_minimum_seconds_on_page();
  minimum_seconds_on_page_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.AutoPeekConditions.minimum_seconds_on_page)
}

// optional uint64 maximum_number_of_peeks = 4 [default = 0];
inline bool AutoPeekConditions::has_maximum_number_of_peeks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutoPeekConditions::set_has_maximum_number_of_peeks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AutoPeekConditions::clear_has_maximum_number_of_peeks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AutoPeekConditions::clear_maximum_number_of_peeks() {
  maximum_number_of_peeks_ = GOOGLE_ULONGLONG(0);
  clear_has_maximum_number_of_peeks();
}
inline ::google::protobuf::uint64 AutoPeekConditions::maximum_number_of_peeks() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.AutoPeekConditions.maximum_number_of_peeks)
  return maximum_number_of_peeks_;
}
inline void AutoPeekConditions::set_maximum_number_of_peeks(::google::protobuf::uint64 value) {
  set_has_maximum_number_of_peeks();
  maximum_number_of_peeks_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.AutoPeekConditions.maximum_number_of_peeks)
}

// -------------------------------------------------------------------

// PeekText

// optional string text = 1;
inline bool PeekText::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeekText::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeekText::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeekText::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& PeekText::text() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PeekText.text)
  return text_.GetNoArena();
}
inline void PeekText::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.PeekText.text)
}
#if LANG_CXX11
inline void PeekText::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.PeekText.text)
}
#endif
inline void PeekText::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.PeekText.text)
}
inline void PeekText::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.PeekText.text)
}
inline ::std::string* PeekText::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PeekText.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeekText::release_text() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PeekText.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeekText::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PeekText.text)
}

// -------------------------------------------------------------------

// Url

// optional string raw_url = 1;
inline bool Url::has_raw_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Url::set_has_raw_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Url::clear_has_raw_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Url::clear_raw_url() {
  raw_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_url();
}
inline const ::std::string& Url::raw_url() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Url.raw_url)
  return raw_url_.GetNoArena();
}
inline void Url::set_raw_url(const ::std::string& value) {
  set_has_raw_url();
  raw_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.Url.raw_url)
}
#if LANG_CXX11
inline void Url::set_raw_url(::std::string&& value) {
  set_has_raw_url();
  raw_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.Url.raw_url)
}
#endif
inline void Url::set_raw_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_url();
  raw_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.Url.raw_url)
}
inline void Url::set_raw_url(const char* value, size_t size) {
  set_has_raw_url();
  raw_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.Url.raw_url)
}
inline ::std::string* Url::mutable_raw_url() {
  set_has_raw_url();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Url.raw_url)
  return raw_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Url::release_raw_url() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.Url.raw_url)
  clear_has_raw_url();
  return raw_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Url::set_allocated_raw_url(::std::string* raw_url) {
  if (raw_url != NULL) {
    set_has_raw_url();
  } else {
    clear_has_raw_url();
  }
  raw_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_url);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.Url.raw_url)
}

// -------------------------------------------------------------------

// Image

// optional .contextual_suggestions.ImageId id = 1;
inline bool Image::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_id() {
  if (id_ != NULL) id_->::contextual_suggestions::ImageId::Clear();
  clear_has_id();
}
inline const ::contextual_suggestions::ImageId& Image::id() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Image.id)
  return id_ != NULL ? *id_
                         : *::contextual_suggestions::ImageId::internal_default_instance();
}
inline ::contextual_suggestions::ImageId* Image::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::contextual_suggestions::ImageId;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Image.id)
  return id_;
}
inline ::contextual_suggestions::ImageId* Image::release_id() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.Image.id)
  clear_has_id();
  ::contextual_suggestions::ImageId* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Image::set_allocated_id(::contextual_suggestions::ImageId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.Image.id)
}

// optional .contextual_suggestions.ImageSource source_data = 2;
inline bool Image::has_source_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_source_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_source_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_source_data() {
  if (source_data_ != NULL) source_data_->::contextual_suggestions::ImageSource::Clear();
  clear_has_source_data();
}
inline const ::contextual_suggestions::ImageSource& Image::source_data() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Image.source_data)
  return source_data_ != NULL ? *source_data_
                         : *::contextual_suggestions::ImageSource::internal_default_instance();
}
inline ::contextual_suggestions::ImageSource* Image::mutable_source_data() {
  set_has_source_data();
  if (source_data_ == NULL) {
    source_data_ = new ::contextual_suggestions::ImageSource;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Image.source_data)
  return source_data_;
}
inline ::contextual_suggestions::ImageSource* Image::release_source_data() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.Image.source_data)
  clear_has_source_data();
  ::contextual_suggestions::ImageSource* temp = source_data_;
  source_data_ = NULL;
  return temp;
}
inline void Image::set_allocated_source_data(::contextual_suggestions::ImageSource* source_data) {
  delete source_data_;
  source_data_ = source_data;
  if (source_data) {
    set_has_source_data();
  } else {
    clear_has_source_data();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.Image.source_data)
}

// -------------------------------------------------------------------

// ImageId

// optional string encrypted_docid = 1;
inline bool ImageId::has_encrypted_docid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageId::set_has_encrypted_docid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageId::clear_has_encrypted_docid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageId::clear_encrypted_docid() {
  encrypted_docid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypted_docid();
}
inline const ::std::string& ImageId::encrypted_docid() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.ImageId.encrypted_docid)
  return encrypted_docid_.GetNoArena();
}
inline void ImageId::set_encrypted_docid(const ::std::string& value) {
  set_has_encrypted_docid();
  encrypted_docid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.ImageId.encrypted_docid)
}
#if LANG_CXX11
inline void ImageId::set_encrypted_docid(::std::string&& value) {
  set_has_encrypted_docid();
  encrypted_docid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.ImageId.encrypted_docid)
}
#endif
inline void ImageId::set_encrypted_docid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encrypted_docid();
  encrypted_docid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.ImageId.encrypted_docid)
}
inline void ImageId::set_encrypted_docid(const char* value, size_t size) {
  set_has_encrypted_docid();
  encrypted_docid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.ImageId.encrypted_docid)
}
inline ::std::string* ImageId::mutable_encrypted_docid() {
  set_has_encrypted_docid();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.ImageId.encrypted_docid)
  return encrypted_docid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageId::release_encrypted_docid() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.ImageId.encrypted_docid)
  clear_has_encrypted_docid();
  return encrypted_docid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageId::set_allocated_encrypted_docid(::std::string* encrypted_docid) {
  if (encrypted_docid != NULL) {
    set_has_encrypted_docid();
  } else {
    clear_has_encrypted_docid();
  }
  encrypted_docid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_docid);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.ImageId.encrypted_docid)
}

// -------------------------------------------------------------------

// ImageSource

// optional .contextual_suggestions.RasterImage raster = 1;
inline bool ImageSource::has_raster() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageSource::set_has_raster() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageSource::clear_has_raster() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageSource::clear_raster() {
  if (raster_ != NULL) raster_->::contextual_suggestions::RasterImage::Clear();
  clear_has_raster();
}
inline const ::contextual_suggestions::RasterImage& ImageSource::raster() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.ImageSource.raster)
  return raster_ != NULL ? *raster_
                         : *::contextual_suggestions::RasterImage::internal_default_instance();
}
inline ::contextual_suggestions::RasterImage* ImageSource::mutable_raster() {
  set_has_raster();
  if (raster_ == NULL) {
    raster_ = new ::contextual_suggestions::RasterImage;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.ImageSource.raster)
  return raster_;
}
inline ::contextual_suggestions::RasterImage* ImageSource::release_raster() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.ImageSource.raster)
  clear_has_raster();
  ::contextual_suggestions::RasterImage* temp = raster_;
  raster_ = NULL;
  return temp;
}
inline void ImageSource::set_allocated_raster(::contextual_suggestions::RasterImage* raster) {
  delete raster_;
  raster_ = raster;
  if (raster) {
    set_has_raster();
  } else {
    clear_has_raster();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.ImageSource.raster)
}

// -------------------------------------------------------------------

// RasterImage

// optional .contextual_suggestions.Url url = 2;
inline bool RasterImage::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RasterImage::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RasterImage::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RasterImage::clear_url() {
  if (url_ != NULL) url_->::contextual_suggestions::Url::Clear();
  clear_has_url();
}
inline const ::contextual_suggestions::Url& RasterImage::url() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.RasterImage.url)
  return url_ != NULL ? *url_
                         : *::contextual_suggestions::Url::internal_default_instance();
}
inline ::contextual_suggestions::Url* RasterImage::mutable_url() {
  set_has_url();
  if (url_ == NULL) {
    url_ = new ::contextual_suggestions::Url;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.RasterImage.url)
  return url_;
}
inline ::contextual_suggestions::Url* RasterImage::release_url() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.RasterImage.url)
  clear_has_url();
  ::contextual_suggestions::Url* temp = url_;
  url_ = NULL;
  return temp;
}
inline void RasterImage::set_allocated_url(::contextual_suggestions::Url* url) {
  delete url_;
  url_ = url;
  if (url) {
    set_has_url();
  } else {
    clear_has_url();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.RasterImage.url)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace contextual_suggestions

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_get_5fpivots_5fresponse_2eproto__INCLUDED
