// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_pivots_request.proto

#ifndef PROTOBUF_get_5fpivots_5frequest_2eproto__INCLUDED
#define PROTOBUF_get_5fpivots_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "chrome_search_api_request_context.pb.h"
// @@protoc_insertion_point(includes)
namespace contextual_suggestions {
class ExploreContext;
class ExploreContextDefaultTypeInternal;
extern ExploreContextDefaultTypeInternal _ExploreContext_default_instance_;
class GetPivotsQuery;
class GetPivotsQueryDefaultTypeInternal;
extern GetPivotsQueryDefaultTypeInternal _GetPivotsQuery_default_instance_;
class GetPivotsRequest;
class GetPivotsRequestDefaultTypeInternal;
extern GetPivotsRequestDefaultTypeInternal _GetPivotsRequest_default_instance_;
class PivotClusteringParams;
class PivotClusteringParamsDefaultTypeInternal;
extern PivotClusteringParamsDefaultTypeInternal _PivotClusteringParams_default_instance_;
class PivotDocumentParams;
class PivotDocumentParamsDefaultTypeInternal;
extern PivotDocumentParamsDefaultTypeInternal _PivotDocumentParams_default_instance_;
class PivotPeekTextParams;
class PivotPeekTextParamsDefaultTypeInternal;
extern PivotPeekTextParamsDefaultTypeInternal _PivotPeekTextParams_default_instance_;
}  // namespace contextual_suggestions

namespace contextual_suggestions {

namespace protobuf_get_5fpivots_5frequest_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_get_5fpivots_5frequest_2eproto

enum PivotDocumentParams_ImageAspectRatio {
  PivotDocumentParams_ImageAspectRatio_ASPECT_RATIO_UNSPECIFIED = 0,
  PivotDocumentParams_ImageAspectRatio_SQUARE = 1
};
bool PivotDocumentParams_ImageAspectRatio_IsValid(int value);
const PivotDocumentParams_ImageAspectRatio PivotDocumentParams_ImageAspectRatio_ImageAspectRatio_MIN = PivotDocumentParams_ImageAspectRatio_ASPECT_RATIO_UNSPECIFIED;
const PivotDocumentParams_ImageAspectRatio PivotDocumentParams_ImageAspectRatio_ImageAspectRatio_MAX = PivotDocumentParams_ImageAspectRatio_SQUARE;
const int PivotDocumentParams_ImageAspectRatio_ImageAspectRatio_ARRAYSIZE = PivotDocumentParams_ImageAspectRatio_ImageAspectRatio_MAX + 1;

// ===================================================================

class GetPivotsRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.GetPivotsRequest) */ {
 public:
  GetPivotsRequest();
  virtual ~GetPivotsRequest();

  GetPivotsRequest(const GetPivotsRequest& from);

  inline GetPivotsRequest& operator=(const GetPivotsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GetPivotsRequest& default_instance();

  static inline const GetPivotsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPivotsRequest*>(
               &_GetPivotsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(GetPivotsRequest* other);

  // implements Message ----------------------------------------------

  inline GetPivotsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPivotsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const GetPivotsRequest& from);
  void MergeFrom(const GetPivotsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPivotsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .contextual_suggestions.SearchApiRequestContext context = 1;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::contextual_suggestions::SearchApiRequestContext& context() const;
  ::contextual_suggestions::SearchApiRequestContext* mutable_context();
  ::contextual_suggestions::SearchApiRequestContext* release_context();
  void set_allocated_context(::contextual_suggestions::SearchApiRequestContext* context);

  // optional .contextual_suggestions.GetPivotsQuery query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::contextual_suggestions::GetPivotsQuery& query() const;
  ::contextual_suggestions::GetPivotsQuery* mutable_query();
  ::contextual_suggestions::GetPivotsQuery* release_query();
  void set_allocated_query(::contextual_suggestions::GetPivotsQuery* query);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.GetPivotsRequest)
 private:
  void set_has_context();
  void clear_has_context();
  void set_has_query();
  void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::contextual_suggestions::SearchApiRequestContext* context_;
  ::contextual_suggestions::GetPivotsQuery* query_;
  friend struct protobuf_get_5fpivots_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPivotsQuery : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.GetPivotsQuery) */ {
 public:
  GetPivotsQuery();
  virtual ~GetPivotsQuery();

  GetPivotsQuery(const GetPivotsQuery& from);

  inline GetPivotsQuery& operator=(const GetPivotsQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GetPivotsQuery& default_instance();

  static inline const GetPivotsQuery* internal_default_instance() {
    return reinterpret_cast<const GetPivotsQuery*>(
               &_GetPivotsQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(GetPivotsQuery* other);

  // implements Message ----------------------------------------------

  inline GetPivotsQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPivotsQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const GetPivotsQuery& from);
  void MergeFrom(const GetPivotsQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPivotsQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .contextual_suggestions.ExploreContext context = 1;
  int context_size() const;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::contextual_suggestions::ExploreContext& context(int index) const;
  ::contextual_suggestions::ExploreContext* mutable_context(int index);
  ::contextual_suggestions::ExploreContext* add_context();
  ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::ExploreContext >*
      mutable_context();
  const ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::ExploreContext >&
      context() const;

  // optional .contextual_suggestions.PivotDocumentParams document_params = 2;
  bool has_document_params() const;
  void clear_document_params();
  static const int kDocumentParamsFieldNumber = 2;
  const ::contextual_suggestions::PivotDocumentParams& document_params() const;
  ::contextual_suggestions::PivotDocumentParams* mutable_document_params();
  ::contextual_suggestions::PivotDocumentParams* release_document_params();
  void set_allocated_document_params(::contextual_suggestions::PivotDocumentParams* document_params);

  // optional .contextual_suggestions.PivotClusteringParams clustering_params = 6;
  bool has_clustering_params() const;
  void clear_clustering_params();
  static const int kClusteringParamsFieldNumber = 6;
  const ::contextual_suggestions::PivotClusteringParams& clustering_params() const;
  ::contextual_suggestions::PivotClusteringParams* mutable_clustering_params();
  ::contextual_suggestions::PivotClusteringParams* release_clustering_params();
  void set_allocated_clustering_params(::contextual_suggestions::PivotClusteringParams* clustering_params);

  // optional .contextual_suggestions.PivotPeekTextParams peek_text_params = 7;
  bool has_peek_text_params() const;
  void clear_peek_text_params();
  static const int kPeekTextParamsFieldNumber = 7;
  const ::contextual_suggestions::PivotPeekTextParams& peek_text_params() const;
  ::contextual_suggestions::PivotPeekTextParams* mutable_peek_text_params();
  ::contextual_suggestions::PivotPeekTextParams* release_peek_text_params();
  void set_allocated_peek_text_params(::contextual_suggestions::PivotPeekTextParams* peek_text_params);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.GetPivotsQuery)
 private:
  void set_has_document_params();
  void clear_has_document_params();
  void set_has_clustering_params();
  void clear_has_clustering_params();
  void set_has_peek_text_params();
  void clear_has_peek_text_params();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::ExploreContext > context_;
  ::contextual_suggestions::PivotDocumentParams* document_params_;
  ::contextual_suggestions::PivotClusteringParams* clustering_params_;
  ::contextual_suggestions::PivotPeekTextParams* peek_text_params_;
  friend struct protobuf_get_5fpivots_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExploreContext : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.ExploreContext) */ {
 public:
  ExploreContext();
  virtual ~ExploreContext();

  ExploreContext(const ExploreContext& from);

  inline ExploreContext& operator=(const ExploreContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ExploreContext& default_instance();

  static inline const ExploreContext* internal_default_instance() {
    return reinterpret_cast<const ExploreContext*>(
               &_ExploreContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ExploreContext* other);

  // implements Message ----------------------------------------------

  inline ExploreContext* New() const PROTOBUF_FINAL { return New(NULL); }

  ExploreContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ExploreContext& from);
  void MergeFrom(const ExploreContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExploreContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.ExploreContext)
 private:
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_get_5fpivots_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PivotDocumentParams : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.PivotDocumentParams) */ {
 public:
  PivotDocumentParams();
  virtual ~PivotDocumentParams();

  PivotDocumentParams(const PivotDocumentParams& from);

  inline PivotDocumentParams& operator=(const PivotDocumentParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PivotDocumentParams& default_instance();

  static inline const PivotDocumentParams* internal_default_instance() {
    return reinterpret_cast<const PivotDocumentParams*>(
               &_PivotDocumentParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PivotDocumentParams* other);

  // implements Message ----------------------------------------------

  inline PivotDocumentParams* New() const PROTOBUF_FINAL { return New(NULL); }

  PivotDocumentParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PivotDocumentParams& from);
  void MergeFrom(const PivotDocumentParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PivotDocumentParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PivotDocumentParams_ImageAspectRatio ImageAspectRatio;
  static const ImageAspectRatio ASPECT_RATIO_UNSPECIFIED =
    PivotDocumentParams_ImageAspectRatio_ASPECT_RATIO_UNSPECIFIED;
  static const ImageAspectRatio SQUARE =
    PivotDocumentParams_ImageAspectRatio_SQUARE;
  static inline bool ImageAspectRatio_IsValid(int value) {
    return PivotDocumentParams_ImageAspectRatio_IsValid(value);
  }
  static const ImageAspectRatio ImageAspectRatio_MIN =
    PivotDocumentParams_ImageAspectRatio_ImageAspectRatio_MIN;
  static const ImageAspectRatio ImageAspectRatio_MAX =
    PivotDocumentParams_ImageAspectRatio_ImageAspectRatio_MAX;
  static const int ImageAspectRatio_ARRAYSIZE =
    PivotDocumentParams_ImageAspectRatio_ImageAspectRatio_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional bool enabled = 1 [default = false];
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // optional bool enable_images = 3 [default = false];
  bool has_enable_images() const;
  void clear_enable_images();
  static const int kEnableImagesFieldNumber = 3;
  bool enable_images() const;
  void set_enable_images(bool value);

  // optional .contextual_suggestions.PivotDocumentParams.ImageAspectRatio image_aspect_ratio = 4 [default = ASPECT_RATIO_UNSPECIFIED];
  bool has_image_aspect_ratio() const;
  void clear_image_aspect_ratio();
  static const int kImageAspectRatioFieldNumber = 4;
  ::contextual_suggestions::PivotDocumentParams_ImageAspectRatio image_aspect_ratio() const;
  void set_image_aspect_ratio(::contextual_suggestions::PivotDocumentParams_ImageAspectRatio value);

  // optional int32 num = 2 [default = 5];
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional int32 min_documents = 6 [default = 3];
  bool has_min_documents() const;
  void clear_min_documents();
  static const int kMinDocumentsFieldNumber = 6;
  ::google::protobuf::int32 min_documents() const;
  void set_min_documents(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.PivotDocumentParams)
 private:
  void set_has_enabled();
  void clear_has_enabled();
  void set_has_num();
  void clear_has_num();
  void set_has_min_documents();
  void clear_has_min_documents();
  void set_has_enable_images();
  void clear_has_enable_images();
  void set_has_image_aspect_ratio();
  void clear_has_image_aspect_ratio();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool enabled_;
  bool enable_images_;
  int image_aspect_ratio_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 min_documents_;
  friend struct protobuf_get_5fpivots_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PivotClusteringParams : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.PivotClusteringParams) */ {
 public:
  PivotClusteringParams();
  virtual ~PivotClusteringParams();

  PivotClusteringParams(const PivotClusteringParams& from);

  inline PivotClusteringParams& operator=(const PivotClusteringParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PivotClusteringParams& default_instance();

  static inline const PivotClusteringParams* internal_default_instance() {
    return reinterpret_cast<const PivotClusteringParams*>(
               &_PivotClusteringParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PivotClusteringParams* other);

  // implements Message ----------------------------------------------

  inline PivotClusteringParams* New() const PROTOBUF_FINAL { return New(NULL); }

  PivotClusteringParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PivotClusteringParams& from);
  void MergeFrom(const PivotClusteringParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PivotClusteringParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // optional int32 min = 2;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 2;
  ::google::protobuf::int32 min() const;
  void set_min(::google::protobuf::int32 value);

  // optional int32 max = 3;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  ::google::protobuf::int32 max() const;
  void set_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.PivotClusteringParams)
 private:
  void set_has_enabled();
  void clear_has_enabled();
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool enabled_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 max_;
  friend struct protobuf_get_5fpivots_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PivotPeekTextParams : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:contextual_suggestions.PivotPeekTextParams) */ {
 public:
  PivotPeekTextParams();
  virtual ~PivotPeekTextParams();

  PivotPeekTextParams(const PivotPeekTextParams& from);

  inline PivotPeekTextParams& operator=(const PivotPeekTextParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PivotPeekTextParams& default_instance();

  static inline const PivotPeekTextParams* internal_default_instance() {
    return reinterpret_cast<const PivotPeekTextParams*>(
               &_PivotPeekTextParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PivotPeekTextParams* other);

  // implements Message ----------------------------------------------

  inline PivotPeekTextParams* New() const PROTOBUF_FINAL { return New(NULL); }

  PivotPeekTextParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PivotPeekTextParams& from);
  void MergeFrom(const PivotPeekTextParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PivotPeekTextParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enabled = 1 [default = false];
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:contextual_suggestions.PivotPeekTextParams)
 private:
  void set_has_enabled();
  void clear_has_enabled();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool enabled_;
  friend struct protobuf_get_5fpivots_5frequest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPivotsRequest

// optional .contextual_suggestions.SearchApiRequestContext context = 1;
inline bool GetPivotsRequest::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPivotsRequest::set_has_context() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPivotsRequest::clear_has_context() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPivotsRequest::clear_context() {
  if (context_ != NULL) context_->::contextual_suggestions::SearchApiRequestContext::Clear();
  clear_has_context();
}
inline const ::contextual_suggestions::SearchApiRequestContext& GetPivotsRequest::context() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsRequest.context)
  return context_ != NULL ? *context_
                         : *::contextual_suggestions::SearchApiRequestContext::internal_default_instance();
}
inline ::contextual_suggestions::SearchApiRequestContext* GetPivotsRequest::mutable_context() {
  set_has_context();
  if (context_ == NULL) {
    context_ = new ::contextual_suggestions::SearchApiRequestContext;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsRequest.context)
  return context_;
}
inline ::contextual_suggestions::SearchApiRequestContext* GetPivotsRequest::release_context() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsRequest.context)
  clear_has_context();
  ::contextual_suggestions::SearchApiRequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline void GetPivotsRequest::set_allocated_context(::contextual_suggestions::SearchApiRequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsRequest.context)
}

// optional .contextual_suggestions.GetPivotsQuery query = 2;
inline bool GetPivotsRequest::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPivotsRequest::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPivotsRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPivotsRequest::clear_query() {
  if (query_ != NULL) query_->::contextual_suggestions::GetPivotsQuery::Clear();
  clear_has_query();
}
inline const ::contextual_suggestions::GetPivotsQuery& GetPivotsRequest::query() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsRequest.query)
  return query_ != NULL ? *query_
                         : *::contextual_suggestions::GetPivotsQuery::internal_default_instance();
}
inline ::contextual_suggestions::GetPivotsQuery* GetPivotsRequest::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::contextual_suggestions::GetPivotsQuery;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsRequest.query)
  return query_;
}
inline ::contextual_suggestions::GetPivotsQuery* GetPivotsRequest::release_query() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsRequest.query)
  clear_has_query();
  ::contextual_suggestions::GetPivotsQuery* temp = query_;
  query_ = NULL;
  return temp;
}
inline void GetPivotsRequest::set_allocated_query(::contextual_suggestions::GetPivotsQuery* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsRequest.query)
}

// -------------------------------------------------------------------

// GetPivotsQuery

// repeated .contextual_suggestions.ExploreContext context = 1;
inline int GetPivotsQuery::context_size() const {
  return context_.size();
}
inline void GetPivotsQuery::clear_context() {
  context_.Clear();
}
inline const ::contextual_suggestions::ExploreContext& GetPivotsQuery::context(int index) const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsQuery.context)
  return context_.Get(index);
}
inline ::contextual_suggestions::ExploreContext* GetPivotsQuery::mutable_context(int index) {
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsQuery.context)
  return context_.Mutable(index);
}
inline ::contextual_suggestions::ExploreContext* GetPivotsQuery::add_context() {
  // @@protoc_insertion_point(field_add:contextual_suggestions.GetPivotsQuery.context)
  return context_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::ExploreContext >*
GetPivotsQuery::mutable_context() {
  // @@protoc_insertion_point(field_mutable_list:contextual_suggestions.GetPivotsQuery.context)
  return &context_;
}
inline const ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::ExploreContext >&
GetPivotsQuery::context() const {
  // @@protoc_insertion_point(field_list:contextual_suggestions.GetPivotsQuery.context)
  return context_;
}

// optional .contextual_suggestions.PivotDocumentParams document_params = 2;
inline bool GetPivotsQuery::has_document_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPivotsQuery::set_has_document_params() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPivotsQuery::clear_has_document_params() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPivotsQuery::clear_document_params() {
  if (document_params_ != NULL) document_params_->::contextual_suggestions::PivotDocumentParams::Clear();
  clear_has_document_params();
}
inline const ::contextual_suggestions::PivotDocumentParams& GetPivotsQuery::document_params() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsQuery.document_params)
  return document_params_ != NULL ? *document_params_
                         : *::contextual_suggestions::PivotDocumentParams::internal_default_instance();
}
inline ::contextual_suggestions::PivotDocumentParams* GetPivotsQuery::mutable_document_params() {
  set_has_document_params();
  if (document_params_ == NULL) {
    document_params_ = new ::contextual_suggestions::PivotDocumentParams;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsQuery.document_params)
  return document_params_;
}
inline ::contextual_suggestions::PivotDocumentParams* GetPivotsQuery::release_document_params() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsQuery.document_params)
  clear_has_document_params();
  ::contextual_suggestions::PivotDocumentParams* temp = document_params_;
  document_params_ = NULL;
  return temp;
}
inline void GetPivotsQuery::set_allocated_document_params(::contextual_suggestions::PivotDocumentParams* document_params) {
  delete document_params_;
  document_params_ = document_params;
  if (document_params) {
    set_has_document_params();
  } else {
    clear_has_document_params();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsQuery.document_params)
}

// optional .contextual_suggestions.PivotClusteringParams clustering_params = 6;
inline bool GetPivotsQuery::has_clustering_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPivotsQuery::set_has_clustering_params() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPivotsQuery::clear_has_clustering_params() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPivotsQuery::clear_clustering_params() {
  if (clustering_params_ != NULL) clustering_params_->::contextual_suggestions::PivotClusteringParams::Clear();
  clear_has_clustering_params();
}
inline const ::contextual_suggestions::PivotClusteringParams& GetPivotsQuery::clustering_params() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsQuery.clustering_params)
  return clustering_params_ != NULL ? *clustering_params_
                         : *::contextual_suggestions::PivotClusteringParams::internal_default_instance();
}
inline ::contextual_suggestions::PivotClusteringParams* GetPivotsQuery::mutable_clustering_params() {
  set_has_clustering_params();
  if (clustering_params_ == NULL) {
    clustering_params_ = new ::contextual_suggestions::PivotClusteringParams;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsQuery.clustering_params)
  return clustering_params_;
}
inline ::contextual_suggestions::PivotClusteringParams* GetPivotsQuery::release_clustering_params() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsQuery.clustering_params)
  clear_has_clustering_params();
  ::contextual_suggestions::PivotClusteringParams* temp = clustering_params_;
  clustering_params_ = NULL;
  return temp;
}
inline void GetPivotsQuery::set_allocated_clustering_params(::contextual_suggestions::PivotClusteringParams* clustering_params) {
  delete clustering_params_;
  clustering_params_ = clustering_params;
  if (clustering_params) {
    set_has_clustering_params();
  } else {
    clear_has_clustering_params();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsQuery.clustering_params)
}

// optional .contextual_suggestions.PivotPeekTextParams peek_text_params = 7;
inline bool GetPivotsQuery::has_peek_text_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPivotsQuery::set_has_peek_text_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPivotsQuery::clear_has_peek_text_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPivotsQuery::clear_peek_text_params() {
  if (peek_text_params_ != NULL) peek_text_params_->::contextual_suggestions::PivotPeekTextParams::Clear();
  clear_has_peek_text_params();
}
inline const ::contextual_suggestions::PivotPeekTextParams& GetPivotsQuery::peek_text_params() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsQuery.peek_text_params)
  return peek_text_params_ != NULL ? *peek_text_params_
                         : *::contextual_suggestions::PivotPeekTextParams::internal_default_instance();
}
inline ::contextual_suggestions::PivotPeekTextParams* GetPivotsQuery::mutable_peek_text_params() {
  set_has_peek_text_params();
  if (peek_text_params_ == NULL) {
    peek_text_params_ = new ::contextual_suggestions::PivotPeekTextParams;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsQuery.peek_text_params)
  return peek_text_params_;
}
inline ::contextual_suggestions::PivotPeekTextParams* GetPivotsQuery::release_peek_text_params() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsQuery.peek_text_params)
  clear_has_peek_text_params();
  ::contextual_suggestions::PivotPeekTextParams* temp = peek_text_params_;
  peek_text_params_ = NULL;
  return temp;
}
inline void GetPivotsQuery::set_allocated_peek_text_params(::contextual_suggestions::PivotPeekTextParams* peek_text_params) {
  delete peek_text_params_;
  peek_text_params_ = peek_text_params;
  if (peek_text_params) {
    set_has_peek_text_params();
  } else {
    clear_has_peek_text_params();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsQuery.peek_text_params)
}

// -------------------------------------------------------------------

// ExploreContext

// optional string url = 1;
inline bool ExploreContext::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExploreContext::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExploreContext::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExploreContext::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ExploreContext::url() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.ExploreContext.url)
  return url_.GetNoArena();
}
inline void ExploreContext::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.ExploreContext.url)
}
#if LANG_CXX11
inline void ExploreContext::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.ExploreContext.url)
}
#endif
inline void ExploreContext::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.ExploreContext.url)
}
inline void ExploreContext::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.ExploreContext.url)
}
inline ::std::string* ExploreContext::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.ExploreContext.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExploreContext::release_url() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.ExploreContext.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExploreContext::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.ExploreContext.url)
}

// -------------------------------------------------------------------

// PivotDocumentParams

// optional bool enabled = 1 [default = false];
inline bool PivotDocumentParams::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PivotDocumentParams::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PivotDocumentParams::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PivotDocumentParams::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool PivotDocumentParams::enabled() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocumentParams.enabled)
  return enabled_;
}
inline void PivotDocumentParams::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocumentParams.enabled)
}

// optional int32 num = 2 [default = 5];
inline bool PivotDocumentParams::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PivotDocumentParams::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PivotDocumentParams::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PivotDocumentParams::clear_num() {
  num_ = 5;
  clear_has_num();
}
inline ::google::protobuf::int32 PivotDocumentParams::num() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocumentParams.num)
  return num_;
}
inline void PivotDocumentParams::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocumentParams.num)
}

// optional int32 min_documents = 6 [default = 3];
inline bool PivotDocumentParams::has_min_documents() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PivotDocumentParams::set_has_min_documents() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PivotDocumentParams::clear_has_min_documents() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PivotDocumentParams::clear_min_documents() {
  min_documents_ = 3;
  clear_has_min_documents();
}
inline ::google::protobuf::int32 PivotDocumentParams::min_documents() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocumentParams.min_documents)
  return min_documents_;
}
inline void PivotDocumentParams::set_min_documents(::google::protobuf::int32 value) {
  set_has_min_documents();
  min_documents_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocumentParams.min_documents)
}

// optional bool enable_images = 3 [default = false];
inline bool PivotDocumentParams::has_enable_images() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PivotDocumentParams::set_has_enable_images() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PivotDocumentParams::clear_has_enable_images() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PivotDocumentParams::clear_enable_images() {
  enable_images_ = false;
  clear_has_enable_images();
}
inline bool PivotDocumentParams::enable_images() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocumentParams.enable_images)
  return enable_images_;
}
inline void PivotDocumentParams::set_enable_images(bool value) {
  set_has_enable_images();
  enable_images_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocumentParams.enable_images)
}

// optional .contextual_suggestions.PivotDocumentParams.ImageAspectRatio image_aspect_ratio = 4 [default = ASPECT_RATIO_UNSPECIFIED];
inline bool PivotDocumentParams::has_image_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PivotDocumentParams::set_has_image_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PivotDocumentParams::clear_has_image_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PivotDocumentParams::clear_image_aspect_ratio() {
  image_aspect_ratio_ = 0;
  clear_has_image_aspect_ratio();
}
inline ::contextual_suggestions::PivotDocumentParams_ImageAspectRatio PivotDocumentParams::image_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocumentParams.image_aspect_ratio)
  return static_cast< ::contextual_suggestions::PivotDocumentParams_ImageAspectRatio >(image_aspect_ratio_);
}
inline void PivotDocumentParams::set_image_aspect_ratio(::contextual_suggestions::PivotDocumentParams_ImageAspectRatio value) {
  assert(::contextual_suggestions::PivotDocumentParams_ImageAspectRatio_IsValid(value));
  set_has_image_aspect_ratio();
  image_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocumentParams.image_aspect_ratio)
}

// -------------------------------------------------------------------

// PivotClusteringParams

// optional bool enabled = 1;
inline bool PivotClusteringParams::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PivotClusteringParams::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PivotClusteringParams::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PivotClusteringParams::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool PivotClusteringParams::enabled() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotClusteringParams.enabled)
  return enabled_;
}
inline void PivotClusteringParams::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotClusteringParams.enabled)
}

// optional int32 min = 2;
inline bool PivotClusteringParams::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PivotClusteringParams::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PivotClusteringParams::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PivotClusteringParams::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline ::google::protobuf::int32 PivotClusteringParams::min() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotClusteringParams.min)
  return min_;
}
inline void PivotClusteringParams::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotClusteringParams.min)
}

// optional int32 max = 3;
inline bool PivotClusteringParams::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PivotClusteringParams::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PivotClusteringParams::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PivotClusteringParams::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline ::google::protobuf::int32 PivotClusteringParams::max() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotClusteringParams.max)
  return max_;
}
inline void PivotClusteringParams::set_max(::google::protobuf::int32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotClusteringParams.max)
}

// -------------------------------------------------------------------

// PivotPeekTextParams

// optional bool enabled = 1 [default = false];
inline bool PivotPeekTextParams::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PivotPeekTextParams::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PivotPeekTextParams::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PivotPeekTextParams::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool PivotPeekTextParams::enabled() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotPeekTextParams.enabled)
  return enabled_;
}
inline void PivotPeekTextParams::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotPeekTextParams.enabled)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace contextual_suggestions

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::contextual_suggestions::PivotDocumentParams_ImageAspectRatio> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_get_5fpivots_5frequest_2eproto__INCLUDED
