// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_pivots_response.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "get_pivots_response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace contextual_suggestions {
class GetPivotsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPivotsResponse> {
} _GetPivotsResponse_default_instance_;
class PivotsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pivots> {
} _Pivots_default_instance_;
class PivotItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PivotItem> {
  public:
  const ::contextual_suggestions::PivotDocument* document_;
  const ::contextual_suggestions::PivotCluster* cluster_;
} _PivotItem_default_instance_;
class PivotDocumentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PivotDocument> {
} _PivotDocument_default_instance_;
class PivotClusterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PivotCluster> {
} _PivotCluster_default_instance_;
class ClusterLabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterLabel> {
} _ClusterLabel_default_instance_;
class AutoPeekConditionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoPeekConditions> {
} _AutoPeekConditions_default_instance_;
class PeekTextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PeekText> {
} _PeekText_default_instance_;
class UrlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Url> {
} _Url_default_instance_;
class ImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Image> {
} _Image_default_instance_;
class ImageIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageId> {
} _ImageId_default_instance_;
class ImageSourceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageSource> {
} _ImageSource_default_instance_;
class RasterImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RasterImage> {
} _RasterImage_default_instance_;

namespace protobuf_get_5fpivots_5fresponse_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _GetPivotsResponse_default_instance_.Shutdown();
  _Pivots_default_instance_.Shutdown();
  _PivotItem_default_instance_.Shutdown();
  _PivotDocument_default_instance_.Shutdown();
  _PivotCluster_default_instance_.Shutdown();
  _ClusterLabel_default_instance_.Shutdown();
  _AutoPeekConditions_default_instance_.Shutdown();
  _PeekText_default_instance_.Shutdown();
  _Url_default_instance_.Shutdown();
  _Image_default_instance_.Shutdown();
  _ImageId_default_instance_.Shutdown();
  _ImageSource_default_instance_.Shutdown();
  _RasterImage_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GetPivotsResponse_default_instance_.DefaultConstruct();
  _Pivots_default_instance_.DefaultConstruct();
  _PivotItem_default_instance_.DefaultConstruct();
  _PivotDocument_default_instance_.DefaultConstruct();
  _PivotCluster_default_instance_.DefaultConstruct();
  _ClusterLabel_default_instance_.DefaultConstruct();
  _AutoPeekConditions_default_instance_.DefaultConstruct();
  _PeekText_default_instance_.DefaultConstruct();
  _Url_default_instance_.DefaultConstruct();
  _Image_default_instance_.DefaultConstruct();
  _ImageId_default_instance_.DefaultConstruct();
  _ImageSource_default_instance_.DefaultConstruct();
  _RasterImage_default_instance_.DefaultConstruct();
  _GetPivotsResponse_default_instance_.get_mutable()->pivots_ = const_cast< ::contextual_suggestions::Pivots*>(
      ::contextual_suggestions::Pivots::internal_default_instance());
  _Pivots_default_instance_.get_mutable()->auto_peek_conditions_ = const_cast< ::contextual_suggestions::AutoPeekConditions*>(
      ::contextual_suggestions::AutoPeekConditions::internal_default_instance());
  _Pivots_default_instance_.get_mutable()->peek_text_ = const_cast< ::contextual_suggestions::PeekText*>(
      ::contextual_suggestions::PeekText::internal_default_instance());
  _PivotDocument_default_instance_.get_mutable()->url_ = const_cast< ::contextual_suggestions::Url*>(
      ::contextual_suggestions::Url::internal_default_instance());
  _PivotDocument_default_instance_.get_mutable()->image_ = const_cast< ::contextual_suggestions::Image*>(
      ::contextual_suggestions::Image::internal_default_instance());
  _PivotDocument_default_instance_.get_mutable()->favicon_image_ = const_cast< ::contextual_suggestions::Image*>(
      ::contextual_suggestions::Image::internal_default_instance());
  _PivotCluster_default_instance_.get_mutable()->label_ = const_cast< ::contextual_suggestions::ClusterLabel*>(
      ::contextual_suggestions::ClusterLabel::internal_default_instance());
  _Image_default_instance_.get_mutable()->id_ = const_cast< ::contextual_suggestions::ImageId*>(
      ::contextual_suggestions::ImageId::internal_default_instance());
  _Image_default_instance_.get_mutable()->source_data_ = const_cast< ::contextual_suggestions::ImageSource*>(
      ::contextual_suggestions::ImageSource::internal_default_instance());
  _ImageSource_default_instance_.get_mutable()->raster_ = const_cast< ::contextual_suggestions::RasterImage*>(
      ::contextual_suggestions::RasterImage::internal_default_instance());
  _RasterImage_default_instance_.get_mutable()->url_ = const_cast< ::contextual_suggestions::Url*>(
      ::contextual_suggestions::Url::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_get_5fpivots_5fresponse_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPivotsResponse::kPivotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPivotsResponse::GetPivotsResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.GetPivotsResponse)
}
GetPivotsResponse::GetPivotsResponse(const GetPivotsResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pivots()) {
    pivots_ = new ::contextual_suggestions::Pivots(*from.pivots_);
  } else {
    pivots_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.GetPivotsResponse)
}

void GetPivotsResponse::SharedCtor() {
  _cached_size_ = 0;
  pivots_ = NULL;
}

GetPivotsResponse::~GetPivotsResponse() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.GetPivotsResponse)
  SharedDtor();
}

void GetPivotsResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pivots_;
  }
}

void GetPivotsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPivotsResponse& GetPivotsResponse::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPivotsResponse* GetPivotsResponse::New(::google::protobuf::Arena* arena) const {
  GetPivotsResponse* n = new GetPivotsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPivotsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.GetPivotsResponse)
  if (has_pivots()) {
    GOOGLE_DCHECK(pivots_ != NULL);
    pivots_->::contextual_suggestions::Pivots::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPivotsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.GetPivotsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.Pivots pivots = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pivots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.GetPivotsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.GetPivotsResponse)
  return false;
#undef DO_
}

void GetPivotsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.GetPivotsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.Pivots pivots = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->pivots_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.GetPivotsResponse)
}

size_t GetPivotsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.GetPivotsResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .contextual_suggestions.Pivots pivots = 2;
  if (has_pivots()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pivots_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPivotsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPivotsResponse*>(&from));
}

void GetPivotsResponse::MergeFrom(const GetPivotsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.GetPivotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pivots()) {
    mutable_pivots()->::contextual_suggestions::Pivots::MergeFrom(from.pivots());
  }
}

void GetPivotsResponse::CopyFrom(const GetPivotsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.GetPivotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPivotsResponse::IsInitialized() const {
  return true;
}

void GetPivotsResponse::Swap(GetPivotsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPivotsResponse::InternalSwap(GetPivotsResponse* other) {
  std::swap(pivots_, other->pivots_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetPivotsResponse::GetTypeName() const {
  return "contextual_suggestions.GetPivotsResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPivotsResponse

// optional .contextual_suggestions.Pivots pivots = 2;
bool GetPivotsResponse::has_pivots() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetPivotsResponse::set_has_pivots() {
  _has_bits_[0] |= 0x00000001u;
}
void GetPivotsResponse::clear_has_pivots() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetPivotsResponse::clear_pivots() {
  if (pivots_ != NULL) pivots_->::contextual_suggestions::Pivots::Clear();
  clear_has_pivots();
}
const ::contextual_suggestions::Pivots& GetPivotsResponse::pivots() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsResponse.pivots)
  return pivots_ != NULL ? *pivots_
                         : *::contextual_suggestions::Pivots::internal_default_instance();
}
::contextual_suggestions::Pivots* GetPivotsResponse::mutable_pivots() {
  set_has_pivots();
  if (pivots_ == NULL) {
    pivots_ = new ::contextual_suggestions::Pivots;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsResponse.pivots)
  return pivots_;
}
::contextual_suggestions::Pivots* GetPivotsResponse::release_pivots() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsResponse.pivots)
  clear_has_pivots();
  ::contextual_suggestions::Pivots* temp = pivots_;
  pivots_ = NULL;
  return temp;
}
void GetPivotsResponse::set_allocated_pivots(::contextual_suggestions::Pivots* pivots) {
  delete pivots_;
  pivots_ = pivots;
  if (pivots) {
    set_has_pivots();
  } else {
    clear_has_pivots();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsResponse.pivots)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pivots::kItemFieldNumber;
const int Pivots::kAutoPeekConditionsFieldNumber;
const int Pivots::kPeekTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pivots::Pivots()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.Pivots)
}
Pivots::Pivots(const Pivots& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auto_peek_conditions()) {
    auto_peek_conditions_ = new ::contextual_suggestions::AutoPeekConditions(*from.auto_peek_conditions_);
  } else {
    auto_peek_conditions_ = NULL;
  }
  if (from.has_peek_text()) {
    peek_text_ = new ::contextual_suggestions::PeekText(*from.peek_text_);
  } else {
    peek_text_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.Pivots)
}

void Pivots::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&auto_peek_conditions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peek_text_) -
      reinterpret_cast<char*>(&auto_peek_conditions_)) + sizeof(peek_text_));
}

Pivots::~Pivots() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.Pivots)
  SharedDtor();
}

void Pivots::SharedDtor() {
  if (this != internal_default_instance()) {
    delete auto_peek_conditions_;
  }
  if (this != internal_default_instance()) {
    delete peek_text_;
  }
}

void Pivots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Pivots& Pivots::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pivots* Pivots::New(::google::protobuf::Arena* arena) const {
  Pivots* n = new Pivots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pivots::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.Pivots)
  item_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_auto_peek_conditions()) {
      GOOGLE_DCHECK(auto_peek_conditions_ != NULL);
      auto_peek_conditions_->::contextual_suggestions::AutoPeekConditions::Clear();
    }
    if (has_peek_text()) {
      GOOGLE_DCHECK(peek_text_ != NULL);
      peek_text_->::contextual_suggestions::PeekText::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pivots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.Pivots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .contextual_suggestions.PivotItem item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.AutoPeekConditions auto_peek_conditions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_peek_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.PeekText peek_text = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peek_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.Pivots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.Pivots)
  return false;
#undef DO_
}

void Pivots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.Pivots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .contextual_suggestions.PivotItem item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.AutoPeekConditions auto_peek_conditions = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->auto_peek_conditions_, output);
  }

  // optional .contextual_suggestions.PeekText peek_text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->peek_text_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.Pivots)
}

size_t Pivots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.Pivots)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .contextual_suggestions.PivotItem item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .contextual_suggestions.AutoPeekConditions auto_peek_conditions = 3;
    if (has_auto_peek_conditions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->auto_peek_conditions_);
    }

    // optional .contextual_suggestions.PeekText peek_text = 4;
    if (has_peek_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->peek_text_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pivots::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Pivots*>(&from));
}

void Pivots::MergeFrom(const Pivots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.Pivots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_auto_peek_conditions()->::contextual_suggestions::AutoPeekConditions::MergeFrom(from.auto_peek_conditions());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_peek_text()->::contextual_suggestions::PeekText::MergeFrom(from.peek_text());
    }
  }
}

void Pivots::CopyFrom(const Pivots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.Pivots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pivots::IsInitialized() const {
  return true;
}

void Pivots::Swap(Pivots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pivots::InternalSwap(Pivots* other) {
  item_.InternalSwap(&other->item_);
  std::swap(auto_peek_conditions_, other->auto_peek_conditions_);
  std::swap(peek_text_, other->peek_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Pivots::GetTypeName() const {
  return "contextual_suggestions.Pivots";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pivots

// repeated .contextual_suggestions.PivotItem item = 1;
int Pivots::item_size() const {
  return item_.size();
}
void Pivots::clear_item() {
  item_.Clear();
}
const ::contextual_suggestions::PivotItem& Pivots::item(int index) const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Pivots.item)
  return item_.Get(index);
}
::contextual_suggestions::PivotItem* Pivots::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Pivots.item)
  return item_.Mutable(index);
}
::contextual_suggestions::PivotItem* Pivots::add_item() {
  // @@protoc_insertion_point(field_add:contextual_suggestions.Pivots.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >*
Pivots::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:contextual_suggestions.Pivots.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >&
Pivots::item() const {
  // @@protoc_insertion_point(field_list:contextual_suggestions.Pivots.item)
  return item_;
}

// optional .contextual_suggestions.AutoPeekConditions auto_peek_conditions = 3;
bool Pivots::has_auto_peek_conditions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pivots::set_has_auto_peek_conditions() {
  _has_bits_[0] |= 0x00000001u;
}
void Pivots::clear_has_auto_peek_conditions() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pivots::clear_auto_peek_conditions() {
  if (auto_peek_conditions_ != NULL) auto_peek_conditions_->::contextual_suggestions::AutoPeekConditions::Clear();
  clear_has_auto_peek_conditions();
}
const ::contextual_suggestions::AutoPeekConditions& Pivots::auto_peek_conditions() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Pivots.auto_peek_conditions)
  return auto_peek_conditions_ != NULL ? *auto_peek_conditions_
                         : *::contextual_suggestions::AutoPeekConditions::internal_default_instance();
}
::contextual_suggestions::AutoPeekConditions* Pivots::mutable_auto_peek_conditions() {
  set_has_auto_peek_conditions();
  if (auto_peek_conditions_ == NULL) {
    auto_peek_conditions_ = new ::contextual_suggestions::AutoPeekConditions;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Pivots.auto_peek_conditions)
  return auto_peek_conditions_;
}
::contextual_suggestions::AutoPeekConditions* Pivots::release_auto_peek_conditions() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.Pivots.auto_peek_conditions)
  clear_has_auto_peek_conditions();
  ::contextual_suggestions::AutoPeekConditions* temp = auto_peek_conditions_;
  auto_peek_conditions_ = NULL;
  return temp;
}
void Pivots::set_allocated_auto_peek_conditions(::contextual_suggestions::AutoPeekConditions* auto_peek_conditions) {
  delete auto_peek_conditions_;
  auto_peek_conditions_ = auto_peek_conditions;
  if (auto_peek_conditions) {
    set_has_auto_peek_conditions();
  } else {
    clear_has_auto_peek_conditions();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.Pivots.auto_peek_conditions)
}

// optional .contextual_suggestions.PeekText peek_text = 4;
bool Pivots::has_peek_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pivots::set_has_peek_text() {
  _has_bits_[0] |= 0x00000002u;
}
void Pivots::clear_has_peek_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pivots::clear_peek_text() {
  if (peek_text_ != NULL) peek_text_->::contextual_suggestions::PeekText::Clear();
  clear_has_peek_text();
}
const ::contextual_suggestions::PeekText& Pivots::peek_text() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Pivots.peek_text)
  return peek_text_ != NULL ? *peek_text_
                         : *::contextual_suggestions::PeekText::internal_default_instance();
}
::contextual_suggestions::PeekText* Pivots::mutable_peek_text() {
  set_has_peek_text();
  if (peek_text_ == NULL) {
    peek_text_ = new ::contextual_suggestions::PeekText;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Pivots.peek_text)
  return peek_text_;
}
::contextual_suggestions::PeekText* Pivots::release_peek_text() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.Pivots.peek_text)
  clear_has_peek_text();
  ::contextual_suggestions::PeekText* temp = peek_text_;
  peek_text_ = NULL;
  return temp;
}
void Pivots::set_allocated_peek_text(::contextual_suggestions::PeekText* peek_text) {
  delete peek_text_;
  peek_text_ = peek_text;
  if (peek_text) {
    set_has_peek_text();
  } else {
    clear_has_peek_text();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.Pivots.peek_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PivotItem::kDocumentFieldNumber;
const int PivotItem::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PivotItem::PivotItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.PivotItem)
}
PivotItem::PivotItem(const PivotItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kDocument: {
      mutable_document()->::contextual_suggestions::PivotDocument::MergeFrom(from.document());
      break;
    }
    case kCluster: {
      mutable_cluster()->::contextual_suggestions::PivotCluster::MergeFrom(from.cluster());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.PivotItem)
}

void PivotItem::SharedCtor() {
  _cached_size_ = 0;
  clear_has_kind();
}

PivotItem::~PivotItem() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.PivotItem)
  SharedDtor();
}

void PivotItem::SharedDtor() {
  if (has_kind()) {
    clear_kind();
  }
}

void PivotItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PivotItem& PivotItem::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

PivotItem* PivotItem::New(::google::protobuf::Arena* arena) const {
  PivotItem* n = new PivotItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PivotItem::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:contextual_suggestions.PivotItem)
  switch (kind_case()) {
    case kDocument: {
      delete kind_.document_;
      break;
    }
    case kCluster: {
      delete kind_.cluster_;
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void PivotItem::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.PivotItem)
  clear_kind();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PivotItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.PivotItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.PivotDocument document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.PivotCluster cluster = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.PivotItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.PivotItem)
  return false;
#undef DO_
}

void PivotItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.PivotItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (kind_case()) {
    case kDocument:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        1, *kind_.document_, output);
      break;
    case kCluster:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        6, *kind_.cluster_, output);
      break;
    default: ;
  }
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.PivotItem)
}

size_t PivotItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.PivotItem)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  switch (kind_case()) {
    // optional .contextual_suggestions.PivotDocument document = 1;
    case kDocument: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *kind_.document_);
      break;
    }
    // optional .contextual_suggestions.PivotCluster cluster = 6;
    case kCluster: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *kind_.cluster_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PivotItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PivotItem*>(&from));
}

void PivotItem::MergeFrom(const PivotItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.PivotItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kDocument: {
      mutable_document()->::contextual_suggestions::PivotDocument::MergeFrom(from.document());
      break;
    }
    case kCluster: {
      mutable_cluster()->::contextual_suggestions::PivotCluster::MergeFrom(from.cluster());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void PivotItem::CopyFrom(const PivotItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.PivotItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotItem::IsInitialized() const {
  return true;
}

void PivotItem::Swap(PivotItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PivotItem::InternalSwap(PivotItem* other) {
  std::swap(kind_, other->kind_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PivotItem::GetTypeName() const {
  return "contextual_suggestions.PivotItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PivotItem

// optional .contextual_suggestions.PivotDocument document = 1;
bool PivotItem::has_document() const {
  return kind_case() == kDocument;
}
void PivotItem::set_has_document() {
  _oneof_case_[0] = kDocument;
}
void PivotItem::clear_document() {
  if (has_document()) {
    delete kind_.document_;
    clear_has_kind();
  }
}
 const ::contextual_suggestions::PivotDocument& PivotItem::document() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotItem.document)
  return has_document()
      ? *kind_.document_
      : ::contextual_suggestions::PivotDocument::default_instance();
}
::contextual_suggestions::PivotDocument* PivotItem::mutable_document() {
  if (!has_document()) {
    clear_kind();
    set_has_document();
    kind_.document_ = new ::contextual_suggestions::PivotDocument;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotItem.document)
  return kind_.document_;
}
::contextual_suggestions::PivotDocument* PivotItem::release_document() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotItem.document)
  if (has_document()) {
    clear_has_kind();
    ::contextual_suggestions::PivotDocument* temp = kind_.document_;
    kind_.document_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PivotItem::set_allocated_document(::contextual_suggestions::PivotDocument* document) {
  clear_kind();
  if (document) {
    set_has_document();
    kind_.document_ = document;
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotItem.document)
}

// optional .contextual_suggestions.PivotCluster cluster = 6;
bool PivotItem::has_cluster() const {
  return kind_case() == kCluster;
}
void PivotItem::set_has_cluster() {
  _oneof_case_[0] = kCluster;
}
void PivotItem::clear_cluster() {
  if (has_cluster()) {
    delete kind_.cluster_;
    clear_has_kind();
  }
}
 const ::contextual_suggestions::PivotCluster& PivotItem::cluster() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotItem.cluster)
  return has_cluster()
      ? *kind_.cluster_
      : ::contextual_suggestions::PivotCluster::default_instance();
}
::contextual_suggestions::PivotCluster* PivotItem::mutable_cluster() {
  if (!has_cluster()) {
    clear_kind();
    set_has_cluster();
    kind_.cluster_ = new ::contextual_suggestions::PivotCluster;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotItem.cluster)
  return kind_.cluster_;
}
::contextual_suggestions::PivotCluster* PivotItem::release_cluster() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotItem.cluster)
  if (has_cluster()) {
    clear_has_kind();
    ::contextual_suggestions::PivotCluster* temp = kind_.cluster_;
    kind_.cluster_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PivotItem::set_allocated_cluster(::contextual_suggestions::PivotCluster* cluster) {
  clear_kind();
  if (cluster) {
    set_has_cluster();
    kind_.cluster_ = cluster;
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotItem.cluster)
}

bool PivotItem::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
void PivotItem::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
PivotItem::KindCase PivotItem::kind_case() const {
  return PivotItem::KindCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PivotDocument::kUrlFieldNumber;
const int PivotDocument::kImageFieldNumber;
const int PivotDocument::kTitleFieldNumber;
const int PivotDocument::kSummaryFieldNumber;
const int PivotDocument::kSiteNameFieldNumber;
const int PivotDocument::kFaviconImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PivotDocument::PivotDocument()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.PivotDocument)
}
PivotDocument::PivotDocument(const PivotDocument& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  summary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_summary()) {
    summary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summary_);
  }
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site_name()) {
    site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
  }
  if (from.has_url()) {
    url_ = new ::contextual_suggestions::Url(*from.url_);
  } else {
    url_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::contextual_suggestions::Image(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_favicon_image()) {
    favicon_image_ = new ::contextual_suggestions::Image(*from.favicon_image_);
  } else {
    favicon_image_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.PivotDocument)
}

void PivotDocument::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favicon_image_) -
      reinterpret_cast<char*>(&url_)) + sizeof(favicon_image_));
}

PivotDocument::~PivotDocument() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.PivotDocument)
  SharedDtor();
}

void PivotDocument::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete url_;
  }
  if (this != internal_default_instance()) {
    delete image_;
  }
  if (this != internal_default_instance()) {
    delete favicon_image_;
  }
}

void PivotDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PivotDocument& PivotDocument::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

PivotDocument* PivotDocument::New(::google::protobuf::Arena* arena) const {
  PivotDocument* n = new PivotDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PivotDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.PivotDocument)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_summary()) {
      GOOGLE_DCHECK(!summary_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*summary_.UnsafeRawStringPointer())->clear();
    }
    if (has_site_name()) {
      GOOGLE_DCHECK(!site_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*site_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(url_ != NULL);
      url_->::contextual_suggestions::Url::Clear();
    }
    if (has_image()) {
      GOOGLE_DCHECK(image_ != NULL);
      image_->::contextual_suggestions::Image::Clear();
    }
    if (has_favicon_image()) {
      GOOGLE_DCHECK(favicon_image_ != NULL);
      favicon_image_->::contextual_suggestions::Image::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PivotDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.PivotDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.Url url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.Image image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string summary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string site_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.Image favicon_image = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.PivotDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.PivotDocument)
  return false;
#undef DO_
}

void PivotDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.PivotDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.Url url = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->url_, output);
  }

  // optional .contextual_suggestions.Image image = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->image_, output);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string summary = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->summary(), output);
  }

  // optional string site_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->site_name(), output);
  }

  // optional .contextual_suggestions.Image favicon_image = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->favicon_image_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.PivotDocument)
}

size_t PivotDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.PivotDocument)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string summary = 4;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional string site_name = 5;
    if (has_site_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_name());
    }

    // optional .contextual_suggestions.Url url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->url_);
    }

    // optional .contextual_suggestions.Image image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_);
    }

    // optional .contextual_suggestions.Image favicon_image = 6;
    if (has_favicon_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->favicon_image_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PivotDocument::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PivotDocument*>(&from));
}

void PivotDocument::MergeFrom(const PivotDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.PivotDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_summary();
      summary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summary_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_site_name();
      site_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_url()->::contextual_suggestions::Url::MergeFrom(from.url());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_image()->::contextual_suggestions::Image::MergeFrom(from.image());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_favicon_image()->::contextual_suggestions::Image::MergeFrom(from.favicon_image());
    }
  }
}

void PivotDocument::CopyFrom(const PivotDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.PivotDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotDocument::IsInitialized() const {
  return true;
}

void PivotDocument::Swap(PivotDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PivotDocument::InternalSwap(PivotDocument* other) {
  title_.Swap(&other->title_);
  summary_.Swap(&other->summary_);
  site_name_.Swap(&other->site_name_);
  std::swap(url_, other->url_);
  std::swap(image_, other->image_);
  std::swap(favicon_image_, other->favicon_image_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PivotDocument::GetTypeName() const {
  return "contextual_suggestions.PivotDocument";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PivotDocument

// optional .contextual_suggestions.Url url = 1;
bool PivotDocument::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PivotDocument::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
void PivotDocument::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void PivotDocument::clear_url() {
  if (url_ != NULL) url_->::contextual_suggestions::Url::Clear();
  clear_has_url();
}
const ::contextual_suggestions::Url& PivotDocument::url() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.url)
  return url_ != NULL ? *url_
                         : *::contextual_suggestions::Url::internal_default_instance();
}
::contextual_suggestions::Url* PivotDocument::mutable_url() {
  set_has_url();
  if (url_ == NULL) {
    url_ = new ::contextual_suggestions::Url;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.url)
  return url_;
}
::contextual_suggestions::Url* PivotDocument::release_url() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.url)
  clear_has_url();
  ::contextual_suggestions::Url* temp = url_;
  url_ = NULL;
  return temp;
}
void PivotDocument::set_allocated_url(::contextual_suggestions::Url* url) {
  delete url_;
  url_ = url;
  if (url) {
    set_has_url();
  } else {
    clear_has_url();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.url)
}

// optional .contextual_suggestions.Image image = 2;
bool PivotDocument::has_image() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PivotDocument::set_has_image() {
  _has_bits_[0] |= 0x00000010u;
}
void PivotDocument::clear_has_image() {
  _has_bits_[0] &= ~0x00000010u;
}
void PivotDocument::clear_image() {
  if (image_ != NULL) image_->::contextual_suggestions::Image::Clear();
  clear_has_image();
}
const ::contextual_suggestions::Image& PivotDocument::image() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.image)
  return image_ != NULL ? *image_
                         : *::contextual_suggestions::Image::internal_default_instance();
}
::contextual_suggestions::Image* PivotDocument::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::contextual_suggestions::Image;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.image)
  return image_;
}
::contextual_suggestions::Image* PivotDocument::release_image() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.image)
  clear_has_image();
  ::contextual_suggestions::Image* temp = image_;
  image_ = NULL;
  return temp;
}
void PivotDocument::set_allocated_image(::contextual_suggestions::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.image)
}

// optional string title = 3;
bool PivotDocument::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PivotDocument::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void PivotDocument::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void PivotDocument::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& PivotDocument::title() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.title)
  return title_.GetNoArena();
}
void PivotDocument::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocument.title)
}
#if LANG_CXX11
void PivotDocument::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.PivotDocument.title)
}
#endif
void PivotDocument::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.PivotDocument.title)
}
void PivotDocument::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.PivotDocument.title)
}
::std::string* PivotDocument::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PivotDocument::release_title() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PivotDocument::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.title)
}

// optional string summary = 4;
bool PivotDocument::has_summary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PivotDocument::set_has_summary() {
  _has_bits_[0] |= 0x00000002u;
}
void PivotDocument::clear_has_summary() {
  _has_bits_[0] &= ~0x00000002u;
}
void PivotDocument::clear_summary() {
  summary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_summary();
}
const ::std::string& PivotDocument::summary() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.summary)
  return summary_.GetNoArena();
}
void PivotDocument::set_summary(const ::std::string& value) {
  set_has_summary();
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocument.summary)
}
#if LANG_CXX11
void PivotDocument::set_summary(::std::string&& value) {
  set_has_summary();
  summary_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.PivotDocument.summary)
}
#endif
void PivotDocument::set_summary(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_summary();
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.PivotDocument.summary)
}
void PivotDocument::set_summary(const char* value, size_t size) {
  set_has_summary();
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.PivotDocument.summary)
}
::std::string* PivotDocument::mutable_summary() {
  set_has_summary();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.summary)
  return summary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PivotDocument::release_summary() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.summary)
  clear_has_summary();
  return summary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PivotDocument::set_allocated_summary(::std::string* summary) {
  if (summary != NULL) {
    set_has_summary();
  } else {
    clear_has_summary();
  }
  summary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), summary);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.summary)
}

// optional string site_name = 5;
bool PivotDocument::has_site_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PivotDocument::set_has_site_name() {
  _has_bits_[0] |= 0x00000004u;
}
void PivotDocument::clear_has_site_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void PivotDocument::clear_site_name() {
  site_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_name();
}
const ::std::string& PivotDocument::site_name() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.site_name)
  return site_name_.GetNoArena();
}
void PivotDocument::set_site_name(const ::std::string& value) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocument.site_name)
}
#if LANG_CXX11
void PivotDocument::set_site_name(::std::string&& value) {
  set_has_site_name();
  site_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.PivotDocument.site_name)
}
#endif
void PivotDocument::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.PivotDocument.site_name)
}
void PivotDocument::set_site_name(const char* value, size_t size) {
  set_has_site_name();
  site_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.PivotDocument.site_name)
}
::std::string* PivotDocument::mutable_site_name() {
  set_has_site_name();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.site_name)
  return site_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PivotDocument::release_site_name() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.site_name)
  clear_has_site_name();
  return site_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PivotDocument::set_allocated_site_name(::std::string* site_name) {
  if (site_name != NULL) {
    set_has_site_name();
  } else {
    clear_has_site_name();
  }
  site_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_name);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.site_name)
}

// optional .contextual_suggestions.Image favicon_image = 6;
bool PivotDocument::has_favicon_image() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PivotDocument::set_has_favicon_image() {
  _has_bits_[0] |= 0x00000020u;
}
void PivotDocument::clear_has_favicon_image() {
  _has_bits_[0] &= ~0x00000020u;
}
void PivotDocument::clear_favicon_image() {
  if (favicon_image_ != NULL) favicon_image_->::contextual_suggestions::Image::Clear();
  clear_has_favicon_image();
}
const ::contextual_suggestions::Image& PivotDocument::favicon_image() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocument.favicon_image)
  return favicon_image_ != NULL ? *favicon_image_
                         : *::contextual_suggestions::Image::internal_default_instance();
}
::contextual_suggestions::Image* PivotDocument::mutable_favicon_image() {
  set_has_favicon_image();
  if (favicon_image_ == NULL) {
    favicon_image_ = new ::contextual_suggestions::Image;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotDocument.favicon_image)
  return favicon_image_;
}
::contextual_suggestions::Image* PivotDocument::release_favicon_image() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotDocument.favicon_image)
  clear_has_favicon_image();
  ::contextual_suggestions::Image* temp = favicon_image_;
  favicon_image_ = NULL;
  return temp;
}
void PivotDocument::set_allocated_favicon_image(::contextual_suggestions::Image* favicon_image) {
  delete favicon_image_;
  favicon_image_ = favicon_image;
  if (favicon_image) {
    set_has_favicon_image();
  } else {
    clear_has_favicon_image();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotDocument.favicon_image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PivotCluster::kLabelFieldNumber;
const int PivotCluster::kItemFieldNumber;
const int PivotCluster::kNumItemsToDisplayPreExpansionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PivotCluster::PivotCluster()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.PivotCluster)
}
PivotCluster::PivotCluster(const PivotCluster& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_label()) {
    label_ = new ::contextual_suggestions::ClusterLabel(*from.label_);
  } else {
    label_ = NULL;
  }
  num_items_to_display_pre_expansion_ = from.num_items_to_display_pre_expansion_;
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.PivotCluster)
}

void PivotCluster::SharedCtor() {
  _cached_size_ = 0;
  label_ = NULL;
  num_items_to_display_pre_expansion_ = 1;
}

PivotCluster::~PivotCluster() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.PivotCluster)
  SharedDtor();
}

void PivotCluster::SharedDtor() {
  if (this != internal_default_instance()) {
    delete label_;
  }
}

void PivotCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PivotCluster& PivotCluster::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

PivotCluster* PivotCluster::New(::google::protobuf::Arena* arena) const {
  PivotCluster* n = new PivotCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PivotCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.PivotCluster)
  item_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_label()) {
      GOOGLE_DCHECK(label_ != NULL);
      label_->::contextual_suggestions::ClusterLabel::Clear();
    }
    num_items_to_display_pre_expansion_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PivotCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.PivotCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.ClusterLabel label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .contextual_suggestions.PivotItem item = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_items_to_display_pre_expansion = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_items_to_display_pre_expansion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_items_to_display_pre_expansion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.PivotCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.PivotCluster)
  return false;
#undef DO_
}

void PivotCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.PivotCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.ClusterLabel label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->label_, output);
  }

  // repeated .contextual_suggestions.PivotItem item = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->item(static_cast<int>(i)), output);
  }

  // optional int32 num_items_to_display_pre_expansion = 3 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_items_to_display_pre_expansion(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.PivotCluster)
}

size_t PivotCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.PivotCluster)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .contextual_suggestions.PivotItem item = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .contextual_suggestions.ClusterLabel label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_);
    }

    // optional int32 num_items_to_display_pre_expansion = 3 [default = 1];
    if (has_num_items_to_display_pre_expansion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_items_to_display_pre_expansion());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PivotCluster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PivotCluster*>(&from));
}

void PivotCluster::MergeFrom(const PivotCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.PivotCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_label()->::contextual_suggestions::ClusterLabel::MergeFrom(from.label());
    }
    if (cached_has_bits & 0x00000002u) {
      num_items_to_display_pre_expansion_ = from.num_items_to_display_pre_expansion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PivotCluster::CopyFrom(const PivotCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.PivotCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotCluster::IsInitialized() const {
  return true;
}

void PivotCluster::Swap(PivotCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PivotCluster::InternalSwap(PivotCluster* other) {
  item_.InternalSwap(&other->item_);
  std::swap(label_, other->label_);
  std::swap(num_items_to_display_pre_expansion_, other->num_items_to_display_pre_expansion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PivotCluster::GetTypeName() const {
  return "contextual_suggestions.PivotCluster";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PivotCluster

// optional .contextual_suggestions.ClusterLabel label = 1;
bool PivotCluster::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PivotCluster::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void PivotCluster::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void PivotCluster::clear_label() {
  if (label_ != NULL) label_->::contextual_suggestions::ClusterLabel::Clear();
  clear_has_label();
}
const ::contextual_suggestions::ClusterLabel& PivotCluster::label() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotCluster.label)
  return label_ != NULL ? *label_
                         : *::contextual_suggestions::ClusterLabel::internal_default_instance();
}
::contextual_suggestions::ClusterLabel* PivotCluster::mutable_label() {
  set_has_label();
  if (label_ == NULL) {
    label_ = new ::contextual_suggestions::ClusterLabel;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotCluster.label)
  return label_;
}
::contextual_suggestions::ClusterLabel* PivotCluster::release_label() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PivotCluster.label)
  clear_has_label();
  ::contextual_suggestions::ClusterLabel* temp = label_;
  label_ = NULL;
  return temp;
}
void PivotCluster::set_allocated_label(::contextual_suggestions::ClusterLabel* label) {
  delete label_;
  label_ = label;
  if (label) {
    set_has_label();
  } else {
    clear_has_label();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PivotCluster.label)
}

// repeated .contextual_suggestions.PivotItem item = 2;
int PivotCluster::item_size() const {
  return item_.size();
}
void PivotCluster::clear_item() {
  item_.Clear();
}
const ::contextual_suggestions::PivotItem& PivotCluster::item(int index) const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotCluster.item)
  return item_.Get(index);
}
::contextual_suggestions::PivotItem* PivotCluster::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PivotCluster.item)
  return item_.Mutable(index);
}
::contextual_suggestions::PivotItem* PivotCluster::add_item() {
  // @@protoc_insertion_point(field_add:contextual_suggestions.PivotCluster.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >*
PivotCluster::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:contextual_suggestions.PivotCluster.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::PivotItem >&
PivotCluster::item() const {
  // @@protoc_insertion_point(field_list:contextual_suggestions.PivotCluster.item)
  return item_;
}

// optional int32 num_items_to_display_pre_expansion = 3 [default = 1];
bool PivotCluster::has_num_items_to_display_pre_expansion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PivotCluster::set_has_num_items_to_display_pre_expansion() {
  _has_bits_[0] |= 0x00000002u;
}
void PivotCluster::clear_has_num_items_to_display_pre_expansion() {
  _has_bits_[0] &= ~0x00000002u;
}
void PivotCluster::clear_num_items_to_display_pre_expansion() {
  num_items_to_display_pre_expansion_ = 1;
  clear_has_num_items_to_display_pre_expansion();
}
::google::protobuf::int32 PivotCluster::num_items_to_display_pre_expansion() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotCluster.num_items_to_display_pre_expansion)
  return num_items_to_display_pre_expansion_;
}
void PivotCluster::set_num_items_to_display_pre_expansion(::google::protobuf::int32 value) {
  set_has_num_items_to_display_pre_expansion();
  num_items_to_display_pre_expansion_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotCluster.num_items_to_display_pre_expansion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterLabel::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterLabel::ClusterLabel()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.ClusterLabel)
}
ClusterLabel::ClusterLabel(const ClusterLabel& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.ClusterLabel)
}

void ClusterLabel::SharedCtor() {
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClusterLabel::~ClusterLabel() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.ClusterLabel)
  SharedDtor();
}

void ClusterLabel::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClusterLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClusterLabel& ClusterLabel::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterLabel* ClusterLabel::New(::google::protobuf::Arena* arena) const {
  ClusterLabel* n = new ClusterLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.ClusterLabel)
  if (has_label()) {
    GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*label_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClusterLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.ClusterLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.ClusterLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.ClusterLabel)
  return false;
#undef DO_
}

void ClusterLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.ClusterLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.ClusterLabel)
}

size_t ClusterLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.ClusterLabel)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string label = 1;
  if (has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterLabel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClusterLabel*>(&from));
}

void ClusterLabel::MergeFrom(const ClusterLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.ClusterLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_label()) {
    set_has_label();
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
}

void ClusterLabel::CopyFrom(const ClusterLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.ClusterLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterLabel::IsInitialized() const {
  return true;
}

void ClusterLabel::Swap(ClusterLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterLabel::InternalSwap(ClusterLabel* other) {
  label_.Swap(&other->label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClusterLabel::GetTypeName() const {
  return "contextual_suggestions.ClusterLabel";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterLabel

// optional string label = 1;
bool ClusterLabel::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClusterLabel::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void ClusterLabel::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClusterLabel::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& ClusterLabel::label() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.ClusterLabel.label)
  return label_.GetNoArena();
}
void ClusterLabel::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.ClusterLabel.label)
}
#if LANG_CXX11
void ClusterLabel::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.ClusterLabel.label)
}
#endif
void ClusterLabel::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.ClusterLabel.label)
}
void ClusterLabel::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.ClusterLabel.label)
}
::std::string* ClusterLabel::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.ClusterLabel.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterLabel::release_label() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.ClusterLabel.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterLabel::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.ClusterLabel.label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoPeekConditions::kConfidenceFieldNumber;
const int AutoPeekConditions::kPageScrollPercentageFieldNumber;
const int AutoPeekConditions::kMinimumSecondsOnPageFieldNumber;
const int AutoPeekConditions::kMaximumNumberOfPeeksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoPeekConditions::AutoPeekConditions()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.AutoPeekConditions)
}
AutoPeekConditions::AutoPeekConditions(const AutoPeekConditions& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_scroll_percentage_, &from.page_scroll_percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&page_scroll_percentage_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.AutoPeekConditions)
}

void AutoPeekConditions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&page_scroll_percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_number_of_peeks_) -
      reinterpret_cast<char*>(&page_scroll_percentage_)) + sizeof(maximum_number_of_peeks_));
  confidence_ = 1;
}

AutoPeekConditions::~AutoPeekConditions() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.AutoPeekConditions)
  SharedDtor();
}

void AutoPeekConditions::SharedDtor() {
}

void AutoPeekConditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutoPeekConditions& AutoPeekConditions::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoPeekConditions* AutoPeekConditions::New(::google::protobuf::Arena* arena) const {
  AutoPeekConditions* n = new AutoPeekConditions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoPeekConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.AutoPeekConditions)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&page_scroll_percentage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maximum_number_of_peeks_) -
        reinterpret_cast<char*>(&page_scroll_percentage_)) + sizeof(maximum_number_of_peeks_));
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoPeekConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.AutoPeekConditions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float confidence = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float page_scroll_percentage = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_page_scroll_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &page_scroll_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float minimum_seconds_on_page = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_minimum_seconds_on_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minimum_seconds_on_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 maximum_number_of_peeks = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_maximum_number_of_peeks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maximum_number_of_peeks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.AutoPeekConditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.AutoPeekConditions)
  return false;
#undef DO_
}

void AutoPeekConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.AutoPeekConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float confidence = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // optional float page_scroll_percentage = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->page_scroll_percentage(), output);
  }

  // optional float minimum_seconds_on_page = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minimum_seconds_on_page(), output);
  }

  // optional uint64 maximum_number_of_peeks = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maximum_number_of_peeks(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.AutoPeekConditions)
}

size_t AutoPeekConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.AutoPeekConditions)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional float page_scroll_percentage = 2 [default = 0];
    if (has_page_scroll_percentage()) {
      total_size += 1 + 4;
    }

    // optional float minimum_seconds_on_page = 3 [default = 0];
    if (has_minimum_seconds_on_page()) {
      total_size += 1 + 4;
    }

    // optional uint64 maximum_number_of_peeks = 4 [default = 0];
    if (has_maximum_number_of_peeks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maximum_number_of_peeks());
    }

    // optional float confidence = 1 [default = 1];
    if (has_confidence()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoPeekConditions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutoPeekConditions*>(&from));
}

void AutoPeekConditions::MergeFrom(const AutoPeekConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.AutoPeekConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      page_scroll_percentage_ = from.page_scroll_percentage_;
    }
    if (cached_has_bits & 0x00000002u) {
      minimum_seconds_on_page_ = from.minimum_seconds_on_page_;
    }
    if (cached_has_bits & 0x00000004u) {
      maximum_number_of_peeks_ = from.maximum_number_of_peeks_;
    }
    if (cached_has_bits & 0x00000008u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutoPeekConditions::CopyFrom(const AutoPeekConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.AutoPeekConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoPeekConditions::IsInitialized() const {
  return true;
}

void AutoPeekConditions::Swap(AutoPeekConditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoPeekConditions::InternalSwap(AutoPeekConditions* other) {
  std::swap(page_scroll_percentage_, other->page_scroll_percentage_);
  std::swap(minimum_seconds_on_page_, other->minimum_seconds_on_page_);
  std::swap(maximum_number_of_peeks_, other->maximum_number_of_peeks_);
  std::swap(confidence_, other->confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutoPeekConditions::GetTypeName() const {
  return "contextual_suggestions.AutoPeekConditions";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoPeekConditions

// optional float confidence = 1 [default = 1];
bool AutoPeekConditions::has_confidence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AutoPeekConditions::set_has_confidence() {
  _has_bits_[0] |= 0x00000008u;
}
void AutoPeekConditions::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000008u;
}
void AutoPeekConditions::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
float AutoPeekConditions::confidence() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.AutoPeekConditions.confidence)
  return confidence_;
}
void AutoPeekConditions::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.AutoPeekConditions.confidence)
}

// optional float page_scroll_percentage = 2 [default = 0];
bool AutoPeekConditions::has_page_scroll_percentage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoPeekConditions::set_has_page_scroll_percentage() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoPeekConditions::clear_has_page_scroll_percentage() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoPeekConditions::clear_page_scroll_percentage() {
  page_scroll_percentage_ = 0;
  clear_has_page_scroll_percentage();
}
float AutoPeekConditions::page_scroll_percentage() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.AutoPeekConditions.page_scroll_percentage)
  return page_scroll_percentage_;
}
void AutoPeekConditions::set_page_scroll_percentage(float value) {
  set_has_page_scroll_percentage();
  page_scroll_percentage_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.AutoPeekConditions.page_scroll_percentage)
}

// optional float minimum_seconds_on_page = 3 [default = 0];
bool AutoPeekConditions::has_minimum_seconds_on_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoPeekConditions::set_has_minimum_seconds_on_page() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoPeekConditions::clear_has_minimum_seconds_on_page() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoPeekConditions::clear_minimum_seconds_on_page() {
  minimum_seconds_on_page_ = 0;
  clear_has_minimum_seconds_on_page();
}
float AutoPeekConditions::minimum_seconds_on_page() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.AutoPeekConditions.minimum_seconds_on_page)
  return minimum_seconds_on_page_;
}
void AutoPeekConditions::set_minimum_seconds_on_page(float value) {
  set_has_minimum_seconds_on_page();
  minimum_seconds_on_page_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.AutoPeekConditions.minimum_seconds_on_page)
}

// optional uint64 maximum_number_of_peeks = 4 [default = 0];
bool AutoPeekConditions::has_maximum_number_of_peeks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutoPeekConditions::set_has_maximum_number_of_peeks() {
  _has_bits_[0] |= 0x00000004u;
}
void AutoPeekConditions::clear_has_maximum_number_of_peeks() {
  _has_bits_[0] &= ~0x00000004u;
}
void AutoPeekConditions::clear_maximum_number_of_peeks() {
  maximum_number_of_peeks_ = GOOGLE_ULONGLONG(0);
  clear_has_maximum_number_of_peeks();
}
::google::protobuf::uint64 AutoPeekConditions::maximum_number_of_peeks() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.AutoPeekConditions.maximum_number_of_peeks)
  return maximum_number_of_peeks_;
}
void AutoPeekConditions::set_maximum_number_of_peeks(::google::protobuf::uint64 value) {
  set_has_maximum_number_of_peeks();
  maximum_number_of_peeks_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.AutoPeekConditions.maximum_number_of_peeks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeekText::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeekText::PeekText()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.PeekText)
}
PeekText::PeekText(const PeekText& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.PeekText)
}

void PeekText::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeekText::~PeekText() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.PeekText)
  SharedDtor();
}

void PeekText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeekText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PeekText& PeekText::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

PeekText* PeekText::New(::google::protobuf::Arena* arena) const {
  PeekText* n = new PeekText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeekText::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.PeekText)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PeekText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.PeekText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.PeekText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.PeekText)
  return false;
#undef DO_
}

void PeekText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.PeekText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.PeekText)
}

size_t PeekText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.PeekText)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeekText::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PeekText*>(&from));
}

void PeekText::MergeFrom(const PeekText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.PeekText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void PeekText::CopyFrom(const PeekText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.PeekText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeekText::IsInitialized() const {
  return true;
}

void PeekText::Swap(PeekText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeekText::InternalSwap(PeekText* other) {
  text_.Swap(&other->text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PeekText::GetTypeName() const {
  return "contextual_suggestions.PeekText";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeekText

// optional string text = 1;
bool PeekText::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PeekText::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void PeekText::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void PeekText::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& PeekText::text() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PeekText.text)
  return text_.GetNoArena();
}
void PeekText::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.PeekText.text)
}
#if LANG_CXX11
void PeekText::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.PeekText.text)
}
#endif
void PeekText::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.PeekText.text)
}
void PeekText::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.PeekText.text)
}
::std::string* PeekText::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.PeekText.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PeekText::release_text() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.PeekText.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PeekText::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.PeekText.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Url::kRawUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Url::Url()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.Url)
}
Url::Url(const Url& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_url()) {
    raw_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_url_);
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.Url)
}

void Url::SharedCtor() {
  _cached_size_ = 0;
  raw_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Url::~Url() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.Url)
  SharedDtor();
}

void Url::SharedDtor() {
  raw_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Url::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Url& Url::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

Url* Url::New(::google::protobuf::Arena* arena) const {
  Url* n = new Url;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Url::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.Url)
  if (has_raw_url()) {
    GOOGLE_DCHECK(!raw_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*raw_url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Url::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.Url)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string raw_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.Url)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.Url)
  return false;
#undef DO_
}

void Url::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.Url)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string raw_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->raw_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.Url)
}

size_t Url::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.Url)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string raw_url = 1;
  if (has_raw_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raw_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Url::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Url*>(&from));
}

void Url::MergeFrom(const Url& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.Url)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_raw_url()) {
    set_has_raw_url();
    raw_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_url_);
  }
}

void Url::CopyFrom(const Url& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.Url)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Url::IsInitialized() const {
  return true;
}

void Url::Swap(Url* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Url::InternalSwap(Url* other) {
  raw_url_.Swap(&other->raw_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Url::GetTypeName() const {
  return "contextual_suggestions.Url";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Url

// optional string raw_url = 1;
bool Url::has_raw_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Url::set_has_raw_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Url::clear_has_raw_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Url::clear_raw_url() {
  raw_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_url();
}
const ::std::string& Url::raw_url() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Url.raw_url)
  return raw_url_.GetNoArena();
}
void Url::set_raw_url(const ::std::string& value) {
  set_has_raw_url();
  raw_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.Url.raw_url)
}
#if LANG_CXX11
void Url::set_raw_url(::std::string&& value) {
  set_has_raw_url();
  raw_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.Url.raw_url)
}
#endif
void Url::set_raw_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_url();
  raw_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.Url.raw_url)
}
void Url::set_raw_url(const char* value, size_t size) {
  set_has_raw_url();
  raw_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.Url.raw_url)
}
::std::string* Url::mutable_raw_url() {
  set_has_raw_url();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Url.raw_url)
  return raw_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Url::release_raw_url() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.Url.raw_url)
  clear_has_raw_url();
  return raw_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Url::set_allocated_raw_url(::std::string* raw_url) {
  if (raw_url != NULL) {
    set_has_raw_url();
  } else {
    clear_has_raw_url();
  }
  raw_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_url);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.Url.raw_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kIdFieldNumber;
const int Image::kSourceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::contextual_suggestions::ImageId(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_source_data()) {
    source_data_ = new ::contextual_suggestions::ImageSource(*from.source_data_);
  } else {
    source_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.Image)
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_data_) -
      reinterpret_cast<char*>(&id_)) + sizeof(source_data_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete source_data_;
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Image& Image::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.Image)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::contextual_suggestions::ImageId::Clear();
    }
    if (has_source_data()) {
      GOOGLE_DCHECK(source_data_ != NULL);
      source_data_->::contextual_suggestions::ImageSource::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.ImageId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.ImageSource source_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.ImageId id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->id_, output);
  }

  // optional .contextual_suggestions.ImageSource source_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->source_data_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.Image)
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.Image)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .contextual_suggestions.ImageId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .contextual_suggestions.ImageSource source_data = 2;
    if (has_source_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_data_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Image*>(&from));
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::contextual_suggestions::ImageId::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_source_data()->::contextual_suggestions::ImageSource::MergeFrom(from.source_data());
    }
  }
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  std::swap(id_, other->id_);
  std::swap(source_data_, other->source_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Image::GetTypeName() const {
  return "contextual_suggestions.Image";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// optional .contextual_suggestions.ImageId id = 1;
bool Image::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Image::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Image::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Image::clear_id() {
  if (id_ != NULL) id_->::contextual_suggestions::ImageId::Clear();
  clear_has_id();
}
const ::contextual_suggestions::ImageId& Image::id() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Image.id)
  return id_ != NULL ? *id_
                         : *::contextual_suggestions::ImageId::internal_default_instance();
}
::contextual_suggestions::ImageId* Image::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::contextual_suggestions::ImageId;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Image.id)
  return id_;
}
::contextual_suggestions::ImageId* Image::release_id() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.Image.id)
  clear_has_id();
  ::contextual_suggestions::ImageId* temp = id_;
  id_ = NULL;
  return temp;
}
void Image::set_allocated_id(::contextual_suggestions::ImageId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.Image.id)
}

// optional .contextual_suggestions.ImageSource source_data = 2;
bool Image::has_source_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Image::set_has_source_data() {
  _has_bits_[0] |= 0x00000002u;
}
void Image::clear_has_source_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void Image::clear_source_data() {
  if (source_data_ != NULL) source_data_->::contextual_suggestions::ImageSource::Clear();
  clear_has_source_data();
}
const ::contextual_suggestions::ImageSource& Image::source_data() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.Image.source_data)
  return source_data_ != NULL ? *source_data_
                         : *::contextual_suggestions::ImageSource::internal_default_instance();
}
::contextual_suggestions::ImageSource* Image::mutable_source_data() {
  set_has_source_data();
  if (source_data_ == NULL) {
    source_data_ = new ::contextual_suggestions::ImageSource;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.Image.source_data)
  return source_data_;
}
::contextual_suggestions::ImageSource* Image::release_source_data() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.Image.source_data)
  clear_has_source_data();
  ::contextual_suggestions::ImageSource* temp = source_data_;
  source_data_ = NULL;
  return temp;
}
void Image::set_allocated_source_data(::contextual_suggestions::ImageSource* source_data) {
  delete source_data_;
  source_data_ = source_data;
  if (source_data) {
    set_has_source_data();
  } else {
    clear_has_source_data();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.Image.source_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageId::kEncryptedDocidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageId::ImageId()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.ImageId)
}
ImageId::ImageId(const ImageId& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypted_docid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypted_docid()) {
    encrypted_docid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_docid_);
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.ImageId)
}

void ImageId::SharedCtor() {
  _cached_size_ = 0;
  encrypted_docid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ImageId::~ImageId() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.ImageId)
  SharedDtor();
}

void ImageId::SharedDtor() {
  encrypted_docid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageId& ImageId::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageId* ImageId::New(::google::protobuf::Arena* arena) const {
  ImageId* n = new ImageId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageId::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.ImageId)
  if (has_encrypted_docid()) {
    GOOGLE_DCHECK(!encrypted_docid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*encrypted_docid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.ImageId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string encrypted_docid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypted_docid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.ImageId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.ImageId)
  return false;
#undef DO_
}

void ImageId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.ImageId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string encrypted_docid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->encrypted_docid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.ImageId)
}

size_t ImageId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.ImageId)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string encrypted_docid = 1;
  if (has_encrypted_docid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->encrypted_docid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageId*>(&from));
}

void ImageId::MergeFrom(const ImageId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.ImageId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_encrypted_docid()) {
    set_has_encrypted_docid();
    encrypted_docid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_docid_);
  }
}

void ImageId::CopyFrom(const ImageId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.ImageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageId::IsInitialized() const {
  return true;
}

void ImageId::Swap(ImageId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageId::InternalSwap(ImageId* other) {
  encrypted_docid_.Swap(&other->encrypted_docid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageId::GetTypeName() const {
  return "contextual_suggestions.ImageId";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageId

// optional string encrypted_docid = 1;
bool ImageId::has_encrypted_docid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageId::set_has_encrypted_docid() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageId::clear_has_encrypted_docid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageId::clear_encrypted_docid() {
  encrypted_docid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypted_docid();
}
const ::std::string& ImageId::encrypted_docid() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.ImageId.encrypted_docid)
  return encrypted_docid_.GetNoArena();
}
void ImageId::set_encrypted_docid(const ::std::string& value) {
  set_has_encrypted_docid();
  encrypted_docid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.ImageId.encrypted_docid)
}
#if LANG_CXX11
void ImageId::set_encrypted_docid(::std::string&& value) {
  set_has_encrypted_docid();
  encrypted_docid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.ImageId.encrypted_docid)
}
#endif
void ImageId::set_encrypted_docid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encrypted_docid();
  encrypted_docid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.ImageId.encrypted_docid)
}
void ImageId::set_encrypted_docid(const char* value, size_t size) {
  set_has_encrypted_docid();
  encrypted_docid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.ImageId.encrypted_docid)
}
::std::string* ImageId::mutable_encrypted_docid() {
  set_has_encrypted_docid();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.ImageId.encrypted_docid)
  return encrypted_docid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageId::release_encrypted_docid() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.ImageId.encrypted_docid)
  clear_has_encrypted_docid();
  return encrypted_docid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageId::set_allocated_encrypted_docid(::std::string* encrypted_docid) {
  if (encrypted_docid != NULL) {
    set_has_encrypted_docid();
  } else {
    clear_has_encrypted_docid();
  }
  encrypted_docid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_docid);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.ImageId.encrypted_docid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageSource::kRasterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageSource::ImageSource()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.ImageSource)
}
ImageSource::ImageSource(const ImageSource& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_raster()) {
    raster_ = new ::contextual_suggestions::RasterImage(*from.raster_);
  } else {
    raster_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.ImageSource)
}

void ImageSource::SharedCtor() {
  _cached_size_ = 0;
  raster_ = NULL;
}

ImageSource::~ImageSource() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.ImageSource)
  SharedDtor();
}

void ImageSource::SharedDtor() {
  if (this != internal_default_instance()) {
    delete raster_;
  }
}

void ImageSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageSource& ImageSource::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageSource* ImageSource::New(::google::protobuf::Arena* arena) const {
  ImageSource* n = new ImageSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageSource::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.ImageSource)
  if (has_raster()) {
    GOOGLE_DCHECK(raster_ != NULL);
    raster_->::contextual_suggestions::RasterImage::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.ImageSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.RasterImage raster = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.ImageSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.ImageSource)
  return false;
#undef DO_
}

void ImageSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.ImageSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.RasterImage raster = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->raster_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.ImageSource)
}

size_t ImageSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.ImageSource)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .contextual_suggestions.RasterImage raster = 1;
  if (has_raster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->raster_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageSource::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageSource*>(&from));
}

void ImageSource::MergeFrom(const ImageSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.ImageSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_raster()) {
    mutable_raster()->::contextual_suggestions::RasterImage::MergeFrom(from.raster());
  }
}

void ImageSource::CopyFrom(const ImageSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.ImageSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSource::IsInitialized() const {
  return true;
}

void ImageSource::Swap(ImageSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageSource::InternalSwap(ImageSource* other) {
  std::swap(raster_, other->raster_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageSource::GetTypeName() const {
  return "contextual_suggestions.ImageSource";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageSource

// optional .contextual_suggestions.RasterImage raster = 1;
bool ImageSource::has_raster() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageSource::set_has_raster() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageSource::clear_has_raster() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageSource::clear_raster() {
  if (raster_ != NULL) raster_->::contextual_suggestions::RasterImage::Clear();
  clear_has_raster();
}
const ::contextual_suggestions::RasterImage& ImageSource::raster() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.ImageSource.raster)
  return raster_ != NULL ? *raster_
                         : *::contextual_suggestions::RasterImage::internal_default_instance();
}
::contextual_suggestions::RasterImage* ImageSource::mutable_raster() {
  set_has_raster();
  if (raster_ == NULL) {
    raster_ = new ::contextual_suggestions::RasterImage;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.ImageSource.raster)
  return raster_;
}
::contextual_suggestions::RasterImage* ImageSource::release_raster() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.ImageSource.raster)
  clear_has_raster();
  ::contextual_suggestions::RasterImage* temp = raster_;
  raster_ = NULL;
  return temp;
}
void ImageSource::set_allocated_raster(::contextual_suggestions::RasterImage* raster) {
  delete raster_;
  raster_ = raster;
  if (raster) {
    set_has_raster();
  } else {
    clear_has_raster();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.ImageSource.raster)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RasterImage::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RasterImage::RasterImage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.RasterImage)
}
RasterImage::RasterImage(const RasterImage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_url()) {
    url_ = new ::contextual_suggestions::Url(*from.url_);
  } else {
    url_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.RasterImage)
}

void RasterImage::SharedCtor() {
  _cached_size_ = 0;
  url_ = NULL;
}

RasterImage::~RasterImage() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.RasterImage)
  SharedDtor();
}

void RasterImage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete url_;
  }
}

void RasterImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RasterImage& RasterImage::default_instance() {
  protobuf_get_5fpivots_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

RasterImage* RasterImage::New(::google::protobuf::Arena* arena) const {
  RasterImage* n = new RasterImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RasterImage::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.RasterImage)
  if (has_url()) {
    GOOGLE_DCHECK(url_ != NULL);
    url_->::contextual_suggestions::Url::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RasterImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.RasterImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.Url url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.RasterImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.RasterImage)
  return false;
#undef DO_
}

void RasterImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.RasterImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.Url url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->url_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.RasterImage)
}

size_t RasterImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.RasterImage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .contextual_suggestions.Url url = 2;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->url_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RasterImage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RasterImage*>(&from));
}

void RasterImage::MergeFrom(const RasterImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.RasterImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    mutable_url()->::contextual_suggestions::Url::MergeFrom(from.url());
  }
}

void RasterImage::CopyFrom(const RasterImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.RasterImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RasterImage::IsInitialized() const {
  return true;
}

void RasterImage::Swap(RasterImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RasterImage::InternalSwap(RasterImage* other) {
  std::swap(url_, other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RasterImage::GetTypeName() const {
  return "contextual_suggestions.RasterImage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RasterImage

// optional .contextual_suggestions.Url url = 2;
bool RasterImage::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RasterImage::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void RasterImage::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void RasterImage::clear_url() {
  if (url_ != NULL) url_->::contextual_suggestions::Url::Clear();
  clear_has_url();
}
const ::contextual_suggestions::Url& RasterImage::url() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.RasterImage.url)
  return url_ != NULL ? *url_
                         : *::contextual_suggestions::Url::internal_default_instance();
}
::contextual_suggestions::Url* RasterImage::mutable_url() {
  set_has_url();
  if (url_ == NULL) {
    url_ = new ::contextual_suggestions::Url;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.RasterImage.url)
  return url_;
}
::contextual_suggestions::Url* RasterImage::release_url() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.RasterImage.url)
  clear_has_url();
  ::contextual_suggestions::Url* temp = url_;
  url_ = NULL;
  return temp;
}
void RasterImage::set_allocated_url(::contextual_suggestions::Url* url) {
  delete url_;
  url_ = url;
  if (url) {
    set_has_url();
  } else {
    clear_has_url();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.RasterImage.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace contextual_suggestions

// @@protoc_insertion_point(global_scope)
