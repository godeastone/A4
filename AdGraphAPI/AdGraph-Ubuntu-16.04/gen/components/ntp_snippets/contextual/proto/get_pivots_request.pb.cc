// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_pivots_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "get_pivots_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace contextual_suggestions {
class GetPivotsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPivotsRequest> {
} _GetPivotsRequest_default_instance_;
class GetPivotsQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPivotsQuery> {
} _GetPivotsQuery_default_instance_;
class ExploreContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExploreContext> {
} _ExploreContext_default_instance_;
class PivotDocumentParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PivotDocumentParams> {
} _PivotDocumentParams_default_instance_;
class PivotClusteringParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PivotClusteringParams> {
} _PivotClusteringParams_default_instance_;
class PivotPeekTextParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PivotPeekTextParams> {
} _PivotPeekTextParams_default_instance_;

namespace protobuf_get_5fpivots_5frequest_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _GetPivotsRequest_default_instance_.Shutdown();
  _GetPivotsQuery_default_instance_.Shutdown();
  _ExploreContext_default_instance_.Shutdown();
  _PivotDocumentParams_default_instance_.Shutdown();
  _PivotClusteringParams_default_instance_.Shutdown();
  _PivotPeekTextParams_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::contextual_suggestions::protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  _GetPivotsRequest_default_instance_.DefaultConstruct();
  _GetPivotsQuery_default_instance_.DefaultConstruct();
  _ExploreContext_default_instance_.DefaultConstruct();
  _PivotDocumentParams_default_instance_.DefaultConstruct();
  _PivotClusteringParams_default_instance_.DefaultConstruct();
  _PivotPeekTextParams_default_instance_.DefaultConstruct();
  _GetPivotsRequest_default_instance_.get_mutable()->context_ = const_cast< ::contextual_suggestions::SearchApiRequestContext*>(
      ::contextual_suggestions::SearchApiRequestContext::internal_default_instance());
  _GetPivotsRequest_default_instance_.get_mutable()->query_ = const_cast< ::contextual_suggestions::GetPivotsQuery*>(
      ::contextual_suggestions::GetPivotsQuery::internal_default_instance());
  _GetPivotsQuery_default_instance_.get_mutable()->document_params_ = const_cast< ::contextual_suggestions::PivotDocumentParams*>(
      ::contextual_suggestions::PivotDocumentParams::internal_default_instance());
  _GetPivotsQuery_default_instance_.get_mutable()->clustering_params_ = const_cast< ::contextual_suggestions::PivotClusteringParams*>(
      ::contextual_suggestions::PivotClusteringParams::internal_default_instance());
  _GetPivotsQuery_default_instance_.get_mutable()->peek_text_params_ = const_cast< ::contextual_suggestions::PivotPeekTextParams*>(
      ::contextual_suggestions::PivotPeekTextParams::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::contextual_suggestions::protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_get_5fpivots_5frequest_2eproto

bool PivotDocumentParams_ImageAspectRatio_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PivotDocumentParams_ImageAspectRatio PivotDocumentParams::ASPECT_RATIO_UNSPECIFIED;
const PivotDocumentParams_ImageAspectRatio PivotDocumentParams::SQUARE;
const PivotDocumentParams_ImageAspectRatio PivotDocumentParams::ImageAspectRatio_MIN;
const PivotDocumentParams_ImageAspectRatio PivotDocumentParams::ImageAspectRatio_MAX;
const int PivotDocumentParams::ImageAspectRatio_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPivotsRequest::kContextFieldNumber;
const int GetPivotsRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPivotsRequest::GetPivotsRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.GetPivotsRequest)
}
GetPivotsRequest::GetPivotsRequest(const GetPivotsRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_context()) {
    context_ = new ::contextual_suggestions::SearchApiRequestContext(*from.context_);
  } else {
    context_ = NULL;
  }
  if (from.has_query()) {
    query_ = new ::contextual_suggestions::GetPivotsQuery(*from.query_);
  } else {
    query_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.GetPivotsRequest)
}

void GetPivotsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_) -
      reinterpret_cast<char*>(&context_)) + sizeof(query_));
}

GetPivotsRequest::~GetPivotsRequest() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.GetPivotsRequest)
  SharedDtor();
}

void GetPivotsRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete context_;
  }
  if (this != internal_default_instance()) {
    delete query_;
  }
}

void GetPivotsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPivotsRequest& GetPivotsRequest::default_instance() {
  protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPivotsRequest* GetPivotsRequest::New(::google::protobuf::Arena* arena) const {
  GetPivotsRequest* n = new GetPivotsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPivotsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.GetPivotsRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_context()) {
      GOOGLE_DCHECK(context_ != NULL);
      context_->::contextual_suggestions::SearchApiRequestContext::Clear();
    }
    if (has_query()) {
      GOOGLE_DCHECK(query_ != NULL);
      query_->::contextual_suggestions::GetPivotsQuery::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPivotsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.GetPivotsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.SearchApiRequestContext context = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.GetPivotsQuery query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.GetPivotsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.GetPivotsRequest)
  return false;
#undef DO_
}

void GetPivotsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.GetPivotsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.SearchApiRequestContext context = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->context_, output);
  }

  // optional .contextual_suggestions.GetPivotsQuery query = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->query_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.GetPivotsRequest)
}

size_t GetPivotsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.GetPivotsRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .contextual_suggestions.SearchApiRequestContext context = 1;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->context_);
    }

    // optional .contextual_suggestions.GetPivotsQuery query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPivotsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPivotsRequest*>(&from));
}

void GetPivotsRequest::MergeFrom(const GetPivotsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.GetPivotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_context()->::contextual_suggestions::SearchApiRequestContext::MergeFrom(from.context());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_query()->::contextual_suggestions::GetPivotsQuery::MergeFrom(from.query());
    }
  }
}

void GetPivotsRequest::CopyFrom(const GetPivotsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.GetPivotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPivotsRequest::IsInitialized() const {
  return true;
}

void GetPivotsRequest::Swap(GetPivotsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPivotsRequest::InternalSwap(GetPivotsRequest* other) {
  std::swap(context_, other->context_);
  std::swap(query_, other->query_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetPivotsRequest::GetTypeName() const {
  return "contextual_suggestions.GetPivotsRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPivotsRequest

// optional .contextual_suggestions.SearchApiRequestContext context = 1;
bool GetPivotsRequest::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetPivotsRequest::set_has_context() {
  _has_bits_[0] |= 0x00000001u;
}
void GetPivotsRequest::clear_has_context() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetPivotsRequest::clear_context() {
  if (context_ != NULL) context_->::contextual_suggestions::SearchApiRequestContext::Clear();
  clear_has_context();
}
const ::contextual_suggestions::SearchApiRequestContext& GetPivotsRequest::context() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsRequest.context)
  return context_ != NULL ? *context_
                         : *::contextual_suggestions::SearchApiRequestContext::internal_default_instance();
}
::contextual_suggestions::SearchApiRequestContext* GetPivotsRequest::mutable_context() {
  set_has_context();
  if (context_ == NULL) {
    context_ = new ::contextual_suggestions::SearchApiRequestContext;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsRequest.context)
  return context_;
}
::contextual_suggestions::SearchApiRequestContext* GetPivotsRequest::release_context() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsRequest.context)
  clear_has_context();
  ::contextual_suggestions::SearchApiRequestContext* temp = context_;
  context_ = NULL;
  return temp;
}
void GetPivotsRequest::set_allocated_context(::contextual_suggestions::SearchApiRequestContext* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsRequest.context)
}

// optional .contextual_suggestions.GetPivotsQuery query = 2;
bool GetPivotsRequest::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetPivotsRequest::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
void GetPivotsRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetPivotsRequest::clear_query() {
  if (query_ != NULL) query_->::contextual_suggestions::GetPivotsQuery::Clear();
  clear_has_query();
}
const ::contextual_suggestions::GetPivotsQuery& GetPivotsRequest::query() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsRequest.query)
  return query_ != NULL ? *query_
                         : *::contextual_suggestions::GetPivotsQuery::internal_default_instance();
}
::contextual_suggestions::GetPivotsQuery* GetPivotsRequest::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::contextual_suggestions::GetPivotsQuery;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsRequest.query)
  return query_;
}
::contextual_suggestions::GetPivotsQuery* GetPivotsRequest::release_query() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsRequest.query)
  clear_has_query();
  ::contextual_suggestions::GetPivotsQuery* temp = query_;
  query_ = NULL;
  return temp;
}
void GetPivotsRequest::set_allocated_query(::contextual_suggestions::GetPivotsQuery* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPivotsQuery::kContextFieldNumber;
const int GetPivotsQuery::kDocumentParamsFieldNumber;
const int GetPivotsQuery::kClusteringParamsFieldNumber;
const int GetPivotsQuery::kPeekTextParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPivotsQuery::GetPivotsQuery()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.GetPivotsQuery)
}
GetPivotsQuery::GetPivotsQuery(const GetPivotsQuery& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      context_(from.context_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_document_params()) {
    document_params_ = new ::contextual_suggestions::PivotDocumentParams(*from.document_params_);
  } else {
    document_params_ = NULL;
  }
  if (from.has_clustering_params()) {
    clustering_params_ = new ::contextual_suggestions::PivotClusteringParams(*from.clustering_params_);
  } else {
    clustering_params_ = NULL;
  }
  if (from.has_peek_text_params()) {
    peek_text_params_ = new ::contextual_suggestions::PivotPeekTextParams(*from.peek_text_params_);
  } else {
    peek_text_params_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.GetPivotsQuery)
}

void GetPivotsQuery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&document_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peek_text_params_) -
      reinterpret_cast<char*>(&document_params_)) + sizeof(peek_text_params_));
}

GetPivotsQuery::~GetPivotsQuery() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.GetPivotsQuery)
  SharedDtor();
}

void GetPivotsQuery::SharedDtor() {
  if (this != internal_default_instance()) {
    delete document_params_;
  }
  if (this != internal_default_instance()) {
    delete clustering_params_;
  }
  if (this != internal_default_instance()) {
    delete peek_text_params_;
  }
}

void GetPivotsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPivotsQuery& GetPivotsQuery::default_instance() {
  protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPivotsQuery* GetPivotsQuery::New(::google::protobuf::Arena* arena) const {
  GetPivotsQuery* n = new GetPivotsQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPivotsQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.GetPivotsQuery)
  context_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_document_params()) {
      GOOGLE_DCHECK(document_params_ != NULL);
      document_params_->::contextual_suggestions::PivotDocumentParams::Clear();
    }
    if (has_clustering_params()) {
      GOOGLE_DCHECK(clustering_params_ != NULL);
      clustering_params_->::contextual_suggestions::PivotClusteringParams::Clear();
    }
    if (has_peek_text_params()) {
      GOOGLE_DCHECK(peek_text_params_ != NULL);
      peek_text_params_->::contextual_suggestions::PivotPeekTextParams::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPivotsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.GetPivotsQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .contextual_suggestions.ExploreContext context = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.PivotDocumentParams document_params = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.PivotClusteringParams clustering_params = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clustering_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.PivotPeekTextParams peek_text_params = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peek_text_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.GetPivotsQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.GetPivotsQuery)
  return false;
#undef DO_
}

void GetPivotsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.GetPivotsQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .contextual_suggestions.ExploreContext context = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->context_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->context(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.PivotDocumentParams document_params = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->document_params_, output);
  }

  // optional .contextual_suggestions.PivotClusteringParams clustering_params = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->clustering_params_, output);
  }

  // optional .contextual_suggestions.PivotPeekTextParams peek_text_params = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->peek_text_params_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.GetPivotsQuery)
}

size_t GetPivotsQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.GetPivotsQuery)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .contextual_suggestions.ExploreContext context = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->context_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->context(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .contextual_suggestions.PivotDocumentParams document_params = 2;
    if (has_document_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_params_);
    }

    // optional .contextual_suggestions.PivotClusteringParams clustering_params = 6;
    if (has_clustering_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clustering_params_);
    }

    // optional .contextual_suggestions.PivotPeekTextParams peek_text_params = 7;
    if (has_peek_text_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->peek_text_params_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPivotsQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPivotsQuery*>(&from));
}

void GetPivotsQuery::MergeFrom(const GetPivotsQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.GetPivotsQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  context_.MergeFrom(from.context_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_document_params()->::contextual_suggestions::PivotDocumentParams::MergeFrom(from.document_params());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_clustering_params()->::contextual_suggestions::PivotClusteringParams::MergeFrom(from.clustering_params());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_peek_text_params()->::contextual_suggestions::PivotPeekTextParams::MergeFrom(from.peek_text_params());
    }
  }
}

void GetPivotsQuery::CopyFrom(const GetPivotsQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.GetPivotsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPivotsQuery::IsInitialized() const {
  return true;
}

void GetPivotsQuery::Swap(GetPivotsQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPivotsQuery::InternalSwap(GetPivotsQuery* other) {
  context_.InternalSwap(&other->context_);
  std::swap(document_params_, other->document_params_);
  std::swap(clustering_params_, other->clustering_params_);
  std::swap(peek_text_params_, other->peek_text_params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetPivotsQuery::GetTypeName() const {
  return "contextual_suggestions.GetPivotsQuery";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPivotsQuery

// repeated .contextual_suggestions.ExploreContext context = 1;
int GetPivotsQuery::context_size() const {
  return context_.size();
}
void GetPivotsQuery::clear_context() {
  context_.Clear();
}
const ::contextual_suggestions::ExploreContext& GetPivotsQuery::context(int index) const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsQuery.context)
  return context_.Get(index);
}
::contextual_suggestions::ExploreContext* GetPivotsQuery::mutable_context(int index) {
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsQuery.context)
  return context_.Mutable(index);
}
::contextual_suggestions::ExploreContext* GetPivotsQuery::add_context() {
  // @@protoc_insertion_point(field_add:contextual_suggestions.GetPivotsQuery.context)
  return context_.Add();
}
::google::protobuf::RepeatedPtrField< ::contextual_suggestions::ExploreContext >*
GetPivotsQuery::mutable_context() {
  // @@protoc_insertion_point(field_mutable_list:contextual_suggestions.GetPivotsQuery.context)
  return &context_;
}
const ::google::protobuf::RepeatedPtrField< ::contextual_suggestions::ExploreContext >&
GetPivotsQuery::context() const {
  // @@protoc_insertion_point(field_list:contextual_suggestions.GetPivotsQuery.context)
  return context_;
}

// optional .contextual_suggestions.PivotDocumentParams document_params = 2;
bool GetPivotsQuery::has_document_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetPivotsQuery::set_has_document_params() {
  _has_bits_[0] |= 0x00000001u;
}
void GetPivotsQuery::clear_has_document_params() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetPivotsQuery::clear_document_params() {
  if (document_params_ != NULL) document_params_->::contextual_suggestions::PivotDocumentParams::Clear();
  clear_has_document_params();
}
const ::contextual_suggestions::PivotDocumentParams& GetPivotsQuery::document_params() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsQuery.document_params)
  return document_params_ != NULL ? *document_params_
                         : *::contextual_suggestions::PivotDocumentParams::internal_default_instance();
}
::contextual_suggestions::PivotDocumentParams* GetPivotsQuery::mutable_document_params() {
  set_has_document_params();
  if (document_params_ == NULL) {
    document_params_ = new ::contextual_suggestions::PivotDocumentParams;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsQuery.document_params)
  return document_params_;
}
::contextual_suggestions::PivotDocumentParams* GetPivotsQuery::release_document_params() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsQuery.document_params)
  clear_has_document_params();
  ::contextual_suggestions::PivotDocumentParams* temp = document_params_;
  document_params_ = NULL;
  return temp;
}
void GetPivotsQuery::set_allocated_document_params(::contextual_suggestions::PivotDocumentParams* document_params) {
  delete document_params_;
  document_params_ = document_params;
  if (document_params) {
    set_has_document_params();
  } else {
    clear_has_document_params();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsQuery.document_params)
}

// optional .contextual_suggestions.PivotClusteringParams clustering_params = 6;
bool GetPivotsQuery::has_clustering_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetPivotsQuery::set_has_clustering_params() {
  _has_bits_[0] |= 0x00000002u;
}
void GetPivotsQuery::clear_has_clustering_params() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetPivotsQuery::clear_clustering_params() {
  if (clustering_params_ != NULL) clustering_params_->::contextual_suggestions::PivotClusteringParams::Clear();
  clear_has_clustering_params();
}
const ::contextual_suggestions::PivotClusteringParams& GetPivotsQuery::clustering_params() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsQuery.clustering_params)
  return clustering_params_ != NULL ? *clustering_params_
                         : *::contextual_suggestions::PivotClusteringParams::internal_default_instance();
}
::contextual_suggestions::PivotClusteringParams* GetPivotsQuery::mutable_clustering_params() {
  set_has_clustering_params();
  if (clustering_params_ == NULL) {
    clustering_params_ = new ::contextual_suggestions::PivotClusteringParams;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsQuery.clustering_params)
  return clustering_params_;
}
::contextual_suggestions::PivotClusteringParams* GetPivotsQuery::release_clustering_params() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsQuery.clustering_params)
  clear_has_clustering_params();
  ::contextual_suggestions::PivotClusteringParams* temp = clustering_params_;
  clustering_params_ = NULL;
  return temp;
}
void GetPivotsQuery::set_allocated_clustering_params(::contextual_suggestions::PivotClusteringParams* clustering_params) {
  delete clustering_params_;
  clustering_params_ = clustering_params;
  if (clustering_params) {
    set_has_clustering_params();
  } else {
    clear_has_clustering_params();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsQuery.clustering_params)
}

// optional .contextual_suggestions.PivotPeekTextParams peek_text_params = 7;
bool GetPivotsQuery::has_peek_text_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetPivotsQuery::set_has_peek_text_params() {
  _has_bits_[0] |= 0x00000004u;
}
void GetPivotsQuery::clear_has_peek_text_params() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetPivotsQuery::clear_peek_text_params() {
  if (peek_text_params_ != NULL) peek_text_params_->::contextual_suggestions::PivotPeekTextParams::Clear();
  clear_has_peek_text_params();
}
const ::contextual_suggestions::PivotPeekTextParams& GetPivotsQuery::peek_text_params() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.GetPivotsQuery.peek_text_params)
  return peek_text_params_ != NULL ? *peek_text_params_
                         : *::contextual_suggestions::PivotPeekTextParams::internal_default_instance();
}
::contextual_suggestions::PivotPeekTextParams* GetPivotsQuery::mutable_peek_text_params() {
  set_has_peek_text_params();
  if (peek_text_params_ == NULL) {
    peek_text_params_ = new ::contextual_suggestions::PivotPeekTextParams;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.GetPivotsQuery.peek_text_params)
  return peek_text_params_;
}
::contextual_suggestions::PivotPeekTextParams* GetPivotsQuery::release_peek_text_params() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.GetPivotsQuery.peek_text_params)
  clear_has_peek_text_params();
  ::contextual_suggestions::PivotPeekTextParams* temp = peek_text_params_;
  peek_text_params_ = NULL;
  return temp;
}
void GetPivotsQuery::set_allocated_peek_text_params(::contextual_suggestions::PivotPeekTextParams* peek_text_params) {
  delete peek_text_params_;
  peek_text_params_ = peek_text_params;
  if (peek_text_params) {
    set_has_peek_text_params();
  } else {
    clear_has_peek_text_params();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.GetPivotsQuery.peek_text_params)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExploreContext::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExploreContext::ExploreContext()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.ExploreContext)
}
ExploreContext::ExploreContext(const ExploreContext& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.ExploreContext)
}

void ExploreContext::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExploreContext::~ExploreContext() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.ExploreContext)
  SharedDtor();
}

void ExploreContext::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExploreContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExploreContext& ExploreContext::default_instance() {
  protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExploreContext* ExploreContext::New(::google::protobuf::Arena* arena) const {
  ExploreContext* n = new ExploreContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExploreContext::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.ExploreContext)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExploreContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.ExploreContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.ExploreContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.ExploreContext)
  return false;
#undef DO_
}

void ExploreContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.ExploreContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.ExploreContext)
}

size_t ExploreContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.ExploreContext)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploreContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExploreContext*>(&from));
}

void ExploreContext::MergeFrom(const ExploreContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.ExploreContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void ExploreContext::CopyFrom(const ExploreContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.ExploreContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploreContext::IsInitialized() const {
  return true;
}

void ExploreContext::Swap(ExploreContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExploreContext::InternalSwap(ExploreContext* other) {
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ExploreContext::GetTypeName() const {
  return "contextual_suggestions.ExploreContext";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExploreContext

// optional string url = 1;
bool ExploreContext::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExploreContext::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ExploreContext::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExploreContext::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ExploreContext::url() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.ExploreContext.url)
  return url_.GetNoArena();
}
void ExploreContext::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.ExploreContext.url)
}
#if LANG_CXX11
void ExploreContext::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.ExploreContext.url)
}
#endif
void ExploreContext::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.ExploreContext.url)
}
void ExploreContext::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.ExploreContext.url)
}
::std::string* ExploreContext::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.ExploreContext.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExploreContext::release_url() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.ExploreContext.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExploreContext::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.ExploreContext.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PivotDocumentParams::kEnabledFieldNumber;
const int PivotDocumentParams::kNumFieldNumber;
const int PivotDocumentParams::kMinDocumentsFieldNumber;
const int PivotDocumentParams::kEnableImagesFieldNumber;
const int PivotDocumentParams::kImageAspectRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PivotDocumentParams::PivotDocumentParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.PivotDocumentParams)
}
PivotDocumentParams::PivotDocumentParams(const PivotDocumentParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_documents_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(min_documents_));
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.PivotDocumentParams)
}

void PivotDocumentParams::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_aspect_ratio_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(image_aspect_ratio_));
  num_ = 5;
  min_documents_ = 3;
}

PivotDocumentParams::~PivotDocumentParams() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.PivotDocumentParams)
  SharedDtor();
}

void PivotDocumentParams::SharedDtor() {
}

void PivotDocumentParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PivotDocumentParams& PivotDocumentParams::default_instance() {
  protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

PivotDocumentParams* PivotDocumentParams::New(::google::protobuf::Arena* arena) const {
  PivotDocumentParams* n = new PivotDocumentParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PivotDocumentParams::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.PivotDocumentParams)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&image_aspect_ratio_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(image_aspect_ratio_));
    num_ = 5;
    min_documents_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PivotDocumentParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.PivotDocumentParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 2 [default = 5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_images = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_enable_images();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.PivotDocumentParams.ImageAspectRatio image_aspect_ratio = 4 [default = ASPECT_RATIO_UNSPECIFIED];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::contextual_suggestions::PivotDocumentParams_ImageAspectRatio_IsValid(value)) {
            set_image_aspect_ratio(static_cast< ::contextual_suggestions::PivotDocumentParams_ImageAspectRatio >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_documents = 6 [default = 3];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_min_documents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_documents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.PivotDocumentParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.PivotDocumentParams)
  return false;
#undef DO_
}

void PivotDocumentParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.PivotDocumentParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional int32 num = 2 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional bool enable_images = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_images(), output);
  }

  // optional .contextual_suggestions.PivotDocumentParams.ImageAspectRatio image_aspect_ratio = 4 [default = ASPECT_RATIO_UNSPECIFIED];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->image_aspect_ratio(), output);
  }

  // optional int32 min_documents = 6 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->min_documents(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.PivotDocumentParams)
}

size_t PivotDocumentParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.PivotDocumentParams)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional bool enabled = 1 [default = false];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool enable_images = 3 [default = false];
    if (has_enable_images()) {
      total_size += 1 + 1;
    }

    // optional .contextual_suggestions.PivotDocumentParams.ImageAspectRatio image_aspect_ratio = 4 [default = ASPECT_RATIO_UNSPECIFIED];
    if (has_image_aspect_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->image_aspect_ratio());
    }

    // optional int32 num = 2 [default = 5];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 min_documents = 6 [default = 3];
    if (has_min_documents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_documents());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PivotDocumentParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PivotDocumentParams*>(&from));
}

void PivotDocumentParams::MergeFrom(const PivotDocumentParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.PivotDocumentParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_images_ = from.enable_images_;
    }
    if (cached_has_bits & 0x00000004u) {
      image_aspect_ratio_ = from.image_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_documents_ = from.min_documents_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PivotDocumentParams::CopyFrom(const PivotDocumentParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.PivotDocumentParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotDocumentParams::IsInitialized() const {
  return true;
}

void PivotDocumentParams::Swap(PivotDocumentParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PivotDocumentParams::InternalSwap(PivotDocumentParams* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(enable_images_, other->enable_images_);
  std::swap(image_aspect_ratio_, other->image_aspect_ratio_);
  std::swap(num_, other->num_);
  std::swap(min_documents_, other->min_documents_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PivotDocumentParams::GetTypeName() const {
  return "contextual_suggestions.PivotDocumentParams";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PivotDocumentParams

// optional bool enabled = 1 [default = false];
bool PivotDocumentParams::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PivotDocumentParams::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void PivotDocumentParams::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void PivotDocumentParams::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool PivotDocumentParams::enabled() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocumentParams.enabled)
  return enabled_;
}
void PivotDocumentParams::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocumentParams.enabled)
}

// optional int32 num = 2 [default = 5];
bool PivotDocumentParams::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PivotDocumentParams::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
void PivotDocumentParams::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void PivotDocumentParams::clear_num() {
  num_ = 5;
  clear_has_num();
}
::google::protobuf::int32 PivotDocumentParams::num() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocumentParams.num)
  return num_;
}
void PivotDocumentParams::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocumentParams.num)
}

// optional int32 min_documents = 6 [default = 3];
bool PivotDocumentParams::has_min_documents() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PivotDocumentParams::set_has_min_documents() {
  _has_bits_[0] |= 0x00000010u;
}
void PivotDocumentParams::clear_has_min_documents() {
  _has_bits_[0] &= ~0x00000010u;
}
void PivotDocumentParams::clear_min_documents() {
  min_documents_ = 3;
  clear_has_min_documents();
}
::google::protobuf::int32 PivotDocumentParams::min_documents() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocumentParams.min_documents)
  return min_documents_;
}
void PivotDocumentParams::set_min_documents(::google::protobuf::int32 value) {
  set_has_min_documents();
  min_documents_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocumentParams.min_documents)
}

// optional bool enable_images = 3 [default = false];
bool PivotDocumentParams::has_enable_images() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PivotDocumentParams::set_has_enable_images() {
  _has_bits_[0] |= 0x00000002u;
}
void PivotDocumentParams::clear_has_enable_images() {
  _has_bits_[0] &= ~0x00000002u;
}
void PivotDocumentParams::clear_enable_images() {
  enable_images_ = false;
  clear_has_enable_images();
}
bool PivotDocumentParams::enable_images() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocumentParams.enable_images)
  return enable_images_;
}
void PivotDocumentParams::set_enable_images(bool value) {
  set_has_enable_images();
  enable_images_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocumentParams.enable_images)
}

// optional .contextual_suggestions.PivotDocumentParams.ImageAspectRatio image_aspect_ratio = 4 [default = ASPECT_RATIO_UNSPECIFIED];
bool PivotDocumentParams::has_image_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PivotDocumentParams::set_has_image_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void PivotDocumentParams::clear_has_image_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void PivotDocumentParams::clear_image_aspect_ratio() {
  image_aspect_ratio_ = 0;
  clear_has_image_aspect_ratio();
}
::contextual_suggestions::PivotDocumentParams_ImageAspectRatio PivotDocumentParams::image_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotDocumentParams.image_aspect_ratio)
  return static_cast< ::contextual_suggestions::PivotDocumentParams_ImageAspectRatio >(image_aspect_ratio_);
}
void PivotDocumentParams::set_image_aspect_ratio(::contextual_suggestions::PivotDocumentParams_ImageAspectRatio value) {
  assert(::contextual_suggestions::PivotDocumentParams_ImageAspectRatio_IsValid(value));
  set_has_image_aspect_ratio();
  image_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotDocumentParams.image_aspect_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PivotClusteringParams::kEnabledFieldNumber;
const int PivotClusteringParams::kMinFieldNumber;
const int PivotClusteringParams::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PivotClusteringParams::PivotClusteringParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.PivotClusteringParams)
}
PivotClusteringParams::PivotClusteringParams(const PivotClusteringParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.PivotClusteringParams)
}

void PivotClusteringParams::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(max_));
}

PivotClusteringParams::~PivotClusteringParams() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.PivotClusteringParams)
  SharedDtor();
}

void PivotClusteringParams::SharedDtor() {
}

void PivotClusteringParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PivotClusteringParams& PivotClusteringParams::default_instance() {
  protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

PivotClusteringParams* PivotClusteringParams::New(::google::protobuf::Arena* arena) const {
  PivotClusteringParams* n = new PivotClusteringParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PivotClusteringParams::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.PivotClusteringParams)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PivotClusteringParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.PivotClusteringParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.PivotClusteringParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.PivotClusteringParams)
  return false;
#undef DO_
}

void PivotClusteringParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.PivotClusteringParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional int32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min(), output);
  }

  // optional int32 max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.PivotClusteringParams)
}

size_t PivotClusteringParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.PivotClusteringParams)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }

    // optional int32 max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PivotClusteringParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PivotClusteringParams*>(&from));
}

void PivotClusteringParams::MergeFrom(const PivotClusteringParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.PivotClusteringParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PivotClusteringParams::CopyFrom(const PivotClusteringParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.PivotClusteringParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotClusteringParams::IsInitialized() const {
  return true;
}

void PivotClusteringParams::Swap(PivotClusteringParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PivotClusteringParams::InternalSwap(PivotClusteringParams* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PivotClusteringParams::GetTypeName() const {
  return "contextual_suggestions.PivotClusteringParams";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PivotClusteringParams

// optional bool enabled = 1;
bool PivotClusteringParams::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PivotClusteringParams::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void PivotClusteringParams::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void PivotClusteringParams::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool PivotClusteringParams::enabled() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotClusteringParams.enabled)
  return enabled_;
}
void PivotClusteringParams::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotClusteringParams.enabled)
}

// optional int32 min = 2;
bool PivotClusteringParams::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PivotClusteringParams::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
void PivotClusteringParams::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void PivotClusteringParams::clear_min() {
  min_ = 0;
  clear_has_min();
}
::google::protobuf::int32 PivotClusteringParams::min() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotClusteringParams.min)
  return min_;
}
void PivotClusteringParams::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotClusteringParams.min)
}

// optional int32 max = 3;
bool PivotClusteringParams::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PivotClusteringParams::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
void PivotClusteringParams::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void PivotClusteringParams::clear_max() {
  max_ = 0;
  clear_has_max();
}
::google::protobuf::int32 PivotClusteringParams::max() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotClusteringParams.max)
  return max_;
}
void PivotClusteringParams::set_max(::google::protobuf::int32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotClusteringParams.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PivotPeekTextParams::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PivotPeekTextParams::PivotPeekTextParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.PivotPeekTextParams)
}
PivotPeekTextParams::PivotPeekTextParams(const PivotPeekTextParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.PivotPeekTextParams)
}

void PivotPeekTextParams::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
}

PivotPeekTextParams::~PivotPeekTextParams() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.PivotPeekTextParams)
  SharedDtor();
}

void PivotPeekTextParams::SharedDtor() {
}

void PivotPeekTextParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PivotPeekTextParams& PivotPeekTextParams::default_instance() {
  protobuf_get_5fpivots_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

PivotPeekTextParams* PivotPeekTextParams::New(::google::protobuf::Arena* arena) const {
  PivotPeekTextParams* n = new PivotPeekTextParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PivotPeekTextParams::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.PivotPeekTextParams)
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PivotPeekTextParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.PivotPeekTextParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.PivotPeekTextParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.PivotPeekTextParams)
  return false;
#undef DO_
}

void PivotPeekTextParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.PivotPeekTextParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.PivotPeekTextParams)
}

size_t PivotPeekTextParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.PivotPeekTextParams)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional bool enabled = 1 [default = false];
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PivotPeekTextParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PivotPeekTextParams*>(&from));
}

void PivotPeekTextParams::MergeFrom(const PivotPeekTextParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.PivotPeekTextParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void PivotPeekTextParams::CopyFrom(const PivotPeekTextParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.PivotPeekTextParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotPeekTextParams::IsInitialized() const {
  return true;
}

void PivotPeekTextParams::Swap(PivotPeekTextParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PivotPeekTextParams::InternalSwap(PivotPeekTextParams* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PivotPeekTextParams::GetTypeName() const {
  return "contextual_suggestions.PivotPeekTextParams";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PivotPeekTextParams

// optional bool enabled = 1 [default = false];
bool PivotPeekTextParams::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PivotPeekTextParams::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void PivotPeekTextParams::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void PivotPeekTextParams::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool PivotPeekTextParams::enabled() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.PivotPeekTextParams.enabled)
  return enabled_;
}
void PivotPeekTextParams::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.PivotPeekTextParams.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace contextual_suggestions

// @@protoc_insertion_point(global_scope)
