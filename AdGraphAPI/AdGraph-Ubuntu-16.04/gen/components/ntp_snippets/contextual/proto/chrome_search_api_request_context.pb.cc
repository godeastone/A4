// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_search_api_request_context.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chrome_search_api_request_context.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace contextual_suggestions {
class SearchApiRequestContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchApiRequestContext> {
} _SearchApiRequestContext_default_instance_;
class SearchApiClientContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchApiClientContext> {
} _SearchApiClientContext_default_instance_;
class ClientIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientId> {
} _ClientId_default_instance_;
class LocalizationContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocalizationContext> {
} _LocalizationContext_default_instance_;
class CookieRequestContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CookieRequestContext> {
} _CookieRequestContext_default_instance_;

namespace protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SearchApiRequestContext_default_instance_.Shutdown();
  _SearchApiClientContext_default_instance_.Shutdown();
  _ClientId_default_instance_.Shutdown();
  _LocalizationContext_default_instance_.Shutdown();
  _CookieRequestContext_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SearchApiRequestContext_default_instance_.DefaultConstruct();
  _SearchApiClientContext_default_instance_.DefaultConstruct();
  _ClientId_default_instance_.DefaultConstruct();
  _LocalizationContext_default_instance_.DefaultConstruct();
  _CookieRequestContext_default_instance_.DefaultConstruct();
  _SearchApiRequestContext_default_instance_.get_mutable()->client_context_ = const_cast< ::contextual_suggestions::SearchApiClientContext*>(
      ::contextual_suggestions::SearchApiClientContext::internal_default_instance());
  _SearchApiRequestContext_default_instance_.get_mutable()->localization_context_ = const_cast< ::contextual_suggestions::LocalizationContext*>(
      ::contextual_suggestions::LocalizationContext::internal_default_instance());
  _SearchApiRequestContext_default_instance_.get_mutable()->cookie_context_ = const_cast< ::contextual_suggestions::CookieRequestContext*>(
      ::contextual_suggestions::CookieRequestContext::internal_default_instance());
  _SearchApiClientContext_default_instance_.get_mutable()->client_id_ = const_cast< ::contextual_suggestions::ClientId*>(
      ::contextual_suggestions::ClientId::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto

bool ClientId_ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 79:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClientId_ClientType ClientId::UNKNOWN_CLIENT_TYPE;
const ClientId_ClientType ClientId::ANDROID_CHROME;
const ClientId_ClientType ClientId::ClientType_MIN;
const ClientId_ClientType ClientId::ClientType_MAX;
const int ClientId::ClientType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchApiRequestContext::kClientContextFieldNumber;
const int SearchApiRequestContext::kLocalizationContextFieldNumber;
const int SearchApiRequestContext::kCookieContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchApiRequestContext::SearchApiRequestContext()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.SearchApiRequestContext)
}
SearchApiRequestContext::SearchApiRequestContext(const SearchApiRequestContext& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_client_context()) {
    client_context_ = new ::contextual_suggestions::SearchApiClientContext(*from.client_context_);
  } else {
    client_context_ = NULL;
  }
  if (from.has_cookie_context()) {
    cookie_context_ = new ::contextual_suggestions::CookieRequestContext(*from.cookie_context_);
  } else {
    cookie_context_ = NULL;
  }
  if (from.has_localization_context()) {
    localization_context_ = new ::contextual_suggestions::LocalizationContext(*from.localization_context_);
  } else {
    localization_context_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.SearchApiRequestContext)
}

void SearchApiRequestContext::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&client_context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localization_context_) -
      reinterpret_cast<char*>(&client_context_)) + sizeof(localization_context_));
}

SearchApiRequestContext::~SearchApiRequestContext() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.SearchApiRequestContext)
  SharedDtor();
}

void SearchApiRequestContext::SharedDtor() {
  if (this != internal_default_instance()) {
    delete client_context_;
  }
  if (this != internal_default_instance()) {
    delete cookie_context_;
  }
  if (this != internal_default_instance()) {
    delete localization_context_;
  }
}

void SearchApiRequestContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchApiRequestContext& SearchApiRequestContext::default_instance() {
  protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchApiRequestContext* SearchApiRequestContext::New(::google::protobuf::Arena* arena) const {
  SearchApiRequestContext* n = new SearchApiRequestContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchApiRequestContext::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.SearchApiRequestContext)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_client_context()) {
      GOOGLE_DCHECK(client_context_ != NULL);
      client_context_->::contextual_suggestions::SearchApiClientContext::Clear();
    }
    if (has_cookie_context()) {
      GOOGLE_DCHECK(cookie_context_ != NULL);
      cookie_context_->::contextual_suggestions::CookieRequestContext::Clear();
    }
    if (has_localization_context()) {
      GOOGLE_DCHECK(localization_context_ != NULL);
      localization_context_->::contextual_suggestions::LocalizationContext::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchApiRequestContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.SearchApiRequestContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.SearchApiClientContext client_context = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.CookieRequestContext cookie_context = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cookie_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contextual_suggestions.LocalizationContext localization_context = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localization_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.SearchApiRequestContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.SearchApiRequestContext)
  return false;
#undef DO_
}

void SearchApiRequestContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.SearchApiRequestContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.SearchApiClientContext client_context = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->client_context_, output);
  }

  // optional .contextual_suggestions.CookieRequestContext cookie_context = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->cookie_context_, output);
  }

  // optional .contextual_suggestions.LocalizationContext localization_context = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->localization_context_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.SearchApiRequestContext)
}

size_t SearchApiRequestContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.SearchApiRequestContext)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .contextual_suggestions.SearchApiClientContext client_context = 2;
    if (has_client_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->client_context_);
    }

    // optional .contextual_suggestions.CookieRequestContext cookie_context = 3;
    if (has_cookie_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cookie_context_);
    }

    // optional .contextual_suggestions.LocalizationContext localization_context = 4;
    if (has_localization_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->localization_context_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchApiRequestContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchApiRequestContext*>(&from));
}

void SearchApiRequestContext::MergeFrom(const SearchApiRequestContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.SearchApiRequestContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_client_context()->::contextual_suggestions::SearchApiClientContext::MergeFrom(from.client_context());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cookie_context()->::contextual_suggestions::CookieRequestContext::MergeFrom(from.cookie_context());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_localization_context()->::contextual_suggestions::LocalizationContext::MergeFrom(from.localization_context());
    }
  }
}

void SearchApiRequestContext::CopyFrom(const SearchApiRequestContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.SearchApiRequestContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchApiRequestContext::IsInitialized() const {
  return true;
}

void SearchApiRequestContext::Swap(SearchApiRequestContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchApiRequestContext::InternalSwap(SearchApiRequestContext* other) {
  std::swap(client_context_, other->client_context_);
  std::swap(cookie_context_, other->cookie_context_);
  std::swap(localization_context_, other->localization_context_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SearchApiRequestContext::GetTypeName() const {
  return "contextual_suggestions.SearchApiRequestContext";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchApiRequestContext

// optional .contextual_suggestions.SearchApiClientContext client_context = 2;
bool SearchApiRequestContext::has_client_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchApiRequestContext::set_has_client_context() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchApiRequestContext::clear_has_client_context() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchApiRequestContext::clear_client_context() {
  if (client_context_ != NULL) client_context_->::contextual_suggestions::SearchApiClientContext::Clear();
  clear_has_client_context();
}
const ::contextual_suggestions::SearchApiClientContext& SearchApiRequestContext::client_context() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.SearchApiRequestContext.client_context)
  return client_context_ != NULL ? *client_context_
                         : *::contextual_suggestions::SearchApiClientContext::internal_default_instance();
}
::contextual_suggestions::SearchApiClientContext* SearchApiRequestContext::mutable_client_context() {
  set_has_client_context();
  if (client_context_ == NULL) {
    client_context_ = new ::contextual_suggestions::SearchApiClientContext;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.SearchApiRequestContext.client_context)
  return client_context_;
}
::contextual_suggestions::SearchApiClientContext* SearchApiRequestContext::release_client_context() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.SearchApiRequestContext.client_context)
  clear_has_client_context();
  ::contextual_suggestions::SearchApiClientContext* temp = client_context_;
  client_context_ = NULL;
  return temp;
}
void SearchApiRequestContext::set_allocated_client_context(::contextual_suggestions::SearchApiClientContext* client_context) {
  delete client_context_;
  client_context_ = client_context;
  if (client_context) {
    set_has_client_context();
  } else {
    clear_has_client_context();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.SearchApiRequestContext.client_context)
}

// optional .contextual_suggestions.LocalizationContext localization_context = 4;
bool SearchApiRequestContext::has_localization_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SearchApiRequestContext::set_has_localization_context() {
  _has_bits_[0] |= 0x00000004u;
}
void SearchApiRequestContext::clear_has_localization_context() {
  _has_bits_[0] &= ~0x00000004u;
}
void SearchApiRequestContext::clear_localization_context() {
  if (localization_context_ != NULL) localization_context_->::contextual_suggestions::LocalizationContext::Clear();
  clear_has_localization_context();
}
const ::contextual_suggestions::LocalizationContext& SearchApiRequestContext::localization_context() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.SearchApiRequestContext.localization_context)
  return localization_context_ != NULL ? *localization_context_
                         : *::contextual_suggestions::LocalizationContext::internal_default_instance();
}
::contextual_suggestions::LocalizationContext* SearchApiRequestContext::mutable_localization_context() {
  set_has_localization_context();
  if (localization_context_ == NULL) {
    localization_context_ = new ::contextual_suggestions::LocalizationContext;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.SearchApiRequestContext.localization_context)
  return localization_context_;
}
::contextual_suggestions::LocalizationContext* SearchApiRequestContext::release_localization_context() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.SearchApiRequestContext.localization_context)
  clear_has_localization_context();
  ::contextual_suggestions::LocalizationContext* temp = localization_context_;
  localization_context_ = NULL;
  return temp;
}
void SearchApiRequestContext::set_allocated_localization_context(::contextual_suggestions::LocalizationContext* localization_context) {
  delete localization_context_;
  localization_context_ = localization_context;
  if (localization_context) {
    set_has_localization_context();
  } else {
    clear_has_localization_context();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.SearchApiRequestContext.localization_context)
}

// optional .contextual_suggestions.CookieRequestContext cookie_context = 3;
bool SearchApiRequestContext::has_cookie_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchApiRequestContext::set_has_cookie_context() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchApiRequestContext::clear_has_cookie_context() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchApiRequestContext::clear_cookie_context() {
  if (cookie_context_ != NULL) cookie_context_->::contextual_suggestions::CookieRequestContext::Clear();
  clear_has_cookie_context();
}
const ::contextual_suggestions::CookieRequestContext& SearchApiRequestContext::cookie_context() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.SearchApiRequestContext.cookie_context)
  return cookie_context_ != NULL ? *cookie_context_
                         : *::contextual_suggestions::CookieRequestContext::internal_default_instance();
}
::contextual_suggestions::CookieRequestContext* SearchApiRequestContext::mutable_cookie_context() {
  set_has_cookie_context();
  if (cookie_context_ == NULL) {
    cookie_context_ = new ::contextual_suggestions::CookieRequestContext;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.SearchApiRequestContext.cookie_context)
  return cookie_context_;
}
::contextual_suggestions::CookieRequestContext* SearchApiRequestContext::release_cookie_context() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.SearchApiRequestContext.cookie_context)
  clear_has_cookie_context();
  ::contextual_suggestions::CookieRequestContext* temp = cookie_context_;
  cookie_context_ = NULL;
  return temp;
}
void SearchApiRequestContext::set_allocated_cookie_context(::contextual_suggestions::CookieRequestContext* cookie_context) {
  delete cookie_context_;
  cookie_context_ = cookie_context;
  if (cookie_context) {
    set_has_cookie_context();
  } else {
    clear_has_cookie_context();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.SearchApiRequestContext.cookie_context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchApiClientContext::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchApiClientContext::SearchApiClientContext()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.SearchApiClientContext)
}
SearchApiClientContext::SearchApiClientContext(const SearchApiClientContext& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_client_id()) {
    client_id_ = new ::contextual_suggestions::ClientId(*from.client_id_);
  } else {
    client_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.SearchApiClientContext)
}

void SearchApiClientContext::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = NULL;
}

SearchApiClientContext::~SearchApiClientContext() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.SearchApiClientContext)
  SharedDtor();
}

void SearchApiClientContext::SharedDtor() {
  if (this != internal_default_instance()) {
    delete client_id_;
  }
}

void SearchApiClientContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchApiClientContext& SearchApiClientContext::default_instance() {
  protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchApiClientContext* SearchApiClientContext::New(::google::protobuf::Arena* arena) const {
  SearchApiClientContext* n = new SearchApiClientContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchApiClientContext::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.SearchApiClientContext)
  if (has_client_id()) {
    GOOGLE_DCHECK(client_id_ != NULL);
    client_id_->::contextual_suggestions::ClientId::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchApiClientContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.SearchApiClientContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.ClientId client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.SearchApiClientContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.SearchApiClientContext)
  return false;
#undef DO_
}

void SearchApiClientContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.SearchApiClientContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.ClientId client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->client_id_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.SearchApiClientContext)
}

size_t SearchApiClientContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.SearchApiClientContext)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .contextual_suggestions.ClientId client_id = 1;
  if (has_client_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchApiClientContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchApiClientContext*>(&from));
}

void SearchApiClientContext::MergeFrom(const SearchApiClientContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.SearchApiClientContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_id()) {
    mutable_client_id()->::contextual_suggestions::ClientId::MergeFrom(from.client_id());
  }
}

void SearchApiClientContext::CopyFrom(const SearchApiClientContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.SearchApiClientContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchApiClientContext::IsInitialized() const {
  return true;
}

void SearchApiClientContext::Swap(SearchApiClientContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchApiClientContext::InternalSwap(SearchApiClientContext* other) {
  std::swap(client_id_, other->client_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SearchApiClientContext::GetTypeName() const {
  return "contextual_suggestions.SearchApiClientContext";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchApiClientContext

// optional .contextual_suggestions.ClientId client_id = 1;
bool SearchApiClientContext::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchApiClientContext::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchApiClientContext::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchApiClientContext::clear_client_id() {
  if (client_id_ != NULL) client_id_->::contextual_suggestions::ClientId::Clear();
  clear_has_client_id();
}
const ::contextual_suggestions::ClientId& SearchApiClientContext::client_id() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.SearchApiClientContext.client_id)
  return client_id_ != NULL ? *client_id_
                         : *::contextual_suggestions::ClientId::internal_default_instance();
}
::contextual_suggestions::ClientId* SearchApiClientContext::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == NULL) {
    client_id_ = new ::contextual_suggestions::ClientId;
  }
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.SearchApiClientContext.client_id)
  return client_id_;
}
::contextual_suggestions::ClientId* SearchApiClientContext::release_client_id() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.SearchApiClientContext.client_id)
  clear_has_client_id();
  ::contextual_suggestions::ClientId* temp = client_id_;
  client_id_ = NULL;
  return temp;
}
void SearchApiClientContext::set_allocated_client_id(::contextual_suggestions::ClientId* client_id) {
  delete client_id_;
  client_id_ = client_id;
  if (client_id) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.SearchApiClientContext.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientId::kClientTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientId::ClientId()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.ClientId)
}
ClientId::ClientId(const ClientId& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_type_ = from.client_type_;
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.ClientId)
}

void ClientId::SharedCtor() {
  _cached_size_ = 0;
  client_type_ = 0;
}

ClientId::~ClientId() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.ClientId)
  SharedDtor();
}

void ClientId::SharedDtor() {
}

void ClientId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientId& ClientId::default_instance() {
  protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientId* ClientId::New(::google::protobuf::Arena* arena) const {
  ClientId* n = new ClientId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientId::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.ClientId)
  client_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.ClientId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contextual_suggestions.ClientId.ClientType client_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::contextual_suggestions::ClientId_ClientType_IsValid(value)) {
            set_client_type(static_cast< ::contextual_suggestions::ClientId_ClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.ClientId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.ClientId)
  return false;
#undef DO_
}

void ClientId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.ClientId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contextual_suggestions.ClientId.ClientType client_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->client_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.ClientId)
}

size_t ClientId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.ClientId)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .contextual_suggestions.ClientId.ClientType client_type = 1;
  if (has_client_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientId*>(&from));
}

void ClientId::MergeFrom(const ClientId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.ClientId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_type()) {
    set_client_type(from.client_type());
  }
}

void ClientId::CopyFrom(const ClientId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.ClientId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientId::IsInitialized() const {
  return true;
}

void ClientId::Swap(ClientId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientId::InternalSwap(ClientId* other) {
  std::swap(client_type_, other->client_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientId::GetTypeName() const {
  return "contextual_suggestions.ClientId";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientId

// optional .contextual_suggestions.ClientId.ClientType client_type = 1;
bool ClientId::has_client_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientId::set_has_client_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientId::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientId::clear_client_type() {
  client_type_ = 0;
  clear_has_client_type();
}
::contextual_suggestions::ClientId_ClientType ClientId::client_type() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.ClientId.client_type)
  return static_cast< ::contextual_suggestions::ClientId_ClientType >(client_type_);
}
void ClientId::set_client_type(::contextual_suggestions::ClientId_ClientType value) {
  assert(::contextual_suggestions::ClientId_ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:contextual_suggestions.ClientId.client_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationContext::kLanguageCodeFieldNumber;
const int LocalizationContext::kCountryCodeFieldNumber;
const int LocalizationContext::kSearchDomainFieldNumber;
const int LocalizationContext::kSpokenLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationContext::LocalizationContext()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.LocalizationContext)
}
LocalizationContext::LocalizationContext(const LocalizationContext& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language_code()) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  search_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_domain()) {
    search_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_domain_);
  }
  spoken_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_spoken_language()) {
    spoken_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spoken_language_);
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.LocalizationContext)
}

void LocalizationContext::SharedCtor() {
  _cached_size_ = 0;
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spoken_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LocalizationContext::~LocalizationContext() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.LocalizationContext)
  SharedDtor();
}

void LocalizationContext::SharedDtor() {
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spoken_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LocalizationContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocalizationContext& LocalizationContext::default_instance() {
  protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalizationContext* LocalizationContext::New(::google::protobuf::Arena* arena) const {
  LocalizationContext* n = new LocalizationContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationContext::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.LocalizationContext)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_language_code()) {
      GOOGLE_DCHECK(!language_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_country_code()) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_search_domain()) {
      GOOGLE_DCHECK(!search_domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*search_domain_.UnsafeRawStringPointer())->clear();
    }
    if (has_spoken_language()) {
      GOOGLE_DCHECK(!spoken_language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*spoken_language_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalizationContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.LocalizationContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string search_domain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string spoken_language = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spoken_language()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.LocalizationContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.LocalizationContext)
  return false;
#undef DO_
}

void LocalizationContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.LocalizationContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  // optional string country_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->country_code(), output);
  }

  // optional string search_domain = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->search_domain(), output);
  }

  // optional string spoken_language = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->spoken_language(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.LocalizationContext)
}

size_t LocalizationContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.LocalizationContext)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string language_code = 1;
    if (has_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

    // optional string country_code = 2;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string search_domain = 4;
    if (has_search_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_domain());
    }

    // optional string spoken_language = 7;
    if (has_spoken_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spoken_language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocalizationContext*>(&from));
}

void LocalizationContext::MergeFrom(const LocalizationContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.LocalizationContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_language_code();
      language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_search_domain();
      search_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_domain_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_spoken_language();
      spoken_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spoken_language_);
    }
  }
}

void LocalizationContext::CopyFrom(const LocalizationContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.LocalizationContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationContext::IsInitialized() const {
  return true;
}

void LocalizationContext::Swap(LocalizationContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationContext::InternalSwap(LocalizationContext* other) {
  language_code_.Swap(&other->language_code_);
  country_code_.Swap(&other->country_code_);
  search_domain_.Swap(&other->search_domain_);
  spoken_language_.Swap(&other->spoken_language_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LocalizationContext::GetTypeName() const {
  return "contextual_suggestions.LocalizationContext";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationContext

// optional string language_code = 1;
bool LocalizationContext::has_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalizationContext::set_has_language_code() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalizationContext::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationContext::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language_code();
}
const ::std::string& LocalizationContext::language_code() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.LocalizationContext.language_code)
  return language_code_.GetNoArena();
}
void LocalizationContext::set_language_code(const ::std::string& value) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.LocalizationContext.language_code)
}
#if LANG_CXX11
void LocalizationContext::set_language_code(::std::string&& value) {
  set_has_language_code();
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.LocalizationContext.language_code)
}
#endif
void LocalizationContext::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.LocalizationContext.language_code)
}
void LocalizationContext::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.LocalizationContext.language_code)
}
::std::string* LocalizationContext::mutable_language_code() {
  set_has_language_code();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.LocalizationContext.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocalizationContext::release_language_code() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.LocalizationContext.language_code)
  clear_has_language_code();
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocalizationContext::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    set_has_language_code();
  } else {
    clear_has_language_code();
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.LocalizationContext.language_code)
}

// optional string country_code = 2;
bool LocalizationContext::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalizationContext::set_has_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalizationContext::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationContext::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
const ::std::string& LocalizationContext::country_code() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.LocalizationContext.country_code)
  return country_code_.GetNoArena();
}
void LocalizationContext::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.LocalizationContext.country_code)
}
#if LANG_CXX11
void LocalizationContext::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.LocalizationContext.country_code)
}
#endif
void LocalizationContext::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.LocalizationContext.country_code)
}
void LocalizationContext::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.LocalizationContext.country_code)
}
::std::string* LocalizationContext::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.LocalizationContext.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocalizationContext::release_country_code() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.LocalizationContext.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocalizationContext::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.LocalizationContext.country_code)
}

// optional string search_domain = 4;
bool LocalizationContext::has_search_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalizationContext::set_has_search_domain() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalizationContext::clear_has_search_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalizationContext::clear_search_domain() {
  search_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_domain();
}
const ::std::string& LocalizationContext::search_domain() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.LocalizationContext.search_domain)
  return search_domain_.GetNoArena();
}
void LocalizationContext::set_search_domain(const ::std::string& value) {
  set_has_search_domain();
  search_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.LocalizationContext.search_domain)
}
#if LANG_CXX11
void LocalizationContext::set_search_domain(::std::string&& value) {
  set_has_search_domain();
  search_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.LocalizationContext.search_domain)
}
#endif
void LocalizationContext::set_search_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_domain();
  search_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.LocalizationContext.search_domain)
}
void LocalizationContext::set_search_domain(const char* value, size_t size) {
  set_has_search_domain();
  search_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.LocalizationContext.search_domain)
}
::std::string* LocalizationContext::mutable_search_domain() {
  set_has_search_domain();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.LocalizationContext.search_domain)
  return search_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocalizationContext::release_search_domain() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.LocalizationContext.search_domain)
  clear_has_search_domain();
  return search_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocalizationContext::set_allocated_search_domain(::std::string* search_domain) {
  if (search_domain != NULL) {
    set_has_search_domain();
  } else {
    clear_has_search_domain();
  }
  search_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_domain);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.LocalizationContext.search_domain)
}

// optional string spoken_language = 7;
bool LocalizationContext::has_spoken_language() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalizationContext::set_has_spoken_language() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalizationContext::clear_has_spoken_language() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationContext::clear_spoken_language() {
  spoken_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spoken_language();
}
const ::std::string& LocalizationContext::spoken_language() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.LocalizationContext.spoken_language)
  return spoken_language_.GetNoArena();
}
void LocalizationContext::set_spoken_language(const ::std::string& value) {
  set_has_spoken_language();
  spoken_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.LocalizationContext.spoken_language)
}
#if LANG_CXX11
void LocalizationContext::set_spoken_language(::std::string&& value) {
  set_has_spoken_language();
  spoken_language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.LocalizationContext.spoken_language)
}
#endif
void LocalizationContext::set_spoken_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_spoken_language();
  spoken_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.LocalizationContext.spoken_language)
}
void LocalizationContext::set_spoken_language(const char* value, size_t size) {
  set_has_spoken_language();
  spoken_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.LocalizationContext.spoken_language)
}
::std::string* LocalizationContext::mutable_spoken_language() {
  set_has_spoken_language();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.LocalizationContext.spoken_language)
  return spoken_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocalizationContext::release_spoken_language() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.LocalizationContext.spoken_language)
  clear_has_spoken_language();
  return spoken_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocalizationContext::set_allocated_spoken_language(::std::string* spoken_language) {
  if (spoken_language != NULL) {
    set_has_spoken_language();
  } else {
    clear_has_spoken_language();
  }
  spoken_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spoken_language);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.LocalizationContext.spoken_language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CookieRequestContext::kNidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CookieRequestContext::CookieRequestContext()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contextual_suggestions.CookieRequestContext)
}
CookieRequestContext::CookieRequestContext(const CookieRequestContext& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nid()) {
    nid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nid_);
  }
  // @@protoc_insertion_point(copy_constructor:contextual_suggestions.CookieRequestContext)
}

void CookieRequestContext::SharedCtor() {
  _cached_size_ = 0;
  nid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CookieRequestContext::~CookieRequestContext() {
  // @@protoc_insertion_point(destructor:contextual_suggestions.CookieRequestContext)
  SharedDtor();
}

void CookieRequestContext::SharedDtor() {
  nid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CookieRequestContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CookieRequestContext& CookieRequestContext::default_instance() {
  protobuf_chrome_5fsearch_5fapi_5frequest_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

CookieRequestContext* CookieRequestContext::New(::google::protobuf::Arena* arena) const {
  CookieRequestContext* n = new CookieRequestContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CookieRequestContext::Clear() {
// @@protoc_insertion_point(message_clear_start:contextual_suggestions.CookieRequestContext)
  if (has_nid()) {
    GOOGLE_DCHECK(!nid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CookieRequestContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:contextual_suggestions.CookieRequestContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contextual_suggestions.CookieRequestContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contextual_suggestions.CookieRequestContext)
  return false;
#undef DO_
}

void CookieRequestContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contextual_suggestions.CookieRequestContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string nid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:contextual_suggestions.CookieRequestContext)
}

size_t CookieRequestContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contextual_suggestions.CookieRequestContext)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string nid = 1;
  if (has_nid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CookieRequestContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CookieRequestContext*>(&from));
}

void CookieRequestContext::MergeFrom(const CookieRequestContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contextual_suggestions.CookieRequestContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nid()) {
    set_has_nid();
    nid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nid_);
  }
}

void CookieRequestContext::CopyFrom(const CookieRequestContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contextual_suggestions.CookieRequestContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CookieRequestContext::IsInitialized() const {
  return true;
}

void CookieRequestContext::Swap(CookieRequestContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CookieRequestContext::InternalSwap(CookieRequestContext* other) {
  nid_.Swap(&other->nid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CookieRequestContext::GetTypeName() const {
  return "contextual_suggestions.CookieRequestContext";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CookieRequestContext

// optional string nid = 1;
bool CookieRequestContext::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CookieRequestContext::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
void CookieRequestContext::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CookieRequestContext::clear_nid() {
  nid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nid();
}
const ::std::string& CookieRequestContext::nid() const {
  // @@protoc_insertion_point(field_get:contextual_suggestions.CookieRequestContext.nid)
  return nid_.GetNoArena();
}
void CookieRequestContext::set_nid(const ::std::string& value) {
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contextual_suggestions.CookieRequestContext.nid)
}
#if LANG_CXX11
void CookieRequestContext::set_nid(::std::string&& value) {
  set_has_nid();
  nid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contextual_suggestions.CookieRequestContext.nid)
}
#endif
void CookieRequestContext::set_nid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contextual_suggestions.CookieRequestContext.nid)
}
void CookieRequestContext::set_nid(const char* value, size_t size) {
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contextual_suggestions.CookieRequestContext.nid)
}
::std::string* CookieRequestContext::mutable_nid() {
  set_has_nid();
  // @@protoc_insertion_point(field_mutable:contextual_suggestions.CookieRequestContext.nid)
  return nid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CookieRequestContext::release_nid() {
  // @@protoc_insertion_point(field_release:contextual_suggestions.CookieRequestContext.nid)
  clear_has_nid();
  return nid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieRequestContext::set_allocated_nid(::std::string* nid) {
  if (nid != NULL) {
    set_has_nid();
  } else {
    clear_has_nid();
  }
  nid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nid);
  // @@protoc_insertion_point(field_set_allocated:contextual_suggestions.CookieRequestContext.nid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace contextual_suggestions

// @@protoc_insertion_point(global_scope)
