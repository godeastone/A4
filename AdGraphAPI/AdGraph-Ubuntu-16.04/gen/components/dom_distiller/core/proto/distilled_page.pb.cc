// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distilled_page.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "distilled_page.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace dom_distiller {
class DistilledPageProto_ImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DistilledPageProto_Image> {
} _DistilledPageProto_Image_default_instance_;
class DistilledPageProto_DebugInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DistilledPageProto_DebugInfo> {
} _DistilledPageProto_DebugInfo_default_instance_;
class DistilledPageProto_PaginationInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DistilledPageProto_PaginationInfo> {
} _DistilledPageProto_PaginationInfo_default_instance_;
class DistilledPageProto_TimingInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DistilledPageProto_TimingInfo> {
} _DistilledPageProto_TimingInfo_default_instance_;
class DistilledPageProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DistilledPageProto> {
} _DistilledPageProto_default_instance_;

namespace protobuf_distilled_5fpage_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DistilledPageProto_Image_default_instance_.Shutdown();
  _DistilledPageProto_DebugInfo_default_instance_.Shutdown();
  _DistilledPageProto_PaginationInfo_default_instance_.Shutdown();
  _DistilledPageProto_TimingInfo_default_instance_.Shutdown();
  _DistilledPageProto_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DistilledPageProto_Image_default_instance_.DefaultConstruct();
  _DistilledPageProto_DebugInfo_default_instance_.DefaultConstruct();
  _DistilledPageProto_PaginationInfo_default_instance_.DefaultConstruct();
  _DistilledPageProto_TimingInfo_default_instance_.DefaultConstruct();
  _DistilledPageProto_default_instance_.DefaultConstruct();
  _DistilledPageProto_default_instance_.get_mutable()->debug_info_ = const_cast< ::dom_distiller::DistilledPageProto_DebugInfo*>(
      ::dom_distiller::DistilledPageProto_DebugInfo::internal_default_instance());
  _DistilledPageProto_default_instance_.get_mutable()->pagination_info_ = const_cast< ::dom_distiller::DistilledPageProto_PaginationInfo*>(
      ::dom_distiller::DistilledPageProto_PaginationInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_distilled_5fpage_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledPageProto_Image::kNameFieldNumber;
const int DistilledPageProto_Image::kDataFieldNumber;
const int DistilledPageProto_Image::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledPageProto_Image::DistilledPageProto_Image()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_distilled_5fpage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledPageProto.Image)
}
DistilledPageProto_Image::DistilledPageProto_Image(const DistilledPageProto_Image& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.Image)
}

void DistilledPageProto_Image::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DistilledPageProto_Image::~DistilledPageProto_Image() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.Image)
  SharedDtor();
}

void DistilledPageProto_Image::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DistilledPageProto_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledPageProto_Image& DistilledPageProto_Image::default_instance() {
  protobuf_distilled_5fpage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistilledPageProto_Image* DistilledPageProto_Image::New(::google::protobuf::Arena* arena) const {
  DistilledPageProto_Image* n = new DistilledPageProto_Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledPageProto_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.Image)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistilledPageProto_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledPageProto.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledPageProto.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledPageProto.Image)
  return false;
#undef DO_
}

void DistilledPageProto_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledPageProto.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledPageProto.Image)
}

size_t DistilledPageProto_Image::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.DistilledPageProto.Image)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
size_t DistilledPageProto_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.Image)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string url = 3;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledPageProto_Image::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledPageProto_Image*>(&from));
}

void DistilledPageProto_Image::MergeFrom(const DistilledPageProto_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
}

void DistilledPageProto_Image::CopyFrom(const DistilledPageProto_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DistilledPageProto_Image::Swap(DistilledPageProto_Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledPageProto_Image::InternalSwap(DistilledPageProto_Image* other) {
  name_.Swap(&other->name_);
  data_.Swap(&other->data_);
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledPageProto_Image::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.Image";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistilledPageProto_Image

// required string name = 1;
bool DistilledPageProto_Image::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledPageProto_Image::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledPageProto_Image::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledPageProto_Image::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& DistilledPageProto_Image::name() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.name)
  return name_.GetNoArena();
}
void DistilledPageProto_Image::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.name)
}
#if LANG_CXX11
void DistilledPageProto_Image::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.Image.name)
}
#endif
void DistilledPageProto_Image::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.Image.name)
}
void DistilledPageProto_Image::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.Image.name)
}
::std::string* DistilledPageProto_Image::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto_Image::release_name() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto_Image::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.name)
}

// required bytes data = 2;
bool DistilledPageProto_Image::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistilledPageProto_Image::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void DistilledPageProto_Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistilledPageProto_Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& DistilledPageProto_Image::data() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.data)
  return data_.GetNoArena();
}
void DistilledPageProto_Image::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.data)
}
#if LANG_CXX11
void DistilledPageProto_Image::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.Image.data)
}
#endif
void DistilledPageProto_Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.Image.data)
}
void DistilledPageProto_Image::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.Image.data)
}
::std::string* DistilledPageProto_Image::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto_Image::release_data() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto_Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.data)
}

// optional string url = 3;
bool DistilledPageProto_Image::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DistilledPageProto_Image::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
void DistilledPageProto_Image::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void DistilledPageProto_Image::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DistilledPageProto_Image::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.url)
  return url_.GetNoArena();
}
void DistilledPageProto_Image::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.url)
}
#if LANG_CXX11
void DistilledPageProto_Image::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.Image.url)
}
#endif
void DistilledPageProto_Image::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.Image.url)
}
void DistilledPageProto_Image::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.Image.url)
}
::std::string* DistilledPageProto_Image::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto_Image::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto_Image::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledPageProto_DebugInfo::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledPageProto_DebugInfo::DistilledPageProto_DebugInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_distilled_5fpage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledPageProto.DebugInfo)
}
DistilledPageProto_DebugInfo::DistilledPageProto_DebugInfo(const DistilledPageProto_DebugInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_log()) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.DebugInfo)
}

void DistilledPageProto_DebugInfo::SharedCtor() {
  _cached_size_ = 0;
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DistilledPageProto_DebugInfo::~DistilledPageProto_DebugInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.DebugInfo)
  SharedDtor();
}

void DistilledPageProto_DebugInfo::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DistilledPageProto_DebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledPageProto_DebugInfo& DistilledPageProto_DebugInfo::default_instance() {
  protobuf_distilled_5fpage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistilledPageProto_DebugInfo* DistilledPageProto_DebugInfo::New(::google::protobuf::Arena* arena) const {
  DistilledPageProto_DebugInfo* n = new DistilledPageProto_DebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledPageProto_DebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.DebugInfo)
  if (has_log()) {
    GOOGLE_DCHECK(!log_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*log_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistilledPageProto_DebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledPageProto.DebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string log = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledPageProto.DebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledPageProto.DebugInfo)
  return false;
#undef DO_
}

void DistilledPageProto_DebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledPageProto.DebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string log = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->log(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledPageProto.DebugInfo)
}

size_t DistilledPageProto_DebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.DebugInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string log = 1;
  if (has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledPageProto_DebugInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledPageProto_DebugInfo*>(&from));
}

void DistilledPageProto_DebugInfo::MergeFrom(const DistilledPageProto_DebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_log()) {
    set_has_log();
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
}

void DistilledPageProto_DebugInfo::CopyFrom(const DistilledPageProto_DebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_DebugInfo::IsInitialized() const {
  return true;
}

void DistilledPageProto_DebugInfo::Swap(DistilledPageProto_DebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledPageProto_DebugInfo::InternalSwap(DistilledPageProto_DebugInfo* other) {
  log_.Swap(&other->log_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledPageProto_DebugInfo::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.DebugInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistilledPageProto_DebugInfo

// optional string log = 1;
bool DistilledPageProto_DebugInfo::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledPageProto_DebugInfo::set_has_log() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledPageProto_DebugInfo::clear_has_log() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledPageProto_DebugInfo::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log();
}
const ::std::string& DistilledPageProto_DebugInfo::log() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.DebugInfo.log)
  return log_.GetNoArena();
}
void DistilledPageProto_DebugInfo::set_log(const ::std::string& value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.DebugInfo.log)
}
#if LANG_CXX11
void DistilledPageProto_DebugInfo::set_log(::std::string&& value) {
  set_has_log();
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.DebugInfo.log)
}
#endif
void DistilledPageProto_DebugInfo::set_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.DebugInfo.log)
}
void DistilledPageProto_DebugInfo::set_log(const char* value, size_t size) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.DebugInfo.log)
}
::std::string* DistilledPageProto_DebugInfo::mutable_log() {
  set_has_log();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.DebugInfo.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto_DebugInfo::release_log() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.DebugInfo.log)
  clear_has_log();
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto_DebugInfo::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    set_has_log();
  } else {
    clear_has_log();
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.DebugInfo.log)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledPageProto_PaginationInfo::kNextPageFieldNumber;
const int DistilledPageProto_PaginationInfo::kPrevPageFieldNumber;
const int DistilledPageProto_PaginationInfo::kCanonicalPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledPageProto_PaginationInfo::DistilledPageProto_PaginationInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_distilled_5fpage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledPageProto.PaginationInfo)
}
DistilledPageProto_PaginationInfo::DistilledPageProto_PaginationInfo(const DistilledPageProto_PaginationInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_next_page()) {
    next_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_);
  }
  prev_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prev_page()) {
    prev_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_page_);
  }
  canonical_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_canonical_page()) {
    canonical_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_page_);
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.PaginationInfo)
}

void DistilledPageProto_PaginationInfo::SharedCtor() {
  _cached_size_ = 0;
  next_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DistilledPageProto_PaginationInfo::~DistilledPageProto_PaginationInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.PaginationInfo)
  SharedDtor();
}

void DistilledPageProto_PaginationInfo::SharedDtor() {
  next_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DistilledPageProto_PaginationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledPageProto_PaginationInfo& DistilledPageProto_PaginationInfo::default_instance() {
  protobuf_distilled_5fpage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistilledPageProto_PaginationInfo* DistilledPageProto_PaginationInfo::New(::google::protobuf::Arena* arena) const {
  DistilledPageProto_PaginationInfo* n = new DistilledPageProto_PaginationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledPageProto_PaginationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.PaginationInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_next_page()) {
      GOOGLE_DCHECK(!next_page_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*next_page_.UnsafeRawStringPointer())->clear();
    }
    if (has_prev_page()) {
      GOOGLE_DCHECK(!prev_page_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*prev_page_.UnsafeRawStringPointer())->clear();
    }
    if (has_canonical_page()) {
      GOOGLE_DCHECK(!canonical_page_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*canonical_page_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistilledPageProto_PaginationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledPageProto.PaginationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string next_page = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string prev_page = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string canonical_page = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonical_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledPageProto.PaginationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledPageProto.PaginationInfo)
  return false;
#undef DO_
}

void DistilledPageProto_PaginationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledPageProto.PaginationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string next_page = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->next_page(), output);
  }

  // optional string prev_page = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prev_page(), output);
  }

  // optional string canonical_page = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->canonical_page(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledPageProto.PaginationInfo)
}

size_t DistilledPageProto_PaginationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.PaginationInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string next_page = 1;
    if (has_next_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_page());
    }

    // optional string prev_page = 2;
    if (has_prev_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prev_page());
    }

    // optional string canonical_page = 3;
    if (has_canonical_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canonical_page());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledPageProto_PaginationInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledPageProto_PaginationInfo*>(&from));
}

void DistilledPageProto_PaginationInfo::MergeFrom(const DistilledPageProto_PaginationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.PaginationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_next_page();
      next_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_prev_page();
      prev_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_page_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_canonical_page();
      canonical_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_page_);
    }
  }
}

void DistilledPageProto_PaginationInfo::CopyFrom(const DistilledPageProto_PaginationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.PaginationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_PaginationInfo::IsInitialized() const {
  return true;
}

void DistilledPageProto_PaginationInfo::Swap(DistilledPageProto_PaginationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledPageProto_PaginationInfo::InternalSwap(DistilledPageProto_PaginationInfo* other) {
  next_page_.Swap(&other->next_page_);
  prev_page_.Swap(&other->prev_page_);
  canonical_page_.Swap(&other->canonical_page_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledPageProto_PaginationInfo::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.PaginationInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistilledPageProto_PaginationInfo

// optional string next_page = 1;
bool DistilledPageProto_PaginationInfo::has_next_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledPageProto_PaginationInfo::set_has_next_page() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledPageProto_PaginationInfo::clear_has_next_page() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledPageProto_PaginationInfo::clear_next_page() {
  next_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next_page();
}
const ::std::string& DistilledPageProto_PaginationInfo::next_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  return next_page_.GetNoArena();
}
void DistilledPageProto_PaginationInfo::set_next_page(const ::std::string& value) {
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
#if LANG_CXX11
void DistilledPageProto_PaginationInfo::set_next_page(::std::string&& value) {
  set_has_next_page();
  next_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
#endif
void DistilledPageProto_PaginationInfo::set_next_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
void DistilledPageProto_PaginationInfo::set_next_page(const char* value, size_t size) {
  set_has_next_page();
  next_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
::std::string* DistilledPageProto_PaginationInfo::mutable_next_page() {
  set_has_next_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  return next_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto_PaginationInfo::release_next_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  clear_has_next_page();
  return next_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto_PaginationInfo::set_allocated_next_page(::std::string* next_page) {
  if (next_page != NULL) {
    set_has_next_page();
  } else {
    clear_has_next_page();
  }
  next_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}

// optional string prev_page = 2;
bool DistilledPageProto_PaginationInfo::has_prev_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistilledPageProto_PaginationInfo::set_has_prev_page() {
  _has_bits_[0] |= 0x00000002u;
}
void DistilledPageProto_PaginationInfo::clear_has_prev_page() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistilledPageProto_PaginationInfo::clear_prev_page() {
  prev_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_page();
}
const ::std::string& DistilledPageProto_PaginationInfo::prev_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  return prev_page_.GetNoArena();
}
void DistilledPageProto_PaginationInfo::set_prev_page(const ::std::string& value) {
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
#if LANG_CXX11
void DistilledPageProto_PaginationInfo::set_prev_page(::std::string&& value) {
  set_has_prev_page();
  prev_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
#endif
void DistilledPageProto_PaginationInfo::set_prev_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
void DistilledPageProto_PaginationInfo::set_prev_page(const char* value, size_t size) {
  set_has_prev_page();
  prev_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
::std::string* DistilledPageProto_PaginationInfo::mutable_prev_page() {
  set_has_prev_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  return prev_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto_PaginationInfo::release_prev_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  clear_has_prev_page();
  return prev_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto_PaginationInfo::set_allocated_prev_page(::std::string* prev_page) {
  if (prev_page != NULL) {
    set_has_prev_page();
  } else {
    clear_has_prev_page();
  }
  prev_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}

// optional string canonical_page = 3;
bool DistilledPageProto_PaginationInfo::has_canonical_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DistilledPageProto_PaginationInfo::set_has_canonical_page() {
  _has_bits_[0] |= 0x00000004u;
}
void DistilledPageProto_PaginationInfo::clear_has_canonical_page() {
  _has_bits_[0] &= ~0x00000004u;
}
void DistilledPageProto_PaginationInfo::clear_canonical_page() {
  canonical_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canonical_page();
}
const ::std::string& DistilledPageProto_PaginationInfo::canonical_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  return canonical_page_.GetNoArena();
}
void DistilledPageProto_PaginationInfo::set_canonical_page(const ::std::string& value) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
#if LANG_CXX11
void DistilledPageProto_PaginationInfo::set_canonical_page(::std::string&& value) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
#endif
void DistilledPageProto_PaginationInfo::set_canonical_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
void DistilledPageProto_PaginationInfo::set_canonical_page(const char* value, size_t size) {
  set_has_canonical_page();
  canonical_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
::std::string* DistilledPageProto_PaginationInfo::mutable_canonical_page() {
  set_has_canonical_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  return canonical_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto_PaginationInfo::release_canonical_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  clear_has_canonical_page();
  return canonical_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto_PaginationInfo::set_allocated_canonical_page(::std::string* canonical_page) {
  if (canonical_page != NULL) {
    set_has_canonical_page();
  } else {
    clear_has_canonical_page();
  }
  canonical_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledPageProto_TimingInfo::kNameFieldNumber;
const int DistilledPageProto_TimingInfo::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledPageProto_TimingInfo::DistilledPageProto_TimingInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_distilled_5fpage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledPageProto.TimingInfo)
}
DistilledPageProto_TimingInfo::DistilledPageProto_TimingInfo(const DistilledPageProto_TimingInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.TimingInfo)
}

void DistilledPageProto_TimingInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
}

DistilledPageProto_TimingInfo::~DistilledPageProto_TimingInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.TimingInfo)
  SharedDtor();
}

void DistilledPageProto_TimingInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DistilledPageProto_TimingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledPageProto_TimingInfo& DistilledPageProto_TimingInfo::default_instance() {
  protobuf_distilled_5fpage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistilledPageProto_TimingInfo* DistilledPageProto_TimingInfo::New(::google::protobuf::Arena* arena) const {
  DistilledPageProto_TimingInfo* n = new DistilledPageProto_TimingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledPageProto_TimingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.TimingInfo)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistilledPageProto_TimingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledPageProto.TimingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledPageProto.TimingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledPageProto.TimingInfo)
  return false;
#undef DO_
}

void DistilledPageProto_TimingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledPageProto.TimingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledPageProto.TimingInfo)
}

size_t DistilledPageProto_TimingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.TimingInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double time = 2;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledPageProto_TimingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledPageProto_TimingInfo*>(&from));
}

void DistilledPageProto_TimingInfo::MergeFrom(const DistilledPageProto_TimingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.TimingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DistilledPageProto_TimingInfo::CopyFrom(const DistilledPageProto_TimingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.TimingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_TimingInfo::IsInitialized() const {
  return true;
}

void DistilledPageProto_TimingInfo::Swap(DistilledPageProto_TimingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledPageProto_TimingInfo::InternalSwap(DistilledPageProto_TimingInfo* other) {
  name_.Swap(&other->name_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledPageProto_TimingInfo::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.TimingInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistilledPageProto_TimingInfo

// optional string name = 1;
bool DistilledPageProto_TimingInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledPageProto_TimingInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledPageProto_TimingInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledPageProto_TimingInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& DistilledPageProto_TimingInfo::name() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.TimingInfo.name)
  return name_.GetNoArena();
}
void DistilledPageProto_TimingInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.TimingInfo.name)
}
#if LANG_CXX11
void DistilledPageProto_TimingInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.TimingInfo.name)
}
#endif
void DistilledPageProto_TimingInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.TimingInfo.name)
}
void DistilledPageProto_TimingInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.TimingInfo.name)
}
::std::string* DistilledPageProto_TimingInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.TimingInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto_TimingInfo::release_name() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.TimingInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto_TimingInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.TimingInfo.name)
}

// optional double time = 2;
bool DistilledPageProto_TimingInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistilledPageProto_TimingInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void DistilledPageProto_TimingInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistilledPageProto_TimingInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
double DistilledPageProto_TimingInfo::time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.TimingInfo.time)
  return time_;
}
void DistilledPageProto_TimingInfo::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.TimingInfo.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistilledPageProto::kUrlFieldNumber;
const int DistilledPageProto::kHtmlFieldNumber;
const int DistilledPageProto::kImageFieldNumber;
const int DistilledPageProto::kTitleFieldNumber;
const int DistilledPageProto::kDebugInfoFieldNumber;
const int DistilledPageProto::kTextDirectionFieldNumber;
const int DistilledPageProto::kPaginationInfoFieldNumber;
const int DistilledPageProto::kTimingInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistilledPageProto::DistilledPageProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_distilled_5fpage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.DistilledPageProto)
}
DistilledPageProto::DistilledPageProto(const DistilledPageProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      image_(from.image_),
      timing_info_(from.timing_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_html()) {
    html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  text_direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_direction()) {
    text_direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_direction_);
  }
  if (from.has_debug_info()) {
    debug_info_ = new ::dom_distiller::DistilledPageProto_DebugInfo(*from.debug_info_);
  } else {
    debug_info_ = NULL;
  }
  if (from.has_pagination_info()) {
    pagination_info_ = new ::dom_distiller::DistilledPageProto_PaginationInfo(*from.pagination_info_);
  } else {
    pagination_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto)
}

void DistilledPageProto::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&debug_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_info_) -
      reinterpret_cast<char*>(&debug_info_)) + sizeof(pagination_info_));
}

DistilledPageProto::~DistilledPageProto() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto)
  SharedDtor();
}

void DistilledPageProto::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_direction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete debug_info_;
  }
  if (this != internal_default_instance()) {
    delete pagination_info_;
  }
}

void DistilledPageProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DistilledPageProto& DistilledPageProto::default_instance() {
  protobuf_distilled_5fpage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistilledPageProto* DistilledPageProto::New(::google::protobuf::Arena* arena) const {
  DistilledPageProto* n = new DistilledPageProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistilledPageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto)
  image_.Clear();
  timing_info_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_html()) {
      GOOGLE_DCHECK(!html_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*html_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_text_direction()) {
      GOOGLE_DCHECK(!text_direction_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_direction_.UnsafeRawStringPointer())->clear();
    }
    if (has_debug_info()) {
      GOOGLE_DCHECK(debug_info_ != NULL);
      debug_info_->::dom_distiller::DistilledPageProto_DebugInfo::Clear();
    }
    if (has_pagination_info()) {
      GOOGLE_DCHECK(pagination_info_ != NULL);
      pagination_info_->::dom_distiller::DistilledPageProto_PaginationInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistilledPageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.DistilledPageProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string html = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dom_distiller.DistilledPageProto.Image image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_direction = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pagination_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timing_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.DistilledPageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.DistilledPageProto)
  return false;
#undef DO_
}

void DistilledPageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.DistilledPageProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required string html = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->html(), output);
  }

  // repeated .dom_distiller.DistilledPageProto.Image image = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->image(static_cast<int>(i)), output);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->debug_info_, output);
  }

  // optional string text_direction = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->text_direction(), output);
  }

  // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->pagination_info_, output);
  }

  // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timing_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->timing_info(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.DistilledPageProto)
}

size_t DistilledPageProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.DistilledPageProto)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_html()) {
    // required string html = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->html());
  }

  return total_size;
}
size_t DistilledPageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string html = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->html());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .dom_distiller.DistilledPageProto.Image image = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->image_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image(static_cast<int>(i)));
    }
  }

  // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->timing_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timing_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string text_direction = 7;
    if (has_text_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_direction());
    }

    // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_info_);
    }

    // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
    if (has_pagination_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pagination_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistilledPageProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistilledPageProto*>(&from));
}

void DistilledPageProto::MergeFrom(const DistilledPageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_.MergeFrom(from.image_);
  timing_info_.MergeFrom(from.timing_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_html();
      html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_text_direction();
      text_direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_direction_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_debug_info()->::dom_distiller::DistilledPageProto_DebugInfo::MergeFrom(from.debug_info());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_pagination_info()->::dom_distiller::DistilledPageProto_PaginationInfo::MergeFrom(from.pagination_info());
    }
  }
}

void DistilledPageProto::CopyFrom(const DistilledPageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->image())) return false;
  return true;
}

void DistilledPageProto::Swap(DistilledPageProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistilledPageProto::InternalSwap(DistilledPageProto* other) {
  image_.InternalSwap(&other->image_);
  timing_info_.InternalSwap(&other->timing_info_);
  url_.Swap(&other->url_);
  html_.Swap(&other->html_);
  title_.Swap(&other->title_);
  text_direction_.Swap(&other->text_direction_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(pagination_info_, other->pagination_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DistilledPageProto::GetTypeName() const {
  return "dom_distiller.DistilledPageProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistilledPageProto

// required string url = 1;
bool DistilledPageProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistilledPageProto::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DistilledPageProto::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistilledPageProto::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DistilledPageProto::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.url)
  return url_.GetNoArena();
}
void DistilledPageProto::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.url)
}
#if LANG_CXX11
void DistilledPageProto::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.url)
}
#endif
void DistilledPageProto::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.url)
}
void DistilledPageProto::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.url)
}
::std::string* DistilledPageProto::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.url)
}

// required string html = 3;
bool DistilledPageProto::has_html() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistilledPageProto::set_has_html() {
  _has_bits_[0] |= 0x00000002u;
}
void DistilledPageProto::clear_has_html() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistilledPageProto::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_html();
}
const ::std::string& DistilledPageProto::html() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.html)
  return html_.GetNoArena();
}
void DistilledPageProto::set_html(const ::std::string& value) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.html)
}
#if LANG_CXX11
void DistilledPageProto::set_html(::std::string&& value) {
  set_has_html();
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.html)
}
#endif
void DistilledPageProto::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.html)
}
void DistilledPageProto::set_html(const char* value, size_t size) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.html)
}
::std::string* DistilledPageProto::mutable_html() {
  set_has_html();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto::release_html() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.html)
  clear_has_html();
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    set_has_html();
  } else {
    clear_has_html();
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.html)
}

// repeated .dom_distiller.DistilledPageProto.Image image = 4;
int DistilledPageProto::image_size() const {
  return image_.size();
}
void DistilledPageProto::clear_image() {
  image_.Clear();
}
const ::dom_distiller::DistilledPageProto_Image& DistilledPageProto::image(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.image)
  return image_.Get(index);
}
::dom_distiller::DistilledPageProto_Image* DistilledPageProto::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.image)
  return image_.Mutable(index);
}
::dom_distiller::DistilledPageProto_Image* DistilledPageProto::add_image() {
  // @@protoc_insertion_point(field_add:dom_distiller.DistilledPageProto.image)
  return image_.Add();
}
::google::protobuf::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >*
DistilledPageProto::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.DistilledPageProto.image)
  return &image_;
}
const ::google::protobuf::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >&
DistilledPageProto::image() const {
  // @@protoc_insertion_point(field_list:dom_distiller.DistilledPageProto.image)
  return image_;
}

// optional string title = 5;
bool DistilledPageProto::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DistilledPageProto::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void DistilledPageProto::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void DistilledPageProto::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& DistilledPageProto::title() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.title)
  return title_.GetNoArena();
}
void DistilledPageProto::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.title)
}
#if LANG_CXX11
void DistilledPageProto::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.title)
}
#endif
void DistilledPageProto::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.title)
}
void DistilledPageProto::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.title)
}
::std::string* DistilledPageProto::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto::release_title() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.title)
}

// optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
bool DistilledPageProto::has_debug_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DistilledPageProto::set_has_debug_info() {
  _has_bits_[0] |= 0x00000010u;
}
void DistilledPageProto::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void DistilledPageProto::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::dom_distiller::DistilledPageProto_DebugInfo::Clear();
  clear_has_debug_info();
}
const ::dom_distiller::DistilledPageProto_DebugInfo& DistilledPageProto::debug_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.debug_info)
  return debug_info_ != NULL ? *debug_info_
                         : *::dom_distiller::DistilledPageProto_DebugInfo::internal_default_instance();
}
::dom_distiller::DistilledPageProto_DebugInfo* DistilledPageProto::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) {
    debug_info_ = new ::dom_distiller::DistilledPageProto_DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.debug_info)
  return debug_info_;
}
::dom_distiller::DistilledPageProto_DebugInfo* DistilledPageProto::release_debug_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.debug_info)
  clear_has_debug_info();
  ::dom_distiller::DistilledPageProto_DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
void DistilledPageProto::set_allocated_debug_info(::dom_distiller::DistilledPageProto_DebugInfo* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.debug_info)
}

// optional string text_direction = 7;
bool DistilledPageProto::has_text_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DistilledPageProto::set_has_text_direction() {
  _has_bits_[0] |= 0x00000008u;
}
void DistilledPageProto::clear_has_text_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
void DistilledPageProto::clear_text_direction() {
  text_direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_direction();
}
const ::std::string& DistilledPageProto::text_direction() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.text_direction)
  return text_direction_.GetNoArena();
}
void DistilledPageProto::set_text_direction(const ::std::string& value) {
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.text_direction)
}
#if LANG_CXX11
void DistilledPageProto::set_text_direction(::std::string&& value) {
  set_has_text_direction();
  text_direction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.text_direction)
}
#endif
void DistilledPageProto::set_text_direction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.text_direction)
}
void DistilledPageProto::set_text_direction(const char* value, size_t size) {
  set_has_text_direction();
  text_direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.text_direction)
}
::std::string* DistilledPageProto::mutable_text_direction() {
  set_has_text_direction();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.text_direction)
  return text_direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistilledPageProto::release_text_direction() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.text_direction)
  clear_has_text_direction();
  return text_direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistilledPageProto::set_allocated_text_direction(::std::string* text_direction) {
  if (text_direction != NULL) {
    set_has_text_direction();
  } else {
    clear_has_text_direction();
  }
  text_direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_direction);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.text_direction)
}

// optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
bool DistilledPageProto::has_pagination_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DistilledPageProto::set_has_pagination_info() {
  _has_bits_[0] |= 0x00000020u;
}
void DistilledPageProto::clear_has_pagination_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void DistilledPageProto::clear_pagination_info() {
  if (pagination_info_ != NULL) pagination_info_->::dom_distiller::DistilledPageProto_PaginationInfo::Clear();
  clear_has_pagination_info();
}
const ::dom_distiller::DistilledPageProto_PaginationInfo& DistilledPageProto::pagination_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.pagination_info)
  return pagination_info_ != NULL ? *pagination_info_
                         : *::dom_distiller::DistilledPageProto_PaginationInfo::internal_default_instance();
}
::dom_distiller::DistilledPageProto_PaginationInfo* DistilledPageProto::mutable_pagination_info() {
  set_has_pagination_info();
  if (pagination_info_ == NULL) {
    pagination_info_ = new ::dom_distiller::DistilledPageProto_PaginationInfo;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.pagination_info)
  return pagination_info_;
}
::dom_distiller::DistilledPageProto_PaginationInfo* DistilledPageProto::release_pagination_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.pagination_info)
  clear_has_pagination_info();
  ::dom_distiller::DistilledPageProto_PaginationInfo* temp = pagination_info_;
  pagination_info_ = NULL;
  return temp;
}
void DistilledPageProto::set_allocated_pagination_info(::dom_distiller::DistilledPageProto_PaginationInfo* pagination_info) {
  delete pagination_info_;
  pagination_info_ = pagination_info;
  if (pagination_info) {
    set_has_pagination_info();
  } else {
    clear_has_pagination_info();
  }
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.pagination_info)
}

// repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
int DistilledPageProto::timing_info_size() const {
  return timing_info_.size();
}
void DistilledPageProto::clear_timing_info() {
  timing_info_.Clear();
}
const ::dom_distiller::DistilledPageProto_TimingInfo& DistilledPageProto::timing_info(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_.Get(index);
}
::dom_distiller::DistilledPageProto_TimingInfo* DistilledPageProto::mutable_timing_info(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_.Mutable(index);
}
::dom_distiller::DistilledPageProto_TimingInfo* DistilledPageProto::add_timing_info() {
  // @@protoc_insertion_point(field_add:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >*
DistilledPageProto::mutable_timing_info() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.DistilledPageProto.timing_info)
  return &timing_info_;
}
const ::google::protobuf::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >&
DistilledPageProto::timing_info() const {
  // @@protoc_insertion_point(field_list:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)
