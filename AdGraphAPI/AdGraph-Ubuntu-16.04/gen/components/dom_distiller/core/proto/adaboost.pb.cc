// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adaboost.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "adaboost.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace dom_distiller {
class AdaBoostProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AdaBoostProto> {
} _AdaBoostProto_default_instance_;
class StumpProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StumpProto> {
} _StumpProto_default_instance_;

namespace protobuf_adaboost_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _AdaBoostProto_default_instance_.Shutdown();
  _StumpProto_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AdaBoostProto_default_instance_.DefaultConstruct();
  _StumpProto_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_adaboost_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdaBoostProto::kNumStumpsFieldNumber;
const int AdaBoostProto::kNumFeaturesFieldNumber;
const int AdaBoostProto::kStumpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdaBoostProto::AdaBoostProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_adaboost_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.AdaBoostProto)
}
AdaBoostProto::AdaBoostProto(const AdaBoostProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stump_(from.stump_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_stumps_, &from.num_stumps_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_features_) -
    reinterpret_cast<char*>(&num_stumps_)) + sizeof(num_features_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.AdaBoostProto)
}

void AdaBoostProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&num_stumps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_features_) -
      reinterpret_cast<char*>(&num_stumps_)) + sizeof(num_features_));
}

AdaBoostProto::~AdaBoostProto() {
  // @@protoc_insertion_point(destructor:dom_distiller.AdaBoostProto)
  SharedDtor();
}

void AdaBoostProto::SharedDtor() {
}

void AdaBoostProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdaBoostProto& AdaBoostProto::default_instance() {
  protobuf_adaboost_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdaBoostProto* AdaBoostProto::New(::google::protobuf::Arena* arena) const {
  AdaBoostProto* n = new AdaBoostProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdaBoostProto::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.AdaBoostProto)
  stump_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&num_stumps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_features_) -
        reinterpret_cast<char*>(&num_stumps_)) + sizeof(num_features_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AdaBoostProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.AdaBoostProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_stumps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_stumps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_stumps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_features();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_features_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dom_distiller.StumpProto stump = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.AdaBoostProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.AdaBoostProto)
  return false;
#undef DO_
}

void AdaBoostProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.AdaBoostProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num_stumps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_stumps(), output);
  }

  // required int32 num_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_features(), output);
  }

  // repeated .dom_distiller.StumpProto stump = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stump_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->stump(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.AdaBoostProto)
}

size_t AdaBoostProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.AdaBoostProto)
  size_t total_size = 0;

  if (has_num_stumps()) {
    // required int32 num_stumps = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_stumps());
  }

  if (has_num_features()) {
    // required int32 num_features = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_features());
  }

  return total_size;
}
size_t AdaBoostProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.AdaBoostProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 num_stumps = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_stumps());

    // required int32 num_features = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_features());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .dom_distiller.StumpProto stump = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stump_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stump(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdaBoostProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdaBoostProto*>(&from));
}

void AdaBoostProto::MergeFrom(const AdaBoostProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.AdaBoostProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stump_.MergeFrom(from.stump_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      num_stumps_ = from.num_stumps_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_features_ = from.num_features_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdaBoostProto::CopyFrom(const AdaBoostProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.AdaBoostProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaBoostProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stump())) return false;
  return true;
}

void AdaBoostProto::Swap(AdaBoostProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdaBoostProto::InternalSwap(AdaBoostProto* other) {
  stump_.InternalSwap(&other->stump_);
  std::swap(num_stumps_, other->num_stumps_);
  std::swap(num_features_, other->num_features_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AdaBoostProto::GetTypeName() const {
  return "dom_distiller.AdaBoostProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdaBoostProto

// required int32 num_stumps = 1;
bool AdaBoostProto::has_num_stumps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdaBoostProto::set_has_num_stumps() {
  _has_bits_[0] |= 0x00000001u;
}
void AdaBoostProto::clear_has_num_stumps() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdaBoostProto::clear_num_stumps() {
  num_stumps_ = 0;
  clear_has_num_stumps();
}
::google::protobuf::int32 AdaBoostProto::num_stumps() const {
  // @@protoc_insertion_point(field_get:dom_distiller.AdaBoostProto.num_stumps)
  return num_stumps_;
}
void AdaBoostProto::set_num_stumps(::google::protobuf::int32 value) {
  set_has_num_stumps();
  num_stumps_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.AdaBoostProto.num_stumps)
}

// required int32 num_features = 2;
bool AdaBoostProto::has_num_features() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdaBoostProto::set_has_num_features() {
  _has_bits_[0] |= 0x00000002u;
}
void AdaBoostProto::clear_has_num_features() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdaBoostProto::clear_num_features() {
  num_features_ = 0;
  clear_has_num_features();
}
::google::protobuf::int32 AdaBoostProto::num_features() const {
  // @@protoc_insertion_point(field_get:dom_distiller.AdaBoostProto.num_features)
  return num_features_;
}
void AdaBoostProto::set_num_features(::google::protobuf::int32 value) {
  set_has_num_features();
  num_features_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.AdaBoostProto.num_features)
}

// repeated .dom_distiller.StumpProto stump = 3;
int AdaBoostProto::stump_size() const {
  return stump_.size();
}
void AdaBoostProto::clear_stump() {
  stump_.Clear();
}
const ::dom_distiller::StumpProto& AdaBoostProto::stump(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.AdaBoostProto.stump)
  return stump_.Get(index);
}
::dom_distiller::StumpProto* AdaBoostProto::mutable_stump(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.AdaBoostProto.stump)
  return stump_.Mutable(index);
}
::dom_distiller::StumpProto* AdaBoostProto::add_stump() {
  // @@protoc_insertion_point(field_add:dom_distiller.AdaBoostProto.stump)
  return stump_.Add();
}
::google::protobuf::RepeatedPtrField< ::dom_distiller::StumpProto >*
AdaBoostProto::mutable_stump() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.AdaBoostProto.stump)
  return &stump_;
}
const ::google::protobuf::RepeatedPtrField< ::dom_distiller::StumpProto >&
AdaBoostProto::stump() const {
  // @@protoc_insertion_point(field_list:dom_distiller.AdaBoostProto.stump)
  return stump_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StumpProto::kFeatureNumberFieldNumber;
const int StumpProto::kSplitFieldNumber;
const int StumpProto::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StumpProto::StumpProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_adaboost_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.StumpProto)
}
StumpProto::StumpProto(const StumpProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&split_, &from.split_,
    static_cast<size_t>(reinterpret_cast<char*>(&feature_number_) -
    reinterpret_cast<char*>(&split_)) + sizeof(feature_number_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.StumpProto)
}

void StumpProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&split_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_number_) -
      reinterpret_cast<char*>(&split_)) + sizeof(feature_number_));
}

StumpProto::~StumpProto() {
  // @@protoc_insertion_point(destructor:dom_distiller.StumpProto)
  SharedDtor();
}

void StumpProto::SharedDtor() {
}

void StumpProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StumpProto& StumpProto::default_instance() {
  protobuf_adaboost_2eproto::InitDefaults();
  return *internal_default_instance();
}

StumpProto* StumpProto::New(::google::protobuf::Arena* arena) const {
  StumpProto* n = new StumpProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.StumpProto)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&split_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&feature_number_) -
        reinterpret_cast<char*>(&split_)) + sizeof(feature_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StumpProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.StumpProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 feature_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_feature_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double split = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_split();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.StumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.StumpProto)
  return false;
#undef DO_
}

void StumpProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.StumpProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 feature_number = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->feature_number(), output);
  }

  // required double split = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->split(), output);
  }

  // required double weight = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.StumpProto)
}

size_t StumpProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.StumpProto)
  size_t total_size = 0;

  if (has_split()) {
    // required double split = 2;
    total_size += 1 + 8;
  }

  if (has_weight()) {
    // required double weight = 3;
    total_size += 1 + 8;
  }

  if (has_feature_number()) {
    // required int32 feature_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_number());
  }

  return total_size;
}
size_t StumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.StumpProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double split = 2;
    total_size += 1 + 8;

    // required double weight = 3;
    total_size += 1 + 8;

    // required int32 feature_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StumpProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StumpProto*>(&from));
}

void StumpProto::MergeFrom(const StumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.StumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      split_ = from.split_;
    }
    if (cached_has_bits & 0x00000002u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      feature_number_ = from.feature_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StumpProto::CopyFrom(const StumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.StumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StumpProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void StumpProto::Swap(StumpProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StumpProto::InternalSwap(StumpProto* other) {
  std::swap(split_, other->split_);
  std::swap(weight_, other->weight_);
  std::swap(feature_number_, other->feature_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StumpProto::GetTypeName() const {
  return "dom_distiller.StumpProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StumpProto

// required int32 feature_number = 1;
bool StumpProto::has_feature_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StumpProto::set_has_feature_number() {
  _has_bits_[0] |= 0x00000004u;
}
void StumpProto::clear_has_feature_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void StumpProto::clear_feature_number() {
  feature_number_ = 0;
  clear_has_feature_number();
}
::google::protobuf::int32 StumpProto::feature_number() const {
  // @@protoc_insertion_point(field_get:dom_distiller.StumpProto.feature_number)
  return feature_number_;
}
void StumpProto::set_feature_number(::google::protobuf::int32 value) {
  set_has_feature_number();
  feature_number_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.StumpProto.feature_number)
}

// required double split = 2;
bool StumpProto::has_split() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StumpProto::set_has_split() {
  _has_bits_[0] |= 0x00000001u;
}
void StumpProto::clear_has_split() {
  _has_bits_[0] &= ~0x00000001u;
}
void StumpProto::clear_split() {
  split_ = 0;
  clear_has_split();
}
double StumpProto::split() const {
  // @@protoc_insertion_point(field_get:dom_distiller.StumpProto.split)
  return split_;
}
void StumpProto::set_split(double value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.StumpProto.split)
}

// required double weight = 3;
bool StumpProto::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StumpProto::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void StumpProto::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void StumpProto::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
double StumpProto::weight() const {
  // @@protoc_insertion_point(field_get:dom_distiller.StumpProto.weight)
  return weight_;
}
void StumpProto::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.StumpProto.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)
