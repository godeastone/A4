// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pageload_metrics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pageload_metrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace data_reduction_proxy {
class PageloadDeviceInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PageloadDeviceInfo> {
} _PageloadDeviceInfo_default_instance_;
class RecordPageloadMetricsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecordPageloadMetricsRequest> {
} _RecordPageloadMetricsRequest_default_instance_;
class PageloadMetricsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PageloadMetrics> {
} _PageloadMetrics_default_instance_;

namespace protobuf_pageload_5fmetrics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _PageloadDeviceInfo_default_instance_.Shutdown();
  _RecordPageloadMetricsRequest_default_instance_.Shutdown();
  _PageloadMetrics_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::data_reduction_proxy::protobuf_client_5fconfig_2eproto::InitDefaults();
  _PageloadDeviceInfo_default_instance_.DefaultConstruct();
  _RecordPageloadMetricsRequest_default_instance_.DefaultConstruct();
  _PageloadMetrics_default_instance_.DefaultConstruct();
  _RecordPageloadMetricsRequest_default_instance_.get_mutable()->metrics_sent_time_ = const_cast< ::data_reduction_proxy::Timestamp*>(
      ::data_reduction_proxy::Timestamp::internal_default_instance());
  _RecordPageloadMetricsRequest_default_instance_.get_mutable()->device_info_ = const_cast< ::data_reduction_proxy::PageloadDeviceInfo*>(
      ::data_reduction_proxy::PageloadDeviceInfo::internal_default_instance());
  _PageloadMetrics_default_instance_.get_mutable()->first_request_time_ = const_cast< ::data_reduction_proxy::Timestamp*>(
      ::data_reduction_proxy::Timestamp::internal_default_instance());
  _PageloadMetrics_default_instance_.get_mutable()->time_to_first_contentful_paint_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
  _PageloadMetrics_default_instance_.get_mutable()->time_to_first_image_paint_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
  _PageloadMetrics_default_instance_.get_mutable()->time_to_first_byte_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
  _PageloadMetrics_default_instance_.get_mutable()->page_load_time_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
  _PageloadMetrics_default_instance_.get_mutable()->parse_blocked_on_script_load_duration_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
  _PageloadMetrics_default_instance_.get_mutable()->parse_stop_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
  _PageloadMetrics_default_instance_.get_mutable()->experimental_time_to_first_meaningful_paint_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
  _PageloadMetrics_default_instance_.get_mutable()->first_input_delay_ = const_cast< ::data_reduction_proxy::Duration*>(
      ::data_reduction_proxy::Duration::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::data_reduction_proxy::protobuf_client_5fconfig_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_pageload_5fmetrics_2eproto

bool PageloadMetrics_EffectiveConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_OFFLINE;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_SLOW_2G;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_2G;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_3G;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EFFECTIVE_CONNECTION_TYPE_4G;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EffectiveConnectionType_MIN;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics::EffectiveConnectionType_MAX;
const int PageloadMetrics::EffectiveConnectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PageloadMetrics_ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PageloadMetrics_ConnectionType PageloadMetrics::CONNECTION_UNKNOWN;
const PageloadMetrics_ConnectionType PageloadMetrics::CONNECTION_ETHERNET;
const PageloadMetrics_ConnectionType PageloadMetrics::CONNECTION_WIFI;
const PageloadMetrics_ConnectionType PageloadMetrics::CONNECTION_2G;
const PageloadMetrics_ConnectionType PageloadMetrics::CONNECTION_3G;
const PageloadMetrics_ConnectionType PageloadMetrics::CONNECTION_4G;
const PageloadMetrics_ConnectionType PageloadMetrics::CONNECTION_NONE;
const PageloadMetrics_ConnectionType PageloadMetrics::CONNECTION_BLUETOOTH;
const PageloadMetrics_ConnectionType PageloadMetrics::ConnectionType_MIN;
const PageloadMetrics_ConnectionType PageloadMetrics::ConnectionType_MAX;
const int PageloadMetrics::ConnectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PageloadMetrics_PreviewsOptOut_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PageloadMetrics_PreviewsOptOut PageloadMetrics::UNKNOWN;
const PageloadMetrics_PreviewsOptOut PageloadMetrics::OPT_OUT;
const PageloadMetrics_PreviewsOptOut PageloadMetrics::NON_OPT_OUT;
const PageloadMetrics_PreviewsOptOut PageloadMetrics::PreviewsOptOut_MIN;
const PageloadMetrics_PreviewsOptOut PageloadMetrics::PreviewsOptOut_MAX;
const int PageloadMetrics::PreviewsOptOut_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PageloadMetrics_PreviewsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PageloadMetrics_PreviewsType PageloadMetrics::NONE;
const PageloadMetrics_PreviewsType PageloadMetrics::LOFI;
const PageloadMetrics_PreviewsType PageloadMetrics::LITE_PAGE;
const PageloadMetrics_PreviewsType PageloadMetrics::PreviewsType_MIN;
const PageloadMetrics_PreviewsType PageloadMetrics::PreviewsType_MAX;
const int PageloadMetrics::PreviewsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PageloadMetrics_RendererCrashType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PageloadMetrics_RendererCrashType PageloadMetrics::UNSPECIFIED;
const PageloadMetrics_RendererCrashType PageloadMetrics::NO_CRASH;
const PageloadMetrics_RendererCrashType PageloadMetrics::NOT_ANALYZED;
const PageloadMetrics_RendererCrashType PageloadMetrics::OTHER_CRASH;
const PageloadMetrics_RendererCrashType PageloadMetrics::ANDROID_FOREGROUND_OOM;
const PageloadMetrics_RendererCrashType PageloadMetrics::RendererCrashType_MIN;
const PageloadMetrics_RendererCrashType PageloadMetrics::RendererCrashType_MAX;
const int PageloadMetrics::RendererCrashType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PageloadDeviceInfo::kTotalDeviceMemoryKbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PageloadDeviceInfo::PageloadDeviceInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pageload_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.PageloadDeviceInfo)
}
PageloadDeviceInfo::PageloadDeviceInfo(const PageloadDeviceInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_device_memory_kb_ = from.total_device_memory_kb_;
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.PageloadDeviceInfo)
}

void PageloadDeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  total_device_memory_kb_ = GOOGLE_LONGLONG(0);
}

PageloadDeviceInfo::~PageloadDeviceInfo() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.PageloadDeviceInfo)
  SharedDtor();
}

void PageloadDeviceInfo::SharedDtor() {
}

void PageloadDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PageloadDeviceInfo& PageloadDeviceInfo::default_instance() {
  protobuf_pageload_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

PageloadDeviceInfo* PageloadDeviceInfo::New(::google::protobuf::Arena* arena) const {
  PageloadDeviceInfo* n = new PageloadDeviceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PageloadDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.PageloadDeviceInfo)
  total_device_memory_kb_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PageloadDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.PageloadDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 total_device_memory_kb = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_total_device_memory_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_device_memory_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.PageloadDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.PageloadDeviceInfo)
  return false;
#undef DO_
}

void PageloadDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.PageloadDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 total_device_memory_kb = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->total_device_memory_kb(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.PageloadDeviceInfo)
}

size_t PageloadDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.PageloadDeviceInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional int64 total_device_memory_kb = 1;
  if (has_total_device_memory_kb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_device_memory_kb());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PageloadDeviceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PageloadDeviceInfo*>(&from));
}

void PageloadDeviceInfo::MergeFrom(const PageloadDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.PageloadDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_total_device_memory_kb()) {
    set_total_device_memory_kb(from.total_device_memory_kb());
  }
}

void PageloadDeviceInfo::CopyFrom(const PageloadDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.PageloadDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageloadDeviceInfo::IsInitialized() const {
  return true;
}

void PageloadDeviceInfo::Swap(PageloadDeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PageloadDeviceInfo::InternalSwap(PageloadDeviceInfo* other) {
  std::swap(total_device_memory_kb_, other->total_device_memory_kb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PageloadDeviceInfo::GetTypeName() const {
  return "data_reduction_proxy.PageloadDeviceInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PageloadDeviceInfo

// optional int64 total_device_memory_kb = 1;
bool PageloadDeviceInfo::has_total_device_memory_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PageloadDeviceInfo::set_has_total_device_memory_kb() {
  _has_bits_[0] |= 0x00000001u;
}
void PageloadDeviceInfo::clear_has_total_device_memory_kb() {
  _has_bits_[0] &= ~0x00000001u;
}
void PageloadDeviceInfo::clear_total_device_memory_kb() {
  total_device_memory_kb_ = GOOGLE_LONGLONG(0);
  clear_has_total_device_memory_kb();
}
::google::protobuf::int64 PageloadDeviceInfo::total_device_memory_kb() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadDeviceInfo.total_device_memory_kb)
  return total_device_memory_kb_;
}
void PageloadDeviceInfo::set_total_device_memory_kb(::google::protobuf::int64 value) {
  set_has_total_device_memory_kb();
  total_device_memory_kb_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadDeviceInfo.total_device_memory_kb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordPageloadMetricsRequest::kPageloadsFieldNumber;
const int RecordPageloadMetricsRequest::kMetricsSentTimeFieldNumber;
const int RecordPageloadMetricsRequest::kDeviceInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordPageloadMetricsRequest::RecordPageloadMetricsRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pageload_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.RecordPageloadMetricsRequest)
}
RecordPageloadMetricsRequest::RecordPageloadMetricsRequest(const RecordPageloadMetricsRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pageloads_(from.pageloads_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metrics_sent_time()) {
    metrics_sent_time_ = new ::data_reduction_proxy::Timestamp(*from.metrics_sent_time_);
  } else {
    metrics_sent_time_ = NULL;
  }
  if (from.has_device_info()) {
    device_info_ = new ::data_reduction_proxy::PageloadDeviceInfo(*from.device_info_);
  } else {
    device_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.RecordPageloadMetricsRequest)
}

void RecordPageloadMetricsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&metrics_sent_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_info_) -
      reinterpret_cast<char*>(&metrics_sent_time_)) + sizeof(device_info_));
}

RecordPageloadMetricsRequest::~RecordPageloadMetricsRequest() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.RecordPageloadMetricsRequest)
  SharedDtor();
}

void RecordPageloadMetricsRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete metrics_sent_time_;
  }
  if (this != internal_default_instance()) {
    delete device_info_;
  }
}

void RecordPageloadMetricsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RecordPageloadMetricsRequest& RecordPageloadMetricsRequest::default_instance() {
  protobuf_pageload_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordPageloadMetricsRequest* RecordPageloadMetricsRequest::New(::google::protobuf::Arena* arena) const {
  RecordPageloadMetricsRequest* n = new RecordPageloadMetricsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordPageloadMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  pageloads_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_metrics_sent_time()) {
      GOOGLE_DCHECK(metrics_sent_time_ != NULL);
      metrics_sent_time_->::data_reduction_proxy::Timestamp::Clear();
    }
    if (has_device_info()) {
      GOOGLE_DCHECK(device_info_ != NULL);
      device_info_->::data_reduction_proxy::PageloadDeviceInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecordPageloadMetricsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pageloads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics_sent_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.PageloadDeviceInfo device_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.RecordPageloadMetricsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.RecordPageloadMetricsRequest)
  return false;
#undef DO_
}

void RecordPageloadMetricsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pageloads_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->pageloads(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->metrics_sent_time_, output);
  }

  // optional .data_reduction_proxy.PageloadDeviceInfo device_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->device_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.RecordPageloadMetricsRequest)
}

size_t RecordPageloadMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pageloads_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pageloads(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
    if (has_metrics_sent_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metrics_sent_time_);
    }

    // optional .data_reduction_proxy.PageloadDeviceInfo device_info = 3;
    if (has_device_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordPageloadMetricsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecordPageloadMetricsRequest*>(&from));
}

void RecordPageloadMetricsRequest::MergeFrom(const RecordPageloadMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pageloads_.MergeFrom(from.pageloads_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_metrics_sent_time()->::data_reduction_proxy::Timestamp::MergeFrom(from.metrics_sent_time());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_device_info()->::data_reduction_proxy::PageloadDeviceInfo::MergeFrom(from.device_info());
    }
  }
}

void RecordPageloadMetricsRequest::CopyFrom(const RecordPageloadMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.RecordPageloadMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordPageloadMetricsRequest::IsInitialized() const {
  return true;
}

void RecordPageloadMetricsRequest::Swap(RecordPageloadMetricsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordPageloadMetricsRequest::InternalSwap(RecordPageloadMetricsRequest* other) {
  pageloads_.InternalSwap(&other->pageloads_);
  std::swap(metrics_sent_time_, other->metrics_sent_time_);
  std::swap(device_info_, other->device_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RecordPageloadMetricsRequest::GetTypeName() const {
  return "data_reduction_proxy.RecordPageloadMetricsRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordPageloadMetricsRequest

// repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
int RecordPageloadMetricsRequest::pageloads_size() const {
  return pageloads_.size();
}
void RecordPageloadMetricsRequest::clear_pageloads() {
  pageloads_.Clear();
}
const ::data_reduction_proxy::PageloadMetrics& RecordPageloadMetricsRequest::pageloads(int index) const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Get(index);
}
::data_reduction_proxy::PageloadMetrics* RecordPageloadMetricsRequest::mutable_pageloads(int index) {
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Mutable(index);
}
::data_reduction_proxy::PageloadMetrics* RecordPageloadMetricsRequest::add_pageloads() {
  // @@protoc_insertion_point(field_add:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Add();
}
::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >*
RecordPageloadMetricsRequest::mutable_pageloads() {
  // @@protoc_insertion_point(field_mutable_list:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return &pageloads_;
}
const ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >&
RecordPageloadMetricsRequest::pageloads() const {
  // @@protoc_insertion_point(field_list:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_;
}

// optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
bool RecordPageloadMetricsRequest::has_metrics_sent_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecordPageloadMetricsRequest::set_has_metrics_sent_time() {
  _has_bits_[0] |= 0x00000001u;
}
void RecordPageloadMetricsRequest::clear_has_metrics_sent_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecordPageloadMetricsRequest::clear_metrics_sent_time() {
  if (metrics_sent_time_ != NULL) metrics_sent_time_->::data_reduction_proxy::Timestamp::Clear();
  clear_has_metrics_sent_time();
}
const ::data_reduction_proxy::Timestamp& RecordPageloadMetricsRequest::metrics_sent_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
  return metrics_sent_time_ != NULL ? *metrics_sent_time_
                         : *::data_reduction_proxy::Timestamp::internal_default_instance();
}
::data_reduction_proxy::Timestamp* RecordPageloadMetricsRequest::mutable_metrics_sent_time() {
  set_has_metrics_sent_time();
  if (metrics_sent_time_ == NULL) {
    metrics_sent_time_ = new ::data_reduction_proxy::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
  return metrics_sent_time_;
}
::data_reduction_proxy::Timestamp* RecordPageloadMetricsRequest::release_metrics_sent_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
  clear_has_metrics_sent_time();
  ::data_reduction_proxy::Timestamp* temp = metrics_sent_time_;
  metrics_sent_time_ = NULL;
  return temp;
}
void RecordPageloadMetricsRequest::set_allocated_metrics_sent_time(::data_reduction_proxy::Timestamp* metrics_sent_time) {
  delete metrics_sent_time_;
  metrics_sent_time_ = metrics_sent_time;
  if (metrics_sent_time) {
    set_has_metrics_sent_time();
  } else {
    clear_has_metrics_sent_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
}

// optional .data_reduction_proxy.PageloadDeviceInfo device_info = 3;
bool RecordPageloadMetricsRequest::has_device_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecordPageloadMetricsRequest::set_has_device_info() {
  _has_bits_[0] |= 0x00000002u;
}
void RecordPageloadMetricsRequest::clear_has_device_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecordPageloadMetricsRequest::clear_device_info() {
  if (device_info_ != NULL) device_info_->::data_reduction_proxy::PageloadDeviceInfo::Clear();
  clear_has_device_info();
}
const ::data_reduction_proxy::PageloadDeviceInfo& RecordPageloadMetricsRequest::device_info() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.RecordPageloadMetricsRequest.device_info)
  return device_info_ != NULL ? *device_info_
                         : *::data_reduction_proxy::PageloadDeviceInfo::internal_default_instance();
}
::data_reduction_proxy::PageloadDeviceInfo* RecordPageloadMetricsRequest::mutable_device_info() {
  set_has_device_info();
  if (device_info_ == NULL) {
    device_info_ = new ::data_reduction_proxy::PageloadDeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.RecordPageloadMetricsRequest.device_info)
  return device_info_;
}
::data_reduction_proxy::PageloadDeviceInfo* RecordPageloadMetricsRequest::release_device_info() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.RecordPageloadMetricsRequest.device_info)
  clear_has_device_info();
  ::data_reduction_proxy::PageloadDeviceInfo* temp = device_info_;
  device_info_ = NULL;
  return temp;
}
void RecordPageloadMetricsRequest::set_allocated_device_info(::data_reduction_proxy::PageloadDeviceInfo* device_info) {
  delete device_info_;
  device_info_ = device_info;
  if (device_info) {
    set_has_device_info();
  } else {
    clear_has_device_info();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.RecordPageloadMetricsRequest.device_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PageloadMetrics::kSessionKeyFieldNumber;
const int PageloadMetrics::kFirstRequestTimeFieldNumber;
const int PageloadMetrics::kFirstRequestUrlFieldNumber;
const int PageloadMetrics::kLastRequestUrlFieldNumber;
const int PageloadMetrics::kTimeToFirstContentfulPaintFieldNumber;
const int PageloadMetrics::kTimeToFirstImagePaintFieldNumber;
const int PageloadMetrics::kTimeToFirstByteFieldNumber;
const int PageloadMetrics::kPageLoadTimeFieldNumber;
const int PageloadMetrics::kOriginalPageSizeBytesFieldNumber;
const int PageloadMetrics::kCompressedPageSizeBytesFieldNumber;
const int PageloadMetrics::kEffectiveConnectionTypeFieldNumber;
const int PageloadMetrics::kParseBlockedOnScriptLoadDurationFieldNumber;
const int PageloadMetrics::kParseStopFieldNumber;
const int PageloadMetrics::kExperimentalTimeToFirstMeaningfulPaintFieldNumber;
const int PageloadMetrics::kPageIdFieldNumber;
const int PageloadMetrics::kPreviewsOptOutFieldNumber;
const int PageloadMetrics::kPreviewsTypeFieldNumber;
const int PageloadMetrics::kHoldbackGroupFieldNumber;
const int PageloadMetrics::kRendererMemoryUsageKbFieldNumber;
const int PageloadMetrics::kRendererCrashTypeFieldNumber;
const int PageloadMetrics::kCachedFractionFieldNumber;
const int PageloadMetrics::kConnectionTypeFieldNumber;
const int PageloadMetrics::kTotalPageSizeBytesFieldNumber;
const int PageloadMetrics::kFirstInputDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PageloadMetrics::PageloadMetrics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pageload_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.PageloadMetrics)
}
PageloadMetrics::PageloadMetrics(const PageloadMetrics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_key()) {
    session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  first_request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_first_request_url()) {
    first_request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_request_url_);
  }
  last_request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_request_url()) {
    last_request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_request_url_);
  }
  holdback_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_holdback_group()) {
    holdback_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.holdback_group_);
  }
  if (from.has_first_request_time()) {
    first_request_time_ = new ::data_reduction_proxy::Timestamp(*from.first_request_time_);
  } else {
    first_request_time_ = NULL;
  }
  if (from.has_time_to_first_contentful_paint()) {
    time_to_first_contentful_paint_ = new ::data_reduction_proxy::Duration(*from.time_to_first_contentful_paint_);
  } else {
    time_to_first_contentful_paint_ = NULL;
  }
  if (from.has_time_to_first_image_paint()) {
    time_to_first_image_paint_ = new ::data_reduction_proxy::Duration(*from.time_to_first_image_paint_);
  } else {
    time_to_first_image_paint_ = NULL;
  }
  if (from.has_time_to_first_byte()) {
    time_to_first_byte_ = new ::data_reduction_proxy::Duration(*from.time_to_first_byte_);
  } else {
    time_to_first_byte_ = NULL;
  }
  if (from.has_page_load_time()) {
    page_load_time_ = new ::data_reduction_proxy::Duration(*from.page_load_time_);
  } else {
    page_load_time_ = NULL;
  }
  if (from.has_parse_blocked_on_script_load_duration()) {
    parse_blocked_on_script_load_duration_ = new ::data_reduction_proxy::Duration(*from.parse_blocked_on_script_load_duration_);
  } else {
    parse_blocked_on_script_load_duration_ = NULL;
  }
  if (from.has_parse_stop()) {
    parse_stop_ = new ::data_reduction_proxy::Duration(*from.parse_stop_);
  } else {
    parse_stop_ = NULL;
  }
  if (from.has_experimental_time_to_first_meaningful_paint()) {
    experimental_time_to_first_meaningful_paint_ = new ::data_reduction_proxy::Duration(*from.experimental_time_to_first_meaningful_paint_);
  } else {
    experimental_time_to_first_meaningful_paint_ = NULL;
  }
  if (from.has_first_input_delay()) {
    first_input_delay_ = new ::data_reduction_proxy::Duration(*from.first_input_delay_);
  } else {
    first_input_delay_ = NULL;
  }
  ::memcpy(&original_page_size_bytes_, &from.original_page_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_page_size_bytes_) -
    reinterpret_cast<char*>(&original_page_size_bytes_)) + sizeof(total_page_size_bytes_));
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.PageloadMetrics)
}

void PageloadMetrics::SharedCtor() {
  _cached_size_ = 0;
  session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  holdback_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_request_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_page_size_bytes_) -
      reinterpret_cast<char*>(&first_request_time_)) + sizeof(total_page_size_bytes_));
}

PageloadMetrics::~PageloadMetrics() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.PageloadMetrics)
  SharedDtor();
}

void PageloadMetrics::SharedDtor() {
  session_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_request_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_request_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  holdback_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete first_request_time_;
  }
  if (this != internal_default_instance()) {
    delete time_to_first_contentful_paint_;
  }
  if (this != internal_default_instance()) {
    delete time_to_first_image_paint_;
  }
  if (this != internal_default_instance()) {
    delete time_to_first_byte_;
  }
  if (this != internal_default_instance()) {
    delete page_load_time_;
  }
  if (this != internal_default_instance()) {
    delete parse_blocked_on_script_load_duration_;
  }
  if (this != internal_default_instance()) {
    delete parse_stop_;
  }
  if (this != internal_default_instance()) {
    delete experimental_time_to_first_meaningful_paint_;
  }
  if (this != internal_default_instance()) {
    delete first_input_delay_;
  }
}

void PageloadMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PageloadMetrics& PageloadMetrics::default_instance() {
  protobuf_pageload_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

PageloadMetrics* PageloadMetrics::New(::google::protobuf::Arena* arena) const {
  PageloadMetrics* n = new PageloadMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PageloadMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.PageloadMetrics)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_session_key()) {
      GOOGLE_DCHECK(!session_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*session_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_first_request_url()) {
      GOOGLE_DCHECK(!first_request_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*first_request_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_last_request_url()) {
      GOOGLE_DCHECK(!last_request_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*last_request_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_holdback_group()) {
      GOOGLE_DCHECK(!holdback_group_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*holdback_group_.UnsafeRawStringPointer())->clear();
    }
    if (has_first_request_time()) {
      GOOGLE_DCHECK(first_request_time_ != NULL);
      first_request_time_->::data_reduction_proxy::Timestamp::Clear();
    }
    if (has_time_to_first_contentful_paint()) {
      GOOGLE_DCHECK(time_to_first_contentful_paint_ != NULL);
      time_to_first_contentful_paint_->::data_reduction_proxy::Duration::Clear();
    }
    if (has_time_to_first_image_paint()) {
      GOOGLE_DCHECK(time_to_first_image_paint_ != NULL);
      time_to_first_image_paint_->::data_reduction_proxy::Duration::Clear();
    }
    if (has_time_to_first_byte()) {
      GOOGLE_DCHECK(time_to_first_byte_ != NULL);
      time_to_first_byte_->::data_reduction_proxy::Duration::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    if (has_page_load_time()) {
      GOOGLE_DCHECK(page_load_time_ != NULL);
      page_load_time_->::data_reduction_proxy::Duration::Clear();
    }
    if (has_parse_blocked_on_script_load_duration()) {
      GOOGLE_DCHECK(parse_blocked_on_script_load_duration_ != NULL);
      parse_blocked_on_script_load_duration_->::data_reduction_proxy::Duration::Clear();
    }
    if (has_parse_stop()) {
      GOOGLE_DCHECK(parse_stop_ != NULL);
      parse_stop_->::data_reduction_proxy::Duration::Clear();
    }
    if (has_experimental_time_to_first_meaningful_paint()) {
      GOOGLE_DCHECK(experimental_time_to_first_meaningful_paint_ != NULL);
      experimental_time_to_first_meaningful_paint_->::data_reduction_proxy::Duration::Clear();
    }
    if (has_first_input_delay()) {
      GOOGLE_DCHECK(first_input_delay_ != NULL);
      first_input_delay_->::data_reduction_proxy::Duration::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 57344u) {
    ::memset(&original_page_size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effective_connection_type_) -
        reinterpret_cast<char*>(&original_page_size_bytes_)) + sizeof(effective_connection_type_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&previews_opt_out_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_page_size_bytes_) -
        reinterpret_cast<char*>(&previews_opt_out_)) + sizeof(total_page_size_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PageloadMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.PageloadMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.Timestamp first_request_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_request_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string first_request_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_request_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_request_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_request_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_to_first_contentful_paint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_to_first_image_paint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.Duration time_to_first_byte = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_to_first_byte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.Duration page_load_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page_load_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 original_page_size_bytes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_original_page_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &original_page_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 compressed_page_size_bytes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_compressed_page_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compressed_page_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType_IsValid(value)) {
            set_effective_connection_type(static_cast< ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.Duration parse_blocked_on_script_load_duration = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parse_blocked_on_script_load_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.Duration parse_stop = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parse_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.Duration experimental_time_to_first_meaningful_paint = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experimental_time_to_first_meaningful_paint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 page_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_page_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &page_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.PageloadMetrics.PreviewsOptOut previews_opt_out = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data_reduction_proxy::PageloadMetrics_PreviewsOptOut_IsValid(value)) {
            set_previews_opt_out(static_cast< ::data_reduction_proxy::PageloadMetrics_PreviewsOptOut >(value));
          } else {
            unknown_fields_stream.WriteVarint32(136u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.PageloadMetrics.PreviewsType previews_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data_reduction_proxy::PageloadMetrics_PreviewsType_IsValid(value)) {
            set_previews_type(static_cast< ::data_reduction_proxy::PageloadMetrics_PreviewsType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(144u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string holdback_group = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_holdback_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 renderer_memory_usage_kb = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_renderer_memory_usage_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &renderer_memory_usage_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.PageloadMetrics.RendererCrashType renderer_crash_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data_reduction_proxy::PageloadMetrics_RendererCrashType_IsValid(value)) {
            set_renderer_crash_type(static_cast< ::data_reduction_proxy::PageloadMetrics_RendererCrashType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(168u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cached_fraction = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_cached_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cached_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.PageloadMetrics.ConnectionType connection_type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data_reduction_proxy::PageloadMetrics_ConnectionType_IsValid(value)) {
            set_connection_type(static_cast< ::data_reduction_proxy::PageloadMetrics_ConnectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(184u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_page_size_bytes = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_total_page_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_page_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.Duration first_input_delay = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_input_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.PageloadMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.PageloadMetrics)
  return false;
#undef DO_
}

void PageloadMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.PageloadMetrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_key(), output);
  }

  // optional .data_reduction_proxy.Timestamp first_request_time = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->first_request_time_, output);
  }

  // optional string first_request_url = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->first_request_url(), output);
  }

  // optional string last_request_url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->last_request_url(), output);
  }

  // optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->time_to_first_contentful_paint_, output);
  }

  // optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->time_to_first_image_paint_, output);
  }

  // optional .data_reduction_proxy.Duration time_to_first_byte = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->time_to_first_byte_, output);
  }

  // optional .data_reduction_proxy.Duration page_load_time = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->page_load_time_, output);
  }

  // optional int64 original_page_size_bytes = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->original_page_size_bytes(), output);
  }

  // optional int64 compressed_page_size_bytes = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->compressed_page_size_bytes(), output);
  }

  // optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->effective_connection_type(), output);
  }

  // optional .data_reduction_proxy.Duration parse_blocked_on_script_load_duration = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->parse_blocked_on_script_load_duration_, output);
  }

  // optional .data_reduction_proxy.Duration parse_stop = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->parse_stop_, output);
  }

  // optional .data_reduction_proxy.Duration experimental_time_to_first_meaningful_paint = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->experimental_time_to_first_meaningful_paint_, output);
  }

  // optional uint64 page_id = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->page_id(), output);
  }

  // optional .data_reduction_proxy.PageloadMetrics.PreviewsOptOut previews_opt_out = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->previews_opt_out(), output);
  }

  // optional .data_reduction_proxy.PageloadMetrics.PreviewsType previews_type = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->previews_type(), output);
  }

  // optional string holdback_group = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->holdback_group(), output);
  }

  // optional int64 renderer_memory_usage_kb = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->renderer_memory_usage_kb(), output);
  }

  // optional .data_reduction_proxy.PageloadMetrics.RendererCrashType renderer_crash_type = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->renderer_crash_type(), output);
  }

  // optional float cached_fraction = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->cached_fraction(), output);
  }

  // optional .data_reduction_proxy.PageloadMetrics.ConnectionType connection_type = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->connection_type(), output);
  }

  // optional int64 total_page_size_bytes = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->total_page_size_bytes(), output);
  }

  // optional .data_reduction_proxy.Duration first_input_delay = 25;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, *this->first_input_delay_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.PageloadMetrics)
}

size_t PageloadMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.PageloadMetrics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string session_key = 1;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

    // optional string first_request_url = 4;
    if (has_first_request_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_request_url());
    }

    // optional string last_request_url = 5;
    if (has_last_request_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_request_url());
    }

    // optional string holdback_group = 19;
    if (has_holdback_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->holdback_group());
    }

    // optional .data_reduction_proxy.Timestamp first_request_time = 2;
    if (has_first_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->first_request_time_);
    }

    // optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
    if (has_time_to_first_contentful_paint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_to_first_contentful_paint_);
    }

    // optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
    if (has_time_to_first_image_paint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_to_first_image_paint_);
    }

    // optional .data_reduction_proxy.Duration time_to_first_byte = 8;
    if (has_time_to_first_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_to_first_byte_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .data_reduction_proxy.Duration page_load_time = 9;
    if (has_page_load_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->page_load_time_);
    }

    // optional .data_reduction_proxy.Duration parse_blocked_on_script_load_duration = 13;
    if (has_parse_blocked_on_script_load_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parse_blocked_on_script_load_duration_);
    }

    // optional .data_reduction_proxy.Duration parse_stop = 14;
    if (has_parse_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parse_stop_);
    }

    // optional .data_reduction_proxy.Duration experimental_time_to_first_meaningful_paint = 15;
    if (has_experimental_time_to_first_meaningful_paint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->experimental_time_to_first_meaningful_paint_);
    }

    // optional .data_reduction_proxy.Duration first_input_delay = 25;
    if (has_first_input_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->first_input_delay_);
    }

    // optional int64 original_page_size_bytes = 10;
    if (has_original_page_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->original_page_size_bytes());
    }

    // optional int64 compressed_page_size_bytes = 11;
    if (has_compressed_page_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->compressed_page_size_bytes());
    }

    // optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
    if (has_effective_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effective_connection_type());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .data_reduction_proxy.PageloadMetrics.PreviewsOptOut previews_opt_out = 17;
    if (has_previews_opt_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->previews_opt_out());
    }

    // optional uint64 page_id = 16;
    if (has_page_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->page_id());
    }

    // optional .data_reduction_proxy.PageloadMetrics.PreviewsType previews_type = 18;
    if (has_previews_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->previews_type());
    }

    // optional .data_reduction_proxy.PageloadMetrics.RendererCrashType renderer_crash_type = 21;
    if (has_renderer_crash_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->renderer_crash_type());
    }

    // optional int64 renderer_memory_usage_kb = 20;
    if (has_renderer_memory_usage_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->renderer_memory_usage_kb());
    }

    // optional float cached_fraction = 22;
    if (has_cached_fraction()) {
      total_size += 2 + 4;
    }

    // optional .data_reduction_proxy.PageloadMetrics.ConnectionType connection_type = 23;
    if (has_connection_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_type());
    }

    // optional int64 total_page_size_bytes = 24;
    if (has_total_page_size_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_page_size_bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PageloadMetrics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PageloadMetrics*>(&from));
}

void PageloadMetrics::MergeFrom(const PageloadMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.PageloadMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_session_key();
      session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_first_request_url();
      first_request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_request_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_last_request_url();
      last_request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_request_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_holdback_group();
      holdback_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.holdback_group_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_first_request_time()->::data_reduction_proxy::Timestamp::MergeFrom(from.first_request_time());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_time_to_first_contentful_paint()->::data_reduction_proxy::Duration::MergeFrom(from.time_to_first_contentful_paint());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_time_to_first_image_paint()->::data_reduction_proxy::Duration::MergeFrom(from.time_to_first_image_paint());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_time_to_first_byte()->::data_reduction_proxy::Duration::MergeFrom(from.time_to_first_byte());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_page_load_time()->::data_reduction_proxy::Duration::MergeFrom(from.page_load_time());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_parse_blocked_on_script_load_duration()->::data_reduction_proxy::Duration::MergeFrom(from.parse_blocked_on_script_load_duration());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_parse_stop()->::data_reduction_proxy::Duration::MergeFrom(from.parse_stop());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_experimental_time_to_first_meaningful_paint()->::data_reduction_proxy::Duration::MergeFrom(from.experimental_time_to_first_meaningful_paint());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_first_input_delay()->::data_reduction_proxy::Duration::MergeFrom(from.first_input_delay());
    }
    if (cached_has_bits & 0x00002000u) {
      original_page_size_bytes_ = from.original_page_size_bytes_;
    }
    if (cached_has_bits & 0x00004000u) {
      compressed_page_size_bytes_ = from.compressed_page_size_bytes_;
    }
    if (cached_has_bits & 0x00008000u) {
      effective_connection_type_ = from.effective_connection_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      previews_opt_out_ = from.previews_opt_out_;
    }
    if (cached_has_bits & 0x00020000u) {
      page_id_ = from.page_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      previews_type_ = from.previews_type_;
    }
    if (cached_has_bits & 0x00080000u) {
      renderer_crash_type_ = from.renderer_crash_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      renderer_memory_usage_kb_ = from.renderer_memory_usage_kb_;
    }
    if (cached_has_bits & 0x00200000u) {
      cached_fraction_ = from.cached_fraction_;
    }
    if (cached_has_bits & 0x00400000u) {
      connection_type_ = from.connection_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      total_page_size_bytes_ = from.total_page_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PageloadMetrics::CopyFrom(const PageloadMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.PageloadMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageloadMetrics::IsInitialized() const {
  return true;
}

void PageloadMetrics::Swap(PageloadMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PageloadMetrics::InternalSwap(PageloadMetrics* other) {
  session_key_.Swap(&other->session_key_);
  first_request_url_.Swap(&other->first_request_url_);
  last_request_url_.Swap(&other->last_request_url_);
  holdback_group_.Swap(&other->holdback_group_);
  std::swap(first_request_time_, other->first_request_time_);
  std::swap(time_to_first_contentful_paint_, other->time_to_first_contentful_paint_);
  std::swap(time_to_first_image_paint_, other->time_to_first_image_paint_);
  std::swap(time_to_first_byte_, other->time_to_first_byte_);
  std::swap(page_load_time_, other->page_load_time_);
  std::swap(parse_blocked_on_script_load_duration_, other->parse_blocked_on_script_load_duration_);
  std::swap(parse_stop_, other->parse_stop_);
  std::swap(experimental_time_to_first_meaningful_paint_, other->experimental_time_to_first_meaningful_paint_);
  std::swap(first_input_delay_, other->first_input_delay_);
  std::swap(original_page_size_bytes_, other->original_page_size_bytes_);
  std::swap(compressed_page_size_bytes_, other->compressed_page_size_bytes_);
  std::swap(effective_connection_type_, other->effective_connection_type_);
  std::swap(previews_opt_out_, other->previews_opt_out_);
  std::swap(page_id_, other->page_id_);
  std::swap(previews_type_, other->previews_type_);
  std::swap(renderer_crash_type_, other->renderer_crash_type_);
  std::swap(renderer_memory_usage_kb_, other->renderer_memory_usage_kb_);
  std::swap(cached_fraction_, other->cached_fraction_);
  std::swap(connection_type_, other->connection_type_);
  std::swap(total_page_size_bytes_, other->total_page_size_bytes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PageloadMetrics::GetTypeName() const {
  return "data_reduction_proxy.PageloadMetrics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PageloadMetrics

// optional string session_key = 1;
bool PageloadMetrics::has_session_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PageloadMetrics::set_has_session_key() {
  _has_bits_[0] |= 0x00000001u;
}
void PageloadMetrics::clear_has_session_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void PageloadMetrics::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_key();
}
const ::std::string& PageloadMetrics::session_key() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.session_key)
  return session_key_.GetNoArena();
}
void PageloadMetrics::set_session_key(const ::std::string& value) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.session_key)
}
#if LANG_CXX11
void PageloadMetrics::set_session_key(::std::string&& value) {
  set_has_session_key();
  session_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.PageloadMetrics.session_key)
}
#endif
void PageloadMetrics::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.session_key)
}
void PageloadMetrics::set_session_key(const char* value, size_t size) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.session_key)
}
::std::string* PageloadMetrics::mutable_session_key() {
  set_has_session_key();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.session_key)
  return session_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PageloadMetrics::release_session_key() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.session_key)
  clear_has_session_key();
  return session_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PageloadMetrics::set_allocated_session_key(::std::string* session_key) {
  if (session_key != NULL) {
    set_has_session_key();
  } else {
    clear_has_session_key();
  }
  session_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.session_key)
}

// optional .data_reduction_proxy.Timestamp first_request_time = 2;
bool PageloadMetrics::has_first_request_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PageloadMetrics::set_has_first_request_time() {
  _has_bits_[0] |= 0x00000010u;
}
void PageloadMetrics::clear_has_first_request_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void PageloadMetrics::clear_first_request_time() {
  if (first_request_time_ != NULL) first_request_time_->::data_reduction_proxy::Timestamp::Clear();
  clear_has_first_request_time();
}
const ::data_reduction_proxy::Timestamp& PageloadMetrics::first_request_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.first_request_time)
  return first_request_time_ != NULL ? *first_request_time_
                         : *::data_reduction_proxy::Timestamp::internal_default_instance();
}
::data_reduction_proxy::Timestamp* PageloadMetrics::mutable_first_request_time() {
  set_has_first_request_time();
  if (first_request_time_ == NULL) {
    first_request_time_ = new ::data_reduction_proxy::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.first_request_time)
  return first_request_time_;
}
::data_reduction_proxy::Timestamp* PageloadMetrics::release_first_request_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.first_request_time)
  clear_has_first_request_time();
  ::data_reduction_proxy::Timestamp* temp = first_request_time_;
  first_request_time_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_first_request_time(::data_reduction_proxy::Timestamp* first_request_time) {
  delete first_request_time_;
  first_request_time_ = first_request_time;
  if (first_request_time) {
    set_has_first_request_time();
  } else {
    clear_has_first_request_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.first_request_time)
}

// optional string first_request_url = 4;
bool PageloadMetrics::has_first_request_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PageloadMetrics::set_has_first_request_url() {
  _has_bits_[0] |= 0x00000002u;
}
void PageloadMetrics::clear_has_first_request_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void PageloadMetrics::clear_first_request_url() {
  first_request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_request_url();
}
const ::std::string& PageloadMetrics::first_request_url() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.first_request_url)
  return first_request_url_.GetNoArena();
}
void PageloadMetrics::set_first_request_url(const ::std::string& value) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.first_request_url)
}
#if LANG_CXX11
void PageloadMetrics::set_first_request_url(::std::string&& value) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.PageloadMetrics.first_request_url)
}
#endif
void PageloadMetrics::set_first_request_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.first_request_url)
}
void PageloadMetrics::set_first_request_url(const char* value, size_t size) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.first_request_url)
}
::std::string* PageloadMetrics::mutable_first_request_url() {
  set_has_first_request_url();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.first_request_url)
  return first_request_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PageloadMetrics::release_first_request_url() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.first_request_url)
  clear_has_first_request_url();
  return first_request_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PageloadMetrics::set_allocated_first_request_url(::std::string* first_request_url) {
  if (first_request_url != NULL) {
    set_has_first_request_url();
  } else {
    clear_has_first_request_url();
  }
  first_request_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_request_url);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.first_request_url)
}

// optional string last_request_url = 5;
bool PageloadMetrics::has_last_request_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PageloadMetrics::set_has_last_request_url() {
  _has_bits_[0] |= 0x00000004u;
}
void PageloadMetrics::clear_has_last_request_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void PageloadMetrics::clear_last_request_url() {
  last_request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_request_url();
}
const ::std::string& PageloadMetrics::last_request_url() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.last_request_url)
  return last_request_url_.GetNoArena();
}
void PageloadMetrics::set_last_request_url(const ::std::string& value) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.last_request_url)
}
#if LANG_CXX11
void PageloadMetrics::set_last_request_url(::std::string&& value) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.PageloadMetrics.last_request_url)
}
#endif
void PageloadMetrics::set_last_request_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.last_request_url)
}
void PageloadMetrics::set_last_request_url(const char* value, size_t size) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.last_request_url)
}
::std::string* PageloadMetrics::mutable_last_request_url() {
  set_has_last_request_url();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.last_request_url)
  return last_request_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PageloadMetrics::release_last_request_url() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.last_request_url)
  clear_has_last_request_url();
  return last_request_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PageloadMetrics::set_allocated_last_request_url(::std::string* last_request_url) {
  if (last_request_url != NULL) {
    set_has_last_request_url();
  } else {
    clear_has_last_request_url();
  }
  last_request_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_request_url);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.last_request_url)
}

// optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
bool PageloadMetrics::has_time_to_first_contentful_paint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PageloadMetrics::set_has_time_to_first_contentful_paint() {
  _has_bits_[0] |= 0x00000020u;
}
void PageloadMetrics::clear_has_time_to_first_contentful_paint() {
  _has_bits_[0] &= ~0x00000020u;
}
void PageloadMetrics::clear_time_to_first_contentful_paint() {
  if (time_to_first_contentful_paint_ != NULL) time_to_first_contentful_paint_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_contentful_paint();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_contentful_paint() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
  return time_to_first_contentful_paint_ != NULL ? *time_to_first_contentful_paint_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_contentful_paint() {
  set_has_time_to_first_contentful_paint();
  if (time_to_first_contentful_paint_ == NULL) {
    time_to_first_contentful_paint_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
  return time_to_first_contentful_paint_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_contentful_paint() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
  clear_has_time_to_first_contentful_paint();
  ::data_reduction_proxy::Duration* temp = time_to_first_contentful_paint_;
  time_to_first_contentful_paint_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_time_to_first_contentful_paint(::data_reduction_proxy::Duration* time_to_first_contentful_paint) {
  delete time_to_first_contentful_paint_;
  time_to_first_contentful_paint_ = time_to_first_contentful_paint;
  if (time_to_first_contentful_paint) {
    set_has_time_to_first_contentful_paint();
  } else {
    clear_has_time_to_first_contentful_paint();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
}

// optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
bool PageloadMetrics::has_time_to_first_image_paint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PageloadMetrics::set_has_time_to_first_image_paint() {
  _has_bits_[0] |= 0x00000040u;
}
void PageloadMetrics::clear_has_time_to_first_image_paint() {
  _has_bits_[0] &= ~0x00000040u;
}
void PageloadMetrics::clear_time_to_first_image_paint() {
  if (time_to_first_image_paint_ != NULL) time_to_first_image_paint_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_image_paint();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_image_paint() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
  return time_to_first_image_paint_ != NULL ? *time_to_first_image_paint_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_image_paint() {
  set_has_time_to_first_image_paint();
  if (time_to_first_image_paint_ == NULL) {
    time_to_first_image_paint_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
  return time_to_first_image_paint_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_image_paint() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
  clear_has_time_to_first_image_paint();
  ::data_reduction_proxy::Duration* temp = time_to_first_image_paint_;
  time_to_first_image_paint_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_time_to_first_image_paint(::data_reduction_proxy::Duration* time_to_first_image_paint) {
  delete time_to_first_image_paint_;
  time_to_first_image_paint_ = time_to_first_image_paint;
  if (time_to_first_image_paint) {
    set_has_time_to_first_image_paint();
  } else {
    clear_has_time_to_first_image_paint();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
}

// optional .data_reduction_proxy.Duration time_to_first_byte = 8;
bool PageloadMetrics::has_time_to_first_byte() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PageloadMetrics::set_has_time_to_first_byte() {
  _has_bits_[0] |= 0x00000080u;
}
void PageloadMetrics::clear_has_time_to_first_byte() {
  _has_bits_[0] &= ~0x00000080u;
}
void PageloadMetrics::clear_time_to_first_byte() {
  if (time_to_first_byte_ != NULL) time_to_first_byte_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_byte();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_byte() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
  return time_to_first_byte_ != NULL ? *time_to_first_byte_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_byte() {
  set_has_time_to_first_byte();
  if (time_to_first_byte_ == NULL) {
    time_to_first_byte_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
  return time_to_first_byte_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_byte() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
  clear_has_time_to_first_byte();
  ::data_reduction_proxy::Duration* temp = time_to_first_byte_;
  time_to_first_byte_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_time_to_first_byte(::data_reduction_proxy::Duration* time_to_first_byte) {
  delete time_to_first_byte_;
  time_to_first_byte_ = time_to_first_byte;
  if (time_to_first_byte) {
    set_has_time_to_first_byte();
  } else {
    clear_has_time_to_first_byte();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
}

// optional .data_reduction_proxy.Duration page_load_time = 9;
bool PageloadMetrics::has_page_load_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PageloadMetrics::set_has_page_load_time() {
  _has_bits_[0] |= 0x00000100u;
}
void PageloadMetrics::clear_has_page_load_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void PageloadMetrics::clear_page_load_time() {
  if (page_load_time_ != NULL) page_load_time_->::data_reduction_proxy::Duration::Clear();
  clear_has_page_load_time();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::page_load_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.page_load_time)
  return page_load_time_ != NULL ? *page_load_time_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_page_load_time() {
  set_has_page_load_time();
  if (page_load_time_ == NULL) {
    page_load_time_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.page_load_time)
  return page_load_time_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_page_load_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.page_load_time)
  clear_has_page_load_time();
  ::data_reduction_proxy::Duration* temp = page_load_time_;
  page_load_time_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_page_load_time(::data_reduction_proxy::Duration* page_load_time) {
  delete page_load_time_;
  page_load_time_ = page_load_time;
  if (page_load_time) {
    set_has_page_load_time();
  } else {
    clear_has_page_load_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.page_load_time)
}

// optional int64 original_page_size_bytes = 10;
bool PageloadMetrics::has_original_page_size_bytes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PageloadMetrics::set_has_original_page_size_bytes() {
  _has_bits_[0] |= 0x00002000u;
}
void PageloadMetrics::clear_has_original_page_size_bytes() {
  _has_bits_[0] &= ~0x00002000u;
}
void PageloadMetrics::clear_original_page_size_bytes() {
  original_page_size_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_original_page_size_bytes();
}
::google::protobuf::int64 PageloadMetrics::original_page_size_bytes() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.original_page_size_bytes)
  return original_page_size_bytes_;
}
void PageloadMetrics::set_original_page_size_bytes(::google::protobuf::int64 value) {
  set_has_original_page_size_bytes();
  original_page_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.original_page_size_bytes)
}

// optional int64 compressed_page_size_bytes = 11;
bool PageloadMetrics::has_compressed_page_size_bytes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PageloadMetrics::set_has_compressed_page_size_bytes() {
  _has_bits_[0] |= 0x00004000u;
}
void PageloadMetrics::clear_has_compressed_page_size_bytes() {
  _has_bits_[0] &= ~0x00004000u;
}
void PageloadMetrics::clear_compressed_page_size_bytes() {
  compressed_page_size_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_compressed_page_size_bytes();
}
::google::protobuf::int64 PageloadMetrics::compressed_page_size_bytes() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.compressed_page_size_bytes)
  return compressed_page_size_bytes_;
}
void PageloadMetrics::set_compressed_page_size_bytes(::google::protobuf::int64 value) {
  set_has_compressed_page_size_bytes();
  compressed_page_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.compressed_page_size_bytes)
}

// optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
bool PageloadMetrics::has_effective_connection_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PageloadMetrics::set_has_effective_connection_type() {
  _has_bits_[0] |= 0x00008000u;
}
void PageloadMetrics::clear_has_effective_connection_type() {
  _has_bits_[0] &= ~0x00008000u;
}
void PageloadMetrics::clear_effective_connection_type() {
  effective_connection_type_ = 0;
  clear_has_effective_connection_type();
}
::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType PageloadMetrics::effective_connection_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.effective_connection_type)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType >(effective_connection_type_);
}
void PageloadMetrics::set_effective_connection_type(::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType value) {
  assert(::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType_IsValid(value));
  set_has_effective_connection_type();
  effective_connection_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.effective_connection_type)
}

// optional .data_reduction_proxy.Duration parse_blocked_on_script_load_duration = 13;
bool PageloadMetrics::has_parse_blocked_on_script_load_duration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PageloadMetrics::set_has_parse_blocked_on_script_load_duration() {
  _has_bits_[0] |= 0x00000200u;
}
void PageloadMetrics::clear_has_parse_blocked_on_script_load_duration() {
  _has_bits_[0] &= ~0x00000200u;
}
void PageloadMetrics::clear_parse_blocked_on_script_load_duration() {
  if (parse_blocked_on_script_load_duration_ != NULL) parse_blocked_on_script_load_duration_->::data_reduction_proxy::Duration::Clear();
  clear_has_parse_blocked_on_script_load_duration();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::parse_blocked_on_script_load_duration() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.parse_blocked_on_script_load_duration)
  return parse_blocked_on_script_load_duration_ != NULL ? *parse_blocked_on_script_load_duration_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_parse_blocked_on_script_load_duration() {
  set_has_parse_blocked_on_script_load_duration();
  if (parse_blocked_on_script_load_duration_ == NULL) {
    parse_blocked_on_script_load_duration_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.parse_blocked_on_script_load_duration)
  return parse_blocked_on_script_load_duration_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_parse_blocked_on_script_load_duration() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.parse_blocked_on_script_load_duration)
  clear_has_parse_blocked_on_script_load_duration();
  ::data_reduction_proxy::Duration* temp = parse_blocked_on_script_load_duration_;
  parse_blocked_on_script_load_duration_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_parse_blocked_on_script_load_duration(::data_reduction_proxy::Duration* parse_blocked_on_script_load_duration) {
  delete parse_blocked_on_script_load_duration_;
  parse_blocked_on_script_load_duration_ = parse_blocked_on_script_load_duration;
  if (parse_blocked_on_script_load_duration) {
    set_has_parse_blocked_on_script_load_duration();
  } else {
    clear_has_parse_blocked_on_script_load_duration();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.parse_blocked_on_script_load_duration)
}

// optional .data_reduction_proxy.Duration parse_stop = 14;
bool PageloadMetrics::has_parse_stop() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PageloadMetrics::set_has_parse_stop() {
  _has_bits_[0] |= 0x00000400u;
}
void PageloadMetrics::clear_has_parse_stop() {
  _has_bits_[0] &= ~0x00000400u;
}
void PageloadMetrics::clear_parse_stop() {
  if (parse_stop_ != NULL) parse_stop_->::data_reduction_proxy::Duration::Clear();
  clear_has_parse_stop();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::parse_stop() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.parse_stop)
  return parse_stop_ != NULL ? *parse_stop_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_parse_stop() {
  set_has_parse_stop();
  if (parse_stop_ == NULL) {
    parse_stop_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.parse_stop)
  return parse_stop_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_parse_stop() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.parse_stop)
  clear_has_parse_stop();
  ::data_reduction_proxy::Duration* temp = parse_stop_;
  parse_stop_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_parse_stop(::data_reduction_proxy::Duration* parse_stop) {
  delete parse_stop_;
  parse_stop_ = parse_stop;
  if (parse_stop) {
    set_has_parse_stop();
  } else {
    clear_has_parse_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.parse_stop)
}

// optional .data_reduction_proxy.Duration experimental_time_to_first_meaningful_paint = 15;
bool PageloadMetrics::has_experimental_time_to_first_meaningful_paint() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PageloadMetrics::set_has_experimental_time_to_first_meaningful_paint() {
  _has_bits_[0] |= 0x00000800u;
}
void PageloadMetrics::clear_has_experimental_time_to_first_meaningful_paint() {
  _has_bits_[0] &= ~0x00000800u;
}
void PageloadMetrics::clear_experimental_time_to_first_meaningful_paint() {
  if (experimental_time_to_first_meaningful_paint_ != NULL) experimental_time_to_first_meaningful_paint_->::data_reduction_proxy::Duration::Clear();
  clear_has_experimental_time_to_first_meaningful_paint();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::experimental_time_to_first_meaningful_paint() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.experimental_time_to_first_meaningful_paint)
  return experimental_time_to_first_meaningful_paint_ != NULL ? *experimental_time_to_first_meaningful_paint_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_experimental_time_to_first_meaningful_paint() {
  set_has_experimental_time_to_first_meaningful_paint();
  if (experimental_time_to_first_meaningful_paint_ == NULL) {
    experimental_time_to_first_meaningful_paint_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.experimental_time_to_first_meaningful_paint)
  return experimental_time_to_first_meaningful_paint_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_experimental_time_to_first_meaningful_paint() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.experimental_time_to_first_meaningful_paint)
  clear_has_experimental_time_to_first_meaningful_paint();
  ::data_reduction_proxy::Duration* temp = experimental_time_to_first_meaningful_paint_;
  experimental_time_to_first_meaningful_paint_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_experimental_time_to_first_meaningful_paint(::data_reduction_proxy::Duration* experimental_time_to_first_meaningful_paint) {
  delete experimental_time_to_first_meaningful_paint_;
  experimental_time_to_first_meaningful_paint_ = experimental_time_to_first_meaningful_paint;
  if (experimental_time_to_first_meaningful_paint) {
    set_has_experimental_time_to_first_meaningful_paint();
  } else {
    clear_has_experimental_time_to_first_meaningful_paint();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.experimental_time_to_first_meaningful_paint)
}

// optional uint64 page_id = 16;
bool PageloadMetrics::has_page_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PageloadMetrics::set_has_page_id() {
  _has_bits_[0] |= 0x00020000u;
}
void PageloadMetrics::clear_has_page_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void PageloadMetrics::clear_page_id() {
  page_id_ = GOOGLE_ULONGLONG(0);
  clear_has_page_id();
}
::google::protobuf::uint64 PageloadMetrics::page_id() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.page_id)
  return page_id_;
}
void PageloadMetrics::set_page_id(::google::protobuf::uint64 value) {
  set_has_page_id();
  page_id_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.page_id)
}

// optional .data_reduction_proxy.PageloadMetrics.PreviewsOptOut previews_opt_out = 17;
bool PageloadMetrics::has_previews_opt_out() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PageloadMetrics::set_has_previews_opt_out() {
  _has_bits_[0] |= 0x00010000u;
}
void PageloadMetrics::clear_has_previews_opt_out() {
  _has_bits_[0] &= ~0x00010000u;
}
void PageloadMetrics::clear_previews_opt_out() {
  previews_opt_out_ = 0;
  clear_has_previews_opt_out();
}
::data_reduction_proxy::PageloadMetrics_PreviewsOptOut PageloadMetrics::previews_opt_out() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.previews_opt_out)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_PreviewsOptOut >(previews_opt_out_);
}
void PageloadMetrics::set_previews_opt_out(::data_reduction_proxy::PageloadMetrics_PreviewsOptOut value) {
  assert(::data_reduction_proxy::PageloadMetrics_PreviewsOptOut_IsValid(value));
  set_has_previews_opt_out();
  previews_opt_out_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.previews_opt_out)
}

// optional .data_reduction_proxy.PageloadMetrics.PreviewsType previews_type = 18;
bool PageloadMetrics::has_previews_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PageloadMetrics::set_has_previews_type() {
  _has_bits_[0] |= 0x00040000u;
}
void PageloadMetrics::clear_has_previews_type() {
  _has_bits_[0] &= ~0x00040000u;
}
void PageloadMetrics::clear_previews_type() {
  previews_type_ = 0;
  clear_has_previews_type();
}
::data_reduction_proxy::PageloadMetrics_PreviewsType PageloadMetrics::previews_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.previews_type)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_PreviewsType >(previews_type_);
}
void PageloadMetrics::set_previews_type(::data_reduction_proxy::PageloadMetrics_PreviewsType value) {
  assert(::data_reduction_proxy::PageloadMetrics_PreviewsType_IsValid(value));
  set_has_previews_type();
  previews_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.previews_type)
}

// optional string holdback_group = 19;
bool PageloadMetrics::has_holdback_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PageloadMetrics::set_has_holdback_group() {
  _has_bits_[0] |= 0x00000008u;
}
void PageloadMetrics::clear_has_holdback_group() {
  _has_bits_[0] &= ~0x00000008u;
}
void PageloadMetrics::clear_holdback_group() {
  holdback_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holdback_group();
}
const ::std::string& PageloadMetrics::holdback_group() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.holdback_group)
  return holdback_group_.GetNoArena();
}
void PageloadMetrics::set_holdback_group(const ::std::string& value) {
  set_has_holdback_group();
  holdback_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.holdback_group)
}
#if LANG_CXX11
void PageloadMetrics::set_holdback_group(::std::string&& value) {
  set_has_holdback_group();
  holdback_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.PageloadMetrics.holdback_group)
}
#endif
void PageloadMetrics::set_holdback_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_holdback_group();
  holdback_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.holdback_group)
}
void PageloadMetrics::set_holdback_group(const char* value, size_t size) {
  set_has_holdback_group();
  holdback_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.holdback_group)
}
::std::string* PageloadMetrics::mutable_holdback_group() {
  set_has_holdback_group();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.holdback_group)
  return holdback_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PageloadMetrics::release_holdback_group() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.holdback_group)
  clear_has_holdback_group();
  return holdback_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PageloadMetrics::set_allocated_holdback_group(::std::string* holdback_group) {
  if (holdback_group != NULL) {
    set_has_holdback_group();
  } else {
    clear_has_holdback_group();
  }
  holdback_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holdback_group);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.holdback_group)
}

// optional int64 renderer_memory_usage_kb = 20;
bool PageloadMetrics::has_renderer_memory_usage_kb() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PageloadMetrics::set_has_renderer_memory_usage_kb() {
  _has_bits_[0] |= 0x00100000u;
}
void PageloadMetrics::clear_has_renderer_memory_usage_kb() {
  _has_bits_[0] &= ~0x00100000u;
}
void PageloadMetrics::clear_renderer_memory_usage_kb() {
  renderer_memory_usage_kb_ = GOOGLE_LONGLONG(0);
  clear_has_renderer_memory_usage_kb();
}
::google::protobuf::int64 PageloadMetrics::renderer_memory_usage_kb() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.renderer_memory_usage_kb)
  return renderer_memory_usage_kb_;
}
void PageloadMetrics::set_renderer_memory_usage_kb(::google::protobuf::int64 value) {
  set_has_renderer_memory_usage_kb();
  renderer_memory_usage_kb_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.renderer_memory_usage_kb)
}

// optional .data_reduction_proxy.PageloadMetrics.RendererCrashType renderer_crash_type = 21;
bool PageloadMetrics::has_renderer_crash_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PageloadMetrics::set_has_renderer_crash_type() {
  _has_bits_[0] |= 0x00080000u;
}
void PageloadMetrics::clear_has_renderer_crash_type() {
  _has_bits_[0] &= ~0x00080000u;
}
void PageloadMetrics::clear_renderer_crash_type() {
  renderer_crash_type_ = 0;
  clear_has_renderer_crash_type();
}
::data_reduction_proxy::PageloadMetrics_RendererCrashType PageloadMetrics::renderer_crash_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.renderer_crash_type)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_RendererCrashType >(renderer_crash_type_);
}
void PageloadMetrics::set_renderer_crash_type(::data_reduction_proxy::PageloadMetrics_RendererCrashType value) {
  assert(::data_reduction_proxy::PageloadMetrics_RendererCrashType_IsValid(value));
  set_has_renderer_crash_type();
  renderer_crash_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.renderer_crash_type)
}

// optional float cached_fraction = 22;
bool PageloadMetrics::has_cached_fraction() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PageloadMetrics::set_has_cached_fraction() {
  _has_bits_[0] |= 0x00200000u;
}
void PageloadMetrics::clear_has_cached_fraction() {
  _has_bits_[0] &= ~0x00200000u;
}
void PageloadMetrics::clear_cached_fraction() {
  cached_fraction_ = 0;
  clear_has_cached_fraction();
}
float PageloadMetrics::cached_fraction() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.cached_fraction)
  return cached_fraction_;
}
void PageloadMetrics::set_cached_fraction(float value) {
  set_has_cached_fraction();
  cached_fraction_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.cached_fraction)
}

// optional .data_reduction_proxy.PageloadMetrics.ConnectionType connection_type = 23;
bool PageloadMetrics::has_connection_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PageloadMetrics::set_has_connection_type() {
  _has_bits_[0] |= 0x00400000u;
}
void PageloadMetrics::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00400000u;
}
void PageloadMetrics::clear_connection_type() {
  connection_type_ = 0;
  clear_has_connection_type();
}
::data_reduction_proxy::PageloadMetrics_ConnectionType PageloadMetrics::connection_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.connection_type)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_ConnectionType >(connection_type_);
}
void PageloadMetrics::set_connection_type(::data_reduction_proxy::PageloadMetrics_ConnectionType value) {
  assert(::data_reduction_proxy::PageloadMetrics_ConnectionType_IsValid(value));
  set_has_connection_type();
  connection_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.connection_type)
}

// optional int64 total_page_size_bytes = 24;
bool PageloadMetrics::has_total_page_size_bytes() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PageloadMetrics::set_has_total_page_size_bytes() {
  _has_bits_[0] |= 0x00800000u;
}
void PageloadMetrics::clear_has_total_page_size_bytes() {
  _has_bits_[0] &= ~0x00800000u;
}
void PageloadMetrics::clear_total_page_size_bytes() {
  total_page_size_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_total_page_size_bytes();
}
::google::protobuf::int64 PageloadMetrics::total_page_size_bytes() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.total_page_size_bytes)
  return total_page_size_bytes_;
}
void PageloadMetrics::set_total_page_size_bytes(::google::protobuf::int64 value) {
  set_has_total_page_size_bytes();
  total_page_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.total_page_size_bytes)
}

// optional .data_reduction_proxy.Duration first_input_delay = 25;
bool PageloadMetrics::has_first_input_delay() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PageloadMetrics::set_has_first_input_delay() {
  _has_bits_[0] |= 0x00001000u;
}
void PageloadMetrics::clear_has_first_input_delay() {
  _has_bits_[0] &= ~0x00001000u;
}
void PageloadMetrics::clear_first_input_delay() {
  if (first_input_delay_ != NULL) first_input_delay_->::data_reduction_proxy::Duration::Clear();
  clear_has_first_input_delay();
}
const ::data_reduction_proxy::Duration& PageloadMetrics::first_input_delay() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.first_input_delay)
  return first_input_delay_ != NULL ? *first_input_delay_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
::data_reduction_proxy::Duration* PageloadMetrics::mutable_first_input_delay() {
  set_has_first_input_delay();
  if (first_input_delay_ == NULL) {
    first_input_delay_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.first_input_delay)
  return first_input_delay_;
}
::data_reduction_proxy::Duration* PageloadMetrics::release_first_input_delay() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.first_input_delay)
  clear_has_first_input_delay();
  ::data_reduction_proxy::Duration* temp = first_input_delay_;
  first_input_delay_ = NULL;
  return temp;
}
void PageloadMetrics::set_allocated_first_input_delay(::data_reduction_proxy::Duration* first_input_delay) {
  delete first_input_delay_;
  first_input_delay_ = first_input_delay;
  if (first_input_delay) {
    set_has_first_input_delay();
  } else {
    clear_has_first_input_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.first_input_delay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data_reduction_proxy

// @@protoc_insertion_point(global_scope)
