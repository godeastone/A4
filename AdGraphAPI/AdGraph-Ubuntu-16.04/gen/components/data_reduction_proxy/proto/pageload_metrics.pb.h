// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pageload_metrics.proto

#ifndef PROTOBUF_pageload_5fmetrics_2eproto__INCLUDED
#define PROTOBUF_pageload_5fmetrics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "client_config.pb.h"
// @@protoc_insertion_point(includes)
namespace data_reduction_proxy {
class PageloadDeviceInfo;
class PageloadDeviceInfoDefaultTypeInternal;
extern PageloadDeviceInfoDefaultTypeInternal _PageloadDeviceInfo_default_instance_;
class PageloadMetrics;
class PageloadMetricsDefaultTypeInternal;
extern PageloadMetricsDefaultTypeInternal _PageloadMetrics_default_instance_;
class RecordPageloadMetricsRequest;
class RecordPageloadMetricsRequestDefaultTypeInternal;
extern RecordPageloadMetricsRequestDefaultTypeInternal _RecordPageloadMetricsRequest_default_instance_;
}  // namespace data_reduction_proxy

namespace data_reduction_proxy {

namespace protobuf_pageload_5fmetrics_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_pageload_5fmetrics_2eproto

enum PageloadMetrics_EffectiveConnectionType {
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_UNKNOWN = 0,
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_OFFLINE = 1,
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_SLOW_2G = 2,
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_2G = 3,
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_3G = 4,
  PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_4G = 5
};
bool PageloadMetrics_EffectiveConnectionType_IsValid(int value);
const PageloadMetrics_EffectiveConnectionType PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_MIN = PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
const PageloadMetrics_EffectiveConnectionType PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_MAX = PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_4G;
const int PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_ARRAYSIZE = PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_MAX + 1;

enum PageloadMetrics_ConnectionType {
  PageloadMetrics_ConnectionType_CONNECTION_UNKNOWN = 0,
  PageloadMetrics_ConnectionType_CONNECTION_ETHERNET = 1,
  PageloadMetrics_ConnectionType_CONNECTION_WIFI = 2,
  PageloadMetrics_ConnectionType_CONNECTION_2G = 3,
  PageloadMetrics_ConnectionType_CONNECTION_3G = 4,
  PageloadMetrics_ConnectionType_CONNECTION_4G = 5,
  PageloadMetrics_ConnectionType_CONNECTION_NONE = 6,
  PageloadMetrics_ConnectionType_CONNECTION_BLUETOOTH = 7
};
bool PageloadMetrics_ConnectionType_IsValid(int value);
const PageloadMetrics_ConnectionType PageloadMetrics_ConnectionType_ConnectionType_MIN = PageloadMetrics_ConnectionType_CONNECTION_UNKNOWN;
const PageloadMetrics_ConnectionType PageloadMetrics_ConnectionType_ConnectionType_MAX = PageloadMetrics_ConnectionType_CONNECTION_BLUETOOTH;
const int PageloadMetrics_ConnectionType_ConnectionType_ARRAYSIZE = PageloadMetrics_ConnectionType_ConnectionType_MAX + 1;

enum PageloadMetrics_PreviewsOptOut {
  PageloadMetrics_PreviewsOptOut_UNKNOWN = 0,
  PageloadMetrics_PreviewsOptOut_OPT_OUT = 1,
  PageloadMetrics_PreviewsOptOut_NON_OPT_OUT = 2
};
bool PageloadMetrics_PreviewsOptOut_IsValid(int value);
const PageloadMetrics_PreviewsOptOut PageloadMetrics_PreviewsOptOut_PreviewsOptOut_MIN = PageloadMetrics_PreviewsOptOut_UNKNOWN;
const PageloadMetrics_PreviewsOptOut PageloadMetrics_PreviewsOptOut_PreviewsOptOut_MAX = PageloadMetrics_PreviewsOptOut_NON_OPT_OUT;
const int PageloadMetrics_PreviewsOptOut_PreviewsOptOut_ARRAYSIZE = PageloadMetrics_PreviewsOptOut_PreviewsOptOut_MAX + 1;

enum PageloadMetrics_PreviewsType {
  PageloadMetrics_PreviewsType_NONE = 0,
  PageloadMetrics_PreviewsType_LOFI = 1,
  PageloadMetrics_PreviewsType_LITE_PAGE = 2
};
bool PageloadMetrics_PreviewsType_IsValid(int value);
const PageloadMetrics_PreviewsType PageloadMetrics_PreviewsType_PreviewsType_MIN = PageloadMetrics_PreviewsType_NONE;
const PageloadMetrics_PreviewsType PageloadMetrics_PreviewsType_PreviewsType_MAX = PageloadMetrics_PreviewsType_LITE_PAGE;
const int PageloadMetrics_PreviewsType_PreviewsType_ARRAYSIZE = PageloadMetrics_PreviewsType_PreviewsType_MAX + 1;

enum PageloadMetrics_RendererCrashType {
  PageloadMetrics_RendererCrashType_UNSPECIFIED = 0,
  PageloadMetrics_RendererCrashType_NO_CRASH = 1,
  PageloadMetrics_RendererCrashType_NOT_ANALYZED = 2,
  PageloadMetrics_RendererCrashType_OTHER_CRASH = 3,
  PageloadMetrics_RendererCrashType_ANDROID_FOREGROUND_OOM = 4
};
bool PageloadMetrics_RendererCrashType_IsValid(int value);
const PageloadMetrics_RendererCrashType PageloadMetrics_RendererCrashType_RendererCrashType_MIN = PageloadMetrics_RendererCrashType_UNSPECIFIED;
const PageloadMetrics_RendererCrashType PageloadMetrics_RendererCrashType_RendererCrashType_MAX = PageloadMetrics_RendererCrashType_ANDROID_FOREGROUND_OOM;
const int PageloadMetrics_RendererCrashType_RendererCrashType_ARRAYSIZE = PageloadMetrics_RendererCrashType_RendererCrashType_MAX + 1;

// ===================================================================

class PageloadDeviceInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.PageloadDeviceInfo) */ {
 public:
  PageloadDeviceInfo();
  virtual ~PageloadDeviceInfo();

  PageloadDeviceInfo(const PageloadDeviceInfo& from);

  inline PageloadDeviceInfo& operator=(const PageloadDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PageloadDeviceInfo& default_instance();

  static inline const PageloadDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const PageloadDeviceInfo*>(
               &_PageloadDeviceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PageloadDeviceInfo* other);

  // implements Message ----------------------------------------------

  inline PageloadDeviceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PageloadDeviceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PageloadDeviceInfo& from);
  void MergeFrom(const PageloadDeviceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageloadDeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 total_device_memory_kb = 1;
  bool has_total_device_memory_kb() const;
  void clear_total_device_memory_kb();
  static const int kTotalDeviceMemoryKbFieldNumber = 1;
  ::google::protobuf::int64 total_device_memory_kb() const;
  void set_total_device_memory_kb(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.PageloadDeviceInfo)
 private:
  void set_has_total_device_memory_kb();
  void clear_has_total_device_memory_kb();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 total_device_memory_kb_;
  friend struct protobuf_pageload_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordPageloadMetricsRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.RecordPageloadMetricsRequest) */ {
 public:
  RecordPageloadMetricsRequest();
  virtual ~RecordPageloadMetricsRequest();

  RecordPageloadMetricsRequest(const RecordPageloadMetricsRequest& from);

  inline RecordPageloadMetricsRequest& operator=(const RecordPageloadMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RecordPageloadMetricsRequest& default_instance();

  static inline const RecordPageloadMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const RecordPageloadMetricsRequest*>(
               &_RecordPageloadMetricsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RecordPageloadMetricsRequest* other);

  // implements Message ----------------------------------------------

  inline RecordPageloadMetricsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RecordPageloadMetricsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RecordPageloadMetricsRequest& from);
  void MergeFrom(const RecordPageloadMetricsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecordPageloadMetricsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
  int pageloads_size() const;
  void clear_pageloads();
  static const int kPageloadsFieldNumber = 1;
  const ::data_reduction_proxy::PageloadMetrics& pageloads(int index) const;
  ::data_reduction_proxy::PageloadMetrics* mutable_pageloads(int index);
  ::data_reduction_proxy::PageloadMetrics* add_pageloads();
  ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >*
      mutable_pageloads();
  const ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >&
      pageloads() const;

  // optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
  bool has_metrics_sent_time() const;
  void clear_metrics_sent_time();
  static const int kMetricsSentTimeFieldNumber = 2;
  const ::data_reduction_proxy::Timestamp& metrics_sent_time() const;
  ::data_reduction_proxy::Timestamp* mutable_metrics_sent_time();
  ::data_reduction_proxy::Timestamp* release_metrics_sent_time();
  void set_allocated_metrics_sent_time(::data_reduction_proxy::Timestamp* metrics_sent_time);

  // optional .data_reduction_proxy.PageloadDeviceInfo device_info = 3;
  bool has_device_info() const;
  void clear_device_info();
  static const int kDeviceInfoFieldNumber = 3;
  const ::data_reduction_proxy::PageloadDeviceInfo& device_info() const;
  ::data_reduction_proxy::PageloadDeviceInfo* mutable_device_info();
  ::data_reduction_proxy::PageloadDeviceInfo* release_device_info();
  void set_allocated_device_info(::data_reduction_proxy::PageloadDeviceInfo* device_info);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.RecordPageloadMetricsRequest)
 private:
  void set_has_metrics_sent_time();
  void clear_has_metrics_sent_time();
  void set_has_device_info();
  void clear_has_device_info();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics > pageloads_;
  ::data_reduction_proxy::Timestamp* metrics_sent_time_;
  ::data_reduction_proxy::PageloadDeviceInfo* device_info_;
  friend struct protobuf_pageload_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PageloadMetrics : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.PageloadMetrics) */ {
 public:
  PageloadMetrics();
  virtual ~PageloadMetrics();

  PageloadMetrics(const PageloadMetrics& from);

  inline PageloadMetrics& operator=(const PageloadMetrics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PageloadMetrics& default_instance();

  static inline const PageloadMetrics* internal_default_instance() {
    return reinterpret_cast<const PageloadMetrics*>(
               &_PageloadMetrics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PageloadMetrics* other);

  // implements Message ----------------------------------------------

  inline PageloadMetrics* New() const PROTOBUF_FINAL { return New(NULL); }

  PageloadMetrics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PageloadMetrics& from);
  void MergeFrom(const PageloadMetrics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageloadMetrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PageloadMetrics_EffectiveConnectionType EffectiveConnectionType;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_UNKNOWN =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_OFFLINE =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_OFFLINE;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_SLOW_2G =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_SLOW_2G;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_2G =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_2G;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_3G =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_3G;
  static const EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_4G =
    PageloadMetrics_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_4G;
  static inline bool EffectiveConnectionType_IsValid(int value) {
    return PageloadMetrics_EffectiveConnectionType_IsValid(value);
  }
  static const EffectiveConnectionType EffectiveConnectionType_MIN =
    PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_MIN;
  static const EffectiveConnectionType EffectiveConnectionType_MAX =
    PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_MAX;
  static const int EffectiveConnectionType_ARRAYSIZE =
    PageloadMetrics_EffectiveConnectionType_EffectiveConnectionType_ARRAYSIZE;

  typedef PageloadMetrics_ConnectionType ConnectionType;
  static const ConnectionType CONNECTION_UNKNOWN =
    PageloadMetrics_ConnectionType_CONNECTION_UNKNOWN;
  static const ConnectionType CONNECTION_ETHERNET =
    PageloadMetrics_ConnectionType_CONNECTION_ETHERNET;
  static const ConnectionType CONNECTION_WIFI =
    PageloadMetrics_ConnectionType_CONNECTION_WIFI;
  static const ConnectionType CONNECTION_2G =
    PageloadMetrics_ConnectionType_CONNECTION_2G;
  static const ConnectionType CONNECTION_3G =
    PageloadMetrics_ConnectionType_CONNECTION_3G;
  static const ConnectionType CONNECTION_4G =
    PageloadMetrics_ConnectionType_CONNECTION_4G;
  static const ConnectionType CONNECTION_NONE =
    PageloadMetrics_ConnectionType_CONNECTION_NONE;
  static const ConnectionType CONNECTION_BLUETOOTH =
    PageloadMetrics_ConnectionType_CONNECTION_BLUETOOTH;
  static inline bool ConnectionType_IsValid(int value) {
    return PageloadMetrics_ConnectionType_IsValid(value);
  }
  static const ConnectionType ConnectionType_MIN =
    PageloadMetrics_ConnectionType_ConnectionType_MIN;
  static const ConnectionType ConnectionType_MAX =
    PageloadMetrics_ConnectionType_ConnectionType_MAX;
  static const int ConnectionType_ARRAYSIZE =
    PageloadMetrics_ConnectionType_ConnectionType_ARRAYSIZE;

  typedef PageloadMetrics_PreviewsOptOut PreviewsOptOut;
  static const PreviewsOptOut UNKNOWN =
    PageloadMetrics_PreviewsOptOut_UNKNOWN;
  static const PreviewsOptOut OPT_OUT =
    PageloadMetrics_PreviewsOptOut_OPT_OUT;
  static const PreviewsOptOut NON_OPT_OUT =
    PageloadMetrics_PreviewsOptOut_NON_OPT_OUT;
  static inline bool PreviewsOptOut_IsValid(int value) {
    return PageloadMetrics_PreviewsOptOut_IsValid(value);
  }
  static const PreviewsOptOut PreviewsOptOut_MIN =
    PageloadMetrics_PreviewsOptOut_PreviewsOptOut_MIN;
  static const PreviewsOptOut PreviewsOptOut_MAX =
    PageloadMetrics_PreviewsOptOut_PreviewsOptOut_MAX;
  static const int PreviewsOptOut_ARRAYSIZE =
    PageloadMetrics_PreviewsOptOut_PreviewsOptOut_ARRAYSIZE;

  typedef PageloadMetrics_PreviewsType PreviewsType;
  static const PreviewsType NONE =
    PageloadMetrics_PreviewsType_NONE;
  static const PreviewsType LOFI =
    PageloadMetrics_PreviewsType_LOFI;
  static const PreviewsType LITE_PAGE =
    PageloadMetrics_PreviewsType_LITE_PAGE;
  static inline bool PreviewsType_IsValid(int value) {
    return PageloadMetrics_PreviewsType_IsValid(value);
  }
  static const PreviewsType PreviewsType_MIN =
    PageloadMetrics_PreviewsType_PreviewsType_MIN;
  static const PreviewsType PreviewsType_MAX =
    PageloadMetrics_PreviewsType_PreviewsType_MAX;
  static const int PreviewsType_ARRAYSIZE =
    PageloadMetrics_PreviewsType_PreviewsType_ARRAYSIZE;

  typedef PageloadMetrics_RendererCrashType RendererCrashType;
  static const RendererCrashType UNSPECIFIED =
    PageloadMetrics_RendererCrashType_UNSPECIFIED;
  static const RendererCrashType NO_CRASH =
    PageloadMetrics_RendererCrashType_NO_CRASH;
  static const RendererCrashType NOT_ANALYZED =
    PageloadMetrics_RendererCrashType_NOT_ANALYZED;
  static const RendererCrashType OTHER_CRASH =
    PageloadMetrics_RendererCrashType_OTHER_CRASH;
  static const RendererCrashType ANDROID_FOREGROUND_OOM =
    PageloadMetrics_RendererCrashType_ANDROID_FOREGROUND_OOM;
  static inline bool RendererCrashType_IsValid(int value) {
    return PageloadMetrics_RendererCrashType_IsValid(value);
  }
  static const RendererCrashType RendererCrashType_MIN =
    PageloadMetrics_RendererCrashType_RendererCrashType_MIN;
  static const RendererCrashType RendererCrashType_MAX =
    PageloadMetrics_RendererCrashType_RendererCrashType_MAX;
  static const int RendererCrashType_ARRAYSIZE =
    PageloadMetrics_RendererCrashType_RendererCrashType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string session_key = 1;
  bool has_session_key() const;
  void clear_session_key();
  static const int kSessionKeyFieldNumber = 1;
  const ::std::string& session_key() const;
  void set_session_key(const ::std::string& value);
  #if LANG_CXX11
  void set_session_key(::std::string&& value);
  #endif
  void set_session_key(const char* value);
  void set_session_key(const char* value, size_t size);
  ::std::string* mutable_session_key();
  ::std::string* release_session_key();
  void set_allocated_session_key(::std::string* session_key);

  // optional string first_request_url = 4;
  bool has_first_request_url() const;
  void clear_first_request_url();
  static const int kFirstRequestUrlFieldNumber = 4;
  const ::std::string& first_request_url() const;
  void set_first_request_url(const ::std::string& value);
  #if LANG_CXX11
  void set_first_request_url(::std::string&& value);
  #endif
  void set_first_request_url(const char* value);
  void set_first_request_url(const char* value, size_t size);
  ::std::string* mutable_first_request_url();
  ::std::string* release_first_request_url();
  void set_allocated_first_request_url(::std::string* first_request_url);

  // optional string last_request_url = 5;
  bool has_last_request_url() const;
  void clear_last_request_url();
  static const int kLastRequestUrlFieldNumber = 5;
  const ::std::string& last_request_url() const;
  void set_last_request_url(const ::std::string& value);
  #if LANG_CXX11
  void set_last_request_url(::std::string&& value);
  #endif
  void set_last_request_url(const char* value);
  void set_last_request_url(const char* value, size_t size);
  ::std::string* mutable_last_request_url();
  ::std::string* release_last_request_url();
  void set_allocated_last_request_url(::std::string* last_request_url);

  // optional string holdback_group = 19;
  bool has_holdback_group() const;
  void clear_holdback_group();
  static const int kHoldbackGroupFieldNumber = 19;
  const ::std::string& holdback_group() const;
  void set_holdback_group(const ::std::string& value);
  #if LANG_CXX11
  void set_holdback_group(::std::string&& value);
  #endif
  void set_holdback_group(const char* value);
  void set_holdback_group(const char* value, size_t size);
  ::std::string* mutable_holdback_group();
  ::std::string* release_holdback_group();
  void set_allocated_holdback_group(::std::string* holdback_group);

  // optional .data_reduction_proxy.Timestamp first_request_time = 2;
  bool has_first_request_time() const;
  void clear_first_request_time();
  static const int kFirstRequestTimeFieldNumber = 2;
  const ::data_reduction_proxy::Timestamp& first_request_time() const;
  ::data_reduction_proxy::Timestamp* mutable_first_request_time();
  ::data_reduction_proxy::Timestamp* release_first_request_time();
  void set_allocated_first_request_time(::data_reduction_proxy::Timestamp* first_request_time);

  // optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
  bool has_time_to_first_contentful_paint() const;
  void clear_time_to_first_contentful_paint();
  static const int kTimeToFirstContentfulPaintFieldNumber = 6;
  const ::data_reduction_proxy::Duration& time_to_first_contentful_paint() const;
  ::data_reduction_proxy::Duration* mutable_time_to_first_contentful_paint();
  ::data_reduction_proxy::Duration* release_time_to_first_contentful_paint();
  void set_allocated_time_to_first_contentful_paint(::data_reduction_proxy::Duration* time_to_first_contentful_paint);

  // optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
  bool has_time_to_first_image_paint() const;
  void clear_time_to_first_image_paint();
  static const int kTimeToFirstImagePaintFieldNumber = 7;
  const ::data_reduction_proxy::Duration& time_to_first_image_paint() const;
  ::data_reduction_proxy::Duration* mutable_time_to_first_image_paint();
  ::data_reduction_proxy::Duration* release_time_to_first_image_paint();
  void set_allocated_time_to_first_image_paint(::data_reduction_proxy::Duration* time_to_first_image_paint);

  // optional .data_reduction_proxy.Duration time_to_first_byte = 8;
  bool has_time_to_first_byte() const;
  void clear_time_to_first_byte();
  static const int kTimeToFirstByteFieldNumber = 8;
  const ::data_reduction_proxy::Duration& time_to_first_byte() const;
  ::data_reduction_proxy::Duration* mutable_time_to_first_byte();
  ::data_reduction_proxy::Duration* release_time_to_first_byte();
  void set_allocated_time_to_first_byte(::data_reduction_proxy::Duration* time_to_first_byte);

  // optional .data_reduction_proxy.Duration page_load_time = 9;
  bool has_page_load_time() const;
  void clear_page_load_time();
  static const int kPageLoadTimeFieldNumber = 9;
  const ::data_reduction_proxy::Duration& page_load_time() const;
  ::data_reduction_proxy::Duration* mutable_page_load_time();
  ::data_reduction_proxy::Duration* release_page_load_time();
  void set_allocated_page_load_time(::data_reduction_proxy::Duration* page_load_time);

  // optional .data_reduction_proxy.Duration parse_blocked_on_script_load_duration = 13;
  bool has_parse_blocked_on_script_load_duration() const;
  void clear_parse_blocked_on_script_load_duration();
  static const int kParseBlockedOnScriptLoadDurationFieldNumber = 13;
  const ::data_reduction_proxy::Duration& parse_blocked_on_script_load_duration() const;
  ::data_reduction_proxy::Duration* mutable_parse_blocked_on_script_load_duration();
  ::data_reduction_proxy::Duration* release_parse_blocked_on_script_load_duration();
  void set_allocated_parse_blocked_on_script_load_duration(::data_reduction_proxy::Duration* parse_blocked_on_script_load_duration);

  // optional .data_reduction_proxy.Duration parse_stop = 14;
  bool has_parse_stop() const;
  void clear_parse_stop();
  static const int kParseStopFieldNumber = 14;
  const ::data_reduction_proxy::Duration& parse_stop() const;
  ::data_reduction_proxy::Duration* mutable_parse_stop();
  ::data_reduction_proxy::Duration* release_parse_stop();
  void set_allocated_parse_stop(::data_reduction_proxy::Duration* parse_stop);

  // optional .data_reduction_proxy.Duration experimental_time_to_first_meaningful_paint = 15;
  bool has_experimental_time_to_first_meaningful_paint() const;
  void clear_experimental_time_to_first_meaningful_paint();
  static const int kExperimentalTimeToFirstMeaningfulPaintFieldNumber = 15;
  const ::data_reduction_proxy::Duration& experimental_time_to_first_meaningful_paint() const;
  ::data_reduction_proxy::Duration* mutable_experimental_time_to_first_meaningful_paint();
  ::data_reduction_proxy::Duration* release_experimental_time_to_first_meaningful_paint();
  void set_allocated_experimental_time_to_first_meaningful_paint(::data_reduction_proxy::Duration* experimental_time_to_first_meaningful_paint);

  // optional .data_reduction_proxy.Duration first_input_delay = 25;
  bool has_first_input_delay() const;
  void clear_first_input_delay();
  static const int kFirstInputDelayFieldNumber = 25;
  const ::data_reduction_proxy::Duration& first_input_delay() const;
  ::data_reduction_proxy::Duration* mutable_first_input_delay();
  ::data_reduction_proxy::Duration* release_first_input_delay();
  void set_allocated_first_input_delay(::data_reduction_proxy::Duration* first_input_delay);

  // optional int64 original_page_size_bytes = 10;
  bool has_original_page_size_bytes() const;
  void clear_original_page_size_bytes();
  static const int kOriginalPageSizeBytesFieldNumber = 10;
  ::google::protobuf::int64 original_page_size_bytes() const;
  void set_original_page_size_bytes(::google::protobuf::int64 value);

  // optional int64 compressed_page_size_bytes = 11;
  bool has_compressed_page_size_bytes() const;
  void clear_compressed_page_size_bytes();
  static const int kCompressedPageSizeBytesFieldNumber = 11;
  ::google::protobuf::int64 compressed_page_size_bytes() const;
  void set_compressed_page_size_bytes(::google::protobuf::int64 value);

  // optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
  bool has_effective_connection_type() const;
  void clear_effective_connection_type();
  static const int kEffectiveConnectionTypeFieldNumber = 12;
  ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType effective_connection_type() const;
  void set_effective_connection_type(::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType value);

  // optional .data_reduction_proxy.PageloadMetrics.PreviewsOptOut previews_opt_out = 17;
  bool has_previews_opt_out() const;
  void clear_previews_opt_out();
  static const int kPreviewsOptOutFieldNumber = 17;
  ::data_reduction_proxy::PageloadMetrics_PreviewsOptOut previews_opt_out() const;
  void set_previews_opt_out(::data_reduction_proxy::PageloadMetrics_PreviewsOptOut value);

  // optional uint64 page_id = 16;
  bool has_page_id() const;
  void clear_page_id();
  static const int kPageIdFieldNumber = 16;
  ::google::protobuf::uint64 page_id() const;
  void set_page_id(::google::protobuf::uint64 value);

  // optional .data_reduction_proxy.PageloadMetrics.PreviewsType previews_type = 18;
  bool has_previews_type() const;
  void clear_previews_type();
  static const int kPreviewsTypeFieldNumber = 18;
  ::data_reduction_proxy::PageloadMetrics_PreviewsType previews_type() const;
  void set_previews_type(::data_reduction_proxy::PageloadMetrics_PreviewsType value);

  // optional .data_reduction_proxy.PageloadMetrics.RendererCrashType renderer_crash_type = 21;
  bool has_renderer_crash_type() const;
  void clear_renderer_crash_type();
  static const int kRendererCrashTypeFieldNumber = 21;
  ::data_reduction_proxy::PageloadMetrics_RendererCrashType renderer_crash_type() const;
  void set_renderer_crash_type(::data_reduction_proxy::PageloadMetrics_RendererCrashType value);

  // optional int64 renderer_memory_usage_kb = 20;
  bool has_renderer_memory_usage_kb() const;
  void clear_renderer_memory_usage_kb();
  static const int kRendererMemoryUsageKbFieldNumber = 20;
  ::google::protobuf::int64 renderer_memory_usage_kb() const;
  void set_renderer_memory_usage_kb(::google::protobuf::int64 value);

  // optional float cached_fraction = 22;
  bool has_cached_fraction() const;
  void clear_cached_fraction();
  static const int kCachedFractionFieldNumber = 22;
  float cached_fraction() const;
  void set_cached_fraction(float value);

  // optional .data_reduction_proxy.PageloadMetrics.ConnectionType connection_type = 23;
  bool has_connection_type() const;
  void clear_connection_type();
  static const int kConnectionTypeFieldNumber = 23;
  ::data_reduction_proxy::PageloadMetrics_ConnectionType connection_type() const;
  void set_connection_type(::data_reduction_proxy::PageloadMetrics_ConnectionType value);

  // optional int64 total_page_size_bytes = 24;
  bool has_total_page_size_bytes() const;
  void clear_total_page_size_bytes();
  static const int kTotalPageSizeBytesFieldNumber = 24;
  ::google::protobuf::int64 total_page_size_bytes() const;
  void set_total_page_size_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.PageloadMetrics)
 private:
  void set_has_session_key();
  void clear_has_session_key();
  void set_has_first_request_time();
  void clear_has_first_request_time();
  void set_has_first_request_url();
  void clear_has_first_request_url();
  void set_has_last_request_url();
  void clear_has_last_request_url();
  void set_has_time_to_first_contentful_paint();
  void clear_has_time_to_first_contentful_paint();
  void set_has_time_to_first_image_paint();
  void clear_has_time_to_first_image_paint();
  void set_has_time_to_first_byte();
  void clear_has_time_to_first_byte();
  void set_has_page_load_time();
  void clear_has_page_load_time();
  void set_has_original_page_size_bytes();
  void clear_has_original_page_size_bytes();
  void set_has_compressed_page_size_bytes();
  void clear_has_compressed_page_size_bytes();
  void set_has_effective_connection_type();
  void clear_has_effective_connection_type();
  void set_has_parse_blocked_on_script_load_duration();
  void clear_has_parse_blocked_on_script_load_duration();
  void set_has_parse_stop();
  void clear_has_parse_stop();
  void set_has_experimental_time_to_first_meaningful_paint();
  void clear_has_experimental_time_to_first_meaningful_paint();
  void set_has_page_id();
  void clear_has_page_id();
  void set_has_previews_opt_out();
  void clear_has_previews_opt_out();
  void set_has_previews_type();
  void clear_has_previews_type();
  void set_has_holdback_group();
  void clear_has_holdback_group();
  void set_has_renderer_memory_usage_kb();
  void clear_has_renderer_memory_usage_kb();
  void set_has_renderer_crash_type();
  void clear_has_renderer_crash_type();
  void set_has_cached_fraction();
  void clear_has_cached_fraction();
  void set_has_connection_type();
  void clear_has_connection_type();
  void set_has_total_page_size_bytes();
  void clear_has_total_page_size_bytes();
  void set_has_first_input_delay();
  void clear_has_first_input_delay();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr session_key_;
  ::google::protobuf::internal::ArenaStringPtr first_request_url_;
  ::google::protobuf::internal::ArenaStringPtr last_request_url_;
  ::google::protobuf::internal::ArenaStringPtr holdback_group_;
  ::data_reduction_proxy::Timestamp* first_request_time_;
  ::data_reduction_proxy::Duration* time_to_first_contentful_paint_;
  ::data_reduction_proxy::Duration* time_to_first_image_paint_;
  ::data_reduction_proxy::Duration* time_to_first_byte_;
  ::data_reduction_proxy::Duration* page_load_time_;
  ::data_reduction_proxy::Duration* parse_blocked_on_script_load_duration_;
  ::data_reduction_proxy::Duration* parse_stop_;
  ::data_reduction_proxy::Duration* experimental_time_to_first_meaningful_paint_;
  ::data_reduction_proxy::Duration* first_input_delay_;
  ::google::protobuf::int64 original_page_size_bytes_;
  ::google::protobuf::int64 compressed_page_size_bytes_;
  int effective_connection_type_;
  int previews_opt_out_;
  ::google::protobuf::uint64 page_id_;
  int previews_type_;
  int renderer_crash_type_;
  ::google::protobuf::int64 renderer_memory_usage_kb_;
  float cached_fraction_;
  int connection_type_;
  ::google::protobuf::int64 total_page_size_bytes_;
  friend struct protobuf_pageload_5fmetrics_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PageloadDeviceInfo

// optional int64 total_device_memory_kb = 1;
inline bool PageloadDeviceInfo::has_total_device_memory_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageloadDeviceInfo::set_has_total_device_memory_kb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageloadDeviceInfo::clear_has_total_device_memory_kb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageloadDeviceInfo::clear_total_device_memory_kb() {
  total_device_memory_kb_ = GOOGLE_LONGLONG(0);
  clear_has_total_device_memory_kb();
}
inline ::google::protobuf::int64 PageloadDeviceInfo::total_device_memory_kb() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadDeviceInfo.total_device_memory_kb)
  return total_device_memory_kb_;
}
inline void PageloadDeviceInfo::set_total_device_memory_kb(::google::protobuf::int64 value) {
  set_has_total_device_memory_kb();
  total_device_memory_kb_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadDeviceInfo.total_device_memory_kb)
}

// -------------------------------------------------------------------

// RecordPageloadMetricsRequest

// repeated .data_reduction_proxy.PageloadMetrics pageloads = 1;
inline int RecordPageloadMetricsRequest::pageloads_size() const {
  return pageloads_.size();
}
inline void RecordPageloadMetricsRequest::clear_pageloads() {
  pageloads_.Clear();
}
inline const ::data_reduction_proxy::PageloadMetrics& RecordPageloadMetricsRequest::pageloads(int index) const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Get(index);
}
inline ::data_reduction_proxy::PageloadMetrics* RecordPageloadMetricsRequest::mutable_pageloads(int index) {
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Mutable(index);
}
inline ::data_reduction_proxy::PageloadMetrics* RecordPageloadMetricsRequest::add_pageloads() {
  // @@protoc_insertion_point(field_add:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >*
RecordPageloadMetricsRequest::mutable_pageloads() {
  // @@protoc_insertion_point(field_mutable_list:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return &pageloads_;
}
inline const ::google::protobuf::RepeatedPtrField< ::data_reduction_proxy::PageloadMetrics >&
RecordPageloadMetricsRequest::pageloads() const {
  // @@protoc_insertion_point(field_list:data_reduction_proxy.RecordPageloadMetricsRequest.pageloads)
  return pageloads_;
}

// optional .data_reduction_proxy.Timestamp metrics_sent_time = 2;
inline bool RecordPageloadMetricsRequest::has_metrics_sent_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordPageloadMetricsRequest::set_has_metrics_sent_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordPageloadMetricsRequest::clear_has_metrics_sent_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordPageloadMetricsRequest::clear_metrics_sent_time() {
  if (metrics_sent_time_ != NULL) metrics_sent_time_->::data_reduction_proxy::Timestamp::Clear();
  clear_has_metrics_sent_time();
}
inline const ::data_reduction_proxy::Timestamp& RecordPageloadMetricsRequest::metrics_sent_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
  return metrics_sent_time_ != NULL ? *metrics_sent_time_
                         : *::data_reduction_proxy::Timestamp::internal_default_instance();
}
inline ::data_reduction_proxy::Timestamp* RecordPageloadMetricsRequest::mutable_metrics_sent_time() {
  set_has_metrics_sent_time();
  if (metrics_sent_time_ == NULL) {
    metrics_sent_time_ = new ::data_reduction_proxy::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
  return metrics_sent_time_;
}
inline ::data_reduction_proxy::Timestamp* RecordPageloadMetricsRequest::release_metrics_sent_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
  clear_has_metrics_sent_time();
  ::data_reduction_proxy::Timestamp* temp = metrics_sent_time_;
  metrics_sent_time_ = NULL;
  return temp;
}
inline void RecordPageloadMetricsRequest::set_allocated_metrics_sent_time(::data_reduction_proxy::Timestamp* metrics_sent_time) {
  delete metrics_sent_time_;
  metrics_sent_time_ = metrics_sent_time;
  if (metrics_sent_time) {
    set_has_metrics_sent_time();
  } else {
    clear_has_metrics_sent_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.RecordPageloadMetricsRequest.metrics_sent_time)
}

// optional .data_reduction_proxy.PageloadDeviceInfo device_info = 3;
inline bool RecordPageloadMetricsRequest::has_device_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordPageloadMetricsRequest::set_has_device_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordPageloadMetricsRequest::clear_has_device_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordPageloadMetricsRequest::clear_device_info() {
  if (device_info_ != NULL) device_info_->::data_reduction_proxy::PageloadDeviceInfo::Clear();
  clear_has_device_info();
}
inline const ::data_reduction_proxy::PageloadDeviceInfo& RecordPageloadMetricsRequest::device_info() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.RecordPageloadMetricsRequest.device_info)
  return device_info_ != NULL ? *device_info_
                         : *::data_reduction_proxy::PageloadDeviceInfo::internal_default_instance();
}
inline ::data_reduction_proxy::PageloadDeviceInfo* RecordPageloadMetricsRequest::mutable_device_info() {
  set_has_device_info();
  if (device_info_ == NULL) {
    device_info_ = new ::data_reduction_proxy::PageloadDeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.RecordPageloadMetricsRequest.device_info)
  return device_info_;
}
inline ::data_reduction_proxy::PageloadDeviceInfo* RecordPageloadMetricsRequest::release_device_info() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.RecordPageloadMetricsRequest.device_info)
  clear_has_device_info();
  ::data_reduction_proxy::PageloadDeviceInfo* temp = device_info_;
  device_info_ = NULL;
  return temp;
}
inline void RecordPageloadMetricsRequest::set_allocated_device_info(::data_reduction_proxy::PageloadDeviceInfo* device_info) {
  delete device_info_;
  device_info_ = device_info;
  if (device_info) {
    set_has_device_info();
  } else {
    clear_has_device_info();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.RecordPageloadMetricsRequest.device_info)
}

// -------------------------------------------------------------------

// PageloadMetrics

// optional string session_key = 1;
inline bool PageloadMetrics::has_session_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageloadMetrics::set_has_session_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageloadMetrics::clear_has_session_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageloadMetrics::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_key();
}
inline const ::std::string& PageloadMetrics::session_key() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.session_key)
  return session_key_.GetNoArena();
}
inline void PageloadMetrics::set_session_key(const ::std::string& value) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.session_key)
}
#if LANG_CXX11
inline void PageloadMetrics::set_session_key(::std::string&& value) {
  set_has_session_key();
  session_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.PageloadMetrics.session_key)
}
#endif
inline void PageloadMetrics::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.session_key)
}
inline void PageloadMetrics::set_session_key(const char* value, size_t size) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.session_key)
}
inline ::std::string* PageloadMetrics::mutable_session_key() {
  set_has_session_key();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.session_key)
  return session_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageloadMetrics::release_session_key() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.session_key)
  clear_has_session_key();
  return session_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageloadMetrics::set_allocated_session_key(::std::string* session_key) {
  if (session_key != NULL) {
    set_has_session_key();
  } else {
    clear_has_session_key();
  }
  session_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.session_key)
}

// optional .data_reduction_proxy.Timestamp first_request_time = 2;
inline bool PageloadMetrics::has_first_request_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PageloadMetrics::set_has_first_request_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PageloadMetrics::clear_has_first_request_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PageloadMetrics::clear_first_request_time() {
  if (first_request_time_ != NULL) first_request_time_->::data_reduction_proxy::Timestamp::Clear();
  clear_has_first_request_time();
}
inline const ::data_reduction_proxy::Timestamp& PageloadMetrics::first_request_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.first_request_time)
  return first_request_time_ != NULL ? *first_request_time_
                         : *::data_reduction_proxy::Timestamp::internal_default_instance();
}
inline ::data_reduction_proxy::Timestamp* PageloadMetrics::mutable_first_request_time() {
  set_has_first_request_time();
  if (first_request_time_ == NULL) {
    first_request_time_ = new ::data_reduction_proxy::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.first_request_time)
  return first_request_time_;
}
inline ::data_reduction_proxy::Timestamp* PageloadMetrics::release_first_request_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.first_request_time)
  clear_has_first_request_time();
  ::data_reduction_proxy::Timestamp* temp = first_request_time_;
  first_request_time_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_first_request_time(::data_reduction_proxy::Timestamp* first_request_time) {
  delete first_request_time_;
  first_request_time_ = first_request_time;
  if (first_request_time) {
    set_has_first_request_time();
  } else {
    clear_has_first_request_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.first_request_time)
}

// optional string first_request_url = 4;
inline bool PageloadMetrics::has_first_request_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageloadMetrics::set_has_first_request_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PageloadMetrics::clear_has_first_request_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PageloadMetrics::clear_first_request_url() {
  first_request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_request_url();
}
inline const ::std::string& PageloadMetrics::first_request_url() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.first_request_url)
  return first_request_url_.GetNoArena();
}
inline void PageloadMetrics::set_first_request_url(const ::std::string& value) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.first_request_url)
}
#if LANG_CXX11
inline void PageloadMetrics::set_first_request_url(::std::string&& value) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.PageloadMetrics.first_request_url)
}
#endif
inline void PageloadMetrics::set_first_request_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.first_request_url)
}
inline void PageloadMetrics::set_first_request_url(const char* value, size_t size) {
  set_has_first_request_url();
  first_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.first_request_url)
}
inline ::std::string* PageloadMetrics::mutable_first_request_url() {
  set_has_first_request_url();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.first_request_url)
  return first_request_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageloadMetrics::release_first_request_url() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.first_request_url)
  clear_has_first_request_url();
  return first_request_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageloadMetrics::set_allocated_first_request_url(::std::string* first_request_url) {
  if (first_request_url != NULL) {
    set_has_first_request_url();
  } else {
    clear_has_first_request_url();
  }
  first_request_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_request_url);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.first_request_url)
}

// optional string last_request_url = 5;
inline bool PageloadMetrics::has_last_request_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PageloadMetrics::set_has_last_request_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PageloadMetrics::clear_has_last_request_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PageloadMetrics::clear_last_request_url() {
  last_request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_request_url();
}
inline const ::std::string& PageloadMetrics::last_request_url() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.last_request_url)
  return last_request_url_.GetNoArena();
}
inline void PageloadMetrics::set_last_request_url(const ::std::string& value) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.last_request_url)
}
#if LANG_CXX11
inline void PageloadMetrics::set_last_request_url(::std::string&& value) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.PageloadMetrics.last_request_url)
}
#endif
inline void PageloadMetrics::set_last_request_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.last_request_url)
}
inline void PageloadMetrics::set_last_request_url(const char* value, size_t size) {
  set_has_last_request_url();
  last_request_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.last_request_url)
}
inline ::std::string* PageloadMetrics::mutable_last_request_url() {
  set_has_last_request_url();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.last_request_url)
  return last_request_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageloadMetrics::release_last_request_url() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.last_request_url)
  clear_has_last_request_url();
  return last_request_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageloadMetrics::set_allocated_last_request_url(::std::string* last_request_url) {
  if (last_request_url != NULL) {
    set_has_last_request_url();
  } else {
    clear_has_last_request_url();
  }
  last_request_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_request_url);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.last_request_url)
}

// optional .data_reduction_proxy.Duration time_to_first_contentful_paint = 6;
inline bool PageloadMetrics::has_time_to_first_contentful_paint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PageloadMetrics::set_has_time_to_first_contentful_paint() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PageloadMetrics::clear_has_time_to_first_contentful_paint() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PageloadMetrics::clear_time_to_first_contentful_paint() {
  if (time_to_first_contentful_paint_ != NULL) time_to_first_contentful_paint_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_contentful_paint();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_contentful_paint() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
  return time_to_first_contentful_paint_ != NULL ? *time_to_first_contentful_paint_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_contentful_paint() {
  set_has_time_to_first_contentful_paint();
  if (time_to_first_contentful_paint_ == NULL) {
    time_to_first_contentful_paint_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
  return time_to_first_contentful_paint_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_contentful_paint() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
  clear_has_time_to_first_contentful_paint();
  ::data_reduction_proxy::Duration* temp = time_to_first_contentful_paint_;
  time_to_first_contentful_paint_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_time_to_first_contentful_paint(::data_reduction_proxy::Duration* time_to_first_contentful_paint) {
  delete time_to_first_contentful_paint_;
  time_to_first_contentful_paint_ = time_to_first_contentful_paint;
  if (time_to_first_contentful_paint) {
    set_has_time_to_first_contentful_paint();
  } else {
    clear_has_time_to_first_contentful_paint();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_contentful_paint)
}

// optional .data_reduction_proxy.Duration time_to_first_image_paint = 7;
inline bool PageloadMetrics::has_time_to_first_image_paint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PageloadMetrics::set_has_time_to_first_image_paint() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PageloadMetrics::clear_has_time_to_first_image_paint() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PageloadMetrics::clear_time_to_first_image_paint() {
  if (time_to_first_image_paint_ != NULL) time_to_first_image_paint_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_image_paint();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_image_paint() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
  return time_to_first_image_paint_ != NULL ? *time_to_first_image_paint_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_image_paint() {
  set_has_time_to_first_image_paint();
  if (time_to_first_image_paint_ == NULL) {
    time_to_first_image_paint_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
  return time_to_first_image_paint_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_image_paint() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
  clear_has_time_to_first_image_paint();
  ::data_reduction_proxy::Duration* temp = time_to_first_image_paint_;
  time_to_first_image_paint_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_time_to_first_image_paint(::data_reduction_proxy::Duration* time_to_first_image_paint) {
  delete time_to_first_image_paint_;
  time_to_first_image_paint_ = time_to_first_image_paint;
  if (time_to_first_image_paint) {
    set_has_time_to_first_image_paint();
  } else {
    clear_has_time_to_first_image_paint();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_image_paint)
}

// optional .data_reduction_proxy.Duration time_to_first_byte = 8;
inline bool PageloadMetrics::has_time_to_first_byte() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PageloadMetrics::set_has_time_to_first_byte() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PageloadMetrics::clear_has_time_to_first_byte() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PageloadMetrics::clear_time_to_first_byte() {
  if (time_to_first_byte_ != NULL) time_to_first_byte_->::data_reduction_proxy::Duration::Clear();
  clear_has_time_to_first_byte();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::time_to_first_byte() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
  return time_to_first_byte_ != NULL ? *time_to_first_byte_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_time_to_first_byte() {
  set_has_time_to_first_byte();
  if (time_to_first_byte_ == NULL) {
    time_to_first_byte_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
  return time_to_first_byte_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_time_to_first_byte() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
  clear_has_time_to_first_byte();
  ::data_reduction_proxy::Duration* temp = time_to_first_byte_;
  time_to_first_byte_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_time_to_first_byte(::data_reduction_proxy::Duration* time_to_first_byte) {
  delete time_to_first_byte_;
  time_to_first_byte_ = time_to_first_byte;
  if (time_to_first_byte) {
    set_has_time_to_first_byte();
  } else {
    clear_has_time_to_first_byte();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.time_to_first_byte)
}

// optional .data_reduction_proxy.Duration page_load_time = 9;
inline bool PageloadMetrics::has_page_load_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PageloadMetrics::set_has_page_load_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PageloadMetrics::clear_has_page_load_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PageloadMetrics::clear_page_load_time() {
  if (page_load_time_ != NULL) page_load_time_->::data_reduction_proxy::Duration::Clear();
  clear_has_page_load_time();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::page_load_time() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.page_load_time)
  return page_load_time_ != NULL ? *page_load_time_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_page_load_time() {
  set_has_page_load_time();
  if (page_load_time_ == NULL) {
    page_load_time_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.page_load_time)
  return page_load_time_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_page_load_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.page_load_time)
  clear_has_page_load_time();
  ::data_reduction_proxy::Duration* temp = page_load_time_;
  page_load_time_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_page_load_time(::data_reduction_proxy::Duration* page_load_time) {
  delete page_load_time_;
  page_load_time_ = page_load_time;
  if (page_load_time) {
    set_has_page_load_time();
  } else {
    clear_has_page_load_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.page_load_time)
}

// optional int64 original_page_size_bytes = 10;
inline bool PageloadMetrics::has_original_page_size_bytes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PageloadMetrics::set_has_original_page_size_bytes() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PageloadMetrics::clear_has_original_page_size_bytes() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PageloadMetrics::clear_original_page_size_bytes() {
  original_page_size_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_original_page_size_bytes();
}
inline ::google::protobuf::int64 PageloadMetrics::original_page_size_bytes() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.original_page_size_bytes)
  return original_page_size_bytes_;
}
inline void PageloadMetrics::set_original_page_size_bytes(::google::protobuf::int64 value) {
  set_has_original_page_size_bytes();
  original_page_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.original_page_size_bytes)
}

// optional int64 compressed_page_size_bytes = 11;
inline bool PageloadMetrics::has_compressed_page_size_bytes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PageloadMetrics::set_has_compressed_page_size_bytes() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PageloadMetrics::clear_has_compressed_page_size_bytes() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PageloadMetrics::clear_compressed_page_size_bytes() {
  compressed_page_size_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_compressed_page_size_bytes();
}
inline ::google::protobuf::int64 PageloadMetrics::compressed_page_size_bytes() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.compressed_page_size_bytes)
  return compressed_page_size_bytes_;
}
inline void PageloadMetrics::set_compressed_page_size_bytes(::google::protobuf::int64 value) {
  set_has_compressed_page_size_bytes();
  compressed_page_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.compressed_page_size_bytes)
}

// optional .data_reduction_proxy.PageloadMetrics.EffectiveConnectionType effective_connection_type = 12;
inline bool PageloadMetrics::has_effective_connection_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PageloadMetrics::set_has_effective_connection_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PageloadMetrics::clear_has_effective_connection_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PageloadMetrics::clear_effective_connection_type() {
  effective_connection_type_ = 0;
  clear_has_effective_connection_type();
}
inline ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType PageloadMetrics::effective_connection_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.effective_connection_type)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType >(effective_connection_type_);
}
inline void PageloadMetrics::set_effective_connection_type(::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType value) {
  assert(::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType_IsValid(value));
  set_has_effective_connection_type();
  effective_connection_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.effective_connection_type)
}

// optional .data_reduction_proxy.Duration parse_blocked_on_script_load_duration = 13;
inline bool PageloadMetrics::has_parse_blocked_on_script_load_duration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PageloadMetrics::set_has_parse_blocked_on_script_load_duration() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PageloadMetrics::clear_has_parse_blocked_on_script_load_duration() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PageloadMetrics::clear_parse_blocked_on_script_load_duration() {
  if (parse_blocked_on_script_load_duration_ != NULL) parse_blocked_on_script_load_duration_->::data_reduction_proxy::Duration::Clear();
  clear_has_parse_blocked_on_script_load_duration();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::parse_blocked_on_script_load_duration() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.parse_blocked_on_script_load_duration)
  return parse_blocked_on_script_load_duration_ != NULL ? *parse_blocked_on_script_load_duration_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_parse_blocked_on_script_load_duration() {
  set_has_parse_blocked_on_script_load_duration();
  if (parse_blocked_on_script_load_duration_ == NULL) {
    parse_blocked_on_script_load_duration_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.parse_blocked_on_script_load_duration)
  return parse_blocked_on_script_load_duration_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_parse_blocked_on_script_load_duration() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.parse_blocked_on_script_load_duration)
  clear_has_parse_blocked_on_script_load_duration();
  ::data_reduction_proxy::Duration* temp = parse_blocked_on_script_load_duration_;
  parse_blocked_on_script_load_duration_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_parse_blocked_on_script_load_duration(::data_reduction_proxy::Duration* parse_blocked_on_script_load_duration) {
  delete parse_blocked_on_script_load_duration_;
  parse_blocked_on_script_load_duration_ = parse_blocked_on_script_load_duration;
  if (parse_blocked_on_script_load_duration) {
    set_has_parse_blocked_on_script_load_duration();
  } else {
    clear_has_parse_blocked_on_script_load_duration();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.parse_blocked_on_script_load_duration)
}

// optional .data_reduction_proxy.Duration parse_stop = 14;
inline bool PageloadMetrics::has_parse_stop() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PageloadMetrics::set_has_parse_stop() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PageloadMetrics::clear_has_parse_stop() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PageloadMetrics::clear_parse_stop() {
  if (parse_stop_ != NULL) parse_stop_->::data_reduction_proxy::Duration::Clear();
  clear_has_parse_stop();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::parse_stop() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.parse_stop)
  return parse_stop_ != NULL ? *parse_stop_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_parse_stop() {
  set_has_parse_stop();
  if (parse_stop_ == NULL) {
    parse_stop_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.parse_stop)
  return parse_stop_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_parse_stop() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.parse_stop)
  clear_has_parse_stop();
  ::data_reduction_proxy::Duration* temp = parse_stop_;
  parse_stop_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_parse_stop(::data_reduction_proxy::Duration* parse_stop) {
  delete parse_stop_;
  parse_stop_ = parse_stop;
  if (parse_stop) {
    set_has_parse_stop();
  } else {
    clear_has_parse_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.parse_stop)
}

// optional .data_reduction_proxy.Duration experimental_time_to_first_meaningful_paint = 15;
inline bool PageloadMetrics::has_experimental_time_to_first_meaningful_paint() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PageloadMetrics::set_has_experimental_time_to_first_meaningful_paint() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PageloadMetrics::clear_has_experimental_time_to_first_meaningful_paint() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PageloadMetrics::clear_experimental_time_to_first_meaningful_paint() {
  if (experimental_time_to_first_meaningful_paint_ != NULL) experimental_time_to_first_meaningful_paint_->::data_reduction_proxy::Duration::Clear();
  clear_has_experimental_time_to_first_meaningful_paint();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::experimental_time_to_first_meaningful_paint() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.experimental_time_to_first_meaningful_paint)
  return experimental_time_to_first_meaningful_paint_ != NULL ? *experimental_time_to_first_meaningful_paint_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_experimental_time_to_first_meaningful_paint() {
  set_has_experimental_time_to_first_meaningful_paint();
  if (experimental_time_to_first_meaningful_paint_ == NULL) {
    experimental_time_to_first_meaningful_paint_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.experimental_time_to_first_meaningful_paint)
  return experimental_time_to_first_meaningful_paint_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_experimental_time_to_first_meaningful_paint() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.experimental_time_to_first_meaningful_paint)
  clear_has_experimental_time_to_first_meaningful_paint();
  ::data_reduction_proxy::Duration* temp = experimental_time_to_first_meaningful_paint_;
  experimental_time_to_first_meaningful_paint_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_experimental_time_to_first_meaningful_paint(::data_reduction_proxy::Duration* experimental_time_to_first_meaningful_paint) {
  delete experimental_time_to_first_meaningful_paint_;
  experimental_time_to_first_meaningful_paint_ = experimental_time_to_first_meaningful_paint;
  if (experimental_time_to_first_meaningful_paint) {
    set_has_experimental_time_to_first_meaningful_paint();
  } else {
    clear_has_experimental_time_to_first_meaningful_paint();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.experimental_time_to_first_meaningful_paint)
}

// optional uint64 page_id = 16;
inline bool PageloadMetrics::has_page_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PageloadMetrics::set_has_page_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PageloadMetrics::clear_has_page_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PageloadMetrics::clear_page_id() {
  page_id_ = GOOGLE_ULONGLONG(0);
  clear_has_page_id();
}
inline ::google::protobuf::uint64 PageloadMetrics::page_id() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.page_id)
  return page_id_;
}
inline void PageloadMetrics::set_page_id(::google::protobuf::uint64 value) {
  set_has_page_id();
  page_id_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.page_id)
}

// optional .data_reduction_proxy.PageloadMetrics.PreviewsOptOut previews_opt_out = 17;
inline bool PageloadMetrics::has_previews_opt_out() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PageloadMetrics::set_has_previews_opt_out() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PageloadMetrics::clear_has_previews_opt_out() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PageloadMetrics::clear_previews_opt_out() {
  previews_opt_out_ = 0;
  clear_has_previews_opt_out();
}
inline ::data_reduction_proxy::PageloadMetrics_PreviewsOptOut PageloadMetrics::previews_opt_out() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.previews_opt_out)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_PreviewsOptOut >(previews_opt_out_);
}
inline void PageloadMetrics::set_previews_opt_out(::data_reduction_proxy::PageloadMetrics_PreviewsOptOut value) {
  assert(::data_reduction_proxy::PageloadMetrics_PreviewsOptOut_IsValid(value));
  set_has_previews_opt_out();
  previews_opt_out_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.previews_opt_out)
}

// optional .data_reduction_proxy.PageloadMetrics.PreviewsType previews_type = 18;
inline bool PageloadMetrics::has_previews_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PageloadMetrics::set_has_previews_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PageloadMetrics::clear_has_previews_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PageloadMetrics::clear_previews_type() {
  previews_type_ = 0;
  clear_has_previews_type();
}
inline ::data_reduction_proxy::PageloadMetrics_PreviewsType PageloadMetrics::previews_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.previews_type)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_PreviewsType >(previews_type_);
}
inline void PageloadMetrics::set_previews_type(::data_reduction_proxy::PageloadMetrics_PreviewsType value) {
  assert(::data_reduction_proxy::PageloadMetrics_PreviewsType_IsValid(value));
  set_has_previews_type();
  previews_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.previews_type)
}

// optional string holdback_group = 19;
inline bool PageloadMetrics::has_holdback_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PageloadMetrics::set_has_holdback_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PageloadMetrics::clear_has_holdback_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PageloadMetrics::clear_holdback_group() {
  holdback_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holdback_group();
}
inline const ::std::string& PageloadMetrics::holdback_group() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.holdback_group)
  return holdback_group_.GetNoArena();
}
inline void PageloadMetrics::set_holdback_group(const ::std::string& value) {
  set_has_holdback_group();
  holdback_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.holdback_group)
}
#if LANG_CXX11
inline void PageloadMetrics::set_holdback_group(::std::string&& value) {
  set_has_holdback_group();
  holdback_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.PageloadMetrics.holdback_group)
}
#endif
inline void PageloadMetrics::set_holdback_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_holdback_group();
  holdback_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PageloadMetrics.holdback_group)
}
inline void PageloadMetrics::set_holdback_group(const char* value, size_t size) {
  set_has_holdback_group();
  holdback_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PageloadMetrics.holdback_group)
}
inline ::std::string* PageloadMetrics::mutable_holdback_group() {
  set_has_holdback_group();
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.holdback_group)
  return holdback_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageloadMetrics::release_holdback_group() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.holdback_group)
  clear_has_holdback_group();
  return holdback_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageloadMetrics::set_allocated_holdback_group(::std::string* holdback_group) {
  if (holdback_group != NULL) {
    set_has_holdback_group();
  } else {
    clear_has_holdback_group();
  }
  holdback_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holdback_group);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.holdback_group)
}

// optional int64 renderer_memory_usage_kb = 20;
inline bool PageloadMetrics::has_renderer_memory_usage_kb() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PageloadMetrics::set_has_renderer_memory_usage_kb() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PageloadMetrics::clear_has_renderer_memory_usage_kb() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PageloadMetrics::clear_renderer_memory_usage_kb() {
  renderer_memory_usage_kb_ = GOOGLE_LONGLONG(0);
  clear_has_renderer_memory_usage_kb();
}
inline ::google::protobuf::int64 PageloadMetrics::renderer_memory_usage_kb() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.renderer_memory_usage_kb)
  return renderer_memory_usage_kb_;
}
inline void PageloadMetrics::set_renderer_memory_usage_kb(::google::protobuf::int64 value) {
  set_has_renderer_memory_usage_kb();
  renderer_memory_usage_kb_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.renderer_memory_usage_kb)
}

// optional .data_reduction_proxy.PageloadMetrics.RendererCrashType renderer_crash_type = 21;
inline bool PageloadMetrics::has_renderer_crash_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PageloadMetrics::set_has_renderer_crash_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PageloadMetrics::clear_has_renderer_crash_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PageloadMetrics::clear_renderer_crash_type() {
  renderer_crash_type_ = 0;
  clear_has_renderer_crash_type();
}
inline ::data_reduction_proxy::PageloadMetrics_RendererCrashType PageloadMetrics::renderer_crash_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.renderer_crash_type)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_RendererCrashType >(renderer_crash_type_);
}
inline void PageloadMetrics::set_renderer_crash_type(::data_reduction_proxy::PageloadMetrics_RendererCrashType value) {
  assert(::data_reduction_proxy::PageloadMetrics_RendererCrashType_IsValid(value));
  set_has_renderer_crash_type();
  renderer_crash_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.renderer_crash_type)
}

// optional float cached_fraction = 22;
inline bool PageloadMetrics::has_cached_fraction() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PageloadMetrics::set_has_cached_fraction() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PageloadMetrics::clear_has_cached_fraction() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PageloadMetrics::clear_cached_fraction() {
  cached_fraction_ = 0;
  clear_has_cached_fraction();
}
inline float PageloadMetrics::cached_fraction() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.cached_fraction)
  return cached_fraction_;
}
inline void PageloadMetrics::set_cached_fraction(float value) {
  set_has_cached_fraction();
  cached_fraction_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.cached_fraction)
}

// optional .data_reduction_proxy.PageloadMetrics.ConnectionType connection_type = 23;
inline bool PageloadMetrics::has_connection_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PageloadMetrics::set_has_connection_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PageloadMetrics::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PageloadMetrics::clear_connection_type() {
  connection_type_ = 0;
  clear_has_connection_type();
}
inline ::data_reduction_proxy::PageloadMetrics_ConnectionType PageloadMetrics::connection_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.connection_type)
  return static_cast< ::data_reduction_proxy::PageloadMetrics_ConnectionType >(connection_type_);
}
inline void PageloadMetrics::set_connection_type(::data_reduction_proxy::PageloadMetrics_ConnectionType value) {
  assert(::data_reduction_proxy::PageloadMetrics_ConnectionType_IsValid(value));
  set_has_connection_type();
  connection_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.connection_type)
}

// optional int64 total_page_size_bytes = 24;
inline bool PageloadMetrics::has_total_page_size_bytes() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PageloadMetrics::set_has_total_page_size_bytes() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PageloadMetrics::clear_has_total_page_size_bytes() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PageloadMetrics::clear_total_page_size_bytes() {
  total_page_size_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_total_page_size_bytes();
}
inline ::google::protobuf::int64 PageloadMetrics::total_page_size_bytes() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.total_page_size_bytes)
  return total_page_size_bytes_;
}
inline void PageloadMetrics::set_total_page_size_bytes(::google::protobuf::int64 value) {
  set_has_total_page_size_bytes();
  total_page_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PageloadMetrics.total_page_size_bytes)
}

// optional .data_reduction_proxy.Duration first_input_delay = 25;
inline bool PageloadMetrics::has_first_input_delay() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PageloadMetrics::set_has_first_input_delay() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PageloadMetrics::clear_has_first_input_delay() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PageloadMetrics::clear_first_input_delay() {
  if (first_input_delay_ != NULL) first_input_delay_->::data_reduction_proxy::Duration::Clear();
  clear_has_first_input_delay();
}
inline const ::data_reduction_proxy::Duration& PageloadMetrics::first_input_delay() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PageloadMetrics.first_input_delay)
  return first_input_delay_ != NULL ? *first_input_delay_
                         : *::data_reduction_proxy::Duration::internal_default_instance();
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::mutable_first_input_delay() {
  set_has_first_input_delay();
  if (first_input_delay_ == NULL) {
    first_input_delay_ = new ::data_reduction_proxy::Duration;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PageloadMetrics.first_input_delay)
  return first_input_delay_;
}
inline ::data_reduction_proxy::Duration* PageloadMetrics::release_first_input_delay() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PageloadMetrics.first_input_delay)
  clear_has_first_input_delay();
  ::data_reduction_proxy::Duration* temp = first_input_delay_;
  first_input_delay_ = NULL;
  return temp;
}
inline void PageloadMetrics::set_allocated_first_input_delay(::data_reduction_proxy::Duration* first_input_delay) {
  delete first_input_delay_;
  first_input_delay_ = first_input_delay;
  if (first_input_delay) {
    set_has_first_input_delay();
  } else {
    clear_has_first_input_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PageloadMetrics.first_input_delay)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace data_reduction_proxy

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::data_reduction_proxy::PageloadMetrics_EffectiveConnectionType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::data_reduction_proxy::PageloadMetrics_ConnectionType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::data_reduction_proxy::PageloadMetrics_PreviewsOptOut> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::data_reduction_proxy::PageloadMetrics_PreviewsType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::data_reduction_proxy::PageloadMetrics_RendererCrashType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pageload_5fmetrics_2eproto__INCLUDED
