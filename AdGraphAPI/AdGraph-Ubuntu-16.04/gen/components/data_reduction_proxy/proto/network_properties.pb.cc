// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_properties.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network_properties.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace data_reduction_proxy {
class ProxyFlagsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProxyFlags> {
} _ProxyFlags_default_instance_;
class NetworkPropertiesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkProperties> {
} _NetworkProperties_default_instance_;

namespace protobuf_network_5fproperties_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ProxyFlags_default_instance_.Shutdown();
  _NetworkProperties_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProxyFlags_default_instance_.DefaultConstruct();
  _NetworkProperties_default_instance_.DefaultConstruct();
  _NetworkProperties_default_instance_.get_mutable()->secure_proxy_flags_ = const_cast< ::data_reduction_proxy::ProxyFlags*>(
      ::data_reduction_proxy::ProxyFlags::internal_default_instance());
  _NetworkProperties_default_instance_.get_mutable()->insecure_proxy_flags_ = const_cast< ::data_reduction_proxy::ProxyFlags*>(
      ::data_reduction_proxy::ProxyFlags::internal_default_instance());
  _NetworkProperties_default_instance_.get_mutable()->secure_non_core_proxy_flags_ = const_cast< ::data_reduction_proxy::ProxyFlags*>(
      ::data_reduction_proxy::ProxyFlags::internal_default_instance());
  _NetworkProperties_default_instance_.get_mutable()->insecure_non_core_proxy_flags_ = const_cast< ::data_reduction_proxy::ProxyFlags*>(
      ::data_reduction_proxy::ProxyFlags::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_network_5fproperties_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProxyFlags::kDisallowedDueToWarmupProbeFailureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProxyFlags::ProxyFlags()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_network_5fproperties_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.ProxyFlags)
}
ProxyFlags::ProxyFlags(const ProxyFlags& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disallowed_due_to_warmup_probe_failure_ = from.disallowed_due_to_warmup_probe_failure_;
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.ProxyFlags)
}

void ProxyFlags::SharedCtor() {
  _cached_size_ = 0;
  disallowed_due_to_warmup_probe_failure_ = false;
}

ProxyFlags::~ProxyFlags() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.ProxyFlags)
  SharedDtor();
}

void ProxyFlags::SharedDtor() {
}

void ProxyFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProxyFlags& ProxyFlags::default_instance() {
  protobuf_network_5fproperties_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProxyFlags* ProxyFlags::New(::google::protobuf::Arena* arena) const {
  ProxyFlags* n = new ProxyFlags;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProxyFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.ProxyFlags)
  disallowed_due_to_warmup_probe_failure_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProxyFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.ProxyFlags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool disallowed_due_to_warmup_probe_failure = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_disallowed_due_to_warmup_probe_failure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disallowed_due_to_warmup_probe_failure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.ProxyFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.ProxyFlags)
  return false;
#undef DO_
}

void ProxyFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.ProxyFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool disallowed_due_to_warmup_probe_failure = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disallowed_due_to_warmup_probe_failure(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.ProxyFlags)
}

size_t ProxyFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.ProxyFlags)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional bool disallowed_due_to_warmup_probe_failure = 1;
  if (has_disallowed_due_to_warmup_probe_failure()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProxyFlags*>(&from));
}

void ProxyFlags::MergeFrom(const ProxyFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.ProxyFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_disallowed_due_to_warmup_probe_failure()) {
    set_disallowed_due_to_warmup_probe_failure(from.disallowed_due_to_warmup_probe_failure());
  }
}

void ProxyFlags::CopyFrom(const ProxyFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.ProxyFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyFlags::IsInitialized() const {
  return true;
}

void ProxyFlags::Swap(ProxyFlags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProxyFlags::InternalSwap(ProxyFlags* other) {
  std::swap(disallowed_due_to_warmup_probe_failure_, other->disallowed_due_to_warmup_probe_failure_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProxyFlags::GetTypeName() const {
  return "data_reduction_proxy.ProxyFlags";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProxyFlags

// optional bool disallowed_due_to_warmup_probe_failure = 1;
bool ProxyFlags::has_disallowed_due_to_warmup_probe_failure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProxyFlags::set_has_disallowed_due_to_warmup_probe_failure() {
  _has_bits_[0] |= 0x00000001u;
}
void ProxyFlags::clear_has_disallowed_due_to_warmup_probe_failure() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProxyFlags::clear_disallowed_due_to_warmup_probe_failure() {
  disallowed_due_to_warmup_probe_failure_ = false;
  clear_has_disallowed_due_to_warmup_probe_failure();
}
bool ProxyFlags::disallowed_due_to_warmup_probe_failure() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ProxyFlags.disallowed_due_to_warmup_probe_failure)
  return disallowed_due_to_warmup_probe_failure_;
}
void ProxyFlags::set_disallowed_due_to_warmup_probe_failure(bool value) {
  set_has_disallowed_due_to_warmup_probe_failure();
  disallowed_due_to_warmup_probe_failure_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.ProxyFlags.disallowed_due_to_warmup_probe_failure)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkProperties::kSecureProxyDisallowedByCarrierFieldNumber;
const int NetworkProperties::kHasCaptivePortalFieldNumber;
const int NetworkProperties::kSecureProxyFlagsFieldNumber;
const int NetworkProperties::kInsecureProxyFlagsFieldNumber;
const int NetworkProperties::kLastModifiedFieldNumber;
const int NetworkProperties::kSecureNonCoreProxyFlagsFieldNumber;
const int NetworkProperties::kInsecureNonCoreProxyFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkProperties::NetworkProperties()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_network_5fproperties_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_reduction_proxy.NetworkProperties)
}
NetworkProperties::NetworkProperties(const NetworkProperties& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_secure_proxy_flags()) {
    secure_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags(*from.secure_proxy_flags_);
  } else {
    secure_proxy_flags_ = NULL;
  }
  if (from.has_insecure_proxy_flags()) {
    insecure_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags(*from.insecure_proxy_flags_);
  } else {
    insecure_proxy_flags_ = NULL;
  }
  if (from.has_secure_non_core_proxy_flags()) {
    secure_non_core_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags(*from.secure_non_core_proxy_flags_);
  } else {
    secure_non_core_proxy_flags_ = NULL;
  }
  if (from.has_insecure_non_core_proxy_flags()) {
    insecure_non_core_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags(*from.insecure_non_core_proxy_flags_);
  } else {
    insecure_non_core_proxy_flags_ = NULL;
  }
  ::memcpy(&last_modified_, &from.last_modified_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_captive_portal_) -
    reinterpret_cast<char*>(&last_modified_)) + sizeof(has_captive_portal_));
  // @@protoc_insertion_point(copy_constructor:data_reduction_proxy.NetworkProperties)
}

void NetworkProperties::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&secure_proxy_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_captive_portal_) -
      reinterpret_cast<char*>(&secure_proxy_flags_)) + sizeof(has_captive_portal_));
}

NetworkProperties::~NetworkProperties() {
  // @@protoc_insertion_point(destructor:data_reduction_proxy.NetworkProperties)
  SharedDtor();
}

void NetworkProperties::SharedDtor() {
  if (this != internal_default_instance()) {
    delete secure_proxy_flags_;
  }
  if (this != internal_default_instance()) {
    delete insecure_proxy_flags_;
  }
  if (this != internal_default_instance()) {
    delete secure_non_core_proxy_flags_;
  }
  if (this != internal_default_instance()) {
    delete insecure_non_core_proxy_flags_;
  }
}

void NetworkProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkProperties& NetworkProperties::default_instance() {
  protobuf_network_5fproperties_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkProperties* NetworkProperties::New(::google::protobuf::Arena* arena) const {
  NetworkProperties* n = new NetworkProperties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:data_reduction_proxy.NetworkProperties)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_secure_proxy_flags()) {
      GOOGLE_DCHECK(secure_proxy_flags_ != NULL);
      secure_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
    }
    if (has_insecure_proxy_flags()) {
      GOOGLE_DCHECK(insecure_proxy_flags_ != NULL);
      insecure_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
    }
    if (has_secure_non_core_proxy_flags()) {
      GOOGLE_DCHECK(secure_non_core_proxy_flags_ != NULL);
      secure_non_core_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
    }
    if (has_insecure_non_core_proxy_flags()) {
      GOOGLE_DCHECK(insecure_non_core_proxy_flags_ != NULL);
      insecure_non_core_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&last_modified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_captive_portal_) -
        reinterpret_cast<char*>(&last_modified_)) + sizeof(has_captive_portal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:data_reduction_proxy.NetworkProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool secure_proxy_disallowed_by_carrier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_secure_proxy_disallowed_by_carrier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_proxy_disallowed_by_carrier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_captive_portal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_has_captive_portal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_captive_portal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secure_proxy_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insecure_proxy_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_modified = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_last_modified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_modified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secure_non_core_proxy_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insecure_non_core_proxy_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_reduction_proxy.NetworkProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_reduction_proxy.NetworkProperties)
  return false;
#undef DO_
}

void NetworkProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_reduction_proxy.NetworkProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool secure_proxy_disallowed_by_carrier = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->secure_proxy_disallowed_by_carrier(), output);
  }

  // optional bool has_captive_portal = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_captive_portal(), output);
  }

  // optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->secure_proxy_flags_, output);
  }

  // optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->insecure_proxy_flags_, output);
  }

  // optional int64 last_modified = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_modified(), output);
  }

  // optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->secure_non_core_proxy_flags_, output);
  }

  // optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->insecure_non_core_proxy_flags_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:data_reduction_proxy.NetworkProperties)
}

size_t NetworkProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_reduction_proxy.NetworkProperties)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
    if (has_secure_proxy_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->secure_proxy_flags_);
    }

    // optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
    if (has_insecure_proxy_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->insecure_proxy_flags_);
    }

    // optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
    if (has_secure_non_core_proxy_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->secure_non_core_proxy_flags_);
    }

    // optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
    if (has_insecure_non_core_proxy_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->insecure_non_core_proxy_flags_);
    }

    // optional int64 last_modified = 5;
    if (has_last_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_modified());
    }

    // optional bool secure_proxy_disallowed_by_carrier = 1;
    if (has_secure_proxy_disallowed_by_carrier()) {
      total_size += 1 + 1;
    }

    // optional bool has_captive_portal = 2;
    if (has_has_captive_portal()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkProperties::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkProperties*>(&from));
}

void NetworkProperties::MergeFrom(const NetworkProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_reduction_proxy.NetworkProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_secure_proxy_flags()->::data_reduction_proxy::ProxyFlags::MergeFrom(from.secure_proxy_flags());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_insecure_proxy_flags()->::data_reduction_proxy::ProxyFlags::MergeFrom(from.insecure_proxy_flags());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_secure_non_core_proxy_flags()->::data_reduction_proxy::ProxyFlags::MergeFrom(from.secure_non_core_proxy_flags());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_insecure_non_core_proxy_flags()->::data_reduction_proxy::ProxyFlags::MergeFrom(from.insecure_non_core_proxy_flags());
    }
    if (cached_has_bits & 0x00000010u) {
      last_modified_ = from.last_modified_;
    }
    if (cached_has_bits & 0x00000020u) {
      secure_proxy_disallowed_by_carrier_ = from.secure_proxy_disallowed_by_carrier_;
    }
    if (cached_has_bits & 0x00000040u) {
      has_captive_portal_ = from.has_captive_portal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkProperties::CopyFrom(const NetworkProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_reduction_proxy.NetworkProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkProperties::IsInitialized() const {
  return true;
}

void NetworkProperties::Swap(NetworkProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkProperties::InternalSwap(NetworkProperties* other) {
  std::swap(secure_proxy_flags_, other->secure_proxy_flags_);
  std::swap(insecure_proxy_flags_, other->insecure_proxy_flags_);
  std::swap(secure_non_core_proxy_flags_, other->secure_non_core_proxy_flags_);
  std::swap(insecure_non_core_proxy_flags_, other->insecure_non_core_proxy_flags_);
  std::swap(last_modified_, other->last_modified_);
  std::swap(secure_proxy_disallowed_by_carrier_, other->secure_proxy_disallowed_by_carrier_);
  std::swap(has_captive_portal_, other->has_captive_portal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkProperties::GetTypeName() const {
  return "data_reduction_proxy.NetworkProperties";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkProperties

// optional bool secure_proxy_disallowed_by_carrier = 1;
bool NetworkProperties::has_secure_proxy_disallowed_by_carrier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetworkProperties::set_has_secure_proxy_disallowed_by_carrier() {
  _has_bits_[0] |= 0x00000020u;
}
void NetworkProperties::clear_has_secure_proxy_disallowed_by_carrier() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetworkProperties::clear_secure_proxy_disallowed_by_carrier() {
  secure_proxy_disallowed_by_carrier_ = false;
  clear_has_secure_proxy_disallowed_by_carrier();
}
bool NetworkProperties::secure_proxy_disallowed_by_carrier() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.secure_proxy_disallowed_by_carrier)
  return secure_proxy_disallowed_by_carrier_;
}
void NetworkProperties::set_secure_proxy_disallowed_by_carrier(bool value) {
  set_has_secure_proxy_disallowed_by_carrier();
  secure_proxy_disallowed_by_carrier_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.NetworkProperties.secure_proxy_disallowed_by_carrier)
}

// optional bool has_captive_portal = 2;
bool NetworkProperties::has_has_captive_portal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NetworkProperties::set_has_has_captive_portal() {
  _has_bits_[0] |= 0x00000040u;
}
void NetworkProperties::clear_has_has_captive_portal() {
  _has_bits_[0] &= ~0x00000040u;
}
void NetworkProperties::clear_has_captive_portal() {
  has_captive_portal_ = false;
  clear_has_has_captive_portal();
}
bool NetworkProperties::has_captive_portal() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.has_captive_portal)
  return has_captive_portal_;
}
void NetworkProperties::set_has_captive_portal(bool value) {
  set_has_has_captive_portal();
  has_captive_portal_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.NetworkProperties.has_captive_portal)
}

// optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
bool NetworkProperties::has_secure_proxy_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkProperties::set_has_secure_proxy_flags() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkProperties::clear_has_secure_proxy_flags() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkProperties::clear_secure_proxy_flags() {
  if (secure_proxy_flags_ != NULL) secure_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
  clear_has_secure_proxy_flags();
}
const ::data_reduction_proxy::ProxyFlags& NetworkProperties::secure_proxy_flags() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
  return secure_proxy_flags_ != NULL ? *secure_proxy_flags_
                         : *::data_reduction_proxy::ProxyFlags::internal_default_instance();
}
::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_secure_proxy_flags() {
  set_has_secure_proxy_flags();
  if (secure_proxy_flags_ == NULL) {
    secure_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
  return secure_proxy_flags_;
}
::data_reduction_proxy::ProxyFlags* NetworkProperties::release_secure_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
  clear_has_secure_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* temp = secure_proxy_flags_;
  secure_proxy_flags_ = NULL;
  return temp;
}
void NetworkProperties::set_allocated_secure_proxy_flags(::data_reduction_proxy::ProxyFlags* secure_proxy_flags) {
  delete secure_proxy_flags_;
  secure_proxy_flags_ = secure_proxy_flags;
  if (secure_proxy_flags) {
    set_has_secure_proxy_flags();
  } else {
    clear_has_secure_proxy_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
}

// optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
bool NetworkProperties::has_insecure_proxy_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkProperties::set_has_insecure_proxy_flags() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkProperties::clear_has_insecure_proxy_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkProperties::clear_insecure_proxy_flags() {
  if (insecure_proxy_flags_ != NULL) insecure_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
  clear_has_insecure_proxy_flags();
}
const ::data_reduction_proxy::ProxyFlags& NetworkProperties::insecure_proxy_flags() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
  return insecure_proxy_flags_ != NULL ? *insecure_proxy_flags_
                         : *::data_reduction_proxy::ProxyFlags::internal_default_instance();
}
::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_insecure_proxy_flags() {
  set_has_insecure_proxy_flags();
  if (insecure_proxy_flags_ == NULL) {
    insecure_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
  return insecure_proxy_flags_;
}
::data_reduction_proxy::ProxyFlags* NetworkProperties::release_insecure_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
  clear_has_insecure_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* temp = insecure_proxy_flags_;
  insecure_proxy_flags_ = NULL;
  return temp;
}
void NetworkProperties::set_allocated_insecure_proxy_flags(::data_reduction_proxy::ProxyFlags* insecure_proxy_flags) {
  delete insecure_proxy_flags_;
  insecure_proxy_flags_ = insecure_proxy_flags;
  if (insecure_proxy_flags) {
    set_has_insecure_proxy_flags();
  } else {
    clear_has_insecure_proxy_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
}

// optional int64 last_modified = 5;
bool NetworkProperties::has_last_modified() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetworkProperties::set_has_last_modified() {
  _has_bits_[0] |= 0x00000010u;
}
void NetworkProperties::clear_has_last_modified() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetworkProperties::clear_last_modified() {
  last_modified_ = GOOGLE_LONGLONG(0);
  clear_has_last_modified();
}
::google::protobuf::int64 NetworkProperties::last_modified() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.last_modified)
  return last_modified_;
}
void NetworkProperties::set_last_modified(::google::protobuf::int64 value) {
  set_has_last_modified();
  last_modified_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.NetworkProperties.last_modified)
}

// optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
bool NetworkProperties::has_secure_non_core_proxy_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkProperties::set_has_secure_non_core_proxy_flags() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkProperties::clear_has_secure_non_core_proxy_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkProperties::clear_secure_non_core_proxy_flags() {
  if (secure_non_core_proxy_flags_ != NULL) secure_non_core_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
  clear_has_secure_non_core_proxy_flags();
}
const ::data_reduction_proxy::ProxyFlags& NetworkProperties::secure_non_core_proxy_flags() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
  return secure_non_core_proxy_flags_ != NULL ? *secure_non_core_proxy_flags_
                         : *::data_reduction_proxy::ProxyFlags::internal_default_instance();
}
::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_secure_non_core_proxy_flags() {
  set_has_secure_non_core_proxy_flags();
  if (secure_non_core_proxy_flags_ == NULL) {
    secure_non_core_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
  return secure_non_core_proxy_flags_;
}
::data_reduction_proxy::ProxyFlags* NetworkProperties::release_secure_non_core_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
  clear_has_secure_non_core_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* temp = secure_non_core_proxy_flags_;
  secure_non_core_proxy_flags_ = NULL;
  return temp;
}
void NetworkProperties::set_allocated_secure_non_core_proxy_flags(::data_reduction_proxy::ProxyFlags* secure_non_core_proxy_flags) {
  delete secure_non_core_proxy_flags_;
  secure_non_core_proxy_flags_ = secure_non_core_proxy_flags;
  if (secure_non_core_proxy_flags) {
    set_has_secure_non_core_proxy_flags();
  } else {
    clear_has_secure_non_core_proxy_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
}

// optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
bool NetworkProperties::has_insecure_non_core_proxy_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetworkProperties::set_has_insecure_non_core_proxy_flags() {
  _has_bits_[0] |= 0x00000008u;
}
void NetworkProperties::clear_has_insecure_non_core_proxy_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetworkProperties::clear_insecure_non_core_proxy_flags() {
  if (insecure_non_core_proxy_flags_ != NULL) insecure_non_core_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
  clear_has_insecure_non_core_proxy_flags();
}
const ::data_reduction_proxy::ProxyFlags& NetworkProperties::insecure_non_core_proxy_flags() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
  return insecure_non_core_proxy_flags_ != NULL ? *insecure_non_core_proxy_flags_
                         : *::data_reduction_proxy::ProxyFlags::internal_default_instance();
}
::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_insecure_non_core_proxy_flags() {
  set_has_insecure_non_core_proxy_flags();
  if (insecure_non_core_proxy_flags_ == NULL) {
    insecure_non_core_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
  return insecure_non_core_proxy_flags_;
}
::data_reduction_proxy::ProxyFlags* NetworkProperties::release_insecure_non_core_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
  clear_has_insecure_non_core_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* temp = insecure_non_core_proxy_flags_;
  insecure_non_core_proxy_flags_ = NULL;
  return temp;
}
void NetworkProperties::set_allocated_insecure_non_core_proxy_flags(::data_reduction_proxy::ProxyFlags* insecure_non_core_proxy_flags) {
  delete insecure_non_core_proxy_flags_;
  insecure_non_core_proxy_flags_ = insecure_non_core_proxy_flags;
  if (insecure_non_core_proxy_flags) {
    set_has_insecure_non_core_proxy_flags();
  } else {
    clear_has_insecure_non_core_proxy_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data_reduction_proxy

// @@protoc_insertion_point(global_scope)
