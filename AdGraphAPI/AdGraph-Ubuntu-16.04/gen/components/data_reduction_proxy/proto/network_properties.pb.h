// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_properties.proto

#ifndef PROTOBUF_network_5fproperties_2eproto__INCLUDED
#define PROTOBUF_network_5fproperties_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace data_reduction_proxy {
class NetworkProperties;
class NetworkPropertiesDefaultTypeInternal;
extern NetworkPropertiesDefaultTypeInternal _NetworkProperties_default_instance_;
class ProxyFlags;
class ProxyFlagsDefaultTypeInternal;
extern ProxyFlagsDefaultTypeInternal _ProxyFlags_default_instance_;
}  // namespace data_reduction_proxy

namespace data_reduction_proxy {

namespace protobuf_network_5fproperties_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_network_5fproperties_2eproto

// ===================================================================

class ProxyFlags : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.ProxyFlags) */ {
 public:
  ProxyFlags();
  virtual ~ProxyFlags();

  ProxyFlags(const ProxyFlags& from);

  inline ProxyFlags& operator=(const ProxyFlags& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProxyFlags& default_instance();

  static inline const ProxyFlags* internal_default_instance() {
    return reinterpret_cast<const ProxyFlags*>(
               &_ProxyFlags_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ProxyFlags* other);

  // implements Message ----------------------------------------------

  inline ProxyFlags* New() const PROTOBUF_FINAL { return New(NULL); }

  ProxyFlags* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ProxyFlags& from);
  void MergeFrom(const ProxyFlags& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProxyFlags* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool disallowed_due_to_warmup_probe_failure = 1;
  bool has_disallowed_due_to_warmup_probe_failure() const;
  void clear_disallowed_due_to_warmup_probe_failure();
  static const int kDisallowedDueToWarmupProbeFailureFieldNumber = 1;
  bool disallowed_due_to_warmup_probe_failure() const;
  void set_disallowed_due_to_warmup_probe_failure(bool value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.ProxyFlags)
 private:
  void set_has_disallowed_due_to_warmup_probe_failure();
  void clear_has_disallowed_due_to_warmup_probe_failure();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool disallowed_due_to_warmup_probe_failure_;
  friend struct protobuf_network_5fproperties_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkProperties : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.NetworkProperties) */ {
 public:
  NetworkProperties();
  virtual ~NetworkProperties();

  NetworkProperties(const NetworkProperties& from);

  inline NetworkProperties& operator=(const NetworkProperties& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NetworkProperties& default_instance();

  static inline const NetworkProperties* internal_default_instance() {
    return reinterpret_cast<const NetworkProperties*>(
               &_NetworkProperties_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(NetworkProperties* other);

  // implements Message ----------------------------------------------

  inline NetworkProperties* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkProperties* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NetworkProperties& from);
  void MergeFrom(const NetworkProperties& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
  bool has_secure_proxy_flags() const;
  void clear_secure_proxy_flags();
  static const int kSecureProxyFlagsFieldNumber = 3;
  const ::data_reduction_proxy::ProxyFlags& secure_proxy_flags() const;
  ::data_reduction_proxy::ProxyFlags* mutable_secure_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* release_secure_proxy_flags();
  void set_allocated_secure_proxy_flags(::data_reduction_proxy::ProxyFlags* secure_proxy_flags);

  // optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
  bool has_insecure_proxy_flags() const;
  void clear_insecure_proxy_flags();
  static const int kInsecureProxyFlagsFieldNumber = 4;
  const ::data_reduction_proxy::ProxyFlags& insecure_proxy_flags() const;
  ::data_reduction_proxy::ProxyFlags* mutable_insecure_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* release_insecure_proxy_flags();
  void set_allocated_insecure_proxy_flags(::data_reduction_proxy::ProxyFlags* insecure_proxy_flags);

  // optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
  bool has_secure_non_core_proxy_flags() const;
  void clear_secure_non_core_proxy_flags();
  static const int kSecureNonCoreProxyFlagsFieldNumber = 6;
  const ::data_reduction_proxy::ProxyFlags& secure_non_core_proxy_flags() const;
  ::data_reduction_proxy::ProxyFlags* mutable_secure_non_core_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* release_secure_non_core_proxy_flags();
  void set_allocated_secure_non_core_proxy_flags(::data_reduction_proxy::ProxyFlags* secure_non_core_proxy_flags);

  // optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
  bool has_insecure_non_core_proxy_flags() const;
  void clear_insecure_non_core_proxy_flags();
  static const int kInsecureNonCoreProxyFlagsFieldNumber = 7;
  const ::data_reduction_proxy::ProxyFlags& insecure_non_core_proxy_flags() const;
  ::data_reduction_proxy::ProxyFlags* mutable_insecure_non_core_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* release_insecure_non_core_proxy_flags();
  void set_allocated_insecure_non_core_proxy_flags(::data_reduction_proxy::ProxyFlags* insecure_non_core_proxy_flags);

  // optional int64 last_modified = 5;
  bool has_last_modified() const;
  void clear_last_modified();
  static const int kLastModifiedFieldNumber = 5;
  ::google::protobuf::int64 last_modified() const;
  void set_last_modified(::google::protobuf::int64 value);

  // optional bool secure_proxy_disallowed_by_carrier = 1;
  bool has_secure_proxy_disallowed_by_carrier() const;
  void clear_secure_proxy_disallowed_by_carrier();
  static const int kSecureProxyDisallowedByCarrierFieldNumber = 1;
  bool secure_proxy_disallowed_by_carrier() const;
  void set_secure_proxy_disallowed_by_carrier(bool value);

  // optional bool has_captive_portal = 2;
  bool has_has_captive_portal() const;
  void clear_has_captive_portal();
  static const int kHasCaptivePortalFieldNumber = 2;
  bool has_captive_portal() const;
  void set_has_captive_portal(bool value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.NetworkProperties)
 private:
  void set_has_secure_proxy_disallowed_by_carrier();
  void clear_has_secure_proxy_disallowed_by_carrier();
  void set_has_has_captive_portal();
  void clear_has_has_captive_portal();
  void set_has_secure_proxy_flags();
  void clear_has_secure_proxy_flags();
  void set_has_insecure_proxy_flags();
  void clear_has_insecure_proxy_flags();
  void set_has_last_modified();
  void clear_has_last_modified();
  void set_has_secure_non_core_proxy_flags();
  void clear_has_secure_non_core_proxy_flags();
  void set_has_insecure_non_core_proxy_flags();
  void clear_has_insecure_non_core_proxy_flags();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::data_reduction_proxy::ProxyFlags* secure_proxy_flags_;
  ::data_reduction_proxy::ProxyFlags* insecure_proxy_flags_;
  ::data_reduction_proxy::ProxyFlags* secure_non_core_proxy_flags_;
  ::data_reduction_proxy::ProxyFlags* insecure_non_core_proxy_flags_;
  ::google::protobuf::int64 last_modified_;
  bool secure_proxy_disallowed_by_carrier_;
  bool has_captive_portal_;
  friend struct protobuf_network_5fproperties_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ProxyFlags

// optional bool disallowed_due_to_warmup_probe_failure = 1;
inline bool ProxyFlags::has_disallowed_due_to_warmup_probe_failure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProxyFlags::set_has_disallowed_due_to_warmup_probe_failure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProxyFlags::clear_has_disallowed_due_to_warmup_probe_failure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProxyFlags::clear_disallowed_due_to_warmup_probe_failure() {
  disallowed_due_to_warmup_probe_failure_ = false;
  clear_has_disallowed_due_to_warmup_probe_failure();
}
inline bool ProxyFlags::disallowed_due_to_warmup_probe_failure() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ProxyFlags.disallowed_due_to_warmup_probe_failure)
  return disallowed_due_to_warmup_probe_failure_;
}
inline void ProxyFlags::set_disallowed_due_to_warmup_probe_failure(bool value) {
  set_has_disallowed_due_to_warmup_probe_failure();
  disallowed_due_to_warmup_probe_failure_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.ProxyFlags.disallowed_due_to_warmup_probe_failure)
}

// -------------------------------------------------------------------

// NetworkProperties

// optional bool secure_proxy_disallowed_by_carrier = 1;
inline bool NetworkProperties::has_secure_proxy_disallowed_by_carrier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetworkProperties::set_has_secure_proxy_disallowed_by_carrier() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetworkProperties::clear_has_secure_proxy_disallowed_by_carrier() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetworkProperties::clear_secure_proxy_disallowed_by_carrier() {
  secure_proxy_disallowed_by_carrier_ = false;
  clear_has_secure_proxy_disallowed_by_carrier();
}
inline bool NetworkProperties::secure_proxy_disallowed_by_carrier() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.secure_proxy_disallowed_by_carrier)
  return secure_proxy_disallowed_by_carrier_;
}
inline void NetworkProperties::set_secure_proxy_disallowed_by_carrier(bool value) {
  set_has_secure_proxy_disallowed_by_carrier();
  secure_proxy_disallowed_by_carrier_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.NetworkProperties.secure_proxy_disallowed_by_carrier)
}

// optional bool has_captive_portal = 2;
inline bool NetworkProperties::has_has_captive_portal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetworkProperties::set_has_has_captive_portal() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetworkProperties::clear_has_has_captive_portal() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetworkProperties::clear_has_captive_portal() {
  has_captive_portal_ = false;
  clear_has_has_captive_portal();
}
inline bool NetworkProperties::has_captive_portal() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.has_captive_portal)
  return has_captive_portal_;
}
inline void NetworkProperties::set_has_captive_portal(bool value) {
  set_has_has_captive_portal();
  has_captive_portal_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.NetworkProperties.has_captive_portal)
}

// optional .data_reduction_proxy.ProxyFlags secure_proxy_flags = 3;
inline bool NetworkProperties::has_secure_proxy_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkProperties::set_has_secure_proxy_flags() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkProperties::clear_has_secure_proxy_flags() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkProperties::clear_secure_proxy_flags() {
  if (secure_proxy_flags_ != NULL) secure_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
  clear_has_secure_proxy_flags();
}
inline const ::data_reduction_proxy::ProxyFlags& NetworkProperties::secure_proxy_flags() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
  return secure_proxy_flags_ != NULL ? *secure_proxy_flags_
                         : *::data_reduction_proxy::ProxyFlags::internal_default_instance();
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_secure_proxy_flags() {
  set_has_secure_proxy_flags();
  if (secure_proxy_flags_ == NULL) {
    secure_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
  return secure_proxy_flags_;
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::release_secure_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
  clear_has_secure_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* temp = secure_proxy_flags_;
  secure_proxy_flags_ = NULL;
  return temp;
}
inline void NetworkProperties::set_allocated_secure_proxy_flags(::data_reduction_proxy::ProxyFlags* secure_proxy_flags) {
  delete secure_proxy_flags_;
  secure_proxy_flags_ = secure_proxy_flags;
  if (secure_proxy_flags) {
    set_has_secure_proxy_flags();
  } else {
    clear_has_secure_proxy_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.secure_proxy_flags)
}

// optional .data_reduction_proxy.ProxyFlags insecure_proxy_flags = 4;
inline bool NetworkProperties::has_insecure_proxy_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkProperties::set_has_insecure_proxy_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkProperties::clear_has_insecure_proxy_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkProperties::clear_insecure_proxy_flags() {
  if (insecure_proxy_flags_ != NULL) insecure_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
  clear_has_insecure_proxy_flags();
}
inline const ::data_reduction_proxy::ProxyFlags& NetworkProperties::insecure_proxy_flags() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
  return insecure_proxy_flags_ != NULL ? *insecure_proxy_flags_
                         : *::data_reduction_proxy::ProxyFlags::internal_default_instance();
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_insecure_proxy_flags() {
  set_has_insecure_proxy_flags();
  if (insecure_proxy_flags_ == NULL) {
    insecure_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
  return insecure_proxy_flags_;
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::release_insecure_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
  clear_has_insecure_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* temp = insecure_proxy_flags_;
  insecure_proxy_flags_ = NULL;
  return temp;
}
inline void NetworkProperties::set_allocated_insecure_proxy_flags(::data_reduction_proxy::ProxyFlags* insecure_proxy_flags) {
  delete insecure_proxy_flags_;
  insecure_proxy_flags_ = insecure_proxy_flags;
  if (insecure_proxy_flags) {
    set_has_insecure_proxy_flags();
  } else {
    clear_has_insecure_proxy_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.insecure_proxy_flags)
}

// optional int64 last_modified = 5;
inline bool NetworkProperties::has_last_modified() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkProperties::set_has_last_modified() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetworkProperties::clear_has_last_modified() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetworkProperties::clear_last_modified() {
  last_modified_ = GOOGLE_LONGLONG(0);
  clear_has_last_modified();
}
inline ::google::protobuf::int64 NetworkProperties::last_modified() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.last_modified)
  return last_modified_;
}
inline void NetworkProperties::set_last_modified(::google::protobuf::int64 value) {
  set_has_last_modified();
  last_modified_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.NetworkProperties.last_modified)
}

// optional .data_reduction_proxy.ProxyFlags secure_non_core_proxy_flags = 6;
inline bool NetworkProperties::has_secure_non_core_proxy_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkProperties::set_has_secure_non_core_proxy_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkProperties::clear_has_secure_non_core_proxy_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkProperties::clear_secure_non_core_proxy_flags() {
  if (secure_non_core_proxy_flags_ != NULL) secure_non_core_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
  clear_has_secure_non_core_proxy_flags();
}
inline const ::data_reduction_proxy::ProxyFlags& NetworkProperties::secure_non_core_proxy_flags() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
  return secure_non_core_proxy_flags_ != NULL ? *secure_non_core_proxy_flags_
                         : *::data_reduction_proxy::ProxyFlags::internal_default_instance();
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_secure_non_core_proxy_flags() {
  set_has_secure_non_core_proxy_flags();
  if (secure_non_core_proxy_flags_ == NULL) {
    secure_non_core_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
  return secure_non_core_proxy_flags_;
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::release_secure_non_core_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
  clear_has_secure_non_core_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* temp = secure_non_core_proxy_flags_;
  secure_non_core_proxy_flags_ = NULL;
  return temp;
}
inline void NetworkProperties::set_allocated_secure_non_core_proxy_flags(::data_reduction_proxy::ProxyFlags* secure_non_core_proxy_flags) {
  delete secure_non_core_proxy_flags_;
  secure_non_core_proxy_flags_ = secure_non_core_proxy_flags;
  if (secure_non_core_proxy_flags) {
    set_has_secure_non_core_proxy_flags();
  } else {
    clear_has_secure_non_core_proxy_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.secure_non_core_proxy_flags)
}

// optional .data_reduction_proxy.ProxyFlags insecure_non_core_proxy_flags = 7;
inline bool NetworkProperties::has_insecure_non_core_proxy_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkProperties::set_has_insecure_non_core_proxy_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetworkProperties::clear_has_insecure_non_core_proxy_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetworkProperties::clear_insecure_non_core_proxy_flags() {
  if (insecure_non_core_proxy_flags_ != NULL) insecure_non_core_proxy_flags_->::data_reduction_proxy::ProxyFlags::Clear();
  clear_has_insecure_non_core_proxy_flags();
}
inline const ::data_reduction_proxy::ProxyFlags& NetworkProperties::insecure_non_core_proxy_flags() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
  return insecure_non_core_proxy_flags_ != NULL ? *insecure_non_core_proxy_flags_
                         : *::data_reduction_proxy::ProxyFlags::internal_default_instance();
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::mutable_insecure_non_core_proxy_flags() {
  set_has_insecure_non_core_proxy_flags();
  if (insecure_non_core_proxy_flags_ == NULL) {
    insecure_non_core_proxy_flags_ = new ::data_reduction_proxy::ProxyFlags;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
  return insecure_non_core_proxy_flags_;
}
inline ::data_reduction_proxy::ProxyFlags* NetworkProperties::release_insecure_non_core_proxy_flags() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
  clear_has_insecure_non_core_proxy_flags();
  ::data_reduction_proxy::ProxyFlags* temp = insecure_non_core_proxy_flags_;
  insecure_non_core_proxy_flags_ = NULL;
  return temp;
}
inline void NetworkProperties::set_allocated_insecure_non_core_proxy_flags(::data_reduction_proxy::ProxyFlags* insecure_non_core_proxy_flags) {
  delete insecure_non_core_proxy_flags_;
  insecure_non_core_proxy_flags_ = insecure_non_core_proxy_flags;
  if (insecure_non_core_proxy_flags) {
    set_has_insecure_non_core_proxy_flags();
  } else {
    clear_has_insecure_non_core_proxy_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.NetworkProperties.insecure_non_core_proxy_flags)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace data_reduction_proxy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_network_5fproperties_2eproto__INCLUDED
