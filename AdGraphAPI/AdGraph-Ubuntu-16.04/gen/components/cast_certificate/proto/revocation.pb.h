// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: revocation.proto

#ifndef PROTOBUF_revocation_2eproto__INCLUDED
#define PROTOBUF_revocation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace cast_certificate {
class Crl;
class CrlDefaultTypeInternal;
extern CrlDefaultTypeInternal _Crl_default_instance_;
class CrlBundle;
class CrlBundleDefaultTypeInternal;
extern CrlBundleDefaultTypeInternal _CrlBundle_default_instance_;
class SerialNumberRange;
class SerialNumberRangeDefaultTypeInternal;
extern SerialNumberRangeDefaultTypeInternal _SerialNumberRange_default_instance_;
class TbsCrl;
class TbsCrlDefaultTypeInternal;
extern TbsCrlDefaultTypeInternal _TbsCrl_default_instance_;
}  // namespace cast_certificate

namespace cast_certificate {

namespace protobuf_revocation_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_revocation_2eproto

// ===================================================================

class CrlBundle : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cast_certificate.CrlBundle) */ {
 public:
  CrlBundle();
  virtual ~CrlBundle();

  CrlBundle(const CrlBundle& from);

  inline CrlBundle& operator=(const CrlBundle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CrlBundle& default_instance();

  static inline const CrlBundle* internal_default_instance() {
    return reinterpret_cast<const CrlBundle*>(
               &_CrlBundle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CrlBundle* other);

  // implements Message ----------------------------------------------

  inline CrlBundle* New() const PROTOBUF_FINAL { return New(NULL); }

  CrlBundle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CrlBundle& from);
  void MergeFrom(const CrlBundle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CrlBundle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cast_certificate.Crl crls = 1;
  int crls_size() const;
  void clear_crls();
  static const int kCrlsFieldNumber = 1;
  const ::cast_certificate::Crl& crls(int index) const;
  ::cast_certificate::Crl* mutable_crls(int index);
  ::cast_certificate::Crl* add_crls();
  ::google::protobuf::RepeatedPtrField< ::cast_certificate::Crl >*
      mutable_crls();
  const ::google::protobuf::RepeatedPtrField< ::cast_certificate::Crl >&
      crls() const;

  // @@protoc_insertion_point(class_scope:cast_certificate.CrlBundle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cast_certificate::Crl > crls_;
  friend struct protobuf_revocation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Crl : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cast_certificate.Crl) */ {
 public:
  Crl();
  virtual ~Crl();

  Crl(const Crl& from);

  inline Crl& operator=(const Crl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Crl& default_instance();

  static inline const Crl* internal_default_instance() {
    return reinterpret_cast<const Crl*>(
               &_Crl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Crl* other);

  // implements Message ----------------------------------------------

  inline Crl* New() const PROTOBUF_FINAL { return New(NULL); }

  Crl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Crl& from);
  void MergeFrom(const Crl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Crl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes tbs_crl = 1;
  bool has_tbs_crl() const;
  void clear_tbs_crl();
  static const int kTbsCrlFieldNumber = 1;
  const ::std::string& tbs_crl() const;
  void set_tbs_crl(const ::std::string& value);
  #if LANG_CXX11
  void set_tbs_crl(::std::string&& value);
  #endif
  void set_tbs_crl(const char* value);
  void set_tbs_crl(const void* value, size_t size);
  ::std::string* mutable_tbs_crl();
  ::std::string* release_tbs_crl();
  void set_allocated_tbs_crl(::std::string* tbs_crl);

  // optional bytes signer_cert = 2;
  bool has_signer_cert() const;
  void clear_signer_cert();
  static const int kSignerCertFieldNumber = 2;
  const ::std::string& signer_cert() const;
  void set_signer_cert(const ::std::string& value);
  #if LANG_CXX11
  void set_signer_cert(::std::string&& value);
  #endif
  void set_signer_cert(const char* value);
  void set_signer_cert(const void* value, size_t size);
  ::std::string* mutable_signer_cert();
  ::std::string* release_signer_cert();
  void set_allocated_signer_cert(::std::string* signer_cert);

  // optional bytes signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:cast_certificate.Crl)
 private:
  void set_has_tbs_crl();
  void clear_has_tbs_crl();
  void set_has_signer_cert();
  void clear_has_signer_cert();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tbs_crl_;
  ::google::protobuf::internal::ArenaStringPtr signer_cert_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  friend struct protobuf_revocation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TbsCrl : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cast_certificate.TbsCrl) */ {
 public:
  TbsCrl();
  virtual ~TbsCrl();

  TbsCrl(const TbsCrl& from);

  inline TbsCrl& operator=(const TbsCrl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TbsCrl& default_instance();

  static inline const TbsCrl* internal_default_instance() {
    return reinterpret_cast<const TbsCrl*>(
               &_TbsCrl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(TbsCrl* other);

  // implements Message ----------------------------------------------

  inline TbsCrl* New() const PROTOBUF_FINAL { return New(NULL); }

  TbsCrl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TbsCrl& from);
  void MergeFrom(const TbsCrl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TbsCrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes revoked_public_key_hashes = 4;
  int revoked_public_key_hashes_size() const;
  void clear_revoked_public_key_hashes();
  static const int kRevokedPublicKeyHashesFieldNumber = 4;
  const ::std::string& revoked_public_key_hashes(int index) const;
  ::std::string* mutable_revoked_public_key_hashes(int index);
  void set_revoked_public_key_hashes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_revoked_public_key_hashes(int index, ::std::string&& value);
  #endif
  void set_revoked_public_key_hashes(int index, const char* value);
  void set_revoked_public_key_hashes(int index, const void* value, size_t size);
  ::std::string* add_revoked_public_key_hashes();
  void add_revoked_public_key_hashes(const ::std::string& value);
  #if LANG_CXX11
  void add_revoked_public_key_hashes(::std::string&& value);
  #endif
  void add_revoked_public_key_hashes(const char* value);
  void add_revoked_public_key_hashes(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& revoked_public_key_hashes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_revoked_public_key_hashes();

  // repeated .cast_certificate.SerialNumberRange revoked_serial_number_ranges = 5;
  int revoked_serial_number_ranges_size() const;
  void clear_revoked_serial_number_ranges();
  static const int kRevokedSerialNumberRangesFieldNumber = 5;
  const ::cast_certificate::SerialNumberRange& revoked_serial_number_ranges(int index) const;
  ::cast_certificate::SerialNumberRange* mutable_revoked_serial_number_ranges(int index);
  ::cast_certificate::SerialNumberRange* add_revoked_serial_number_ranges();
  ::google::protobuf::RepeatedPtrField< ::cast_certificate::SerialNumberRange >*
      mutable_revoked_serial_number_ranges();
  const ::google::protobuf::RepeatedPtrField< ::cast_certificate::SerialNumberRange >&
      revoked_serial_number_ranges() const;

  // optional uint64 version = 1 [default = 0];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // optional uint64 not_before_seconds = 2;
  bool has_not_before_seconds() const;
  void clear_not_before_seconds();
  static const int kNotBeforeSecondsFieldNumber = 2;
  ::google::protobuf::uint64 not_before_seconds() const;
  void set_not_before_seconds(::google::protobuf::uint64 value);

  // optional uint64 not_after_seconds = 3;
  bool has_not_after_seconds() const;
  void clear_not_after_seconds();
  static const int kNotAfterSecondsFieldNumber = 3;
  ::google::protobuf::uint64 not_after_seconds() const;
  void set_not_after_seconds(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cast_certificate.TbsCrl)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_not_before_seconds();
  void clear_has_not_before_seconds();
  void set_has_not_after_seconds();
  void clear_has_not_after_seconds();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> revoked_public_key_hashes_;
  ::google::protobuf::RepeatedPtrField< ::cast_certificate::SerialNumberRange > revoked_serial_number_ranges_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::uint64 not_before_seconds_;
  ::google::protobuf::uint64 not_after_seconds_;
  friend struct protobuf_revocation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerialNumberRange : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cast_certificate.SerialNumberRange) */ {
 public:
  SerialNumberRange();
  virtual ~SerialNumberRange();

  SerialNumberRange(const SerialNumberRange& from);

  inline SerialNumberRange& operator=(const SerialNumberRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SerialNumberRange& default_instance();

  static inline const SerialNumberRange* internal_default_instance() {
    return reinterpret_cast<const SerialNumberRange*>(
               &_SerialNumberRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SerialNumberRange* other);

  // implements Message ----------------------------------------------

  inline SerialNumberRange* New() const PROTOBUF_FINAL { return New(NULL); }

  SerialNumberRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SerialNumberRange& from);
  void MergeFrom(const SerialNumberRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerialNumberRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes issuer_public_key_hash = 1;
  bool has_issuer_public_key_hash() const;
  void clear_issuer_public_key_hash();
  static const int kIssuerPublicKeyHashFieldNumber = 1;
  const ::std::string& issuer_public_key_hash() const;
  void set_issuer_public_key_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer_public_key_hash(::std::string&& value);
  #endif
  void set_issuer_public_key_hash(const char* value);
  void set_issuer_public_key_hash(const void* value, size_t size);
  ::std::string* mutable_issuer_public_key_hash();
  ::std::string* release_issuer_public_key_hash();
  void set_allocated_issuer_public_key_hash(::std::string* issuer_public_key_hash);

  // optional uint64 first_serial_number = 2;
  bool has_first_serial_number() const;
  void clear_first_serial_number();
  static const int kFirstSerialNumberFieldNumber = 2;
  ::google::protobuf::uint64 first_serial_number() const;
  void set_first_serial_number(::google::protobuf::uint64 value);

  // optional uint64 last_serial_number = 3;
  bool has_last_serial_number() const;
  void clear_last_serial_number();
  static const int kLastSerialNumberFieldNumber = 3;
  ::google::protobuf::uint64 last_serial_number() const;
  void set_last_serial_number(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cast_certificate.SerialNumberRange)
 private:
  void set_has_issuer_public_key_hash();
  void clear_has_issuer_public_key_hash();
  void set_has_first_serial_number();
  void clear_has_first_serial_number();
  void set_has_last_serial_number();
  void clear_has_last_serial_number();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr issuer_public_key_hash_;
  ::google::protobuf::uint64 first_serial_number_;
  ::google::protobuf::uint64 last_serial_number_;
  friend struct protobuf_revocation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CrlBundle

// repeated .cast_certificate.Crl crls = 1;
inline int CrlBundle::crls_size() const {
  return crls_.size();
}
inline void CrlBundle::clear_crls() {
  crls_.Clear();
}
inline const ::cast_certificate::Crl& CrlBundle::crls(int index) const {
  // @@protoc_insertion_point(field_get:cast_certificate.CrlBundle.crls)
  return crls_.Get(index);
}
inline ::cast_certificate::Crl* CrlBundle::mutable_crls(int index) {
  // @@protoc_insertion_point(field_mutable:cast_certificate.CrlBundle.crls)
  return crls_.Mutable(index);
}
inline ::cast_certificate::Crl* CrlBundle::add_crls() {
  // @@protoc_insertion_point(field_add:cast_certificate.CrlBundle.crls)
  return crls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cast_certificate::Crl >*
CrlBundle::mutable_crls() {
  // @@protoc_insertion_point(field_mutable_list:cast_certificate.CrlBundle.crls)
  return &crls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cast_certificate::Crl >&
CrlBundle::crls() const {
  // @@protoc_insertion_point(field_list:cast_certificate.CrlBundle.crls)
  return crls_;
}

// -------------------------------------------------------------------

// Crl

// optional bytes tbs_crl = 1;
inline bool Crl::has_tbs_crl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Crl::set_has_tbs_crl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Crl::clear_has_tbs_crl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Crl::clear_tbs_crl() {
  tbs_crl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tbs_crl();
}
inline const ::std::string& Crl::tbs_crl() const {
  // @@protoc_insertion_point(field_get:cast_certificate.Crl.tbs_crl)
  return tbs_crl_.GetNoArena();
}
inline void Crl::set_tbs_crl(const ::std::string& value) {
  set_has_tbs_crl();
  tbs_crl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_certificate.Crl.tbs_crl)
}
#if LANG_CXX11
inline void Crl::set_tbs_crl(::std::string&& value) {
  set_has_tbs_crl();
  tbs_crl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_certificate.Crl.tbs_crl)
}
#endif
inline void Crl::set_tbs_crl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tbs_crl();
  tbs_crl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_certificate.Crl.tbs_crl)
}
inline void Crl::set_tbs_crl(const void* value, size_t size) {
  set_has_tbs_crl();
  tbs_crl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_certificate.Crl.tbs_crl)
}
inline ::std::string* Crl::mutable_tbs_crl() {
  set_has_tbs_crl();
  // @@protoc_insertion_point(field_mutable:cast_certificate.Crl.tbs_crl)
  return tbs_crl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Crl::release_tbs_crl() {
  // @@protoc_insertion_point(field_release:cast_certificate.Crl.tbs_crl)
  clear_has_tbs_crl();
  return tbs_crl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Crl::set_allocated_tbs_crl(::std::string* tbs_crl) {
  if (tbs_crl != NULL) {
    set_has_tbs_crl();
  } else {
    clear_has_tbs_crl();
  }
  tbs_crl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tbs_crl);
  // @@protoc_insertion_point(field_set_allocated:cast_certificate.Crl.tbs_crl)
}

// optional bytes signer_cert = 2;
inline bool Crl::has_signer_cert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Crl::set_has_signer_cert() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Crl::clear_has_signer_cert() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Crl::clear_signer_cert() {
  signer_cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signer_cert();
}
inline const ::std::string& Crl::signer_cert() const {
  // @@protoc_insertion_point(field_get:cast_certificate.Crl.signer_cert)
  return signer_cert_.GetNoArena();
}
inline void Crl::set_signer_cert(const ::std::string& value) {
  set_has_signer_cert();
  signer_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_certificate.Crl.signer_cert)
}
#if LANG_CXX11
inline void Crl::set_signer_cert(::std::string&& value) {
  set_has_signer_cert();
  signer_cert_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_certificate.Crl.signer_cert)
}
#endif
inline void Crl::set_signer_cert(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signer_cert();
  signer_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_certificate.Crl.signer_cert)
}
inline void Crl::set_signer_cert(const void* value, size_t size) {
  set_has_signer_cert();
  signer_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_certificate.Crl.signer_cert)
}
inline ::std::string* Crl::mutable_signer_cert() {
  set_has_signer_cert();
  // @@protoc_insertion_point(field_mutable:cast_certificate.Crl.signer_cert)
  return signer_cert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Crl::release_signer_cert() {
  // @@protoc_insertion_point(field_release:cast_certificate.Crl.signer_cert)
  clear_has_signer_cert();
  return signer_cert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Crl::set_allocated_signer_cert(::std::string* signer_cert) {
  if (signer_cert != NULL) {
    set_has_signer_cert();
  } else {
    clear_has_signer_cert();
  }
  signer_cert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signer_cert);
  // @@protoc_insertion_point(field_set_allocated:cast_certificate.Crl.signer_cert)
}

// optional bytes signature = 3;
inline bool Crl::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Crl::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Crl::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Crl::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& Crl::signature() const {
  // @@protoc_insertion_point(field_get:cast_certificate.Crl.signature)
  return signature_.GetNoArena();
}
inline void Crl::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_certificate.Crl.signature)
}
#if LANG_CXX11
inline void Crl::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_certificate.Crl.signature)
}
#endif
inline void Crl::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_certificate.Crl.signature)
}
inline void Crl::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_certificate.Crl.signature)
}
inline ::std::string* Crl::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:cast_certificate.Crl.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Crl::release_signature() {
  // @@protoc_insertion_point(field_release:cast_certificate.Crl.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Crl::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:cast_certificate.Crl.signature)
}

// -------------------------------------------------------------------

// TbsCrl

// optional uint64 version = 1 [default = 0];
inline bool TbsCrl::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TbsCrl::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TbsCrl::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TbsCrl::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 TbsCrl::version() const {
  // @@protoc_insertion_point(field_get:cast_certificate.TbsCrl.version)
  return version_;
}
inline void TbsCrl::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cast_certificate.TbsCrl.version)
}

// optional uint64 not_before_seconds = 2;
inline bool TbsCrl::has_not_before_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TbsCrl::set_has_not_before_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TbsCrl::clear_has_not_before_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TbsCrl::clear_not_before_seconds() {
  not_before_seconds_ = GOOGLE_ULONGLONG(0);
  clear_has_not_before_seconds();
}
inline ::google::protobuf::uint64 TbsCrl::not_before_seconds() const {
  // @@protoc_insertion_point(field_get:cast_certificate.TbsCrl.not_before_seconds)
  return not_before_seconds_;
}
inline void TbsCrl::set_not_before_seconds(::google::protobuf::uint64 value) {
  set_has_not_before_seconds();
  not_before_seconds_ = value;
  // @@protoc_insertion_point(field_set:cast_certificate.TbsCrl.not_before_seconds)
}

// optional uint64 not_after_seconds = 3;
inline bool TbsCrl::has_not_after_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TbsCrl::set_has_not_after_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TbsCrl::clear_has_not_after_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TbsCrl::clear_not_after_seconds() {
  not_after_seconds_ = GOOGLE_ULONGLONG(0);
  clear_has_not_after_seconds();
}
inline ::google::protobuf::uint64 TbsCrl::not_after_seconds() const {
  // @@protoc_insertion_point(field_get:cast_certificate.TbsCrl.not_after_seconds)
  return not_after_seconds_;
}
inline void TbsCrl::set_not_after_seconds(::google::protobuf::uint64 value) {
  set_has_not_after_seconds();
  not_after_seconds_ = value;
  // @@protoc_insertion_point(field_set:cast_certificate.TbsCrl.not_after_seconds)
}

// repeated bytes revoked_public_key_hashes = 4;
inline int TbsCrl::revoked_public_key_hashes_size() const {
  return revoked_public_key_hashes_.size();
}
inline void TbsCrl::clear_revoked_public_key_hashes() {
  revoked_public_key_hashes_.Clear();
}
inline const ::std::string& TbsCrl::revoked_public_key_hashes(int index) const {
  // @@protoc_insertion_point(field_get:cast_certificate.TbsCrl.revoked_public_key_hashes)
  return revoked_public_key_hashes_.Get(index);
}
inline ::std::string* TbsCrl::mutable_revoked_public_key_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:cast_certificate.TbsCrl.revoked_public_key_hashes)
  return revoked_public_key_hashes_.Mutable(index);
}
inline void TbsCrl::set_revoked_public_key_hashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cast_certificate.TbsCrl.revoked_public_key_hashes)
  revoked_public_key_hashes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TbsCrl::set_revoked_public_key_hashes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cast_certificate.TbsCrl.revoked_public_key_hashes)
  revoked_public_key_hashes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TbsCrl::set_revoked_public_key_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  revoked_public_key_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
inline void TbsCrl::set_revoked_public_key_hashes(int index, const void* value, size_t size) {
  revoked_public_key_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
inline ::std::string* TbsCrl::add_revoked_public_key_hashes() {
  // @@protoc_insertion_point(field_add_mutable:cast_certificate.TbsCrl.revoked_public_key_hashes)
  return revoked_public_key_hashes_.Add();
}
inline void TbsCrl::add_revoked_public_key_hashes(const ::std::string& value) {
  revoked_public_key_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
#if LANG_CXX11
inline void TbsCrl::add_revoked_public_key_hashes(::std::string&& value) {
  revoked_public_key_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
#endif
inline void TbsCrl::add_revoked_public_key_hashes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  revoked_public_key_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
inline void TbsCrl::add_revoked_public_key_hashes(const void* value, size_t size) {
  revoked_public_key_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cast_certificate.TbsCrl.revoked_public_key_hashes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TbsCrl::revoked_public_key_hashes() const {
  // @@protoc_insertion_point(field_list:cast_certificate.TbsCrl.revoked_public_key_hashes)
  return revoked_public_key_hashes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TbsCrl::mutable_revoked_public_key_hashes() {
  // @@protoc_insertion_point(field_mutable_list:cast_certificate.TbsCrl.revoked_public_key_hashes)
  return &revoked_public_key_hashes_;
}

// repeated .cast_certificate.SerialNumberRange revoked_serial_number_ranges = 5;
inline int TbsCrl::revoked_serial_number_ranges_size() const {
  return revoked_serial_number_ranges_.size();
}
inline void TbsCrl::clear_revoked_serial_number_ranges() {
  revoked_serial_number_ranges_.Clear();
}
inline const ::cast_certificate::SerialNumberRange& TbsCrl::revoked_serial_number_ranges(int index) const {
  // @@protoc_insertion_point(field_get:cast_certificate.TbsCrl.revoked_serial_number_ranges)
  return revoked_serial_number_ranges_.Get(index);
}
inline ::cast_certificate::SerialNumberRange* TbsCrl::mutable_revoked_serial_number_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:cast_certificate.TbsCrl.revoked_serial_number_ranges)
  return revoked_serial_number_ranges_.Mutable(index);
}
inline ::cast_certificate::SerialNumberRange* TbsCrl::add_revoked_serial_number_ranges() {
  // @@protoc_insertion_point(field_add:cast_certificate.TbsCrl.revoked_serial_number_ranges)
  return revoked_serial_number_ranges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cast_certificate::SerialNumberRange >*
TbsCrl::mutable_revoked_serial_number_ranges() {
  // @@protoc_insertion_point(field_mutable_list:cast_certificate.TbsCrl.revoked_serial_number_ranges)
  return &revoked_serial_number_ranges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cast_certificate::SerialNumberRange >&
TbsCrl::revoked_serial_number_ranges() const {
  // @@protoc_insertion_point(field_list:cast_certificate.TbsCrl.revoked_serial_number_ranges)
  return revoked_serial_number_ranges_;
}

// -------------------------------------------------------------------

// SerialNumberRange

// optional bytes issuer_public_key_hash = 1;
inline bool SerialNumberRange::has_issuer_public_key_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerialNumberRange::set_has_issuer_public_key_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerialNumberRange::clear_has_issuer_public_key_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerialNumberRange::clear_issuer_public_key_hash() {
  issuer_public_key_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer_public_key_hash();
}
inline const ::std::string& SerialNumberRange::issuer_public_key_hash() const {
  // @@protoc_insertion_point(field_get:cast_certificate.SerialNumberRange.issuer_public_key_hash)
  return issuer_public_key_hash_.GetNoArena();
}
inline void SerialNumberRange::set_issuer_public_key_hash(const ::std::string& value) {
  set_has_issuer_public_key_hash();
  issuer_public_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_certificate.SerialNumberRange.issuer_public_key_hash)
}
#if LANG_CXX11
inline void SerialNumberRange::set_issuer_public_key_hash(::std::string&& value) {
  set_has_issuer_public_key_hash();
  issuer_public_key_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_certificate.SerialNumberRange.issuer_public_key_hash)
}
#endif
inline void SerialNumberRange::set_issuer_public_key_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuer_public_key_hash();
  issuer_public_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_certificate.SerialNumberRange.issuer_public_key_hash)
}
inline void SerialNumberRange::set_issuer_public_key_hash(const void* value, size_t size) {
  set_has_issuer_public_key_hash();
  issuer_public_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_certificate.SerialNumberRange.issuer_public_key_hash)
}
inline ::std::string* SerialNumberRange::mutable_issuer_public_key_hash() {
  set_has_issuer_public_key_hash();
  // @@protoc_insertion_point(field_mutable:cast_certificate.SerialNumberRange.issuer_public_key_hash)
  return issuer_public_key_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerialNumberRange::release_issuer_public_key_hash() {
  // @@protoc_insertion_point(field_release:cast_certificate.SerialNumberRange.issuer_public_key_hash)
  clear_has_issuer_public_key_hash();
  return issuer_public_key_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerialNumberRange::set_allocated_issuer_public_key_hash(::std::string* issuer_public_key_hash) {
  if (issuer_public_key_hash != NULL) {
    set_has_issuer_public_key_hash();
  } else {
    clear_has_issuer_public_key_hash();
  }
  issuer_public_key_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer_public_key_hash);
  // @@protoc_insertion_point(field_set_allocated:cast_certificate.SerialNumberRange.issuer_public_key_hash)
}

// optional uint64 first_serial_number = 2;
inline bool SerialNumberRange::has_first_serial_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerialNumberRange::set_has_first_serial_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SerialNumberRange::clear_has_first_serial_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SerialNumberRange::clear_first_serial_number() {
  first_serial_number_ = GOOGLE_ULONGLONG(0);
  clear_has_first_serial_number();
}
inline ::google::protobuf::uint64 SerialNumberRange::first_serial_number() const {
  // @@protoc_insertion_point(field_get:cast_certificate.SerialNumberRange.first_serial_number)
  return first_serial_number_;
}
inline void SerialNumberRange::set_first_serial_number(::google::protobuf::uint64 value) {
  set_has_first_serial_number();
  first_serial_number_ = value;
  // @@protoc_insertion_point(field_set:cast_certificate.SerialNumberRange.first_serial_number)
}

// optional uint64 last_serial_number = 3;
inline bool SerialNumberRange::has_last_serial_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SerialNumberRange::set_has_last_serial_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SerialNumberRange::clear_has_last_serial_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SerialNumberRange::clear_last_serial_number() {
  last_serial_number_ = GOOGLE_ULONGLONG(0);
  clear_has_last_serial_number();
}
inline ::google::protobuf::uint64 SerialNumberRange::last_serial_number() const {
  // @@protoc_insertion_point(field_get:cast_certificate.SerialNumberRange.last_serial_number)
  return last_serial_number_;
}
inline void SerialNumberRange::set_last_serial_number(::google::protobuf::uint64 value) {
  set_has_last_serial_number();
  last_serial_number_ = value;
  // @@protoc_insertion_point(field_set:cast_certificate.SerialNumberRange.last_serial_number)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace cast_certificate

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_revocation_2eproto__INCLUDED
