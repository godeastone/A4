// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: article_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "article_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class ArticleSpecificsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ArticleSpecifics> {
} _ArticleSpecifics_default_instance_;
class ArticlePageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ArticlePage> {
} _ArticlePage_default_instance_;
class DeprecatedArticleAttachmentsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeprecatedArticleAttachments> {
} _DeprecatedArticleAttachments_default_instance_;

namespace protobuf_article_5fspecifics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ArticleSpecifics_default_instance_.Shutdown();
  _ArticlePage_default_instance_.Shutdown();
  _DeprecatedArticleAttachments_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ArticleSpecifics_default_instance_.DefaultConstruct();
  _ArticlePage_default_instance_.DefaultConstruct();
  _DeprecatedArticleAttachments_default_instance_.DefaultConstruct();
  _ArticleSpecifics_default_instance_.get_mutable()->attachments_ = const_cast< ::sync_pb::DeprecatedArticleAttachments*>(
      ::sync_pb::DeprecatedArticleAttachments::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_article_5fspecifics_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArticleSpecifics::kEntryIdFieldNumber;
const int ArticleSpecifics::kTitleFieldNumber;
const int ArticleSpecifics::kPagesFieldNumber;
const int ArticleSpecifics::kAttachmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArticleSpecifics::ArticleSpecifics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_article_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ArticleSpecifics)
}
ArticleSpecifics::ArticleSpecifics(const ArticleSpecifics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pages_(from.pages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entry_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entry_id()) {
    entry_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entry_id_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_attachments()) {
    attachments_ = new ::sync_pb::DeprecatedArticleAttachments(*from.attachments_);
  } else {
    attachments_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.ArticleSpecifics)
}

void ArticleSpecifics::SharedCtor() {
  _cached_size_ = 0;
  entry_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachments_ = NULL;
}

ArticleSpecifics::~ArticleSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.ArticleSpecifics)
  SharedDtor();
}

void ArticleSpecifics::SharedDtor() {
  entry_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete attachments_;
  }
}

void ArticleSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArticleSpecifics& ArticleSpecifics::default_instance() {
  protobuf_article_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

ArticleSpecifics* ArticleSpecifics::New(::google::protobuf::Arena* arena) const {
  ArticleSpecifics* n = new ArticleSpecifics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArticleSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ArticleSpecifics)
  pages_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_entry_id()) {
      GOOGLE_DCHECK(!entry_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*entry_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_attachments()) {
      GOOGLE_DCHECK(attachments_ != NULL);
      attachments_->::sync_pb::DeprecatedArticleAttachments::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ArticleSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ArticleSpecifics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string entry_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.ArticlePage pages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DeprecatedArticleAttachments attachments = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ArticleSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ArticleSpecifics)
  return false;
#undef DO_
}

void ArticleSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ArticleSpecifics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string entry_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entry_id(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // repeated .sync_pb.ArticlePage pages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->pages(static_cast<int>(i)), output);
  }

  // optional .sync_pb.DeprecatedArticleAttachments attachments = 4 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->attachments_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ArticleSpecifics)
}

size_t ArticleSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ArticleSpecifics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.ArticlePage pages = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pages(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string entry_id = 1;
    if (has_entry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry_id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional .sync_pb.DeprecatedArticleAttachments attachments = 4 [deprecated = true];
    if (has_attachments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attachments_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArticleSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArticleSpecifics*>(&from));
}

void ArticleSpecifics::MergeFrom(const ArticleSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ArticleSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pages_.MergeFrom(from.pages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_entry_id();
      entry_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entry_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_attachments()->::sync_pb::DeprecatedArticleAttachments::MergeFrom(from.attachments());
    }
  }
}

void ArticleSpecifics::CopyFrom(const ArticleSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ArticleSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArticleSpecifics::IsInitialized() const {
  return true;
}

void ArticleSpecifics::Swap(ArticleSpecifics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArticleSpecifics::InternalSwap(ArticleSpecifics* other) {
  pages_.InternalSwap(&other->pages_);
  entry_id_.Swap(&other->entry_id_);
  title_.Swap(&other->title_);
  std::swap(attachments_, other->attachments_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ArticleSpecifics::GetTypeName() const {
  return "sync_pb.ArticleSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArticleSpecifics

// optional string entry_id = 1;
bool ArticleSpecifics::has_entry_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArticleSpecifics::set_has_entry_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ArticleSpecifics::clear_has_entry_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ArticleSpecifics::clear_entry_id() {
  entry_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entry_id();
}
const ::std::string& ArticleSpecifics::entry_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.ArticleSpecifics.entry_id)
  return entry_id_.GetNoArena();
}
void ArticleSpecifics::set_entry_id(const ::std::string& value) {
  set_has_entry_id();
  entry_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ArticleSpecifics.entry_id)
}
#if LANG_CXX11
void ArticleSpecifics::set_entry_id(::std::string&& value) {
  set_has_entry_id();
  entry_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ArticleSpecifics.entry_id)
}
#endif
void ArticleSpecifics::set_entry_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entry_id();
  entry_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ArticleSpecifics.entry_id)
}
void ArticleSpecifics::set_entry_id(const char* value, size_t size) {
  set_has_entry_id();
  entry_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ArticleSpecifics.entry_id)
}
::std::string* ArticleSpecifics::mutable_entry_id() {
  set_has_entry_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.ArticleSpecifics.entry_id)
  return entry_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArticleSpecifics::release_entry_id() {
  // @@protoc_insertion_point(field_release:sync_pb.ArticleSpecifics.entry_id)
  clear_has_entry_id();
  return entry_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArticleSpecifics::set_allocated_entry_id(::std::string* entry_id) {
  if (entry_id != NULL) {
    set_has_entry_id();
  } else {
    clear_has_entry_id();
  }
  entry_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entry_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ArticleSpecifics.entry_id)
}

// optional string title = 2;
bool ArticleSpecifics::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ArticleSpecifics::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void ArticleSpecifics::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void ArticleSpecifics::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& ArticleSpecifics::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.ArticleSpecifics.title)
  return title_.GetNoArena();
}
void ArticleSpecifics::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ArticleSpecifics.title)
}
#if LANG_CXX11
void ArticleSpecifics::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ArticleSpecifics.title)
}
#endif
void ArticleSpecifics::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ArticleSpecifics.title)
}
void ArticleSpecifics::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ArticleSpecifics.title)
}
::std::string* ArticleSpecifics::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.ArticleSpecifics.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArticleSpecifics::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.ArticleSpecifics.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArticleSpecifics::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ArticleSpecifics.title)
}

// repeated .sync_pb.ArticlePage pages = 3;
int ArticleSpecifics::pages_size() const {
  return pages_.size();
}
void ArticleSpecifics::clear_pages() {
  pages_.Clear();
}
const ::sync_pb::ArticlePage& ArticleSpecifics::pages(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.ArticleSpecifics.pages)
  return pages_.Get(index);
}
::sync_pb::ArticlePage* ArticleSpecifics::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.ArticleSpecifics.pages)
  return pages_.Mutable(index);
}
::sync_pb::ArticlePage* ArticleSpecifics::add_pages() {
  // @@protoc_insertion_point(field_add:sync_pb.ArticleSpecifics.pages)
  return pages_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::ArticlePage >*
ArticleSpecifics::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.ArticleSpecifics.pages)
  return &pages_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::ArticlePage >&
ArticleSpecifics::pages() const {
  // @@protoc_insertion_point(field_list:sync_pb.ArticleSpecifics.pages)
  return pages_;
}

// optional .sync_pb.DeprecatedArticleAttachments attachments = 4 [deprecated = true];
bool ArticleSpecifics::has_attachments() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ArticleSpecifics::set_has_attachments() {
  _has_bits_[0] |= 0x00000004u;
}
void ArticleSpecifics::clear_has_attachments() {
  _has_bits_[0] &= ~0x00000004u;
}
void ArticleSpecifics::clear_attachments() {
  if (attachments_ != NULL) attachments_->::sync_pb::DeprecatedArticleAttachments::Clear();
  clear_has_attachments();
}
const ::sync_pb::DeprecatedArticleAttachments& ArticleSpecifics::attachments() const {
  // @@protoc_insertion_point(field_get:sync_pb.ArticleSpecifics.attachments)
  return attachments_ != NULL ? *attachments_
                         : *::sync_pb::DeprecatedArticleAttachments::internal_default_instance();
}
::sync_pb::DeprecatedArticleAttachments* ArticleSpecifics::mutable_attachments() {
  set_has_attachments();
  if (attachments_ == NULL) {
    attachments_ = new ::sync_pb::DeprecatedArticleAttachments;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ArticleSpecifics.attachments)
  return attachments_;
}
::sync_pb::DeprecatedArticleAttachments* ArticleSpecifics::release_attachments() {
  // @@protoc_insertion_point(field_release:sync_pb.ArticleSpecifics.attachments)
  clear_has_attachments();
  ::sync_pb::DeprecatedArticleAttachments* temp = attachments_;
  attachments_ = NULL;
  return temp;
}
void ArticleSpecifics::set_allocated_attachments(::sync_pb::DeprecatedArticleAttachments* attachments) {
  delete attachments_;
  attachments_ = attachments;
  if (attachments) {
    set_has_attachments();
  } else {
    clear_has_attachments();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ArticleSpecifics.attachments)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArticlePage::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArticlePage::ArticlePage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_article_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ArticlePage)
}
ArticlePage::ArticlePage(const ArticlePage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.ArticlePage)
}

void ArticlePage::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ArticlePage::~ArticlePage() {
  // @@protoc_insertion_point(destructor:sync_pb.ArticlePage)
  SharedDtor();
}

void ArticlePage::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ArticlePage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArticlePage& ArticlePage::default_instance() {
  protobuf_article_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

ArticlePage* ArticlePage::New(::google::protobuf::Arena* arena) const {
  ArticlePage* n = new ArticlePage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArticlePage::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ArticlePage)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ArticlePage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ArticlePage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ArticlePage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ArticlePage)
  return false;
#undef DO_
}

void ArticlePage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ArticlePage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ArticlePage)
}

size_t ArticlePage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ArticlePage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArticlePage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArticlePage*>(&from));
}

void ArticlePage::MergeFrom(const ArticlePage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ArticlePage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void ArticlePage::CopyFrom(const ArticlePage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ArticlePage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArticlePage::IsInitialized() const {
  return true;
}

void ArticlePage::Swap(ArticlePage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArticlePage::InternalSwap(ArticlePage* other) {
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ArticlePage::GetTypeName() const {
  return "sync_pb.ArticlePage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArticlePage

// optional string url = 1;
bool ArticlePage::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArticlePage::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ArticlePage::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ArticlePage::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ArticlePage::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.ArticlePage.url)
  return url_.GetNoArena();
}
void ArticlePage::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ArticlePage.url)
}
#if LANG_CXX11
void ArticlePage::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ArticlePage.url)
}
#endif
void ArticlePage::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ArticlePage.url)
}
void ArticlePage::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ArticlePage.url)
}
::std::string* ArticlePage::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.ArticlePage.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArticlePage::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.ArticlePage.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArticlePage::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ArticlePage.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeprecatedArticleAttachments::DeprecatedArticleAttachments()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_article_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.DeprecatedArticleAttachments)
}
DeprecatedArticleAttachments::DeprecatedArticleAttachments(const DeprecatedArticleAttachments& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.DeprecatedArticleAttachments)
}

void DeprecatedArticleAttachments::SharedCtor() {
  _cached_size_ = 0;
}

DeprecatedArticleAttachments::~DeprecatedArticleAttachments() {
  // @@protoc_insertion_point(destructor:sync_pb.DeprecatedArticleAttachments)
  SharedDtor();
}

void DeprecatedArticleAttachments::SharedDtor() {
}

void DeprecatedArticleAttachments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeprecatedArticleAttachments& DeprecatedArticleAttachments::default_instance() {
  protobuf_article_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeprecatedArticleAttachments* DeprecatedArticleAttachments::New(::google::protobuf::Arena* arena) const {
  DeprecatedArticleAttachments* n = new DeprecatedArticleAttachments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeprecatedArticleAttachments::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DeprecatedArticleAttachments)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeprecatedArticleAttachments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.DeprecatedArticleAttachments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.DeprecatedArticleAttachments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.DeprecatedArticleAttachments)
  return false;
#undef DO_
}

void DeprecatedArticleAttachments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.DeprecatedArticleAttachments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.DeprecatedArticleAttachments)
}

size_t DeprecatedArticleAttachments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DeprecatedArticleAttachments)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeprecatedArticleAttachments::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeprecatedArticleAttachments*>(&from));
}

void DeprecatedArticleAttachments::MergeFrom(const DeprecatedArticleAttachments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DeprecatedArticleAttachments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeprecatedArticleAttachments::CopyFrom(const DeprecatedArticleAttachments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DeprecatedArticleAttachments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecatedArticleAttachments::IsInitialized() const {
  return true;
}

void DeprecatedArticleAttachments::Swap(DeprecatedArticleAttachments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeprecatedArticleAttachments::InternalSwap(DeprecatedArticleAttachments* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeprecatedArticleAttachments::GetTypeName() const {
  return "sync_pb.DeprecatedArticleAttachments";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeprecatedArticleAttachments

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
