// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_type_state.proto

#ifndef PROTOBUF_model_5ftype_5fstate_2eproto__INCLUDED
#define PROTOBUF_model_5ftype_5fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "sync.pb.h"
// @@protoc_insertion_point(includes)
namespace sync_pb {
class ModelTypeState;
class ModelTypeStateDefaultTypeInternal;
extern ModelTypeStateDefaultTypeInternal _ModelTypeState_default_instance_;
}  // namespace sync_pb

namespace sync_pb {

namespace protobuf_model_5ftype_5fstate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_model_5ftype_5fstate_2eproto

// ===================================================================

class ModelTypeState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ModelTypeState) */ {
 public:
  ModelTypeState();
  virtual ~ModelTypeState();

  ModelTypeState(const ModelTypeState& from);

  inline ModelTypeState& operator=(const ModelTypeState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ModelTypeState& default_instance();

  static inline const ModelTypeState* internal_default_instance() {
    return reinterpret_cast<const ModelTypeState*>(
               &_ModelTypeState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ModelTypeState* other);

  // implements Message ----------------------------------------------

  inline ModelTypeState* New() const PROTOBUF_FINAL { return New(NULL); }

  ModelTypeState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ModelTypeState& from);
  void MergeFrom(const ModelTypeState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelTypeState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string encryption_key_name = 3;
  bool has_encryption_key_name() const;
  void clear_encryption_key_name();
  static const int kEncryptionKeyNameFieldNumber = 3;
  const ::std::string& encryption_key_name() const;
  void set_encryption_key_name(const ::std::string& value);
  #if LANG_CXX11
  void set_encryption_key_name(::std::string&& value);
  #endif
  void set_encryption_key_name(const char* value);
  void set_encryption_key_name(const char* value, size_t size);
  ::std::string* mutable_encryption_key_name();
  ::std::string* release_encryption_key_name();
  void set_allocated_encryption_key_name(::std::string* encryption_key_name);

  // optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
  bool has_progress_marker() const;
  void clear_progress_marker();
  static const int kProgressMarkerFieldNumber = 1;
  const ::sync_pb::DataTypeProgressMarker& progress_marker() const;
  ::sync_pb::DataTypeProgressMarker* mutable_progress_marker();
  ::sync_pb::DataTypeProgressMarker* release_progress_marker();
  void set_allocated_progress_marker(::sync_pb::DataTypeProgressMarker* progress_marker);

  // optional .sync_pb.DataTypeContext type_context = 2;
  bool has_type_context() const;
  void clear_type_context();
  static const int kTypeContextFieldNumber = 2;
  const ::sync_pb::DataTypeContext& type_context() const;
  ::sync_pb::DataTypeContext* mutable_type_context();
  ::sync_pb::DataTypeContext* release_type_context();
  void set_allocated_type_context(::sync_pb::DataTypeContext* type_context);

  // optional bool initial_sync_done = 4;
  bool has_initial_sync_done() const;
  void clear_initial_sync_done();
  static const int kInitialSyncDoneFieldNumber = 4;
  bool initial_sync_done() const;
  void set_initial_sync_done(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.ModelTypeState)
 private:
  void set_has_progress_marker();
  void clear_has_progress_marker();
  void set_has_type_context();
  void clear_has_type_context();
  void set_has_encryption_key_name();
  void clear_has_encryption_key_name();
  void set_has_initial_sync_done();
  void clear_has_initial_sync_done();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr encryption_key_name_;
  ::sync_pb::DataTypeProgressMarker* progress_marker_;
  ::sync_pb::DataTypeContext* type_context_;
  bool initial_sync_done_;
  friend struct protobuf_model_5ftype_5fstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelTypeState

// optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
inline bool ModelTypeState::has_progress_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelTypeState::set_has_progress_marker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelTypeState::clear_has_progress_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelTypeState::clear_progress_marker() {
  if (progress_marker_ != NULL) progress_marker_->::sync_pb::DataTypeProgressMarker::Clear();
  clear_has_progress_marker();
}
inline const ::sync_pb::DataTypeProgressMarker& ModelTypeState::progress_marker() const {
  // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.progress_marker)
  return progress_marker_ != NULL ? *progress_marker_
                         : *::sync_pb::DataTypeProgressMarker::internal_default_instance();
}
inline ::sync_pb::DataTypeProgressMarker* ModelTypeState::mutable_progress_marker() {
  set_has_progress_marker();
  if (progress_marker_ == NULL) {
    progress_marker_ = new ::sync_pb::DataTypeProgressMarker;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.progress_marker)
  return progress_marker_;
}
inline ::sync_pb::DataTypeProgressMarker* ModelTypeState::release_progress_marker() {
  // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.progress_marker)
  clear_has_progress_marker();
  ::sync_pb::DataTypeProgressMarker* temp = progress_marker_;
  progress_marker_ = NULL;
  return temp;
}
inline void ModelTypeState::set_allocated_progress_marker(::sync_pb::DataTypeProgressMarker* progress_marker) {
  delete progress_marker_;
  progress_marker_ = progress_marker;
  if (progress_marker) {
    set_has_progress_marker();
  } else {
    clear_has_progress_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.progress_marker)
}

// optional .sync_pb.DataTypeContext type_context = 2;
inline bool ModelTypeState::has_type_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelTypeState::set_has_type_context() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelTypeState::clear_has_type_context() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelTypeState::clear_type_context() {
  if (type_context_ != NULL) type_context_->::sync_pb::DataTypeContext::Clear();
  clear_has_type_context();
}
inline const ::sync_pb::DataTypeContext& ModelTypeState::type_context() const {
  // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.type_context)
  return type_context_ != NULL ? *type_context_
                         : *::sync_pb::DataTypeContext::internal_default_instance();
}
inline ::sync_pb::DataTypeContext* ModelTypeState::mutable_type_context() {
  set_has_type_context();
  if (type_context_ == NULL) {
    type_context_ = new ::sync_pb::DataTypeContext;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.type_context)
  return type_context_;
}
inline ::sync_pb::DataTypeContext* ModelTypeState::release_type_context() {
  // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.type_context)
  clear_has_type_context();
  ::sync_pb::DataTypeContext* temp = type_context_;
  type_context_ = NULL;
  return temp;
}
inline void ModelTypeState::set_allocated_type_context(::sync_pb::DataTypeContext* type_context) {
  delete type_context_;
  type_context_ = type_context;
  if (type_context) {
    set_has_type_context();
  } else {
    clear_has_type_context();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.type_context)
}

// optional string encryption_key_name = 3;
inline bool ModelTypeState::has_encryption_key_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelTypeState::set_has_encryption_key_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelTypeState::clear_has_encryption_key_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelTypeState::clear_encryption_key_name() {
  encryption_key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encryption_key_name();
}
inline const ::std::string& ModelTypeState::encryption_key_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.encryption_key_name)
  return encryption_key_name_.GetNoArena();
}
inline void ModelTypeState::set_encryption_key_name(const ::std::string& value) {
  set_has_encryption_key_name();
  encryption_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ModelTypeState.encryption_key_name)
}
#if LANG_CXX11
inline void ModelTypeState::set_encryption_key_name(::std::string&& value) {
  set_has_encryption_key_name();
  encryption_key_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ModelTypeState.encryption_key_name)
}
#endif
inline void ModelTypeState::set_encryption_key_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encryption_key_name();
  encryption_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ModelTypeState.encryption_key_name)
}
inline void ModelTypeState::set_encryption_key_name(const char* value, size_t size) {
  set_has_encryption_key_name();
  encryption_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ModelTypeState.encryption_key_name)
}
inline ::std::string* ModelTypeState::mutable_encryption_key_name() {
  set_has_encryption_key_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.encryption_key_name)
  return encryption_key_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelTypeState::release_encryption_key_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.encryption_key_name)
  clear_has_encryption_key_name();
  return encryption_key_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeState::set_allocated_encryption_key_name(::std::string* encryption_key_name) {
  if (encryption_key_name != NULL) {
    set_has_encryption_key_name();
  } else {
    clear_has_encryption_key_name();
  }
  encryption_key_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryption_key_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.encryption_key_name)
}

// optional bool initial_sync_done = 4;
inline bool ModelTypeState::has_initial_sync_done() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelTypeState::set_has_initial_sync_done() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelTypeState::clear_has_initial_sync_done() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelTypeState::clear_initial_sync_done() {
  initial_sync_done_ = false;
  clear_has_initial_sync_done();
}
inline bool ModelTypeState::initial_sync_done() const {
  // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.initial_sync_done)
  return initial_sync_done_;
}
inline void ModelTypeState::set_initial_sync_done(bool value) {
  set_has_initial_sync_done();
  initial_sync_done_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ModelTypeState.initial_sync_done)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_5ftype_5fstate_2eproto__INCLUDED
