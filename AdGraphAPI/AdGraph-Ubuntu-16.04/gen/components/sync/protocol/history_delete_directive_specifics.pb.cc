// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: history_delete_directive_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "history_delete_directive_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class HistoryDeleteDirectiveSpecificsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HistoryDeleteDirectiveSpecifics> {
} _HistoryDeleteDirectiveSpecifics_default_instance_;
class GlobalIdDirectiveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GlobalIdDirective> {
} _GlobalIdDirective_default_instance_;
class TimeRangeDirectiveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeRangeDirective> {
} _TimeRangeDirective_default_instance_;

namespace protobuf_history_5fdelete_5fdirective_5fspecifics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _HistoryDeleteDirectiveSpecifics_default_instance_.Shutdown();
  _GlobalIdDirective_default_instance_.Shutdown();
  _TimeRangeDirective_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HistoryDeleteDirectiveSpecifics_default_instance_.DefaultConstruct();
  _GlobalIdDirective_default_instance_.DefaultConstruct();
  _TimeRangeDirective_default_instance_.DefaultConstruct();
  _HistoryDeleteDirectiveSpecifics_default_instance_.get_mutable()->global_id_directive_ = const_cast< ::sync_pb::GlobalIdDirective*>(
      ::sync_pb::GlobalIdDirective::internal_default_instance());
  _HistoryDeleteDirectiveSpecifics_default_instance_.get_mutable()->time_range_directive_ = const_cast< ::sync_pb::TimeRangeDirective*>(
      ::sync_pb::TimeRangeDirective::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_history_5fdelete_5fdirective_5fspecifics_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryDeleteDirectiveSpecifics::kGlobalIdDirectiveFieldNumber;
const int HistoryDeleteDirectiveSpecifics::kTimeRangeDirectiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryDeleteDirectiveSpecifics::HistoryDeleteDirectiveSpecifics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_history_5fdelete_5fdirective_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.HistoryDeleteDirectiveSpecifics)
}
HistoryDeleteDirectiveSpecifics::HistoryDeleteDirectiveSpecifics(const HistoryDeleteDirectiveSpecifics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_global_id_directive()) {
    global_id_directive_ = new ::sync_pb::GlobalIdDirective(*from.global_id_directive_);
  } else {
    global_id_directive_ = NULL;
  }
  if (from.has_time_range_directive()) {
    time_range_directive_ = new ::sync_pb::TimeRangeDirective(*from.time_range_directive_);
  } else {
    time_range_directive_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.HistoryDeleteDirectiveSpecifics)
}

void HistoryDeleteDirectiveSpecifics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&global_id_directive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_range_directive_) -
      reinterpret_cast<char*>(&global_id_directive_)) + sizeof(time_range_directive_));
}

HistoryDeleteDirectiveSpecifics::~HistoryDeleteDirectiveSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.HistoryDeleteDirectiveSpecifics)
  SharedDtor();
}

void HistoryDeleteDirectiveSpecifics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete global_id_directive_;
  }
  if (this != internal_default_instance()) {
    delete time_range_directive_;
  }
}

void HistoryDeleteDirectiveSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HistoryDeleteDirectiveSpecifics& HistoryDeleteDirectiveSpecifics::default_instance() {
  protobuf_history_5fdelete_5fdirective_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

HistoryDeleteDirectiveSpecifics* HistoryDeleteDirectiveSpecifics::New(::google::protobuf::Arena* arena) const {
  HistoryDeleteDirectiveSpecifics* n = new HistoryDeleteDirectiveSpecifics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryDeleteDirectiveSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_global_id_directive()) {
      GOOGLE_DCHECK(global_id_directive_ != NULL);
      global_id_directive_->::sync_pb::GlobalIdDirective::Clear();
    }
    if (has_time_range_directive()) {
      GOOGLE_DCHECK(time_range_directive_ != NULL);
      time_range_directive_->::sync_pb::TimeRangeDirective::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoryDeleteDirectiveSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global_id_directive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_range_directive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.HistoryDeleteDirectiveSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.HistoryDeleteDirectiveSpecifics)
  return false;
#undef DO_
}

void HistoryDeleteDirectiveSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->global_id_directive_, output);
  }

  // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->time_range_directive_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.HistoryDeleteDirectiveSpecifics)
}

size_t HistoryDeleteDirectiveSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
    if (has_global_id_directive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->global_id_directive_);
    }

    // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
    if (has_time_range_directive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_range_directive_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryDeleteDirectiveSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HistoryDeleteDirectiveSpecifics*>(&from));
}

void HistoryDeleteDirectiveSpecifics::MergeFrom(const HistoryDeleteDirectiveSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_global_id_directive()->::sync_pb::GlobalIdDirective::MergeFrom(from.global_id_directive());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_time_range_directive()->::sync_pb::TimeRangeDirective::MergeFrom(from.time_range_directive());
    }
  }
}

void HistoryDeleteDirectiveSpecifics::CopyFrom(const HistoryDeleteDirectiveSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryDeleteDirectiveSpecifics::IsInitialized() const {
  return true;
}

void HistoryDeleteDirectiveSpecifics::Swap(HistoryDeleteDirectiveSpecifics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryDeleteDirectiveSpecifics::InternalSwap(HistoryDeleteDirectiveSpecifics* other) {
  std::swap(global_id_directive_, other->global_id_directive_);
  std::swap(time_range_directive_, other->time_range_directive_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HistoryDeleteDirectiveSpecifics::GetTypeName() const {
  return "sync_pb.HistoryDeleteDirectiveSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryDeleteDirectiveSpecifics

// optional .sync_pb.GlobalIdDirective global_id_directive = 1;
bool HistoryDeleteDirectiveSpecifics::has_global_id_directive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryDeleteDirectiveSpecifics::set_has_global_id_directive() {
  _has_bits_[0] |= 0x00000001u;
}
void HistoryDeleteDirectiveSpecifics::clear_has_global_id_directive() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistoryDeleteDirectiveSpecifics::clear_global_id_directive() {
  if (global_id_directive_ != NULL) global_id_directive_->::sync_pb::GlobalIdDirective::Clear();
  clear_has_global_id_directive();
}
const ::sync_pb::GlobalIdDirective& HistoryDeleteDirectiveSpecifics::global_id_directive() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
  return global_id_directive_ != NULL ? *global_id_directive_
                         : *::sync_pb::GlobalIdDirective::internal_default_instance();
}
::sync_pb::GlobalIdDirective* HistoryDeleteDirectiveSpecifics::mutable_global_id_directive() {
  set_has_global_id_directive();
  if (global_id_directive_ == NULL) {
    global_id_directive_ = new ::sync_pb::GlobalIdDirective;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
  return global_id_directive_;
}
::sync_pb::GlobalIdDirective* HistoryDeleteDirectiveSpecifics::release_global_id_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
  clear_has_global_id_directive();
  ::sync_pb::GlobalIdDirective* temp = global_id_directive_;
  global_id_directive_ = NULL;
  return temp;
}
void HistoryDeleteDirectiveSpecifics::set_allocated_global_id_directive(::sync_pb::GlobalIdDirective* global_id_directive) {
  delete global_id_directive_;
  global_id_directive_ = global_id_directive;
  if (global_id_directive) {
    set_has_global_id_directive();
  } else {
    clear_has_global_id_directive();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
}

// optional .sync_pb.TimeRangeDirective time_range_directive = 2;
bool HistoryDeleteDirectiveSpecifics::has_time_range_directive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistoryDeleteDirectiveSpecifics::set_has_time_range_directive() {
  _has_bits_[0] |= 0x00000002u;
}
void HistoryDeleteDirectiveSpecifics::clear_has_time_range_directive() {
  _has_bits_[0] &= ~0x00000002u;
}
void HistoryDeleteDirectiveSpecifics::clear_time_range_directive() {
  if (time_range_directive_ != NULL) time_range_directive_->::sync_pb::TimeRangeDirective::Clear();
  clear_has_time_range_directive();
}
const ::sync_pb::TimeRangeDirective& HistoryDeleteDirectiveSpecifics::time_range_directive() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
  return time_range_directive_ != NULL ? *time_range_directive_
                         : *::sync_pb::TimeRangeDirective::internal_default_instance();
}
::sync_pb::TimeRangeDirective* HistoryDeleteDirectiveSpecifics::mutable_time_range_directive() {
  set_has_time_range_directive();
  if (time_range_directive_ == NULL) {
    time_range_directive_ = new ::sync_pb::TimeRangeDirective;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
  return time_range_directive_;
}
::sync_pb::TimeRangeDirective* HistoryDeleteDirectiveSpecifics::release_time_range_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
  clear_has_time_range_directive();
  ::sync_pb::TimeRangeDirective* temp = time_range_directive_;
  time_range_directive_ = NULL;
  return temp;
}
void HistoryDeleteDirectiveSpecifics::set_allocated_time_range_directive(::sync_pb::TimeRangeDirective* time_range_directive) {
  delete time_range_directive_;
  time_range_directive_ = time_range_directive;
  if (time_range_directive) {
    set_has_time_range_directive();
  } else {
    clear_has_time_range_directive();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalIdDirective::kGlobalIdFieldNumber;
const int GlobalIdDirective::kStartTimeUsecFieldNumber;
const int GlobalIdDirective::kEndTimeUsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalIdDirective::GlobalIdDirective()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_history_5fdelete_5fdirective_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GlobalIdDirective)
}
GlobalIdDirective::GlobalIdDirective(const GlobalIdDirective& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      global_id_(from.global_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_usec_, &from.start_time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_usec_) -
    reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GlobalIdDirective)
}

void GlobalIdDirective::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_usec_) -
      reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
}

GlobalIdDirective::~GlobalIdDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.GlobalIdDirective)
  SharedDtor();
}

void GlobalIdDirective::SharedDtor() {
}

void GlobalIdDirective::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GlobalIdDirective& GlobalIdDirective::default_instance() {
  protobuf_history_5fdelete_5fdirective_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

GlobalIdDirective* GlobalIdDirective::New(::google::protobuf::Arena* arena) const {
  GlobalIdDirective* n = new GlobalIdDirective;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GlobalIdDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GlobalIdDirective)
  global_id_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&start_time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_usec_) -
        reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GlobalIdDirective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GlobalIdDirective)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 global_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_global_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_global_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_time_usec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_start_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_time_usec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_end_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GlobalIdDirective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GlobalIdDirective)
  return false;
#undef DO_
}

void GlobalIdDirective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GlobalIdDirective)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 global_id = 1;
  for (int i = 0, n = this->global_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->global_id(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 start_time_usec = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time_usec(), output);
  }

  // optional int64 end_time_usec = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_time_usec(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GlobalIdDirective)
}

size_t GlobalIdDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GlobalIdDirective)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int64 global_id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->global_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->global_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 start_time_usec = 2;
    if (has_start_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time_usec());
    }

    // optional int64 end_time_usec = 3;
    if (has_end_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time_usec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalIdDirective::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GlobalIdDirective*>(&from));
}

void GlobalIdDirective::MergeFrom(const GlobalIdDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GlobalIdDirective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  global_id_.MergeFrom(from.global_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_usec_ = from.start_time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_usec_ = from.end_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GlobalIdDirective::CopyFrom(const GlobalIdDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GlobalIdDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalIdDirective::IsInitialized() const {
  return true;
}

void GlobalIdDirective::Swap(GlobalIdDirective* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlobalIdDirective::InternalSwap(GlobalIdDirective* other) {
  global_id_.InternalSwap(&other->global_id_);
  std::swap(start_time_usec_, other->start_time_usec_);
  std::swap(end_time_usec_, other->end_time_usec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GlobalIdDirective::GetTypeName() const {
  return "sync_pb.GlobalIdDirective";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GlobalIdDirective

// repeated int64 global_id = 1;
int GlobalIdDirective::global_id_size() const {
  return global_id_.size();
}
void GlobalIdDirective::clear_global_id() {
  global_id_.Clear();
}
::google::protobuf::int64 GlobalIdDirective::global_id(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GlobalIdDirective.global_id)
  return global_id_.Get(index);
}
void GlobalIdDirective::set_global_id(int index, ::google::protobuf::int64 value) {
  global_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.GlobalIdDirective.global_id)
}
void GlobalIdDirective::add_global_id(::google::protobuf::int64 value) {
  global_id_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.GlobalIdDirective.global_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GlobalIdDirective::global_id() const {
  // @@protoc_insertion_point(field_list:sync_pb.GlobalIdDirective.global_id)
  return global_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GlobalIdDirective::mutable_global_id() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GlobalIdDirective.global_id)
  return &global_id_;
}

// optional int64 start_time_usec = 2;
bool GlobalIdDirective::has_start_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GlobalIdDirective::set_has_start_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
void GlobalIdDirective::clear_has_start_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalIdDirective::clear_start_time_usec() {
  start_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_start_time_usec();
}
::google::protobuf::int64 GlobalIdDirective::start_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.GlobalIdDirective.start_time_usec)
  return start_time_usec_;
}
void GlobalIdDirective::set_start_time_usec(::google::protobuf::int64 value) {
  set_has_start_time_usec();
  start_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GlobalIdDirective.start_time_usec)
}

// optional int64 end_time_usec = 3;
bool GlobalIdDirective::has_end_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GlobalIdDirective::set_has_end_time_usec() {
  _has_bits_[0] |= 0x00000002u;
}
void GlobalIdDirective::clear_has_end_time_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalIdDirective::clear_end_time_usec() {
  end_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_end_time_usec();
}
::google::protobuf::int64 GlobalIdDirective::end_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.GlobalIdDirective.end_time_usec)
  return end_time_usec_;
}
void GlobalIdDirective::set_end_time_usec(::google::protobuf::int64 value) {
  set_has_end_time_usec();
  end_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GlobalIdDirective.end_time_usec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeRangeDirective::kStartTimeUsecFieldNumber;
const int TimeRangeDirective::kEndTimeUsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeRangeDirective::TimeRangeDirective()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_history_5fdelete_5fdirective_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.TimeRangeDirective)
}
TimeRangeDirective::TimeRangeDirective(const TimeRangeDirective& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_usec_, &from.start_time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_usec_) -
    reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.TimeRangeDirective)
}

void TimeRangeDirective::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_usec_) -
      reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
}

TimeRangeDirective::~TimeRangeDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.TimeRangeDirective)
  SharedDtor();
}

void TimeRangeDirective::SharedDtor() {
}

void TimeRangeDirective::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeRangeDirective& TimeRangeDirective::default_instance() {
  protobuf_history_5fdelete_5fdirective_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimeRangeDirective* TimeRangeDirective::New(::google::protobuf::Arena* arena) const {
  TimeRangeDirective* n = new TimeRangeDirective;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeRangeDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.TimeRangeDirective)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&start_time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_usec_) -
        reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeRangeDirective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.TimeRangeDirective)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_time_usec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_start_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_time_usec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_end_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.TimeRangeDirective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.TimeRangeDirective)
  return false;
#undef DO_
}

void TimeRangeDirective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.TimeRangeDirective)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_time_usec(), output);
  }

  // optional int64 end_time_usec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_time_usec(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.TimeRangeDirective)
}

size_t TimeRangeDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.TimeRangeDirective)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 start_time_usec = 1;
    if (has_start_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time_usec());
    }

    // optional int64 end_time_usec = 2;
    if (has_end_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time_usec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeRangeDirective::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeRangeDirective*>(&from));
}

void TimeRangeDirective::MergeFrom(const TimeRangeDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.TimeRangeDirective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_usec_ = from.start_time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_usec_ = from.end_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeRangeDirective::CopyFrom(const TimeRangeDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.TimeRangeDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRangeDirective::IsInitialized() const {
  return true;
}

void TimeRangeDirective::Swap(TimeRangeDirective* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeRangeDirective::InternalSwap(TimeRangeDirective* other) {
  std::swap(start_time_usec_, other->start_time_usec_);
  std::swap(end_time_usec_, other->end_time_usec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TimeRangeDirective::GetTypeName() const {
  return "sync_pb.TimeRangeDirective";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeRangeDirective

// optional int64 start_time_usec = 1;
bool TimeRangeDirective::has_start_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeRangeDirective::set_has_start_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeRangeDirective::clear_has_start_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeRangeDirective::clear_start_time_usec() {
  start_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_start_time_usec();
}
::google::protobuf::int64 TimeRangeDirective::start_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.TimeRangeDirective.start_time_usec)
  return start_time_usec_;
}
void TimeRangeDirective::set_start_time_usec(::google::protobuf::int64 value) {
  set_has_start_time_usec();
  start_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TimeRangeDirective.start_time_usec)
}

// optional int64 end_time_usec = 2;
bool TimeRangeDirective::has_end_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeRangeDirective::set_has_end_time_usec() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeRangeDirective::clear_has_end_time_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeRangeDirective::clear_end_time_usec() {
  end_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_end_time_usec();
}
::google::protobuf::int64 TimeRangeDirective::end_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.TimeRangeDirective.end_time_usec)
  return end_time_usec_;
}
void TimeRangeDirective::set_end_time_usec(::google::protobuf::int64 value) {
  set_has_end_time_usec();
  end_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TimeRangeDirective.end_time_usec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
