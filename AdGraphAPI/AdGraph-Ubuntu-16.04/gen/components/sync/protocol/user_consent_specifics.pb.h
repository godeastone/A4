// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_consent_specifics.proto

#ifndef PROTOBUF_user_5fconsent_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_user_5fconsent_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "sync_enums.pb.h"
#include "user_consent_types.pb.h"
// @@protoc_insertion_point(includes)
namespace sync_pb {
class UserConsentSpecifics;
class UserConsentSpecificsDefaultTypeInternal;
extern UserConsentSpecificsDefaultTypeInternal _UserConsentSpecifics_default_instance_;
}  // namespace sync_pb

namespace sync_pb {

namespace protobuf_user_5fconsent_5fspecifics_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_user_5fconsent_5fspecifics_2eproto

enum UserConsentSpecifics_Feature {
  UserConsentSpecifics_Feature_FEATURE_UNSPECIFIED = 0,
  UserConsentSpecifics_Feature_CHROME_SYNC = 1,
  UserConsentSpecifics_Feature_PLAY_STORE = 2,
  UserConsentSpecifics_Feature_BACKUP_AND_RESTORE = 3,
  UserConsentSpecifics_Feature_GOOGLE_LOCATION_SERVICE = 4
};
bool UserConsentSpecifics_Feature_IsValid(int value);
const UserConsentSpecifics_Feature UserConsentSpecifics_Feature_Feature_MIN = UserConsentSpecifics_Feature_FEATURE_UNSPECIFIED;
const UserConsentSpecifics_Feature UserConsentSpecifics_Feature_Feature_MAX = UserConsentSpecifics_Feature_GOOGLE_LOCATION_SERVICE;
const int UserConsentSpecifics_Feature_Feature_ARRAYSIZE = UserConsentSpecifics_Feature_Feature_MAX + 1;

// ===================================================================

class UserConsentSpecifics : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentSpecifics) */ {
 public:
  UserConsentSpecifics();
  virtual ~UserConsentSpecifics();

  UserConsentSpecifics(const UserConsentSpecifics& from);

  inline UserConsentSpecifics& operator=(const UserConsentSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentSpecifics& default_instance();

  enum ConsentCase {
    kSyncConsent = 7,
    kArcBackupAndRestoreConsent = 8,
    kArcLocationServiceConsent = 9,
    kArcPlayTermsOfServiceConsent = 10,
    kArcMetricsAndUsageConsent = 11,
    CONSENT_NOT_SET = 0,
  };

  static inline const UserConsentSpecifics* internal_default_instance() {
    return reinterpret_cast<const UserConsentSpecifics*>(
               &_UserConsentSpecifics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserConsentSpecifics* other);

  // implements Message ----------------------------------------------

  inline UserConsentSpecifics* New() const PROTOBUF_FINAL { return New(NULL); }

  UserConsentSpecifics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserConsentSpecifics& from);
  void MergeFrom(const UserConsentSpecifics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentSpecifics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserConsentSpecifics_Feature Feature;
  static const Feature FEATURE_UNSPECIFIED =
    UserConsentSpecifics_Feature_FEATURE_UNSPECIFIED;
  static const Feature CHROME_SYNC =
    UserConsentSpecifics_Feature_CHROME_SYNC;
  static const Feature PLAY_STORE =
    UserConsentSpecifics_Feature_PLAY_STORE;
  static const Feature BACKUP_AND_RESTORE =
    UserConsentSpecifics_Feature_BACKUP_AND_RESTORE;
  static const Feature GOOGLE_LOCATION_SERVICE =
    UserConsentSpecifics_Feature_GOOGLE_LOCATION_SERVICE;
  static inline bool Feature_IsValid(int value) {
    return UserConsentSpecifics_Feature_IsValid(value);
  }
  static const Feature Feature_MIN =
    UserConsentSpecifics_Feature_Feature_MIN;
  static const Feature Feature_MAX =
    UserConsentSpecifics_Feature_Feature_MAX;
  static const int Feature_ARRAYSIZE =
    UserConsentSpecifics_Feature_Feature_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int description_grd_ids_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_description_grd_ids();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDescriptionGrdIdsFieldNumber = 2;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int32 description_grd_ids(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_description_grd_ids(int index, ::google::protobuf::int32 value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_description_grd_ids(::google::protobuf::int32 value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      description_grd_ids() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_description_grd_ids();

  // optional string locale = 4;
  bool has_locale() const;
  void clear_locale();
  static const int kLocaleFieldNumber = 4;
  const ::std::string& locale() const;
  void set_locale(const ::std::string& value);
  #if LANG_CXX11
  void set_locale(::std::string&& value);
  #endif
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  ::std::string* mutable_locale();
  ::std::string* release_locale();
  void set_allocated_locale(::std::string* locale);

  // optional string account_id = 6;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 6;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_feature() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_feature();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kFeatureFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::sync_pb::UserConsentSpecifics_Feature feature() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_feature(::sync_pb::UserConsentSpecifics_Feature value);

  // optional int32 confirmation_grd_id = 3 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_confirmation_grd_id() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_confirmation_grd_id();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kConfirmationGrdIdFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int32 confirmation_grd_id() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_confirmation_grd_id(::google::protobuf::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_status();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kStatusFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // optional int64 client_consent_time_usec = 12;
  bool has_client_consent_time_usec() const;
  void clear_client_consent_time_usec();
  static const int kClientConsentTimeUsecFieldNumber = 12;
  ::google::protobuf::int64 client_consent_time_usec() const;
  void set_client_consent_time_usec(::google::protobuf::int64 value);

  // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
  bool has_sync_consent() const;
  void clear_sync_consent();
  static const int kSyncConsentFieldNumber = 7;
  const ::sync_pb::UserConsentTypes_SyncConsent& sync_consent() const;
  ::sync_pb::UserConsentTypes_SyncConsent* mutable_sync_consent();
  ::sync_pb::UserConsentTypes_SyncConsent* release_sync_consent();
  void set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent);

  // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
  bool has_arc_backup_and_restore_consent() const;
  void clear_arc_backup_and_restore_consent();
  static const int kArcBackupAndRestoreConsentFieldNumber = 8;
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& arc_backup_and_restore_consent() const;
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* mutable_arc_backup_and_restore_consent();
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* release_arc_backup_and_restore_consent();
  void set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent);

  // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
  bool has_arc_location_service_consent() const;
  void clear_arc_location_service_consent();
  static const int kArcLocationServiceConsentFieldNumber = 9;
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& arc_location_service_consent() const;
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* mutable_arc_location_service_consent();
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* release_arc_location_service_consent();
  void set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent);

  // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
  bool has_arc_play_terms_of_service_consent() const;
  void clear_arc_play_terms_of_service_consent();
  static const int kArcPlayTermsOfServiceConsentFieldNumber = 10;
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& arc_play_terms_of_service_consent() const;
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* mutable_arc_play_terms_of_service_consent();
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* release_arc_play_terms_of_service_consent();
  void set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent);

  // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
  bool has_arc_metrics_and_usage_consent() const;
  void clear_arc_metrics_and_usage_consent();
  static const int kArcMetricsAndUsageConsentFieldNumber = 11;
  const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent& arc_metrics_and_usage_consent() const;
  ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* mutable_arc_metrics_and_usage_consent();
  ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* release_arc_metrics_and_usage_consent();
  void set_allocated_arc_metrics_and_usage_consent(::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent);

  ConsentCase consent_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentSpecifics)
 private:
  void set_has_locale();
  void clear_has_locale();
  void set_has_client_consent_time_usec();
  void clear_has_client_consent_time_usec();
  void set_has_sync_consent();
  void set_has_arc_backup_and_restore_consent();
  void set_has_arc_location_service_consent();
  void set_has_arc_play_terms_of_service_consent();
  void set_has_arc_metrics_and_usage_consent();
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_feature();
  void clear_has_feature();
  void set_has_confirmation_grd_id();
  void clear_has_confirmation_grd_id();
  void set_has_status();
  void clear_has_status();

  inline bool has_consent() const;
  void clear_consent();
  inline void clear_has_consent();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > description_grd_ids_;
  ::google::protobuf::internal::ArenaStringPtr locale_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  int feature_;
  ::google::protobuf::int32 confirmation_grd_id_;
  int status_;
  ::google::protobuf::int64 client_consent_time_usec_;
  union ConsentUnion {
    ConsentUnion() {}
    ::sync_pb::UserConsentTypes_SyncConsent* sync_consent_;
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent_;
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent_;
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent_;
    ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent_;
  } consent_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_user_5fconsent_5fspecifics_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserConsentSpecifics

// optional string locale = 4;
inline bool UserConsentSpecifics::has_locale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentSpecifics::set_has_locale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserConsentSpecifics::clear_has_locale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserConsentSpecifics::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locale();
}
inline const ::std::string& UserConsentSpecifics::locale() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.locale)
  return locale_.GetNoArena();
}
inline void UserConsentSpecifics::set_locale(const ::std::string& value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.locale)
}
#if LANG_CXX11
inline void UserConsentSpecifics::set_locale(::std::string&& value) {
  set_has_locale();
  locale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserConsentSpecifics.locale)
}
#endif
inline void UserConsentSpecifics::set_locale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserConsentSpecifics.locale)
}
inline void UserConsentSpecifics::set_locale(const char* value, size_t size) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserConsentSpecifics.locale)
}
inline ::std::string* UserConsentSpecifics::mutable_locale() {
  set_has_locale();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserConsentSpecifics::release_locale() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.locale)
  clear_has_locale();
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserConsentSpecifics::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.locale)
}

// optional int64 client_consent_time_usec = 12;
inline bool UserConsentSpecifics::has_client_consent_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserConsentSpecifics::set_has_client_consent_time_usec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserConsentSpecifics::clear_has_client_consent_time_usec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserConsentSpecifics::clear_client_consent_time_usec() {
  client_consent_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_client_consent_time_usec();
}
inline ::google::protobuf::int64 UserConsentSpecifics::client_consent_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.client_consent_time_usec)
  return client_consent_time_usec_;
}
inline void UserConsentSpecifics::set_client_consent_time_usec(::google::protobuf::int64 value) {
  set_has_client_consent_time_usec();
  client_consent_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.client_consent_time_usec)
}

// optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
inline bool UserConsentSpecifics::has_sync_consent() const {
  return consent_case() == kSyncConsent;
}
inline void UserConsentSpecifics::set_has_sync_consent() {
  _oneof_case_[0] = kSyncConsent;
}
inline void UserConsentSpecifics::clear_sync_consent() {
  if (has_sync_consent()) {
    delete consent_.sync_consent_;
    clear_has_consent();
  }
}
inline  const ::sync_pb::UserConsentTypes_SyncConsent& UserConsentSpecifics::sync_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.sync_consent)
  return has_sync_consent()
      ? *consent_.sync_consent_
      : ::sync_pb::UserConsentTypes_SyncConsent::default_instance();
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserConsentSpecifics::mutable_sync_consent() {
  if (!has_sync_consent()) {
    clear_consent();
    set_has_sync_consent();
    consent_.sync_consent_ = new ::sync_pb::UserConsentTypes_SyncConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.sync_consent)
  return consent_.sync_consent_;
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserConsentSpecifics::release_sync_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.sync_consent)
  if (has_sync_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_SyncConsent* temp = consent_.sync_consent_;
    consent_.sync_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserConsentSpecifics::set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent) {
  clear_consent();
  if (sync_consent) {
    set_has_sync_consent();
    consent_.sync_consent_ = sync_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.sync_consent)
}

// optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
inline bool UserConsentSpecifics::has_arc_backup_and_restore_consent() const {
  return consent_case() == kArcBackupAndRestoreConsent;
}
inline void UserConsentSpecifics::set_has_arc_backup_and_restore_consent() {
  _oneof_case_[0] = kArcBackupAndRestoreConsent;
}
inline void UserConsentSpecifics::clear_arc_backup_and_restore_consent() {
  if (has_arc_backup_and_restore_consent()) {
    delete consent_.arc_backup_and_restore_consent_;
    clear_has_consent();
  }
}
inline  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& UserConsentSpecifics::arc_backup_and_restore_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
  return has_arc_backup_and_restore_consent()
      ? *consent_.arc_backup_and_restore_consent_
      : ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::default_instance();
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserConsentSpecifics::mutable_arc_backup_and_restore_consent() {
  if (!has_arc_backup_and_restore_consent()) {
    clear_consent();
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = new ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
  return consent_.arc_backup_and_restore_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserConsentSpecifics::release_arc_backup_and_restore_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
  if (has_arc_backup_and_restore_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* temp = consent_.arc_backup_and_restore_consent_;
    consent_.arc_backup_and_restore_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserConsentSpecifics::set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent) {
  clear_consent();
  if (arc_backup_and_restore_consent) {
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = arc_backup_and_restore_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
}

// optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
inline bool UserConsentSpecifics::has_arc_location_service_consent() const {
  return consent_case() == kArcLocationServiceConsent;
}
inline void UserConsentSpecifics::set_has_arc_location_service_consent() {
  _oneof_case_[0] = kArcLocationServiceConsent;
}
inline void UserConsentSpecifics::clear_arc_location_service_consent() {
  if (has_arc_location_service_consent()) {
    delete consent_.arc_location_service_consent_;
    clear_has_consent();
  }
}
inline  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& UserConsentSpecifics::arc_location_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_location_service_consent)
  return has_arc_location_service_consent()
      ? *consent_.arc_location_service_consent_
      : ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::default_instance();
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserConsentSpecifics::mutable_arc_location_service_consent() {
  if (!has_arc_location_service_consent()) {
    clear_consent();
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = new ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_location_service_consent)
  return consent_.arc_location_service_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserConsentSpecifics::release_arc_location_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_location_service_consent)
  if (has_arc_location_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* temp = consent_.arc_location_service_consent_;
    consent_.arc_location_service_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserConsentSpecifics::set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent) {
  clear_consent();
  if (arc_location_service_consent) {
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = arc_location_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_location_service_consent)
}

// optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
inline bool UserConsentSpecifics::has_arc_play_terms_of_service_consent() const {
  return consent_case() == kArcPlayTermsOfServiceConsent;
}
inline void UserConsentSpecifics::set_has_arc_play_terms_of_service_consent() {
  _oneof_case_[0] = kArcPlayTermsOfServiceConsent;
}
inline void UserConsentSpecifics::clear_arc_play_terms_of_service_consent() {
  if (has_arc_play_terms_of_service_consent()) {
    delete consent_.arc_play_terms_of_service_consent_;
    clear_has_consent();
  }
}
inline  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& UserConsentSpecifics::arc_play_terms_of_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
  return has_arc_play_terms_of_service_consent()
      ? *consent_.arc_play_terms_of_service_consent_
      : ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::default_instance();
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserConsentSpecifics::mutable_arc_play_terms_of_service_consent() {
  if (!has_arc_play_terms_of_service_consent()) {
    clear_consent();
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = new ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
  return consent_.arc_play_terms_of_service_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserConsentSpecifics::release_arc_play_terms_of_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
  if (has_arc_play_terms_of_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* temp = consent_.arc_play_terms_of_service_consent_;
    consent_.arc_play_terms_of_service_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserConsentSpecifics::set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent) {
  clear_consent();
  if (arc_play_terms_of_service_consent) {
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = arc_play_terms_of_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
}

// optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
inline bool UserConsentSpecifics::has_arc_metrics_and_usage_consent() const {
  return consent_case() == kArcMetricsAndUsageConsent;
}
inline void UserConsentSpecifics::set_has_arc_metrics_and_usage_consent() {
  _oneof_case_[0] = kArcMetricsAndUsageConsent;
}
inline void UserConsentSpecifics::clear_arc_metrics_and_usage_consent() {
  if (has_arc_metrics_and_usage_consent()) {
    delete consent_.arc_metrics_and_usage_consent_;
    clear_has_consent();
  }
}
inline  const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent& UserConsentSpecifics::arc_metrics_and_usage_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_metrics_and_usage_consent)
  return has_arc_metrics_and_usage_consent()
      ? *consent_.arc_metrics_and_usage_consent_
      : ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::default_instance();
}
inline ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* UserConsentSpecifics::mutable_arc_metrics_and_usage_consent() {
  if (!has_arc_metrics_and_usage_consent()) {
    clear_consent();
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = new ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_metrics_and_usage_consent)
  return consent_.arc_metrics_and_usage_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* UserConsentSpecifics::release_arc_metrics_and_usage_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_metrics_and_usage_consent)
  if (has_arc_metrics_and_usage_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* temp = consent_.arc_metrics_and_usage_consent_;
    consent_.arc_metrics_and_usage_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserConsentSpecifics::set_allocated_arc_metrics_and_usage_consent(::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent) {
  clear_consent();
  if (arc_metrics_and_usage_consent) {
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = arc_metrics_and_usage_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_metrics_and_usage_consent)
}

// optional string account_id = 6;
inline bool UserConsentSpecifics::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentSpecifics::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserConsentSpecifics::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserConsentSpecifics::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_id();
}
inline const ::std::string& UserConsentSpecifics::account_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.account_id)
  return account_id_.GetNoArena();
}
inline void UserConsentSpecifics::set_account_id(const ::std::string& value) {
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.account_id)
}
#if LANG_CXX11
inline void UserConsentSpecifics::set_account_id(::std::string&& value) {
  set_has_account_id();
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserConsentSpecifics.account_id)
}
#endif
inline void UserConsentSpecifics::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserConsentSpecifics.account_id)
}
inline void UserConsentSpecifics::set_account_id(const char* value, size_t size) {
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserConsentSpecifics.account_id)
}
inline ::std::string* UserConsentSpecifics::mutable_account_id() {
  set_has_account_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserConsentSpecifics::release_account_id() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.account_id)
  clear_has_account_id();
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserConsentSpecifics::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.account_id)
}

// optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
inline bool UserConsentSpecifics::has_feature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserConsentSpecifics::set_has_feature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserConsentSpecifics::clear_has_feature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserConsentSpecifics::clear_feature() {
  feature_ = 0;
  clear_has_feature();
}
inline ::sync_pb::UserConsentSpecifics_Feature UserConsentSpecifics::feature() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.feature)
  return static_cast< ::sync_pb::UserConsentSpecifics_Feature >(feature_);
}
inline void UserConsentSpecifics::set_feature(::sync_pb::UserConsentSpecifics_Feature value) {
  assert(::sync_pb::UserConsentSpecifics_Feature_IsValid(value));
  set_has_feature();
  feature_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.feature)
}

// repeated int32 description_grd_ids = 2 [deprecated = true];
inline int UserConsentSpecifics::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentSpecifics::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::google::protobuf::int32 UserConsentSpecifics::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentSpecifics::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.description_grd_ids)
}
inline void UserConsentSpecifics::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentSpecifics.description_grd_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConsentSpecifics::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentSpecifics.description_grd_ids)
  return description_grd_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConsentSpecifics::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentSpecifics.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 3 [deprecated = true];
inline bool UserConsentSpecifics::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserConsentSpecifics::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserConsentSpecifics::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserConsentSpecifics::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
inline ::google::protobuf::int32 UserConsentSpecifics::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentSpecifics::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
inline bool UserConsentSpecifics::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserConsentSpecifics::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserConsentSpecifics::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserConsentSpecifics::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentSpecifics::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentSpecifics::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.status)
}

inline bool UserConsentSpecifics::has_consent() const {
  return consent_case() != CONSENT_NOT_SET;
}
inline void UserConsentSpecifics::clear_has_consent() {
  _oneof_case_[0] = CONSENT_NOT_SET;
}
inline UserConsentSpecifics::ConsentCase UserConsentSpecifics::consent_case() const {
  return UserConsentSpecifics::ConsentCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace sync_pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sync_pb::UserConsentSpecifics_Feature> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5fconsent_5fspecifics_2eproto__INCLUDED
