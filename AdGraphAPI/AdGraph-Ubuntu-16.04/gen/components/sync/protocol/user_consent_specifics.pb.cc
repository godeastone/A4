// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_consent_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_consent_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class UserConsentSpecificsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserConsentSpecifics> {
  public:
  const ::sync_pb::UserConsentTypes_SyncConsent* sync_consent_;
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent_;
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent_;
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent_;
  const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent_;
} _UserConsentSpecifics_default_instance_;

namespace protobuf_user_5fconsent_5fspecifics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _UserConsentSpecifics_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sync_pb::protobuf_sync_5fenums_2eproto::InitDefaults();
  ::sync_pb::protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  _UserConsentSpecifics_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::sync_pb::protobuf_sync_5fenums_2eproto::AddDescriptors();
  ::sync_pb::protobuf_user_5fconsent_5ftypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_user_5fconsent_5fspecifics_2eproto

bool UserConsentSpecifics_Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserConsentSpecifics_Feature UserConsentSpecifics::FEATURE_UNSPECIFIED;
const UserConsentSpecifics_Feature UserConsentSpecifics::CHROME_SYNC;
const UserConsentSpecifics_Feature UserConsentSpecifics::PLAY_STORE;
const UserConsentSpecifics_Feature UserConsentSpecifics::BACKUP_AND_RESTORE;
const UserConsentSpecifics_Feature UserConsentSpecifics::GOOGLE_LOCATION_SERVICE;
const UserConsentSpecifics_Feature UserConsentSpecifics::Feature_MIN;
const UserConsentSpecifics_Feature UserConsentSpecifics::Feature_MAX;
const int UserConsentSpecifics::Feature_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserConsentSpecifics::kLocaleFieldNumber;
const int UserConsentSpecifics::kClientConsentTimeUsecFieldNumber;
const int UserConsentSpecifics::kSyncConsentFieldNumber;
const int UserConsentSpecifics::kArcBackupAndRestoreConsentFieldNumber;
const int UserConsentSpecifics::kArcLocationServiceConsentFieldNumber;
const int UserConsentSpecifics::kArcPlayTermsOfServiceConsentFieldNumber;
const int UserConsentSpecifics::kArcMetricsAndUsageConsentFieldNumber;
const int UserConsentSpecifics::kAccountIdFieldNumber;
const int UserConsentSpecifics::kFeatureFieldNumber;
const int UserConsentSpecifics::kDescriptionGrdIdsFieldNumber;
const int UserConsentSpecifics::kConfirmationGrdIdFieldNumber;
const int UserConsentSpecifics::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserConsentSpecifics::UserConsentSpecifics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fconsent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserConsentSpecifics)
}
UserConsentSpecifics::UserConsentSpecifics(const UserConsentSpecifics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      description_grd_ids_(from.description_grd_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_locale()) {
    locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_id()) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  ::memcpy(&feature_, &from.feature_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_consent_time_usec_) -
    reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  clear_has_consent();
  switch (from.consent_case()) {
    case kSyncConsent: {
      mutable_sync_consent()->::sync_pb::UserConsentTypes_SyncConsent::MergeFrom(from.sync_consent());
      break;
    }
    case kArcBackupAndRestoreConsent: {
      mutable_arc_backup_and_restore_consent()->::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(from.arc_backup_and_restore_consent());
      break;
    }
    case kArcLocationServiceConsent: {
      mutable_arc_location_service_consent()->::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(from.arc_location_service_consent());
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      mutable_arc_play_terms_of_service_consent()->::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(from.arc_play_terms_of_service_consent());
      break;
    }
    case kArcMetricsAndUsageConsent: {
      mutable_arc_metrics_and_usage_consent()->::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::MergeFrom(from.arc_metrics_and_usage_consent());
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserConsentSpecifics)
}

void UserConsentSpecifics::SharedCtor() {
  _cached_size_ = 0;
  locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_consent_time_usec_) -
      reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  clear_has_consent();
}

UserConsentSpecifics::~UserConsentSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.UserConsentSpecifics)
  SharedDtor();
}

void UserConsentSpecifics::SharedDtor() {
  locale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_consent()) {
    clear_consent();
  }
}

void UserConsentSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserConsentSpecifics& UserConsentSpecifics::default_instance() {
  protobuf_user_5fconsent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserConsentSpecifics* UserConsentSpecifics::New(::google::protobuf::Arena* arena) const {
  UserConsentSpecifics* n = new UserConsentSpecifics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserConsentSpecifics::clear_consent() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.UserConsentSpecifics)
  switch (consent_case()) {
    case kSyncConsent: {
      delete consent_.sync_consent_;
      break;
    }
    case kArcBackupAndRestoreConsent: {
      delete consent_.arc_backup_and_restore_consent_;
      break;
    }
    case kArcLocationServiceConsent: {
      delete consent_.arc_location_service_consent_;
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      delete consent_.arc_play_terms_of_service_consent_;
      break;
    }
    case kArcMetricsAndUsageConsent: {
      delete consent_.arc_metrics_and_usage_consent_;
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSENT_NOT_SET;
}


void UserConsentSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserConsentSpecifics)
  description_grd_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_locale()) {
      GOOGLE_DCHECK(!locale_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*locale_.UnsafeRawStringPointer())->clear();
    }
    if (has_account_id()) {
      GOOGLE_DCHECK(!account_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&feature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_consent_time_usec_) -
        reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  }
  clear_consent();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserConsentSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserConsentSpecifics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentSpecifics_Feature_IsValid(value)) {
            set_feature(static_cast< ::sync_pb::UserConsentSpecifics_Feature >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 description_grd_ids = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_description_grd_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_description_grd_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 confirmation_grd_id = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_confirmation_grd_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmation_grd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string locale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc_backup_and_restore_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc_location_service_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc_play_terms_of_service_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc_metrics_and_usage_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 client_consent_time_usec = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_client_consent_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_consent_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserConsentSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserConsentSpecifics)
  return false;
#undef DO_
}

void UserConsentSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserConsentSpecifics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->feature(), output);
  }

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  for (int i = 0, n = this->description_grd_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->description_grd_ids(i), output);
  }

  // optional int32 confirmation_grd_id = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->confirmation_grd_id(), output);
  }

  // optional string locale = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->locale(), output);
  }

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional string account_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account_id(), output);
  }

  switch (consent_case()) {
    case kSyncConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        7, *consent_.sync_consent_, output);
      break;
    case kArcBackupAndRestoreConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        8, *consent_.arc_backup_and_restore_consent_, output);
      break;
    case kArcLocationServiceConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        9, *consent_.arc_location_service_consent_, output);
      break;
    case kArcPlayTermsOfServiceConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        10, *consent_.arc_play_terms_of_service_consent_, output);
      break;
    case kArcMetricsAndUsageConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        11, *consent_.arc_metrics_and_usage_consent_, output);
      break;
    default: ;
  }
  // optional int64 client_consent_time_usec = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->client_consent_time_usec(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserConsentSpecifics)
}

size_t UserConsentSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserConsentSpecifics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->description_grd_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->description_grd_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string locale = 4;
    if (has_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locale());
    }

    // optional string account_id = 6;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }

    // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->feature());
    }

    // optional int32 confirmation_grd_id = 3 [deprecated = true];
    if (has_confirmation_grd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confirmation_grd_id());
    }

    // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int64 client_consent_time_usec = 12;
    if (has_client_consent_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->client_consent_time_usec());
    }

  }
  switch (consent_case()) {
    // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
    case kSyncConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *consent_.sync_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
    case kArcBackupAndRestoreConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *consent_.arc_backup_and_restore_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
    case kArcLocationServiceConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *consent_.arc_location_service_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
    case kArcPlayTermsOfServiceConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *consent_.arc_play_terms_of_service_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
    case kArcMetricsAndUsageConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *consent_.arc_metrics_and_usage_consent_);
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConsentSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserConsentSpecifics*>(&from));
}

void UserConsentSpecifics::MergeFrom(const UserConsentSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserConsentSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_grd_ids_.MergeFrom(from.description_grd_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_locale();
      locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locale_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_account_id();
      account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      feature_ = from.feature_;
    }
    if (cached_has_bits & 0x00000008u) {
      confirmation_grd_id_ = from.confirmation_grd_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_consent_time_usec_ = from.client_consent_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.consent_case()) {
    case kSyncConsent: {
      mutable_sync_consent()->::sync_pb::UserConsentTypes_SyncConsent::MergeFrom(from.sync_consent());
      break;
    }
    case kArcBackupAndRestoreConsent: {
      mutable_arc_backup_and_restore_consent()->::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(from.arc_backup_and_restore_consent());
      break;
    }
    case kArcLocationServiceConsent: {
      mutable_arc_location_service_consent()->::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(from.arc_location_service_consent());
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      mutable_arc_play_terms_of_service_consent()->::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(from.arc_play_terms_of_service_consent());
      break;
    }
    case kArcMetricsAndUsageConsent: {
      mutable_arc_metrics_and_usage_consent()->::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::MergeFrom(from.arc_metrics_and_usage_consent());
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
}

void UserConsentSpecifics::CopyFrom(const UserConsentSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserConsentSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConsentSpecifics::IsInitialized() const {
  return true;
}

void UserConsentSpecifics::Swap(UserConsentSpecifics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserConsentSpecifics::InternalSwap(UserConsentSpecifics* other) {
  description_grd_ids_.InternalSwap(&other->description_grd_ids_);
  locale_.Swap(&other->locale_);
  account_id_.Swap(&other->account_id_);
  std::swap(feature_, other->feature_);
  std::swap(confirmation_grd_id_, other->confirmation_grd_id_);
  std::swap(status_, other->status_);
  std::swap(client_consent_time_usec_, other->client_consent_time_usec_);
  std::swap(consent_, other->consent_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserConsentSpecifics::GetTypeName() const {
  return "sync_pb.UserConsentSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserConsentSpecifics

// optional string locale = 4;
bool UserConsentSpecifics::has_locale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserConsentSpecifics::set_has_locale() {
  _has_bits_[0] |= 0x00000001u;
}
void UserConsentSpecifics::clear_has_locale() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserConsentSpecifics::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locale();
}
const ::std::string& UserConsentSpecifics::locale() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.locale)
  return locale_.GetNoArena();
}
void UserConsentSpecifics::set_locale(const ::std::string& value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.locale)
}
#if LANG_CXX11
void UserConsentSpecifics::set_locale(::std::string&& value) {
  set_has_locale();
  locale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserConsentSpecifics.locale)
}
#endif
void UserConsentSpecifics::set_locale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserConsentSpecifics.locale)
}
void UserConsentSpecifics::set_locale(const char* value, size_t size) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserConsentSpecifics.locale)
}
::std::string* UserConsentSpecifics::mutable_locale() {
  set_has_locale();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserConsentSpecifics::release_locale() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.locale)
  clear_has_locale();
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserConsentSpecifics::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.locale)
}

// optional int64 client_consent_time_usec = 12;
bool UserConsentSpecifics::has_client_consent_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserConsentSpecifics::set_has_client_consent_time_usec() {
  _has_bits_[0] |= 0x00000020u;
}
void UserConsentSpecifics::clear_has_client_consent_time_usec() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserConsentSpecifics::clear_client_consent_time_usec() {
  client_consent_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_client_consent_time_usec();
}
::google::protobuf::int64 UserConsentSpecifics::client_consent_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.client_consent_time_usec)
  return client_consent_time_usec_;
}
void UserConsentSpecifics::set_client_consent_time_usec(::google::protobuf::int64 value) {
  set_has_client_consent_time_usec();
  client_consent_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.client_consent_time_usec)
}

// optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
bool UserConsentSpecifics::has_sync_consent() const {
  return consent_case() == kSyncConsent;
}
void UserConsentSpecifics::set_has_sync_consent() {
  _oneof_case_[0] = kSyncConsent;
}
void UserConsentSpecifics::clear_sync_consent() {
  if (has_sync_consent()) {
    delete consent_.sync_consent_;
    clear_has_consent();
  }
}
 const ::sync_pb::UserConsentTypes_SyncConsent& UserConsentSpecifics::sync_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.sync_consent)
  return has_sync_consent()
      ? *consent_.sync_consent_
      : ::sync_pb::UserConsentTypes_SyncConsent::default_instance();
}
::sync_pb::UserConsentTypes_SyncConsent* UserConsentSpecifics::mutable_sync_consent() {
  if (!has_sync_consent()) {
    clear_consent();
    set_has_sync_consent();
    consent_.sync_consent_ = new ::sync_pb::UserConsentTypes_SyncConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.sync_consent)
  return consent_.sync_consent_;
}
::sync_pb::UserConsentTypes_SyncConsent* UserConsentSpecifics::release_sync_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.sync_consent)
  if (has_sync_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_SyncConsent* temp = consent_.sync_consent_;
    consent_.sync_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserConsentSpecifics::set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent) {
  clear_consent();
  if (sync_consent) {
    set_has_sync_consent();
    consent_.sync_consent_ = sync_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.sync_consent)
}

// optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
bool UserConsentSpecifics::has_arc_backup_and_restore_consent() const {
  return consent_case() == kArcBackupAndRestoreConsent;
}
void UserConsentSpecifics::set_has_arc_backup_and_restore_consent() {
  _oneof_case_[0] = kArcBackupAndRestoreConsent;
}
void UserConsentSpecifics::clear_arc_backup_and_restore_consent() {
  if (has_arc_backup_and_restore_consent()) {
    delete consent_.arc_backup_and_restore_consent_;
    clear_has_consent();
  }
}
 const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& UserConsentSpecifics::arc_backup_and_restore_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
  return has_arc_backup_and_restore_consent()
      ? *consent_.arc_backup_and_restore_consent_
      : ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::default_instance();
}
::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserConsentSpecifics::mutable_arc_backup_and_restore_consent() {
  if (!has_arc_backup_and_restore_consent()) {
    clear_consent();
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = new ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
  return consent_.arc_backup_and_restore_consent_;
}
::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserConsentSpecifics::release_arc_backup_and_restore_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
  if (has_arc_backup_and_restore_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* temp = consent_.arc_backup_and_restore_consent_;
    consent_.arc_backup_and_restore_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserConsentSpecifics::set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent) {
  clear_consent();
  if (arc_backup_and_restore_consent) {
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = arc_backup_and_restore_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
}

// optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
bool UserConsentSpecifics::has_arc_location_service_consent() const {
  return consent_case() == kArcLocationServiceConsent;
}
void UserConsentSpecifics::set_has_arc_location_service_consent() {
  _oneof_case_[0] = kArcLocationServiceConsent;
}
void UserConsentSpecifics::clear_arc_location_service_consent() {
  if (has_arc_location_service_consent()) {
    delete consent_.arc_location_service_consent_;
    clear_has_consent();
  }
}
 const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& UserConsentSpecifics::arc_location_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_location_service_consent)
  return has_arc_location_service_consent()
      ? *consent_.arc_location_service_consent_
      : ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::default_instance();
}
::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserConsentSpecifics::mutable_arc_location_service_consent() {
  if (!has_arc_location_service_consent()) {
    clear_consent();
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = new ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_location_service_consent)
  return consent_.arc_location_service_consent_;
}
::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserConsentSpecifics::release_arc_location_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_location_service_consent)
  if (has_arc_location_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* temp = consent_.arc_location_service_consent_;
    consent_.arc_location_service_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserConsentSpecifics::set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent) {
  clear_consent();
  if (arc_location_service_consent) {
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = arc_location_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_location_service_consent)
}

// optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
bool UserConsentSpecifics::has_arc_play_terms_of_service_consent() const {
  return consent_case() == kArcPlayTermsOfServiceConsent;
}
void UserConsentSpecifics::set_has_arc_play_terms_of_service_consent() {
  _oneof_case_[0] = kArcPlayTermsOfServiceConsent;
}
void UserConsentSpecifics::clear_arc_play_terms_of_service_consent() {
  if (has_arc_play_terms_of_service_consent()) {
    delete consent_.arc_play_terms_of_service_consent_;
    clear_has_consent();
  }
}
 const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& UserConsentSpecifics::arc_play_terms_of_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
  return has_arc_play_terms_of_service_consent()
      ? *consent_.arc_play_terms_of_service_consent_
      : ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::default_instance();
}
::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserConsentSpecifics::mutable_arc_play_terms_of_service_consent() {
  if (!has_arc_play_terms_of_service_consent()) {
    clear_consent();
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = new ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
  return consent_.arc_play_terms_of_service_consent_;
}
::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserConsentSpecifics::release_arc_play_terms_of_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
  if (has_arc_play_terms_of_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* temp = consent_.arc_play_terms_of_service_consent_;
    consent_.arc_play_terms_of_service_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserConsentSpecifics::set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent) {
  clear_consent();
  if (arc_play_terms_of_service_consent) {
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = arc_play_terms_of_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
}

// optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
bool UserConsentSpecifics::has_arc_metrics_and_usage_consent() const {
  return consent_case() == kArcMetricsAndUsageConsent;
}
void UserConsentSpecifics::set_has_arc_metrics_and_usage_consent() {
  _oneof_case_[0] = kArcMetricsAndUsageConsent;
}
void UserConsentSpecifics::clear_arc_metrics_and_usage_consent() {
  if (has_arc_metrics_and_usage_consent()) {
    delete consent_.arc_metrics_and_usage_consent_;
    clear_has_consent();
  }
}
 const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent& UserConsentSpecifics::arc_metrics_and_usage_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_metrics_and_usage_consent)
  return has_arc_metrics_and_usage_consent()
      ? *consent_.arc_metrics_and_usage_consent_
      : ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::default_instance();
}
::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* UserConsentSpecifics::mutable_arc_metrics_and_usage_consent() {
  if (!has_arc_metrics_and_usage_consent()) {
    clear_consent();
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = new ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_metrics_and_usage_consent)
  return consent_.arc_metrics_and_usage_consent_;
}
::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* UserConsentSpecifics::release_arc_metrics_and_usage_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_metrics_and_usage_consent)
  if (has_arc_metrics_and_usage_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* temp = consent_.arc_metrics_and_usage_consent_;
    consent_.arc_metrics_and_usage_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserConsentSpecifics::set_allocated_arc_metrics_and_usage_consent(::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent) {
  clear_consent();
  if (arc_metrics_and_usage_consent) {
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = arc_metrics_and_usage_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_metrics_and_usage_consent)
}

// optional string account_id = 6;
bool UserConsentSpecifics::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserConsentSpecifics::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UserConsentSpecifics::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserConsentSpecifics::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_id();
}
const ::std::string& UserConsentSpecifics::account_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.account_id)
  return account_id_.GetNoArena();
}
void UserConsentSpecifics::set_account_id(const ::std::string& value) {
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.account_id)
}
#if LANG_CXX11
void UserConsentSpecifics::set_account_id(::std::string&& value) {
  set_has_account_id();
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserConsentSpecifics.account_id)
}
#endif
void UserConsentSpecifics::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserConsentSpecifics.account_id)
}
void UserConsentSpecifics::set_account_id(const char* value, size_t size) {
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserConsentSpecifics.account_id)
}
::std::string* UserConsentSpecifics::mutable_account_id() {
  set_has_account_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserConsentSpecifics::release_account_id() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.account_id)
  clear_has_account_id();
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserConsentSpecifics::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.account_id)
}

// optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
bool UserConsentSpecifics::has_feature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserConsentSpecifics::set_has_feature() {
  _has_bits_[0] |= 0x00000004u;
}
void UserConsentSpecifics::clear_has_feature() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserConsentSpecifics::clear_feature() {
  feature_ = 0;
  clear_has_feature();
}
::sync_pb::UserConsentSpecifics_Feature UserConsentSpecifics::feature() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.feature)
  return static_cast< ::sync_pb::UserConsentSpecifics_Feature >(feature_);
}
void UserConsentSpecifics::set_feature(::sync_pb::UserConsentSpecifics_Feature value) {
  assert(::sync_pb::UserConsentSpecifics_Feature_IsValid(value));
  set_has_feature();
  feature_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.feature)
}

// repeated int32 description_grd_ids = 2 [deprecated = true];
int UserConsentSpecifics::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
void UserConsentSpecifics::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
::google::protobuf::int32 UserConsentSpecifics::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.description_grd_ids)
  return description_grd_ids_.Get(index);
}
void UserConsentSpecifics::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.description_grd_ids)
}
void UserConsentSpecifics::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentSpecifics.description_grd_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConsentSpecifics::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentSpecifics.description_grd_ids)
  return description_grd_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConsentSpecifics::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentSpecifics.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 3 [deprecated = true];
bool UserConsentSpecifics::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserConsentSpecifics::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000008u;
}
void UserConsentSpecifics::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserConsentSpecifics::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
::google::protobuf::int32 UserConsentSpecifics::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.confirmation_grd_id)
  return confirmation_grd_id_;
}
void UserConsentSpecifics::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
bool UserConsentSpecifics::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserConsentSpecifics::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void UserConsentSpecifics::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserConsentSpecifics::clear_status() {
  status_ = 0;
  clear_has_status();
}
::sync_pb::UserConsentTypes_ConsentStatus UserConsentSpecifics::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
void UserConsentSpecifics::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.status)
}

bool UserConsentSpecifics::has_consent() const {
  return consent_case() != CONSENT_NOT_SET;
}
void UserConsentSpecifics::clear_has_consent() {
  _oneof_case_[0] = CONSENT_NOT_SET;
}
UserConsentSpecifics::ConsentCase UserConsentSpecifics::consent_case() const {
  return UserConsentSpecifics::ConsentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
