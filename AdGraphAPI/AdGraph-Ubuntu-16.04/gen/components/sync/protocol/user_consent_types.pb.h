// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_consent_types.proto

#ifndef PROTOBUF_user_5fconsent_5ftypes_2eproto__INCLUDED
#define PROTOBUF_user_5fconsent_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace sync_pb {
class UserConsentTypes;
class UserConsentTypesDefaultTypeInternal;
extern UserConsentTypesDefaultTypeInternal _UserConsentTypes_default_instance_;
class UserConsentTypes_ArcBackupAndRestoreConsent;
class UserConsentTypes_ArcBackupAndRestoreConsentDefaultTypeInternal;
extern UserConsentTypes_ArcBackupAndRestoreConsentDefaultTypeInternal _UserConsentTypes_ArcBackupAndRestoreConsent_default_instance_;
class UserConsentTypes_ArcGoogleLocationServiceConsent;
class UserConsentTypes_ArcGoogleLocationServiceConsentDefaultTypeInternal;
extern UserConsentTypes_ArcGoogleLocationServiceConsentDefaultTypeInternal _UserConsentTypes_ArcGoogleLocationServiceConsent_default_instance_;
class UserConsentTypes_ArcMetricsAndUsageConsent;
class UserConsentTypes_ArcMetricsAndUsageConsentDefaultTypeInternal;
extern UserConsentTypes_ArcMetricsAndUsageConsentDefaultTypeInternal _UserConsentTypes_ArcMetricsAndUsageConsent_default_instance_;
class UserConsentTypes_ArcPlayTermsOfServiceConsent;
class UserConsentTypes_ArcPlayTermsOfServiceConsentDefaultTypeInternal;
extern UserConsentTypes_ArcPlayTermsOfServiceConsentDefaultTypeInternal _UserConsentTypes_ArcPlayTermsOfServiceConsent_default_instance_;
class UserConsentTypes_SyncConsent;
class UserConsentTypes_SyncConsentDefaultTypeInternal;
extern UserConsentTypes_SyncConsentDefaultTypeInternal _UserConsentTypes_SyncConsent_default_instance_;
}  // namespace sync_pb

namespace sync_pb {

namespace protobuf_user_5fconsent_5ftypes_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_user_5fconsent_5ftypes_2eproto

enum UserConsentTypes_ConsentStatus {
  UserConsentTypes_ConsentStatus_CONSENT_STATUS_UNSPECIFIED = 0,
  UserConsentTypes_ConsentStatus_NOT_GIVEN = 1,
  UserConsentTypes_ConsentStatus_GIVEN = 2
};
bool UserConsentTypes_ConsentStatus_IsValid(int value);
const UserConsentTypes_ConsentStatus UserConsentTypes_ConsentStatus_ConsentStatus_MIN = UserConsentTypes_ConsentStatus_CONSENT_STATUS_UNSPECIFIED;
const UserConsentTypes_ConsentStatus UserConsentTypes_ConsentStatus_ConsentStatus_MAX = UserConsentTypes_ConsentStatus_GIVEN;
const int UserConsentTypes_ConsentStatus_ConsentStatus_ARRAYSIZE = UserConsentTypes_ConsentStatus_ConsentStatus_MAX + 1;

// ===================================================================

class UserConsentTypes_ArcBackupAndRestoreConsent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent) */ {
 public:
  UserConsentTypes_ArcBackupAndRestoreConsent();
  virtual ~UserConsentTypes_ArcBackupAndRestoreConsent();

  UserConsentTypes_ArcBackupAndRestoreConsent(const UserConsentTypes_ArcBackupAndRestoreConsent& from);

  inline UserConsentTypes_ArcBackupAndRestoreConsent& operator=(const UserConsentTypes_ArcBackupAndRestoreConsent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_ArcBackupAndRestoreConsent& default_instance();

  static inline const UserConsentTypes_ArcBackupAndRestoreConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_ArcBackupAndRestoreConsent*>(
               &_UserConsentTypes_ArcBackupAndRestoreConsent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserConsentTypes_ArcBackupAndRestoreConsent* other);

  // implements Message ----------------------------------------------

  inline UserConsentTypes_ArcBackupAndRestoreConsent* New() const PROTOBUF_FINAL { return New(NULL); }

  UserConsentTypes_ArcBackupAndRestoreConsent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserConsentTypes_ArcBackupAndRestoreConsent& from);
  void MergeFrom(const UserConsentTypes_ArcBackupAndRestoreConsent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_ArcBackupAndRestoreConsent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 description_grd_ids = 1;
  int description_grd_ids_size() const;
  void clear_description_grd_ids();
  static const int kDescriptionGrdIdsFieldNumber = 1;
  ::google::protobuf::int32 description_grd_ids(int index) const;
  void set_description_grd_ids(int index, ::google::protobuf::int32 value);
  void add_description_grd_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      description_grd_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_description_grd_ids();

  // optional int32 confirmation_grd_id = 2;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  static const int kConfirmationGrdIdFieldNumber = 2;
  ::google::protobuf::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::google::protobuf::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
 private:
  void set_has_confirmation_grd_id();
  void clear_has_confirmation_grd_id();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > description_grd_ids_;
  ::google::protobuf::int32 confirmation_grd_id_;
  int status_;
  friend struct protobuf_user_5fconsent_5ftypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserConsentTypes_ArcGoogleLocationServiceConsent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent) */ {
 public:
  UserConsentTypes_ArcGoogleLocationServiceConsent();
  virtual ~UserConsentTypes_ArcGoogleLocationServiceConsent();

  UserConsentTypes_ArcGoogleLocationServiceConsent(const UserConsentTypes_ArcGoogleLocationServiceConsent& from);

  inline UserConsentTypes_ArcGoogleLocationServiceConsent& operator=(const UserConsentTypes_ArcGoogleLocationServiceConsent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_ArcGoogleLocationServiceConsent& default_instance();

  static inline const UserConsentTypes_ArcGoogleLocationServiceConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_ArcGoogleLocationServiceConsent*>(
               &_UserConsentTypes_ArcGoogleLocationServiceConsent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserConsentTypes_ArcGoogleLocationServiceConsent* other);

  // implements Message ----------------------------------------------

  inline UserConsentTypes_ArcGoogleLocationServiceConsent* New() const PROTOBUF_FINAL { return New(NULL); }

  UserConsentTypes_ArcGoogleLocationServiceConsent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserConsentTypes_ArcGoogleLocationServiceConsent& from);
  void MergeFrom(const UserConsentTypes_ArcGoogleLocationServiceConsent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_ArcGoogleLocationServiceConsent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 description_grd_ids = 1;
  int description_grd_ids_size() const;
  void clear_description_grd_ids();
  static const int kDescriptionGrdIdsFieldNumber = 1;
  ::google::protobuf::int32 description_grd_ids(int index) const;
  void set_description_grd_ids(int index, ::google::protobuf::int32 value);
  void add_description_grd_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      description_grd_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_description_grd_ids();

  // optional int32 confirmation_grd_id = 2;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  static const int kConfirmationGrdIdFieldNumber = 2;
  ::google::protobuf::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::google::protobuf::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
 private:
  void set_has_confirmation_grd_id();
  void clear_has_confirmation_grd_id();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > description_grd_ids_;
  ::google::protobuf::int32 confirmation_grd_id_;
  int status_;
  friend struct protobuf_user_5fconsent_5ftypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserConsentTypes_ArcMetricsAndUsageConsent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent) */ {
 public:
  UserConsentTypes_ArcMetricsAndUsageConsent();
  virtual ~UserConsentTypes_ArcMetricsAndUsageConsent();

  UserConsentTypes_ArcMetricsAndUsageConsent(const UserConsentTypes_ArcMetricsAndUsageConsent& from);

  inline UserConsentTypes_ArcMetricsAndUsageConsent& operator=(const UserConsentTypes_ArcMetricsAndUsageConsent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_ArcMetricsAndUsageConsent& default_instance();

  static inline const UserConsentTypes_ArcMetricsAndUsageConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_ArcMetricsAndUsageConsent*>(
               &_UserConsentTypes_ArcMetricsAndUsageConsent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserConsentTypes_ArcMetricsAndUsageConsent* other);

  // implements Message ----------------------------------------------

  inline UserConsentTypes_ArcMetricsAndUsageConsent* New() const PROTOBUF_FINAL { return New(NULL); }

  UserConsentTypes_ArcMetricsAndUsageConsent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserConsentTypes_ArcMetricsAndUsageConsent& from);
  void MergeFrom(const UserConsentTypes_ArcMetricsAndUsageConsent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_ArcMetricsAndUsageConsent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 description_grd_ids = 1;
  int description_grd_ids_size() const;
  void clear_description_grd_ids();
  static const int kDescriptionGrdIdsFieldNumber = 1;
  ::google::protobuf::int32 description_grd_ids(int index) const;
  void set_description_grd_ids(int index, ::google::protobuf::int32 value);
  void add_description_grd_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      description_grd_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_description_grd_ids();

  // optional int32 confirmation_grd_id = 2;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  static const int kConfirmationGrdIdFieldNumber = 2;
  ::google::protobuf::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::google::protobuf::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
 private:
  void set_has_confirmation_grd_id();
  void clear_has_confirmation_grd_id();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > description_grd_ids_;
  ::google::protobuf::int32 confirmation_grd_id_;
  int status_;
  friend struct protobuf_user_5fconsent_5ftypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserConsentTypes_ArcPlayTermsOfServiceConsent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent) */ {
 public:
  UserConsentTypes_ArcPlayTermsOfServiceConsent();
  virtual ~UserConsentTypes_ArcPlayTermsOfServiceConsent();

  UserConsentTypes_ArcPlayTermsOfServiceConsent(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from);

  inline UserConsentTypes_ArcPlayTermsOfServiceConsent& operator=(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_ArcPlayTermsOfServiceConsent& default_instance();

  static inline const UserConsentTypes_ArcPlayTermsOfServiceConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_ArcPlayTermsOfServiceConsent*>(
               &_UserConsentTypes_ArcPlayTermsOfServiceConsent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserConsentTypes_ArcPlayTermsOfServiceConsent* other);

  // implements Message ----------------------------------------------

  inline UserConsentTypes_ArcPlayTermsOfServiceConsent* New() const PROTOBUF_FINAL { return New(NULL); }

  UserConsentTypes_ArcPlayTermsOfServiceConsent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from);
  void MergeFrom(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_ArcPlayTermsOfServiceConsent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes play_terms_of_service_hash = 2;
  bool has_play_terms_of_service_hash() const;
  void clear_play_terms_of_service_hash();
  static const int kPlayTermsOfServiceHashFieldNumber = 2;
  const ::std::string& play_terms_of_service_hash() const;
  void set_play_terms_of_service_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_play_terms_of_service_hash(::std::string&& value);
  #endif
  void set_play_terms_of_service_hash(const char* value);
  void set_play_terms_of_service_hash(const void* value, size_t size);
  ::std::string* mutable_play_terms_of_service_hash();
  ::std::string* release_play_terms_of_service_hash();
  void set_allocated_play_terms_of_service_hash(::std::string* play_terms_of_service_hash);

  // optional int32 play_terms_of_service_text_length = 1;
  bool has_play_terms_of_service_text_length() const;
  void clear_play_terms_of_service_text_length();
  static const int kPlayTermsOfServiceTextLengthFieldNumber = 1;
  ::google::protobuf::int32 play_terms_of_service_text_length() const;
  void set_play_terms_of_service_text_length(::google::protobuf::int32 value);

  // optional int32 confirmation_grd_id = 3;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  static const int kConfirmationGrdIdFieldNumber = 3;
  ::google::protobuf::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::google::protobuf::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
 private:
  void set_has_play_terms_of_service_text_length();
  void clear_has_play_terms_of_service_text_length();
  void set_has_play_terms_of_service_hash();
  void clear_has_play_terms_of_service_hash();
  void set_has_confirmation_grd_id();
  void clear_has_confirmation_grd_id();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr play_terms_of_service_hash_;
  ::google::protobuf::int32 play_terms_of_service_text_length_;
  ::google::protobuf::int32 confirmation_grd_id_;
  int status_;
  friend struct protobuf_user_5fconsent_5ftypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserConsentTypes_SyncConsent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.SyncConsent) */ {
 public:
  UserConsentTypes_SyncConsent();
  virtual ~UserConsentTypes_SyncConsent();

  UserConsentTypes_SyncConsent(const UserConsentTypes_SyncConsent& from);

  inline UserConsentTypes_SyncConsent& operator=(const UserConsentTypes_SyncConsent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_SyncConsent& default_instance();

  static inline const UserConsentTypes_SyncConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_SyncConsent*>(
               &_UserConsentTypes_SyncConsent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserConsentTypes_SyncConsent* other);

  // implements Message ----------------------------------------------

  inline UserConsentTypes_SyncConsent* New() const PROTOBUF_FINAL { return New(NULL); }

  UserConsentTypes_SyncConsent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserConsentTypes_SyncConsent& from);
  void MergeFrom(const UserConsentTypes_SyncConsent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_SyncConsent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 description_grd_ids = 1;
  int description_grd_ids_size() const;
  void clear_description_grd_ids();
  static const int kDescriptionGrdIdsFieldNumber = 1;
  ::google::protobuf::int32 description_grd_ids(int index) const;
  void set_description_grd_ids(int index, ::google::protobuf::int32 value);
  void add_description_grd_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      description_grd_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_description_grd_ids();

  // optional int32 confirmation_grd_id = 2;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  static const int kConfirmationGrdIdFieldNumber = 2;
  ::google::protobuf::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::google::protobuf::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.SyncConsent)
 private:
  void set_has_confirmation_grd_id();
  void clear_has_confirmation_grd_id();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > description_grd_ids_;
  ::google::protobuf::int32 confirmation_grd_id_;
  int status_;
  friend struct protobuf_user_5fconsent_5ftypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserConsentTypes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes) */ {
 public:
  UserConsentTypes();
  virtual ~UserConsentTypes();

  UserConsentTypes(const UserConsentTypes& from);

  inline UserConsentTypes& operator=(const UserConsentTypes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes& default_instance();

  static inline const UserConsentTypes* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes*>(
               &_UserConsentTypes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserConsentTypes* other);

  // implements Message ----------------------------------------------

  inline UserConsentTypes* New() const PROTOBUF_FINAL { return New(NULL); }

  UserConsentTypes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserConsentTypes& from);
  void MergeFrom(const UserConsentTypes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserConsentTypes_ArcBackupAndRestoreConsent ArcBackupAndRestoreConsent;
  typedef UserConsentTypes_ArcGoogleLocationServiceConsent ArcGoogleLocationServiceConsent;
  typedef UserConsentTypes_ArcMetricsAndUsageConsent ArcMetricsAndUsageConsent;
  typedef UserConsentTypes_ArcPlayTermsOfServiceConsent ArcPlayTermsOfServiceConsent;
  typedef UserConsentTypes_SyncConsent SyncConsent;

  typedef UserConsentTypes_ConsentStatus ConsentStatus;
  static const ConsentStatus CONSENT_STATUS_UNSPECIFIED =
    UserConsentTypes_ConsentStatus_CONSENT_STATUS_UNSPECIFIED;
  static const ConsentStatus NOT_GIVEN =
    UserConsentTypes_ConsentStatus_NOT_GIVEN;
  static const ConsentStatus GIVEN =
    UserConsentTypes_ConsentStatus_GIVEN;
  static inline bool ConsentStatus_IsValid(int value) {
    return UserConsentTypes_ConsentStatus_IsValid(value);
  }
  static const ConsentStatus ConsentStatus_MIN =
    UserConsentTypes_ConsentStatus_ConsentStatus_MIN;
  static const ConsentStatus ConsentStatus_MAX =
    UserConsentTypes_ConsentStatus_ConsentStatus_MAX;
  static const int ConsentStatus_ARRAYSIZE =
    UserConsentTypes_ConsentStatus_ConsentStatus_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_user_5fconsent_5ftypes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserConsentTypes_ArcBackupAndRestoreConsent

// repeated int32 description_grd_ids = 1;
inline int UserConsentTypes_ArcBackupAndRestoreConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::google::protobuf::int32 UserConsentTypes_ArcBackupAndRestoreConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConsentTypes_ArcBackupAndRestoreConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConsentTypes_ArcBackupAndRestoreConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
inline bool UserConsentTypes_ArcBackupAndRestoreConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
inline ::google::protobuf::int32 UserConsentTypes_ArcBackupAndRestoreConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
inline bool UserConsentTypes_ArcBackupAndRestoreConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcBackupAndRestoreConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes_ArcGoogleLocationServiceConsent

// repeated int32 description_grd_ids = 1;
inline int UserConsentTypes_ArcGoogleLocationServiceConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::google::protobuf::int32 UserConsentTypes_ArcGoogleLocationServiceConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConsentTypes_ArcGoogleLocationServiceConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConsentTypes_ArcGoogleLocationServiceConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
inline bool UserConsentTypes_ArcGoogleLocationServiceConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
inline ::google::protobuf::int32 UserConsentTypes_ArcGoogleLocationServiceConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
inline bool UserConsentTypes_ArcGoogleLocationServiceConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcGoogleLocationServiceConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes_ArcMetricsAndUsageConsent

// repeated int32 description_grd_ids = 1;
inline int UserConsentTypes_ArcMetricsAndUsageConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::google::protobuf::int32 UserConsentTypes_ArcMetricsAndUsageConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConsentTypes_ArcMetricsAndUsageConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConsentTypes_ArcMetricsAndUsageConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
inline bool UserConsentTypes_ArcMetricsAndUsageConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
inline ::google::protobuf::int32 UserConsentTypes_ArcMetricsAndUsageConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
inline bool UserConsentTypes_ArcMetricsAndUsageConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcMetricsAndUsageConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes_ArcPlayTermsOfServiceConsent

// optional int32 play_terms_of_service_text_length = 1;
inline bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_play_terms_of_service_text_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_has_play_terms_of_service_text_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_has_play_terms_of_service_text_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_play_terms_of_service_text_length() {
  play_terms_of_service_text_length_ = 0;
  clear_has_play_terms_of_service_text_length();
}
inline ::google::protobuf::int32 UserConsentTypes_ArcPlayTermsOfServiceConsent::play_terms_of_service_text_length() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_text_length)
  return play_terms_of_service_text_length_;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_text_length(::google::protobuf::int32 value) {
  set_has_play_terms_of_service_text_length();
  play_terms_of_service_text_length_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_text_length)
}

// optional bytes play_terms_of_service_hash = 2;
inline bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_play_terms_of_service_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_has_play_terms_of_service_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_has_play_terms_of_service_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_play_terms_of_service_hash() {
  play_terms_of_service_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_play_terms_of_service_hash();
}
inline const ::std::string& UserConsentTypes_ArcPlayTermsOfServiceConsent::play_terms_of_service_hash() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
  return play_terms_of_service_hash_.GetNoArena();
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(const ::std::string& value) {
  set_has_play_terms_of_service_hash();
  play_terms_of_service_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
#if LANG_CXX11
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(::std::string&& value) {
  set_has_play_terms_of_service_hash();
  play_terms_of_service_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
#endif
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_play_terms_of_service_hash();
  play_terms_of_service_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(const void* value, size_t size) {
  set_has_play_terms_of_service_hash();
  play_terms_of_service_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
inline ::std::string* UserConsentTypes_ArcPlayTermsOfServiceConsent::mutable_play_terms_of_service_hash() {
  set_has_play_terms_of_service_hash();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
  return play_terms_of_service_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserConsentTypes_ArcPlayTermsOfServiceConsent::release_play_terms_of_service_hash() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
  clear_has_play_terms_of_service_hash();
  return play_terms_of_service_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_allocated_play_terms_of_service_hash(::std::string* play_terms_of_service_hash) {
  if (play_terms_of_service_hash != NULL) {
    set_has_play_terms_of_service_hash();
  } else {
    clear_has_play_terms_of_service_hash();
  }
  play_terms_of_service_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), play_terms_of_service_hash);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}

// optional int32 confirmation_grd_id = 3;
inline bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
inline ::google::protobuf::int32 UserConsentTypes_ArcPlayTermsOfServiceConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;
inline bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcPlayTermsOfServiceConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes_SyncConsent

// repeated int32 description_grd_ids = 1;
inline int UserConsentTypes_SyncConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentTypes_SyncConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::google::protobuf::int32 UserConsentTypes_SyncConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentTypes_SyncConsent::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
}
inline void UserConsentTypes_SyncConsent::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConsentTypes_SyncConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConsentTypes_SyncConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
inline bool UserConsentTypes_SyncConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_SyncConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserConsentTypes_SyncConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserConsentTypes_SyncConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
inline ::google::protobuf::int32 UserConsentTypes_SyncConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.SyncConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_SyncConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.SyncConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
inline bool UserConsentTypes_SyncConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_SyncConsent::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserConsentTypes_SyncConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserConsentTypes_SyncConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_SyncConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.SyncConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_SyncConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.SyncConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace sync_pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sync_pb::UserConsentTypes_ConsentStatus> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5fconsent_5ftypes_2eproto__INCLUDED
