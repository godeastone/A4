// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class CustomNudgeDelayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CustomNudgeDelay> {
} _CustomNudgeDelay_default_instance_;
class ClientCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientCommand> {
} _ClientCommand_default_instance_;

namespace protobuf_client_5fcommands_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _CustomNudgeDelay_default_instance_.Shutdown();
  _ClientCommand_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CustomNudgeDelay_default_instance_.DefaultConstruct();
  _ClientCommand_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_client_5fcommands_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomNudgeDelay::kDatatypeIdFieldNumber;
const int CustomNudgeDelay::kDelayMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomNudgeDelay::CustomNudgeDelay()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fcommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CustomNudgeDelay)
}
CustomNudgeDelay::CustomNudgeDelay(const CustomNudgeDelay& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&datatype_id_, &from.datatype_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_ms_) -
    reinterpret_cast<char*>(&datatype_id_)) + sizeof(delay_ms_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.CustomNudgeDelay)
}

void CustomNudgeDelay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&datatype_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_ms_) -
      reinterpret_cast<char*>(&datatype_id_)) + sizeof(delay_ms_));
}

CustomNudgeDelay::~CustomNudgeDelay() {
  // @@protoc_insertion_point(destructor:sync_pb.CustomNudgeDelay)
  SharedDtor();
}

void CustomNudgeDelay::SharedDtor() {
}

void CustomNudgeDelay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CustomNudgeDelay& CustomNudgeDelay::default_instance() {
  protobuf_client_5fcommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomNudgeDelay* CustomNudgeDelay::New(::google::protobuf::Arena* arena) const {
  CustomNudgeDelay* n = new CustomNudgeDelay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomNudgeDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CustomNudgeDelay)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&datatype_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delay_ms_) -
        reinterpret_cast<char*>(&datatype_id_)) + sizeof(delay_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CustomNudgeDelay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CustomNudgeDelay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 datatype_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_datatype_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delay_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_delay_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CustomNudgeDelay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CustomNudgeDelay)
  return false;
#undef DO_
}

void CustomNudgeDelay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CustomNudgeDelay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 datatype_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->datatype_id(), output);
  }

  // optional int32 delay_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delay_ms(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CustomNudgeDelay)
}

size_t CustomNudgeDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CustomNudgeDelay)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 datatype_id = 1;
    if (has_datatype_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatype_id());
    }

    // optional int32 delay_ms = 2;
    if (has_delay_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomNudgeDelay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CustomNudgeDelay*>(&from));
}

void CustomNudgeDelay::MergeFrom(const CustomNudgeDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CustomNudgeDelay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      datatype_id_ = from.datatype_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      delay_ms_ = from.delay_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CustomNudgeDelay::CopyFrom(const CustomNudgeDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CustomNudgeDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomNudgeDelay::IsInitialized() const {
  return true;
}

void CustomNudgeDelay::Swap(CustomNudgeDelay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomNudgeDelay::InternalSwap(CustomNudgeDelay* other) {
  std::swap(datatype_id_, other->datatype_id_);
  std::swap(delay_ms_, other->delay_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CustomNudgeDelay::GetTypeName() const {
  return "sync_pb.CustomNudgeDelay";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomNudgeDelay

// optional int32 datatype_id = 1;
bool CustomNudgeDelay::has_datatype_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CustomNudgeDelay::set_has_datatype_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CustomNudgeDelay::clear_has_datatype_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CustomNudgeDelay::clear_datatype_id() {
  datatype_id_ = 0;
  clear_has_datatype_id();
}
::google::protobuf::int32 CustomNudgeDelay::datatype_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.CustomNudgeDelay.datatype_id)
  return datatype_id_;
}
void CustomNudgeDelay::set_datatype_id(::google::protobuf::int32 value) {
  set_has_datatype_id();
  datatype_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CustomNudgeDelay.datatype_id)
}

// optional int32 delay_ms = 2;
bool CustomNudgeDelay::has_delay_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CustomNudgeDelay::set_has_delay_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void CustomNudgeDelay::clear_has_delay_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void CustomNudgeDelay::clear_delay_ms() {
  delay_ms_ = 0;
  clear_has_delay_ms();
}
::google::protobuf::int32 CustomNudgeDelay::delay_ms() const {
  // @@protoc_insertion_point(field_get:sync_pb.CustomNudgeDelay.delay_ms)
  return delay_ms_;
}
void CustomNudgeDelay::set_delay_ms(::google::protobuf::int32 value) {
  set_has_delay_ms();
  delay_ms_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CustomNudgeDelay.delay_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCommand::kSetSyncPollIntervalFieldNumber;
const int ClientCommand::kSetSyncLongPollIntervalFieldNumber;
const int ClientCommand::kMaxCommitBatchSizeFieldNumber;
const int ClientCommand::kSessionsCommitDelaySecondsFieldNumber;
const int ClientCommand::kThrottleDelaySecondsFieldNumber;
const int ClientCommand::kClientInvalidationHintBufferSizeFieldNumber;
const int ClientCommand::kGuRetryDelaySecondsFieldNumber;
const int ClientCommand::kCustomNudgeDelaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientCommand::ClientCommand()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_5fcommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientCommand)
}
ClientCommand::ClientCommand(const ClientCommand& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      custom_nudge_delays_(from.custom_nudge_delays_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&set_sync_poll_interval_, &from.set_sync_poll_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&gu_retry_delay_seconds_) -
    reinterpret_cast<char*>(&set_sync_poll_interval_)) + sizeof(gu_retry_delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientCommand)
}

void ClientCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&set_sync_poll_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gu_retry_delay_seconds_) -
      reinterpret_cast<char*>(&set_sync_poll_interval_)) + sizeof(gu_retry_delay_seconds_));
}

ClientCommand::~ClientCommand() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientCommand)
  SharedDtor();
}

void ClientCommand::SharedDtor() {
}

void ClientCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientCommand& ClientCommand::default_instance() {
  protobuf_client_5fcommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientCommand* ClientCommand::New(::google::protobuf::Arena* arena) const {
  ClientCommand* n = new ClientCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientCommand)
  custom_nudge_delays_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&set_sync_poll_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gu_retry_delay_seconds_) -
        reinterpret_cast<char*>(&set_sync_poll_interval_)) + sizeof(gu_retry_delay_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 set_sync_poll_interval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_set_sync_poll_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_sync_poll_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 set_sync_long_poll_interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_set_sync_long_poll_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_sync_long_poll_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_commit_batch_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_max_commit_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_commit_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sessions_commit_delay_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sessions_commit_delay_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessions_commit_delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 throttle_delay_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_throttle_delay_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &throttle_delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 client_invalidation_hint_buffer_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_client_invalidation_hint_buffer_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_invalidation_hint_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gu_retry_delay_seconds = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_gu_retry_delay_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gu_retry_delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_custom_nudge_delays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientCommand)
  return false;
#undef DO_
}

void ClientCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 set_sync_poll_interval = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->set_sync_poll_interval(), output);
  }

  // optional int32 set_sync_long_poll_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->set_sync_long_poll_interval(), output);
  }

  // optional int32 max_commit_batch_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_commit_batch_size(), output);
  }

  // optional int32 sessions_commit_delay_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessions_commit_delay_seconds(), output);
  }

  // optional int32 throttle_delay_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->throttle_delay_seconds(), output);
  }

  // optional int32 client_invalidation_hint_buffer_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->client_invalidation_hint_buffer_size(), output);
  }

  // optional int32 gu_retry_delay_seconds = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gu_retry_delay_seconds(), output);
  }

  // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_nudge_delays_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->custom_nudge_delays(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientCommand)
}

size_t ClientCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientCommand)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_nudge_delays_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom_nudge_delays(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 set_sync_poll_interval = 1;
    if (has_set_sync_poll_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_sync_poll_interval());
    }

    // optional int32 set_sync_long_poll_interval = 2;
    if (has_set_sync_long_poll_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_sync_long_poll_interval());
    }

    // optional int32 max_commit_batch_size = 3;
    if (has_max_commit_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_commit_batch_size());
    }

    // optional int32 sessions_commit_delay_seconds = 4;
    if (has_sessions_commit_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessions_commit_delay_seconds());
    }

    // optional int32 throttle_delay_seconds = 5;
    if (has_throttle_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->throttle_delay_seconds());
    }

    // optional int32 client_invalidation_hint_buffer_size = 6;
    if (has_client_invalidation_hint_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_invalidation_hint_buffer_size());
    }

    // optional int32 gu_retry_delay_seconds = 7;
    if (has_gu_retry_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gu_retry_delay_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientCommand*>(&from));
}

void ClientCommand::MergeFrom(const ClientCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_nudge_delays_.MergeFrom(from.custom_nudge_delays_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_sync_poll_interval_ = from.set_sync_poll_interval_;
    }
    if (cached_has_bits & 0x00000002u) {
      set_sync_long_poll_interval_ = from.set_sync_long_poll_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_commit_batch_size_ = from.max_commit_batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      sessions_commit_delay_seconds_ = from.sessions_commit_delay_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttle_delay_seconds_ = from.throttle_delay_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_invalidation_hint_buffer_size_ = from.client_invalidation_hint_buffer_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      gu_retry_delay_seconds_ = from.gu_retry_delay_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientCommand::CopyFrom(const ClientCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCommand::IsInitialized() const {
  return true;
}

void ClientCommand::Swap(ClientCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientCommand::InternalSwap(ClientCommand* other) {
  custom_nudge_delays_.InternalSwap(&other->custom_nudge_delays_);
  std::swap(set_sync_poll_interval_, other->set_sync_poll_interval_);
  std::swap(set_sync_long_poll_interval_, other->set_sync_long_poll_interval_);
  std::swap(max_commit_batch_size_, other->max_commit_batch_size_);
  std::swap(sessions_commit_delay_seconds_, other->sessions_commit_delay_seconds_);
  std::swap(throttle_delay_seconds_, other->throttle_delay_seconds_);
  std::swap(client_invalidation_hint_buffer_size_, other->client_invalidation_hint_buffer_size_);
  std::swap(gu_retry_delay_seconds_, other->gu_retry_delay_seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientCommand::GetTypeName() const {
  return "sync_pb.ClientCommand";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientCommand

// optional int32 set_sync_poll_interval = 1;
bool ClientCommand::has_set_sync_poll_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientCommand::set_has_set_sync_poll_interval() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientCommand::clear_has_set_sync_poll_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientCommand::clear_set_sync_poll_interval() {
  set_sync_poll_interval_ = 0;
  clear_has_set_sync_poll_interval();
}
::google::protobuf::int32 ClientCommand::set_sync_poll_interval() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.set_sync_poll_interval)
  return set_sync_poll_interval_;
}
void ClientCommand::set_set_sync_poll_interval(::google::protobuf::int32 value) {
  set_has_set_sync_poll_interval();
  set_sync_poll_interval_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.set_sync_poll_interval)
}

// optional int32 set_sync_long_poll_interval = 2;
bool ClientCommand::has_set_sync_long_poll_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientCommand::set_has_set_sync_long_poll_interval() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientCommand::clear_has_set_sync_long_poll_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientCommand::clear_set_sync_long_poll_interval() {
  set_sync_long_poll_interval_ = 0;
  clear_has_set_sync_long_poll_interval();
}
::google::protobuf::int32 ClientCommand::set_sync_long_poll_interval() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.set_sync_long_poll_interval)
  return set_sync_long_poll_interval_;
}
void ClientCommand::set_set_sync_long_poll_interval(::google::protobuf::int32 value) {
  set_has_set_sync_long_poll_interval();
  set_sync_long_poll_interval_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.set_sync_long_poll_interval)
}

// optional int32 max_commit_batch_size = 3;
bool ClientCommand::has_max_commit_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientCommand::set_has_max_commit_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientCommand::clear_has_max_commit_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientCommand::clear_max_commit_batch_size() {
  max_commit_batch_size_ = 0;
  clear_has_max_commit_batch_size();
}
::google::protobuf::int32 ClientCommand::max_commit_batch_size() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.max_commit_batch_size)
  return max_commit_batch_size_;
}
void ClientCommand::set_max_commit_batch_size(::google::protobuf::int32 value) {
  set_has_max_commit_batch_size();
  max_commit_batch_size_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.max_commit_batch_size)
}

// optional int32 sessions_commit_delay_seconds = 4;
bool ClientCommand::has_sessions_commit_delay_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientCommand::set_has_sessions_commit_delay_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientCommand::clear_has_sessions_commit_delay_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientCommand::clear_sessions_commit_delay_seconds() {
  sessions_commit_delay_seconds_ = 0;
  clear_has_sessions_commit_delay_seconds();
}
::google::protobuf::int32 ClientCommand::sessions_commit_delay_seconds() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.sessions_commit_delay_seconds)
  return sessions_commit_delay_seconds_;
}
void ClientCommand::set_sessions_commit_delay_seconds(::google::protobuf::int32 value) {
  set_has_sessions_commit_delay_seconds();
  sessions_commit_delay_seconds_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.sessions_commit_delay_seconds)
}

// optional int32 throttle_delay_seconds = 5;
bool ClientCommand::has_throttle_delay_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientCommand::set_has_throttle_delay_seconds() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientCommand::clear_has_throttle_delay_seconds() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientCommand::clear_throttle_delay_seconds() {
  throttle_delay_seconds_ = 0;
  clear_has_throttle_delay_seconds();
}
::google::protobuf::int32 ClientCommand::throttle_delay_seconds() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.throttle_delay_seconds)
  return throttle_delay_seconds_;
}
void ClientCommand::set_throttle_delay_seconds(::google::protobuf::int32 value) {
  set_has_throttle_delay_seconds();
  throttle_delay_seconds_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.throttle_delay_seconds)
}

// optional int32 client_invalidation_hint_buffer_size = 6;
bool ClientCommand::has_client_invalidation_hint_buffer_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientCommand::set_has_client_invalidation_hint_buffer_size() {
  _has_bits_[0] |= 0x00000020u;
}
void ClientCommand::clear_has_client_invalidation_hint_buffer_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClientCommand::clear_client_invalidation_hint_buffer_size() {
  client_invalidation_hint_buffer_size_ = 0;
  clear_has_client_invalidation_hint_buffer_size();
}
::google::protobuf::int32 ClientCommand::client_invalidation_hint_buffer_size() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.client_invalidation_hint_buffer_size)
  return client_invalidation_hint_buffer_size_;
}
void ClientCommand::set_client_invalidation_hint_buffer_size(::google::protobuf::int32 value) {
  set_has_client_invalidation_hint_buffer_size();
  client_invalidation_hint_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.client_invalidation_hint_buffer_size)
}

// optional int32 gu_retry_delay_seconds = 7;
bool ClientCommand::has_gu_retry_delay_seconds() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClientCommand::set_has_gu_retry_delay_seconds() {
  _has_bits_[0] |= 0x00000040u;
}
void ClientCommand::clear_has_gu_retry_delay_seconds() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClientCommand::clear_gu_retry_delay_seconds() {
  gu_retry_delay_seconds_ = 0;
  clear_has_gu_retry_delay_seconds();
}
::google::protobuf::int32 ClientCommand::gu_retry_delay_seconds() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.gu_retry_delay_seconds)
  return gu_retry_delay_seconds_;
}
void ClientCommand::set_gu_retry_delay_seconds(::google::protobuf::int32 value) {
  set_has_gu_retry_delay_seconds();
  gu_retry_delay_seconds_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.gu_retry_delay_seconds)
}

// repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
int ClientCommand::custom_nudge_delays_size() const {
  return custom_nudge_delays_.size();
}
void ClientCommand::clear_custom_nudge_delays() {
  custom_nudge_delays_.Clear();
}
const ::sync_pb::CustomNudgeDelay& ClientCommand::custom_nudge_delays(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.custom_nudge_delays)
  return custom_nudge_delays_.Get(index);
}
::sync_pb::CustomNudgeDelay* ClientCommand::mutable_custom_nudge_delays(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientCommand.custom_nudge_delays)
  return custom_nudge_delays_.Mutable(index);
}
::sync_pb::CustomNudgeDelay* ClientCommand::add_custom_nudge_delays() {
  // @@protoc_insertion_point(field_add:sync_pb.ClientCommand.custom_nudge_delays)
  return custom_nudge_delays_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::CustomNudgeDelay >*
ClientCommand::mutable_custom_nudge_delays() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.ClientCommand.custom_nudge_delays)
  return &custom_nudge_delays_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::CustomNudgeDelay >&
ClientCommand::custom_nudge_delays() const {
  // @@protoc_insertion_point(field_list:sync_pb.ClientCommand.custom_nudge_delays)
  return custom_nudge_delays_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
