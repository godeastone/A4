// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_event_specifics.proto

#ifndef PROTOBUF_user_5fevent_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_user_5fevent_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "user_consent_types.pb.h"
// @@protoc_insertion_point(includes)
namespace sync_pb {
class UserEventSpecifics;
class UserEventSpecificsDefaultTypeInternal;
extern UserEventSpecificsDefaultTypeInternal _UserEventSpecifics_default_instance_;
class UserEventSpecifics_FieldTrial;
class UserEventSpecifics_FieldTrialDefaultTypeInternal;
extern UserEventSpecifics_FieldTrialDefaultTypeInternal _UserEventSpecifics_FieldTrial_default_instance_;
class UserEventSpecifics_GaiaPasswordReuse;
class UserEventSpecifics_GaiaPasswordReuseDefaultTypeInternal;
extern UserEventSpecifics_GaiaPasswordReuseDefaultTypeInternal _UserEventSpecifics_GaiaPasswordReuse_default_instance_;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetectedDefaultTypeInternal;
extern UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetectedDefaultTypeInternal _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_default_instance_;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatusDefaultTypeInternal;
extern UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatusDefaultTypeInternal _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_default_instance_;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteractionDefaultTypeInternal;
extern UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteractionDefaultTypeInternal _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_default_instance_;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookupDefaultTypeInternal;
extern UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookupDefaultTypeInternal _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_default_instance_;
class UserEventSpecifics_LanguageDetection;
class UserEventSpecifics_LanguageDetectionDefaultTypeInternal;
extern UserEventSpecifics_LanguageDetectionDefaultTypeInternal _UserEventSpecifics_LanguageDetection_default_instance_;
class UserEventSpecifics_LanguageDetection_Language;
class UserEventSpecifics_LanguageDetection_LanguageDefaultTypeInternal;
extern UserEventSpecifics_LanguageDetection_LanguageDefaultTypeInternal _UserEventSpecifics_LanguageDetection_Language_default_instance_;
class UserEventSpecifics_Test;
class UserEventSpecifics_TestDefaultTypeInternal;
extern UserEventSpecifics_TestDefaultTypeInternal _UserEventSpecifics_Test_default_instance_;
class UserEventSpecifics_Translation;
class UserEventSpecifics_TranslationDefaultTypeInternal;
extern UserEventSpecifics_TranslationDefaultTypeInternal _UserEventSpecifics_Translation_default_instance_;
class UserEventSpecifics_UserConsent;
class UserEventSpecifics_UserConsentDefaultTypeInternal;
extern UserEventSpecifics_UserConsentDefaultTypeInternal _UserEventSpecifics_UserConsent_default_instance_;
}  // namespace sync_pb

namespace sync_pb {

namespace protobuf_user_5fevent_5fspecifics_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_user_5fevent_5fspecifics_2eproto

enum UserEventSpecifics_Translation_Interaction {
  UserEventSpecifics_Translation_Interaction_UNKNOWN = 0,
  UserEventSpecifics_Translation_Interaction_ACCEPT = 1,
  UserEventSpecifics_Translation_Interaction_DECLINE = 2,
  UserEventSpecifics_Translation_Interaction_IGNORED = 3,
  UserEventSpecifics_Translation_Interaction_DISMISSED = 4,
  UserEventSpecifics_Translation_Interaction_MANUAL = 5,
  UserEventSpecifics_Translation_Interaction_TRANSLATION_REVERTED = 6,
  UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_PREF = 7,
  UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_LINK = 8,
  UserEventSpecifics_Translation_Interaction_INITIALIZATION_ERROR = 9
};
bool UserEventSpecifics_Translation_Interaction_IsValid(int value);
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation_Interaction_Interaction_MIN = UserEventSpecifics_Translation_Interaction_UNKNOWN;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation_Interaction_Interaction_MAX = UserEventSpecifics_Translation_Interaction_INITIALIZATION_ERROR;
const int UserEventSpecifics_Translation_Interaction_Interaction_ARRAYSIZE = UserEventSpecifics_Translation_Interaction_Interaction_MAX + 1;

enum UserEventSpecifics_UserConsent_Feature {
  UserEventSpecifics_UserConsent_Feature_FEATURE_UNSPECIFIED = 0,
  UserEventSpecifics_UserConsent_Feature_CHROME_SYNC = 1,
  UserEventSpecifics_UserConsent_Feature_PLAY_STORE = 2,
  UserEventSpecifics_UserConsent_Feature_BACKUP_AND_RESTORE = 3,
  UserEventSpecifics_UserConsent_Feature_GOOGLE_LOCATION_SERVICE = 4
};
bool UserEventSpecifics_UserConsent_Feature_IsValid(int value);
const UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent_Feature_Feature_MIN = UserEventSpecifics_UserConsent_Feature_FEATURE_UNSPECIFIED;
const UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent_Feature_Feature_MAX = UserEventSpecifics_UserConsent_Feature_GOOGLE_LOCATION_SERVICE;
const int UserEventSpecifics_UserConsent_Feature_Feature_ARRAYSIZE = UserEventSpecifics_UserConsent_Feature_Feature_MAX + 1;

enum UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation {
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_REPORTING_POPULATION_UNSPECIFIED = 0,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_NONE = 1,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_EXTENDED_REPORTING = 2,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_SCOUT = 3
};
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(int value);
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_MIN = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_REPORTING_POPULATION_UNSPECIFIED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_MAX = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_SCOUT;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_ARRAYSIZE = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_MAX + 1;

enum UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult {
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_UNSPECIFIED = 0,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_WHITELIST_HIT = 1,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_CACHE_HIT = 2,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_REQUEST_SUCCESS = 3,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_REQUEST_FAILURE = 4,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_URL_UNSUPPORTED = 5,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_ENTERPRISE_WHITELIST_HIT = 6,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_TURNED_OFF_BY_POLICY = 7
};
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(int value);
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_MIN = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_UNSPECIFIED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_MAX = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_TURNED_OFF_BY_POLICY;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_ARRAYSIZE = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_MAX + 1;

enum UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict {
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_VERDICT_UNSPECIFIED = 0,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_SAFE = 1,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_LOW_REPUTATION = 2,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_PHISHING = 3
};
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(int value);
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_MIN = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_VERDICT_UNSPECIFIED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_MAX = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_PHISHING;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_ARRAYSIZE = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_MAX + 1;

enum UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult {
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_UNSPECIFIED = 0,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_TAKEN = 1,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_IGNORED = 2,
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_UI_IGNORED = 3
};
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(int value);
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_MIN = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_UNSPECIFIED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_MAX = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_UI_IGNORED;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_ARRAYSIZE = UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_MAX + 1;

// ===================================================================

class UserEventSpecifics_Test : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.Test) */ {
 public:
  UserEventSpecifics_Test();
  virtual ~UserEventSpecifics_Test();

  UserEventSpecifics_Test(const UserEventSpecifics_Test& from);

  inline UserEventSpecifics_Test& operator=(const UserEventSpecifics_Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_Test& default_instance();

  static inline const UserEventSpecifics_Test* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_Test*>(
               &_UserEventSpecifics_Test_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_Test* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_Test* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_Test* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_Test& from);
  void MergeFrom(const UserEventSpecifics_Test& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_Test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.Test)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics_FieldTrial : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.FieldTrial) */ {
 public:
  UserEventSpecifics_FieldTrial();
  virtual ~UserEventSpecifics_FieldTrial();

  UserEventSpecifics_FieldTrial(const UserEventSpecifics_FieldTrial& from);

  inline UserEventSpecifics_FieldTrial& operator=(const UserEventSpecifics_FieldTrial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_FieldTrial& default_instance();

  static inline const UserEventSpecifics_FieldTrial* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_FieldTrial*>(
               &_UserEventSpecifics_FieldTrial_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_FieldTrial* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_FieldTrial* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_FieldTrial* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_FieldTrial& from);
  void MergeFrom(const UserEventSpecifics_FieldTrial& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_FieldTrial* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed32 variation_ids = 1;
  int variation_ids_size() const;
  void clear_variation_ids();
  static const int kVariationIdsFieldNumber = 1;
  ::google::protobuf::uint32 variation_ids(int index) const;
  void set_variation_ids(int index, ::google::protobuf::uint32 value);
  void add_variation_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      variation_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_variation_ids();

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.FieldTrial)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > variation_ids_;
  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics_LanguageDetection_Language : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.LanguageDetection.Language) */ {
 public:
  UserEventSpecifics_LanguageDetection_Language();
  virtual ~UserEventSpecifics_LanguageDetection_Language();

  UserEventSpecifics_LanguageDetection_Language(const UserEventSpecifics_LanguageDetection_Language& from);

  inline UserEventSpecifics_LanguageDetection_Language& operator=(const UserEventSpecifics_LanguageDetection_Language& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_LanguageDetection_Language& default_instance();

  static inline const UserEventSpecifics_LanguageDetection_Language* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_LanguageDetection_Language*>(
               &_UserEventSpecifics_LanguageDetection_Language_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_LanguageDetection_Language* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_LanguageDetection_Language* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_LanguageDetection_Language* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_LanguageDetection_Language& from);
  void MergeFrom(const UserEventSpecifics_LanguageDetection_Language& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_LanguageDetection_Language* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string language_code = 1;
  bool has_language_code() const;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 1;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // optional bool is_reliable = 2;
  bool has_is_reliable() const;
  void clear_is_reliable();
  static const int kIsReliableFieldNumber = 2;
  bool is_reliable() const;
  void set_is_reliable(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.LanguageDetection.Language)
 private:
  void set_has_language_code();
  void clear_has_language_code();
  void set_has_is_reliable();
  void clear_has_is_reliable();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  bool is_reliable_;
  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics_LanguageDetection : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.LanguageDetection) */ {
 public:
  UserEventSpecifics_LanguageDetection();
  virtual ~UserEventSpecifics_LanguageDetection();

  UserEventSpecifics_LanguageDetection(const UserEventSpecifics_LanguageDetection& from);

  inline UserEventSpecifics_LanguageDetection& operator=(const UserEventSpecifics_LanguageDetection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_LanguageDetection& default_instance();

  static inline const UserEventSpecifics_LanguageDetection* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_LanguageDetection*>(
               &_UserEventSpecifics_LanguageDetection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_LanguageDetection* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_LanguageDetection* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_LanguageDetection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_LanguageDetection& from);
  void MergeFrom(const UserEventSpecifics_LanguageDetection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_LanguageDetection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_LanguageDetection_Language Language;

  // accessors -------------------------------------------------------

  // repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
  int detected_languages_size() const;
  void clear_detected_languages();
  static const int kDetectedLanguagesFieldNumber = 1;
  const ::sync_pb::UserEventSpecifics_LanguageDetection_Language& detected_languages(int index) const;
  ::sync_pb::UserEventSpecifics_LanguageDetection_Language* mutable_detected_languages(int index);
  ::sync_pb::UserEventSpecifics_LanguageDetection_Language* add_detected_languages();
  ::google::protobuf::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >*
      mutable_detected_languages();
  const ::google::protobuf::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >&
      detected_languages() const;

  // optional string adopted_language_code = 2;
  bool has_adopted_language_code() const;
  void clear_adopted_language_code();
  static const int kAdoptedLanguageCodeFieldNumber = 2;
  const ::std::string& adopted_language_code() const;
  void set_adopted_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_adopted_language_code(::std::string&& value);
  #endif
  void set_adopted_language_code(const char* value);
  void set_adopted_language_code(const char* value, size_t size);
  ::std::string* mutable_adopted_language_code();
  ::std::string* release_adopted_language_code();
  void set_allocated_adopted_language_code(::std::string* adopted_language_code);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.LanguageDetection)
 private:
  void set_has_adopted_language_code();
  void clear_has_adopted_language_code();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language > detected_languages_;
  ::google::protobuf::internal::ArenaStringPtr adopted_language_code_;
  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics_Translation : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.Translation) */ {
 public:
  UserEventSpecifics_Translation();
  virtual ~UserEventSpecifics_Translation();

  UserEventSpecifics_Translation(const UserEventSpecifics_Translation& from);

  inline UserEventSpecifics_Translation& operator=(const UserEventSpecifics_Translation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_Translation& default_instance();

  static inline const UserEventSpecifics_Translation* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_Translation*>(
               &_UserEventSpecifics_Translation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_Translation* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_Translation* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_Translation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_Translation& from);
  void MergeFrom(const UserEventSpecifics_Translation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_Translation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_Translation_Interaction Interaction;
  static const Interaction UNKNOWN =
    UserEventSpecifics_Translation_Interaction_UNKNOWN;
  static const Interaction ACCEPT =
    UserEventSpecifics_Translation_Interaction_ACCEPT;
  static const Interaction DECLINE =
    UserEventSpecifics_Translation_Interaction_DECLINE;
  static const Interaction IGNORED =
    UserEventSpecifics_Translation_Interaction_IGNORED;
  static const Interaction DISMISSED =
    UserEventSpecifics_Translation_Interaction_DISMISSED;
  static const Interaction MANUAL =
    UserEventSpecifics_Translation_Interaction_MANUAL;
  static const Interaction TRANSLATION_REVERTED =
    UserEventSpecifics_Translation_Interaction_TRANSLATION_REVERTED;
  static const Interaction AUTO_TRANSLATION_BY_PREF =
    UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_PREF;
  static const Interaction AUTO_TRANSLATION_BY_LINK =
    UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_LINK;
  static const Interaction INITIALIZATION_ERROR =
    UserEventSpecifics_Translation_Interaction_INITIALIZATION_ERROR;
  static inline bool Interaction_IsValid(int value) {
    return UserEventSpecifics_Translation_Interaction_IsValid(value);
  }
  static const Interaction Interaction_MIN =
    UserEventSpecifics_Translation_Interaction_Interaction_MIN;
  static const Interaction Interaction_MAX =
    UserEventSpecifics_Translation_Interaction_Interaction_MAX;
  static const int Interaction_ARRAYSIZE =
    UserEventSpecifics_Translation_Interaction_Interaction_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string from_language_code = 1;
  bool has_from_language_code() const;
  void clear_from_language_code();
  static const int kFromLanguageCodeFieldNumber = 1;
  const ::std::string& from_language_code() const;
  void set_from_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_from_language_code(::std::string&& value);
  #endif
  void set_from_language_code(const char* value);
  void set_from_language_code(const char* value, size_t size);
  ::std::string* mutable_from_language_code();
  ::std::string* release_from_language_code();
  void set_allocated_from_language_code(::std::string* from_language_code);

  // optional string to_language_code = 2;
  bool has_to_language_code() const;
  void clear_to_language_code();
  static const int kToLanguageCodeFieldNumber = 2;
  const ::std::string& to_language_code() const;
  void set_to_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_to_language_code(::std::string&& value);
  #endif
  void set_to_language_code(const char* value);
  void set_to_language_code(const char* value, size_t size);
  ::std::string* mutable_to_language_code();
  ::std::string* release_to_language_code();
  void set_allocated_to_language_code(::std::string* to_language_code);

  // optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
  bool has_interaction() const;
  void clear_interaction();
  static const int kInteractionFieldNumber = 3;
  ::sync_pb::UserEventSpecifics_Translation_Interaction interaction() const;
  void set_interaction(::sync_pb::UserEventSpecifics_Translation_Interaction value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.Translation)
 private:
  void set_has_from_language_code();
  void clear_has_from_language_code();
  void set_has_to_language_code();
  void clear_has_to_language_code();
  void set_has_interaction();
  void clear_has_interaction();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_language_code_;
  ::google::protobuf::internal::ArenaStringPtr to_language_code_;
  int interaction_;
  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics_UserConsent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.UserConsent) */ {
 public:
  UserEventSpecifics_UserConsent();
  virtual ~UserEventSpecifics_UserConsent();

  UserEventSpecifics_UserConsent(const UserEventSpecifics_UserConsent& from);

  inline UserEventSpecifics_UserConsent& operator=(const UserEventSpecifics_UserConsent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_UserConsent& default_instance();

  enum ConsentCase {
    kSyncConsent = 7,
    kArcBackupAndRestoreConsent = 8,
    kArcLocationServiceConsent = 9,
    kArcPlayTermsOfServiceConsent = 10,
    kArcMetricsAndUsageConsent = 11,
    CONSENT_NOT_SET = 0,
  };

  static inline const UserEventSpecifics_UserConsent* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_UserConsent*>(
               &_UserEventSpecifics_UserConsent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_UserConsent* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_UserConsent* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_UserConsent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_UserConsent& from);
  void MergeFrom(const UserEventSpecifics_UserConsent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_UserConsent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_UserConsent_Feature Feature;
  static const Feature FEATURE_UNSPECIFIED =
    UserEventSpecifics_UserConsent_Feature_FEATURE_UNSPECIFIED;
  static const Feature CHROME_SYNC =
    UserEventSpecifics_UserConsent_Feature_CHROME_SYNC;
  static const Feature PLAY_STORE =
    UserEventSpecifics_UserConsent_Feature_PLAY_STORE;
  static const Feature BACKUP_AND_RESTORE =
    UserEventSpecifics_UserConsent_Feature_BACKUP_AND_RESTORE;
  static const Feature GOOGLE_LOCATION_SERVICE =
    UserEventSpecifics_UserConsent_Feature_GOOGLE_LOCATION_SERVICE;
  static inline bool Feature_IsValid(int value) {
    return UserEventSpecifics_UserConsent_Feature_IsValid(value);
  }
  static const Feature Feature_MIN =
    UserEventSpecifics_UserConsent_Feature_Feature_MIN;
  static const Feature Feature_MAX =
    UserEventSpecifics_UserConsent_Feature_Feature_MAX;
  static const int Feature_ARRAYSIZE =
    UserEventSpecifics_UserConsent_Feature_Feature_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int description_grd_ids_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_description_grd_ids();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDescriptionGrdIdsFieldNumber = 2;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int32 description_grd_ids(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_description_grd_ids(int index, ::google::protobuf::int32 value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_description_grd_ids(::google::protobuf::int32 value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      description_grd_ids() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_description_grd_ids();

  // optional string locale = 4;
  bool has_locale() const;
  void clear_locale();
  static const int kLocaleFieldNumber = 4;
  const ::std::string& locale() const;
  void set_locale(const ::std::string& value);
  #if LANG_CXX11
  void set_locale(::std::string&& value);
  #endif
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  ::std::string* mutable_locale();
  ::std::string* release_locale();
  void set_allocated_locale(::std::string* locale);

  // optional string account_id = 6;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 6;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_feature() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_feature();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kFeatureFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::sync_pb::UserEventSpecifics_UserConsent_Feature feature() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_feature(::sync_pb::UserEventSpecifics_UserConsent_Feature value);

  // optional int32 confirmation_grd_id = 3 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_confirmation_grd_id() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_confirmation_grd_id();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kConfirmationGrdIdFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int32 confirmation_grd_id() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_confirmation_grd_id(::google::protobuf::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_status();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kStatusFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // optional int64 client_consent_time_usec = 12;
  bool has_client_consent_time_usec() const;
  void clear_client_consent_time_usec();
  static const int kClientConsentTimeUsecFieldNumber = 12;
  ::google::protobuf::int64 client_consent_time_usec() const;
  void set_client_consent_time_usec(::google::protobuf::int64 value);

  // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
  bool has_sync_consent() const;
  void clear_sync_consent();
  static const int kSyncConsentFieldNumber = 7;
  const ::sync_pb::UserConsentTypes_SyncConsent& sync_consent() const;
  ::sync_pb::UserConsentTypes_SyncConsent* mutable_sync_consent();
  ::sync_pb::UserConsentTypes_SyncConsent* release_sync_consent();
  void set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent);

  // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
  bool has_arc_backup_and_restore_consent() const;
  void clear_arc_backup_and_restore_consent();
  static const int kArcBackupAndRestoreConsentFieldNumber = 8;
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& arc_backup_and_restore_consent() const;
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* mutable_arc_backup_and_restore_consent();
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* release_arc_backup_and_restore_consent();
  void set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent);

  // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
  bool has_arc_location_service_consent() const;
  void clear_arc_location_service_consent();
  static const int kArcLocationServiceConsentFieldNumber = 9;
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& arc_location_service_consent() const;
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* mutable_arc_location_service_consent();
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* release_arc_location_service_consent();
  void set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent);

  // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
  bool has_arc_play_terms_of_service_consent() const;
  void clear_arc_play_terms_of_service_consent();
  static const int kArcPlayTermsOfServiceConsentFieldNumber = 10;
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& arc_play_terms_of_service_consent() const;
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* mutable_arc_play_terms_of_service_consent();
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* release_arc_play_terms_of_service_consent();
  void set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent);

  // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
  bool has_arc_metrics_and_usage_consent() const;
  void clear_arc_metrics_and_usage_consent();
  static const int kArcMetricsAndUsageConsentFieldNumber = 11;
  const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent& arc_metrics_and_usage_consent() const;
  ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* mutable_arc_metrics_and_usage_consent();
  ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* release_arc_metrics_and_usage_consent();
  void set_allocated_arc_metrics_and_usage_consent(::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent);

  ConsentCase consent_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.UserConsent)
 private:
  void set_has_locale();
  void clear_has_locale();
  void set_has_client_consent_time_usec();
  void clear_has_client_consent_time_usec();
  void set_has_sync_consent();
  void set_has_arc_backup_and_restore_consent();
  void set_has_arc_location_service_consent();
  void set_has_arc_play_terms_of_service_consent();
  void set_has_arc_metrics_and_usage_consent();
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_feature();
  void clear_has_feature();
  void set_has_confirmation_grd_id();
  void clear_has_confirmation_grd_id();
  void set_has_status();
  void clear_has_status();

  inline bool has_consent() const;
  void clear_consent();
  inline void clear_has_consent();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > description_grd_ids_;
  ::google::protobuf::internal::ArenaStringPtr locale_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  int feature_;
  ::google::protobuf::int32 confirmation_grd_id_;
  int status_;
  ::google::protobuf::int64 client_consent_time_usec_;
  union ConsentUnion {
    ConsentUnion() {}
    ::sync_pb::UserConsentTypes_SyncConsent* sync_consent_;
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent_;
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent_;
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent_;
    ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent_;
  } consent_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus) */ {
 public:
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus();
  virtual ~UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus();

  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from);

  inline UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& operator=(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& default_instance();

  static inline const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus*>(
               &_UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from);
  void MergeFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation ReportingPopulation;
  static const ReportingPopulation REPORTING_POPULATION_UNSPECIFIED =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_REPORTING_POPULATION_UNSPECIFIED;
  static const ReportingPopulation NONE =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_NONE;
  static const ReportingPopulation EXTENDED_REPORTING =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_EXTENDED_REPORTING;
  static const ReportingPopulation SCOUT =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_SCOUT;
  static inline bool ReportingPopulation_IsValid(int value) {
    return UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(value);
  }
  static const ReportingPopulation ReportingPopulation_MIN =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_MIN;
  static const ReportingPopulation ReportingPopulation_MAX =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_MAX;
  static const int ReportingPopulation_ARRAYSIZE =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
  bool has_safe_browsing_reporting_population() const;
  void clear_safe_browsing_reporting_population();
  static const int kSafeBrowsingReportingPopulationFieldNumber = 2;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation safe_browsing_reporting_population() const;
  void set_safe_browsing_reporting_population(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
 private:
  void set_has_enabled();
  void clear_has_enabled();
  void set_has_safe_browsing_reporting_population();
  void clear_has_safe_browsing_reporting_population();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool enabled_;
  int safe_browsing_reporting_population_;
  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected) */ {
 public:
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected();
  virtual ~UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected();

  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& from);

  inline UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& operator=(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& default_instance();

  static inline const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected*>(
               &_UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& from);
  void MergeFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus SafeBrowsingStatus;

  // accessors -------------------------------------------------------

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& status() const;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* mutable_status();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* release_status();
  void set_allocated_status(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* status);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* status_;
  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup) */ {
 public:
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup();
  virtual ~UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup();

  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& from);

  inline UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& operator=(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& default_instance();

  static inline const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup*>(
               &_UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& from);
  void MergeFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult LookupResult;
  static const LookupResult UNSPECIFIED =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_UNSPECIFIED;
  static const LookupResult WHITELIST_HIT =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_WHITELIST_HIT;
  static const LookupResult CACHE_HIT =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_CACHE_HIT;
  static const LookupResult REQUEST_SUCCESS =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_REQUEST_SUCCESS;
  static const LookupResult REQUEST_FAILURE =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_REQUEST_FAILURE;
  static const LookupResult URL_UNSUPPORTED =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_URL_UNSUPPORTED;
  static const LookupResult ENTERPRISE_WHITELIST_HIT =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_ENTERPRISE_WHITELIST_HIT;
  static const LookupResult TURNED_OFF_BY_POLICY =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_TURNED_OFF_BY_POLICY;
  static inline bool LookupResult_IsValid(int value) {
    return UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(value);
  }
  static const LookupResult LookupResult_MIN =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_MIN;
  static const LookupResult LookupResult_MAX =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_MAX;
  static const int LookupResult_ARRAYSIZE =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_ARRAYSIZE;

  typedef UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict ReputationVerdict;
  static const ReputationVerdict VERDICT_UNSPECIFIED =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_VERDICT_UNSPECIFIED;
  static const ReputationVerdict SAFE =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_SAFE;
  static const ReputationVerdict LOW_REPUTATION =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_LOW_REPUTATION;
  static const ReputationVerdict PHISHING =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_PHISHING;
  static inline bool ReputationVerdict_IsValid(int value) {
    return UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(value);
  }
  static const ReputationVerdict ReputationVerdict_MIN =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_MIN;
  static const ReputationVerdict ReputationVerdict_MAX =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_MAX;
  static const int ReputationVerdict_ARRAYSIZE =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional bytes verdict_token = 3;
  bool has_verdict_token() const;
  void clear_verdict_token();
  static const int kVerdictTokenFieldNumber = 3;
  const ::std::string& verdict_token() const;
  void set_verdict_token(const ::std::string& value);
  #if LANG_CXX11
  void set_verdict_token(::std::string&& value);
  #endif
  void set_verdict_token(const char* value);
  void set_verdict_token(const void* value, size_t size);
  ::std::string* mutable_verdict_token();
  ::std::string* release_verdict_token();
  void set_allocated_verdict_token(::std::string* verdict_token);

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
  bool has_lookup_result() const;
  void clear_lookup_result();
  static const int kLookupResultFieldNumber = 1;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult lookup_result() const;
  void set_lookup_result(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult value);

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
  bool has_verdict() const;
  void clear_verdict();
  static const int kVerdictFieldNumber = 2;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict verdict() const;
  void set_verdict(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
 private:
  void set_has_lookup_result();
  void clear_has_lookup_result();
  void set_has_verdict();
  void clear_has_verdict();
  void set_has_verdict_token();
  void clear_has_verdict_token();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr verdict_token_;
  int lookup_result_;
  int verdict_;
  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction) */ {
 public:
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction();
  virtual ~UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction();

  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& from);

  inline UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& operator=(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& default_instance();

  static inline const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction*>(
               &_UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& from);
  void MergeFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult InteractionResult;
  static const InteractionResult UNSPECIFIED =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_UNSPECIFIED;
  static const InteractionResult WARNING_ACTION_TAKEN =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_TAKEN;
  static const InteractionResult WARNING_ACTION_IGNORED =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_IGNORED;
  static const InteractionResult WARNING_UI_IGNORED =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_UI_IGNORED;
  static inline bool InteractionResult_IsValid(int value) {
    return UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(value);
  }
  static const InteractionResult InteractionResult_MIN =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_MIN;
  static const InteractionResult InteractionResult_MAX =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_MAX;
  static const int InteractionResult_ARRAYSIZE =
    UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
  bool has_interaction_result() const;
  void clear_interaction_result();
  static const int kInteractionResultFieldNumber = 1;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult interaction_result() const;
  void set_interaction_result(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
 private:
  void set_has_interaction_result();
  void clear_has_interaction_result();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int interaction_result_;
  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics_GaiaPasswordReuse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.GaiaPasswordReuse) */ {
 public:
  UserEventSpecifics_GaiaPasswordReuse();
  virtual ~UserEventSpecifics_GaiaPasswordReuse();

  UserEventSpecifics_GaiaPasswordReuse(const UserEventSpecifics_GaiaPasswordReuse& from);

  inline UserEventSpecifics_GaiaPasswordReuse& operator=(const UserEventSpecifics_GaiaPasswordReuse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_GaiaPasswordReuse& default_instance();

  static inline const UserEventSpecifics_GaiaPasswordReuse* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_GaiaPasswordReuse*>(
               &_UserEventSpecifics_GaiaPasswordReuse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics_GaiaPasswordReuse* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_GaiaPasswordReuse* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics_GaiaPasswordReuse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics_GaiaPasswordReuse& from);
  void MergeFrom(const UserEventSpecifics_GaiaPasswordReuse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_GaiaPasswordReuse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected PasswordReuseDetected;
  typedef UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup PasswordReuseLookup;
  typedef UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction PasswordReuseDialogInteraction;

  // accessors -------------------------------------------------------

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
  bool has_reuse_detected() const;
  void clear_reuse_detected();
  static const int kReuseDetectedFieldNumber = 1;
  const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& reuse_detected() const;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* mutable_reuse_detected();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* release_reuse_detected();
  void set_allocated_reuse_detected(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* reuse_detected);

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
  bool has_reuse_lookup() const;
  void clear_reuse_lookup();
  static const int kReuseLookupFieldNumber = 2;
  const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& reuse_lookup() const;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* mutable_reuse_lookup();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* release_reuse_lookup();
  void set_allocated_reuse_lookup(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* reuse_lookup);

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
  bool has_dialog_interaction() const;
  void clear_dialog_interaction();
  static const int kDialogInteractionFieldNumber = 3;
  const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& dialog_interaction() const;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* mutable_dialog_interaction();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* release_dialog_interaction();
  void set_allocated_dialog_interaction(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* dialog_interaction);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
 private:
  void set_has_reuse_detected();
  void clear_has_reuse_detected();
  void set_has_reuse_lookup();
  void clear_has_reuse_lookup();
  void set_has_dialog_interaction();
  void clear_has_dialog_interaction();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* reuse_detected_;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* reuse_lookup_;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* dialog_interaction_;
  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEventSpecifics : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics) */ {
 public:
  UserEventSpecifics();
  virtual ~UserEventSpecifics();

  UserEventSpecifics(const UserEventSpecifics& from);

  inline UserEventSpecifics& operator=(const UserEventSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics& default_instance();

  enum EventCase {
    kTestEvent = 8,
    kFieldTrialEvent = 9,
    kLanguageDetectionEvent = 10,
    kTranslationEvent = 11,
    kUserConsent = 12,
    kGaiaPasswordReuseEvent = 104,
    EVENT_NOT_SET = 0,
  };

  static inline const UserEventSpecifics* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics*>(
               &_UserEventSpecifics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UserEventSpecifics* other);

  // implements Message ----------------------------------------------

  inline UserEventSpecifics* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEventSpecifics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UserEventSpecifics& from);
  void MergeFrom(const UserEventSpecifics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_Test Test;
  typedef UserEventSpecifics_FieldTrial FieldTrial;
  typedef UserEventSpecifics_LanguageDetection LanguageDetection;
  typedef UserEventSpecifics_Translation Translation;
  typedef UserEventSpecifics_UserConsent UserConsent;
  typedef UserEventSpecifics_GaiaPasswordReuse GaiaPasswordReuse;

  // accessors -------------------------------------------------------

  // optional int64 event_time_usec = 1;
  bool has_event_time_usec() const;
  void clear_event_time_usec();
  static const int kEventTimeUsecFieldNumber = 1;
  ::google::protobuf::int64 event_time_usec() const;
  void set_event_time_usec(::google::protobuf::int64 value);

  // optional int64 navigation_id = 2;
  bool has_navigation_id() const;
  void clear_navigation_id();
  static const int kNavigationIdFieldNumber = 2;
  ::google::protobuf::int64 navigation_id() const;
  void set_navigation_id(::google::protobuf::int64 value);

  // optional fixed64 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::google::protobuf::uint64 session_id() const;
  void set_session_id(::google::protobuf::uint64 value);

  // optional .sync_pb.UserEventSpecifics.Test test_event = 8;
  bool has_test_event() const;
  void clear_test_event();
  static const int kTestEventFieldNumber = 8;
  const ::sync_pb::UserEventSpecifics_Test& test_event() const;
  ::sync_pb::UserEventSpecifics_Test* mutable_test_event();
  ::sync_pb::UserEventSpecifics_Test* release_test_event();
  void set_allocated_test_event(::sync_pb::UserEventSpecifics_Test* test_event);

  // optional .sync_pb.UserEventSpecifics.FieldTrial field_trial_event = 9;
  bool has_field_trial_event() const;
  void clear_field_trial_event();
  static const int kFieldTrialEventFieldNumber = 9;
  const ::sync_pb::UserEventSpecifics_FieldTrial& field_trial_event() const;
  ::sync_pb::UserEventSpecifics_FieldTrial* mutable_field_trial_event();
  ::sync_pb::UserEventSpecifics_FieldTrial* release_field_trial_event();
  void set_allocated_field_trial_event(::sync_pb::UserEventSpecifics_FieldTrial* field_trial_event);

  // optional .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10;
  bool has_language_detection_event() const;
  void clear_language_detection_event();
  static const int kLanguageDetectionEventFieldNumber = 10;
  const ::sync_pb::UserEventSpecifics_LanguageDetection& language_detection_event() const;
  ::sync_pb::UserEventSpecifics_LanguageDetection* mutable_language_detection_event();
  ::sync_pb::UserEventSpecifics_LanguageDetection* release_language_detection_event();
  void set_allocated_language_detection_event(::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event);

  // optional .sync_pb.UserEventSpecifics.Translation translation_event = 11;
  bool has_translation_event() const;
  void clear_translation_event();
  static const int kTranslationEventFieldNumber = 11;
  const ::sync_pb::UserEventSpecifics_Translation& translation_event() const;
  ::sync_pb::UserEventSpecifics_Translation* mutable_translation_event();
  ::sync_pb::UserEventSpecifics_Translation* release_translation_event();
  void set_allocated_translation_event(::sync_pb::UserEventSpecifics_Translation* translation_event);

  // optional .sync_pb.UserEventSpecifics.UserConsent user_consent = 12;
  bool has_user_consent() const;
  void clear_user_consent();
  static const int kUserConsentFieldNumber = 12;
  const ::sync_pb::UserEventSpecifics_UserConsent& user_consent() const;
  ::sync_pb::UserEventSpecifics_UserConsent* mutable_user_consent();
  ::sync_pb::UserEventSpecifics_UserConsent* release_user_consent();
  void set_allocated_user_consent(::sync_pb::UserEventSpecifics_UserConsent* user_consent);

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse gaia_password_reuse_event = 104;
  bool has_gaia_password_reuse_event() const;
  void clear_gaia_password_reuse_event();
  static const int kGaiaPasswordReuseEventFieldNumber = 104;
  const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse& gaia_password_reuse_event() const;
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse* mutable_gaia_password_reuse_event();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse* release_gaia_password_reuse_event();
  void set_allocated_gaia_password_reuse_event(::sync_pb::UserEventSpecifics_GaiaPasswordReuse* gaia_password_reuse_event);

  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics)
 private:
  void set_has_event_time_usec();
  void clear_has_event_time_usec();
  void set_has_navigation_id();
  void clear_has_navigation_id();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_test_event();
  void set_has_field_trial_event();
  void set_has_language_detection_event();
  void set_has_translation_event();
  void set_has_user_consent();
  void set_has_gaia_password_reuse_event();

  inline bool has_event() const;
  void clear_event();
  inline void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 event_time_usec_;
  ::google::protobuf::int64 navigation_id_;
  ::google::protobuf::uint64 session_id_;
  union EventUnion {
    EventUnion() {}
    ::sync_pb::UserEventSpecifics_Test* test_event_;
    ::sync_pb::UserEventSpecifics_FieldTrial* field_trial_event_;
    ::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event_;
    ::sync_pb::UserEventSpecifics_Translation* translation_event_;
    ::sync_pb::UserEventSpecifics_UserConsent* user_consent_;
    ::sync_pb::UserEventSpecifics_GaiaPasswordReuse* gaia_password_reuse_event_;
  } event_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_user_5fevent_5fspecifics_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_Test

// -------------------------------------------------------------------

// UserEventSpecifics_FieldTrial

// repeated fixed32 variation_ids = 1;
inline int UserEventSpecifics_FieldTrial::variation_ids_size() const {
  return variation_ids_.size();
}
inline void UserEventSpecifics_FieldTrial::clear_variation_ids() {
  variation_ids_.Clear();
}
inline ::google::protobuf::uint32 UserEventSpecifics_FieldTrial::variation_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
  return variation_ids_.Get(index);
}
inline void UserEventSpecifics_FieldTrial::set_variation_ids(int index, ::google::protobuf::uint32 value) {
  variation_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
}
inline void UserEventSpecifics_FieldTrial::add_variation_ids(::google::protobuf::uint32 value) {
  variation_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserEventSpecifics_FieldTrial::variation_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
  return variation_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserEventSpecifics_FieldTrial::mutable_variation_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
  return &variation_ids_;
}

// -------------------------------------------------------------------

// UserEventSpecifics_LanguageDetection_Language

// optional string language_code = 1;
inline bool UserEventSpecifics_LanguageDetection_Language::has_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_LanguageDetection_Language::set_has_language_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventSpecifics_LanguageDetection_Language::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventSpecifics_LanguageDetection_Language::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language_code();
}
inline const ::std::string& UserEventSpecifics_LanguageDetection_Language::language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  return language_code_.GetNoArena();
}
inline void UserEventSpecifics_LanguageDetection_Language::set_language_code(const ::std::string& value) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
#if LANG_CXX11
inline void UserEventSpecifics_LanguageDetection_Language::set_language_code(::std::string&& value) {
  set_has_language_code();
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
#endif
inline void UserEventSpecifics_LanguageDetection_Language::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
inline void UserEventSpecifics_LanguageDetection_Language::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
inline ::std::string* UserEventSpecifics_LanguageDetection_Language::mutable_language_code() {
  set_has_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserEventSpecifics_LanguageDetection_Language::release_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  clear_has_language_code();
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_LanguageDetection_Language::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    set_has_language_code();
  } else {
    clear_has_language_code();
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}

// optional bool is_reliable = 2;
inline bool UserEventSpecifics_LanguageDetection_Language::has_is_reliable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics_LanguageDetection_Language::set_has_is_reliable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEventSpecifics_LanguageDetection_Language::clear_has_is_reliable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEventSpecifics_LanguageDetection_Language::clear_is_reliable() {
  is_reliable_ = false;
  clear_has_is_reliable();
}
inline bool UserEventSpecifics_LanguageDetection_Language::is_reliable() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.Language.is_reliable)
  return is_reliable_;
}
inline void UserEventSpecifics_LanguageDetection_Language::set_is_reliable(bool value) {
  set_has_is_reliable();
  is_reliable_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.Language.is_reliable)
}

// -------------------------------------------------------------------

// UserEventSpecifics_LanguageDetection

// repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
inline int UserEventSpecifics_LanguageDetection::detected_languages_size() const {
  return detected_languages_.size();
}
inline void UserEventSpecifics_LanguageDetection::clear_detected_languages() {
  detected_languages_.Clear();
}
inline const ::sync_pb::UserEventSpecifics_LanguageDetection_Language& UserEventSpecifics_LanguageDetection::detected_languages(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_.Get(index);
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection_Language* UserEventSpecifics_LanguageDetection::mutable_detected_languages(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_.Mutable(index);
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection_Language* UserEventSpecifics_LanguageDetection::add_detected_languages() {
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >*
UserEventSpecifics_LanguageDetection::mutable_detected_languages() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return &detected_languages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >&
UserEventSpecifics_LanguageDetection::detected_languages() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_;
}

// optional string adopted_language_code = 2;
inline bool UserEventSpecifics_LanguageDetection::has_adopted_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_LanguageDetection::set_has_adopted_language_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventSpecifics_LanguageDetection::clear_has_adopted_language_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventSpecifics_LanguageDetection::clear_adopted_language_code() {
  adopted_language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adopted_language_code();
}
inline const ::std::string& UserEventSpecifics_LanguageDetection::adopted_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  return adopted_language_code_.GetNoArena();
}
inline void UserEventSpecifics_LanguageDetection::set_adopted_language_code(const ::std::string& value) {
  set_has_adopted_language_code();
  adopted_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
#if LANG_CXX11
inline void UserEventSpecifics_LanguageDetection::set_adopted_language_code(::std::string&& value) {
  set_has_adopted_language_code();
  adopted_language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
#endif
inline void UserEventSpecifics_LanguageDetection::set_adopted_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adopted_language_code();
  adopted_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
inline void UserEventSpecifics_LanguageDetection::set_adopted_language_code(const char* value, size_t size) {
  set_has_adopted_language_code();
  adopted_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
inline ::std::string* UserEventSpecifics_LanguageDetection::mutable_adopted_language_code() {
  set_has_adopted_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  return adopted_language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserEventSpecifics_LanguageDetection::release_adopted_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  clear_has_adopted_language_code();
  return adopted_language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_LanguageDetection::set_allocated_adopted_language_code(::std::string* adopted_language_code) {
  if (adopted_language_code != NULL) {
    set_has_adopted_language_code();
  } else {
    clear_has_adopted_language_code();
  }
  adopted_language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adopted_language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}

// -------------------------------------------------------------------

// UserEventSpecifics_Translation

// optional string from_language_code = 1;
inline bool UserEventSpecifics_Translation::has_from_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_Translation::set_has_from_language_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventSpecifics_Translation::clear_has_from_language_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventSpecifics_Translation::clear_from_language_code() {
  from_language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_language_code();
}
inline const ::std::string& UserEventSpecifics_Translation::from_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.from_language_code)
  return from_language_code_.GetNoArena();
}
inline void UserEventSpecifics_Translation::set_from_language_code(const ::std::string& value) {
  set_has_from_language_code();
  from_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
#if LANG_CXX11
inline void UserEventSpecifics_Translation::set_from_language_code(::std::string&& value) {
  set_has_from_language_code();
  from_language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
#endif
inline void UserEventSpecifics_Translation::set_from_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_language_code();
  from_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
inline void UserEventSpecifics_Translation::set_from_language_code(const char* value, size_t size) {
  set_has_from_language_code();
  from_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
inline ::std::string* UserEventSpecifics_Translation::mutable_from_language_code() {
  set_has_from_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.Translation.from_language_code)
  return from_language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserEventSpecifics_Translation::release_from_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.Translation.from_language_code)
  clear_has_from_language_code();
  return from_language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_Translation::set_allocated_from_language_code(::std::string* from_language_code) {
  if (from_language_code != NULL) {
    set_has_from_language_code();
  } else {
    clear_has_from_language_code();
  }
  from_language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.Translation.from_language_code)
}

// optional string to_language_code = 2;
inline bool UserEventSpecifics_Translation::has_to_language_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics_Translation::set_has_to_language_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEventSpecifics_Translation::clear_has_to_language_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEventSpecifics_Translation::clear_to_language_code() {
  to_language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_language_code();
}
inline const ::std::string& UserEventSpecifics_Translation::to_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.to_language_code)
  return to_language_code_.GetNoArena();
}
inline void UserEventSpecifics_Translation::set_to_language_code(const ::std::string& value) {
  set_has_to_language_code();
  to_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
#if LANG_CXX11
inline void UserEventSpecifics_Translation::set_to_language_code(::std::string&& value) {
  set_has_to_language_code();
  to_language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
#endif
inline void UserEventSpecifics_Translation::set_to_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_language_code();
  to_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
inline void UserEventSpecifics_Translation::set_to_language_code(const char* value, size_t size) {
  set_has_to_language_code();
  to_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
inline ::std::string* UserEventSpecifics_Translation::mutable_to_language_code() {
  set_has_to_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.Translation.to_language_code)
  return to_language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserEventSpecifics_Translation::release_to_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.Translation.to_language_code)
  clear_has_to_language_code();
  return to_language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_Translation::set_allocated_to_language_code(::std::string* to_language_code) {
  if (to_language_code != NULL) {
    set_has_to_language_code();
  } else {
    clear_has_to_language_code();
  }
  to_language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.Translation.to_language_code)
}

// optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
inline bool UserEventSpecifics_Translation::has_interaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEventSpecifics_Translation::set_has_interaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserEventSpecifics_Translation::clear_has_interaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserEventSpecifics_Translation::clear_interaction() {
  interaction_ = 0;
  clear_has_interaction();
}
inline ::sync_pb::UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::interaction() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.interaction)
  return static_cast< ::sync_pb::UserEventSpecifics_Translation_Interaction >(interaction_);
}
inline void UserEventSpecifics_Translation::set_interaction(::sync_pb::UserEventSpecifics_Translation_Interaction value) {
  assert(::sync_pb::UserEventSpecifics_Translation_Interaction_IsValid(value));
  set_has_interaction();
  interaction_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.interaction)
}

// -------------------------------------------------------------------

// UserEventSpecifics_UserConsent

// optional string locale = 4;
inline bool UserEventSpecifics_UserConsent::has_locale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_UserConsent::set_has_locale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventSpecifics_UserConsent::clear_has_locale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventSpecifics_UserConsent::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locale();
}
inline const ::std::string& UserEventSpecifics_UserConsent::locale() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.locale)
  return locale_.GetNoArena();
}
inline void UserEventSpecifics_UserConsent::set_locale(const ::std::string& value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.locale)
}
#if LANG_CXX11
inline void UserEventSpecifics_UserConsent::set_locale(::std::string&& value) {
  set_has_locale();
  locale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.UserConsent.locale)
}
#endif
inline void UserEventSpecifics_UserConsent::set_locale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.UserConsent.locale)
}
inline void UserEventSpecifics_UserConsent::set_locale(const char* value, size_t size) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.UserConsent.locale)
}
inline ::std::string* UserEventSpecifics_UserConsent::mutable_locale() {
  set_has_locale();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserEventSpecifics_UserConsent::release_locale() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.locale)
  clear_has_locale();
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_UserConsent::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.locale)
}

// optional int64 client_consent_time_usec = 12;
inline bool UserEventSpecifics_UserConsent::has_client_consent_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserEventSpecifics_UserConsent::set_has_client_consent_time_usec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserEventSpecifics_UserConsent::clear_has_client_consent_time_usec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserEventSpecifics_UserConsent::clear_client_consent_time_usec() {
  client_consent_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_client_consent_time_usec();
}
inline ::google::protobuf::int64 UserEventSpecifics_UserConsent::client_consent_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.client_consent_time_usec)
  return client_consent_time_usec_;
}
inline void UserEventSpecifics_UserConsent::set_client_consent_time_usec(::google::protobuf::int64 value) {
  set_has_client_consent_time_usec();
  client_consent_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.client_consent_time_usec)
}

// optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
inline bool UserEventSpecifics_UserConsent::has_sync_consent() const {
  return consent_case() == kSyncConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_sync_consent() {
  _oneof_case_[0] = kSyncConsent;
}
inline void UserEventSpecifics_UserConsent::clear_sync_consent() {
  if (has_sync_consent()) {
    delete consent_.sync_consent_;
    clear_has_consent();
  }
}
inline  const ::sync_pb::UserConsentTypes_SyncConsent& UserEventSpecifics_UserConsent::sync_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  return has_sync_consent()
      ? *consent_.sync_consent_
      : ::sync_pb::UserConsentTypes_SyncConsent::default_instance();
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserEventSpecifics_UserConsent::mutable_sync_consent() {
  if (!has_sync_consent()) {
    clear_consent();
    set_has_sync_consent();
    consent_.sync_consent_ = new ::sync_pb::UserConsentTypes_SyncConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  return consent_.sync_consent_;
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserEventSpecifics_UserConsent::release_sync_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  if (has_sync_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_SyncConsent* temp = consent_.sync_consent_;
    consent_.sync_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics_UserConsent::set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent) {
  clear_consent();
  if (sync_consent) {
    set_has_sync_consent();
    consent_.sync_consent_ = sync_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
}

// optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
inline bool UserEventSpecifics_UserConsent::has_arc_backup_and_restore_consent() const {
  return consent_case() == kArcBackupAndRestoreConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_arc_backup_and_restore_consent() {
  _oneof_case_[0] = kArcBackupAndRestoreConsent;
}
inline void UserEventSpecifics_UserConsent::clear_arc_backup_and_restore_consent() {
  if (has_arc_backup_and_restore_consent()) {
    delete consent_.arc_backup_and_restore_consent_;
    clear_has_consent();
  }
}
inline  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& UserEventSpecifics_UserConsent::arc_backup_and_restore_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  return has_arc_backup_and_restore_consent()
      ? *consent_.arc_backup_and_restore_consent_
      : ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::default_instance();
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserEventSpecifics_UserConsent::mutable_arc_backup_and_restore_consent() {
  if (!has_arc_backup_and_restore_consent()) {
    clear_consent();
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = new ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  return consent_.arc_backup_and_restore_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserEventSpecifics_UserConsent::release_arc_backup_and_restore_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  if (has_arc_backup_and_restore_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* temp = consent_.arc_backup_and_restore_consent_;
    consent_.arc_backup_and_restore_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics_UserConsent::set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent) {
  clear_consent();
  if (arc_backup_and_restore_consent) {
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = arc_backup_and_restore_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
}

// optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
inline bool UserEventSpecifics_UserConsent::has_arc_location_service_consent() const {
  return consent_case() == kArcLocationServiceConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_arc_location_service_consent() {
  _oneof_case_[0] = kArcLocationServiceConsent;
}
inline void UserEventSpecifics_UserConsent::clear_arc_location_service_consent() {
  if (has_arc_location_service_consent()) {
    delete consent_.arc_location_service_consent_;
    clear_has_consent();
  }
}
inline  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& UserEventSpecifics_UserConsent::arc_location_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  return has_arc_location_service_consent()
      ? *consent_.arc_location_service_consent_
      : ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::default_instance();
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserEventSpecifics_UserConsent::mutable_arc_location_service_consent() {
  if (!has_arc_location_service_consent()) {
    clear_consent();
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = new ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  return consent_.arc_location_service_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserEventSpecifics_UserConsent::release_arc_location_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  if (has_arc_location_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* temp = consent_.arc_location_service_consent_;
    consent_.arc_location_service_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics_UserConsent::set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent) {
  clear_consent();
  if (arc_location_service_consent) {
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = arc_location_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
}

// optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
inline bool UserEventSpecifics_UserConsent::has_arc_play_terms_of_service_consent() const {
  return consent_case() == kArcPlayTermsOfServiceConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_arc_play_terms_of_service_consent() {
  _oneof_case_[0] = kArcPlayTermsOfServiceConsent;
}
inline void UserEventSpecifics_UserConsent::clear_arc_play_terms_of_service_consent() {
  if (has_arc_play_terms_of_service_consent()) {
    delete consent_.arc_play_terms_of_service_consent_;
    clear_has_consent();
  }
}
inline  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& UserEventSpecifics_UserConsent::arc_play_terms_of_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  return has_arc_play_terms_of_service_consent()
      ? *consent_.arc_play_terms_of_service_consent_
      : ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::default_instance();
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserEventSpecifics_UserConsent::mutable_arc_play_terms_of_service_consent() {
  if (!has_arc_play_terms_of_service_consent()) {
    clear_consent();
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = new ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  return consent_.arc_play_terms_of_service_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserEventSpecifics_UserConsent::release_arc_play_terms_of_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  if (has_arc_play_terms_of_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* temp = consent_.arc_play_terms_of_service_consent_;
    consent_.arc_play_terms_of_service_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics_UserConsent::set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent) {
  clear_consent();
  if (arc_play_terms_of_service_consent) {
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = arc_play_terms_of_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
}

// optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
inline bool UserEventSpecifics_UserConsent::has_arc_metrics_and_usage_consent() const {
  return consent_case() == kArcMetricsAndUsageConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_arc_metrics_and_usage_consent() {
  _oneof_case_[0] = kArcMetricsAndUsageConsent;
}
inline void UserEventSpecifics_UserConsent::clear_arc_metrics_and_usage_consent() {
  if (has_arc_metrics_and_usage_consent()) {
    delete consent_.arc_metrics_and_usage_consent_;
    clear_has_consent();
  }
}
inline  const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent& UserEventSpecifics_UserConsent::arc_metrics_and_usage_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
  return has_arc_metrics_and_usage_consent()
      ? *consent_.arc_metrics_and_usage_consent_
      : ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::default_instance();
}
inline ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* UserEventSpecifics_UserConsent::mutable_arc_metrics_and_usage_consent() {
  if (!has_arc_metrics_and_usage_consent()) {
    clear_consent();
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = new ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
  return consent_.arc_metrics_and_usage_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* UserEventSpecifics_UserConsent::release_arc_metrics_and_usage_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
  if (has_arc_metrics_and_usage_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* temp = consent_.arc_metrics_and_usage_consent_;
    consent_.arc_metrics_and_usage_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics_UserConsent::set_allocated_arc_metrics_and_usage_consent(::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent) {
  clear_consent();
  if (arc_metrics_and_usage_consent) {
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = arc_metrics_and_usage_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
}

// optional string account_id = 6;
inline bool UserEventSpecifics_UserConsent::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics_UserConsent::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEventSpecifics_UserConsent::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEventSpecifics_UserConsent::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_id();
}
inline const ::std::string& UserEventSpecifics_UserConsent::account_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.account_id)
  return account_id_.GetNoArena();
}
inline void UserEventSpecifics_UserConsent::set_account_id(const ::std::string& value) {
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
#if LANG_CXX11
inline void UserEventSpecifics_UserConsent::set_account_id(::std::string&& value) {
  set_has_account_id();
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
#endif
inline void UserEventSpecifics_UserConsent::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
inline void UserEventSpecifics_UserConsent::set_account_id(const char* value, size_t size) {
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
inline ::std::string* UserEventSpecifics_UserConsent::mutable_account_id() {
  set_has_account_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserEventSpecifics_UserConsent::release_account_id() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.account_id)
  clear_has_account_id();
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_UserConsent::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.account_id)
}

// optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
inline bool UserEventSpecifics_UserConsent::has_feature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEventSpecifics_UserConsent::set_has_feature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserEventSpecifics_UserConsent::clear_has_feature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserEventSpecifics_UserConsent::clear_feature() {
  feature_ = 0;
  clear_has_feature();
}
inline ::sync_pb::UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::feature() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.feature)
  return static_cast< ::sync_pb::UserEventSpecifics_UserConsent_Feature >(feature_);
}
inline void UserEventSpecifics_UserConsent::set_feature(::sync_pb::UserEventSpecifics_UserConsent_Feature value) {
  assert(::sync_pb::UserEventSpecifics_UserConsent_Feature_IsValid(value));
  set_has_feature();
  feature_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.feature)
}

// repeated int32 description_grd_ids = 2 [deprecated = true];
inline int UserEventSpecifics_UserConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserEventSpecifics_UserConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::google::protobuf::int32 UserEventSpecifics_UserConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserEventSpecifics_UserConsent::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
}
inline void UserEventSpecifics_UserConsent::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserEventSpecifics_UserConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserEventSpecifics_UserConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 3 [deprecated = true];
inline bool UserEventSpecifics_UserConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserEventSpecifics_UserConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserEventSpecifics_UserConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserEventSpecifics_UserConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
inline ::google::protobuf::int32 UserEventSpecifics_UserConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserEventSpecifics_UserConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
inline bool UserEventSpecifics_UserConsent::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserEventSpecifics_UserConsent::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserEventSpecifics_UserConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserEventSpecifics_UserConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserEventSpecifics_UserConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserEventSpecifics_UserConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.status)
}

inline bool UserEventSpecifics_UserConsent::has_consent() const {
  return consent_case() != CONSENT_NOT_SET;
}
inline void UserEventSpecifics_UserConsent::clear_has_consent() {
  _oneof_case_[0] = CONSENT_NOT_SET;
}
inline UserEventSpecifics_UserConsent::ConsentCase UserEventSpecifics_UserConsent::consent_case() const {
  return UserEventSpecifics_UserConsent::ConsentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus

// optional bool enabled = 1;
inline bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.enabled)
  return enabled_;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.enabled)
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
inline bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::has_safe_browsing_reporting_population() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::set_has_safe_browsing_reporting_population() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::clear_has_safe_browsing_reporting_population() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::clear_safe_browsing_reporting_population() {
  safe_browsing_reporting_population_ = 0;
  clear_has_safe_browsing_reporting_population();
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::safe_browsing_reporting_population() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.safe_browsing_reporting_population)
  return static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation >(safe_browsing_reporting_population_);
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::set_safe_browsing_reporting_population(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation value) {
  assert(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(value));
  set_has_safe_browsing_reporting_population();
  safe_browsing_reporting_population_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.safe_browsing_reporting_population)
}

// -------------------------------------------------------------------

// UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
inline bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::clear_status() {
  if (status_ != NULL) status_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::Clear();
  clear_has_status();
}
inline const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.status)
  return status_ != NULL ? *status_
                         : *::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::internal_default_instance();
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.status)
  return status_;
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::release_status() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.status)
  clear_has_status();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::set_allocated_status(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.status)
}

// -------------------------------------------------------------------

// UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
inline bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::has_lookup_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_has_lookup_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_has_lookup_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_lookup_result() {
  lookup_result_ = 0;
  clear_has_lookup_result();
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::lookup_result() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.lookup_result)
  return static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult >(lookup_result_);
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_lookup_result(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult value) {
  assert(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(value));
  set_has_lookup_result();
  lookup_result_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.lookup_result)
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
inline bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::has_verdict() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_has_verdict() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_has_verdict() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_verdict() {
  verdict_ = 0;
  clear_has_verdict();
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::verdict() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict)
  return static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict >(verdict_);
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_verdict(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict value) {
  assert(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(value));
  set_has_verdict();
  verdict_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict)
}

// optional bytes verdict_token = 3;
inline bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::has_verdict_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_has_verdict_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_has_verdict_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_verdict_token() {
  verdict_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verdict_token();
}
inline const ::std::string& UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::verdict_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
  return verdict_token_.GetNoArena();
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(const ::std::string& value) {
  set_has_verdict_token();
  verdict_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
#if LANG_CXX11
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(::std::string&& value) {
  set_has_verdict_token();
  verdict_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
#endif
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verdict_token();
  verdict_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(const void* value, size_t size) {
  set_has_verdict_token();
  verdict_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
inline ::std::string* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::mutable_verdict_token() {
  set_has_verdict_token();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
  return verdict_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::release_verdict_token() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
  clear_has_verdict_token();
  return verdict_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_allocated_verdict_token(::std::string* verdict_token) {
  if (verdict_token != NULL) {
    set_has_verdict_token();
  } else {
    clear_has_verdict_token();
  }
  verdict_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verdict_token);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}

// -------------------------------------------------------------------

// UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
inline bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::has_interaction_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::set_has_interaction_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::clear_has_interaction_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::clear_interaction_result() {
  interaction_result_ = 0;
  clear_has_interaction_result();
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::interaction_result() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction.interaction_result)
  return static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult >(interaction_result_);
}
inline void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::set_interaction_result(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult value) {
  assert(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(value));
  set_has_interaction_result();
  interaction_result_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction.interaction_result)
}

// -------------------------------------------------------------------

// UserEventSpecifics_GaiaPasswordReuse

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
inline bool UserEventSpecifics_GaiaPasswordReuse::has_reuse_detected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordReuse::set_has_reuse_detected() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventSpecifics_GaiaPasswordReuse::clear_has_reuse_detected() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventSpecifics_GaiaPasswordReuse::clear_reuse_detected() {
  if (reuse_detected_ != NULL) reuse_detected_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::Clear();
  clear_has_reuse_detected();
}
inline const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& UserEventSpecifics_GaiaPasswordReuse::reuse_detected() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_detected)
  return reuse_detected_ != NULL ? *reuse_detected_
                         : *::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::internal_default_instance();
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* UserEventSpecifics_GaiaPasswordReuse::mutable_reuse_detected() {
  set_has_reuse_detected();
  if (reuse_detected_ == NULL) {
    reuse_detected_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_detected)
  return reuse_detected_;
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* UserEventSpecifics_GaiaPasswordReuse::release_reuse_detected() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_detected)
  clear_has_reuse_detected();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* temp = reuse_detected_;
  reuse_detected_ = NULL;
  return temp;
}
inline void UserEventSpecifics_GaiaPasswordReuse::set_allocated_reuse_detected(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* reuse_detected) {
  delete reuse_detected_;
  reuse_detected_ = reuse_detected;
  if (reuse_detected) {
    set_has_reuse_detected();
  } else {
    clear_has_reuse_detected();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_detected)
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
inline bool UserEventSpecifics_GaiaPasswordReuse::has_reuse_lookup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordReuse::set_has_reuse_lookup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEventSpecifics_GaiaPasswordReuse::clear_has_reuse_lookup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEventSpecifics_GaiaPasswordReuse::clear_reuse_lookup() {
  if (reuse_lookup_ != NULL) reuse_lookup_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::Clear();
  clear_has_reuse_lookup();
}
inline const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& UserEventSpecifics_GaiaPasswordReuse::reuse_lookup() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_lookup)
  return reuse_lookup_ != NULL ? *reuse_lookup_
                         : *::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::internal_default_instance();
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* UserEventSpecifics_GaiaPasswordReuse::mutable_reuse_lookup() {
  set_has_reuse_lookup();
  if (reuse_lookup_ == NULL) {
    reuse_lookup_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_lookup)
  return reuse_lookup_;
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* UserEventSpecifics_GaiaPasswordReuse::release_reuse_lookup() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_lookup)
  clear_has_reuse_lookup();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* temp = reuse_lookup_;
  reuse_lookup_ = NULL;
  return temp;
}
inline void UserEventSpecifics_GaiaPasswordReuse::set_allocated_reuse_lookup(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* reuse_lookup) {
  delete reuse_lookup_;
  reuse_lookup_ = reuse_lookup;
  if (reuse_lookup) {
    set_has_reuse_lookup();
  } else {
    clear_has_reuse_lookup();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_lookup)
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
inline bool UserEventSpecifics_GaiaPasswordReuse::has_dialog_interaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordReuse::set_has_dialog_interaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserEventSpecifics_GaiaPasswordReuse::clear_has_dialog_interaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserEventSpecifics_GaiaPasswordReuse::clear_dialog_interaction() {
  if (dialog_interaction_ != NULL) dialog_interaction_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::Clear();
  clear_has_dialog_interaction();
}
inline const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& UserEventSpecifics_GaiaPasswordReuse::dialog_interaction() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.dialog_interaction)
  return dialog_interaction_ != NULL ? *dialog_interaction_
                         : *::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::internal_default_instance();
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* UserEventSpecifics_GaiaPasswordReuse::mutable_dialog_interaction() {
  set_has_dialog_interaction();
  if (dialog_interaction_ == NULL) {
    dialog_interaction_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.GaiaPasswordReuse.dialog_interaction)
  return dialog_interaction_;
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* UserEventSpecifics_GaiaPasswordReuse::release_dialog_interaction() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.GaiaPasswordReuse.dialog_interaction)
  clear_has_dialog_interaction();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* temp = dialog_interaction_;
  dialog_interaction_ = NULL;
  return temp;
}
inline void UserEventSpecifics_GaiaPasswordReuse::set_allocated_dialog_interaction(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* dialog_interaction) {
  delete dialog_interaction_;
  dialog_interaction_ = dialog_interaction;
  if (dialog_interaction) {
    set_has_dialog_interaction();
  } else {
    clear_has_dialog_interaction();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.GaiaPasswordReuse.dialog_interaction)
}

// -------------------------------------------------------------------

// UserEventSpecifics

// optional int64 event_time_usec = 1;
inline bool UserEventSpecifics::has_event_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics::set_has_event_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEventSpecifics::clear_has_event_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEventSpecifics::clear_event_time_usec() {
  event_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_event_time_usec();
}
inline ::google::protobuf::int64 UserEventSpecifics::event_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.event_time_usec)
  return event_time_usec_;
}
inline void UserEventSpecifics::set_event_time_usec(::google::protobuf::int64 value) {
  set_has_event_time_usec();
  event_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.event_time_usec)
}

// optional int64 navigation_id = 2;
inline bool UserEventSpecifics::has_navigation_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics::set_has_navigation_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserEventSpecifics::clear_has_navigation_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserEventSpecifics::clear_navigation_id() {
  navigation_id_ = GOOGLE_LONGLONG(0);
  clear_has_navigation_id();
}
inline ::google::protobuf::int64 UserEventSpecifics::navigation_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.navigation_id)
  return navigation_id_;
}
inline void UserEventSpecifics::set_navigation_id(::google::protobuf::int64 value) {
  set_has_navigation_id();
  navigation_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.navigation_id)
}

// optional fixed64 session_id = 3;
inline bool UserEventSpecifics::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEventSpecifics::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserEventSpecifics::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserEventSpecifics::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_session_id();
}
inline ::google::protobuf::uint64 UserEventSpecifics::session_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.session_id)
  return session_id_;
}
inline void UserEventSpecifics::set_session_id(::google::protobuf::uint64 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.session_id)
}

// optional .sync_pb.UserEventSpecifics.Test test_event = 8;
inline bool UserEventSpecifics::has_test_event() const {
  return event_case() == kTestEvent;
}
inline void UserEventSpecifics::set_has_test_event() {
  _oneof_case_[0] = kTestEvent;
}
inline void UserEventSpecifics::clear_test_event() {
  if (has_test_event()) {
    delete event_.test_event_;
    clear_has_event();
  }
}
inline  const ::sync_pb::UserEventSpecifics_Test& UserEventSpecifics::test_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.test_event)
  return has_test_event()
      ? *event_.test_event_
      : ::sync_pb::UserEventSpecifics_Test::default_instance();
}
inline ::sync_pb::UserEventSpecifics_Test* UserEventSpecifics::mutable_test_event() {
  if (!has_test_event()) {
    clear_event();
    set_has_test_event();
    event_.test_event_ = new ::sync_pb::UserEventSpecifics_Test;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.test_event)
  return event_.test_event_;
}
inline ::sync_pb::UserEventSpecifics_Test* UserEventSpecifics::release_test_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.test_event)
  if (has_test_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_Test* temp = event_.test_event_;
    event_.test_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics::set_allocated_test_event(::sync_pb::UserEventSpecifics_Test* test_event) {
  clear_event();
  if (test_event) {
    set_has_test_event();
    event_.test_event_ = test_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.test_event)
}

// optional .sync_pb.UserEventSpecifics.FieldTrial field_trial_event = 9;
inline bool UserEventSpecifics::has_field_trial_event() const {
  return event_case() == kFieldTrialEvent;
}
inline void UserEventSpecifics::set_has_field_trial_event() {
  _oneof_case_[0] = kFieldTrialEvent;
}
inline void UserEventSpecifics::clear_field_trial_event() {
  if (has_field_trial_event()) {
    delete event_.field_trial_event_;
    clear_has_event();
  }
}
inline  const ::sync_pb::UserEventSpecifics_FieldTrial& UserEventSpecifics::field_trial_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.field_trial_event)
  return has_field_trial_event()
      ? *event_.field_trial_event_
      : ::sync_pb::UserEventSpecifics_FieldTrial::default_instance();
}
inline ::sync_pb::UserEventSpecifics_FieldTrial* UserEventSpecifics::mutable_field_trial_event() {
  if (!has_field_trial_event()) {
    clear_event();
    set_has_field_trial_event();
    event_.field_trial_event_ = new ::sync_pb::UserEventSpecifics_FieldTrial;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.field_trial_event)
  return event_.field_trial_event_;
}
inline ::sync_pb::UserEventSpecifics_FieldTrial* UserEventSpecifics::release_field_trial_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.field_trial_event)
  if (has_field_trial_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_FieldTrial* temp = event_.field_trial_event_;
    event_.field_trial_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics::set_allocated_field_trial_event(::sync_pb::UserEventSpecifics_FieldTrial* field_trial_event) {
  clear_event();
  if (field_trial_event) {
    set_has_field_trial_event();
    event_.field_trial_event_ = field_trial_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.field_trial_event)
}

// optional .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10;
inline bool UserEventSpecifics::has_language_detection_event() const {
  return event_case() == kLanguageDetectionEvent;
}
inline void UserEventSpecifics::set_has_language_detection_event() {
  _oneof_case_[0] = kLanguageDetectionEvent;
}
inline void UserEventSpecifics::clear_language_detection_event() {
  if (has_language_detection_event()) {
    delete event_.language_detection_event_;
    clear_has_event();
  }
}
inline  const ::sync_pb::UserEventSpecifics_LanguageDetection& UserEventSpecifics::language_detection_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.language_detection_event)
  return has_language_detection_event()
      ? *event_.language_detection_event_
      : ::sync_pb::UserEventSpecifics_LanguageDetection::default_instance();
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection* UserEventSpecifics::mutable_language_detection_event() {
  if (!has_language_detection_event()) {
    clear_event();
    set_has_language_detection_event();
    event_.language_detection_event_ = new ::sync_pb::UserEventSpecifics_LanguageDetection;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.language_detection_event)
  return event_.language_detection_event_;
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection* UserEventSpecifics::release_language_detection_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.language_detection_event)
  if (has_language_detection_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_LanguageDetection* temp = event_.language_detection_event_;
    event_.language_detection_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics::set_allocated_language_detection_event(::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event) {
  clear_event();
  if (language_detection_event) {
    set_has_language_detection_event();
    event_.language_detection_event_ = language_detection_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.language_detection_event)
}

// optional .sync_pb.UserEventSpecifics.Translation translation_event = 11;
inline bool UserEventSpecifics::has_translation_event() const {
  return event_case() == kTranslationEvent;
}
inline void UserEventSpecifics::set_has_translation_event() {
  _oneof_case_[0] = kTranslationEvent;
}
inline void UserEventSpecifics::clear_translation_event() {
  if (has_translation_event()) {
    delete event_.translation_event_;
    clear_has_event();
  }
}
inline  const ::sync_pb::UserEventSpecifics_Translation& UserEventSpecifics::translation_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.translation_event)
  return has_translation_event()
      ? *event_.translation_event_
      : ::sync_pb::UserEventSpecifics_Translation::default_instance();
}
inline ::sync_pb::UserEventSpecifics_Translation* UserEventSpecifics::mutable_translation_event() {
  if (!has_translation_event()) {
    clear_event();
    set_has_translation_event();
    event_.translation_event_ = new ::sync_pb::UserEventSpecifics_Translation;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.translation_event)
  return event_.translation_event_;
}
inline ::sync_pb::UserEventSpecifics_Translation* UserEventSpecifics::release_translation_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.translation_event)
  if (has_translation_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_Translation* temp = event_.translation_event_;
    event_.translation_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics::set_allocated_translation_event(::sync_pb::UserEventSpecifics_Translation* translation_event) {
  clear_event();
  if (translation_event) {
    set_has_translation_event();
    event_.translation_event_ = translation_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.translation_event)
}

// optional .sync_pb.UserEventSpecifics.UserConsent user_consent = 12;
inline bool UserEventSpecifics::has_user_consent() const {
  return event_case() == kUserConsent;
}
inline void UserEventSpecifics::set_has_user_consent() {
  _oneof_case_[0] = kUserConsent;
}
inline void UserEventSpecifics::clear_user_consent() {
  if (has_user_consent()) {
    delete event_.user_consent_;
    clear_has_event();
  }
}
inline  const ::sync_pb::UserEventSpecifics_UserConsent& UserEventSpecifics::user_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.user_consent)
  return has_user_consent()
      ? *event_.user_consent_
      : ::sync_pb::UserEventSpecifics_UserConsent::default_instance();
}
inline ::sync_pb::UserEventSpecifics_UserConsent* UserEventSpecifics::mutable_user_consent() {
  if (!has_user_consent()) {
    clear_event();
    set_has_user_consent();
    event_.user_consent_ = new ::sync_pb::UserEventSpecifics_UserConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.user_consent)
  return event_.user_consent_;
}
inline ::sync_pb::UserEventSpecifics_UserConsent* UserEventSpecifics::release_user_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.user_consent)
  if (has_user_consent()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_UserConsent* temp = event_.user_consent_;
    event_.user_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics::set_allocated_user_consent(::sync_pb::UserEventSpecifics_UserConsent* user_consent) {
  clear_event();
  if (user_consent) {
    set_has_user_consent();
    event_.user_consent_ = user_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.user_consent)
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse gaia_password_reuse_event = 104;
inline bool UserEventSpecifics::has_gaia_password_reuse_event() const {
  return event_case() == kGaiaPasswordReuseEvent;
}
inline void UserEventSpecifics::set_has_gaia_password_reuse_event() {
  _oneof_case_[0] = kGaiaPasswordReuseEvent;
}
inline void UserEventSpecifics::clear_gaia_password_reuse_event() {
  if (has_gaia_password_reuse_event()) {
    delete event_.gaia_password_reuse_event_;
    clear_has_event();
  }
}
inline  const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse& UserEventSpecifics::gaia_password_reuse_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  return has_gaia_password_reuse_event()
      ? *event_.gaia_password_reuse_event_
      : ::sync_pb::UserEventSpecifics_GaiaPasswordReuse::default_instance();
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse* UserEventSpecifics::mutable_gaia_password_reuse_event() {
  if (!has_gaia_password_reuse_event()) {
    clear_event();
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  return event_.gaia_password_reuse_event_;
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordReuse* UserEventSpecifics::release_gaia_password_reuse_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  if (has_gaia_password_reuse_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_GaiaPasswordReuse* temp = event_.gaia_password_reuse_event_;
    event_.gaia_password_reuse_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UserEventSpecifics::set_allocated_gaia_password_reuse_event(::sync_pb::UserEventSpecifics_GaiaPasswordReuse* gaia_password_reuse_event) {
  clear_event();
  if (gaia_password_reuse_event) {
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = gaia_password_reuse_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
}

inline bool UserEventSpecifics::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void UserEventSpecifics::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline UserEventSpecifics::EventCase UserEventSpecifics::event_case() const {
  return UserEventSpecifics::EventCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace sync_pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_Translation_Interaction> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_UserConsent_Feature> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5fevent_5fspecifics_2eproto__INCLUDED
