// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class ProfilingDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProfilingData> {
} _ProfilingData_default_instance_;
class EntitySpecificsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EntitySpecifics> {
} _EntitySpecifics_default_instance_;
class SyncEntity_BookmarkDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncEntity_BookmarkData> {
} _SyncEntity_BookmarkData_default_instance_;
class SyncEntityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncEntity> {
} _SyncEntity_default_instance_;
class ChromiumExtensionsActivityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChromiumExtensionsActivity> {
} _ChromiumExtensionsActivity_default_instance_;
class ClientConfigParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientConfigParams> {
} _ClientConfigParams_default_instance_;
class CommitMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitMessage> {
} _CommitMessage_default_instance_;
class GetUpdateTriggersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUpdateTriggers> {
} _GetUpdateTriggers_default_instance_;
class GarbageCollectionDirectiveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GarbageCollectionDirective> {
} _GarbageCollectionDirective_default_instance_;
class DataTypeProgressMarkerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataTypeProgressMarker> {
} _DataTypeProgressMarker_default_instance_;
class GetUpdatesMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUpdatesMessage> {
} _GetUpdatesMessage_default_instance_;
class AuthenticateMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateMessage> {
} _AuthenticateMessage_default_instance_;
class ClearServerDataMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClearServerDataMessage> {
} _ClearServerDataMessage_default_instance_;
class ClearServerDataResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClearServerDataResponse> {
} _ClearServerDataResponse_default_instance_;
class ChipBagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChipBag> {
} _ChipBag_default_instance_;
class ClientStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientStatus> {
} _ClientStatus_default_instance_;
class DataTypeContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataTypeContext> {
} _DataTypeContext_default_instance_;
class ClientToServerMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientToServerMessage> {
} _ClientToServerMessage_default_instance_;
class GetCrashInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCrashInfoRequest> {
} _GetCrashInfoRequest_default_instance_;
class GetCrashInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCrashInfoResponse> {
} _GetCrashInfoResponse_default_instance_;
class CommitResponse_EntryResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitResponse_EntryResponse> {
} _CommitResponse_EntryResponse_default_instance_;
class CommitResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitResponse> {
} _CommitResponse_default_instance_;
class GetUpdatesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUpdatesResponse> {
} _GetUpdatesResponse_default_instance_;
class GetUpdatesMetadataResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUpdatesMetadataResponse> {
} _GetUpdatesMetadataResponse_default_instance_;
class GetUpdatesStreamingResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUpdatesStreamingResponse> {
} _GetUpdatesStreamingResponse_default_instance_;
class UserIdentificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserIdentification> {
} _UserIdentification_default_instance_;
class AuthenticateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse> {
} _AuthenticateResponse_default_instance_;
class ClientToServerResponse_ErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientToServerResponse_Error> {
} _ClientToServerResponse_Error_default_instance_;
class ClientToServerResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientToServerResponse> {
} _ClientToServerResponse_default_instance_;
class EventRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EventRequest> {
} _EventRequest_default_instance_;
class EventResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EventResponse> {
} _EventResponse_default_instance_;
class SyncDisabledEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncDisabledEvent> {
} _SyncDisabledEvent_default_instance_;

namespace protobuf_sync_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ProfilingData_default_instance_.Shutdown();
  _EntitySpecifics_default_instance_.Shutdown();
  _SyncEntity_BookmarkData_default_instance_.Shutdown();
  _SyncEntity_default_instance_.Shutdown();
  _ChromiumExtensionsActivity_default_instance_.Shutdown();
  _ClientConfigParams_default_instance_.Shutdown();
  _CommitMessage_default_instance_.Shutdown();
  _GetUpdateTriggers_default_instance_.Shutdown();
  _GarbageCollectionDirective_default_instance_.Shutdown();
  _DataTypeProgressMarker_default_instance_.Shutdown();
  _GetUpdatesMessage_default_instance_.Shutdown();
  _AuthenticateMessage_default_instance_.Shutdown();
  _ClearServerDataMessage_default_instance_.Shutdown();
  _ClearServerDataResponse_default_instance_.Shutdown();
  _ChipBag_default_instance_.Shutdown();
  _ClientStatus_default_instance_.Shutdown();
  _DataTypeContext_default_instance_.Shutdown();
  _ClientToServerMessage_default_instance_.Shutdown();
  _GetCrashInfoRequest_default_instance_.Shutdown();
  _GetCrashInfoResponse_default_instance_.Shutdown();
  _CommitResponse_EntryResponse_default_instance_.Shutdown();
  _CommitResponse_default_instance_.Shutdown();
  _GetUpdatesResponse_default_instance_.Shutdown();
  _GetUpdatesMetadataResponse_default_instance_.Shutdown();
  _GetUpdatesStreamingResponse_default_instance_.Shutdown();
  _UserIdentification_default_instance_.Shutdown();
  _AuthenticateResponse_default_instance_.Shutdown();
  _ClientToServerResponse_Error_default_instance_.Shutdown();
  _ClientToServerResponse_default_instance_.Shutdown();
  _EventRequest_default_instance_.Shutdown();
  _EventResponse_default_instance_.Shutdown();
  _SyncDisabledEvent_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sync_pb::protobuf_app_5flist_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_app_5fnotification_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_app_5fsetting_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_app_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_arc_5fpackage_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_article_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_autofill_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_bookmark_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_client_5fcommands_2eproto::InitDefaults();
  ::sync_pb::protobuf_client_5fdebug_5finfo_2eproto::InitDefaults();
  ::sync_pb::protobuf_device_5finfo_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_dictionary_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_encryption_2eproto::InitDefaults();
  ::sync_pb::protobuf_experiments_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_extension_5fsetting_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_extension_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_favicon_5fimage_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_favicon_5ftracking_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_get_5fupdates_5fcaller_5finfo_2eproto::InitDefaults();
  ::sync_pb::protobuf_history_5fdelete_5fdirective_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_managed_5fuser_5fsetting_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_managed_5fuser_5fshared_5fsetting_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_managed_5fuser_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_managed_5fuser_5fwhitelist_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_mountain_5fshare_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_nigori_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_password_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_preference_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_printer_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_priority_5fpreference_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_reading_5flist_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_search_5fengine_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_session_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_sync_5fenums_2eproto::InitDefaults();
  ::sync_pb::protobuf_synced_5fnotification_5fapp_5finfo_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_synced_5fnotification_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_theme_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_typed_5furl_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_unique_5fposition_2eproto::InitDefaults();
  ::sync_pb::protobuf_user_5fconsent_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  ::sync_pb::protobuf_wifi_5fcredential_5fspecifics_2eproto::InitDefaults();
  _ProfilingData_default_instance_.DefaultConstruct();
  _EntitySpecifics_default_instance_.DefaultConstruct();
  _SyncEntity_BookmarkData_default_instance_.DefaultConstruct();
  _SyncEntity_default_instance_.DefaultConstruct();
  _ChromiumExtensionsActivity_default_instance_.DefaultConstruct();
  _ClientConfigParams_default_instance_.DefaultConstruct();
  _CommitMessage_default_instance_.DefaultConstruct();
  _GetUpdateTriggers_default_instance_.DefaultConstruct();
  _GarbageCollectionDirective_default_instance_.DefaultConstruct();
  _DataTypeProgressMarker_default_instance_.DefaultConstruct();
  _GetUpdatesMessage_default_instance_.DefaultConstruct();
  _AuthenticateMessage_default_instance_.DefaultConstruct();
  _ClearServerDataMessage_default_instance_.DefaultConstruct();
  _ClearServerDataResponse_default_instance_.DefaultConstruct();
  _ChipBag_default_instance_.DefaultConstruct();
  _ClientStatus_default_instance_.DefaultConstruct();
  _DataTypeContext_default_instance_.DefaultConstruct();
  _ClientToServerMessage_default_instance_.DefaultConstruct();
  _GetCrashInfoRequest_default_instance_.DefaultConstruct();
  _GetCrashInfoResponse_default_instance_.DefaultConstruct();
  _CommitResponse_EntryResponse_default_instance_.DefaultConstruct();
  _CommitResponse_default_instance_.DefaultConstruct();
  _GetUpdatesResponse_default_instance_.DefaultConstruct();
  _GetUpdatesMetadataResponse_default_instance_.DefaultConstruct();
  _GetUpdatesStreamingResponse_default_instance_.DefaultConstruct();
  _UserIdentification_default_instance_.DefaultConstruct();
  _AuthenticateResponse_default_instance_.DefaultConstruct();
  _ClientToServerResponse_Error_default_instance_.DefaultConstruct();
  _ClientToServerResponse_default_instance_.DefaultConstruct();
  _EventRequest_default_instance_.DefaultConstruct();
  _EventResponse_default_instance_.DefaultConstruct();
  _SyncDisabledEvent_default_instance_.DefaultConstruct();
  _EntitySpecifics_default_instance_.get_mutable()->encrypted_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->autofill_ = const_cast< ::sync_pb::AutofillSpecifics*>(
      ::sync_pb::AutofillSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->bookmark_ = const_cast< ::sync_pb::BookmarkSpecifics*>(
      ::sync_pb::BookmarkSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->preference_ = const_cast< ::sync_pb::PreferenceSpecifics*>(
      ::sync_pb::PreferenceSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->typed_url_ = const_cast< ::sync_pb::TypedUrlSpecifics*>(
      ::sync_pb::TypedUrlSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->theme_ = const_cast< ::sync_pb::ThemeSpecifics*>(
      ::sync_pb::ThemeSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->app_notification_ = const_cast< ::sync_pb::AppNotification*>(
      ::sync_pb::AppNotification::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->password_ = const_cast< ::sync_pb::PasswordSpecifics*>(
      ::sync_pb::PasswordSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->nigori_ = const_cast< ::sync_pb::NigoriSpecifics*>(
      ::sync_pb::NigoriSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->extension_ = const_cast< ::sync_pb::ExtensionSpecifics*>(
      ::sync_pb::ExtensionSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->app_ = const_cast< ::sync_pb::AppSpecifics*>(
      ::sync_pb::AppSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->session_ = const_cast< ::sync_pb::SessionSpecifics*>(
      ::sync_pb::SessionSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->autofill_profile_ = const_cast< ::sync_pb::AutofillProfileSpecifics*>(
      ::sync_pb::AutofillProfileSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->search_engine_ = const_cast< ::sync_pb::SearchEngineSpecifics*>(
      ::sync_pb::SearchEngineSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->extension_setting_ = const_cast< ::sync_pb::ExtensionSettingSpecifics*>(
      ::sync_pb::ExtensionSettingSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->app_setting_ = const_cast< ::sync_pb::AppSettingSpecifics*>(
      ::sync_pb::AppSettingSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->history_delete_directive_ = const_cast< ::sync_pb::HistoryDeleteDirectiveSpecifics*>(
      ::sync_pb::HistoryDeleteDirectiveSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->synced_notification_ = const_cast< ::sync_pb::SyncedNotificationSpecifics*>(
      ::sync_pb::SyncedNotificationSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->synced_notification_app_info_ = const_cast< ::sync_pb::SyncedNotificationAppInfoSpecifics*>(
      ::sync_pb::SyncedNotificationAppInfoSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->device_info_ = const_cast< ::sync_pb::DeviceInfoSpecifics*>(
      ::sync_pb::DeviceInfoSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->experiments_ = const_cast< ::sync_pb::ExperimentsSpecifics*>(
      ::sync_pb::ExperimentsSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->priority_preference_ = const_cast< ::sync_pb::PriorityPreferenceSpecifics*>(
      ::sync_pb::PriorityPreferenceSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->dictionary_ = const_cast< ::sync_pb::DictionarySpecifics*>(
      ::sync_pb::DictionarySpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->favicon_tracking_ = const_cast< ::sync_pb::FaviconTrackingSpecifics*>(
      ::sync_pb::FaviconTrackingSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->favicon_image_ = const_cast< ::sync_pb::FaviconImageSpecifics*>(
      ::sync_pb::FaviconImageSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->managed_user_setting_ = const_cast< ::sync_pb::ManagedUserSettingSpecifics*>(
      ::sync_pb::ManagedUserSettingSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->managed_user_ = const_cast< ::sync_pb::ManagedUserSpecifics*>(
      ::sync_pb::ManagedUserSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->managed_user_shared_setting_ = const_cast< ::sync_pb::ManagedUserSharedSettingSpecifics*>(
      ::sync_pb::ManagedUserSharedSettingSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->managed_user_whitelist_ = const_cast< ::sync_pb::ManagedUserWhitelistSpecifics*>(
      ::sync_pb::ManagedUserWhitelistSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->article_ = const_cast< ::sync_pb::ArticleSpecifics*>(
      ::sync_pb::ArticleSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->app_list_ = const_cast< ::sync_pb::AppListSpecifics*>(
      ::sync_pb::AppListSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->wifi_credential_ = const_cast< ::sync_pb::WifiCredentialSpecifics*>(
      ::sync_pb::WifiCredentialSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->autofill_wallet_ = const_cast< ::sync_pb::AutofillWalletSpecifics*>(
      ::sync_pb::AutofillWalletSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->wallet_metadata_ = const_cast< ::sync_pb::WalletMetadataSpecifics*>(
      ::sync_pb::WalletMetadataSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->arc_package_ = const_cast< ::sync_pb::ArcPackageSpecifics*>(
      ::sync_pb::ArcPackageSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->printer_ = const_cast< ::sync_pb::PrinterSpecifics*>(
      ::sync_pb::PrinterSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->reading_list_ = const_cast< ::sync_pb::ReadingListSpecifics*>(
      ::sync_pb::ReadingListSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->user_event_ = const_cast< ::sync_pb::UserEventSpecifics*>(
      ::sync_pb::UserEventSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->user_consent_ = const_cast< ::sync_pb::UserConsentSpecifics*>(
      ::sync_pb::UserConsentSpecifics::internal_default_instance());
  _EntitySpecifics_default_instance_.get_mutable()->mountain_share_ = const_cast< ::sync_pb::MountainShareSpecifics*>(
      ::sync_pb::MountainShareSpecifics::internal_default_instance());
  _SyncEntity_default_instance_.get_mutable()->bookmarkdata_ = const_cast< ::sync_pb::SyncEntity_BookmarkData*>(
      ::sync_pb::SyncEntity_BookmarkData::internal_default_instance());
  _SyncEntity_default_instance_.get_mutable()->specifics_ = const_cast< ::sync_pb::EntitySpecifics*>(
      ::sync_pb::EntitySpecifics::internal_default_instance());
  _SyncEntity_default_instance_.get_mutable()->unique_position_ = const_cast< ::sync_pb::UniquePosition*>(
      ::sync_pb::UniquePosition::internal_default_instance());
  _CommitMessage_default_instance_.get_mutable()->config_params_ = const_cast< ::sync_pb::ClientConfigParams*>(
      ::sync_pb::ClientConfigParams::internal_default_instance());
  _DataTypeProgressMarker_default_instance_.get_mutable()->get_update_triggers_ = const_cast< ::sync_pb::GetUpdateTriggers*>(
      ::sync_pb::GetUpdateTriggers::internal_default_instance());
  _DataTypeProgressMarker_default_instance_.get_mutable()->gc_directive_ = const_cast< ::sync_pb::GarbageCollectionDirective*>(
      ::sync_pb::GarbageCollectionDirective::internal_default_instance());
  _GetUpdatesMessage_default_instance_.get_mutable()->caller_info_ = const_cast< ::sync_pb::GetUpdatesCallerInfo*>(
      ::sync_pb::GetUpdatesCallerInfo::internal_default_instance());
  _GetUpdatesMessage_default_instance_.get_mutable()->requested_types_ = const_cast< ::sync_pb::EntitySpecifics*>(
      ::sync_pb::EntitySpecifics::internal_default_instance());
  _ClientToServerMessage_default_instance_.get_mutable()->commit_ = const_cast< ::sync_pb::CommitMessage*>(
      ::sync_pb::CommitMessage::internal_default_instance());
  _ClientToServerMessage_default_instance_.get_mutable()->get_updates_ = const_cast< ::sync_pb::GetUpdatesMessage*>(
      ::sync_pb::GetUpdatesMessage::internal_default_instance());
  _ClientToServerMessage_default_instance_.get_mutable()->authenticate_ = const_cast< ::sync_pb::AuthenticateMessage*>(
      ::sync_pb::AuthenticateMessage::internal_default_instance());
  _ClientToServerMessage_default_instance_.get_mutable()->deprecated_field_9_ = const_cast< ::sync_pb::DeprecatedMessage*>(
      ::sync_pb::DeprecatedMessage::internal_default_instance());
  _ClientToServerMessage_default_instance_.get_mutable()->debug_info_ = const_cast< ::sync_pb::DebugInfo*>(
      ::sync_pb::DebugInfo::internal_default_instance());
  _ClientToServerMessage_default_instance_.get_mutable()->bag_of_chips_ = const_cast< ::sync_pb::ChipBag*>(
      ::sync_pb::ChipBag::internal_default_instance());
  _ClientToServerMessage_default_instance_.get_mutable()->client_status_ = const_cast< ::sync_pb::ClientStatus*>(
      ::sync_pb::ClientStatus::internal_default_instance());
  _ClientToServerMessage_default_instance_.get_mutable()->clear_server_data_ = const_cast< ::sync_pb::ClearServerDataMessage*>(
      ::sync_pb::ClearServerDataMessage::internal_default_instance());
  _AuthenticateResponse_default_instance_.get_mutable()->user_ = const_cast< ::sync_pb::UserIdentification*>(
      ::sync_pb::UserIdentification::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->commit_ = const_cast< ::sync_pb::CommitResponse*>(
      ::sync_pb::CommitResponse::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->get_updates_ = const_cast< ::sync_pb::GetUpdatesResponse*>(
      ::sync_pb::GetUpdatesResponse::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->authenticate_ = const_cast< ::sync_pb::AuthenticateResponse*>(
      ::sync_pb::AuthenticateResponse::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->client_command_ = const_cast< ::sync_pb::ClientCommand*>(
      ::sync_pb::ClientCommand::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->profiling_data_ = const_cast< ::sync_pb::ProfilingData*>(
      ::sync_pb::ProfilingData::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->deprecated_field_9_ = const_cast< ::sync_pb::DeprecatedMessage*>(
      ::sync_pb::DeprecatedMessage::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->stream_metadata_ = const_cast< ::sync_pb::GetUpdatesMetadataResponse*>(
      ::sync_pb::GetUpdatesMetadataResponse::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->stream_data_ = const_cast< ::sync_pb::GetUpdatesStreamingResponse*>(
      ::sync_pb::GetUpdatesStreamingResponse::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->error_ = const_cast< ::sync_pb::ClientToServerResponse_Error*>(
      ::sync_pb::ClientToServerResponse_Error::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->new_bag_of_chips_ = const_cast< ::sync_pb::ChipBag*>(
      ::sync_pb::ChipBag::internal_default_instance());
  _ClientToServerResponse_default_instance_.get_mutable()->clear_server_data_ = const_cast< ::sync_pb::ClearServerDataResponse*>(
      ::sync_pb::ClearServerDataResponse::internal_default_instance());
  _EventRequest_default_instance_.get_mutable()->sync_disabled_ = const_cast< ::sync_pb::SyncDisabledEvent*>(
      ::sync_pb::SyncDisabledEvent::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::sync_pb::protobuf_app_5flist_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_app_5fnotification_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_app_5fsetting_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_app_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_arc_5fpackage_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_article_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_autofill_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_bookmark_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_client_5fcommands_2eproto::AddDescriptors();
  ::sync_pb::protobuf_client_5fdebug_5finfo_2eproto::AddDescriptors();
  ::sync_pb::protobuf_device_5finfo_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_dictionary_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_encryption_2eproto::AddDescriptors();
  ::sync_pb::protobuf_experiments_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_extension_5fsetting_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_extension_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_favicon_5fimage_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_favicon_5ftracking_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_get_5fupdates_5fcaller_5finfo_2eproto::AddDescriptors();
  ::sync_pb::protobuf_history_5fdelete_5fdirective_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_managed_5fuser_5fsetting_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_managed_5fuser_5fshared_5fsetting_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_managed_5fuser_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_managed_5fuser_5fwhitelist_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_mountain_5fshare_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_nigori_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_password_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_preference_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_printer_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_priority_5fpreference_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_reading_5flist_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_search_5fengine_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_session_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_sync_5fenums_2eproto::AddDescriptors();
  ::sync_pb::protobuf_synced_5fnotification_5fapp_5finfo_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_synced_5fnotification_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_theme_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_typed_5furl_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_unique_5fposition_2eproto::AddDescriptors();
  ::sync_pb::protobuf_user_5fconsent_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_user_5fevent_5fspecifics_2eproto::AddDescriptors();
  ::sync_pb::protobuf_wifi_5fcredential_5fspecifics_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_sync_2eproto

bool GarbageCollectionDirective_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GarbageCollectionDirective_Type GarbageCollectionDirective::UNKNOWN;
const GarbageCollectionDirective_Type GarbageCollectionDirective::VERSION_WATERMARK;
const GarbageCollectionDirective_Type GarbageCollectionDirective::AGE_WATERMARK;
const GarbageCollectionDirective_Type GarbageCollectionDirective::MAX_ITEM_COUNT;
const GarbageCollectionDirective_Type GarbageCollectionDirective::Type_MIN;
const GarbageCollectionDirective_Type GarbageCollectionDirective::Type_MAX;
const int GarbageCollectionDirective::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ClientToServerMessage_Contents_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClientToServerMessage_Contents ClientToServerMessage::COMMIT;
const ClientToServerMessage_Contents ClientToServerMessage::GET_UPDATES;
const ClientToServerMessage_Contents ClientToServerMessage::AUTHENTICATE;
const ClientToServerMessage_Contents ClientToServerMessage::DEPRECATED_4;
const ClientToServerMessage_Contents ClientToServerMessage::CLEAR_SERVER_DATA;
const ClientToServerMessage_Contents ClientToServerMessage::Contents_MIN;
const ClientToServerMessage_Contents ClientToServerMessage::Contents_MAX;
const int ClientToServerMessage::Contents_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CommitResponse_ResponseType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommitResponse_ResponseType CommitResponse::SUCCESS;
const CommitResponse_ResponseType CommitResponse::CONFLICT;
const CommitResponse_ResponseType CommitResponse::RETRY;
const CommitResponse_ResponseType CommitResponse::INVALID_MESSAGE;
const CommitResponse_ResponseType CommitResponse::OVER_QUOTA;
const CommitResponse_ResponseType CommitResponse::TRANSIENT_ERROR;
const CommitResponse_ResponseType CommitResponse::ResponseType_MIN;
const CommitResponse_ResponseType CommitResponse::ResponseType_MAX;
const int CommitResponse::ResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfilingData::kMetaDataWriteTimeFieldNumber;
const int ProfilingData::kFileDataWriteTimeFieldNumber;
const int ProfilingData::kUserLookupTimeFieldNumber;
const int ProfilingData::kMetaDataReadTimeFieldNumber;
const int ProfilingData::kFileDataReadTimeFieldNumber;
const int ProfilingData::kTotalRequestTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfilingData::ProfilingData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ProfilingData)
}
ProfilingData::ProfilingData(const ProfilingData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&meta_data_write_time_, &from.meta_data_write_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_request_time_) -
    reinterpret_cast<char*>(&meta_data_write_time_)) + sizeof(total_request_time_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ProfilingData)
}

void ProfilingData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&meta_data_write_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_request_time_) -
      reinterpret_cast<char*>(&meta_data_write_time_)) + sizeof(total_request_time_));
}

ProfilingData::~ProfilingData() {
  // @@protoc_insertion_point(destructor:sync_pb.ProfilingData)
  SharedDtor();
}

void ProfilingData::SharedDtor() {
}

void ProfilingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProfilingData& ProfilingData::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfilingData* ProfilingData::New(::google::protobuf::Arena* arena) const {
  ProfilingData* n = new ProfilingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfilingData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ProfilingData)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&meta_data_write_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_request_time_) -
        reinterpret_cast<char*>(&meta_data_write_time_)) + sizeof(total_request_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProfilingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ProfilingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 meta_data_write_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_meta_data_write_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meta_data_write_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 file_data_write_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_file_data_write_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_data_write_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 user_lookup_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_user_lookup_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_lookup_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 meta_data_read_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_meta_data_read_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meta_data_read_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 file_data_read_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_file_data_read_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_data_read_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_request_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_total_request_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ProfilingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ProfilingData)
  return false;
#undef DO_
}

void ProfilingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ProfilingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 meta_data_write_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->meta_data_write_time(), output);
  }

  // optional int64 file_data_write_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_data_write_time(), output);
  }

  // optional int64 user_lookup_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_lookup_time(), output);
  }

  // optional int64 meta_data_read_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->meta_data_read_time(), output);
  }

  // optional int64 file_data_read_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->file_data_read_time(), output);
  }

  // optional int64 total_request_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_request_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ProfilingData)
}

size_t ProfilingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ProfilingData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional int64 meta_data_write_time = 1;
    if (has_meta_data_write_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->meta_data_write_time());
    }

    // optional int64 file_data_write_time = 2;
    if (has_file_data_write_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_data_write_time());
    }

    // optional int64 user_lookup_time = 3;
    if (has_user_lookup_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_lookup_time());
    }

    // optional int64 meta_data_read_time = 4;
    if (has_meta_data_read_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->meta_data_read_time());
    }

    // optional int64 file_data_read_time = 5;
    if (has_file_data_read_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_data_read_time());
    }

    // optional int64 total_request_time = 6;
    if (has_total_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_request_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfilingData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProfilingData*>(&from));
}

void ProfilingData::MergeFrom(const ProfilingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ProfilingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      meta_data_write_time_ = from.meta_data_write_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      file_data_write_time_ = from.file_data_write_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_lookup_time_ = from.user_lookup_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      meta_data_read_time_ = from.meta_data_read_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_data_read_time_ = from.file_data_read_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_request_time_ = from.total_request_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilingData::CopyFrom(const ProfilingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ProfilingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilingData::IsInitialized() const {
  return true;
}

void ProfilingData::Swap(ProfilingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfilingData::InternalSwap(ProfilingData* other) {
  std::swap(meta_data_write_time_, other->meta_data_write_time_);
  std::swap(file_data_write_time_, other->file_data_write_time_);
  std::swap(user_lookup_time_, other->user_lookup_time_);
  std::swap(meta_data_read_time_, other->meta_data_read_time_);
  std::swap(file_data_read_time_, other->file_data_read_time_);
  std::swap(total_request_time_, other->total_request_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProfilingData::GetTypeName() const {
  return "sync_pb.ProfilingData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfilingData

// optional int64 meta_data_write_time = 1;
bool ProfilingData::has_meta_data_write_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProfilingData::set_has_meta_data_write_time() {
  _has_bits_[0] |= 0x00000001u;
}
void ProfilingData::clear_has_meta_data_write_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProfilingData::clear_meta_data_write_time() {
  meta_data_write_time_ = GOOGLE_LONGLONG(0);
  clear_has_meta_data_write_time();
}
::google::protobuf::int64 ProfilingData::meta_data_write_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.meta_data_write_time)
  return meta_data_write_time_;
}
void ProfilingData::set_meta_data_write_time(::google::protobuf::int64 value) {
  set_has_meta_data_write_time();
  meta_data_write_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.meta_data_write_time)
}

// optional int64 file_data_write_time = 2;
bool ProfilingData::has_file_data_write_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfilingData::set_has_file_data_write_time() {
  _has_bits_[0] |= 0x00000002u;
}
void ProfilingData::clear_has_file_data_write_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProfilingData::clear_file_data_write_time() {
  file_data_write_time_ = GOOGLE_LONGLONG(0);
  clear_has_file_data_write_time();
}
::google::protobuf::int64 ProfilingData::file_data_write_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.file_data_write_time)
  return file_data_write_time_;
}
void ProfilingData::set_file_data_write_time(::google::protobuf::int64 value) {
  set_has_file_data_write_time();
  file_data_write_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.file_data_write_time)
}

// optional int64 user_lookup_time = 3;
bool ProfilingData::has_user_lookup_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProfilingData::set_has_user_lookup_time() {
  _has_bits_[0] |= 0x00000004u;
}
void ProfilingData::clear_has_user_lookup_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProfilingData::clear_user_lookup_time() {
  user_lookup_time_ = GOOGLE_LONGLONG(0);
  clear_has_user_lookup_time();
}
::google::protobuf::int64 ProfilingData::user_lookup_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.user_lookup_time)
  return user_lookup_time_;
}
void ProfilingData::set_user_lookup_time(::google::protobuf::int64 value) {
  set_has_user_lookup_time();
  user_lookup_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.user_lookup_time)
}

// optional int64 meta_data_read_time = 4;
bool ProfilingData::has_meta_data_read_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProfilingData::set_has_meta_data_read_time() {
  _has_bits_[0] |= 0x00000008u;
}
void ProfilingData::clear_has_meta_data_read_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProfilingData::clear_meta_data_read_time() {
  meta_data_read_time_ = GOOGLE_LONGLONG(0);
  clear_has_meta_data_read_time();
}
::google::protobuf::int64 ProfilingData::meta_data_read_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.meta_data_read_time)
  return meta_data_read_time_;
}
void ProfilingData::set_meta_data_read_time(::google::protobuf::int64 value) {
  set_has_meta_data_read_time();
  meta_data_read_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.meta_data_read_time)
}

// optional int64 file_data_read_time = 5;
bool ProfilingData::has_file_data_read_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProfilingData::set_has_file_data_read_time() {
  _has_bits_[0] |= 0x00000010u;
}
void ProfilingData::clear_has_file_data_read_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProfilingData::clear_file_data_read_time() {
  file_data_read_time_ = GOOGLE_LONGLONG(0);
  clear_has_file_data_read_time();
}
::google::protobuf::int64 ProfilingData::file_data_read_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.file_data_read_time)
  return file_data_read_time_;
}
void ProfilingData::set_file_data_read_time(::google::protobuf::int64 value) {
  set_has_file_data_read_time();
  file_data_read_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.file_data_read_time)
}

// optional int64 total_request_time = 6;
bool ProfilingData::has_total_request_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProfilingData::set_has_total_request_time() {
  _has_bits_[0] |= 0x00000020u;
}
void ProfilingData::clear_has_total_request_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProfilingData::clear_total_request_time() {
  total_request_time_ = GOOGLE_LONGLONG(0);
  clear_has_total_request_time();
}
::google::protobuf::int64 ProfilingData::total_request_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.total_request_time)
  return total_request_time_;
}
void ProfilingData::set_total_request_time(::google::protobuf::int64 value) {
  set_has_total_request_time();
  total_request_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.total_request_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntitySpecifics::kEncryptedFieldNumber;
const int EntitySpecifics::kAutofillFieldNumber;
const int EntitySpecifics::kBookmarkFieldNumber;
const int EntitySpecifics::kPreferenceFieldNumber;
const int EntitySpecifics::kTypedUrlFieldNumber;
const int EntitySpecifics::kThemeFieldNumber;
const int EntitySpecifics::kAppNotificationFieldNumber;
const int EntitySpecifics::kPasswordFieldNumber;
const int EntitySpecifics::kNigoriFieldNumber;
const int EntitySpecifics::kExtensionFieldNumber;
const int EntitySpecifics::kAppFieldNumber;
const int EntitySpecifics::kSessionFieldNumber;
const int EntitySpecifics::kAutofillProfileFieldNumber;
const int EntitySpecifics::kSearchEngineFieldNumber;
const int EntitySpecifics::kExtensionSettingFieldNumber;
const int EntitySpecifics::kAppSettingFieldNumber;
const int EntitySpecifics::kHistoryDeleteDirectiveFieldNumber;
const int EntitySpecifics::kSyncedNotificationFieldNumber;
const int EntitySpecifics::kSyncedNotificationAppInfoFieldNumber;
const int EntitySpecifics::kDeviceInfoFieldNumber;
const int EntitySpecifics::kExperimentsFieldNumber;
const int EntitySpecifics::kPriorityPreferenceFieldNumber;
const int EntitySpecifics::kDictionaryFieldNumber;
const int EntitySpecifics::kFaviconTrackingFieldNumber;
const int EntitySpecifics::kFaviconImageFieldNumber;
const int EntitySpecifics::kManagedUserSettingFieldNumber;
const int EntitySpecifics::kManagedUserFieldNumber;
const int EntitySpecifics::kManagedUserSharedSettingFieldNumber;
const int EntitySpecifics::kManagedUserWhitelistFieldNumber;
const int EntitySpecifics::kArticleFieldNumber;
const int EntitySpecifics::kAppListFieldNumber;
const int EntitySpecifics::kWifiCredentialFieldNumber;
const int EntitySpecifics::kAutofillWalletFieldNumber;
const int EntitySpecifics::kWalletMetadataFieldNumber;
const int EntitySpecifics::kArcPackageFieldNumber;
const int EntitySpecifics::kPrinterFieldNumber;
const int EntitySpecifics::kReadingListFieldNumber;
const int EntitySpecifics::kUserEventFieldNumber;
const int EntitySpecifics::kUserConsentFieldNumber;
const int EntitySpecifics::kMountainShareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntitySpecifics::EntitySpecifics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.EntitySpecifics)
}
EntitySpecifics::EntitySpecifics(const EntitySpecifics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_encrypted()) {
    encrypted_ = new ::sync_pb::EncryptedData(*from.encrypted_);
  } else {
    encrypted_ = NULL;
  }
  if (from.has_autofill()) {
    autofill_ = new ::sync_pb::AutofillSpecifics(*from.autofill_);
  } else {
    autofill_ = NULL;
  }
  if (from.has_bookmark()) {
    bookmark_ = new ::sync_pb::BookmarkSpecifics(*from.bookmark_);
  } else {
    bookmark_ = NULL;
  }
  if (from.has_preference()) {
    preference_ = new ::sync_pb::PreferenceSpecifics(*from.preference_);
  } else {
    preference_ = NULL;
  }
  if (from.has_typed_url()) {
    typed_url_ = new ::sync_pb::TypedUrlSpecifics(*from.typed_url_);
  } else {
    typed_url_ = NULL;
  }
  if (from.has_theme()) {
    theme_ = new ::sync_pb::ThemeSpecifics(*from.theme_);
  } else {
    theme_ = NULL;
  }
  if (from.has_app_notification()) {
    app_notification_ = new ::sync_pb::AppNotification(*from.app_notification_);
  } else {
    app_notification_ = NULL;
  }
  if (from.has_password()) {
    password_ = new ::sync_pb::PasswordSpecifics(*from.password_);
  } else {
    password_ = NULL;
  }
  if (from.has_nigori()) {
    nigori_ = new ::sync_pb::NigoriSpecifics(*from.nigori_);
  } else {
    nigori_ = NULL;
  }
  if (from.has_extension()) {
    extension_ = new ::sync_pb::ExtensionSpecifics(*from.extension_);
  } else {
    extension_ = NULL;
  }
  if (from.has_app()) {
    app_ = new ::sync_pb::AppSpecifics(*from.app_);
  } else {
    app_ = NULL;
  }
  if (from.has_session()) {
    session_ = new ::sync_pb::SessionSpecifics(*from.session_);
  } else {
    session_ = NULL;
  }
  if (from.has_autofill_profile()) {
    autofill_profile_ = new ::sync_pb::AutofillProfileSpecifics(*from.autofill_profile_);
  } else {
    autofill_profile_ = NULL;
  }
  if (from.has_search_engine()) {
    search_engine_ = new ::sync_pb::SearchEngineSpecifics(*from.search_engine_);
  } else {
    search_engine_ = NULL;
  }
  if (from.has_extension_setting()) {
    extension_setting_ = new ::sync_pb::ExtensionSettingSpecifics(*from.extension_setting_);
  } else {
    extension_setting_ = NULL;
  }
  if (from.has_app_setting()) {
    app_setting_ = new ::sync_pb::AppSettingSpecifics(*from.app_setting_);
  } else {
    app_setting_ = NULL;
  }
  if (from.has_history_delete_directive()) {
    history_delete_directive_ = new ::sync_pb::HistoryDeleteDirectiveSpecifics(*from.history_delete_directive_);
  } else {
    history_delete_directive_ = NULL;
  }
  if (from.has_synced_notification()) {
    synced_notification_ = new ::sync_pb::SyncedNotificationSpecifics(*from.synced_notification_);
  } else {
    synced_notification_ = NULL;
  }
  if (from.has_device_info()) {
    device_info_ = new ::sync_pb::DeviceInfoSpecifics(*from.device_info_);
  } else {
    device_info_ = NULL;
  }
  if (from.has_experiments()) {
    experiments_ = new ::sync_pb::ExperimentsSpecifics(*from.experiments_);
  } else {
    experiments_ = NULL;
  }
  if (from.has_priority_preference()) {
    priority_preference_ = new ::sync_pb::PriorityPreferenceSpecifics(*from.priority_preference_);
  } else {
    priority_preference_ = NULL;
  }
  if (from.has_dictionary()) {
    dictionary_ = new ::sync_pb::DictionarySpecifics(*from.dictionary_);
  } else {
    dictionary_ = NULL;
  }
  if (from.has_favicon_tracking()) {
    favicon_tracking_ = new ::sync_pb::FaviconTrackingSpecifics(*from.favicon_tracking_);
  } else {
    favicon_tracking_ = NULL;
  }
  if (from.has_favicon_image()) {
    favicon_image_ = new ::sync_pb::FaviconImageSpecifics(*from.favicon_image_);
  } else {
    favicon_image_ = NULL;
  }
  if (from.has_managed_user_setting()) {
    managed_user_setting_ = new ::sync_pb::ManagedUserSettingSpecifics(*from.managed_user_setting_);
  } else {
    managed_user_setting_ = NULL;
  }
  if (from.has_managed_user()) {
    managed_user_ = new ::sync_pb::ManagedUserSpecifics(*from.managed_user_);
  } else {
    managed_user_ = NULL;
  }
  if (from.has_managed_user_shared_setting()) {
    managed_user_shared_setting_ = new ::sync_pb::ManagedUserSharedSettingSpecifics(*from.managed_user_shared_setting_);
  } else {
    managed_user_shared_setting_ = NULL;
  }
  if (from.has_wifi_credential()) {
    wifi_credential_ = new ::sync_pb::WifiCredentialSpecifics(*from.wifi_credential_);
  } else {
    wifi_credential_ = NULL;
  }
  if (from.has_article()) {
    article_ = new ::sync_pb::ArticleSpecifics(*from.article_);
  } else {
    article_ = NULL;
  }
  if (from.has_app_list()) {
    app_list_ = new ::sync_pb::AppListSpecifics(*from.app_list_);
  } else {
    app_list_ = NULL;
  }
  if (from.has_synced_notification_app_info()) {
    synced_notification_app_info_ = new ::sync_pb::SyncedNotificationAppInfoSpecifics(*from.synced_notification_app_info_);
  } else {
    synced_notification_app_info_ = NULL;
  }
  if (from.has_managed_user_whitelist()) {
    managed_user_whitelist_ = new ::sync_pb::ManagedUserWhitelistSpecifics(*from.managed_user_whitelist_);
  } else {
    managed_user_whitelist_ = NULL;
  }
  if (from.has_autofill_wallet()) {
    autofill_wallet_ = new ::sync_pb::AutofillWalletSpecifics(*from.autofill_wallet_);
  } else {
    autofill_wallet_ = NULL;
  }
  if (from.has_wallet_metadata()) {
    wallet_metadata_ = new ::sync_pb::WalletMetadataSpecifics(*from.wallet_metadata_);
  } else {
    wallet_metadata_ = NULL;
  }
  if (from.has_arc_package()) {
    arc_package_ = new ::sync_pb::ArcPackageSpecifics(*from.arc_package_);
  } else {
    arc_package_ = NULL;
  }
  if (from.has_printer()) {
    printer_ = new ::sync_pb::PrinterSpecifics(*from.printer_);
  } else {
    printer_ = NULL;
  }
  if (from.has_reading_list()) {
    reading_list_ = new ::sync_pb::ReadingListSpecifics(*from.reading_list_);
  } else {
    reading_list_ = NULL;
  }
  if (from.has_user_event()) {
    user_event_ = new ::sync_pb::UserEventSpecifics(*from.user_event_);
  } else {
    user_event_ = NULL;
  }
  if (from.has_mountain_share()) {
    mountain_share_ = new ::sync_pb::MountainShareSpecifics(*from.mountain_share_);
  } else {
    mountain_share_ = NULL;
  }
  if (from.has_user_consent()) {
    user_consent_ = new ::sync_pb::UserConsentSpecifics(*from.user_consent_);
  } else {
    user_consent_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.EntitySpecifics)
}

void EntitySpecifics::SharedCtor() {
  ::memset(&encrypted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_consent_) -
      reinterpret_cast<char*>(&encrypted_)) + sizeof(user_consent_));
  _cached_size_ = 0;
}

EntitySpecifics::~EntitySpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.EntitySpecifics)
  SharedDtor();
}

void EntitySpecifics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete encrypted_;
  }
  if (this != internal_default_instance()) {
    delete autofill_;
  }
  if (this != internal_default_instance()) {
    delete bookmark_;
  }
  if (this != internal_default_instance()) {
    delete preference_;
  }
  if (this != internal_default_instance()) {
    delete typed_url_;
  }
  if (this != internal_default_instance()) {
    delete theme_;
  }
  if (this != internal_default_instance()) {
    delete app_notification_;
  }
  if (this != internal_default_instance()) {
    delete password_;
  }
  if (this != internal_default_instance()) {
    delete nigori_;
  }
  if (this != internal_default_instance()) {
    delete extension_;
  }
  if (this != internal_default_instance()) {
    delete app_;
  }
  if (this != internal_default_instance()) {
    delete session_;
  }
  if (this != internal_default_instance()) {
    delete autofill_profile_;
  }
  if (this != internal_default_instance()) {
    delete search_engine_;
  }
  if (this != internal_default_instance()) {
    delete extension_setting_;
  }
  if (this != internal_default_instance()) {
    delete app_setting_;
  }
  if (this != internal_default_instance()) {
    delete history_delete_directive_;
  }
  if (this != internal_default_instance()) {
    delete synced_notification_;
  }
  if (this != internal_default_instance()) {
    delete device_info_;
  }
  if (this != internal_default_instance()) {
    delete experiments_;
  }
  if (this != internal_default_instance()) {
    delete priority_preference_;
  }
  if (this != internal_default_instance()) {
    delete dictionary_;
  }
  if (this != internal_default_instance()) {
    delete favicon_tracking_;
  }
  if (this != internal_default_instance()) {
    delete favicon_image_;
  }
  if (this != internal_default_instance()) {
    delete managed_user_setting_;
  }
  if (this != internal_default_instance()) {
    delete managed_user_;
  }
  if (this != internal_default_instance()) {
    delete managed_user_shared_setting_;
  }
  if (this != internal_default_instance()) {
    delete wifi_credential_;
  }
  if (this != internal_default_instance()) {
    delete article_;
  }
  if (this != internal_default_instance()) {
    delete app_list_;
  }
  if (this != internal_default_instance()) {
    delete synced_notification_app_info_;
  }
  if (this != internal_default_instance()) {
    delete managed_user_whitelist_;
  }
  if (this != internal_default_instance()) {
    delete autofill_wallet_;
  }
  if (this != internal_default_instance()) {
    delete wallet_metadata_;
  }
  if (this != internal_default_instance()) {
    delete arc_package_;
  }
  if (this != internal_default_instance()) {
    delete printer_;
  }
  if (this != internal_default_instance()) {
    delete reading_list_;
  }
  if (this != internal_default_instance()) {
    delete user_event_;
  }
  if (this != internal_default_instance()) {
    delete mountain_share_;
  }
  if (this != internal_default_instance()) {
    delete user_consent_;
  }
}

void EntitySpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntitySpecifics& EntitySpecifics::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntitySpecifics* EntitySpecifics::New(::google::protobuf::Arena* arena) const {
  EntitySpecifics* n = new EntitySpecifics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntitySpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EntitySpecifics)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_encrypted()) {
      GOOGLE_DCHECK(encrypted_ != NULL);
      encrypted_->::sync_pb::EncryptedData::Clear();
    }
    if (has_autofill()) {
      GOOGLE_DCHECK(autofill_ != NULL);
      autofill_->::sync_pb::AutofillSpecifics::Clear();
    }
    if (has_bookmark()) {
      GOOGLE_DCHECK(bookmark_ != NULL);
      bookmark_->::sync_pb::BookmarkSpecifics::Clear();
    }
    if (has_preference()) {
      GOOGLE_DCHECK(preference_ != NULL);
      preference_->::sync_pb::PreferenceSpecifics::Clear();
    }
    if (has_typed_url()) {
      GOOGLE_DCHECK(typed_url_ != NULL);
      typed_url_->::sync_pb::TypedUrlSpecifics::Clear();
    }
    if (has_theme()) {
      GOOGLE_DCHECK(theme_ != NULL);
      theme_->::sync_pb::ThemeSpecifics::Clear();
    }
    if (has_app_notification()) {
      GOOGLE_DCHECK(app_notification_ != NULL);
      app_notification_->::sync_pb::AppNotification::Clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(password_ != NULL);
      password_->::sync_pb::PasswordSpecifics::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_nigori()) {
      GOOGLE_DCHECK(nigori_ != NULL);
      nigori_->::sync_pb::NigoriSpecifics::Clear();
    }
    if (has_extension()) {
      GOOGLE_DCHECK(extension_ != NULL);
      extension_->::sync_pb::ExtensionSpecifics::Clear();
    }
    if (has_app()) {
      GOOGLE_DCHECK(app_ != NULL);
      app_->::sync_pb::AppSpecifics::Clear();
    }
    if (has_session()) {
      GOOGLE_DCHECK(session_ != NULL);
      session_->::sync_pb::SessionSpecifics::Clear();
    }
    if (has_autofill_profile()) {
      GOOGLE_DCHECK(autofill_profile_ != NULL);
      autofill_profile_->::sync_pb::AutofillProfileSpecifics::Clear();
    }
    if (has_search_engine()) {
      GOOGLE_DCHECK(search_engine_ != NULL);
      search_engine_->::sync_pb::SearchEngineSpecifics::Clear();
    }
    if (has_extension_setting()) {
      GOOGLE_DCHECK(extension_setting_ != NULL);
      extension_setting_->::sync_pb::ExtensionSettingSpecifics::Clear();
    }
    if (has_app_setting()) {
      GOOGLE_DCHECK(app_setting_ != NULL);
      app_setting_->::sync_pb::AppSettingSpecifics::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_history_delete_directive()) {
      GOOGLE_DCHECK(history_delete_directive_ != NULL);
      history_delete_directive_->::sync_pb::HistoryDeleteDirectiveSpecifics::Clear();
    }
    if (has_synced_notification()) {
      GOOGLE_DCHECK(synced_notification_ != NULL);
      synced_notification_->::sync_pb::SyncedNotificationSpecifics::Clear();
    }
    if (has_device_info()) {
      GOOGLE_DCHECK(device_info_ != NULL);
      device_info_->::sync_pb::DeviceInfoSpecifics::Clear();
    }
    if (has_experiments()) {
      GOOGLE_DCHECK(experiments_ != NULL);
      experiments_->::sync_pb::ExperimentsSpecifics::Clear();
    }
    if (has_priority_preference()) {
      GOOGLE_DCHECK(priority_preference_ != NULL);
      priority_preference_->::sync_pb::PriorityPreferenceSpecifics::Clear();
    }
    if (has_dictionary()) {
      GOOGLE_DCHECK(dictionary_ != NULL);
      dictionary_->::sync_pb::DictionarySpecifics::Clear();
    }
    if (has_favicon_tracking()) {
      GOOGLE_DCHECK(favicon_tracking_ != NULL);
      favicon_tracking_->::sync_pb::FaviconTrackingSpecifics::Clear();
    }
    if (has_favicon_image()) {
      GOOGLE_DCHECK(favicon_image_ != NULL);
      favicon_image_->::sync_pb::FaviconImageSpecifics::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_managed_user_setting()) {
      GOOGLE_DCHECK(managed_user_setting_ != NULL);
      managed_user_setting_->::sync_pb::ManagedUserSettingSpecifics::Clear();
    }
    if (has_managed_user()) {
      GOOGLE_DCHECK(managed_user_ != NULL);
      managed_user_->::sync_pb::ManagedUserSpecifics::Clear();
    }
    if (has_managed_user_shared_setting()) {
      GOOGLE_DCHECK(managed_user_shared_setting_ != NULL);
      managed_user_shared_setting_->::sync_pb::ManagedUserSharedSettingSpecifics::Clear();
    }
    if (has_wifi_credential()) {
      GOOGLE_DCHECK(wifi_credential_ != NULL);
      wifi_credential_->::sync_pb::WifiCredentialSpecifics::Clear();
    }
    if (has_article()) {
      GOOGLE_DCHECK(article_ != NULL);
      article_->::sync_pb::ArticleSpecifics::Clear();
    }
    if (has_app_list()) {
      GOOGLE_DCHECK(app_list_ != NULL);
      app_list_->::sync_pb::AppListSpecifics::Clear();
    }
    if (has_synced_notification_app_info()) {
      GOOGLE_DCHECK(synced_notification_app_info_ != NULL);
      synced_notification_app_info_->::sync_pb::SyncedNotificationAppInfoSpecifics::Clear();
    }
    if (has_managed_user_whitelist()) {
      GOOGLE_DCHECK(managed_user_whitelist_ != NULL);
      managed_user_whitelist_->::sync_pb::ManagedUserWhitelistSpecifics::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    if (has_autofill_wallet()) {
      GOOGLE_DCHECK(autofill_wallet_ != NULL);
      autofill_wallet_->::sync_pb::AutofillWalletSpecifics::Clear();
    }
    if (has_wallet_metadata()) {
      GOOGLE_DCHECK(wallet_metadata_ != NULL);
      wallet_metadata_->::sync_pb::WalletMetadataSpecifics::Clear();
    }
    if (has_arc_package()) {
      GOOGLE_DCHECK(arc_package_ != NULL);
      arc_package_->::sync_pb::ArcPackageSpecifics::Clear();
    }
    if (has_printer()) {
      GOOGLE_DCHECK(printer_ != NULL);
      printer_->::sync_pb::PrinterSpecifics::Clear();
    }
    if (has_reading_list()) {
      GOOGLE_DCHECK(reading_list_ != NULL);
      reading_list_->::sync_pb::ReadingListSpecifics::Clear();
    }
    if (has_user_event()) {
      GOOGLE_DCHECK(user_event_ != NULL);
      user_event_->::sync_pb::UserEventSpecifics::Clear();
    }
    if (has_mountain_share()) {
      GOOGLE_DCHECK(mountain_share_ != NULL);
      mountain_share_->::sync_pb::MountainShareSpecifics::Clear();
    }
    if (has_user_consent()) {
      GOOGLE_DCHECK(user_consent_ != NULL);
      user_consent_->::sync_pb::UserConsentSpecifics::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EntitySpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.EntitySpecifics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4448114u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.EncryptedData encrypted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encrypted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AutofillSpecifics autofill = 31729;
      case 31729: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autofill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.BookmarkSpecifics bookmark = 32904;
      case 32904: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bookmark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PreferenceSpecifics preference = 37702;
      case 37702: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
      case 40781: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_typed_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ThemeSpecifics theme = 41210;
      case 41210: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AppNotification app_notification = 45184;
      case 45184: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PasswordSpecifics password = 45873;
      case 45873: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.NigoriSpecifics nigori = 47745;
      case 47745: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nigori()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ExtensionSpecifics extension = 48119;
      case 48119: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AppSpecifics app = 48364;
      case 48364: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SessionSpecifics session = 50119;
      case 50119: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
      case 63951: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autofill_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
      case 88610: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_engine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
      case 96159: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AppSettingSpecifics app_setting = 103656;
      case 103656: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
      case 150251: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_delete_directive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108;
      case 153108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_synced_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
      case 154522: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ExperimentsSpecifics experiments = 161496;
      case 161496: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experiments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
      case 163425: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priority_preference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DictionarySpecifics dictionary = 170540;
      case 170540: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
      case 181534: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_tracking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
      case 182019: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
      case 186662: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_managed_user_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ManagedUserSpecifics managed_user = 194582;
      case 194582: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_managed_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026;
      case 202026: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_managed_user_shared_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WifiCredentialSpecifics wifi_credential = 218175;
      case 218175: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wifi_credential()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ArticleSpecifics article = 223759;
      case 223759: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_article()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AppListSpecifics app_list = 229170;
      case 229170: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816;
      case 235816: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_synced_notification_app_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ManagedUserWhitelistSpecifics managed_user_whitelist = 306060;
      case 306060: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_managed_user_whitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
      case 306270: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autofill_wallet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
      case 330441: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wallet_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ArcPackageSpecifics arc_package = 340906;
      case 340906: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PrinterSpecifics printer = 410745;
      case 410745: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_printer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ReadingListSpecifics reading_list = 411028;
      case 411028: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reading_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics user_event = 455206;
      case 455206: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.MountainShareSpecifics mountain_share = 545005;
      case 545005: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mountain_share()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentSpecifics user_consent = 556014;
      case 556014: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.EntitySpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.EntitySpecifics)
  return false;
#undef DO_
}

void EntitySpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.EntitySpecifics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.EncryptedData encrypted = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->encrypted_, output);
  }

  // optional .sync_pb.AutofillSpecifics autofill = 31729;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31729, *this->autofill_, output);
  }

  // optional .sync_pb.BookmarkSpecifics bookmark = 32904;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32904, *this->bookmark_, output);
  }

  // optional .sync_pb.PreferenceSpecifics preference = 37702;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37702, *this->preference_, output);
  }

  // optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40781, *this->typed_url_, output);
  }

  // optional .sync_pb.ThemeSpecifics theme = 41210;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41210, *this->theme_, output);
  }

  // optional .sync_pb.AppNotification app_notification = 45184;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45184, *this->app_notification_, output);
  }

  // optional .sync_pb.PasswordSpecifics password = 45873;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45873, *this->password_, output);
  }

  // optional .sync_pb.NigoriSpecifics nigori = 47745;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47745, *this->nigori_, output);
  }

  // optional .sync_pb.ExtensionSpecifics extension = 48119;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48119, *this->extension_, output);
  }

  // optional .sync_pb.AppSpecifics app = 48364;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48364, *this->app_, output);
  }

  // optional .sync_pb.SessionSpecifics session = 50119;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50119, *this->session_, output);
  }

  // optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      63951, *this->autofill_profile_, output);
  }

  // optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      88610, *this->search_engine_, output);
  }

  // optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      96159, *this->extension_setting_, output);
  }

  // optional .sync_pb.AppSettingSpecifics app_setting = 103656;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      103656, *this->app_setting_, output);
  }

  // optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      150251, *this->history_delete_directive_, output);
  }

  // optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      153108, *this->synced_notification_, output);
  }

  // optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      154522, *this->device_info_, output);
  }

  // optional .sync_pb.ExperimentsSpecifics experiments = 161496;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      161496, *this->experiments_, output);
  }

  // optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      163425, *this->priority_preference_, output);
  }

  // optional .sync_pb.DictionarySpecifics dictionary = 170540;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      170540, *this->dictionary_, output);
  }

  // optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      181534, *this->favicon_tracking_, output);
  }

  // optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      182019, *this->favicon_image_, output);
  }

  // optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      186662, *this->managed_user_setting_, output);
  }

  // optional .sync_pb.ManagedUserSpecifics managed_user = 194582;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      194582, *this->managed_user_, output);
  }

  // optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      202026, *this->managed_user_shared_setting_, output);
  }

  // optional .sync_pb.WifiCredentialSpecifics wifi_credential = 218175;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      218175, *this->wifi_credential_, output);
  }

  // optional .sync_pb.ArticleSpecifics article = 223759;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      223759, *this->article_, output);
  }

  // optional .sync_pb.AppListSpecifics app_list = 229170;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      229170, *this->app_list_, output);
  }

  // optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      235816, *this->synced_notification_app_info_, output);
  }

  // optional .sync_pb.ManagedUserWhitelistSpecifics managed_user_whitelist = 306060;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      306060, *this->managed_user_whitelist_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      306270, *this->autofill_wallet_, output);
  }

  // optional .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      330441, *this->wallet_metadata_, output);
  }

  // optional .sync_pb.ArcPackageSpecifics arc_package = 340906;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      340906, *this->arc_package_, output);
  }

  // optional .sync_pb.PrinterSpecifics printer = 410745;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      410745, *this->printer_, output);
  }

  // optional .sync_pb.ReadingListSpecifics reading_list = 411028;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      411028, *this->reading_list_, output);
  }

  // optional .sync_pb.UserEventSpecifics user_event = 455206;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      455206, *this->user_event_, output);
  }

  // optional .sync_pb.MountainShareSpecifics mountain_share = 545005;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      545005, *this->mountain_share_, output);
  }

  // optional .sync_pb.UserConsentSpecifics user_consent = 556014;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      556014, *this->user_consent_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.EntitySpecifics)
}

size_t EntitySpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EntitySpecifics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .sync_pb.EncryptedData encrypted = 1;
    if (has_encrypted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->encrypted_);
    }

    // optional .sync_pb.AutofillSpecifics autofill = 31729;
    if (has_autofill()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->autofill_);
    }

    // optional .sync_pb.BookmarkSpecifics bookmark = 32904;
    if (has_bookmark()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bookmark_);
    }

    // optional .sync_pb.PreferenceSpecifics preference = 37702;
    if (has_preference()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preference_);
    }

    // optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
    if (has_typed_url()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->typed_url_);
    }

    // optional .sync_pb.ThemeSpecifics theme = 41210;
    if (has_theme()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->theme_);
    }

    // optional .sync_pb.AppNotification app_notification = 45184;
    if (has_app_notification()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->app_notification_);
    }

    // optional .sync_pb.PasswordSpecifics password = 45873;
    if (has_password()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->password_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .sync_pb.NigoriSpecifics nigori = 47745;
    if (has_nigori()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nigori_);
    }

    // optional .sync_pb.ExtensionSpecifics extension = 48119;
    if (has_extension()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extension_);
    }

    // optional .sync_pb.AppSpecifics app = 48364;
    if (has_app()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->app_);
    }

    // optional .sync_pb.SessionSpecifics session = 50119;
    if (has_session()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->session_);
    }

    // optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
    if (has_autofill_profile()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->autofill_profile_);
    }

    // optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
    if (has_search_engine()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->search_engine_);
    }

    // optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
    if (has_extension_setting()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extension_setting_);
    }

    // optional .sync_pb.AppSettingSpecifics app_setting = 103656;
    if (has_app_setting()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->app_setting_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
    if (has_history_delete_directive()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->history_delete_directive_);
    }

    // optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108;
    if (has_synced_notification()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->synced_notification_);
    }

    // optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
    if (has_device_info()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_info_);
    }

    // optional .sync_pb.ExperimentsSpecifics experiments = 161496;
    if (has_experiments()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->experiments_);
    }

    // optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
    if (has_priority_preference()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->priority_preference_);
    }

    // optional .sync_pb.DictionarySpecifics dictionary = 170540;
    if (has_dictionary()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dictionary_);
    }

    // optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
    if (has_favicon_tracking()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->favicon_tracking_);
    }

    // optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
    if (has_favicon_image()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->favicon_image_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
    if (has_managed_user_setting()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->managed_user_setting_);
    }

    // optional .sync_pb.ManagedUserSpecifics managed_user = 194582;
    if (has_managed_user()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->managed_user_);
    }

    // optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026;
    if (has_managed_user_shared_setting()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->managed_user_shared_setting_);
    }

    // optional .sync_pb.WifiCredentialSpecifics wifi_credential = 218175;
    if (has_wifi_credential()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wifi_credential_);
    }

    // optional .sync_pb.ArticleSpecifics article = 223759;
    if (has_article()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->article_);
    }

    // optional .sync_pb.AppListSpecifics app_list = 229170;
    if (has_app_list()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->app_list_);
    }

    // optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816;
    if (has_synced_notification_app_info()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->synced_notification_app_info_);
    }

    // optional .sync_pb.ManagedUserWhitelistSpecifics managed_user_whitelist = 306060;
    if (has_managed_user_whitelist()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->managed_user_whitelist_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
    if (has_autofill_wallet()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->autofill_wallet_);
    }

    // optional .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
    if (has_wallet_metadata()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wallet_metadata_);
    }

    // optional .sync_pb.ArcPackageSpecifics arc_package = 340906;
    if (has_arc_package()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->arc_package_);
    }

    // optional .sync_pb.PrinterSpecifics printer = 410745;
    if (has_printer()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->printer_);
    }

    // optional .sync_pb.ReadingListSpecifics reading_list = 411028;
    if (has_reading_list()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reading_list_);
    }

    // optional .sync_pb.UserEventSpecifics user_event = 455206;
    if (has_user_event()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_event_);
    }

    // optional .sync_pb.MountainShareSpecifics mountain_share = 545005;
    if (has_mountain_share()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mountain_share_);
    }

    // optional .sync_pb.UserConsentSpecifics user_consent = 556014;
    if (has_user_consent()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_consent_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntitySpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntitySpecifics*>(&from));
}

void EntitySpecifics::MergeFrom(const EntitySpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EntitySpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_encrypted()->::sync_pb::EncryptedData::MergeFrom(from.encrypted());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_autofill()->::sync_pb::AutofillSpecifics::MergeFrom(from.autofill());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bookmark()->::sync_pb::BookmarkSpecifics::MergeFrom(from.bookmark());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_preference()->::sync_pb::PreferenceSpecifics::MergeFrom(from.preference());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_typed_url()->::sync_pb::TypedUrlSpecifics::MergeFrom(from.typed_url());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_theme()->::sync_pb::ThemeSpecifics::MergeFrom(from.theme());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_app_notification()->::sync_pb::AppNotification::MergeFrom(from.app_notification());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_password()->::sync_pb::PasswordSpecifics::MergeFrom(from.password());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_nigori()->::sync_pb::NigoriSpecifics::MergeFrom(from.nigori());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_extension()->::sync_pb::ExtensionSpecifics::MergeFrom(from.extension());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_app()->::sync_pb::AppSpecifics::MergeFrom(from.app());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_session()->::sync_pb::SessionSpecifics::MergeFrom(from.session());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_autofill_profile()->::sync_pb::AutofillProfileSpecifics::MergeFrom(from.autofill_profile());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_search_engine()->::sync_pb::SearchEngineSpecifics::MergeFrom(from.search_engine());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_extension_setting()->::sync_pb::ExtensionSettingSpecifics::MergeFrom(from.extension_setting());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_app_setting()->::sync_pb::AppSettingSpecifics::MergeFrom(from.app_setting());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_history_delete_directive()->::sync_pb::HistoryDeleteDirectiveSpecifics::MergeFrom(from.history_delete_directive());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_synced_notification()->::sync_pb::SyncedNotificationSpecifics::MergeFrom(from.synced_notification());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_device_info()->::sync_pb::DeviceInfoSpecifics::MergeFrom(from.device_info());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_experiments()->::sync_pb::ExperimentsSpecifics::MergeFrom(from.experiments());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_priority_preference()->::sync_pb::PriorityPreferenceSpecifics::MergeFrom(from.priority_preference());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_dictionary()->::sync_pb::DictionarySpecifics::MergeFrom(from.dictionary());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_favicon_tracking()->::sync_pb::FaviconTrackingSpecifics::MergeFrom(from.favicon_tracking());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_favicon_image()->::sync_pb::FaviconImageSpecifics::MergeFrom(from.favicon_image());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_managed_user_setting()->::sync_pb::ManagedUserSettingSpecifics::MergeFrom(from.managed_user_setting());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_managed_user()->::sync_pb::ManagedUserSpecifics::MergeFrom(from.managed_user());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_managed_user_shared_setting()->::sync_pb::ManagedUserSharedSettingSpecifics::MergeFrom(from.managed_user_shared_setting());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_wifi_credential()->::sync_pb::WifiCredentialSpecifics::MergeFrom(from.wifi_credential());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_article()->::sync_pb::ArticleSpecifics::MergeFrom(from.article());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_app_list()->::sync_pb::AppListSpecifics::MergeFrom(from.app_list());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_synced_notification_app_info()->::sync_pb::SyncedNotificationAppInfoSpecifics::MergeFrom(from.synced_notification_app_info());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_managed_user_whitelist()->::sync_pb::ManagedUserWhitelistSpecifics::MergeFrom(from.managed_user_whitelist());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_autofill_wallet()->::sync_pb::AutofillWalletSpecifics::MergeFrom(from.autofill_wallet());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wallet_metadata()->::sync_pb::WalletMetadataSpecifics::MergeFrom(from.wallet_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_arc_package()->::sync_pb::ArcPackageSpecifics::MergeFrom(from.arc_package());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_printer()->::sync_pb::PrinterSpecifics::MergeFrom(from.printer());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_reading_list()->::sync_pb::ReadingListSpecifics::MergeFrom(from.reading_list());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_user_event()->::sync_pb::UserEventSpecifics::MergeFrom(from.user_event());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_mountain_share()->::sync_pb::MountainShareSpecifics::MergeFrom(from.mountain_share());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_user_consent()->::sync_pb::UserConsentSpecifics::MergeFrom(from.user_consent());
    }
  }
}

void EntitySpecifics::CopyFrom(const EntitySpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EntitySpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySpecifics::IsInitialized() const {
  return true;
}

void EntitySpecifics::Swap(EntitySpecifics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntitySpecifics::InternalSwap(EntitySpecifics* other) {
  std::swap(encrypted_, other->encrypted_);
  std::swap(autofill_, other->autofill_);
  std::swap(bookmark_, other->bookmark_);
  std::swap(preference_, other->preference_);
  std::swap(typed_url_, other->typed_url_);
  std::swap(theme_, other->theme_);
  std::swap(app_notification_, other->app_notification_);
  std::swap(password_, other->password_);
  std::swap(nigori_, other->nigori_);
  std::swap(extension_, other->extension_);
  std::swap(app_, other->app_);
  std::swap(session_, other->session_);
  std::swap(autofill_profile_, other->autofill_profile_);
  std::swap(search_engine_, other->search_engine_);
  std::swap(extension_setting_, other->extension_setting_);
  std::swap(app_setting_, other->app_setting_);
  std::swap(history_delete_directive_, other->history_delete_directive_);
  std::swap(synced_notification_, other->synced_notification_);
  std::swap(device_info_, other->device_info_);
  std::swap(experiments_, other->experiments_);
  std::swap(priority_preference_, other->priority_preference_);
  std::swap(dictionary_, other->dictionary_);
  std::swap(favicon_tracking_, other->favicon_tracking_);
  std::swap(favicon_image_, other->favicon_image_);
  std::swap(managed_user_setting_, other->managed_user_setting_);
  std::swap(managed_user_, other->managed_user_);
  std::swap(managed_user_shared_setting_, other->managed_user_shared_setting_);
  std::swap(wifi_credential_, other->wifi_credential_);
  std::swap(article_, other->article_);
  std::swap(app_list_, other->app_list_);
  std::swap(synced_notification_app_info_, other->synced_notification_app_info_);
  std::swap(managed_user_whitelist_, other->managed_user_whitelist_);
  std::swap(autofill_wallet_, other->autofill_wallet_);
  std::swap(wallet_metadata_, other->wallet_metadata_);
  std::swap(arc_package_, other->arc_package_);
  std::swap(printer_, other->printer_);
  std::swap(reading_list_, other->reading_list_);
  std::swap(user_event_, other->user_event_);
  std::swap(mountain_share_, other->mountain_share_);
  std::swap(user_consent_, other->user_consent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EntitySpecifics::GetTypeName() const {
  return "sync_pb.EntitySpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntitySpecifics

// optional .sync_pb.EncryptedData encrypted = 1;
bool EntitySpecifics::has_encrypted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EntitySpecifics::set_has_encrypted() {
  _has_bits_[0] |= 0x00000001u;
}
void EntitySpecifics::clear_has_encrypted() {
  _has_bits_[0] &= ~0x00000001u;
}
void EntitySpecifics::clear_encrypted() {
  if (encrypted_ != NULL) encrypted_->::sync_pb::EncryptedData::Clear();
  clear_has_encrypted();
}
const ::sync_pb::EncryptedData& EntitySpecifics::encrypted() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.encrypted)
  return encrypted_ != NULL ? *encrypted_
                         : *::sync_pb::EncryptedData::internal_default_instance();
}
::sync_pb::EncryptedData* EntitySpecifics::mutable_encrypted() {
  set_has_encrypted();
  if (encrypted_ == NULL) {
    encrypted_ = new ::sync_pb::EncryptedData;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.encrypted)
  return encrypted_;
}
::sync_pb::EncryptedData* EntitySpecifics::release_encrypted() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.encrypted)
  clear_has_encrypted();
  ::sync_pb::EncryptedData* temp = encrypted_;
  encrypted_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_encrypted(::sync_pb::EncryptedData* encrypted) {
  delete encrypted_;
  encrypted_ = encrypted;
  if (encrypted) {
    set_has_encrypted();
  } else {
    clear_has_encrypted();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.encrypted)
}

// optional .sync_pb.AutofillSpecifics autofill = 31729;
bool EntitySpecifics::has_autofill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EntitySpecifics::set_has_autofill() {
  _has_bits_[0] |= 0x00000002u;
}
void EntitySpecifics::clear_has_autofill() {
  _has_bits_[0] &= ~0x00000002u;
}
void EntitySpecifics::clear_autofill() {
  if (autofill_ != NULL) autofill_->::sync_pb::AutofillSpecifics::Clear();
  clear_has_autofill();
}
const ::sync_pb::AutofillSpecifics& EntitySpecifics::autofill() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill)
  return autofill_ != NULL ? *autofill_
                         : *::sync_pb::AutofillSpecifics::internal_default_instance();
}
::sync_pb::AutofillSpecifics* EntitySpecifics::mutable_autofill() {
  set_has_autofill();
  if (autofill_ == NULL) {
    autofill_ = new ::sync_pb::AutofillSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill)
  return autofill_;
}
::sync_pb::AutofillSpecifics* EntitySpecifics::release_autofill() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill)
  clear_has_autofill();
  ::sync_pb::AutofillSpecifics* temp = autofill_;
  autofill_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_autofill(::sync_pb::AutofillSpecifics* autofill) {
  delete autofill_;
  autofill_ = autofill;
  if (autofill) {
    set_has_autofill();
  } else {
    clear_has_autofill();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill)
}

// optional .sync_pb.BookmarkSpecifics bookmark = 32904;
bool EntitySpecifics::has_bookmark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EntitySpecifics::set_has_bookmark() {
  _has_bits_[0] |= 0x00000004u;
}
void EntitySpecifics::clear_has_bookmark() {
  _has_bits_[0] &= ~0x00000004u;
}
void EntitySpecifics::clear_bookmark() {
  if (bookmark_ != NULL) bookmark_->::sync_pb::BookmarkSpecifics::Clear();
  clear_has_bookmark();
}
const ::sync_pb::BookmarkSpecifics& EntitySpecifics::bookmark() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.bookmark)
  return bookmark_ != NULL ? *bookmark_
                         : *::sync_pb::BookmarkSpecifics::internal_default_instance();
}
::sync_pb::BookmarkSpecifics* EntitySpecifics::mutable_bookmark() {
  set_has_bookmark();
  if (bookmark_ == NULL) {
    bookmark_ = new ::sync_pb::BookmarkSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.bookmark)
  return bookmark_;
}
::sync_pb::BookmarkSpecifics* EntitySpecifics::release_bookmark() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.bookmark)
  clear_has_bookmark();
  ::sync_pb::BookmarkSpecifics* temp = bookmark_;
  bookmark_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_bookmark(::sync_pb::BookmarkSpecifics* bookmark) {
  delete bookmark_;
  bookmark_ = bookmark;
  if (bookmark) {
    set_has_bookmark();
  } else {
    clear_has_bookmark();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.bookmark)
}

// optional .sync_pb.PreferenceSpecifics preference = 37702;
bool EntitySpecifics::has_preference() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EntitySpecifics::set_has_preference() {
  _has_bits_[0] |= 0x00000008u;
}
void EntitySpecifics::clear_has_preference() {
  _has_bits_[0] &= ~0x00000008u;
}
void EntitySpecifics::clear_preference() {
  if (preference_ != NULL) preference_->::sync_pb::PreferenceSpecifics::Clear();
  clear_has_preference();
}
const ::sync_pb::PreferenceSpecifics& EntitySpecifics::preference() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.preference)
  return preference_ != NULL ? *preference_
                         : *::sync_pb::PreferenceSpecifics::internal_default_instance();
}
::sync_pb::PreferenceSpecifics* EntitySpecifics::mutable_preference() {
  set_has_preference();
  if (preference_ == NULL) {
    preference_ = new ::sync_pb::PreferenceSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.preference)
  return preference_;
}
::sync_pb::PreferenceSpecifics* EntitySpecifics::release_preference() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.preference)
  clear_has_preference();
  ::sync_pb::PreferenceSpecifics* temp = preference_;
  preference_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_preference(::sync_pb::PreferenceSpecifics* preference) {
  delete preference_;
  preference_ = preference;
  if (preference) {
    set_has_preference();
  } else {
    clear_has_preference();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.preference)
}

// optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
bool EntitySpecifics::has_typed_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EntitySpecifics::set_has_typed_url() {
  _has_bits_[0] |= 0x00000010u;
}
void EntitySpecifics::clear_has_typed_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void EntitySpecifics::clear_typed_url() {
  if (typed_url_ != NULL) typed_url_->::sync_pb::TypedUrlSpecifics::Clear();
  clear_has_typed_url();
}
const ::sync_pb::TypedUrlSpecifics& EntitySpecifics::typed_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.typed_url)
  return typed_url_ != NULL ? *typed_url_
                         : *::sync_pb::TypedUrlSpecifics::internal_default_instance();
}
::sync_pb::TypedUrlSpecifics* EntitySpecifics::mutable_typed_url() {
  set_has_typed_url();
  if (typed_url_ == NULL) {
    typed_url_ = new ::sync_pb::TypedUrlSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.typed_url)
  return typed_url_;
}
::sync_pb::TypedUrlSpecifics* EntitySpecifics::release_typed_url() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.typed_url)
  clear_has_typed_url();
  ::sync_pb::TypedUrlSpecifics* temp = typed_url_;
  typed_url_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_typed_url(::sync_pb::TypedUrlSpecifics* typed_url) {
  delete typed_url_;
  typed_url_ = typed_url;
  if (typed_url) {
    set_has_typed_url();
  } else {
    clear_has_typed_url();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.typed_url)
}

// optional .sync_pb.ThemeSpecifics theme = 41210;
bool EntitySpecifics::has_theme() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EntitySpecifics::set_has_theme() {
  _has_bits_[0] |= 0x00000020u;
}
void EntitySpecifics::clear_has_theme() {
  _has_bits_[0] &= ~0x00000020u;
}
void EntitySpecifics::clear_theme() {
  if (theme_ != NULL) theme_->::sync_pb::ThemeSpecifics::Clear();
  clear_has_theme();
}
const ::sync_pb::ThemeSpecifics& EntitySpecifics::theme() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.theme)
  return theme_ != NULL ? *theme_
                         : *::sync_pb::ThemeSpecifics::internal_default_instance();
}
::sync_pb::ThemeSpecifics* EntitySpecifics::mutable_theme() {
  set_has_theme();
  if (theme_ == NULL) {
    theme_ = new ::sync_pb::ThemeSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.theme)
  return theme_;
}
::sync_pb::ThemeSpecifics* EntitySpecifics::release_theme() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.theme)
  clear_has_theme();
  ::sync_pb::ThemeSpecifics* temp = theme_;
  theme_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_theme(::sync_pb::ThemeSpecifics* theme) {
  delete theme_;
  theme_ = theme;
  if (theme) {
    set_has_theme();
  } else {
    clear_has_theme();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.theme)
}

// optional .sync_pb.AppNotification app_notification = 45184;
bool EntitySpecifics::has_app_notification() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EntitySpecifics::set_has_app_notification() {
  _has_bits_[0] |= 0x00000040u;
}
void EntitySpecifics::clear_has_app_notification() {
  _has_bits_[0] &= ~0x00000040u;
}
void EntitySpecifics::clear_app_notification() {
  if (app_notification_ != NULL) app_notification_->::sync_pb::AppNotification::Clear();
  clear_has_app_notification();
}
const ::sync_pb::AppNotification& EntitySpecifics::app_notification() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app_notification)
  return app_notification_ != NULL ? *app_notification_
                         : *::sync_pb::AppNotification::internal_default_instance();
}
::sync_pb::AppNotification* EntitySpecifics::mutable_app_notification() {
  set_has_app_notification();
  if (app_notification_ == NULL) {
    app_notification_ = new ::sync_pb::AppNotification;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app_notification)
  return app_notification_;
}
::sync_pb::AppNotification* EntitySpecifics::release_app_notification() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app_notification)
  clear_has_app_notification();
  ::sync_pb::AppNotification* temp = app_notification_;
  app_notification_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_app_notification(::sync_pb::AppNotification* app_notification) {
  delete app_notification_;
  app_notification_ = app_notification;
  if (app_notification) {
    set_has_app_notification();
  } else {
    clear_has_app_notification();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app_notification)
}

// optional .sync_pb.PasswordSpecifics password = 45873;
bool EntitySpecifics::has_password() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EntitySpecifics::set_has_password() {
  _has_bits_[0] |= 0x00000080u;
}
void EntitySpecifics::clear_has_password() {
  _has_bits_[0] &= ~0x00000080u;
}
void EntitySpecifics::clear_password() {
  if (password_ != NULL) password_->::sync_pb::PasswordSpecifics::Clear();
  clear_has_password();
}
const ::sync_pb::PasswordSpecifics& EntitySpecifics::password() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.password)
  return password_ != NULL ? *password_
                         : *::sync_pb::PasswordSpecifics::internal_default_instance();
}
::sync_pb::PasswordSpecifics* EntitySpecifics::mutable_password() {
  set_has_password();
  if (password_ == NULL) {
    password_ = new ::sync_pb::PasswordSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.password)
  return password_;
}
::sync_pb::PasswordSpecifics* EntitySpecifics::release_password() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.password)
  clear_has_password();
  ::sync_pb::PasswordSpecifics* temp = password_;
  password_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_password(::sync_pb::PasswordSpecifics* password) {
  delete password_;
  password_ = password;
  if (password) {
    set_has_password();
  } else {
    clear_has_password();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.password)
}

// optional .sync_pb.NigoriSpecifics nigori = 47745;
bool EntitySpecifics::has_nigori() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EntitySpecifics::set_has_nigori() {
  _has_bits_[0] |= 0x00000100u;
}
void EntitySpecifics::clear_has_nigori() {
  _has_bits_[0] &= ~0x00000100u;
}
void EntitySpecifics::clear_nigori() {
  if (nigori_ != NULL) nigori_->::sync_pb::NigoriSpecifics::Clear();
  clear_has_nigori();
}
const ::sync_pb::NigoriSpecifics& EntitySpecifics::nigori() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.nigori)
  return nigori_ != NULL ? *nigori_
                         : *::sync_pb::NigoriSpecifics::internal_default_instance();
}
::sync_pb::NigoriSpecifics* EntitySpecifics::mutable_nigori() {
  set_has_nigori();
  if (nigori_ == NULL) {
    nigori_ = new ::sync_pb::NigoriSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.nigori)
  return nigori_;
}
::sync_pb::NigoriSpecifics* EntitySpecifics::release_nigori() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.nigori)
  clear_has_nigori();
  ::sync_pb::NigoriSpecifics* temp = nigori_;
  nigori_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_nigori(::sync_pb::NigoriSpecifics* nigori) {
  delete nigori_;
  nigori_ = nigori;
  if (nigori) {
    set_has_nigori();
  } else {
    clear_has_nigori();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.nigori)
}

// optional .sync_pb.ExtensionSpecifics extension = 48119;
bool EntitySpecifics::has_extension() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void EntitySpecifics::set_has_extension() {
  _has_bits_[0] |= 0x00000200u;
}
void EntitySpecifics::clear_has_extension() {
  _has_bits_[0] &= ~0x00000200u;
}
void EntitySpecifics::clear_extension() {
  if (extension_ != NULL) extension_->::sync_pb::ExtensionSpecifics::Clear();
  clear_has_extension();
}
const ::sync_pb::ExtensionSpecifics& EntitySpecifics::extension() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.extension)
  return extension_ != NULL ? *extension_
                         : *::sync_pb::ExtensionSpecifics::internal_default_instance();
}
::sync_pb::ExtensionSpecifics* EntitySpecifics::mutable_extension() {
  set_has_extension();
  if (extension_ == NULL) {
    extension_ = new ::sync_pb::ExtensionSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.extension)
  return extension_;
}
::sync_pb::ExtensionSpecifics* EntitySpecifics::release_extension() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.extension)
  clear_has_extension();
  ::sync_pb::ExtensionSpecifics* temp = extension_;
  extension_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_extension(::sync_pb::ExtensionSpecifics* extension) {
  delete extension_;
  extension_ = extension;
  if (extension) {
    set_has_extension();
  } else {
    clear_has_extension();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.extension)
}

// optional .sync_pb.AppSpecifics app = 48364;
bool EntitySpecifics::has_app() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void EntitySpecifics::set_has_app() {
  _has_bits_[0] |= 0x00000400u;
}
void EntitySpecifics::clear_has_app() {
  _has_bits_[0] &= ~0x00000400u;
}
void EntitySpecifics::clear_app() {
  if (app_ != NULL) app_->::sync_pb::AppSpecifics::Clear();
  clear_has_app();
}
const ::sync_pb::AppSpecifics& EntitySpecifics::app() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app)
  return app_ != NULL ? *app_
                         : *::sync_pb::AppSpecifics::internal_default_instance();
}
::sync_pb::AppSpecifics* EntitySpecifics::mutable_app() {
  set_has_app();
  if (app_ == NULL) {
    app_ = new ::sync_pb::AppSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app)
  return app_;
}
::sync_pb::AppSpecifics* EntitySpecifics::release_app() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app)
  clear_has_app();
  ::sync_pb::AppSpecifics* temp = app_;
  app_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_app(::sync_pb::AppSpecifics* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app)
}

// optional .sync_pb.SessionSpecifics session = 50119;
bool EntitySpecifics::has_session() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void EntitySpecifics::set_has_session() {
  _has_bits_[0] |= 0x00000800u;
}
void EntitySpecifics::clear_has_session() {
  _has_bits_[0] &= ~0x00000800u;
}
void EntitySpecifics::clear_session() {
  if (session_ != NULL) session_->::sync_pb::SessionSpecifics::Clear();
  clear_has_session();
}
const ::sync_pb::SessionSpecifics& EntitySpecifics::session() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.session)
  return session_ != NULL ? *session_
                         : *::sync_pb::SessionSpecifics::internal_default_instance();
}
::sync_pb::SessionSpecifics* EntitySpecifics::mutable_session() {
  set_has_session();
  if (session_ == NULL) {
    session_ = new ::sync_pb::SessionSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.session)
  return session_;
}
::sync_pb::SessionSpecifics* EntitySpecifics::release_session() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.session)
  clear_has_session();
  ::sync_pb::SessionSpecifics* temp = session_;
  session_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_session(::sync_pb::SessionSpecifics* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.session)
}

// optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
bool EntitySpecifics::has_autofill_profile() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void EntitySpecifics::set_has_autofill_profile() {
  _has_bits_[0] |= 0x00001000u;
}
void EntitySpecifics::clear_has_autofill_profile() {
  _has_bits_[0] &= ~0x00001000u;
}
void EntitySpecifics::clear_autofill_profile() {
  if (autofill_profile_ != NULL) autofill_profile_->::sync_pb::AutofillProfileSpecifics::Clear();
  clear_has_autofill_profile();
}
const ::sync_pb::AutofillProfileSpecifics& EntitySpecifics::autofill_profile() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill_profile)
  return autofill_profile_ != NULL ? *autofill_profile_
                         : *::sync_pb::AutofillProfileSpecifics::internal_default_instance();
}
::sync_pb::AutofillProfileSpecifics* EntitySpecifics::mutable_autofill_profile() {
  set_has_autofill_profile();
  if (autofill_profile_ == NULL) {
    autofill_profile_ = new ::sync_pb::AutofillProfileSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill_profile)
  return autofill_profile_;
}
::sync_pb::AutofillProfileSpecifics* EntitySpecifics::release_autofill_profile() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill_profile)
  clear_has_autofill_profile();
  ::sync_pb::AutofillProfileSpecifics* temp = autofill_profile_;
  autofill_profile_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_autofill_profile(::sync_pb::AutofillProfileSpecifics* autofill_profile) {
  delete autofill_profile_;
  autofill_profile_ = autofill_profile;
  if (autofill_profile) {
    set_has_autofill_profile();
  } else {
    clear_has_autofill_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill_profile)
}

// optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
bool EntitySpecifics::has_search_engine() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void EntitySpecifics::set_has_search_engine() {
  _has_bits_[0] |= 0x00002000u;
}
void EntitySpecifics::clear_has_search_engine() {
  _has_bits_[0] &= ~0x00002000u;
}
void EntitySpecifics::clear_search_engine() {
  if (search_engine_ != NULL) search_engine_->::sync_pb::SearchEngineSpecifics::Clear();
  clear_has_search_engine();
}
const ::sync_pb::SearchEngineSpecifics& EntitySpecifics::search_engine() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.search_engine)
  return search_engine_ != NULL ? *search_engine_
                         : *::sync_pb::SearchEngineSpecifics::internal_default_instance();
}
::sync_pb::SearchEngineSpecifics* EntitySpecifics::mutable_search_engine() {
  set_has_search_engine();
  if (search_engine_ == NULL) {
    search_engine_ = new ::sync_pb::SearchEngineSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.search_engine)
  return search_engine_;
}
::sync_pb::SearchEngineSpecifics* EntitySpecifics::release_search_engine() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.search_engine)
  clear_has_search_engine();
  ::sync_pb::SearchEngineSpecifics* temp = search_engine_;
  search_engine_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_search_engine(::sync_pb::SearchEngineSpecifics* search_engine) {
  delete search_engine_;
  search_engine_ = search_engine;
  if (search_engine) {
    set_has_search_engine();
  } else {
    clear_has_search_engine();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.search_engine)
}

// optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
bool EntitySpecifics::has_extension_setting() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void EntitySpecifics::set_has_extension_setting() {
  _has_bits_[0] |= 0x00004000u;
}
void EntitySpecifics::clear_has_extension_setting() {
  _has_bits_[0] &= ~0x00004000u;
}
void EntitySpecifics::clear_extension_setting() {
  if (extension_setting_ != NULL) extension_setting_->::sync_pb::ExtensionSettingSpecifics::Clear();
  clear_has_extension_setting();
}
const ::sync_pb::ExtensionSettingSpecifics& EntitySpecifics::extension_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.extension_setting)
  return extension_setting_ != NULL ? *extension_setting_
                         : *::sync_pb::ExtensionSettingSpecifics::internal_default_instance();
}
::sync_pb::ExtensionSettingSpecifics* EntitySpecifics::mutable_extension_setting() {
  set_has_extension_setting();
  if (extension_setting_ == NULL) {
    extension_setting_ = new ::sync_pb::ExtensionSettingSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.extension_setting)
  return extension_setting_;
}
::sync_pb::ExtensionSettingSpecifics* EntitySpecifics::release_extension_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.extension_setting)
  clear_has_extension_setting();
  ::sync_pb::ExtensionSettingSpecifics* temp = extension_setting_;
  extension_setting_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_extension_setting(::sync_pb::ExtensionSettingSpecifics* extension_setting) {
  delete extension_setting_;
  extension_setting_ = extension_setting;
  if (extension_setting) {
    set_has_extension_setting();
  } else {
    clear_has_extension_setting();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.extension_setting)
}

// optional .sync_pb.AppSettingSpecifics app_setting = 103656;
bool EntitySpecifics::has_app_setting() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void EntitySpecifics::set_has_app_setting() {
  _has_bits_[0] |= 0x00008000u;
}
void EntitySpecifics::clear_has_app_setting() {
  _has_bits_[0] &= ~0x00008000u;
}
void EntitySpecifics::clear_app_setting() {
  if (app_setting_ != NULL) app_setting_->::sync_pb::AppSettingSpecifics::Clear();
  clear_has_app_setting();
}
const ::sync_pb::AppSettingSpecifics& EntitySpecifics::app_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app_setting)
  return app_setting_ != NULL ? *app_setting_
                         : *::sync_pb::AppSettingSpecifics::internal_default_instance();
}
::sync_pb::AppSettingSpecifics* EntitySpecifics::mutable_app_setting() {
  set_has_app_setting();
  if (app_setting_ == NULL) {
    app_setting_ = new ::sync_pb::AppSettingSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app_setting)
  return app_setting_;
}
::sync_pb::AppSettingSpecifics* EntitySpecifics::release_app_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app_setting)
  clear_has_app_setting();
  ::sync_pb::AppSettingSpecifics* temp = app_setting_;
  app_setting_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_app_setting(::sync_pb::AppSettingSpecifics* app_setting) {
  delete app_setting_;
  app_setting_ = app_setting;
  if (app_setting) {
    set_has_app_setting();
  } else {
    clear_has_app_setting();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app_setting)
}

// optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
bool EntitySpecifics::has_history_delete_directive() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void EntitySpecifics::set_has_history_delete_directive() {
  _has_bits_[0] |= 0x00010000u;
}
void EntitySpecifics::clear_has_history_delete_directive() {
  _has_bits_[0] &= ~0x00010000u;
}
void EntitySpecifics::clear_history_delete_directive() {
  if (history_delete_directive_ != NULL) history_delete_directive_->::sync_pb::HistoryDeleteDirectiveSpecifics::Clear();
  clear_has_history_delete_directive();
}
const ::sync_pb::HistoryDeleteDirectiveSpecifics& EntitySpecifics::history_delete_directive() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.history_delete_directive)
  return history_delete_directive_ != NULL ? *history_delete_directive_
                         : *::sync_pb::HistoryDeleteDirectiveSpecifics::internal_default_instance();
}
::sync_pb::HistoryDeleteDirectiveSpecifics* EntitySpecifics::mutable_history_delete_directive() {
  set_has_history_delete_directive();
  if (history_delete_directive_ == NULL) {
    history_delete_directive_ = new ::sync_pb::HistoryDeleteDirectiveSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.history_delete_directive)
  return history_delete_directive_;
}
::sync_pb::HistoryDeleteDirectiveSpecifics* EntitySpecifics::release_history_delete_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.history_delete_directive)
  clear_has_history_delete_directive();
  ::sync_pb::HistoryDeleteDirectiveSpecifics* temp = history_delete_directive_;
  history_delete_directive_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_history_delete_directive(::sync_pb::HistoryDeleteDirectiveSpecifics* history_delete_directive) {
  delete history_delete_directive_;
  history_delete_directive_ = history_delete_directive;
  if (history_delete_directive) {
    set_has_history_delete_directive();
  } else {
    clear_has_history_delete_directive();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.history_delete_directive)
}

// optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108;
bool EntitySpecifics::has_synced_notification() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void EntitySpecifics::set_has_synced_notification() {
  _has_bits_[0] |= 0x00020000u;
}
void EntitySpecifics::clear_has_synced_notification() {
  _has_bits_[0] &= ~0x00020000u;
}
void EntitySpecifics::clear_synced_notification() {
  if (synced_notification_ != NULL) synced_notification_->::sync_pb::SyncedNotificationSpecifics::Clear();
  clear_has_synced_notification();
}
const ::sync_pb::SyncedNotificationSpecifics& EntitySpecifics::synced_notification() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.synced_notification)
  return synced_notification_ != NULL ? *synced_notification_
                         : *::sync_pb::SyncedNotificationSpecifics::internal_default_instance();
}
::sync_pb::SyncedNotificationSpecifics* EntitySpecifics::mutable_synced_notification() {
  set_has_synced_notification();
  if (synced_notification_ == NULL) {
    synced_notification_ = new ::sync_pb::SyncedNotificationSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.synced_notification)
  return synced_notification_;
}
::sync_pb::SyncedNotificationSpecifics* EntitySpecifics::release_synced_notification() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.synced_notification)
  clear_has_synced_notification();
  ::sync_pb::SyncedNotificationSpecifics* temp = synced_notification_;
  synced_notification_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_synced_notification(::sync_pb::SyncedNotificationSpecifics* synced_notification) {
  delete synced_notification_;
  synced_notification_ = synced_notification;
  if (synced_notification) {
    set_has_synced_notification();
  } else {
    clear_has_synced_notification();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.synced_notification)
}

// optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816;
bool EntitySpecifics::has_synced_notification_app_info() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void EntitySpecifics::set_has_synced_notification_app_info() {
  _has_bits_[0] |= 0x40000000u;
}
void EntitySpecifics::clear_has_synced_notification_app_info() {
  _has_bits_[0] &= ~0x40000000u;
}
void EntitySpecifics::clear_synced_notification_app_info() {
  if (synced_notification_app_info_ != NULL) synced_notification_app_info_->::sync_pb::SyncedNotificationAppInfoSpecifics::Clear();
  clear_has_synced_notification_app_info();
}
const ::sync_pb::SyncedNotificationAppInfoSpecifics& EntitySpecifics::synced_notification_app_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.synced_notification_app_info)
  return synced_notification_app_info_ != NULL ? *synced_notification_app_info_
                         : *::sync_pb::SyncedNotificationAppInfoSpecifics::internal_default_instance();
}
::sync_pb::SyncedNotificationAppInfoSpecifics* EntitySpecifics::mutable_synced_notification_app_info() {
  set_has_synced_notification_app_info();
  if (synced_notification_app_info_ == NULL) {
    synced_notification_app_info_ = new ::sync_pb::SyncedNotificationAppInfoSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.synced_notification_app_info)
  return synced_notification_app_info_;
}
::sync_pb::SyncedNotificationAppInfoSpecifics* EntitySpecifics::release_synced_notification_app_info() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.synced_notification_app_info)
  clear_has_synced_notification_app_info();
  ::sync_pb::SyncedNotificationAppInfoSpecifics* temp = synced_notification_app_info_;
  synced_notification_app_info_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_synced_notification_app_info(::sync_pb::SyncedNotificationAppInfoSpecifics* synced_notification_app_info) {
  delete synced_notification_app_info_;
  synced_notification_app_info_ = synced_notification_app_info;
  if (synced_notification_app_info) {
    set_has_synced_notification_app_info();
  } else {
    clear_has_synced_notification_app_info();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.synced_notification_app_info)
}

// optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
bool EntitySpecifics::has_device_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void EntitySpecifics::set_has_device_info() {
  _has_bits_[0] |= 0x00040000u;
}
void EntitySpecifics::clear_has_device_info() {
  _has_bits_[0] &= ~0x00040000u;
}
void EntitySpecifics::clear_device_info() {
  if (device_info_ != NULL) device_info_->::sync_pb::DeviceInfoSpecifics::Clear();
  clear_has_device_info();
}
const ::sync_pb::DeviceInfoSpecifics& EntitySpecifics::device_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.device_info)
  return device_info_ != NULL ? *device_info_
                         : *::sync_pb::DeviceInfoSpecifics::internal_default_instance();
}
::sync_pb::DeviceInfoSpecifics* EntitySpecifics::mutable_device_info() {
  set_has_device_info();
  if (device_info_ == NULL) {
    device_info_ = new ::sync_pb::DeviceInfoSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.device_info)
  return device_info_;
}
::sync_pb::DeviceInfoSpecifics* EntitySpecifics::release_device_info() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.device_info)
  clear_has_device_info();
  ::sync_pb::DeviceInfoSpecifics* temp = device_info_;
  device_info_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_device_info(::sync_pb::DeviceInfoSpecifics* device_info) {
  delete device_info_;
  device_info_ = device_info;
  if (device_info) {
    set_has_device_info();
  } else {
    clear_has_device_info();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.device_info)
}

// optional .sync_pb.ExperimentsSpecifics experiments = 161496;
bool EntitySpecifics::has_experiments() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void EntitySpecifics::set_has_experiments() {
  _has_bits_[0] |= 0x00080000u;
}
void EntitySpecifics::clear_has_experiments() {
  _has_bits_[0] &= ~0x00080000u;
}
void EntitySpecifics::clear_experiments() {
  if (experiments_ != NULL) experiments_->::sync_pb::ExperimentsSpecifics::Clear();
  clear_has_experiments();
}
const ::sync_pb::ExperimentsSpecifics& EntitySpecifics::experiments() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.experiments)
  return experiments_ != NULL ? *experiments_
                         : *::sync_pb::ExperimentsSpecifics::internal_default_instance();
}
::sync_pb::ExperimentsSpecifics* EntitySpecifics::mutable_experiments() {
  set_has_experiments();
  if (experiments_ == NULL) {
    experiments_ = new ::sync_pb::ExperimentsSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.experiments)
  return experiments_;
}
::sync_pb::ExperimentsSpecifics* EntitySpecifics::release_experiments() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.experiments)
  clear_has_experiments();
  ::sync_pb::ExperimentsSpecifics* temp = experiments_;
  experiments_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_experiments(::sync_pb::ExperimentsSpecifics* experiments) {
  delete experiments_;
  experiments_ = experiments;
  if (experiments) {
    set_has_experiments();
  } else {
    clear_has_experiments();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.experiments)
}

// optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
bool EntitySpecifics::has_priority_preference() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void EntitySpecifics::set_has_priority_preference() {
  _has_bits_[0] |= 0x00100000u;
}
void EntitySpecifics::clear_has_priority_preference() {
  _has_bits_[0] &= ~0x00100000u;
}
void EntitySpecifics::clear_priority_preference() {
  if (priority_preference_ != NULL) priority_preference_->::sync_pb::PriorityPreferenceSpecifics::Clear();
  clear_has_priority_preference();
}
const ::sync_pb::PriorityPreferenceSpecifics& EntitySpecifics::priority_preference() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.priority_preference)
  return priority_preference_ != NULL ? *priority_preference_
                         : *::sync_pb::PriorityPreferenceSpecifics::internal_default_instance();
}
::sync_pb::PriorityPreferenceSpecifics* EntitySpecifics::mutable_priority_preference() {
  set_has_priority_preference();
  if (priority_preference_ == NULL) {
    priority_preference_ = new ::sync_pb::PriorityPreferenceSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.priority_preference)
  return priority_preference_;
}
::sync_pb::PriorityPreferenceSpecifics* EntitySpecifics::release_priority_preference() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.priority_preference)
  clear_has_priority_preference();
  ::sync_pb::PriorityPreferenceSpecifics* temp = priority_preference_;
  priority_preference_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_priority_preference(::sync_pb::PriorityPreferenceSpecifics* priority_preference) {
  delete priority_preference_;
  priority_preference_ = priority_preference;
  if (priority_preference) {
    set_has_priority_preference();
  } else {
    clear_has_priority_preference();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.priority_preference)
}

// optional .sync_pb.DictionarySpecifics dictionary = 170540;
bool EntitySpecifics::has_dictionary() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void EntitySpecifics::set_has_dictionary() {
  _has_bits_[0] |= 0x00200000u;
}
void EntitySpecifics::clear_has_dictionary() {
  _has_bits_[0] &= ~0x00200000u;
}
void EntitySpecifics::clear_dictionary() {
  if (dictionary_ != NULL) dictionary_->::sync_pb::DictionarySpecifics::Clear();
  clear_has_dictionary();
}
const ::sync_pb::DictionarySpecifics& EntitySpecifics::dictionary() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.dictionary)
  return dictionary_ != NULL ? *dictionary_
                         : *::sync_pb::DictionarySpecifics::internal_default_instance();
}
::sync_pb::DictionarySpecifics* EntitySpecifics::mutable_dictionary() {
  set_has_dictionary();
  if (dictionary_ == NULL) {
    dictionary_ = new ::sync_pb::DictionarySpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.dictionary)
  return dictionary_;
}
::sync_pb::DictionarySpecifics* EntitySpecifics::release_dictionary() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.dictionary)
  clear_has_dictionary();
  ::sync_pb::DictionarySpecifics* temp = dictionary_;
  dictionary_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_dictionary(::sync_pb::DictionarySpecifics* dictionary) {
  delete dictionary_;
  dictionary_ = dictionary;
  if (dictionary) {
    set_has_dictionary();
  } else {
    clear_has_dictionary();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.dictionary)
}

// optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
bool EntitySpecifics::has_favicon_tracking() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void EntitySpecifics::set_has_favicon_tracking() {
  _has_bits_[0] |= 0x00400000u;
}
void EntitySpecifics::clear_has_favicon_tracking() {
  _has_bits_[0] &= ~0x00400000u;
}
void EntitySpecifics::clear_favicon_tracking() {
  if (favicon_tracking_ != NULL) favicon_tracking_->::sync_pb::FaviconTrackingSpecifics::Clear();
  clear_has_favicon_tracking();
}
const ::sync_pb::FaviconTrackingSpecifics& EntitySpecifics::favicon_tracking() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.favicon_tracking)
  return favicon_tracking_ != NULL ? *favicon_tracking_
                         : *::sync_pb::FaviconTrackingSpecifics::internal_default_instance();
}
::sync_pb::FaviconTrackingSpecifics* EntitySpecifics::mutable_favicon_tracking() {
  set_has_favicon_tracking();
  if (favicon_tracking_ == NULL) {
    favicon_tracking_ = new ::sync_pb::FaviconTrackingSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.favicon_tracking)
  return favicon_tracking_;
}
::sync_pb::FaviconTrackingSpecifics* EntitySpecifics::release_favicon_tracking() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.favicon_tracking)
  clear_has_favicon_tracking();
  ::sync_pb::FaviconTrackingSpecifics* temp = favicon_tracking_;
  favicon_tracking_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_favicon_tracking(::sync_pb::FaviconTrackingSpecifics* favicon_tracking) {
  delete favicon_tracking_;
  favicon_tracking_ = favicon_tracking;
  if (favicon_tracking) {
    set_has_favicon_tracking();
  } else {
    clear_has_favicon_tracking();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.favicon_tracking)
}

// optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
bool EntitySpecifics::has_favicon_image() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void EntitySpecifics::set_has_favicon_image() {
  _has_bits_[0] |= 0x00800000u;
}
void EntitySpecifics::clear_has_favicon_image() {
  _has_bits_[0] &= ~0x00800000u;
}
void EntitySpecifics::clear_favicon_image() {
  if (favicon_image_ != NULL) favicon_image_->::sync_pb::FaviconImageSpecifics::Clear();
  clear_has_favicon_image();
}
const ::sync_pb::FaviconImageSpecifics& EntitySpecifics::favicon_image() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.favicon_image)
  return favicon_image_ != NULL ? *favicon_image_
                         : *::sync_pb::FaviconImageSpecifics::internal_default_instance();
}
::sync_pb::FaviconImageSpecifics* EntitySpecifics::mutable_favicon_image() {
  set_has_favicon_image();
  if (favicon_image_ == NULL) {
    favicon_image_ = new ::sync_pb::FaviconImageSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.favicon_image)
  return favicon_image_;
}
::sync_pb::FaviconImageSpecifics* EntitySpecifics::release_favicon_image() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.favicon_image)
  clear_has_favicon_image();
  ::sync_pb::FaviconImageSpecifics* temp = favicon_image_;
  favicon_image_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_favicon_image(::sync_pb::FaviconImageSpecifics* favicon_image) {
  delete favicon_image_;
  favicon_image_ = favicon_image;
  if (favicon_image) {
    set_has_favicon_image();
  } else {
    clear_has_favicon_image();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.favicon_image)
}

// optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
bool EntitySpecifics::has_managed_user_setting() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void EntitySpecifics::set_has_managed_user_setting() {
  _has_bits_[0] |= 0x01000000u;
}
void EntitySpecifics::clear_has_managed_user_setting() {
  _has_bits_[0] &= ~0x01000000u;
}
void EntitySpecifics::clear_managed_user_setting() {
  if (managed_user_setting_ != NULL) managed_user_setting_->::sync_pb::ManagedUserSettingSpecifics::Clear();
  clear_has_managed_user_setting();
}
const ::sync_pb::ManagedUserSettingSpecifics& EntitySpecifics::managed_user_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user_setting)
  return managed_user_setting_ != NULL ? *managed_user_setting_
                         : *::sync_pb::ManagedUserSettingSpecifics::internal_default_instance();
}
::sync_pb::ManagedUserSettingSpecifics* EntitySpecifics::mutable_managed_user_setting() {
  set_has_managed_user_setting();
  if (managed_user_setting_ == NULL) {
    managed_user_setting_ = new ::sync_pb::ManagedUserSettingSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user_setting)
  return managed_user_setting_;
}
::sync_pb::ManagedUserSettingSpecifics* EntitySpecifics::release_managed_user_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user_setting)
  clear_has_managed_user_setting();
  ::sync_pb::ManagedUserSettingSpecifics* temp = managed_user_setting_;
  managed_user_setting_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_managed_user_setting(::sync_pb::ManagedUserSettingSpecifics* managed_user_setting) {
  delete managed_user_setting_;
  managed_user_setting_ = managed_user_setting;
  if (managed_user_setting) {
    set_has_managed_user_setting();
  } else {
    clear_has_managed_user_setting();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user_setting)
}

// optional .sync_pb.ManagedUserSpecifics managed_user = 194582;
bool EntitySpecifics::has_managed_user() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void EntitySpecifics::set_has_managed_user() {
  _has_bits_[0] |= 0x02000000u;
}
void EntitySpecifics::clear_has_managed_user() {
  _has_bits_[0] &= ~0x02000000u;
}
void EntitySpecifics::clear_managed_user() {
  if (managed_user_ != NULL) managed_user_->::sync_pb::ManagedUserSpecifics::Clear();
  clear_has_managed_user();
}
const ::sync_pb::ManagedUserSpecifics& EntitySpecifics::managed_user() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user)
  return managed_user_ != NULL ? *managed_user_
                         : *::sync_pb::ManagedUserSpecifics::internal_default_instance();
}
::sync_pb::ManagedUserSpecifics* EntitySpecifics::mutable_managed_user() {
  set_has_managed_user();
  if (managed_user_ == NULL) {
    managed_user_ = new ::sync_pb::ManagedUserSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user)
  return managed_user_;
}
::sync_pb::ManagedUserSpecifics* EntitySpecifics::release_managed_user() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user)
  clear_has_managed_user();
  ::sync_pb::ManagedUserSpecifics* temp = managed_user_;
  managed_user_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_managed_user(::sync_pb::ManagedUserSpecifics* managed_user) {
  delete managed_user_;
  managed_user_ = managed_user;
  if (managed_user) {
    set_has_managed_user();
  } else {
    clear_has_managed_user();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user)
}

// optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026;
bool EntitySpecifics::has_managed_user_shared_setting() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void EntitySpecifics::set_has_managed_user_shared_setting() {
  _has_bits_[0] |= 0x04000000u;
}
void EntitySpecifics::clear_has_managed_user_shared_setting() {
  _has_bits_[0] &= ~0x04000000u;
}
void EntitySpecifics::clear_managed_user_shared_setting() {
  if (managed_user_shared_setting_ != NULL) managed_user_shared_setting_->::sync_pb::ManagedUserSharedSettingSpecifics::Clear();
  clear_has_managed_user_shared_setting();
}
const ::sync_pb::ManagedUserSharedSettingSpecifics& EntitySpecifics::managed_user_shared_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user_shared_setting)
  return managed_user_shared_setting_ != NULL ? *managed_user_shared_setting_
                         : *::sync_pb::ManagedUserSharedSettingSpecifics::internal_default_instance();
}
::sync_pb::ManagedUserSharedSettingSpecifics* EntitySpecifics::mutable_managed_user_shared_setting() {
  set_has_managed_user_shared_setting();
  if (managed_user_shared_setting_ == NULL) {
    managed_user_shared_setting_ = new ::sync_pb::ManagedUserSharedSettingSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user_shared_setting)
  return managed_user_shared_setting_;
}
::sync_pb::ManagedUserSharedSettingSpecifics* EntitySpecifics::release_managed_user_shared_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user_shared_setting)
  clear_has_managed_user_shared_setting();
  ::sync_pb::ManagedUserSharedSettingSpecifics* temp = managed_user_shared_setting_;
  managed_user_shared_setting_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_managed_user_shared_setting(::sync_pb::ManagedUserSharedSettingSpecifics* managed_user_shared_setting) {
  delete managed_user_shared_setting_;
  managed_user_shared_setting_ = managed_user_shared_setting;
  if (managed_user_shared_setting) {
    set_has_managed_user_shared_setting();
  } else {
    clear_has_managed_user_shared_setting();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user_shared_setting)
}

// optional .sync_pb.ManagedUserWhitelistSpecifics managed_user_whitelist = 306060;
bool EntitySpecifics::has_managed_user_whitelist() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void EntitySpecifics::set_has_managed_user_whitelist() {
  _has_bits_[0] |= 0x80000000u;
}
void EntitySpecifics::clear_has_managed_user_whitelist() {
  _has_bits_[0] &= ~0x80000000u;
}
void EntitySpecifics::clear_managed_user_whitelist() {
  if (managed_user_whitelist_ != NULL) managed_user_whitelist_->::sync_pb::ManagedUserWhitelistSpecifics::Clear();
  clear_has_managed_user_whitelist();
}
const ::sync_pb::ManagedUserWhitelistSpecifics& EntitySpecifics::managed_user_whitelist() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user_whitelist)
  return managed_user_whitelist_ != NULL ? *managed_user_whitelist_
                         : *::sync_pb::ManagedUserWhitelistSpecifics::internal_default_instance();
}
::sync_pb::ManagedUserWhitelistSpecifics* EntitySpecifics::mutable_managed_user_whitelist() {
  set_has_managed_user_whitelist();
  if (managed_user_whitelist_ == NULL) {
    managed_user_whitelist_ = new ::sync_pb::ManagedUserWhitelistSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user_whitelist)
  return managed_user_whitelist_;
}
::sync_pb::ManagedUserWhitelistSpecifics* EntitySpecifics::release_managed_user_whitelist() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user_whitelist)
  clear_has_managed_user_whitelist();
  ::sync_pb::ManagedUserWhitelistSpecifics* temp = managed_user_whitelist_;
  managed_user_whitelist_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_managed_user_whitelist(::sync_pb::ManagedUserWhitelistSpecifics* managed_user_whitelist) {
  delete managed_user_whitelist_;
  managed_user_whitelist_ = managed_user_whitelist;
  if (managed_user_whitelist) {
    set_has_managed_user_whitelist();
  } else {
    clear_has_managed_user_whitelist();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user_whitelist)
}

// optional .sync_pb.ArticleSpecifics article = 223759;
bool EntitySpecifics::has_article() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void EntitySpecifics::set_has_article() {
  _has_bits_[0] |= 0x10000000u;
}
void EntitySpecifics::clear_has_article() {
  _has_bits_[0] &= ~0x10000000u;
}
void EntitySpecifics::clear_article() {
  if (article_ != NULL) article_->::sync_pb::ArticleSpecifics::Clear();
  clear_has_article();
}
const ::sync_pb::ArticleSpecifics& EntitySpecifics::article() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.article)
  return article_ != NULL ? *article_
                         : *::sync_pb::ArticleSpecifics::internal_default_instance();
}
::sync_pb::ArticleSpecifics* EntitySpecifics::mutable_article() {
  set_has_article();
  if (article_ == NULL) {
    article_ = new ::sync_pb::ArticleSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.article)
  return article_;
}
::sync_pb::ArticleSpecifics* EntitySpecifics::release_article() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.article)
  clear_has_article();
  ::sync_pb::ArticleSpecifics* temp = article_;
  article_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_article(::sync_pb::ArticleSpecifics* article) {
  delete article_;
  article_ = article;
  if (article) {
    set_has_article();
  } else {
    clear_has_article();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.article)
}

// optional .sync_pb.AppListSpecifics app_list = 229170;
bool EntitySpecifics::has_app_list() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void EntitySpecifics::set_has_app_list() {
  _has_bits_[0] |= 0x20000000u;
}
void EntitySpecifics::clear_has_app_list() {
  _has_bits_[0] &= ~0x20000000u;
}
void EntitySpecifics::clear_app_list() {
  if (app_list_ != NULL) app_list_->::sync_pb::AppListSpecifics::Clear();
  clear_has_app_list();
}
const ::sync_pb::AppListSpecifics& EntitySpecifics::app_list() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app_list)
  return app_list_ != NULL ? *app_list_
                         : *::sync_pb::AppListSpecifics::internal_default_instance();
}
::sync_pb::AppListSpecifics* EntitySpecifics::mutable_app_list() {
  set_has_app_list();
  if (app_list_ == NULL) {
    app_list_ = new ::sync_pb::AppListSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app_list)
  return app_list_;
}
::sync_pb::AppListSpecifics* EntitySpecifics::release_app_list() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app_list)
  clear_has_app_list();
  ::sync_pb::AppListSpecifics* temp = app_list_;
  app_list_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_app_list(::sync_pb::AppListSpecifics* app_list) {
  delete app_list_;
  app_list_ = app_list;
  if (app_list) {
    set_has_app_list();
  } else {
    clear_has_app_list();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app_list)
}

// optional .sync_pb.WifiCredentialSpecifics wifi_credential = 218175;
bool EntitySpecifics::has_wifi_credential() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void EntitySpecifics::set_has_wifi_credential() {
  _has_bits_[0] |= 0x08000000u;
}
void EntitySpecifics::clear_has_wifi_credential() {
  _has_bits_[0] &= ~0x08000000u;
}
void EntitySpecifics::clear_wifi_credential() {
  if (wifi_credential_ != NULL) wifi_credential_->::sync_pb::WifiCredentialSpecifics::Clear();
  clear_has_wifi_credential();
}
const ::sync_pb::WifiCredentialSpecifics& EntitySpecifics::wifi_credential() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.wifi_credential)
  return wifi_credential_ != NULL ? *wifi_credential_
                         : *::sync_pb::WifiCredentialSpecifics::internal_default_instance();
}
::sync_pb::WifiCredentialSpecifics* EntitySpecifics::mutable_wifi_credential() {
  set_has_wifi_credential();
  if (wifi_credential_ == NULL) {
    wifi_credential_ = new ::sync_pb::WifiCredentialSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.wifi_credential)
  return wifi_credential_;
}
::sync_pb::WifiCredentialSpecifics* EntitySpecifics::release_wifi_credential() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.wifi_credential)
  clear_has_wifi_credential();
  ::sync_pb::WifiCredentialSpecifics* temp = wifi_credential_;
  wifi_credential_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_wifi_credential(::sync_pb::WifiCredentialSpecifics* wifi_credential) {
  delete wifi_credential_;
  wifi_credential_ = wifi_credential;
  if (wifi_credential) {
    set_has_wifi_credential();
  } else {
    clear_has_wifi_credential();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.wifi_credential)
}

// optional .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
bool EntitySpecifics::has_autofill_wallet() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void EntitySpecifics::set_has_autofill_wallet() {
  _has_bits_[1] |= 0x00000001u;
}
void EntitySpecifics::clear_has_autofill_wallet() {
  _has_bits_[1] &= ~0x00000001u;
}
void EntitySpecifics::clear_autofill_wallet() {
  if (autofill_wallet_ != NULL) autofill_wallet_->::sync_pb::AutofillWalletSpecifics::Clear();
  clear_has_autofill_wallet();
}
const ::sync_pb::AutofillWalletSpecifics& EntitySpecifics::autofill_wallet() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill_wallet)
  return autofill_wallet_ != NULL ? *autofill_wallet_
                         : *::sync_pb::AutofillWalletSpecifics::internal_default_instance();
}
::sync_pb::AutofillWalletSpecifics* EntitySpecifics::mutable_autofill_wallet() {
  set_has_autofill_wallet();
  if (autofill_wallet_ == NULL) {
    autofill_wallet_ = new ::sync_pb::AutofillWalletSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill_wallet)
  return autofill_wallet_;
}
::sync_pb::AutofillWalletSpecifics* EntitySpecifics::release_autofill_wallet() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill_wallet)
  clear_has_autofill_wallet();
  ::sync_pb::AutofillWalletSpecifics* temp = autofill_wallet_;
  autofill_wallet_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_autofill_wallet(::sync_pb::AutofillWalletSpecifics* autofill_wallet) {
  delete autofill_wallet_;
  autofill_wallet_ = autofill_wallet;
  if (autofill_wallet) {
    set_has_autofill_wallet();
  } else {
    clear_has_autofill_wallet();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill_wallet)
}

// optional .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
bool EntitySpecifics::has_wallet_metadata() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void EntitySpecifics::set_has_wallet_metadata() {
  _has_bits_[1] |= 0x00000002u;
}
void EntitySpecifics::clear_has_wallet_metadata() {
  _has_bits_[1] &= ~0x00000002u;
}
void EntitySpecifics::clear_wallet_metadata() {
  if (wallet_metadata_ != NULL) wallet_metadata_->::sync_pb::WalletMetadataSpecifics::Clear();
  clear_has_wallet_metadata();
}
const ::sync_pb::WalletMetadataSpecifics& EntitySpecifics::wallet_metadata() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.wallet_metadata)
  return wallet_metadata_ != NULL ? *wallet_metadata_
                         : *::sync_pb::WalletMetadataSpecifics::internal_default_instance();
}
::sync_pb::WalletMetadataSpecifics* EntitySpecifics::mutable_wallet_metadata() {
  set_has_wallet_metadata();
  if (wallet_metadata_ == NULL) {
    wallet_metadata_ = new ::sync_pb::WalletMetadataSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.wallet_metadata)
  return wallet_metadata_;
}
::sync_pb::WalletMetadataSpecifics* EntitySpecifics::release_wallet_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.wallet_metadata)
  clear_has_wallet_metadata();
  ::sync_pb::WalletMetadataSpecifics* temp = wallet_metadata_;
  wallet_metadata_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_wallet_metadata(::sync_pb::WalletMetadataSpecifics* wallet_metadata) {
  delete wallet_metadata_;
  wallet_metadata_ = wallet_metadata;
  if (wallet_metadata) {
    set_has_wallet_metadata();
  } else {
    clear_has_wallet_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.wallet_metadata)
}

// optional .sync_pb.ArcPackageSpecifics arc_package = 340906;
bool EntitySpecifics::has_arc_package() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void EntitySpecifics::set_has_arc_package() {
  _has_bits_[1] |= 0x00000004u;
}
void EntitySpecifics::clear_has_arc_package() {
  _has_bits_[1] &= ~0x00000004u;
}
void EntitySpecifics::clear_arc_package() {
  if (arc_package_ != NULL) arc_package_->::sync_pb::ArcPackageSpecifics::Clear();
  clear_has_arc_package();
}
const ::sync_pb::ArcPackageSpecifics& EntitySpecifics::arc_package() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.arc_package)
  return arc_package_ != NULL ? *arc_package_
                         : *::sync_pb::ArcPackageSpecifics::internal_default_instance();
}
::sync_pb::ArcPackageSpecifics* EntitySpecifics::mutable_arc_package() {
  set_has_arc_package();
  if (arc_package_ == NULL) {
    arc_package_ = new ::sync_pb::ArcPackageSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.arc_package)
  return arc_package_;
}
::sync_pb::ArcPackageSpecifics* EntitySpecifics::release_arc_package() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.arc_package)
  clear_has_arc_package();
  ::sync_pb::ArcPackageSpecifics* temp = arc_package_;
  arc_package_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_arc_package(::sync_pb::ArcPackageSpecifics* arc_package) {
  delete arc_package_;
  arc_package_ = arc_package;
  if (arc_package) {
    set_has_arc_package();
  } else {
    clear_has_arc_package();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.arc_package)
}

// optional .sync_pb.PrinterSpecifics printer = 410745;
bool EntitySpecifics::has_printer() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void EntitySpecifics::set_has_printer() {
  _has_bits_[1] |= 0x00000008u;
}
void EntitySpecifics::clear_has_printer() {
  _has_bits_[1] &= ~0x00000008u;
}
void EntitySpecifics::clear_printer() {
  if (printer_ != NULL) printer_->::sync_pb::PrinterSpecifics::Clear();
  clear_has_printer();
}
const ::sync_pb::PrinterSpecifics& EntitySpecifics::printer() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.printer)
  return printer_ != NULL ? *printer_
                         : *::sync_pb::PrinterSpecifics::internal_default_instance();
}
::sync_pb::PrinterSpecifics* EntitySpecifics::mutable_printer() {
  set_has_printer();
  if (printer_ == NULL) {
    printer_ = new ::sync_pb::PrinterSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.printer)
  return printer_;
}
::sync_pb::PrinterSpecifics* EntitySpecifics::release_printer() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.printer)
  clear_has_printer();
  ::sync_pb::PrinterSpecifics* temp = printer_;
  printer_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_printer(::sync_pb::PrinterSpecifics* printer) {
  delete printer_;
  printer_ = printer;
  if (printer) {
    set_has_printer();
  } else {
    clear_has_printer();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.printer)
}

// optional .sync_pb.ReadingListSpecifics reading_list = 411028;
bool EntitySpecifics::has_reading_list() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void EntitySpecifics::set_has_reading_list() {
  _has_bits_[1] |= 0x00000010u;
}
void EntitySpecifics::clear_has_reading_list() {
  _has_bits_[1] &= ~0x00000010u;
}
void EntitySpecifics::clear_reading_list() {
  if (reading_list_ != NULL) reading_list_->::sync_pb::ReadingListSpecifics::Clear();
  clear_has_reading_list();
}
const ::sync_pb::ReadingListSpecifics& EntitySpecifics::reading_list() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.reading_list)
  return reading_list_ != NULL ? *reading_list_
                         : *::sync_pb::ReadingListSpecifics::internal_default_instance();
}
::sync_pb::ReadingListSpecifics* EntitySpecifics::mutable_reading_list() {
  set_has_reading_list();
  if (reading_list_ == NULL) {
    reading_list_ = new ::sync_pb::ReadingListSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.reading_list)
  return reading_list_;
}
::sync_pb::ReadingListSpecifics* EntitySpecifics::release_reading_list() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.reading_list)
  clear_has_reading_list();
  ::sync_pb::ReadingListSpecifics* temp = reading_list_;
  reading_list_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_reading_list(::sync_pb::ReadingListSpecifics* reading_list) {
  delete reading_list_;
  reading_list_ = reading_list;
  if (reading_list) {
    set_has_reading_list();
  } else {
    clear_has_reading_list();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.reading_list)
}

// optional .sync_pb.UserEventSpecifics user_event = 455206;
bool EntitySpecifics::has_user_event() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void EntitySpecifics::set_has_user_event() {
  _has_bits_[1] |= 0x00000020u;
}
void EntitySpecifics::clear_has_user_event() {
  _has_bits_[1] &= ~0x00000020u;
}
void EntitySpecifics::clear_user_event() {
  if (user_event_ != NULL) user_event_->::sync_pb::UserEventSpecifics::Clear();
  clear_has_user_event();
}
const ::sync_pb::UserEventSpecifics& EntitySpecifics::user_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.user_event)
  return user_event_ != NULL ? *user_event_
                         : *::sync_pb::UserEventSpecifics::internal_default_instance();
}
::sync_pb::UserEventSpecifics* EntitySpecifics::mutable_user_event() {
  set_has_user_event();
  if (user_event_ == NULL) {
    user_event_ = new ::sync_pb::UserEventSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.user_event)
  return user_event_;
}
::sync_pb::UserEventSpecifics* EntitySpecifics::release_user_event() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.user_event)
  clear_has_user_event();
  ::sync_pb::UserEventSpecifics* temp = user_event_;
  user_event_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_user_event(::sync_pb::UserEventSpecifics* user_event) {
  delete user_event_;
  user_event_ = user_event;
  if (user_event) {
    set_has_user_event();
  } else {
    clear_has_user_event();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.user_event)
}

// optional .sync_pb.UserConsentSpecifics user_consent = 556014;
bool EntitySpecifics::has_user_consent() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void EntitySpecifics::set_has_user_consent() {
  _has_bits_[1] |= 0x00000080u;
}
void EntitySpecifics::clear_has_user_consent() {
  _has_bits_[1] &= ~0x00000080u;
}
void EntitySpecifics::clear_user_consent() {
  if (user_consent_ != NULL) user_consent_->::sync_pb::UserConsentSpecifics::Clear();
  clear_has_user_consent();
}
const ::sync_pb::UserConsentSpecifics& EntitySpecifics::user_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.user_consent)
  return user_consent_ != NULL ? *user_consent_
                         : *::sync_pb::UserConsentSpecifics::internal_default_instance();
}
::sync_pb::UserConsentSpecifics* EntitySpecifics::mutable_user_consent() {
  set_has_user_consent();
  if (user_consent_ == NULL) {
    user_consent_ = new ::sync_pb::UserConsentSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.user_consent)
  return user_consent_;
}
::sync_pb::UserConsentSpecifics* EntitySpecifics::release_user_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.user_consent)
  clear_has_user_consent();
  ::sync_pb::UserConsentSpecifics* temp = user_consent_;
  user_consent_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_user_consent(::sync_pb::UserConsentSpecifics* user_consent) {
  delete user_consent_;
  user_consent_ = user_consent;
  if (user_consent) {
    set_has_user_consent();
  } else {
    clear_has_user_consent();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.user_consent)
}

// optional .sync_pb.MountainShareSpecifics mountain_share = 545005;
bool EntitySpecifics::has_mountain_share() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void EntitySpecifics::set_has_mountain_share() {
  _has_bits_[1] |= 0x00000040u;
}
void EntitySpecifics::clear_has_mountain_share() {
  _has_bits_[1] &= ~0x00000040u;
}
void EntitySpecifics::clear_mountain_share() {
  if (mountain_share_ != NULL) mountain_share_->::sync_pb::MountainShareSpecifics::Clear();
  clear_has_mountain_share();
}
const ::sync_pb::MountainShareSpecifics& EntitySpecifics::mountain_share() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.mountain_share)
  return mountain_share_ != NULL ? *mountain_share_
                         : *::sync_pb::MountainShareSpecifics::internal_default_instance();
}
::sync_pb::MountainShareSpecifics* EntitySpecifics::mutable_mountain_share() {
  set_has_mountain_share();
  if (mountain_share_ == NULL) {
    mountain_share_ = new ::sync_pb::MountainShareSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.mountain_share)
  return mountain_share_;
}
::sync_pb::MountainShareSpecifics* EntitySpecifics::release_mountain_share() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.mountain_share)
  clear_has_mountain_share();
  ::sync_pb::MountainShareSpecifics* temp = mountain_share_;
  mountain_share_ = NULL;
  return temp;
}
void EntitySpecifics::set_allocated_mountain_share(::sync_pb::MountainShareSpecifics* mountain_share) {
  delete mountain_share_;
  mountain_share_ = mountain_share;
  if (mountain_share) {
    set_has_mountain_share();
  } else {
    clear_has_mountain_share();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.mountain_share)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncEntity_BookmarkData::kBookmarkFolderFieldNumber;
const int SyncEntity_BookmarkData::kBookmarkUrlFieldNumber;
const int SyncEntity_BookmarkData::kBookmarkFaviconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncEntity_BookmarkData::SyncEntity_BookmarkData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SyncEntity.BookmarkData)
}
SyncEntity_BookmarkData::SyncEntity_BookmarkData(const SyncEntity_BookmarkData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bookmark_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bookmark_url()) {
    bookmark_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bookmark_url_);
  }
  bookmark_favicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bookmark_favicon()) {
    bookmark_favicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bookmark_favicon_);
  }
  bookmark_folder_ = from.bookmark_folder_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SyncEntity.BookmarkData)
}

void SyncEntity_BookmarkData::SharedCtor() {
  _cached_size_ = 0;
  bookmark_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bookmark_favicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bookmark_folder_ = false;
}

SyncEntity_BookmarkData::~SyncEntity_BookmarkData() {
  // @@protoc_insertion_point(destructor:sync_pb.SyncEntity.BookmarkData)
  SharedDtor();
}

void SyncEntity_BookmarkData::SharedDtor() {
  bookmark_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bookmark_favicon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SyncEntity_BookmarkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncEntity_BookmarkData& SyncEntity_BookmarkData::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncEntity_BookmarkData* SyncEntity_BookmarkData::New(::google::protobuf::Arena* arena) const {
  SyncEntity_BookmarkData* n = new SyncEntity_BookmarkData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncEntity_BookmarkData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SyncEntity.BookmarkData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_bookmark_url()) {
      GOOGLE_DCHECK(!bookmark_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bookmark_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_bookmark_favicon()) {
      GOOGLE_DCHECK(!bookmark_favicon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bookmark_favicon_.UnsafeRawStringPointer())->clear();
    }
  }
  bookmark_folder_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncEntity_BookmarkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SyncEntity.BookmarkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool bookmark_folder = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_bookmark_folder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bookmark_folder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bookmark_url = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bookmark_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bookmark_favicon = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bookmark_favicon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SyncEntity.BookmarkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SyncEntity.BookmarkData)
  return false;
#undef DO_
}

void SyncEntity_BookmarkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SyncEntity.BookmarkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool bookmark_folder = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->bookmark_folder(), output);
  }

  // optional string bookmark_url = 13;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->bookmark_url(), output);
  }

  // optional bytes bookmark_favicon = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->bookmark_favicon(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SyncEntity.BookmarkData)
}

size_t SyncEntity_BookmarkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SyncEntity.BookmarkData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required bool bookmark_folder = 12;
  if (has_bookmark_folder()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string bookmark_url = 13;
    if (has_bookmark_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bookmark_url());
    }

    // optional bytes bookmark_favicon = 14;
    if (has_bookmark_favicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bookmark_favicon());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncEntity_BookmarkData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncEntity_BookmarkData*>(&from));
}

void SyncEntity_BookmarkData::MergeFrom(const SyncEntity_BookmarkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SyncEntity.BookmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bookmark_url();
      bookmark_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bookmark_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bookmark_favicon();
      bookmark_favicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bookmark_favicon_);
    }
    if (cached_has_bits & 0x00000004u) {
      bookmark_folder_ = from.bookmark_folder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncEntity_BookmarkData::CopyFrom(const SyncEntity_BookmarkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SyncEntity.BookmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEntity_BookmarkData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void SyncEntity_BookmarkData::Swap(SyncEntity_BookmarkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncEntity_BookmarkData::InternalSwap(SyncEntity_BookmarkData* other) {
  bookmark_url_.Swap(&other->bookmark_url_);
  bookmark_favicon_.Swap(&other->bookmark_favicon_);
  std::swap(bookmark_folder_, other->bookmark_folder_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SyncEntity_BookmarkData::GetTypeName() const {
  return "sync_pb.SyncEntity.BookmarkData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncEntity_BookmarkData

// required bool bookmark_folder = 12;
bool SyncEntity_BookmarkData::has_bookmark_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SyncEntity_BookmarkData::set_has_bookmark_folder() {
  _has_bits_[0] |= 0x00000004u;
}
void SyncEntity_BookmarkData::clear_has_bookmark_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
void SyncEntity_BookmarkData::clear_bookmark_folder() {
  bookmark_folder_ = false;
  clear_has_bookmark_folder();
}
bool SyncEntity_BookmarkData::bookmark_folder() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.BookmarkData.bookmark_folder)
  return bookmark_folder_;
}
void SyncEntity_BookmarkData::set_bookmark_folder(bool value) {
  set_has_bookmark_folder();
  bookmark_folder_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.BookmarkData.bookmark_folder)
}

// optional string bookmark_url = 13;
bool SyncEntity_BookmarkData::has_bookmark_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncEntity_BookmarkData::set_has_bookmark_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncEntity_BookmarkData::clear_has_bookmark_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncEntity_BookmarkData::clear_bookmark_url() {
  bookmark_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bookmark_url();
}
const ::std::string& SyncEntity_BookmarkData::bookmark_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.BookmarkData.bookmark_url)
  return bookmark_url_.GetNoArena();
}
void SyncEntity_BookmarkData::set_bookmark_url(const ::std::string& value) {
  set_has_bookmark_url();
  bookmark_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.BookmarkData.bookmark_url)
}
#if LANG_CXX11
void SyncEntity_BookmarkData::set_bookmark_url(::std::string&& value) {
  set_has_bookmark_url();
  bookmark_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.BookmarkData.bookmark_url)
}
#endif
void SyncEntity_BookmarkData::set_bookmark_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bookmark_url();
  bookmark_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.BookmarkData.bookmark_url)
}
void SyncEntity_BookmarkData::set_bookmark_url(const char* value, size_t size) {
  set_has_bookmark_url();
  bookmark_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.BookmarkData.bookmark_url)
}
::std::string* SyncEntity_BookmarkData::mutable_bookmark_url() {
  set_has_bookmark_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.BookmarkData.bookmark_url)
  return bookmark_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity_BookmarkData::release_bookmark_url() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.BookmarkData.bookmark_url)
  clear_has_bookmark_url();
  return bookmark_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity_BookmarkData::set_allocated_bookmark_url(::std::string* bookmark_url) {
  if (bookmark_url != NULL) {
    set_has_bookmark_url();
  } else {
    clear_has_bookmark_url();
  }
  bookmark_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bookmark_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.BookmarkData.bookmark_url)
}

// optional bytes bookmark_favicon = 14;
bool SyncEntity_BookmarkData::has_bookmark_favicon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncEntity_BookmarkData::set_has_bookmark_favicon() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncEntity_BookmarkData::clear_has_bookmark_favicon() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncEntity_BookmarkData::clear_bookmark_favicon() {
  bookmark_favicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bookmark_favicon();
}
const ::std::string& SyncEntity_BookmarkData::bookmark_favicon() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.BookmarkData.bookmark_favicon)
  return bookmark_favicon_.GetNoArena();
}
void SyncEntity_BookmarkData::set_bookmark_favicon(const ::std::string& value) {
  set_has_bookmark_favicon();
  bookmark_favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.BookmarkData.bookmark_favicon)
}
#if LANG_CXX11
void SyncEntity_BookmarkData::set_bookmark_favicon(::std::string&& value) {
  set_has_bookmark_favicon();
  bookmark_favicon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.BookmarkData.bookmark_favicon)
}
#endif
void SyncEntity_BookmarkData::set_bookmark_favicon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bookmark_favicon();
  bookmark_favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.BookmarkData.bookmark_favicon)
}
void SyncEntity_BookmarkData::set_bookmark_favicon(const void* value, size_t size) {
  set_has_bookmark_favicon();
  bookmark_favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.BookmarkData.bookmark_favicon)
}
::std::string* SyncEntity_BookmarkData::mutable_bookmark_favicon() {
  set_has_bookmark_favicon();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.BookmarkData.bookmark_favicon)
  return bookmark_favicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity_BookmarkData::release_bookmark_favicon() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.BookmarkData.bookmark_favicon)
  clear_has_bookmark_favicon();
  return bookmark_favicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity_BookmarkData::set_allocated_bookmark_favicon(::std::string* bookmark_favicon) {
  if (bookmark_favicon != NULL) {
    set_has_bookmark_favicon();
  } else {
    clear_has_bookmark_favicon();
  }
  bookmark_favicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bookmark_favicon);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.BookmarkData.bookmark_favicon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncEntity::kIdStringFieldNumber;
const int SyncEntity::kParentIdStringFieldNumber;
const int SyncEntity::kOldParentIdFieldNumber;
const int SyncEntity::kVersionFieldNumber;
const int SyncEntity::kMtimeFieldNumber;
const int SyncEntity::kCtimeFieldNumber;
const int SyncEntity::kNameFieldNumber;
const int SyncEntity::kNonUniqueNameFieldNumber;
const int SyncEntity::kSyncTimestampFieldNumber;
const int SyncEntity::kServerDefinedUniqueTagFieldNumber;
const int SyncEntity::kBookmarkdataFieldNumber;
const int SyncEntity::kPositionInParentFieldNumber;
const int SyncEntity::kInsertAfterItemIdFieldNumber;
const int SyncEntity::kDeletedFieldNumber;
const int SyncEntity::kOriginatorCacheGuidFieldNumber;
const int SyncEntity::kOriginatorClientItemIdFieldNumber;
const int SyncEntity::kSpecificsFieldNumber;
const int SyncEntity::kFolderFieldNumber;
const int SyncEntity::kClientDefinedUniqueTagFieldNumber;
const int SyncEntity::kOrdinalInParentFieldNumber;
const int SyncEntity::kUniquePositionFieldNumber;
const int SyncEntity::kAttachmentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncEntity::SyncEntity()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SyncEntity)
}
SyncEntity::SyncEntity(const SyncEntity& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      attachment_id_(from.attachment_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id_string()) {
    id_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_string_);
  }
  parent_id_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_id_string()) {
    parent_id_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_string_);
  }
  old_parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_old_parent_id()) {
    old_parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_parent_id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  non_unique_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_non_unique_name()) {
    non_unique_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.non_unique_name_);
  }
  server_defined_unique_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_defined_unique_tag()) {
    server_defined_unique_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_defined_unique_tag_);
  }
  insert_after_item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_insert_after_item_id()) {
    insert_after_item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_after_item_id_);
  }
  originator_cache_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_originator_cache_guid()) {
    originator_cache_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originator_cache_guid_);
  }
  originator_client_item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_originator_client_item_id()) {
    originator_client_item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originator_client_item_id_);
  }
  client_defined_unique_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_defined_unique_tag()) {
    client_defined_unique_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_defined_unique_tag_);
  }
  ordinal_in_parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ordinal_in_parent()) {
    ordinal_in_parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordinal_in_parent_);
  }
  if (from.has_bookmarkdata()) {
    bookmarkdata_ = new ::sync_pb::SyncEntity_BookmarkData(*from.bookmarkdata_);
  } else {
    bookmarkdata_ = NULL;
  }
  if (from.has_specifics()) {
    specifics_ = new ::sync_pb::EntitySpecifics(*from.specifics_);
  } else {
    specifics_ = NULL;
  }
  if (from.has_unique_position()) {
    unique_position_ = new ::sync_pb::UniquePosition(*from.unique_position_);
  } else {
    unique_position_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&folder_) -
    reinterpret_cast<char*>(&version_)) + sizeof(folder_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SyncEntity)
}

void SyncEntity::SharedCtor() {
  _cached_size_ = 0;
  id_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  non_unique_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_defined_unique_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_after_item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originator_cache_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originator_client_item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_defined_unique_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordinal_in_parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bookmarkdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&folder_) -
      reinterpret_cast<char*>(&bookmarkdata_)) + sizeof(folder_));
}

SyncEntity::~SyncEntity() {
  // @@protoc_insertion_point(destructor:sync_pb.SyncEntity)
  SharedDtor();
}

void SyncEntity::SharedDtor() {
  id_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_parent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  non_unique_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_defined_unique_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_after_item_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originator_cache_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originator_client_item_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_defined_unique_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordinal_in_parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete bookmarkdata_;
  }
  if (this != internal_default_instance()) {
    delete specifics_;
  }
  if (this != internal_default_instance()) {
    delete unique_position_;
  }
}

void SyncEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncEntity& SyncEntity::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncEntity* SyncEntity::New(::google::protobuf::Arena* arena) const {
  SyncEntity* n = new SyncEntity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SyncEntity)
  attachment_id_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_id_string()) {
      GOOGLE_DCHECK(!id_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_string_.UnsafeRawStringPointer())->clear();
    }
    if (has_parent_id_string()) {
      GOOGLE_DCHECK(!parent_id_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parent_id_string_.UnsafeRawStringPointer())->clear();
    }
    if (has_old_parent_id()) {
      GOOGLE_DCHECK(!old_parent_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*old_parent_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_non_unique_name()) {
      GOOGLE_DCHECK(!non_unique_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*non_unique_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_server_defined_unique_tag()) {
      GOOGLE_DCHECK(!server_defined_unique_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_defined_unique_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_insert_after_item_id()) {
      GOOGLE_DCHECK(!insert_after_item_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*insert_after_item_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_originator_cache_guid()) {
      GOOGLE_DCHECK(!originator_cache_guid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*originator_cache_guid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_originator_client_item_id()) {
      GOOGLE_DCHECK(!originator_client_item_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*originator_client_item_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_client_defined_unique_tag()) {
      GOOGLE_DCHECK(!client_defined_unique_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_defined_unique_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_ordinal_in_parent()) {
      GOOGLE_DCHECK(!ordinal_in_parent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ordinal_in_parent_.UnsafeRawStringPointer())->clear();
    }
    if (has_bookmarkdata()) {
      GOOGLE_DCHECK(bookmarkdata_ != NULL);
      bookmarkdata_->::sync_pb::SyncEntity_BookmarkData::Clear();
    }
    if (has_specifics()) {
      GOOGLE_DCHECK(specifics_ != NULL);
      specifics_->::sync_pb::EntitySpecifics::Clear();
    }
    if (has_unique_position()) {
      GOOGLE_DCHECK(unique_position_ != NULL);
      unique_position_->::sync_pb::UniquePosition::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 49152u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mtime_) -
        reinterpret_cast<char*>(&version_)) + sizeof(mtime_));
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ::memset(&ctime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&folder_) -
        reinterpret_cast<char*>(&ctime_)) + sizeof(folder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SyncEntity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id_string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_id_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string old_parent_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_parent_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mtime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_mtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ctime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ctime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string non_unique_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_non_unique_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sync_timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_sync_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sync_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_defined_unique_tag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_defined_unique_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional group BookmarkData = 11 { ... };
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(91u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                11, input, mutable_bookmarkdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 position_in_parent = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_position_in_parent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_in_parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string insert_after_item_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_after_item_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deleted = 18 [default = false];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_deleted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string originator_cache_guid = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originator_cache_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string originator_client_item_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originator_client_item_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.EntitySpecifics specifics = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specifics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool folder = 22 [default = false];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_folder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &folder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_defined_unique_tag = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_defined_unique_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ordinal_in_parent = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ordinal_in_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UniquePosition unique_position = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unique_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DeprecatedMessage attachment_id = 26 [deprecated = true];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachment_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SyncEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SyncEntity)
  return false;
#undef DO_
}

void SyncEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SyncEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id_string(), output);
  }

  // optional string parent_id_string = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parent_id_string(), output);
  }

  // optional string old_parent_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->old_parent_id(), output);
  }

  // optional int64 version = 4;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->version(), output);
  }

  // optional int64 mtime = 5;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->mtime(), output);
  }

  // optional int64 ctime = 6;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ctime(), output);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional string non_unique_name = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->non_unique_name(), output);
  }

  // optional int64 sync_timestamp = 9;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->sync_timestamp(), output);
  }

  // optional string server_defined_unique_tag = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->server_defined_unique_tag(), output);
  }

  // optional group BookmarkData = 11 { ... };
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      11, *this->bookmarkdata_, output);
  }

  // optional int64 position_in_parent = 15;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->position_in_parent(), output);
  }

  // optional string insert_after_item_id = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->insert_after_item_id(), output);
  }

  // optional bool deleted = 18 [default = false];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->deleted(), output);
  }

  // optional string originator_cache_guid = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->originator_cache_guid(), output);
  }

  // optional string originator_client_item_id = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->originator_client_item_id(), output);
  }

  // optional .sync_pb.EntitySpecifics specifics = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, *this->specifics_, output);
  }

  // optional bool folder = 22 [default = false];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->folder(), output);
  }

  // optional string client_defined_unique_tag = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->client_defined_unique_tag(), output);
  }

  // optional bytes ordinal_in_parent = 24;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->ordinal_in_parent(), output);
  }

  // optional .sync_pb.UniquePosition unique_position = 25;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, *this->unique_position_, output);
  }

  // repeated .sync_pb.DeprecatedMessage attachment_id = 26 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attachment_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->attachment_id(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SyncEntity)
}

size_t SyncEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SyncEntity)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.DeprecatedMessage attachment_id = 26 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->attachment_id_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment_id(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string id_string = 1;
    if (has_id_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_string());
    }

    // optional string parent_id_string = 2;
    if (has_parent_id_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_id_string());
    }

    // optional string old_parent_id = 3;
    if (has_old_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_parent_id());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string non_unique_name = 8;
    if (has_non_unique_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->non_unique_name());
    }

    // optional string server_defined_unique_tag = 10;
    if (has_server_defined_unique_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_defined_unique_tag());
    }

    // optional string insert_after_item_id = 16;
    if (has_insert_after_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insert_after_item_id());
    }

    // optional string originator_cache_guid = 19;
    if (has_originator_cache_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originator_cache_guid());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string originator_client_item_id = 20;
    if (has_originator_client_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originator_client_item_id());
    }

    // optional string client_defined_unique_tag = 23;
    if (has_client_defined_unique_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_defined_unique_tag());
    }

    // optional bytes ordinal_in_parent = 24;
    if (has_ordinal_in_parent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ordinal_in_parent());
    }

    // optional group BookmarkData = 11 { ... };
    if (has_bookmarkdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          *this->bookmarkdata_);
    }

    // optional .sync_pb.EntitySpecifics specifics = 21;
    if (has_specifics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->specifics_);
    }

    // optional .sync_pb.UniquePosition unique_position = 25;
    if (has_unique_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unique_position_);
    }

    // optional int64 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int64 mtime = 5;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int64 ctime = 6;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ctime());
    }

    // optional int64 sync_timestamp = 9;
    if (has_sync_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sync_timestamp());
    }

    // optional int64 position_in_parent = 15;
    if (has_position_in_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->position_in_parent());
    }

    // optional bool deleted = 18 [default = false];
    if (has_deleted()) {
      total_size += 2 + 1;
    }

    // optional bool folder = 22 [default = false];
    if (has_folder()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncEntity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncEntity*>(&from));
}

void SyncEntity::MergeFrom(const SyncEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SyncEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachment_id_.MergeFrom(from.attachment_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id_string();
      id_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_parent_id_string();
      parent_id_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_old_parent_id();
      old_parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_parent_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_non_unique_name();
      non_unique_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.non_unique_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_server_defined_unique_tag();
      server_defined_unique_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_defined_unique_tag_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_insert_after_item_id();
      insert_after_item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_after_item_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_originator_cache_guid();
      originator_cache_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originator_cache_guid_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_originator_client_item_id();
      originator_client_item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originator_client_item_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_client_defined_unique_tag();
      client_defined_unique_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_defined_unique_tag_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_ordinal_in_parent();
      ordinal_in_parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordinal_in_parent_);
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_bookmarkdata()->::sync_pb::SyncEntity_BookmarkData::MergeFrom(from.bookmarkdata());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_specifics()->::sync_pb::EntitySpecifics::MergeFrom(from.specifics());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_unique_position()->::sync_pb::UniquePosition::MergeFrom(from.unique_position());
    }
    if (cached_has_bits & 0x00004000u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00008000u) {
      mtime_ = from.mtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      ctime_ = from.ctime_;
    }
    if (cached_has_bits & 0x00020000u) {
      sync_timestamp_ = from.sync_timestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      position_in_parent_ = from.position_in_parent_;
    }
    if (cached_has_bits & 0x00080000u) {
      deleted_ = from.deleted_;
    }
    if (cached_has_bits & 0x00100000u) {
      folder_ = from.folder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncEntity::CopyFrom(const SyncEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SyncEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEntity::IsInitialized() const {
  if (has_bookmarkdata()) {
    if (!this->bookmarkdata_->IsInitialized()) return false;
  }
  return true;
}

void SyncEntity::Swap(SyncEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncEntity::InternalSwap(SyncEntity* other) {
  attachment_id_.InternalSwap(&other->attachment_id_);
  id_string_.Swap(&other->id_string_);
  parent_id_string_.Swap(&other->parent_id_string_);
  old_parent_id_.Swap(&other->old_parent_id_);
  name_.Swap(&other->name_);
  non_unique_name_.Swap(&other->non_unique_name_);
  server_defined_unique_tag_.Swap(&other->server_defined_unique_tag_);
  insert_after_item_id_.Swap(&other->insert_after_item_id_);
  originator_cache_guid_.Swap(&other->originator_cache_guid_);
  originator_client_item_id_.Swap(&other->originator_client_item_id_);
  client_defined_unique_tag_.Swap(&other->client_defined_unique_tag_);
  ordinal_in_parent_.Swap(&other->ordinal_in_parent_);
  std::swap(bookmarkdata_, other->bookmarkdata_);
  std::swap(specifics_, other->specifics_);
  std::swap(unique_position_, other->unique_position_);
  std::swap(version_, other->version_);
  std::swap(mtime_, other->mtime_);
  std::swap(ctime_, other->ctime_);
  std::swap(sync_timestamp_, other->sync_timestamp_);
  std::swap(position_in_parent_, other->position_in_parent_);
  std::swap(deleted_, other->deleted_);
  std::swap(folder_, other->folder_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SyncEntity::GetTypeName() const {
  return "sync_pb.SyncEntity";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncEntity

// optional string id_string = 1;
bool SyncEntity::has_id_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncEntity::set_has_id_string() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncEntity::clear_has_id_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncEntity::clear_id_string() {
  id_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id_string();
}
const ::std::string& SyncEntity::id_string() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.id_string)
  return id_string_.GetNoArena();
}
void SyncEntity::set_id_string(const ::std::string& value) {
  set_has_id_string();
  id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.id_string)
}
#if LANG_CXX11
void SyncEntity::set_id_string(::std::string&& value) {
  set_has_id_string();
  id_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.id_string)
}
#endif
void SyncEntity::set_id_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id_string();
  id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.id_string)
}
void SyncEntity::set_id_string(const char* value, size_t size) {
  set_has_id_string();
  id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.id_string)
}
::std::string* SyncEntity::mutable_id_string() {
  set_has_id_string();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.id_string)
  return id_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_id_string() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.id_string)
  clear_has_id_string();
  return id_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_id_string(::std::string* id_string) {
  if (id_string != NULL) {
    set_has_id_string();
  } else {
    clear_has_id_string();
  }
  id_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_string);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.id_string)
}

// optional string parent_id_string = 2;
bool SyncEntity::has_parent_id_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncEntity::set_has_parent_id_string() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncEntity::clear_has_parent_id_string() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncEntity::clear_parent_id_string() {
  parent_id_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_id_string();
}
const ::std::string& SyncEntity::parent_id_string() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.parent_id_string)
  return parent_id_string_.GetNoArena();
}
void SyncEntity::set_parent_id_string(const ::std::string& value) {
  set_has_parent_id_string();
  parent_id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.parent_id_string)
}
#if LANG_CXX11
void SyncEntity::set_parent_id_string(::std::string&& value) {
  set_has_parent_id_string();
  parent_id_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.parent_id_string)
}
#endif
void SyncEntity::set_parent_id_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_id_string();
  parent_id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.parent_id_string)
}
void SyncEntity::set_parent_id_string(const char* value, size_t size) {
  set_has_parent_id_string();
  parent_id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.parent_id_string)
}
::std::string* SyncEntity::mutable_parent_id_string() {
  set_has_parent_id_string();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.parent_id_string)
  return parent_id_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_parent_id_string() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.parent_id_string)
  clear_has_parent_id_string();
  return parent_id_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_parent_id_string(::std::string* parent_id_string) {
  if (parent_id_string != NULL) {
    set_has_parent_id_string();
  } else {
    clear_has_parent_id_string();
  }
  parent_id_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id_string);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.parent_id_string)
}

// optional string old_parent_id = 3;
bool SyncEntity::has_old_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SyncEntity::set_has_old_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SyncEntity::clear_has_old_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SyncEntity::clear_old_parent_id() {
  old_parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_old_parent_id();
}
const ::std::string& SyncEntity::old_parent_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.old_parent_id)
  return old_parent_id_.GetNoArena();
}
void SyncEntity::set_old_parent_id(const ::std::string& value) {
  set_has_old_parent_id();
  old_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.old_parent_id)
}
#if LANG_CXX11
void SyncEntity::set_old_parent_id(::std::string&& value) {
  set_has_old_parent_id();
  old_parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.old_parent_id)
}
#endif
void SyncEntity::set_old_parent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_old_parent_id();
  old_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.old_parent_id)
}
void SyncEntity::set_old_parent_id(const char* value, size_t size) {
  set_has_old_parent_id();
  old_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.old_parent_id)
}
::std::string* SyncEntity::mutable_old_parent_id() {
  set_has_old_parent_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.old_parent_id)
  return old_parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_old_parent_id() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.old_parent_id)
  clear_has_old_parent_id();
  return old_parent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_old_parent_id(::std::string* old_parent_id) {
  if (old_parent_id != NULL) {
    set_has_old_parent_id();
  } else {
    clear_has_old_parent_id();
  }
  old_parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_parent_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.old_parent_id)
}

// optional int64 version = 4;
bool SyncEntity::has_version() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SyncEntity::set_has_version() {
  _has_bits_[0] |= 0x00004000u;
}
void SyncEntity::clear_has_version() {
  _has_bits_[0] &= ~0x00004000u;
}
void SyncEntity::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
::google::protobuf::int64 SyncEntity::version() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.version)
  return version_;
}
void SyncEntity::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.version)
}

// optional int64 mtime = 5;
bool SyncEntity::has_mtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SyncEntity::set_has_mtime() {
  _has_bits_[0] |= 0x00008000u;
}
void SyncEntity::clear_has_mtime() {
  _has_bits_[0] &= ~0x00008000u;
}
void SyncEntity::clear_mtime() {
  mtime_ = GOOGLE_LONGLONG(0);
  clear_has_mtime();
}
::google::protobuf::int64 SyncEntity::mtime() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.mtime)
  return mtime_;
}
void SyncEntity::set_mtime(::google::protobuf::int64 value) {
  set_has_mtime();
  mtime_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.mtime)
}

// optional int64 ctime = 6;
bool SyncEntity::has_ctime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SyncEntity::set_has_ctime() {
  _has_bits_[0] |= 0x00010000u;
}
void SyncEntity::clear_has_ctime() {
  _has_bits_[0] &= ~0x00010000u;
}
void SyncEntity::clear_ctime() {
  ctime_ = GOOGLE_LONGLONG(0);
  clear_has_ctime();
}
::google::protobuf::int64 SyncEntity::ctime() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.ctime)
  return ctime_;
}
void SyncEntity::set_ctime(::google::protobuf::int64 value) {
  set_has_ctime();
  ctime_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.ctime)
}

// optional string name = 7;
bool SyncEntity::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SyncEntity::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
void SyncEntity::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void SyncEntity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SyncEntity::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.name)
  return name_.GetNoArena();
}
void SyncEntity::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.name)
}
#if LANG_CXX11
void SyncEntity::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.name)
}
#endif
void SyncEntity::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.name)
}
void SyncEntity::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.name)
}
::std::string* SyncEntity::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.name)
}

// optional string non_unique_name = 8;
bool SyncEntity::has_non_unique_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SyncEntity::set_has_non_unique_name() {
  _has_bits_[0] |= 0x00000010u;
}
void SyncEntity::clear_has_non_unique_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void SyncEntity::clear_non_unique_name() {
  non_unique_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_non_unique_name();
}
const ::std::string& SyncEntity::non_unique_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.non_unique_name)
  return non_unique_name_.GetNoArena();
}
void SyncEntity::set_non_unique_name(const ::std::string& value) {
  set_has_non_unique_name();
  non_unique_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.non_unique_name)
}
#if LANG_CXX11
void SyncEntity::set_non_unique_name(::std::string&& value) {
  set_has_non_unique_name();
  non_unique_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.non_unique_name)
}
#endif
void SyncEntity::set_non_unique_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_non_unique_name();
  non_unique_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.non_unique_name)
}
void SyncEntity::set_non_unique_name(const char* value, size_t size) {
  set_has_non_unique_name();
  non_unique_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.non_unique_name)
}
::std::string* SyncEntity::mutable_non_unique_name() {
  set_has_non_unique_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.non_unique_name)
  return non_unique_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_non_unique_name() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.non_unique_name)
  clear_has_non_unique_name();
  return non_unique_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_non_unique_name(::std::string* non_unique_name) {
  if (non_unique_name != NULL) {
    set_has_non_unique_name();
  } else {
    clear_has_non_unique_name();
  }
  non_unique_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), non_unique_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.non_unique_name)
}

// optional int64 sync_timestamp = 9;
bool SyncEntity::has_sync_timestamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SyncEntity::set_has_sync_timestamp() {
  _has_bits_[0] |= 0x00020000u;
}
void SyncEntity::clear_has_sync_timestamp() {
  _has_bits_[0] &= ~0x00020000u;
}
void SyncEntity::clear_sync_timestamp() {
  sync_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_sync_timestamp();
}
::google::protobuf::int64 SyncEntity::sync_timestamp() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.sync_timestamp)
  return sync_timestamp_;
}
void SyncEntity::set_sync_timestamp(::google::protobuf::int64 value) {
  set_has_sync_timestamp();
  sync_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.sync_timestamp)
}

// optional string server_defined_unique_tag = 10;
bool SyncEntity::has_server_defined_unique_tag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SyncEntity::set_has_server_defined_unique_tag() {
  _has_bits_[0] |= 0x00000020u;
}
void SyncEntity::clear_has_server_defined_unique_tag() {
  _has_bits_[0] &= ~0x00000020u;
}
void SyncEntity::clear_server_defined_unique_tag() {
  server_defined_unique_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_defined_unique_tag();
}
const ::std::string& SyncEntity::server_defined_unique_tag() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.server_defined_unique_tag)
  return server_defined_unique_tag_.GetNoArena();
}
void SyncEntity::set_server_defined_unique_tag(const ::std::string& value) {
  set_has_server_defined_unique_tag();
  server_defined_unique_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.server_defined_unique_tag)
}
#if LANG_CXX11
void SyncEntity::set_server_defined_unique_tag(::std::string&& value) {
  set_has_server_defined_unique_tag();
  server_defined_unique_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.server_defined_unique_tag)
}
#endif
void SyncEntity::set_server_defined_unique_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_defined_unique_tag();
  server_defined_unique_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.server_defined_unique_tag)
}
void SyncEntity::set_server_defined_unique_tag(const char* value, size_t size) {
  set_has_server_defined_unique_tag();
  server_defined_unique_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.server_defined_unique_tag)
}
::std::string* SyncEntity::mutable_server_defined_unique_tag() {
  set_has_server_defined_unique_tag();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.server_defined_unique_tag)
  return server_defined_unique_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_server_defined_unique_tag() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.server_defined_unique_tag)
  clear_has_server_defined_unique_tag();
  return server_defined_unique_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_server_defined_unique_tag(::std::string* server_defined_unique_tag) {
  if (server_defined_unique_tag != NULL) {
    set_has_server_defined_unique_tag();
  } else {
    clear_has_server_defined_unique_tag();
  }
  server_defined_unique_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_defined_unique_tag);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.server_defined_unique_tag)
}

// optional group BookmarkData = 11 { ... };
bool SyncEntity::has_bookmarkdata() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SyncEntity::set_has_bookmarkdata() {
  _has_bits_[0] |= 0x00000800u;
}
void SyncEntity::clear_has_bookmarkdata() {
  _has_bits_[0] &= ~0x00000800u;
}
void SyncEntity::clear_bookmarkdata() {
  if (bookmarkdata_ != NULL) bookmarkdata_->::sync_pb::SyncEntity_BookmarkData::Clear();
  clear_has_bookmarkdata();
}
const ::sync_pb::SyncEntity_BookmarkData& SyncEntity::bookmarkdata() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.bookmarkdata)
  return bookmarkdata_ != NULL ? *bookmarkdata_
                         : *::sync_pb::SyncEntity_BookmarkData::internal_default_instance();
}
::sync_pb::SyncEntity_BookmarkData* SyncEntity::mutable_bookmarkdata() {
  set_has_bookmarkdata();
  if (bookmarkdata_ == NULL) {
    bookmarkdata_ = new ::sync_pb::SyncEntity_BookmarkData;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.bookmarkdata)
  return bookmarkdata_;
}
::sync_pb::SyncEntity_BookmarkData* SyncEntity::release_bookmarkdata() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.bookmarkdata)
  clear_has_bookmarkdata();
  ::sync_pb::SyncEntity_BookmarkData* temp = bookmarkdata_;
  bookmarkdata_ = NULL;
  return temp;
}
void SyncEntity::set_allocated_bookmarkdata(::sync_pb::SyncEntity_BookmarkData* bookmarkdata) {
  delete bookmarkdata_;
  bookmarkdata_ = bookmarkdata;
  if (bookmarkdata) {
    set_has_bookmarkdata();
  } else {
    clear_has_bookmarkdata();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.bookmarkdata)
}

// optional int64 position_in_parent = 15;
bool SyncEntity::has_position_in_parent() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SyncEntity::set_has_position_in_parent() {
  _has_bits_[0] |= 0x00040000u;
}
void SyncEntity::clear_has_position_in_parent() {
  _has_bits_[0] &= ~0x00040000u;
}
void SyncEntity::clear_position_in_parent() {
  position_in_parent_ = GOOGLE_LONGLONG(0);
  clear_has_position_in_parent();
}
::google::protobuf::int64 SyncEntity::position_in_parent() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.position_in_parent)
  return position_in_parent_;
}
void SyncEntity::set_position_in_parent(::google::protobuf::int64 value) {
  set_has_position_in_parent();
  position_in_parent_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.position_in_parent)
}

// optional string insert_after_item_id = 16;
bool SyncEntity::has_insert_after_item_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SyncEntity::set_has_insert_after_item_id() {
  _has_bits_[0] |= 0x00000040u;
}
void SyncEntity::clear_has_insert_after_item_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void SyncEntity::clear_insert_after_item_id() {
  insert_after_item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_insert_after_item_id();
}
const ::std::string& SyncEntity::insert_after_item_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.insert_after_item_id)
  return insert_after_item_id_.GetNoArena();
}
void SyncEntity::set_insert_after_item_id(const ::std::string& value) {
  set_has_insert_after_item_id();
  insert_after_item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.insert_after_item_id)
}
#if LANG_CXX11
void SyncEntity::set_insert_after_item_id(::std::string&& value) {
  set_has_insert_after_item_id();
  insert_after_item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.insert_after_item_id)
}
#endif
void SyncEntity::set_insert_after_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_insert_after_item_id();
  insert_after_item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.insert_after_item_id)
}
void SyncEntity::set_insert_after_item_id(const char* value, size_t size) {
  set_has_insert_after_item_id();
  insert_after_item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.insert_after_item_id)
}
::std::string* SyncEntity::mutable_insert_after_item_id() {
  set_has_insert_after_item_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.insert_after_item_id)
  return insert_after_item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_insert_after_item_id() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.insert_after_item_id)
  clear_has_insert_after_item_id();
  return insert_after_item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_insert_after_item_id(::std::string* insert_after_item_id) {
  if (insert_after_item_id != NULL) {
    set_has_insert_after_item_id();
  } else {
    clear_has_insert_after_item_id();
  }
  insert_after_item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insert_after_item_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.insert_after_item_id)
}

// optional bool deleted = 18 [default = false];
bool SyncEntity::has_deleted() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SyncEntity::set_has_deleted() {
  _has_bits_[0] |= 0x00080000u;
}
void SyncEntity::clear_has_deleted() {
  _has_bits_[0] &= ~0x00080000u;
}
void SyncEntity::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
bool SyncEntity::deleted() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.deleted)
  return deleted_;
}
void SyncEntity::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.deleted)
}

// optional string originator_cache_guid = 19;
bool SyncEntity::has_originator_cache_guid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SyncEntity::set_has_originator_cache_guid() {
  _has_bits_[0] |= 0x00000080u;
}
void SyncEntity::clear_has_originator_cache_guid() {
  _has_bits_[0] &= ~0x00000080u;
}
void SyncEntity::clear_originator_cache_guid() {
  originator_cache_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_originator_cache_guid();
}
const ::std::string& SyncEntity::originator_cache_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.originator_cache_guid)
  return originator_cache_guid_.GetNoArena();
}
void SyncEntity::set_originator_cache_guid(const ::std::string& value) {
  set_has_originator_cache_guid();
  originator_cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.originator_cache_guid)
}
#if LANG_CXX11
void SyncEntity::set_originator_cache_guid(::std::string&& value) {
  set_has_originator_cache_guid();
  originator_cache_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.originator_cache_guid)
}
#endif
void SyncEntity::set_originator_cache_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_originator_cache_guid();
  originator_cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.originator_cache_guid)
}
void SyncEntity::set_originator_cache_guid(const char* value, size_t size) {
  set_has_originator_cache_guid();
  originator_cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.originator_cache_guid)
}
::std::string* SyncEntity::mutable_originator_cache_guid() {
  set_has_originator_cache_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.originator_cache_guid)
  return originator_cache_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_originator_cache_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.originator_cache_guid)
  clear_has_originator_cache_guid();
  return originator_cache_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_originator_cache_guid(::std::string* originator_cache_guid) {
  if (originator_cache_guid != NULL) {
    set_has_originator_cache_guid();
  } else {
    clear_has_originator_cache_guid();
  }
  originator_cache_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), originator_cache_guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.originator_cache_guid)
}

// optional string originator_client_item_id = 20;
bool SyncEntity::has_originator_client_item_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SyncEntity::set_has_originator_client_item_id() {
  _has_bits_[0] |= 0x00000100u;
}
void SyncEntity::clear_has_originator_client_item_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void SyncEntity::clear_originator_client_item_id() {
  originator_client_item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_originator_client_item_id();
}
const ::std::string& SyncEntity::originator_client_item_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.originator_client_item_id)
  return originator_client_item_id_.GetNoArena();
}
void SyncEntity::set_originator_client_item_id(const ::std::string& value) {
  set_has_originator_client_item_id();
  originator_client_item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.originator_client_item_id)
}
#if LANG_CXX11
void SyncEntity::set_originator_client_item_id(::std::string&& value) {
  set_has_originator_client_item_id();
  originator_client_item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.originator_client_item_id)
}
#endif
void SyncEntity::set_originator_client_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_originator_client_item_id();
  originator_client_item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.originator_client_item_id)
}
void SyncEntity::set_originator_client_item_id(const char* value, size_t size) {
  set_has_originator_client_item_id();
  originator_client_item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.originator_client_item_id)
}
::std::string* SyncEntity::mutable_originator_client_item_id() {
  set_has_originator_client_item_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.originator_client_item_id)
  return originator_client_item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_originator_client_item_id() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.originator_client_item_id)
  clear_has_originator_client_item_id();
  return originator_client_item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_originator_client_item_id(::std::string* originator_client_item_id) {
  if (originator_client_item_id != NULL) {
    set_has_originator_client_item_id();
  } else {
    clear_has_originator_client_item_id();
  }
  originator_client_item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), originator_client_item_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.originator_client_item_id)
}

// optional .sync_pb.EntitySpecifics specifics = 21;
bool SyncEntity::has_specifics() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SyncEntity::set_has_specifics() {
  _has_bits_[0] |= 0x00001000u;
}
void SyncEntity::clear_has_specifics() {
  _has_bits_[0] &= ~0x00001000u;
}
void SyncEntity::clear_specifics() {
  if (specifics_ != NULL) specifics_->::sync_pb::EntitySpecifics::Clear();
  clear_has_specifics();
}
const ::sync_pb::EntitySpecifics& SyncEntity::specifics() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.specifics)
  return specifics_ != NULL ? *specifics_
                         : *::sync_pb::EntitySpecifics::internal_default_instance();
}
::sync_pb::EntitySpecifics* SyncEntity::mutable_specifics() {
  set_has_specifics();
  if (specifics_ == NULL) {
    specifics_ = new ::sync_pb::EntitySpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.specifics)
  return specifics_;
}
::sync_pb::EntitySpecifics* SyncEntity::release_specifics() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.specifics)
  clear_has_specifics();
  ::sync_pb::EntitySpecifics* temp = specifics_;
  specifics_ = NULL;
  return temp;
}
void SyncEntity::set_allocated_specifics(::sync_pb::EntitySpecifics* specifics) {
  delete specifics_;
  specifics_ = specifics;
  if (specifics) {
    set_has_specifics();
  } else {
    clear_has_specifics();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.specifics)
}

// optional bool folder = 22 [default = false];
bool SyncEntity::has_folder() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SyncEntity::set_has_folder() {
  _has_bits_[0] |= 0x00100000u;
}
void SyncEntity::clear_has_folder() {
  _has_bits_[0] &= ~0x00100000u;
}
void SyncEntity::clear_folder() {
  folder_ = false;
  clear_has_folder();
}
bool SyncEntity::folder() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.folder)
  return folder_;
}
void SyncEntity::set_folder(bool value) {
  set_has_folder();
  folder_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.folder)
}

// optional string client_defined_unique_tag = 23;
bool SyncEntity::has_client_defined_unique_tag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SyncEntity::set_has_client_defined_unique_tag() {
  _has_bits_[0] |= 0x00000200u;
}
void SyncEntity::clear_has_client_defined_unique_tag() {
  _has_bits_[0] &= ~0x00000200u;
}
void SyncEntity::clear_client_defined_unique_tag() {
  client_defined_unique_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_defined_unique_tag();
}
const ::std::string& SyncEntity::client_defined_unique_tag() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.client_defined_unique_tag)
  return client_defined_unique_tag_.GetNoArena();
}
void SyncEntity::set_client_defined_unique_tag(const ::std::string& value) {
  set_has_client_defined_unique_tag();
  client_defined_unique_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.client_defined_unique_tag)
}
#if LANG_CXX11
void SyncEntity::set_client_defined_unique_tag(::std::string&& value) {
  set_has_client_defined_unique_tag();
  client_defined_unique_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.client_defined_unique_tag)
}
#endif
void SyncEntity::set_client_defined_unique_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_defined_unique_tag();
  client_defined_unique_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.client_defined_unique_tag)
}
void SyncEntity::set_client_defined_unique_tag(const char* value, size_t size) {
  set_has_client_defined_unique_tag();
  client_defined_unique_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.client_defined_unique_tag)
}
::std::string* SyncEntity::mutable_client_defined_unique_tag() {
  set_has_client_defined_unique_tag();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.client_defined_unique_tag)
  return client_defined_unique_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_client_defined_unique_tag() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.client_defined_unique_tag)
  clear_has_client_defined_unique_tag();
  return client_defined_unique_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_client_defined_unique_tag(::std::string* client_defined_unique_tag) {
  if (client_defined_unique_tag != NULL) {
    set_has_client_defined_unique_tag();
  } else {
    clear_has_client_defined_unique_tag();
  }
  client_defined_unique_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_defined_unique_tag);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.client_defined_unique_tag)
}

// optional bytes ordinal_in_parent = 24;
bool SyncEntity::has_ordinal_in_parent() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SyncEntity::set_has_ordinal_in_parent() {
  _has_bits_[0] |= 0x00000400u;
}
void SyncEntity::clear_has_ordinal_in_parent() {
  _has_bits_[0] &= ~0x00000400u;
}
void SyncEntity::clear_ordinal_in_parent() {
  ordinal_in_parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ordinal_in_parent();
}
const ::std::string& SyncEntity::ordinal_in_parent() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.ordinal_in_parent)
  return ordinal_in_parent_.GetNoArena();
}
void SyncEntity::set_ordinal_in_parent(const ::std::string& value) {
  set_has_ordinal_in_parent();
  ordinal_in_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.ordinal_in_parent)
}
#if LANG_CXX11
void SyncEntity::set_ordinal_in_parent(::std::string&& value) {
  set_has_ordinal_in_parent();
  ordinal_in_parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.ordinal_in_parent)
}
#endif
void SyncEntity::set_ordinal_in_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ordinal_in_parent();
  ordinal_in_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.ordinal_in_parent)
}
void SyncEntity::set_ordinal_in_parent(const void* value, size_t size) {
  set_has_ordinal_in_parent();
  ordinal_in_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.ordinal_in_parent)
}
::std::string* SyncEntity::mutable_ordinal_in_parent() {
  set_has_ordinal_in_parent();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.ordinal_in_parent)
  return ordinal_in_parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncEntity::release_ordinal_in_parent() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.ordinal_in_parent)
  clear_has_ordinal_in_parent();
  return ordinal_in_parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncEntity::set_allocated_ordinal_in_parent(::std::string* ordinal_in_parent) {
  if (ordinal_in_parent != NULL) {
    set_has_ordinal_in_parent();
  } else {
    clear_has_ordinal_in_parent();
  }
  ordinal_in_parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordinal_in_parent);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.ordinal_in_parent)
}

// optional .sync_pb.UniquePosition unique_position = 25;
bool SyncEntity::has_unique_position() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SyncEntity::set_has_unique_position() {
  _has_bits_[0] |= 0x00002000u;
}
void SyncEntity::clear_has_unique_position() {
  _has_bits_[0] &= ~0x00002000u;
}
void SyncEntity::clear_unique_position() {
  if (unique_position_ != NULL) unique_position_->::sync_pb::UniquePosition::Clear();
  clear_has_unique_position();
}
const ::sync_pb::UniquePosition& SyncEntity::unique_position() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.unique_position)
  return unique_position_ != NULL ? *unique_position_
                         : *::sync_pb::UniquePosition::internal_default_instance();
}
::sync_pb::UniquePosition* SyncEntity::mutable_unique_position() {
  set_has_unique_position();
  if (unique_position_ == NULL) {
    unique_position_ = new ::sync_pb::UniquePosition;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.unique_position)
  return unique_position_;
}
::sync_pb::UniquePosition* SyncEntity::release_unique_position() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.unique_position)
  clear_has_unique_position();
  ::sync_pb::UniquePosition* temp = unique_position_;
  unique_position_ = NULL;
  return temp;
}
void SyncEntity::set_allocated_unique_position(::sync_pb::UniquePosition* unique_position) {
  delete unique_position_;
  unique_position_ = unique_position;
  if (unique_position) {
    set_has_unique_position();
  } else {
    clear_has_unique_position();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.unique_position)
}

// repeated .sync_pb.DeprecatedMessage attachment_id = 26 [deprecated = true];
int SyncEntity::attachment_id_size() const {
  return attachment_id_.size();
}
void SyncEntity::clear_attachment_id() {
  attachment_id_.Clear();
}
const ::sync_pb::DeprecatedMessage& SyncEntity::attachment_id(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.attachment_id)
  return attachment_id_.Get(index);
}
::sync_pb::DeprecatedMessage* SyncEntity::mutable_attachment_id(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.attachment_id)
  return attachment_id_.Mutable(index);
}
::sync_pb::DeprecatedMessage* SyncEntity::add_attachment_id() {
  // @@protoc_insertion_point(field_add:sync_pb.SyncEntity.attachment_id)
  return attachment_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::DeprecatedMessage >*
SyncEntity::mutable_attachment_id() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SyncEntity.attachment_id)
  return &attachment_id_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::DeprecatedMessage >&
SyncEntity::attachment_id() const {
  // @@protoc_insertion_point(field_list:sync_pb.SyncEntity.attachment_id)
  return attachment_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromiumExtensionsActivity::kExtensionIdFieldNumber;
const int ChromiumExtensionsActivity::kBookmarkWritesSinceLastCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromiumExtensionsActivity::ChromiumExtensionsActivity()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ChromiumExtensionsActivity)
}
ChromiumExtensionsActivity::ChromiumExtensionsActivity(const ChromiumExtensionsActivity& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extension_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_id()) {
    extension_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
  }
  bookmark_writes_since_last_commit_ = from.bookmark_writes_since_last_commit_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ChromiumExtensionsActivity)
}

void ChromiumExtensionsActivity::SharedCtor() {
  _cached_size_ = 0;
  extension_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bookmark_writes_since_last_commit_ = 0u;
}

ChromiumExtensionsActivity::~ChromiumExtensionsActivity() {
  // @@protoc_insertion_point(destructor:sync_pb.ChromiumExtensionsActivity)
  SharedDtor();
}

void ChromiumExtensionsActivity::SharedDtor() {
  extension_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChromiumExtensionsActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromiumExtensionsActivity& ChromiumExtensionsActivity::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromiumExtensionsActivity* ChromiumExtensionsActivity::New(::google::protobuf::Arena* arena) const {
  ChromiumExtensionsActivity* n = new ChromiumExtensionsActivity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromiumExtensionsActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ChromiumExtensionsActivity)
  if (has_extension_id()) {
    GOOGLE_DCHECK(!extension_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*extension_id_.UnsafeRawStringPointer())->clear();
  }
  bookmark_writes_since_last_commit_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromiumExtensionsActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ChromiumExtensionsActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string extension_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bookmark_writes_since_last_commit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bookmark_writes_since_last_commit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bookmark_writes_since_last_commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ChromiumExtensionsActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ChromiumExtensionsActivity)
  return false;
#undef DO_
}

void ChromiumExtensionsActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ChromiumExtensionsActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string extension_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->extension_id(), output);
  }

  // optional uint32 bookmark_writes_since_last_commit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bookmark_writes_since_last_commit(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ChromiumExtensionsActivity)
}

size_t ChromiumExtensionsActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ChromiumExtensionsActivity)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string extension_id = 1;
    if (has_extension_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension_id());
    }

    // optional uint32 bookmark_writes_since_last_commit = 2;
    if (has_bookmark_writes_since_last_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bookmark_writes_since_last_commit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromiumExtensionsActivity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromiumExtensionsActivity*>(&from));
}

void ChromiumExtensionsActivity::MergeFrom(const ChromiumExtensionsActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ChromiumExtensionsActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_extension_id();
      extension_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      bookmark_writes_since_last_commit_ = from.bookmark_writes_since_last_commit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromiumExtensionsActivity::CopyFrom(const ChromiumExtensionsActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ChromiumExtensionsActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromiumExtensionsActivity::IsInitialized() const {
  return true;
}

void ChromiumExtensionsActivity::Swap(ChromiumExtensionsActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromiumExtensionsActivity::InternalSwap(ChromiumExtensionsActivity* other) {
  extension_id_.Swap(&other->extension_id_);
  std::swap(bookmark_writes_since_last_commit_, other->bookmark_writes_since_last_commit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromiumExtensionsActivity::GetTypeName() const {
  return "sync_pb.ChromiumExtensionsActivity";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromiumExtensionsActivity

// optional string extension_id = 1;
bool ChromiumExtensionsActivity::has_extension_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromiumExtensionsActivity::set_has_extension_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromiumExtensionsActivity::clear_has_extension_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromiumExtensionsActivity::clear_extension_id() {
  extension_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extension_id();
}
const ::std::string& ChromiumExtensionsActivity::extension_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.ChromiumExtensionsActivity.extension_id)
  return extension_id_.GetNoArena();
}
void ChromiumExtensionsActivity::set_extension_id(const ::std::string& value) {
  set_has_extension_id();
  extension_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ChromiumExtensionsActivity.extension_id)
}
#if LANG_CXX11
void ChromiumExtensionsActivity::set_extension_id(::std::string&& value) {
  set_has_extension_id();
  extension_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ChromiumExtensionsActivity.extension_id)
}
#endif
void ChromiumExtensionsActivity::set_extension_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extension_id();
  extension_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ChromiumExtensionsActivity.extension_id)
}
void ChromiumExtensionsActivity::set_extension_id(const char* value, size_t size) {
  set_has_extension_id();
  extension_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ChromiumExtensionsActivity.extension_id)
}
::std::string* ChromiumExtensionsActivity::mutable_extension_id() {
  set_has_extension_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.ChromiumExtensionsActivity.extension_id)
  return extension_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChromiumExtensionsActivity::release_extension_id() {
  // @@protoc_insertion_point(field_release:sync_pb.ChromiumExtensionsActivity.extension_id)
  clear_has_extension_id();
  return extension_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChromiumExtensionsActivity::set_allocated_extension_id(::std::string* extension_id) {
  if (extension_id != NULL) {
    set_has_extension_id();
  } else {
    clear_has_extension_id();
  }
  extension_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ChromiumExtensionsActivity.extension_id)
}

// optional uint32 bookmark_writes_since_last_commit = 2;
bool ChromiumExtensionsActivity::has_bookmark_writes_since_last_commit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromiumExtensionsActivity::set_has_bookmark_writes_since_last_commit() {
  _has_bits_[0] |= 0x00000002u;
}
void ChromiumExtensionsActivity::clear_has_bookmark_writes_since_last_commit() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChromiumExtensionsActivity::clear_bookmark_writes_since_last_commit() {
  bookmark_writes_since_last_commit_ = 0u;
  clear_has_bookmark_writes_since_last_commit();
}
::google::protobuf::uint32 ChromiumExtensionsActivity::bookmark_writes_since_last_commit() const {
  // @@protoc_insertion_point(field_get:sync_pb.ChromiumExtensionsActivity.bookmark_writes_since_last_commit)
  return bookmark_writes_since_last_commit_;
}
void ChromiumExtensionsActivity::set_bookmark_writes_since_last_commit(::google::protobuf::uint32 value) {
  set_has_bookmark_writes_since_last_commit();
  bookmark_writes_since_last_commit_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ChromiumExtensionsActivity.bookmark_writes_since_last_commit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientConfigParams::kEnabledTypeIdsFieldNumber;
const int ClientConfigParams::kTabsDatatypeEnabledFieldNumber;
const int ClientConfigParams::kCookieJarMismatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientConfigParams::ClientConfigParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientConfigParams)
}
ClientConfigParams::ClientConfigParams(const ClientConfigParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      enabled_type_ids_(from.enabled_type_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tabs_datatype_enabled_, &from.tabs_datatype_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&cookie_jar_mismatch_) -
    reinterpret_cast<char*>(&tabs_datatype_enabled_)) + sizeof(cookie_jar_mismatch_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientConfigParams)
}

void ClientConfigParams::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tabs_datatype_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cookie_jar_mismatch_) -
      reinterpret_cast<char*>(&tabs_datatype_enabled_)) + sizeof(cookie_jar_mismatch_));
}

ClientConfigParams::~ClientConfigParams() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientConfigParams)
  SharedDtor();
}

void ClientConfigParams::SharedDtor() {
}

void ClientConfigParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientConfigParams& ClientConfigParams::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientConfigParams* ClientConfigParams::New(::google::protobuf::Arena* arena) const {
  ClientConfigParams* n = new ClientConfigParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientConfigParams::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientConfigParams)
  enabled_type_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&tabs_datatype_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cookie_jar_mismatch_) -
        reinterpret_cast<char*>(&tabs_datatype_enabled_)) + sizeof(cookie_jar_mismatch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientConfigParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientConfigParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 enabled_type_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_enabled_type_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enabled_type_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tabs_datatype_enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tabs_datatype_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tabs_datatype_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cookie_jar_mismatch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cookie_jar_mismatch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cookie_jar_mismatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientConfigParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientConfigParams)
  return false;
#undef DO_
}

void ClientConfigParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientConfigParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 enabled_type_ids = 1;
  for (int i = 0, n = this->enabled_type_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->enabled_type_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool tabs_datatype_enabled = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tabs_datatype_enabled(), output);
  }

  // optional bool cookie_jar_mismatch = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->cookie_jar_mismatch(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientConfigParams)
}

size_t ClientConfigParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientConfigParams)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 enabled_type_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->enabled_type_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->enabled_type_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool tabs_datatype_enabled = 2;
    if (has_tabs_datatype_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool cookie_jar_mismatch = 3;
    if (has_cookie_jar_mismatch()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConfigParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientConfigParams*>(&from));
}

void ClientConfigParams::MergeFrom(const ClientConfigParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientConfigParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enabled_type_ids_.MergeFrom(from.enabled_type_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      tabs_datatype_enabled_ = from.tabs_datatype_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      cookie_jar_mismatch_ = from.cookie_jar_mismatch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientConfigParams::CopyFrom(const ClientConfigParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientConfigParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConfigParams::IsInitialized() const {
  return true;
}

void ClientConfigParams::Swap(ClientConfigParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientConfigParams::InternalSwap(ClientConfigParams* other) {
  enabled_type_ids_.InternalSwap(&other->enabled_type_ids_);
  std::swap(tabs_datatype_enabled_, other->tabs_datatype_enabled_);
  std::swap(cookie_jar_mismatch_, other->cookie_jar_mismatch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientConfigParams::GetTypeName() const {
  return "sync_pb.ClientConfigParams";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientConfigParams

// repeated int32 enabled_type_ids = 1;
int ClientConfigParams::enabled_type_ids_size() const {
  return enabled_type_ids_.size();
}
void ClientConfigParams::clear_enabled_type_ids() {
  enabled_type_ids_.Clear();
}
::google::protobuf::int32 ClientConfigParams::enabled_type_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientConfigParams.enabled_type_ids)
  return enabled_type_ids_.Get(index);
}
void ClientConfigParams::set_enabled_type_ids(int index, ::google::protobuf::int32 value) {
  enabled_type_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientConfigParams.enabled_type_ids)
}
void ClientConfigParams::add_enabled_type_ids(::google::protobuf::int32 value) {
  enabled_type_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.ClientConfigParams.enabled_type_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientConfigParams::enabled_type_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.ClientConfigParams.enabled_type_ids)
  return enabled_type_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientConfigParams::mutable_enabled_type_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.ClientConfigParams.enabled_type_ids)
  return &enabled_type_ids_;
}

// optional bool tabs_datatype_enabled = 2;
bool ClientConfigParams::has_tabs_datatype_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientConfigParams::set_has_tabs_datatype_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientConfigParams::clear_has_tabs_datatype_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientConfigParams::clear_tabs_datatype_enabled() {
  tabs_datatype_enabled_ = false;
  clear_has_tabs_datatype_enabled();
}
bool ClientConfigParams::tabs_datatype_enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientConfigParams.tabs_datatype_enabled)
  return tabs_datatype_enabled_;
}
void ClientConfigParams::set_tabs_datatype_enabled(bool value) {
  set_has_tabs_datatype_enabled();
  tabs_datatype_enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientConfigParams.tabs_datatype_enabled)
}

// optional bool cookie_jar_mismatch = 3;
bool ClientConfigParams::has_cookie_jar_mismatch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientConfigParams::set_has_cookie_jar_mismatch() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientConfigParams::clear_has_cookie_jar_mismatch() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientConfigParams::clear_cookie_jar_mismatch() {
  cookie_jar_mismatch_ = false;
  clear_has_cookie_jar_mismatch();
}
bool ClientConfigParams::cookie_jar_mismatch() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientConfigParams.cookie_jar_mismatch)
  return cookie_jar_mismatch_;
}
void ClientConfigParams::set_cookie_jar_mismatch(bool value) {
  set_has_cookie_jar_mismatch();
  cookie_jar_mismatch_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientConfigParams.cookie_jar_mismatch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitMessage::kEntriesFieldNumber;
const int CommitMessage::kCacheGuidFieldNumber;
const int CommitMessage::kExtensionsActivityFieldNumber;
const int CommitMessage::kConfigParamsFieldNumber;
const int CommitMessage::kClientContextsFieldNumber;
const int CommitMessage::kPaddingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitMessage::CommitMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CommitMessage)
}
CommitMessage::CommitMessage(const CommitMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_),
      extensions_activity_(from.extensions_activity_),
      client_contexts_(from.client_contexts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cache_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_guid()) {
    cache_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
  }
  padding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_padding()) {
    padding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.padding_);
  }
  if (from.has_config_params()) {
    config_params_ = new ::sync_pb::ClientConfigParams(*from.config_params_);
  } else {
    config_params_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.CommitMessage)
}

void CommitMessage::SharedCtor() {
  _cached_size_ = 0;
  cache_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  padding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_params_ = NULL;
}

CommitMessage::~CommitMessage() {
  // @@protoc_insertion_point(destructor:sync_pb.CommitMessage)
  SharedDtor();
}

void CommitMessage::SharedDtor() {
  cache_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  padding_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete config_params_;
  }
}

void CommitMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitMessage& CommitMessage::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitMessage* CommitMessage::New(::google::protobuf::Arena* arena) const {
  CommitMessage* n = new CommitMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CommitMessage)
  entries_.Clear();
  extensions_activity_.Clear();
  client_contexts_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_cache_guid()) {
      GOOGLE_DCHECK(!cache_guid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cache_guid_.UnsafeRawStringPointer())->clear();
    }
    if (has_padding()) {
      GOOGLE_DCHECK(!padding_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*padding_.UnsafeRawStringPointer())->clear();
    }
    if (has_config_params()) {
      GOOGLE_DCHECK(config_params_ != NULL);
      config_params_->::sync_pb::ClientConfigParams::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommitMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CommitMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.SyncEntity entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cache_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extensions_activity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClientConfigParams config_params = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeContext client_contexts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string padding = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_padding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CommitMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CommitMessage)
  return false;
#undef DO_
}

void CommitMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CommitMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.SyncEntity entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entries(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cache_guid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cache_guid(), output);
  }

  // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extensions_activity_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->extensions_activity(static_cast<int>(i)), output);
  }

  // optional .sync_pb.ClientConfigParams config_params = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->config_params_, output);
  }

  // repeated .sync_pb.DataTypeContext client_contexts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_contexts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->client_contexts(static_cast<int>(i)), output);
  }

  // optional string padding = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->padding(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CommitMessage)
}

size_t CommitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CommitMessage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.SyncEntity entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(static_cast<int>(i)));
    }
  }

  // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->extensions_activity_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extensions_activity(static_cast<int>(i)));
    }
  }

  // repeated .sync_pb.DataTypeContext client_contexts = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->client_contexts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_contexts(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string cache_guid = 2;
    if (has_cache_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_guid());
    }

    // optional string padding = 6;
    if (has_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->padding());
    }

    // optional .sync_pb.ClientConfigParams config_params = 4;
    if (has_config_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_params_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitMessage*>(&from));
}

void CommitMessage::MergeFrom(const CommitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CommitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  extensions_activity_.MergeFrom(from.extensions_activity_);
  client_contexts_.MergeFrom(from.client_contexts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cache_guid();
      cache_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_padding();
      padding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.padding_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_config_params()->::sync_pb::ClientConfigParams::MergeFrom(from.config_params());
    }
  }
}

void CommitMessage::CopyFrom(const CommitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CommitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void CommitMessage::Swap(CommitMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitMessage::InternalSwap(CommitMessage* other) {
  entries_.InternalSwap(&other->entries_);
  extensions_activity_.InternalSwap(&other->extensions_activity_);
  client_contexts_.InternalSwap(&other->client_contexts_);
  cache_guid_.Swap(&other->cache_guid_);
  padding_.Swap(&other->padding_);
  std::swap(config_params_, other->config_params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommitMessage::GetTypeName() const {
  return "sync_pb.CommitMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitMessage

// repeated .sync_pb.SyncEntity entries = 1;
int CommitMessage::entries_size() const {
  return entries_.size();
}
void CommitMessage::clear_entries() {
  entries_.Clear();
}
const ::sync_pb::SyncEntity& CommitMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.entries)
  return entries_.Get(index);
}
::sync_pb::SyncEntity* CommitMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.entries)
  return entries_.Mutable(index);
}
::sync_pb::SyncEntity* CommitMessage::add_entries() {
  // @@protoc_insertion_point(field_add:sync_pb.CommitMessage.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::SyncEntity >*
CommitMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.CommitMessage.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::SyncEntity >&
CommitMessage::entries() const {
  // @@protoc_insertion_point(field_list:sync_pb.CommitMessage.entries)
  return entries_;
}

// optional string cache_guid = 2;
bool CommitMessage::has_cache_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitMessage::set_has_cache_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitMessage::clear_has_cache_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitMessage::clear_cache_guid() {
  cache_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cache_guid();
}
const ::std::string& CommitMessage::cache_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.cache_guid)
  return cache_guid_.GetNoArena();
}
void CommitMessage::set_cache_guid(const ::std::string& value) {
  set_has_cache_guid();
  cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitMessage.cache_guid)
}
#if LANG_CXX11
void CommitMessage::set_cache_guid(::std::string&& value) {
  set_has_cache_guid();
  cache_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitMessage.cache_guid)
}
#endif
void CommitMessage::set_cache_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cache_guid();
  cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitMessage.cache_guid)
}
void CommitMessage::set_cache_guid(const char* value, size_t size) {
  set_has_cache_guid();
  cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitMessage.cache_guid)
}
::std::string* CommitMessage::mutable_cache_guid() {
  set_has_cache_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.cache_guid)
  return cache_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitMessage::release_cache_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitMessage.cache_guid)
  clear_has_cache_guid();
  return cache_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitMessage::set_allocated_cache_guid(::std::string* cache_guid) {
  if (cache_guid != NULL) {
    set_has_cache_guid();
  } else {
    clear_has_cache_guid();
  }
  cache_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cache_guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitMessage.cache_guid)
}

// repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
int CommitMessage::extensions_activity_size() const {
  return extensions_activity_.size();
}
void CommitMessage::clear_extensions_activity() {
  extensions_activity_.Clear();
}
const ::sync_pb::ChromiumExtensionsActivity& CommitMessage::extensions_activity(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.extensions_activity)
  return extensions_activity_.Get(index);
}
::sync_pb::ChromiumExtensionsActivity* CommitMessage::mutable_extensions_activity(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.extensions_activity)
  return extensions_activity_.Mutable(index);
}
::sync_pb::ChromiumExtensionsActivity* CommitMessage::add_extensions_activity() {
  // @@protoc_insertion_point(field_add:sync_pb.CommitMessage.extensions_activity)
  return extensions_activity_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::ChromiumExtensionsActivity >*
CommitMessage::mutable_extensions_activity() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.CommitMessage.extensions_activity)
  return &extensions_activity_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::ChromiumExtensionsActivity >&
CommitMessage::extensions_activity() const {
  // @@protoc_insertion_point(field_list:sync_pb.CommitMessage.extensions_activity)
  return extensions_activity_;
}

// optional .sync_pb.ClientConfigParams config_params = 4;
bool CommitMessage::has_config_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommitMessage::set_has_config_params() {
  _has_bits_[0] |= 0x00000004u;
}
void CommitMessage::clear_has_config_params() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommitMessage::clear_config_params() {
  if (config_params_ != NULL) config_params_->::sync_pb::ClientConfigParams::Clear();
  clear_has_config_params();
}
const ::sync_pb::ClientConfigParams& CommitMessage::config_params() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.config_params)
  return config_params_ != NULL ? *config_params_
                         : *::sync_pb::ClientConfigParams::internal_default_instance();
}
::sync_pb::ClientConfigParams* CommitMessage::mutable_config_params() {
  set_has_config_params();
  if (config_params_ == NULL) {
    config_params_ = new ::sync_pb::ClientConfigParams;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.config_params)
  return config_params_;
}
::sync_pb::ClientConfigParams* CommitMessage::release_config_params() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitMessage.config_params)
  clear_has_config_params();
  ::sync_pb::ClientConfigParams* temp = config_params_;
  config_params_ = NULL;
  return temp;
}
void CommitMessage::set_allocated_config_params(::sync_pb::ClientConfigParams* config_params) {
  delete config_params_;
  config_params_ = config_params;
  if (config_params) {
    set_has_config_params();
  } else {
    clear_has_config_params();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitMessage.config_params)
}

// repeated .sync_pb.DataTypeContext client_contexts = 5;
int CommitMessage::client_contexts_size() const {
  return client_contexts_.size();
}
void CommitMessage::clear_client_contexts() {
  client_contexts_.Clear();
}
const ::sync_pb::DataTypeContext& CommitMessage::client_contexts(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.client_contexts)
  return client_contexts_.Get(index);
}
::sync_pb::DataTypeContext* CommitMessage::mutable_client_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.client_contexts)
  return client_contexts_.Mutable(index);
}
::sync_pb::DataTypeContext* CommitMessage::add_client_contexts() {
  // @@protoc_insertion_point(field_add:sync_pb.CommitMessage.client_contexts)
  return client_contexts_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeContext >*
CommitMessage::mutable_client_contexts() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.CommitMessage.client_contexts)
  return &client_contexts_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeContext >&
CommitMessage::client_contexts() const {
  // @@protoc_insertion_point(field_list:sync_pb.CommitMessage.client_contexts)
  return client_contexts_;
}

// optional string padding = 6;
bool CommitMessage::has_padding() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommitMessage::set_has_padding() {
  _has_bits_[0] |= 0x00000002u;
}
void CommitMessage::clear_has_padding() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommitMessage::clear_padding() {
  padding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_padding();
}
const ::std::string& CommitMessage::padding() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.padding)
  return padding_.GetNoArena();
}
void CommitMessage::set_padding(const ::std::string& value) {
  set_has_padding();
  padding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitMessage.padding)
}
#if LANG_CXX11
void CommitMessage::set_padding(::std::string&& value) {
  set_has_padding();
  padding_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitMessage.padding)
}
#endif
void CommitMessage::set_padding(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_padding();
  padding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitMessage.padding)
}
void CommitMessage::set_padding(const char* value, size_t size) {
  set_has_padding();
  padding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitMessage.padding)
}
::std::string* CommitMessage::mutable_padding() {
  set_has_padding();
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.padding)
  return padding_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitMessage::release_padding() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitMessage.padding)
  clear_has_padding();
  return padding_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitMessage::set_allocated_padding(::std::string* padding) {
  if (padding != NULL) {
    set_has_padding();
  } else {
    clear_has_padding();
  }
  padding_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), padding);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitMessage.padding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdateTriggers::kNotificationHintFieldNumber;
const int GetUpdateTriggers::kClientDroppedHintsFieldNumber;
const int GetUpdateTriggers::kInvalidationsOutOfSyncFieldNumber;
const int GetUpdateTriggers::kLocalModificationNudgesFieldNumber;
const int GetUpdateTriggers::kDatatypeRefreshNudgesFieldNumber;
const int GetUpdateTriggers::kServerDroppedHintsFieldNumber;
const int GetUpdateTriggers::kInitialSyncInProgressFieldNumber;
const int GetUpdateTriggers::kSyncForResolveConflictInProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdateTriggers::GetUpdateTriggers()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetUpdateTriggers)
}
GetUpdateTriggers::GetUpdateTriggers(const GetUpdateTriggers& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      notification_hint_(from.notification_hint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_modification_nudges_, &from.local_modification_nudges_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_for_resolve_conflict_in_progress_) -
    reinterpret_cast<char*>(&local_modification_nudges_)) + sizeof(sync_for_resolve_conflict_in_progress_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetUpdateTriggers)
}

void GetUpdateTriggers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&local_modification_nudges_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_for_resolve_conflict_in_progress_) -
      reinterpret_cast<char*>(&local_modification_nudges_)) + sizeof(sync_for_resolve_conflict_in_progress_));
}

GetUpdateTriggers::~GetUpdateTriggers() {
  // @@protoc_insertion_point(destructor:sync_pb.GetUpdateTriggers)
  SharedDtor();
}

void GetUpdateTriggers::SharedDtor() {
}

void GetUpdateTriggers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdateTriggers& GetUpdateTriggers::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUpdateTriggers* GetUpdateTriggers::New(::google::protobuf::Arena* arena) const {
  GetUpdateTriggers* n = new GetUpdateTriggers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUpdateTriggers::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetUpdateTriggers)
  notification_hint_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&local_modification_nudges_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_for_resolve_conflict_in_progress_) -
        reinterpret_cast<char*>(&local_modification_nudges_)) + sizeof(sync_for_resolve_conflict_in_progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUpdateTriggers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetUpdateTriggers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string notification_hint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_notification_hint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool client_dropped_hints = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_dropped_hints();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_dropped_hints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool invalidations_out_of_sync = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_invalidations_out_of_sync();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalidations_out_of_sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 local_modification_nudges = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_local_modification_nudges();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_modification_nudges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 datatype_refresh_nudges = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_datatype_refresh_nudges();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatype_refresh_nudges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool server_dropped_hints = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_server_dropped_hints();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_dropped_hints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool initial_sync_in_progress = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_initial_sync_in_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initial_sync_in_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sync_for_resolve_conflict_in_progress = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_sync_for_resolve_conflict_in_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_for_resolve_conflict_in_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetUpdateTriggers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetUpdateTriggers)
  return false;
#undef DO_
}

void GetUpdateTriggers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetUpdateTriggers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string notification_hint = 1;
  for (int i = 0, n = this->notification_hint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notification_hint(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool client_dropped_hints = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->client_dropped_hints(), output);
  }

  // optional bool invalidations_out_of_sync = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->invalidations_out_of_sync(), output);
  }

  // optional int64 local_modification_nudges = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->local_modification_nudges(), output);
  }

  // optional int64 datatype_refresh_nudges = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->datatype_refresh_nudges(), output);
  }

  // optional bool server_dropped_hints = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->server_dropped_hints(), output);
  }

  // optional bool initial_sync_in_progress = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->initial_sync_in_progress(), output);
  }

  // optional bool sync_for_resolve_conflict_in_progress = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->sync_for_resolve_conflict_in_progress(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetUpdateTriggers)
}

size_t GetUpdateTriggers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetUpdateTriggers)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string notification_hint = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->notification_hint_size());
  for (int i = 0, n = this->notification_hint_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->notification_hint(i));
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional int64 local_modification_nudges = 4;
    if (has_local_modification_nudges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->local_modification_nudges());
    }

    // optional int64 datatype_refresh_nudges = 5;
    if (has_datatype_refresh_nudges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datatype_refresh_nudges());
    }

    // optional bool client_dropped_hints = 2;
    if (has_client_dropped_hints()) {
      total_size += 1 + 1;
    }

    // optional bool invalidations_out_of_sync = 3;
    if (has_invalidations_out_of_sync()) {
      total_size += 1 + 1;
    }

    // optional bool server_dropped_hints = 6;
    if (has_server_dropped_hints()) {
      total_size += 1 + 1;
    }

    // optional bool initial_sync_in_progress = 7;
    if (has_initial_sync_in_progress()) {
      total_size += 1 + 1;
    }

    // optional bool sync_for_resolve_conflict_in_progress = 8;
    if (has_sync_for_resolve_conflict_in_progress()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdateTriggers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdateTriggers*>(&from));
}

void GetUpdateTriggers::MergeFrom(const GetUpdateTriggers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetUpdateTriggers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notification_hint_.MergeFrom(from.notification_hint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      local_modification_nudges_ = from.local_modification_nudges_;
    }
    if (cached_has_bits & 0x00000002u) {
      datatype_refresh_nudges_ = from.datatype_refresh_nudges_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_dropped_hints_ = from.client_dropped_hints_;
    }
    if (cached_has_bits & 0x00000008u) {
      invalidations_out_of_sync_ = from.invalidations_out_of_sync_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_dropped_hints_ = from.server_dropped_hints_;
    }
    if (cached_has_bits & 0x00000020u) {
      initial_sync_in_progress_ = from.initial_sync_in_progress_;
    }
    if (cached_has_bits & 0x00000040u) {
      sync_for_resolve_conflict_in_progress_ = from.sync_for_resolve_conflict_in_progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUpdateTriggers::CopyFrom(const GetUpdateTriggers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetUpdateTriggers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateTriggers::IsInitialized() const {
  return true;
}

void GetUpdateTriggers::Swap(GetUpdateTriggers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdateTriggers::InternalSwap(GetUpdateTriggers* other) {
  notification_hint_.InternalSwap(&other->notification_hint_);
  std::swap(local_modification_nudges_, other->local_modification_nudges_);
  std::swap(datatype_refresh_nudges_, other->datatype_refresh_nudges_);
  std::swap(client_dropped_hints_, other->client_dropped_hints_);
  std::swap(invalidations_out_of_sync_, other->invalidations_out_of_sync_);
  std::swap(server_dropped_hints_, other->server_dropped_hints_);
  std::swap(initial_sync_in_progress_, other->initial_sync_in_progress_);
  std::swap(sync_for_resolve_conflict_in_progress_, other->sync_for_resolve_conflict_in_progress_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetUpdateTriggers::GetTypeName() const {
  return "sync_pb.GetUpdateTriggers";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUpdateTriggers

// repeated string notification_hint = 1;
int GetUpdateTriggers::notification_hint_size() const {
  return notification_hint_.size();
}
void GetUpdateTriggers::clear_notification_hint() {
  notification_hint_.Clear();
}
const ::std::string& GetUpdateTriggers::notification_hint(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.notification_hint)
  return notification_hint_.Get(index);
}
::std::string* GetUpdateTriggers::mutable_notification_hint(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdateTriggers.notification_hint)
  return notification_hint_.Mutable(index);
}
void GetUpdateTriggers::set_notification_hint(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.notification_hint)
  notification_hint_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void GetUpdateTriggers::set_notification_hint(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.notification_hint)
  notification_hint_.Mutable(index)->assign(std::move(value));
}
#endif
void GetUpdateTriggers::set_notification_hint(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  notification_hint_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.GetUpdateTriggers.notification_hint)
}
void GetUpdateTriggers::set_notification_hint(int index, const char* value, size_t size) {
  notification_hint_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.GetUpdateTriggers.notification_hint)
}
::std::string* GetUpdateTriggers::add_notification_hint() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.GetUpdateTriggers.notification_hint)
  return notification_hint_.Add();
}
void GetUpdateTriggers::add_notification_hint(const ::std::string& value) {
  notification_hint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdateTriggers.notification_hint)
}
#if LANG_CXX11
void GetUpdateTriggers::add_notification_hint(::std::string&& value) {
  notification_hint_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdateTriggers.notification_hint)
}
#endif
void GetUpdateTriggers::add_notification_hint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  notification_hint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.GetUpdateTriggers.notification_hint)
}
void GetUpdateTriggers::add_notification_hint(const char* value, size_t size) {
  notification_hint_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.GetUpdateTriggers.notification_hint)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetUpdateTriggers::notification_hint() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdateTriggers.notification_hint)
  return notification_hint_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GetUpdateTriggers::mutable_notification_hint() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdateTriggers.notification_hint)
  return &notification_hint_;
}

// optional bool client_dropped_hints = 2;
bool GetUpdateTriggers::has_client_dropped_hints() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUpdateTriggers::set_has_client_dropped_hints() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUpdateTriggers::clear_has_client_dropped_hints() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUpdateTriggers::clear_client_dropped_hints() {
  client_dropped_hints_ = false;
  clear_has_client_dropped_hints();
}
bool GetUpdateTriggers::client_dropped_hints() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.client_dropped_hints)
  return client_dropped_hints_;
}
void GetUpdateTriggers::set_client_dropped_hints(bool value) {
  set_has_client_dropped_hints();
  client_dropped_hints_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.client_dropped_hints)
}

// optional bool invalidations_out_of_sync = 3;
bool GetUpdateTriggers::has_invalidations_out_of_sync() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetUpdateTriggers::set_has_invalidations_out_of_sync() {
  _has_bits_[0] |= 0x00000008u;
}
void GetUpdateTriggers::clear_has_invalidations_out_of_sync() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetUpdateTriggers::clear_invalidations_out_of_sync() {
  invalidations_out_of_sync_ = false;
  clear_has_invalidations_out_of_sync();
}
bool GetUpdateTriggers::invalidations_out_of_sync() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.invalidations_out_of_sync)
  return invalidations_out_of_sync_;
}
void GetUpdateTriggers::set_invalidations_out_of_sync(bool value) {
  set_has_invalidations_out_of_sync();
  invalidations_out_of_sync_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.invalidations_out_of_sync)
}

// optional int64 local_modification_nudges = 4;
bool GetUpdateTriggers::has_local_modification_nudges() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUpdateTriggers::set_has_local_modification_nudges() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUpdateTriggers::clear_has_local_modification_nudges() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUpdateTriggers::clear_local_modification_nudges() {
  local_modification_nudges_ = GOOGLE_LONGLONG(0);
  clear_has_local_modification_nudges();
}
::google::protobuf::int64 GetUpdateTriggers::local_modification_nudges() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.local_modification_nudges)
  return local_modification_nudges_;
}
void GetUpdateTriggers::set_local_modification_nudges(::google::protobuf::int64 value) {
  set_has_local_modification_nudges();
  local_modification_nudges_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.local_modification_nudges)
}

// optional int64 datatype_refresh_nudges = 5;
bool GetUpdateTriggers::has_datatype_refresh_nudges() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUpdateTriggers::set_has_datatype_refresh_nudges() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUpdateTriggers::clear_has_datatype_refresh_nudges() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUpdateTriggers::clear_datatype_refresh_nudges() {
  datatype_refresh_nudges_ = GOOGLE_LONGLONG(0);
  clear_has_datatype_refresh_nudges();
}
::google::protobuf::int64 GetUpdateTriggers::datatype_refresh_nudges() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.datatype_refresh_nudges)
  return datatype_refresh_nudges_;
}
void GetUpdateTriggers::set_datatype_refresh_nudges(::google::protobuf::int64 value) {
  set_has_datatype_refresh_nudges();
  datatype_refresh_nudges_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.datatype_refresh_nudges)
}

// optional bool server_dropped_hints = 6;
bool GetUpdateTriggers::has_server_dropped_hints() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetUpdateTriggers::set_has_server_dropped_hints() {
  _has_bits_[0] |= 0x00000010u;
}
void GetUpdateTriggers::clear_has_server_dropped_hints() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetUpdateTriggers::clear_server_dropped_hints() {
  server_dropped_hints_ = false;
  clear_has_server_dropped_hints();
}
bool GetUpdateTriggers::server_dropped_hints() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.server_dropped_hints)
  return server_dropped_hints_;
}
void GetUpdateTriggers::set_server_dropped_hints(bool value) {
  set_has_server_dropped_hints();
  server_dropped_hints_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.server_dropped_hints)
}

// optional bool initial_sync_in_progress = 7;
bool GetUpdateTriggers::has_initial_sync_in_progress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetUpdateTriggers::set_has_initial_sync_in_progress() {
  _has_bits_[0] |= 0x00000020u;
}
void GetUpdateTriggers::clear_has_initial_sync_in_progress() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetUpdateTriggers::clear_initial_sync_in_progress() {
  initial_sync_in_progress_ = false;
  clear_has_initial_sync_in_progress();
}
bool GetUpdateTriggers::initial_sync_in_progress() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.initial_sync_in_progress)
  return initial_sync_in_progress_;
}
void GetUpdateTriggers::set_initial_sync_in_progress(bool value) {
  set_has_initial_sync_in_progress();
  initial_sync_in_progress_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.initial_sync_in_progress)
}

// optional bool sync_for_resolve_conflict_in_progress = 8;
bool GetUpdateTriggers::has_sync_for_resolve_conflict_in_progress() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetUpdateTriggers::set_has_sync_for_resolve_conflict_in_progress() {
  _has_bits_[0] |= 0x00000040u;
}
void GetUpdateTriggers::clear_has_sync_for_resolve_conflict_in_progress() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetUpdateTriggers::clear_sync_for_resolve_conflict_in_progress() {
  sync_for_resolve_conflict_in_progress_ = false;
  clear_has_sync_for_resolve_conflict_in_progress();
}
bool GetUpdateTriggers::sync_for_resolve_conflict_in_progress() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.sync_for_resolve_conflict_in_progress)
  return sync_for_resolve_conflict_in_progress_;
}
void GetUpdateTriggers::set_sync_for_resolve_conflict_in_progress(bool value) {
  set_has_sync_for_resolve_conflict_in_progress();
  sync_for_resolve_conflict_in_progress_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.sync_for_resolve_conflict_in_progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GarbageCollectionDirective::kTypeFieldNumber;
const int GarbageCollectionDirective::kVersionWatermarkFieldNumber;
const int GarbageCollectionDirective::kAgeWatermarkInDaysFieldNumber;
const int GarbageCollectionDirective::kMaxNumberOfItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GarbageCollectionDirective::GarbageCollectionDirective()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GarbageCollectionDirective)
}
GarbageCollectionDirective::GarbageCollectionDirective(const GarbageCollectionDirective& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_watermark_, &from.version_watermark_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_items_) -
    reinterpret_cast<char*>(&version_watermark_)) + sizeof(max_number_of_items_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GarbageCollectionDirective)
}

void GarbageCollectionDirective::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_watermark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_items_) -
      reinterpret_cast<char*>(&version_watermark_)) + sizeof(max_number_of_items_));
}

GarbageCollectionDirective::~GarbageCollectionDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.GarbageCollectionDirective)
  SharedDtor();
}

void GarbageCollectionDirective::SharedDtor() {
}

void GarbageCollectionDirective::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GarbageCollectionDirective& GarbageCollectionDirective::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

GarbageCollectionDirective* GarbageCollectionDirective::New(::google::protobuf::Arena* arena) const {
  GarbageCollectionDirective* n = new GarbageCollectionDirective;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GarbageCollectionDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GarbageCollectionDirective)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&version_watermark_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_number_of_items_) -
        reinterpret_cast<char*>(&version_watermark_)) + sizeof(max_number_of_items_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GarbageCollectionDirective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GarbageCollectionDirective)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GarbageCollectionDirective_Type_IsValid(value)) {
            set_type(static_cast< ::sync_pb::GarbageCollectionDirective_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 version_watermark = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_version_watermark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_watermark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 age_watermark_in_days = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_age_watermark_in_days();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_watermark_in_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_number_of_items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_number_of_items();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_number_of_items_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GarbageCollectionDirective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GarbageCollectionDirective)
  return false;
#undef DO_
}

void GarbageCollectionDirective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GarbageCollectionDirective)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 version_watermark = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version_watermark(), output);
  }

  // optional int32 age_watermark_in_days = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age_watermark_in_days(), output);
  }

  // optional int32 max_number_of_items = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_number_of_items(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GarbageCollectionDirective)
}

size_t GarbageCollectionDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GarbageCollectionDirective)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 version_watermark = 2;
    if (has_version_watermark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version_watermark());
    }

    // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 age_watermark_in_days = 3;
    if (has_age_watermark_in_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_watermark_in_days());
    }

    // optional int32 max_number_of_items = 4;
    if (has_max_number_of_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_number_of_items());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GarbageCollectionDirective::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GarbageCollectionDirective*>(&from));
}

void GarbageCollectionDirective::MergeFrom(const GarbageCollectionDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GarbageCollectionDirective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      version_watermark_ = from.version_watermark_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      age_watermark_in_days_ = from.age_watermark_in_days_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_number_of_items_ = from.max_number_of_items_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GarbageCollectionDirective::CopyFrom(const GarbageCollectionDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GarbageCollectionDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarbageCollectionDirective::IsInitialized() const {
  return true;
}

void GarbageCollectionDirective::Swap(GarbageCollectionDirective* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GarbageCollectionDirective::InternalSwap(GarbageCollectionDirective* other) {
  std::swap(version_watermark_, other->version_watermark_);
  std::swap(type_, other->type_);
  std::swap(age_watermark_in_days_, other->age_watermark_in_days_);
  std::swap(max_number_of_items_, other->max_number_of_items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GarbageCollectionDirective::GetTypeName() const {
  return "sync_pb.GarbageCollectionDirective";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GarbageCollectionDirective

// optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
bool GarbageCollectionDirective::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GarbageCollectionDirective::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void GarbageCollectionDirective::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void GarbageCollectionDirective::clear_type() {
  type_ = 0;
  clear_has_type();
}
::sync_pb::GarbageCollectionDirective_Type GarbageCollectionDirective::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.GarbageCollectionDirective.type)
  return static_cast< ::sync_pb::GarbageCollectionDirective_Type >(type_);
}
void GarbageCollectionDirective::set_type(::sync_pb::GarbageCollectionDirective_Type value) {
  assert(::sync_pb::GarbageCollectionDirective_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GarbageCollectionDirective.type)
}

// optional int64 version_watermark = 2;
bool GarbageCollectionDirective::has_version_watermark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GarbageCollectionDirective::set_has_version_watermark() {
  _has_bits_[0] |= 0x00000001u;
}
void GarbageCollectionDirective::clear_has_version_watermark() {
  _has_bits_[0] &= ~0x00000001u;
}
void GarbageCollectionDirective::clear_version_watermark() {
  version_watermark_ = GOOGLE_LONGLONG(0);
  clear_has_version_watermark();
}
::google::protobuf::int64 GarbageCollectionDirective::version_watermark() const {
  // @@protoc_insertion_point(field_get:sync_pb.GarbageCollectionDirective.version_watermark)
  return version_watermark_;
}
void GarbageCollectionDirective::set_version_watermark(::google::protobuf::int64 value) {
  set_has_version_watermark();
  version_watermark_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GarbageCollectionDirective.version_watermark)
}

// optional int32 age_watermark_in_days = 3;
bool GarbageCollectionDirective::has_age_watermark_in_days() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GarbageCollectionDirective::set_has_age_watermark_in_days() {
  _has_bits_[0] |= 0x00000004u;
}
void GarbageCollectionDirective::clear_has_age_watermark_in_days() {
  _has_bits_[0] &= ~0x00000004u;
}
void GarbageCollectionDirective::clear_age_watermark_in_days() {
  age_watermark_in_days_ = 0;
  clear_has_age_watermark_in_days();
}
::google::protobuf::int32 GarbageCollectionDirective::age_watermark_in_days() const {
  // @@protoc_insertion_point(field_get:sync_pb.GarbageCollectionDirective.age_watermark_in_days)
  return age_watermark_in_days_;
}
void GarbageCollectionDirective::set_age_watermark_in_days(::google::protobuf::int32 value) {
  set_has_age_watermark_in_days();
  age_watermark_in_days_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GarbageCollectionDirective.age_watermark_in_days)
}

// optional int32 max_number_of_items = 4;
bool GarbageCollectionDirective::has_max_number_of_items() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GarbageCollectionDirective::set_has_max_number_of_items() {
  _has_bits_[0] |= 0x00000008u;
}
void GarbageCollectionDirective::clear_has_max_number_of_items() {
  _has_bits_[0] &= ~0x00000008u;
}
void GarbageCollectionDirective::clear_max_number_of_items() {
  max_number_of_items_ = 0;
  clear_has_max_number_of_items();
}
::google::protobuf::int32 GarbageCollectionDirective::max_number_of_items() const {
  // @@protoc_insertion_point(field_get:sync_pb.GarbageCollectionDirective.max_number_of_items)
  return max_number_of_items_;
}
void GarbageCollectionDirective::set_max_number_of_items(::google::protobuf::int32 value) {
  set_has_max_number_of_items();
  max_number_of_items_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GarbageCollectionDirective.max_number_of_items)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataTypeProgressMarker::kDataTypeIdFieldNumber;
const int DataTypeProgressMarker::kTokenFieldNumber;
const int DataTypeProgressMarker::kTimestampTokenForMigrationFieldNumber;
const int DataTypeProgressMarker::kNotificationHintFieldNumber;
const int DataTypeProgressMarker::kGetUpdateTriggersFieldNumber;
const int DataTypeProgressMarker::kGcDirectiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataTypeProgressMarker::DataTypeProgressMarker()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.DataTypeProgressMarker)
}
DataTypeProgressMarker::DataTypeProgressMarker(const DataTypeProgressMarker& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  notification_hint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notification_hint()) {
    notification_hint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_hint_);
  }
  if (from.has_get_update_triggers()) {
    get_update_triggers_ = new ::sync_pb::GetUpdateTriggers(*from.get_update_triggers_);
  } else {
    get_update_triggers_ = NULL;
  }
  if (from.has_gc_directive()) {
    gc_directive_ = new ::sync_pb::GarbageCollectionDirective(*from.gc_directive_);
  } else {
    gc_directive_ = NULL;
  }
  ::memcpy(&timestamp_token_for_migration_, &from.timestamp_token_for_migration_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_id_) -
    reinterpret_cast<char*>(&timestamp_token_for_migration_)) + sizeof(data_type_id_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.DataTypeProgressMarker)
}

void DataTypeProgressMarker::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notification_hint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&get_update_triggers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_id_) -
      reinterpret_cast<char*>(&get_update_triggers_)) + sizeof(data_type_id_));
}

DataTypeProgressMarker::~DataTypeProgressMarker() {
  // @@protoc_insertion_point(destructor:sync_pb.DataTypeProgressMarker)
  SharedDtor();
}

void DataTypeProgressMarker::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notification_hint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete get_update_triggers_;
  }
  if (this != internal_default_instance()) {
    delete gc_directive_;
  }
}

void DataTypeProgressMarker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataTypeProgressMarker& DataTypeProgressMarker::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataTypeProgressMarker* DataTypeProgressMarker::New(::google::protobuf::Arena* arena) const {
  DataTypeProgressMarker* n = new DataTypeProgressMarker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataTypeProgressMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DataTypeProgressMarker)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_notification_hint()) {
      GOOGLE_DCHECK(!notification_hint_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notification_hint_.UnsafeRawStringPointer())->clear();
    }
    if (has_get_update_triggers()) {
      GOOGLE_DCHECK(get_update_triggers_ != NULL);
      get_update_triggers_->::sync_pb::GetUpdateTriggers::Clear();
    }
    if (has_gc_directive()) {
      GOOGLE_DCHECK(gc_directive_ != NULL);
      gc_directive_->::sync_pb::GarbageCollectionDirective::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&timestamp_token_for_migration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_type_id_) -
        reinterpret_cast<char*>(&timestamp_token_for_migration_)) + sizeof(data_type_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataTypeProgressMarker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.DataTypeProgressMarker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_data_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_token_for_migration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timestamp_token_for_migration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_token_for_migration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notification_hint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_hint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_update_triggers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gc_directive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.DataTypeProgressMarker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.DataTypeProgressMarker)
  return false;
#undef DO_
}

void DataTypeProgressMarker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.DataTypeProgressMarker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_type_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_type_id(), output);
  }

  // optional bytes token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->token(), output);
  }

  // optional int64 timestamp_token_for_migration = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp_token_for_migration(), output);
  }

  // optional string notification_hint = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->notification_hint(), output);
  }

  // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->get_update_triggers_, output);
  }

  // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->gc_directive_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.DataTypeProgressMarker)
}

size_t DataTypeProgressMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DataTypeProgressMarker)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional string notification_hint = 4;
    if (has_notification_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_hint());
    }

    // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
    if (has_get_update_triggers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->get_update_triggers_);
    }

    // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
    if (has_gc_directive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gc_directive_);
    }

    // optional int64 timestamp_token_for_migration = 3;
    if (has_timestamp_token_for_migration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_token_for_migration());
    }

    // optional int32 data_type_id = 1;
    if (has_data_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTypeProgressMarker::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataTypeProgressMarker*>(&from));
}

void DataTypeProgressMarker::MergeFrom(const DataTypeProgressMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DataTypeProgressMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_notification_hint();
      notification_hint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_hint_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_get_update_triggers()->::sync_pb::GetUpdateTriggers::MergeFrom(from.get_update_triggers());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_gc_directive()->::sync_pb::GarbageCollectionDirective::MergeFrom(from.gc_directive());
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_token_for_migration_ = from.timestamp_token_for_migration_;
    }
    if (cached_has_bits & 0x00000020u) {
      data_type_id_ = from.data_type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataTypeProgressMarker::CopyFrom(const DataTypeProgressMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DataTypeProgressMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTypeProgressMarker::IsInitialized() const {
  return true;
}

void DataTypeProgressMarker::Swap(DataTypeProgressMarker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataTypeProgressMarker::InternalSwap(DataTypeProgressMarker* other) {
  token_.Swap(&other->token_);
  notification_hint_.Swap(&other->notification_hint_);
  std::swap(get_update_triggers_, other->get_update_triggers_);
  std::swap(gc_directive_, other->gc_directive_);
  std::swap(timestamp_token_for_migration_, other->timestamp_token_for_migration_);
  std::swap(data_type_id_, other->data_type_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DataTypeProgressMarker::GetTypeName() const {
  return "sync_pb.DataTypeProgressMarker";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataTypeProgressMarker

// optional int32 data_type_id = 1;
bool DataTypeProgressMarker::has_data_type_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataTypeProgressMarker::set_has_data_type_id() {
  _has_bits_[0] |= 0x00000020u;
}
void DataTypeProgressMarker::clear_has_data_type_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataTypeProgressMarker::clear_data_type_id() {
  data_type_id_ = 0;
  clear_has_data_type_id();
}
::google::protobuf::int32 DataTypeProgressMarker::data_type_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.data_type_id)
  return data_type_id_;
}
void DataTypeProgressMarker::set_data_type_id(::google::protobuf::int32 value) {
  set_has_data_type_id();
  data_type_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeProgressMarker.data_type_id)
}

// optional bytes token = 2;
bool DataTypeProgressMarker::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataTypeProgressMarker::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void DataTypeProgressMarker::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataTypeProgressMarker::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& DataTypeProgressMarker::token() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.token)
  return token_.GetNoArena();
}
void DataTypeProgressMarker::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeProgressMarker.token)
}
#if LANG_CXX11
void DataTypeProgressMarker::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DataTypeProgressMarker.token)
}
#endif
void DataTypeProgressMarker::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DataTypeProgressMarker.token)
}
void DataTypeProgressMarker::set_token(const void* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DataTypeProgressMarker.token)
}
::std::string* DataTypeProgressMarker::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataTypeProgressMarker::release_token() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataTypeProgressMarker::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.token)
}

// optional int64 timestamp_token_for_migration = 3;
bool DataTypeProgressMarker::has_timestamp_token_for_migration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataTypeProgressMarker::set_has_timestamp_token_for_migration() {
  _has_bits_[0] |= 0x00000010u;
}
void DataTypeProgressMarker::clear_has_timestamp_token_for_migration() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataTypeProgressMarker::clear_timestamp_token_for_migration() {
  timestamp_token_for_migration_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_token_for_migration();
}
::google::protobuf::int64 DataTypeProgressMarker::timestamp_token_for_migration() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.timestamp_token_for_migration)
  return timestamp_token_for_migration_;
}
void DataTypeProgressMarker::set_timestamp_token_for_migration(::google::protobuf::int64 value) {
  set_has_timestamp_token_for_migration();
  timestamp_token_for_migration_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeProgressMarker.timestamp_token_for_migration)
}

// optional string notification_hint = 4;
bool DataTypeProgressMarker::has_notification_hint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataTypeProgressMarker::set_has_notification_hint() {
  _has_bits_[0] |= 0x00000002u;
}
void DataTypeProgressMarker::clear_has_notification_hint() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataTypeProgressMarker::clear_notification_hint() {
  notification_hint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notification_hint();
}
const ::std::string& DataTypeProgressMarker::notification_hint() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.notification_hint)
  return notification_hint_.GetNoArena();
}
void DataTypeProgressMarker::set_notification_hint(const ::std::string& value) {
  set_has_notification_hint();
  notification_hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeProgressMarker.notification_hint)
}
#if LANG_CXX11
void DataTypeProgressMarker::set_notification_hint(::std::string&& value) {
  set_has_notification_hint();
  notification_hint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DataTypeProgressMarker.notification_hint)
}
#endif
void DataTypeProgressMarker::set_notification_hint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_notification_hint();
  notification_hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DataTypeProgressMarker.notification_hint)
}
void DataTypeProgressMarker::set_notification_hint(const char* value, size_t size) {
  set_has_notification_hint();
  notification_hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DataTypeProgressMarker.notification_hint)
}
::std::string* DataTypeProgressMarker::mutable_notification_hint() {
  set_has_notification_hint();
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.notification_hint)
  return notification_hint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataTypeProgressMarker::release_notification_hint() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.notification_hint)
  clear_has_notification_hint();
  return notification_hint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataTypeProgressMarker::set_allocated_notification_hint(::std::string* notification_hint) {
  if (notification_hint != NULL) {
    set_has_notification_hint();
  } else {
    clear_has_notification_hint();
  }
  notification_hint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notification_hint);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.notification_hint)
}

// optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
bool DataTypeProgressMarker::has_get_update_triggers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataTypeProgressMarker::set_has_get_update_triggers() {
  _has_bits_[0] |= 0x00000004u;
}
void DataTypeProgressMarker::clear_has_get_update_triggers() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataTypeProgressMarker::clear_get_update_triggers() {
  if (get_update_triggers_ != NULL) get_update_triggers_->::sync_pb::GetUpdateTriggers::Clear();
  clear_has_get_update_triggers();
}
const ::sync_pb::GetUpdateTriggers& DataTypeProgressMarker::get_update_triggers() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.get_update_triggers)
  return get_update_triggers_ != NULL ? *get_update_triggers_
                         : *::sync_pb::GetUpdateTriggers::internal_default_instance();
}
::sync_pb::GetUpdateTriggers* DataTypeProgressMarker::mutable_get_update_triggers() {
  set_has_get_update_triggers();
  if (get_update_triggers_ == NULL) {
    get_update_triggers_ = new ::sync_pb::GetUpdateTriggers;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.get_update_triggers)
  return get_update_triggers_;
}
::sync_pb::GetUpdateTriggers* DataTypeProgressMarker::release_get_update_triggers() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.get_update_triggers)
  clear_has_get_update_triggers();
  ::sync_pb::GetUpdateTriggers* temp = get_update_triggers_;
  get_update_triggers_ = NULL;
  return temp;
}
void DataTypeProgressMarker::set_allocated_get_update_triggers(::sync_pb::GetUpdateTriggers* get_update_triggers) {
  delete get_update_triggers_;
  get_update_triggers_ = get_update_triggers;
  if (get_update_triggers) {
    set_has_get_update_triggers();
  } else {
    clear_has_get_update_triggers();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.get_update_triggers)
}

// optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
bool DataTypeProgressMarker::has_gc_directive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataTypeProgressMarker::set_has_gc_directive() {
  _has_bits_[0] |= 0x00000008u;
}
void DataTypeProgressMarker::clear_has_gc_directive() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataTypeProgressMarker::clear_gc_directive() {
  if (gc_directive_ != NULL) gc_directive_->::sync_pb::GarbageCollectionDirective::Clear();
  clear_has_gc_directive();
}
const ::sync_pb::GarbageCollectionDirective& DataTypeProgressMarker::gc_directive() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.gc_directive)
  return gc_directive_ != NULL ? *gc_directive_
                         : *::sync_pb::GarbageCollectionDirective::internal_default_instance();
}
::sync_pb::GarbageCollectionDirective* DataTypeProgressMarker::mutable_gc_directive() {
  set_has_gc_directive();
  if (gc_directive_ == NULL) {
    gc_directive_ = new ::sync_pb::GarbageCollectionDirective;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.gc_directive)
  return gc_directive_;
}
::sync_pb::GarbageCollectionDirective* DataTypeProgressMarker::release_gc_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.gc_directive)
  clear_has_gc_directive();
  ::sync_pb::GarbageCollectionDirective* temp = gc_directive_;
  gc_directive_ = NULL;
  return temp;
}
void DataTypeProgressMarker::set_allocated_gc_directive(::sync_pb::GarbageCollectionDirective* gc_directive) {
  delete gc_directive_;
  gc_directive_ = gc_directive;
  if (gc_directive) {
    set_has_gc_directive();
  } else {
    clear_has_gc_directive();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.gc_directive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdatesMessage::kFromTimestampFieldNumber;
const int GetUpdatesMessage::kCallerInfoFieldNumber;
const int GetUpdatesMessage::kFetchFoldersFieldNumber;
const int GetUpdatesMessage::kRequestedTypesFieldNumber;
const int GetUpdatesMessage::kBatchSizeFieldNumber;
const int GetUpdatesMessage::kFromProgressMarkerFieldNumber;
const int GetUpdatesMessage::kStreamingFieldNumber;
const int GetUpdatesMessage::kNeedEncryptionKeyFieldNumber;
const int GetUpdatesMessage::kCreateMobileBookmarksFolderFieldNumber;
const int GetUpdatesMessage::kGetUpdatesOriginFieldNumber;
const int GetUpdatesMessage::kIsRetryFieldNumber;
const int GetUpdatesMessage::kClientContextsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdatesMessage::GetUpdatesMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetUpdatesMessage)
}
GetUpdatesMessage::GetUpdatesMessage(const GetUpdatesMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      from_progress_marker_(from.from_progress_marker_),
      client_contexts_(from.client_contexts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_caller_info()) {
    caller_info_ = new ::sync_pb::GetUpdatesCallerInfo(*from.caller_info_);
  } else {
    caller_info_ = NULL;
  }
  if (from.has_requested_types()) {
    requested_types_ = new ::sync_pb::EntitySpecifics(*from.requested_types_);
  } else {
    requested_types_ = NULL;
  }
  ::memcpy(&from_timestamp_, &from.from_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&fetch_folders_) -
    reinterpret_cast<char*>(&from_timestamp_)) + sizeof(fetch_folders_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetUpdatesMessage)
}

void GetUpdatesMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&caller_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_retry_) -
      reinterpret_cast<char*>(&caller_info_)) + sizeof(is_retry_));
  fetch_folders_ = true;
}

GetUpdatesMessage::~GetUpdatesMessage() {
  // @@protoc_insertion_point(destructor:sync_pb.GetUpdatesMessage)
  SharedDtor();
}

void GetUpdatesMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete caller_info_;
  }
  if (this != internal_default_instance()) {
    delete requested_types_;
  }
}

void GetUpdatesMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdatesMessage& GetUpdatesMessage::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUpdatesMessage* GetUpdatesMessage::New(::google::protobuf::Arena* arena) const {
  GetUpdatesMessage* n = new GetUpdatesMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUpdatesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetUpdatesMessage)
  from_progress_marker_.Clear();
  client_contexts_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_caller_info()) {
      GOOGLE_DCHECK(caller_info_ != NULL);
      caller_info_->::sync_pb::GetUpdatesCallerInfo::Clear();
    }
    if (has_requested_types()) {
      GOOGLE_DCHECK(requested_types_ != NULL);
      requested_types_->::sync_pb::EntitySpecifics::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&from_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&create_mobile_bookmarks_folder_) -
        reinterpret_cast<char*>(&from_timestamp_)) + sizeof(create_mobile_bookmarks_folder_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    is_retry_ = false;
    fetch_folders_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUpdatesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetUpdatesMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 from_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_from_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caller_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fetch_folders = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fetch_folders();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_folders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.EntitySpecifics requested_types = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requested_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 batch_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_from_progress_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool streaming = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_encryption_key = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_need_encryption_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_encryption_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_GetUpdatesOrigin_IsValid(value)) {
            set_get_updates_origin(static_cast< ::sync_pb::SyncEnums_GetUpdatesOrigin >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_retry = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_retry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_retry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeContext client_contexts = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool create_mobile_bookmarks_folder = 1000 [default = false];
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_create_mobile_bookmarks_folder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_mobile_bookmarks_folder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetUpdatesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetUpdatesMessage)
  return false;
#undef DO_
}

void GetUpdatesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetUpdatesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 from_timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->from_timestamp(), output);
  }

  // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->caller_info_, output);
  }

  // optional bool fetch_folders = 3 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fetch_folders(), output);
  }

  // optional .sync_pb.EntitySpecifics requested_types = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->requested_types_, output);
  }

  // optional int32 batch_size = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->batch_size(), output);
  }

  // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->from_progress_marker_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->from_progress_marker(static_cast<int>(i)), output);
  }

  // optional bool streaming = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->streaming(), output);
  }

  // optional bool need_encryption_key = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->need_encryption_key(), output);
  }

  // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->get_updates_origin(), output);
  }

  // optional bool is_retry = 10 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_retry(), output);
  }

  // repeated .sync_pb.DataTypeContext client_contexts = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_contexts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->client_contexts(static_cast<int>(i)), output);
  }

  // optional bool create_mobile_bookmarks_folder = 1000 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1000, this->create_mobile_bookmarks_folder(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetUpdatesMessage)
}

size_t GetUpdatesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetUpdatesMessage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->from_progress_marker_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_progress_marker(static_cast<int>(i)));
    }
  }

  // repeated .sync_pb.DataTypeContext client_contexts = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->client_contexts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_contexts(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
    if (has_caller_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->caller_info_);
    }

    // optional .sync_pb.EntitySpecifics requested_types = 4;
    if (has_requested_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->requested_types_);
    }

    // optional int64 from_timestamp = 1;
    if (has_from_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->from_timestamp());
    }

    // optional int32 batch_size = 5;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

    // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
    if (has_get_updates_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->get_updates_origin());
    }

    // optional bool streaming = 7 [default = false];
    if (has_streaming()) {
      total_size += 1 + 1;
    }

    // optional bool need_encryption_key = 8 [default = false];
    if (has_need_encryption_key()) {
      total_size += 1 + 1;
    }

    // optional bool create_mobile_bookmarks_folder = 1000 [default = false];
    if (has_create_mobile_bookmarks_folder()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool is_retry = 10 [default = false];
    if (has_is_retry()) {
      total_size += 1 + 1;
    }

    // optional bool fetch_folders = 3 [default = true];
    if (has_fetch_folders()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatesMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdatesMessage*>(&from));
}

void GetUpdatesMessage::MergeFrom(const GetUpdatesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetUpdatesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  from_progress_marker_.MergeFrom(from.from_progress_marker_);
  client_contexts_.MergeFrom(from.client_contexts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_caller_info()->::sync_pb::GetUpdatesCallerInfo::MergeFrom(from.caller_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_requested_types()->::sync_pb::EntitySpecifics::MergeFrom(from.requested_types());
    }
    if (cached_has_bits & 0x00000004u) {
      from_timestamp_ = from.from_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      get_updates_origin_ = from.get_updates_origin_;
    }
    if (cached_has_bits & 0x00000020u) {
      streaming_ = from.streaming_;
    }
    if (cached_has_bits & 0x00000040u) {
      need_encryption_key_ = from.need_encryption_key_;
    }
    if (cached_has_bits & 0x00000080u) {
      create_mobile_bookmarks_folder_ = from.create_mobile_bookmarks_folder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      is_retry_ = from.is_retry_;
    }
    if (cached_has_bits & 0x00000200u) {
      fetch_folders_ = from.fetch_folders_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUpdatesMessage::CopyFrom(const GetUpdatesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetUpdatesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesMessage::IsInitialized() const {
  if (has_caller_info()) {
    if (!this->caller_info_->IsInitialized()) return false;
  }
  return true;
}

void GetUpdatesMessage::Swap(GetUpdatesMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdatesMessage::InternalSwap(GetUpdatesMessage* other) {
  from_progress_marker_.InternalSwap(&other->from_progress_marker_);
  client_contexts_.InternalSwap(&other->client_contexts_);
  std::swap(caller_info_, other->caller_info_);
  std::swap(requested_types_, other->requested_types_);
  std::swap(from_timestamp_, other->from_timestamp_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(get_updates_origin_, other->get_updates_origin_);
  std::swap(streaming_, other->streaming_);
  std::swap(need_encryption_key_, other->need_encryption_key_);
  std::swap(create_mobile_bookmarks_folder_, other->create_mobile_bookmarks_folder_);
  std::swap(is_retry_, other->is_retry_);
  std::swap(fetch_folders_, other->fetch_folders_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetUpdatesMessage::GetTypeName() const {
  return "sync_pb.GetUpdatesMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUpdatesMessage

// optional int64 from_timestamp = 1;
bool GetUpdatesMessage::has_from_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUpdatesMessage::set_has_from_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUpdatesMessage::clear_has_from_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUpdatesMessage::clear_from_timestamp() {
  from_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_from_timestamp();
}
::google::protobuf::int64 GetUpdatesMessage::from_timestamp() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.from_timestamp)
  return from_timestamp_;
}
void GetUpdatesMessage::set_from_timestamp(::google::protobuf::int64 value) {
  set_has_from_timestamp();
  from_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.from_timestamp)
}

// optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
bool GetUpdatesMessage::has_caller_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUpdatesMessage::set_has_caller_info() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUpdatesMessage::clear_has_caller_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUpdatesMessage::clear_caller_info() {
  if (caller_info_ != NULL) caller_info_->::sync_pb::GetUpdatesCallerInfo::Clear();
  clear_has_caller_info();
}
const ::sync_pb::GetUpdatesCallerInfo& GetUpdatesMessage::caller_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.caller_info)
  return caller_info_ != NULL ? *caller_info_
                         : *::sync_pb::GetUpdatesCallerInfo::internal_default_instance();
}
::sync_pb::GetUpdatesCallerInfo* GetUpdatesMessage::mutable_caller_info() {
  set_has_caller_info();
  if (caller_info_ == NULL) {
    caller_info_ = new ::sync_pb::GetUpdatesCallerInfo;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesMessage.caller_info)
  return caller_info_;
}
::sync_pb::GetUpdatesCallerInfo* GetUpdatesMessage::release_caller_info() {
  // @@protoc_insertion_point(field_release:sync_pb.GetUpdatesMessage.caller_info)
  clear_has_caller_info();
  ::sync_pb::GetUpdatesCallerInfo* temp = caller_info_;
  caller_info_ = NULL;
  return temp;
}
void GetUpdatesMessage::set_allocated_caller_info(::sync_pb::GetUpdatesCallerInfo* caller_info) {
  delete caller_info_;
  caller_info_ = caller_info;
  if (caller_info) {
    set_has_caller_info();
  } else {
    clear_has_caller_info();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GetUpdatesMessage.caller_info)
}

// optional bool fetch_folders = 3 [default = true];
bool GetUpdatesMessage::has_fetch_folders() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GetUpdatesMessage::set_has_fetch_folders() {
  _has_bits_[0] |= 0x00000200u;
}
void GetUpdatesMessage::clear_has_fetch_folders() {
  _has_bits_[0] &= ~0x00000200u;
}
void GetUpdatesMessage::clear_fetch_folders() {
  fetch_folders_ = true;
  clear_has_fetch_folders();
}
bool GetUpdatesMessage::fetch_folders() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.fetch_folders)
  return fetch_folders_;
}
void GetUpdatesMessage::set_fetch_folders(bool value) {
  set_has_fetch_folders();
  fetch_folders_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.fetch_folders)
}

// optional .sync_pb.EntitySpecifics requested_types = 4;
bool GetUpdatesMessage::has_requested_types() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUpdatesMessage::set_has_requested_types() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUpdatesMessage::clear_has_requested_types() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUpdatesMessage::clear_requested_types() {
  if (requested_types_ != NULL) requested_types_->::sync_pb::EntitySpecifics::Clear();
  clear_has_requested_types();
}
const ::sync_pb::EntitySpecifics& GetUpdatesMessage::requested_types() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.requested_types)
  return requested_types_ != NULL ? *requested_types_
                         : *::sync_pb::EntitySpecifics::internal_default_instance();
}
::sync_pb::EntitySpecifics* GetUpdatesMessage::mutable_requested_types() {
  set_has_requested_types();
  if (requested_types_ == NULL) {
    requested_types_ = new ::sync_pb::EntitySpecifics;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesMessage.requested_types)
  return requested_types_;
}
::sync_pb::EntitySpecifics* GetUpdatesMessage::release_requested_types() {
  // @@protoc_insertion_point(field_release:sync_pb.GetUpdatesMessage.requested_types)
  clear_has_requested_types();
  ::sync_pb::EntitySpecifics* temp = requested_types_;
  requested_types_ = NULL;
  return temp;
}
void GetUpdatesMessage::set_allocated_requested_types(::sync_pb::EntitySpecifics* requested_types) {
  delete requested_types_;
  requested_types_ = requested_types;
  if (requested_types) {
    set_has_requested_types();
  } else {
    clear_has_requested_types();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GetUpdatesMessage.requested_types)
}

// optional int32 batch_size = 5;
bool GetUpdatesMessage::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetUpdatesMessage::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
void GetUpdatesMessage::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetUpdatesMessage::clear_batch_size() {
  batch_size_ = 0;
  clear_has_batch_size();
}
::google::protobuf::int32 GetUpdatesMessage::batch_size() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.batch_size)
  return batch_size_;
}
void GetUpdatesMessage::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.batch_size)
}

// repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
int GetUpdatesMessage::from_progress_marker_size() const {
  return from_progress_marker_.size();
}
void GetUpdatesMessage::clear_from_progress_marker() {
  from_progress_marker_.Clear();
}
const ::sync_pb::DataTypeProgressMarker& GetUpdatesMessage::from_progress_marker(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.from_progress_marker)
  return from_progress_marker_.Get(index);
}
::sync_pb::DataTypeProgressMarker* GetUpdatesMessage::mutable_from_progress_marker(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesMessage.from_progress_marker)
  return from_progress_marker_.Mutable(index);
}
::sync_pb::DataTypeProgressMarker* GetUpdatesMessage::add_from_progress_marker() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesMessage.from_progress_marker)
  return from_progress_marker_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >*
GetUpdatesMessage::mutable_from_progress_marker() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesMessage.from_progress_marker)
  return &from_progress_marker_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >&
GetUpdatesMessage::from_progress_marker() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesMessage.from_progress_marker)
  return from_progress_marker_;
}

// optional bool streaming = 7 [default = false];
bool GetUpdatesMessage::has_streaming() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetUpdatesMessage::set_has_streaming() {
  _has_bits_[0] |= 0x00000020u;
}
void GetUpdatesMessage::clear_has_streaming() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetUpdatesMessage::clear_streaming() {
  streaming_ = false;
  clear_has_streaming();
}
bool GetUpdatesMessage::streaming() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.streaming)
  return streaming_;
}
void GetUpdatesMessage::set_streaming(bool value) {
  set_has_streaming();
  streaming_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.streaming)
}

// optional bool need_encryption_key = 8 [default = false];
bool GetUpdatesMessage::has_need_encryption_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetUpdatesMessage::set_has_need_encryption_key() {
  _has_bits_[0] |= 0x00000040u;
}
void GetUpdatesMessage::clear_has_need_encryption_key() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetUpdatesMessage::clear_need_encryption_key() {
  need_encryption_key_ = false;
  clear_has_need_encryption_key();
}
bool GetUpdatesMessage::need_encryption_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.need_encryption_key)
  return need_encryption_key_;
}
void GetUpdatesMessage::set_need_encryption_key(bool value) {
  set_has_need_encryption_key();
  need_encryption_key_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.need_encryption_key)
}

// optional bool create_mobile_bookmarks_folder = 1000 [default = false];
bool GetUpdatesMessage::has_create_mobile_bookmarks_folder() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetUpdatesMessage::set_has_create_mobile_bookmarks_folder() {
  _has_bits_[0] |= 0x00000080u;
}
void GetUpdatesMessage::clear_has_create_mobile_bookmarks_folder() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetUpdatesMessage::clear_create_mobile_bookmarks_folder() {
  create_mobile_bookmarks_folder_ = false;
  clear_has_create_mobile_bookmarks_folder();
}
bool GetUpdatesMessage::create_mobile_bookmarks_folder() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.create_mobile_bookmarks_folder)
  return create_mobile_bookmarks_folder_;
}
void GetUpdatesMessage::set_create_mobile_bookmarks_folder(bool value) {
  set_has_create_mobile_bookmarks_folder();
  create_mobile_bookmarks_folder_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.create_mobile_bookmarks_folder)
}

// optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
bool GetUpdatesMessage::has_get_updates_origin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetUpdatesMessage::set_has_get_updates_origin() {
  _has_bits_[0] |= 0x00000010u;
}
void GetUpdatesMessage::clear_has_get_updates_origin() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetUpdatesMessage::clear_get_updates_origin() {
  get_updates_origin_ = 0;
  clear_has_get_updates_origin();
}
::sync_pb::SyncEnums_GetUpdatesOrigin GetUpdatesMessage::get_updates_origin() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.get_updates_origin)
  return static_cast< ::sync_pb::SyncEnums_GetUpdatesOrigin >(get_updates_origin_);
}
void GetUpdatesMessage::set_get_updates_origin(::sync_pb::SyncEnums_GetUpdatesOrigin value) {
  assert(::sync_pb::SyncEnums_GetUpdatesOrigin_IsValid(value));
  set_has_get_updates_origin();
  get_updates_origin_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.get_updates_origin)
}

// optional bool is_retry = 10 [default = false];
bool GetUpdatesMessage::has_is_retry() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GetUpdatesMessage::set_has_is_retry() {
  _has_bits_[0] |= 0x00000100u;
}
void GetUpdatesMessage::clear_has_is_retry() {
  _has_bits_[0] &= ~0x00000100u;
}
void GetUpdatesMessage::clear_is_retry() {
  is_retry_ = false;
  clear_has_is_retry();
}
bool GetUpdatesMessage::is_retry() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.is_retry)
  return is_retry_;
}
void GetUpdatesMessage::set_is_retry(bool value) {
  set_has_is_retry();
  is_retry_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.is_retry)
}

// repeated .sync_pb.DataTypeContext client_contexts = 11;
int GetUpdatesMessage::client_contexts_size() const {
  return client_contexts_.size();
}
void GetUpdatesMessage::clear_client_contexts() {
  client_contexts_.Clear();
}
const ::sync_pb::DataTypeContext& GetUpdatesMessage::client_contexts(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.client_contexts)
  return client_contexts_.Get(index);
}
::sync_pb::DataTypeContext* GetUpdatesMessage::mutable_client_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesMessage.client_contexts)
  return client_contexts_.Mutable(index);
}
::sync_pb::DataTypeContext* GetUpdatesMessage::add_client_contexts() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesMessage.client_contexts)
  return client_contexts_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeContext >*
GetUpdatesMessage::mutable_client_contexts() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesMessage.client_contexts)
  return &client_contexts_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeContext >&
GetUpdatesMessage::client_contexts() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesMessage.client_contexts)
  return client_contexts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateMessage::kAuthTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateMessage::AuthenticateMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.AuthenticateMessage)
}
AuthenticateMessage::AuthenticateMessage(const AuthenticateMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_token()) {
    auth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.AuthenticateMessage)
}

void AuthenticateMessage::SharedCtor() {
  _cached_size_ = 0;
  auth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthenticateMessage::~AuthenticateMessage() {
  // @@protoc_insertion_point(destructor:sync_pb.AuthenticateMessage)
  SharedDtor();
}

void AuthenticateMessage::SharedDtor() {
  auth_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateMessage& AuthenticateMessage::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthenticateMessage* AuthenticateMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateMessage* n = new AuthenticateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AuthenticateMessage)
  if (has_auth_token()) {
    GOOGLE_DCHECK(!auth_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*auth_token_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthenticateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.AuthenticateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string auth_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.AuthenticateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.AuthenticateMessage)
  return false;
#undef DO_
}

void AuthenticateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.AuthenticateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string auth_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_token(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.AuthenticateMessage)
}

size_t AuthenticateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AuthenticateMessage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required string auth_token = 1;
  if (has_auth_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_token());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateMessage*>(&from));
}

void AuthenticateMessage::MergeFrom(const AuthenticateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AuthenticateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auth_token()) {
    set_has_auth_token();
    auth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
}

void AuthenticateMessage::CopyFrom(const AuthenticateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AuthenticateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AuthenticateMessage::Swap(AuthenticateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateMessage::InternalSwap(AuthenticateMessage* other) {
  auth_token_.Swap(&other->auth_token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateMessage::GetTypeName() const {
  return "sync_pb.AuthenticateMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateMessage

// required string auth_token = 1;
bool AuthenticateMessage::has_auth_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthenticateMessage::set_has_auth_token() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthenticateMessage::clear_has_auth_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthenticateMessage::clear_auth_token() {
  auth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_token();
}
const ::std::string& AuthenticateMessage::auth_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.AuthenticateMessage.auth_token)
  return auth_token_.GetNoArena();
}
void AuthenticateMessage::set_auth_token(const ::std::string& value) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AuthenticateMessage.auth_token)
}
#if LANG_CXX11
void AuthenticateMessage::set_auth_token(::std::string&& value) {
  set_has_auth_token();
  auth_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AuthenticateMessage.auth_token)
}
#endif
void AuthenticateMessage::set_auth_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AuthenticateMessage.auth_token)
}
void AuthenticateMessage::set_auth_token(const char* value, size_t size) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AuthenticateMessage.auth_token)
}
::std::string* AuthenticateMessage::mutable_auth_token() {
  set_has_auth_token();
  // @@protoc_insertion_point(field_mutable:sync_pb.AuthenticateMessage.auth_token)
  return auth_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateMessage::release_auth_token() {
  // @@protoc_insertion_point(field_release:sync_pb.AuthenticateMessage.auth_token)
  clear_has_auth_token();
  return auth_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateMessage::set_allocated_auth_token(::std::string* auth_token) {
  if (auth_token != NULL) {
    set_has_auth_token();
  } else {
    clear_has_auth_token();
  }
  auth_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_token);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AuthenticateMessage.auth_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearServerDataMessage::ClearServerDataMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClearServerDataMessage)
}
ClearServerDataMessage::ClearServerDataMessage(const ClearServerDataMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClearServerDataMessage)
}

void ClearServerDataMessage::SharedCtor() {
  _cached_size_ = 0;
}

ClearServerDataMessage::~ClearServerDataMessage() {
  // @@protoc_insertion_point(destructor:sync_pb.ClearServerDataMessage)
  SharedDtor();
}

void ClearServerDataMessage::SharedDtor() {
}

void ClearServerDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClearServerDataMessage& ClearServerDataMessage::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClearServerDataMessage* ClearServerDataMessage::New(::google::protobuf::Arena* arena) const {
  ClearServerDataMessage* n = new ClearServerDataMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearServerDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClearServerDataMessage)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClearServerDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClearServerDataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClearServerDataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClearServerDataMessage)
  return false;
#undef DO_
}

void ClearServerDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClearServerDataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClearServerDataMessage)
}

size_t ClearServerDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClearServerDataMessage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearServerDataMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClearServerDataMessage*>(&from));
}

void ClearServerDataMessage::MergeFrom(const ClearServerDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClearServerDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearServerDataMessage::CopyFrom(const ClearServerDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClearServerDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearServerDataMessage::IsInitialized() const {
  return true;
}

void ClearServerDataMessage::Swap(ClearServerDataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearServerDataMessage::InternalSwap(ClearServerDataMessage* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClearServerDataMessage::GetTypeName() const {
  return "sync_pb.ClearServerDataMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearServerDataMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearServerDataResponse::ClearServerDataResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClearServerDataResponse)
}
ClearServerDataResponse::ClearServerDataResponse(const ClearServerDataResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClearServerDataResponse)
}

void ClearServerDataResponse::SharedCtor() {
  _cached_size_ = 0;
}

ClearServerDataResponse::~ClearServerDataResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.ClearServerDataResponse)
  SharedDtor();
}

void ClearServerDataResponse::SharedDtor() {
}

void ClearServerDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClearServerDataResponse& ClearServerDataResponse::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClearServerDataResponse* ClearServerDataResponse::New(::google::protobuf::Arena* arena) const {
  ClearServerDataResponse* n = new ClearServerDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearServerDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClearServerDataResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClearServerDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClearServerDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClearServerDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClearServerDataResponse)
  return false;
#undef DO_
}

void ClearServerDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClearServerDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClearServerDataResponse)
}

size_t ClearServerDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClearServerDataResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearServerDataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClearServerDataResponse*>(&from));
}

void ClearServerDataResponse::MergeFrom(const ClearServerDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClearServerDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearServerDataResponse::CopyFrom(const ClearServerDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClearServerDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearServerDataResponse::IsInitialized() const {
  return true;
}

void ClearServerDataResponse::Swap(ClearServerDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearServerDataResponse::InternalSwap(ClearServerDataResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClearServerDataResponse::GetTypeName() const {
  return "sync_pb.ClearServerDataResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearServerDataResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChipBag::kServerChipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChipBag::ChipBag()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ChipBag)
}
ChipBag::ChipBag(const ChipBag& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_chips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_chips()) {
    server_chips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_chips_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.ChipBag)
}

void ChipBag::SharedCtor() {
  _cached_size_ = 0;
  server_chips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChipBag::~ChipBag() {
  // @@protoc_insertion_point(destructor:sync_pb.ChipBag)
  SharedDtor();
}

void ChipBag::SharedDtor() {
  server_chips_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChipBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChipBag& ChipBag::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChipBag* ChipBag::New(::google::protobuf::Arena* arena) const {
  ChipBag* n = new ChipBag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChipBag::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ChipBag)
  if (has_server_chips()) {
    GOOGLE_DCHECK(!server_chips_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*server_chips_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChipBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ChipBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes server_chips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_chips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ChipBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ChipBag)
  return false;
#undef DO_
}

void ChipBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ChipBag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes server_chips = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->server_chips(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ChipBag)
}

size_t ChipBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ChipBag)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional bytes server_chips = 1;
  if (has_server_chips()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->server_chips());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChipBag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChipBag*>(&from));
}

void ChipBag::MergeFrom(const ChipBag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ChipBag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_chips()) {
    set_has_server_chips();
    server_chips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_chips_);
  }
}

void ChipBag::CopyFrom(const ChipBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ChipBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChipBag::IsInitialized() const {
  return true;
}

void ChipBag::Swap(ChipBag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChipBag::InternalSwap(ChipBag* other) {
  server_chips_.Swap(&other->server_chips_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChipBag::GetTypeName() const {
  return "sync_pb.ChipBag";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChipBag

// optional bytes server_chips = 1;
bool ChipBag::has_server_chips() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChipBag::set_has_server_chips() {
  _has_bits_[0] |= 0x00000001u;
}
void ChipBag::clear_has_server_chips() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChipBag::clear_server_chips() {
  server_chips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_chips();
}
const ::std::string& ChipBag::server_chips() const {
  // @@protoc_insertion_point(field_get:sync_pb.ChipBag.server_chips)
  return server_chips_.GetNoArena();
}
void ChipBag::set_server_chips(const ::std::string& value) {
  set_has_server_chips();
  server_chips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ChipBag.server_chips)
}
#if LANG_CXX11
void ChipBag::set_server_chips(::std::string&& value) {
  set_has_server_chips();
  server_chips_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ChipBag.server_chips)
}
#endif
void ChipBag::set_server_chips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_chips();
  server_chips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ChipBag.server_chips)
}
void ChipBag::set_server_chips(const void* value, size_t size) {
  set_has_server_chips();
  server_chips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ChipBag.server_chips)
}
::std::string* ChipBag::mutable_server_chips() {
  set_has_server_chips();
  // @@protoc_insertion_point(field_mutable:sync_pb.ChipBag.server_chips)
  return server_chips_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChipBag::release_server_chips() {
  // @@protoc_insertion_point(field_release:sync_pb.ChipBag.server_chips)
  clear_has_server_chips();
  return server_chips_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChipBag::set_allocated_server_chips(::std::string* server_chips) {
  if (server_chips != NULL) {
    set_has_server_chips();
  } else {
    clear_has_server_chips();
  }
  server_chips_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_chips);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ChipBag.server_chips)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientStatus::kHierarchyConflictDetectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientStatus::ClientStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientStatus)
}
ClientStatus::ClientStatus(const ClientStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hierarchy_conflict_detected_ = from.hierarchy_conflict_detected_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientStatus)
}

void ClientStatus::SharedCtor() {
  _cached_size_ = 0;
  hierarchy_conflict_detected_ = false;
}

ClientStatus::~ClientStatus() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientStatus)
  SharedDtor();
}

void ClientStatus::SharedDtor() {
}

void ClientStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientStatus& ClientStatus::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientStatus* ClientStatus::New(::google::protobuf::Arena* arena) const {
  ClientStatus* n = new ClientStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientStatus)
  hierarchy_conflict_detected_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hierarchy_conflict_detected = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hierarchy_conflict_detected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hierarchy_conflict_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientStatus)
  return false;
#undef DO_
}

void ClientStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hierarchy_conflict_detected = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hierarchy_conflict_detected(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientStatus)
}

size_t ClientStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientStatus)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional bool hierarchy_conflict_detected = 1;
  if (has_hierarchy_conflict_detected()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientStatus*>(&from));
}

void ClientStatus::MergeFrom(const ClientStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hierarchy_conflict_detected()) {
    set_hierarchy_conflict_detected(from.hierarchy_conflict_detected());
  }
}

void ClientStatus::CopyFrom(const ClientStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStatus::IsInitialized() const {
  return true;
}

void ClientStatus::Swap(ClientStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientStatus::InternalSwap(ClientStatus* other) {
  std::swap(hierarchy_conflict_detected_, other->hierarchy_conflict_detected_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientStatus::GetTypeName() const {
  return "sync_pb.ClientStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientStatus

// optional bool hierarchy_conflict_detected = 1;
bool ClientStatus::has_hierarchy_conflict_detected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientStatus::set_has_hierarchy_conflict_detected() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientStatus::clear_has_hierarchy_conflict_detected() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientStatus::clear_hierarchy_conflict_detected() {
  hierarchy_conflict_detected_ = false;
  clear_has_hierarchy_conflict_detected();
}
bool ClientStatus::hierarchy_conflict_detected() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientStatus.hierarchy_conflict_detected)
  return hierarchy_conflict_detected_;
}
void ClientStatus::set_hierarchy_conflict_detected(bool value) {
  set_has_hierarchy_conflict_detected();
  hierarchy_conflict_detected_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientStatus.hierarchy_conflict_detected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataTypeContext::kDataTypeIdFieldNumber;
const int DataTypeContext::kContextFieldNumber;
const int DataTypeContext::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataTypeContext::DataTypeContext()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.DataTypeContext)
}
DataTypeContext::DataTypeContext(const DataTypeContext& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_context()) {
    context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(data_type_id_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.DataTypeContext)
}

void DataTypeContext::SharedCtor() {
  _cached_size_ = 0;
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(data_type_id_));
}

DataTypeContext::~DataTypeContext() {
  // @@protoc_insertion_point(destructor:sync_pb.DataTypeContext)
  SharedDtor();
}

void DataTypeContext::SharedDtor() {
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataTypeContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataTypeContext& DataTypeContext::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataTypeContext* DataTypeContext::New(::google::protobuf::Arena* arena) const {
  DataTypeContext* n = new DataTypeContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataTypeContext::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DataTypeContext)
  if (has_context()) {
    GOOGLE_DCHECK(!context_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*context_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_type_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(data_type_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataTypeContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.DataTypeContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_data_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes context = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.DataTypeContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.DataTypeContext)
  return false;
#undef DO_
}

void DataTypeContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.DataTypeContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_type_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_type_id(), output);
  }

  // optional bytes context = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->context(), output);
  }

  // optional int64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.DataTypeContext)
}

size_t DataTypeContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DataTypeContext)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->context());
    }

    // optional int64 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int32 data_type_id = 1;
    if (has_data_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTypeContext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataTypeContext*>(&from));
}

void DataTypeContext::MergeFrom(const DataTypeContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DataTypeContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_type_id_ = from.data_type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataTypeContext::CopyFrom(const DataTypeContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DataTypeContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTypeContext::IsInitialized() const {
  return true;
}

void DataTypeContext::Swap(DataTypeContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataTypeContext::InternalSwap(DataTypeContext* other) {
  context_.Swap(&other->context_);
  std::swap(version_, other->version_);
  std::swap(data_type_id_, other->data_type_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DataTypeContext::GetTypeName() const {
  return "sync_pb.DataTypeContext";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataTypeContext

// optional int32 data_type_id = 1;
bool DataTypeContext::has_data_type_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataTypeContext::set_has_data_type_id() {
  _has_bits_[0] |= 0x00000004u;
}
void DataTypeContext::clear_has_data_type_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataTypeContext::clear_data_type_id() {
  data_type_id_ = 0;
  clear_has_data_type_id();
}
::google::protobuf::int32 DataTypeContext::data_type_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeContext.data_type_id)
  return data_type_id_;
}
void DataTypeContext::set_data_type_id(::google::protobuf::int32 value) {
  set_has_data_type_id();
  data_type_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeContext.data_type_id)
}

// optional bytes context = 2;
bool DataTypeContext::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataTypeContext::set_has_context() {
  _has_bits_[0] |= 0x00000001u;
}
void DataTypeContext::clear_has_context() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataTypeContext::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
const ::std::string& DataTypeContext::context() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeContext.context)
  return context_.GetNoArena();
}
void DataTypeContext::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeContext.context)
}
#if LANG_CXX11
void DataTypeContext::set_context(::std::string&& value) {
  set_has_context();
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DataTypeContext.context)
}
#endif
void DataTypeContext::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DataTypeContext.context)
}
void DataTypeContext::set_context(const void* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DataTypeContext.context)
}
::std::string* DataTypeContext::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeContext.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataTypeContext::release_context() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeContext.context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataTypeContext::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeContext.context)
}

// optional int64 version = 3;
bool DataTypeContext::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataTypeContext::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void DataTypeContext::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataTypeContext::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
::google::protobuf::int64 DataTypeContext::version() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeContext.version)
  return version_;
}
void DataTypeContext::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeContext.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServerMessage::kShareFieldNumber;
const int ClientToServerMessage::kProtocolVersionFieldNumber;
const int ClientToServerMessage::kMessageContentsFieldNumber;
const int ClientToServerMessage::kCommitFieldNumber;
const int ClientToServerMessage::kGetUpdatesFieldNumber;
const int ClientToServerMessage::kAuthenticateFieldNumber;
const int ClientToServerMessage::kDeprecatedField9FieldNumber;
const int ClientToServerMessage::kStoreBirthdayFieldNumber;
const int ClientToServerMessage::kSyncProblemDetectedFieldNumber;
const int ClientToServerMessage::kDebugInfoFieldNumber;
const int ClientToServerMessage::kBagOfChipsFieldNumber;
const int ClientToServerMessage::kApiKeyFieldNumber;
const int ClientToServerMessage::kClientStatusFieldNumber;
const int ClientToServerMessage::kInvalidatorClientIdFieldNumber;
const int ClientToServerMessage::kClearServerDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServerMessage::ClientToServerMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientToServerMessage)
}
ClientToServerMessage::ClientToServerMessage(const ClientToServerMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  share_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_share()) {
    share_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_);
  }
  store_birthday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_birthday()) {
    store_birthday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
  }
  api_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_api_key()) {
    api_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_key_);
  }
  invalidator_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invalidator_client_id()) {
    invalidator_client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invalidator_client_id_);
  }
  if (from.has_commit()) {
    commit_ = new ::sync_pb::CommitMessage(*from.commit_);
  } else {
    commit_ = NULL;
  }
  if (from.has_get_updates()) {
    get_updates_ = new ::sync_pb::GetUpdatesMessage(*from.get_updates_);
  } else {
    get_updates_ = NULL;
  }
  if (from.has_authenticate()) {
    authenticate_ = new ::sync_pb::AuthenticateMessage(*from.authenticate_);
  } else {
    authenticate_ = NULL;
  }
  if (from.has_deprecated_field_9()) {
    deprecated_field_9_ = new ::sync_pb::DeprecatedMessage(*from.deprecated_field_9_);
  } else {
    deprecated_field_9_ = NULL;
  }
  if (from.has_debug_info()) {
    debug_info_ = new ::sync_pb::DebugInfo(*from.debug_info_);
  } else {
    debug_info_ = NULL;
  }
  if (from.has_bag_of_chips()) {
    bag_of_chips_ = new ::sync_pb::ChipBag(*from.bag_of_chips_);
  } else {
    bag_of_chips_ = NULL;
  }
  if (from.has_client_status()) {
    client_status_ = new ::sync_pb::ClientStatus(*from.client_status_);
  } else {
    client_status_ = NULL;
  }
  if (from.has_clear_server_data()) {
    clear_server_data_ = new ::sync_pb::ClearServerDataMessage(*from.clear_server_data_);
  } else {
    clear_server_data_ = NULL;
  }
  ::memcpy(&sync_problem_detected_, &from.sync_problem_detected_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_contents_) -
    reinterpret_cast<char*>(&sync_problem_detected_)) + sizeof(message_contents_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientToServerMessage)
}

void ClientToServerMessage::SharedCtor() {
  _cached_size_ = 0;
  share_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_birthday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invalidator_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&commit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_problem_detected_) -
      reinterpret_cast<char*>(&commit_)) + sizeof(sync_problem_detected_));
  protocol_version_ = 52;
  message_contents_ = 1;
}

ClientToServerMessage::~ClientToServerMessage() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientToServerMessage)
  SharedDtor();
}

void ClientToServerMessage::SharedDtor() {
  share_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_birthday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invalidator_client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete commit_;
  }
  if (this != internal_default_instance()) {
    delete get_updates_;
  }
  if (this != internal_default_instance()) {
    delete authenticate_;
  }
  if (this != internal_default_instance()) {
    delete deprecated_field_9_;
  }
  if (this != internal_default_instance()) {
    delete debug_info_;
  }
  if (this != internal_default_instance()) {
    delete bag_of_chips_;
  }
  if (this != internal_default_instance()) {
    delete client_status_;
  }
  if (this != internal_default_instance()) {
    delete clear_server_data_;
  }
}

void ClientToServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToServerMessage& ClientToServerMessage::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientToServerMessage* ClientToServerMessage::New(::google::protobuf::Arena* arena) const {
  ClientToServerMessage* n = new ClientToServerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientToServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientToServerMessage)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_share()) {
      GOOGLE_DCHECK(!share_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*share_.UnsafeRawStringPointer())->clear();
    }
    if (has_store_birthday()) {
      GOOGLE_DCHECK(!store_birthday_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*store_birthday_.UnsafeRawStringPointer())->clear();
    }
    if (has_api_key()) {
      GOOGLE_DCHECK(!api_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*api_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_invalidator_client_id()) {
      GOOGLE_DCHECK(!invalidator_client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*invalidator_client_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_commit()) {
      GOOGLE_DCHECK(commit_ != NULL);
      commit_->::sync_pb::CommitMessage::Clear();
    }
    if (has_get_updates()) {
      GOOGLE_DCHECK(get_updates_ != NULL);
      get_updates_->::sync_pb::GetUpdatesMessage::Clear();
    }
    if (has_authenticate()) {
      GOOGLE_DCHECK(authenticate_ != NULL);
      authenticate_->::sync_pb::AuthenticateMessage::Clear();
    }
    if (has_deprecated_field_9()) {
      GOOGLE_DCHECK(deprecated_field_9_ != NULL);
      deprecated_field_9_->::sync_pb::DeprecatedMessage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    if (has_debug_info()) {
      GOOGLE_DCHECK(debug_info_ != NULL);
      debug_info_->::sync_pb::DebugInfo::Clear();
    }
    if (has_bag_of_chips()) {
      GOOGLE_DCHECK(bag_of_chips_ != NULL);
      bag_of_chips_->::sync_pb::ChipBag::Clear();
    }
    if (has_client_status()) {
      GOOGLE_DCHECK(client_status_ != NULL);
      client_status_->::sync_pb::ClientStatus::Clear();
    }
    if (has_clear_server_data()) {
      GOOGLE_DCHECK(clear_server_data_ != NULL);
      clear_server_data_->::sync_pb::ClearServerDataMessage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 28672u) {
    sync_problem_detected_ = false;
    protocol_version_ = 52;
    message_contents_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientToServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientToServerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string share = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 protocol_version = 2 [default = 52];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::ClientToServerMessage_Contents_IsValid(value)) {
            set_message_contents(static_cast< ::sync_pb::ClientToServerMessage_Contents >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.CommitMessage commit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GetUpdatesMessage get_updates = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AuthenticateMessage authenticate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authenticate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string store_birthday = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_birthday()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sync_problem_detected = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_sync_problem_detected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_problem_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DeprecatedMessage deprecated_field_9 = 9 [deprecated = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_field_9()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DebugInfo debug_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ChipBag bag_of_chips = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag_of_chips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string api_key = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClientStatus client_status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invalidator_client_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invalidator_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClearServerDataMessage clear_server_data = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_server_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientToServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientToServerMessage)
  return false;
#undef DO_
}

void ClientToServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientToServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string share = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->share(), output);
  }

  // optional int32 protocol_version = 2 [default = 52];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->protocol_version(), output);
  }

  // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->message_contents(), output);
  }

  // optional .sync_pb.CommitMessage commit = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->commit_, output);
  }

  // optional .sync_pb.GetUpdatesMessage get_updates = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->get_updates_, output);
  }

  // optional .sync_pb.AuthenticateMessage authenticate = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->authenticate_, output);
  }

  // optional string store_birthday = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->store_birthday(), output);
  }

  // optional bool sync_problem_detected = 8 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->sync_problem_detected(), output);
  }

  // optional .sync_pb.DeprecatedMessage deprecated_field_9 = 9 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->deprecated_field_9_, output);
  }

  // optional .sync_pb.DebugInfo debug_info = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->debug_info_, output);
  }

  // optional .sync_pb.ChipBag bag_of_chips = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->bag_of_chips_, output);
  }

  // optional string api_key = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->api_key(), output);
  }

  // optional .sync_pb.ClientStatus client_status = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->client_status_, output);
  }

  // optional string invalidator_client_id = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->invalidator_client_id(), output);
  }

  // optional .sync_pb.ClearServerDataMessage clear_server_data = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->clear_server_data_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientToServerMessage)
}

size_t ClientToServerMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sync_pb.ClientToServerMessage)
  size_t total_size = 0;

  if (has_share()) {
    // required string share = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->share());
  }

  if (has_message_contents()) {
    // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_contents());
  }

  return total_size;
}
size_t ClientToServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientToServerMessage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00004001) ^ 0x00004001) == 0) {  // All required fields are present.
    // required string share = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->share());

    // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_contents());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional string store_birthday = 7;
    if (has_store_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_birthday());
    }

    // optional string api_key = 12;
    if (has_api_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->api_key());
    }

    // optional string invalidator_client_id = 14;
    if (has_invalidator_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invalidator_client_id());
    }

    // optional .sync_pb.CommitMessage commit = 4;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->commit_);
    }

    // optional .sync_pb.GetUpdatesMessage get_updates = 5;
    if (has_get_updates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->get_updates_);
    }

    // optional .sync_pb.AuthenticateMessage authenticate = 6;
    if (has_authenticate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->authenticate_);
    }

    // optional .sync_pb.DeprecatedMessage deprecated_field_9 = 9 [deprecated = true];
    if (has_deprecated_field_9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deprecated_field_9_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .sync_pb.DebugInfo debug_info = 10;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_info_);
    }

    // optional .sync_pb.ChipBag bag_of_chips = 11;
    if (has_bag_of_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bag_of_chips_);
    }

    // optional .sync_pb.ClientStatus client_status = 13;
    if (has_client_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->client_status_);
    }

    // optional .sync_pb.ClearServerDataMessage clear_server_data = 15;
    if (has_clear_server_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clear_server_data_);
    }

    // optional bool sync_problem_detected = 8 [default = false];
    if (has_sync_problem_detected()) {
      total_size += 1 + 1;
    }

    // optional int32 protocol_version = 2 [default = 52];
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocol_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToServerMessage*>(&from));
}

void ClientToServerMessage::MergeFrom(const ClientToServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientToServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_share();
      share_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_store_birthday();
      store_birthday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_api_key();
      api_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_invalidator_client_id();
      invalidator_client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invalidator_client_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_commit()->::sync_pb::CommitMessage::MergeFrom(from.commit());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_get_updates()->::sync_pb::GetUpdatesMessage::MergeFrom(from.get_updates());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_authenticate()->::sync_pb::AuthenticateMessage::MergeFrom(from.authenticate());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_deprecated_field_9()->::sync_pb::DeprecatedMessage::MergeFrom(from.deprecated_field_9());
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_debug_info()->::sync_pb::DebugInfo::MergeFrom(from.debug_info());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_bag_of_chips()->::sync_pb::ChipBag::MergeFrom(from.bag_of_chips());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_client_status()->::sync_pb::ClientStatus::MergeFrom(from.client_status());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_clear_server_data()->::sync_pb::ClearServerDataMessage::MergeFrom(from.clear_server_data());
    }
    if (cached_has_bits & 0x00001000u) {
      sync_problem_detected_ = from.sync_problem_detected_;
    }
    if (cached_has_bits & 0x00002000u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00004000u) {
      message_contents_ = from.message_contents_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientToServerMessage::CopyFrom(const ClientToServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientToServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00004001) != 0x00004001) return false;
  if (has_commit()) {
    if (!this->commit_->IsInitialized()) return false;
  }
  if (has_get_updates()) {
    if (!this->get_updates_->IsInitialized()) return false;
  }
  if (has_authenticate()) {
    if (!this->authenticate_->IsInitialized()) return false;
  }
  if (has_debug_info()) {
    if (!this->debug_info_->IsInitialized()) return false;
  }
  return true;
}

void ClientToServerMessage::Swap(ClientToServerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServerMessage::InternalSwap(ClientToServerMessage* other) {
  share_.Swap(&other->share_);
  store_birthday_.Swap(&other->store_birthday_);
  api_key_.Swap(&other->api_key_);
  invalidator_client_id_.Swap(&other->invalidator_client_id_);
  std::swap(commit_, other->commit_);
  std::swap(get_updates_, other->get_updates_);
  std::swap(authenticate_, other->authenticate_);
  std::swap(deprecated_field_9_, other->deprecated_field_9_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(bag_of_chips_, other->bag_of_chips_);
  std::swap(client_status_, other->client_status_);
  std::swap(clear_server_data_, other->clear_server_data_);
  std::swap(sync_problem_detected_, other->sync_problem_detected_);
  std::swap(protocol_version_, other->protocol_version_);
  std::swap(message_contents_, other->message_contents_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientToServerMessage::GetTypeName() const {
  return "sync_pb.ClientToServerMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientToServerMessage

// required string share = 1;
bool ClientToServerMessage::has_share() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientToServerMessage::set_has_share() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientToServerMessage::clear_has_share() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientToServerMessage::clear_share() {
  share_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_share();
}
const ::std::string& ClientToServerMessage::share() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.share)
  return share_.GetNoArena();
}
void ClientToServerMessage::set_share(const ::std::string& value) {
  set_has_share();
  share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.share)
}
#if LANG_CXX11
void ClientToServerMessage::set_share(::std::string&& value) {
  set_has_share();
  share_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerMessage.share)
}
#endif
void ClientToServerMessage::set_share(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_share();
  share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerMessage.share)
}
void ClientToServerMessage::set_share(const char* value, size_t size) {
  set_has_share();
  share_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerMessage.share)
}
::std::string* ClientToServerMessage::mutable_share() {
  set_has_share();
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.share)
  return share_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientToServerMessage::release_share() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.share)
  clear_has_share();
  return share_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientToServerMessage::set_allocated_share(::std::string* share) {
  if (share != NULL) {
    set_has_share();
  } else {
    clear_has_share();
  }
  share_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.share)
}

// optional int32 protocol_version = 2 [default = 52];
bool ClientToServerMessage::has_protocol_version() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ClientToServerMessage::set_has_protocol_version() {
  _has_bits_[0] |= 0x00002000u;
}
void ClientToServerMessage::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00002000u;
}
void ClientToServerMessage::clear_protocol_version() {
  protocol_version_ = 52;
  clear_has_protocol_version();
}
::google::protobuf::int32 ClientToServerMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.protocol_version)
  return protocol_version_;
}
void ClientToServerMessage::set_protocol_version(::google::protobuf::int32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.protocol_version)
}

// required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
bool ClientToServerMessage::has_message_contents() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ClientToServerMessage::set_has_message_contents() {
  _has_bits_[0] |= 0x00004000u;
}
void ClientToServerMessage::clear_has_message_contents() {
  _has_bits_[0] &= ~0x00004000u;
}
void ClientToServerMessage::clear_message_contents() {
  message_contents_ = 1;
  clear_has_message_contents();
}
::sync_pb::ClientToServerMessage_Contents ClientToServerMessage::message_contents() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.message_contents)
  return static_cast< ::sync_pb::ClientToServerMessage_Contents >(message_contents_);
}
void ClientToServerMessage::set_message_contents(::sync_pb::ClientToServerMessage_Contents value) {
  assert(::sync_pb::ClientToServerMessage_Contents_IsValid(value));
  set_has_message_contents();
  message_contents_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.message_contents)
}

// optional .sync_pb.CommitMessage commit = 4;
bool ClientToServerMessage::has_commit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientToServerMessage::set_has_commit() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientToServerMessage::clear_has_commit() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientToServerMessage::clear_commit() {
  if (commit_ != NULL) commit_->::sync_pb::CommitMessage::Clear();
  clear_has_commit();
}
const ::sync_pb::CommitMessage& ClientToServerMessage::commit() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.commit)
  return commit_ != NULL ? *commit_
                         : *::sync_pb::CommitMessage::internal_default_instance();
}
::sync_pb::CommitMessage* ClientToServerMessage::mutable_commit() {
  set_has_commit();
  if (commit_ == NULL) {
    commit_ = new ::sync_pb::CommitMessage;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.commit)
  return commit_;
}
::sync_pb::CommitMessage* ClientToServerMessage::release_commit() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.commit)
  clear_has_commit();
  ::sync_pb::CommitMessage* temp = commit_;
  commit_ = NULL;
  return temp;
}
void ClientToServerMessage::set_allocated_commit(::sync_pb::CommitMessage* commit) {
  delete commit_;
  commit_ = commit;
  if (commit) {
    set_has_commit();
  } else {
    clear_has_commit();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.commit)
}

// optional .sync_pb.GetUpdatesMessage get_updates = 5;
bool ClientToServerMessage::has_get_updates() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientToServerMessage::set_has_get_updates() {
  _has_bits_[0] |= 0x00000020u;
}
void ClientToServerMessage::clear_has_get_updates() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClientToServerMessage::clear_get_updates() {
  if (get_updates_ != NULL) get_updates_->::sync_pb::GetUpdatesMessage::Clear();
  clear_has_get_updates();
}
const ::sync_pb::GetUpdatesMessage& ClientToServerMessage::get_updates() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.get_updates)
  return get_updates_ != NULL ? *get_updates_
                         : *::sync_pb::GetUpdatesMessage::internal_default_instance();
}
::sync_pb::GetUpdatesMessage* ClientToServerMessage::mutable_get_updates() {
  set_has_get_updates();
  if (get_updates_ == NULL) {
    get_updates_ = new ::sync_pb::GetUpdatesMessage;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.get_updates)
  return get_updates_;
}
::sync_pb::GetUpdatesMessage* ClientToServerMessage::release_get_updates() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.get_updates)
  clear_has_get_updates();
  ::sync_pb::GetUpdatesMessage* temp = get_updates_;
  get_updates_ = NULL;
  return temp;
}
void ClientToServerMessage::set_allocated_get_updates(::sync_pb::GetUpdatesMessage* get_updates) {
  delete get_updates_;
  get_updates_ = get_updates;
  if (get_updates) {
    set_has_get_updates();
  } else {
    clear_has_get_updates();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.get_updates)
}

// optional .sync_pb.AuthenticateMessage authenticate = 6;
bool ClientToServerMessage::has_authenticate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClientToServerMessage::set_has_authenticate() {
  _has_bits_[0] |= 0x00000040u;
}
void ClientToServerMessage::clear_has_authenticate() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClientToServerMessage::clear_authenticate() {
  if (authenticate_ != NULL) authenticate_->::sync_pb::AuthenticateMessage::Clear();
  clear_has_authenticate();
}
const ::sync_pb::AuthenticateMessage& ClientToServerMessage::authenticate() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.authenticate)
  return authenticate_ != NULL ? *authenticate_
                         : *::sync_pb::AuthenticateMessage::internal_default_instance();
}
::sync_pb::AuthenticateMessage* ClientToServerMessage::mutable_authenticate() {
  set_has_authenticate();
  if (authenticate_ == NULL) {
    authenticate_ = new ::sync_pb::AuthenticateMessage;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.authenticate)
  return authenticate_;
}
::sync_pb::AuthenticateMessage* ClientToServerMessage::release_authenticate() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.authenticate)
  clear_has_authenticate();
  ::sync_pb::AuthenticateMessage* temp = authenticate_;
  authenticate_ = NULL;
  return temp;
}
void ClientToServerMessage::set_allocated_authenticate(::sync_pb::AuthenticateMessage* authenticate) {
  delete authenticate_;
  authenticate_ = authenticate;
  if (authenticate) {
    set_has_authenticate();
  } else {
    clear_has_authenticate();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.authenticate)
}

// optional .sync_pb.DeprecatedMessage deprecated_field_9 = 9 [deprecated = true];
bool ClientToServerMessage::has_deprecated_field_9() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ClientToServerMessage::set_has_deprecated_field_9() {
  _has_bits_[0] |= 0x00000080u;
}
void ClientToServerMessage::clear_has_deprecated_field_9() {
  _has_bits_[0] &= ~0x00000080u;
}
void ClientToServerMessage::clear_deprecated_field_9() {
  if (deprecated_field_9_ != NULL) deprecated_field_9_->::sync_pb::DeprecatedMessage::Clear();
  clear_has_deprecated_field_9();
}
const ::sync_pb::DeprecatedMessage& ClientToServerMessage::deprecated_field_9() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.deprecated_field_9)
  return deprecated_field_9_ != NULL ? *deprecated_field_9_
                         : *::sync_pb::DeprecatedMessage::internal_default_instance();
}
::sync_pb::DeprecatedMessage* ClientToServerMessage::mutable_deprecated_field_9() {
  set_has_deprecated_field_9();
  if (deprecated_field_9_ == NULL) {
    deprecated_field_9_ = new ::sync_pb::DeprecatedMessage;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.deprecated_field_9)
  return deprecated_field_9_;
}
::sync_pb::DeprecatedMessage* ClientToServerMessage::release_deprecated_field_9() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.deprecated_field_9)
  clear_has_deprecated_field_9();
  ::sync_pb::DeprecatedMessage* temp = deprecated_field_9_;
  deprecated_field_9_ = NULL;
  return temp;
}
void ClientToServerMessage::set_allocated_deprecated_field_9(::sync_pb::DeprecatedMessage* deprecated_field_9) {
  delete deprecated_field_9_;
  deprecated_field_9_ = deprecated_field_9;
  if (deprecated_field_9) {
    set_has_deprecated_field_9();
  } else {
    clear_has_deprecated_field_9();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.deprecated_field_9)
}

// optional string store_birthday = 7;
bool ClientToServerMessage::has_store_birthday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientToServerMessage::set_has_store_birthday() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientToServerMessage::clear_has_store_birthday() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientToServerMessage::clear_store_birthday() {
  store_birthday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_store_birthday();
}
const ::std::string& ClientToServerMessage::store_birthday() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.store_birthday)
  return store_birthday_.GetNoArena();
}
void ClientToServerMessage::set_store_birthday(const ::std::string& value) {
  set_has_store_birthday();
  store_birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.store_birthday)
}
#if LANG_CXX11
void ClientToServerMessage::set_store_birthday(::std::string&& value) {
  set_has_store_birthday();
  store_birthday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerMessage.store_birthday)
}
#endif
void ClientToServerMessage::set_store_birthday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_store_birthday();
  store_birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerMessage.store_birthday)
}
void ClientToServerMessage::set_store_birthday(const char* value, size_t size) {
  set_has_store_birthday();
  store_birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerMessage.store_birthday)
}
::std::string* ClientToServerMessage::mutable_store_birthday() {
  set_has_store_birthday();
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.store_birthday)
  return store_birthday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientToServerMessage::release_store_birthday() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.store_birthday)
  clear_has_store_birthday();
  return store_birthday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientToServerMessage::set_allocated_store_birthday(::std::string* store_birthday) {
  if (store_birthday != NULL) {
    set_has_store_birthday();
  } else {
    clear_has_store_birthday();
  }
  store_birthday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store_birthday);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.store_birthday)
}

// optional bool sync_problem_detected = 8 [default = false];
bool ClientToServerMessage::has_sync_problem_detected() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ClientToServerMessage::set_has_sync_problem_detected() {
  _has_bits_[0] |= 0x00001000u;
}
void ClientToServerMessage::clear_has_sync_problem_detected() {
  _has_bits_[0] &= ~0x00001000u;
}
void ClientToServerMessage::clear_sync_problem_detected() {
  sync_problem_detected_ = false;
  clear_has_sync_problem_detected();
}
bool ClientToServerMessage::sync_problem_detected() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.sync_problem_detected)
  return sync_problem_detected_;
}
void ClientToServerMessage::set_sync_problem_detected(bool value) {
  set_has_sync_problem_detected();
  sync_problem_detected_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.sync_problem_detected)
}

// optional .sync_pb.DebugInfo debug_info = 10;
bool ClientToServerMessage::has_debug_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ClientToServerMessage::set_has_debug_info() {
  _has_bits_[0] |= 0x00000100u;
}
void ClientToServerMessage::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000100u;
}
void ClientToServerMessage::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::sync_pb::DebugInfo::Clear();
  clear_has_debug_info();
}
const ::sync_pb::DebugInfo& ClientToServerMessage::debug_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.debug_info)
  return debug_info_ != NULL ? *debug_info_
                         : *::sync_pb::DebugInfo::internal_default_instance();
}
::sync_pb::DebugInfo* ClientToServerMessage::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) {
    debug_info_ = new ::sync_pb::DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.debug_info)
  return debug_info_;
}
::sync_pb::DebugInfo* ClientToServerMessage::release_debug_info() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.debug_info)
  clear_has_debug_info();
  ::sync_pb::DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
void ClientToServerMessage::set_allocated_debug_info(::sync_pb::DebugInfo* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.debug_info)
}

// optional .sync_pb.ChipBag bag_of_chips = 11;
bool ClientToServerMessage::has_bag_of_chips() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ClientToServerMessage::set_has_bag_of_chips() {
  _has_bits_[0] |= 0x00000200u;
}
void ClientToServerMessage::clear_has_bag_of_chips() {
  _has_bits_[0] &= ~0x00000200u;
}
void ClientToServerMessage::clear_bag_of_chips() {
  if (bag_of_chips_ != NULL) bag_of_chips_->::sync_pb::ChipBag::Clear();
  clear_has_bag_of_chips();
}
const ::sync_pb::ChipBag& ClientToServerMessage::bag_of_chips() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.bag_of_chips)
  return bag_of_chips_ != NULL ? *bag_of_chips_
                         : *::sync_pb::ChipBag::internal_default_instance();
}
::sync_pb::ChipBag* ClientToServerMessage::mutable_bag_of_chips() {
  set_has_bag_of_chips();
  if (bag_of_chips_ == NULL) {
    bag_of_chips_ = new ::sync_pb::ChipBag;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.bag_of_chips)
  return bag_of_chips_;
}
::sync_pb::ChipBag* ClientToServerMessage::release_bag_of_chips() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.bag_of_chips)
  clear_has_bag_of_chips();
  ::sync_pb::ChipBag* temp = bag_of_chips_;
  bag_of_chips_ = NULL;
  return temp;
}
void ClientToServerMessage::set_allocated_bag_of_chips(::sync_pb::ChipBag* bag_of_chips) {
  delete bag_of_chips_;
  bag_of_chips_ = bag_of_chips;
  if (bag_of_chips) {
    set_has_bag_of_chips();
  } else {
    clear_has_bag_of_chips();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.bag_of_chips)
}

// optional string api_key = 12;
bool ClientToServerMessage::has_api_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientToServerMessage::set_has_api_key() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientToServerMessage::clear_has_api_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientToServerMessage::clear_api_key() {
  api_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_api_key();
}
const ::std::string& ClientToServerMessage::api_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.api_key)
  return api_key_.GetNoArena();
}
void ClientToServerMessage::set_api_key(const ::std::string& value) {
  set_has_api_key();
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.api_key)
}
#if LANG_CXX11
void ClientToServerMessage::set_api_key(::std::string&& value) {
  set_has_api_key();
  api_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerMessage.api_key)
}
#endif
void ClientToServerMessage::set_api_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_api_key();
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerMessage.api_key)
}
void ClientToServerMessage::set_api_key(const char* value, size_t size) {
  set_has_api_key();
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerMessage.api_key)
}
::std::string* ClientToServerMessage::mutable_api_key() {
  set_has_api_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.api_key)
  return api_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientToServerMessage::release_api_key() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.api_key)
  clear_has_api_key();
  return api_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientToServerMessage::set_allocated_api_key(::std::string* api_key) {
  if (api_key != NULL) {
    set_has_api_key();
  } else {
    clear_has_api_key();
  }
  api_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), api_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.api_key)
}

// optional .sync_pb.ClientStatus client_status = 13;
bool ClientToServerMessage::has_client_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ClientToServerMessage::set_has_client_status() {
  _has_bits_[0] |= 0x00000400u;
}
void ClientToServerMessage::clear_has_client_status() {
  _has_bits_[0] &= ~0x00000400u;
}
void ClientToServerMessage::clear_client_status() {
  if (client_status_ != NULL) client_status_->::sync_pb::ClientStatus::Clear();
  clear_has_client_status();
}
const ::sync_pb::ClientStatus& ClientToServerMessage::client_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.client_status)
  return client_status_ != NULL ? *client_status_
                         : *::sync_pb::ClientStatus::internal_default_instance();
}
::sync_pb::ClientStatus* ClientToServerMessage::mutable_client_status() {
  set_has_client_status();
  if (client_status_ == NULL) {
    client_status_ = new ::sync_pb::ClientStatus;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.client_status)
  return client_status_;
}
::sync_pb::ClientStatus* ClientToServerMessage::release_client_status() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.client_status)
  clear_has_client_status();
  ::sync_pb::ClientStatus* temp = client_status_;
  client_status_ = NULL;
  return temp;
}
void ClientToServerMessage::set_allocated_client_status(::sync_pb::ClientStatus* client_status) {
  delete client_status_;
  client_status_ = client_status;
  if (client_status) {
    set_has_client_status();
  } else {
    clear_has_client_status();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.client_status)
}

// optional string invalidator_client_id = 14;
bool ClientToServerMessage::has_invalidator_client_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientToServerMessage::set_has_invalidator_client_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientToServerMessage::clear_has_invalidator_client_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientToServerMessage::clear_invalidator_client_id() {
  invalidator_client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invalidator_client_id();
}
const ::std::string& ClientToServerMessage::invalidator_client_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.invalidator_client_id)
  return invalidator_client_id_.GetNoArena();
}
void ClientToServerMessage::set_invalidator_client_id(const ::std::string& value) {
  set_has_invalidator_client_id();
  invalidator_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.invalidator_client_id)
}
#if LANG_CXX11
void ClientToServerMessage::set_invalidator_client_id(::std::string&& value) {
  set_has_invalidator_client_id();
  invalidator_client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerMessage.invalidator_client_id)
}
#endif
void ClientToServerMessage::set_invalidator_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invalidator_client_id();
  invalidator_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerMessage.invalidator_client_id)
}
void ClientToServerMessage::set_invalidator_client_id(const char* value, size_t size) {
  set_has_invalidator_client_id();
  invalidator_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerMessage.invalidator_client_id)
}
::std::string* ClientToServerMessage::mutable_invalidator_client_id() {
  set_has_invalidator_client_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.invalidator_client_id)
  return invalidator_client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientToServerMessage::release_invalidator_client_id() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.invalidator_client_id)
  clear_has_invalidator_client_id();
  return invalidator_client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientToServerMessage::set_allocated_invalidator_client_id(::std::string* invalidator_client_id) {
  if (invalidator_client_id != NULL) {
    set_has_invalidator_client_id();
  } else {
    clear_has_invalidator_client_id();
  }
  invalidator_client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invalidator_client_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.invalidator_client_id)
}

// optional .sync_pb.ClearServerDataMessage clear_server_data = 15;
bool ClientToServerMessage::has_clear_server_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ClientToServerMessage::set_has_clear_server_data() {
  _has_bits_[0] |= 0x00000800u;
}
void ClientToServerMessage::clear_has_clear_server_data() {
  _has_bits_[0] &= ~0x00000800u;
}
void ClientToServerMessage::clear_clear_server_data() {
  if (clear_server_data_ != NULL) clear_server_data_->::sync_pb::ClearServerDataMessage::Clear();
  clear_has_clear_server_data();
}
const ::sync_pb::ClearServerDataMessage& ClientToServerMessage::clear_server_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.clear_server_data)
  return clear_server_data_ != NULL ? *clear_server_data_
                         : *::sync_pb::ClearServerDataMessage::internal_default_instance();
}
::sync_pb::ClearServerDataMessage* ClientToServerMessage::mutable_clear_server_data() {
  set_has_clear_server_data();
  if (clear_server_data_ == NULL) {
    clear_server_data_ = new ::sync_pb::ClearServerDataMessage;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.clear_server_data)
  return clear_server_data_;
}
::sync_pb::ClearServerDataMessage* ClientToServerMessage::release_clear_server_data() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.clear_server_data)
  clear_has_clear_server_data();
  ::sync_pb::ClearServerDataMessage* temp = clear_server_data_;
  clear_server_data_ = NULL;
  return temp;
}
void ClientToServerMessage::set_allocated_clear_server_data(::sync_pb::ClearServerDataMessage* clear_server_data) {
  delete clear_server_data_;
  clear_server_data_ = clear_server_data;
  if (clear_server_data) {
    set_has_clear_server_data();
  } else {
    clear_has_clear_server_data();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.clear_server_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCrashInfoRequest::kCrashIdFieldNumber;
const int GetCrashInfoRequest::kCrashTimeMillisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCrashInfoRequest::GetCrashInfoRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetCrashInfoRequest)
}
GetCrashInfoRequest::GetCrashInfoRequest(const GetCrashInfoRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crash_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_crash_id()) {
    crash_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crash_id_);
  }
  crash_time_millis_ = from.crash_time_millis_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetCrashInfoRequest)
}

void GetCrashInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  crash_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crash_time_millis_ = GOOGLE_LONGLONG(0);
}

GetCrashInfoRequest::~GetCrashInfoRequest() {
  // @@protoc_insertion_point(destructor:sync_pb.GetCrashInfoRequest)
  SharedDtor();
}

void GetCrashInfoRequest::SharedDtor() {
  crash_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetCrashInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCrashInfoRequest& GetCrashInfoRequest::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCrashInfoRequest* GetCrashInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetCrashInfoRequest* n = new GetCrashInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCrashInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetCrashInfoRequest)
  if (has_crash_id()) {
    GOOGLE_DCHECK(!crash_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*crash_id_.UnsafeRawStringPointer())->clear();
  }
  crash_time_millis_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCrashInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetCrashInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crash_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crash_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 crash_time_millis = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_crash_time_millis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crash_time_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetCrashInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetCrashInfoRequest)
  return false;
#undef DO_
}

void GetCrashInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetCrashInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string crash_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->crash_id(), output);
  }

  // optional int64 crash_time_millis = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->crash_time_millis(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetCrashInfoRequest)
}

size_t GetCrashInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetCrashInfoRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string crash_id = 1;
    if (has_crash_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crash_id());
    }

    // optional int64 crash_time_millis = 2;
    if (has_crash_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crash_time_millis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCrashInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCrashInfoRequest*>(&from));
}

void GetCrashInfoRequest::MergeFrom(const GetCrashInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetCrashInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_crash_id();
      crash_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crash_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      crash_time_millis_ = from.crash_time_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCrashInfoRequest::CopyFrom(const GetCrashInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetCrashInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCrashInfoRequest::IsInitialized() const {
  return true;
}

void GetCrashInfoRequest::Swap(GetCrashInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCrashInfoRequest::InternalSwap(GetCrashInfoRequest* other) {
  crash_id_.Swap(&other->crash_id_);
  std::swap(crash_time_millis_, other->crash_time_millis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetCrashInfoRequest::GetTypeName() const {
  return "sync_pb.GetCrashInfoRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCrashInfoRequest

// optional string crash_id = 1;
bool GetCrashInfoRequest::has_crash_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCrashInfoRequest::set_has_crash_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCrashInfoRequest::clear_has_crash_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCrashInfoRequest::clear_crash_id() {
  crash_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_crash_id();
}
const ::std::string& GetCrashInfoRequest::crash_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetCrashInfoRequest.crash_id)
  return crash_id_.GetNoArena();
}
void GetCrashInfoRequest::set_crash_id(const ::std::string& value) {
  set_has_crash_id();
  crash_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.GetCrashInfoRequest.crash_id)
}
#if LANG_CXX11
void GetCrashInfoRequest::set_crash_id(::std::string&& value) {
  set_has_crash_id();
  crash_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.GetCrashInfoRequest.crash_id)
}
#endif
void GetCrashInfoRequest::set_crash_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_crash_id();
  crash_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.GetCrashInfoRequest.crash_id)
}
void GetCrashInfoRequest::set_crash_id(const char* value, size_t size) {
  set_has_crash_id();
  crash_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.GetCrashInfoRequest.crash_id)
}
::std::string* GetCrashInfoRequest::mutable_crash_id() {
  set_has_crash_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.GetCrashInfoRequest.crash_id)
  return crash_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCrashInfoRequest::release_crash_id() {
  // @@protoc_insertion_point(field_release:sync_pb.GetCrashInfoRequest.crash_id)
  clear_has_crash_id();
  return crash_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCrashInfoRequest::set_allocated_crash_id(::std::string* crash_id) {
  if (crash_id != NULL) {
    set_has_crash_id();
  } else {
    clear_has_crash_id();
  }
  crash_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crash_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GetCrashInfoRequest.crash_id)
}

// optional int64 crash_time_millis = 2;
bool GetCrashInfoRequest::has_crash_time_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCrashInfoRequest::set_has_crash_time_millis() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCrashInfoRequest::clear_has_crash_time_millis() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCrashInfoRequest::clear_crash_time_millis() {
  crash_time_millis_ = GOOGLE_LONGLONG(0);
  clear_has_crash_time_millis();
}
::google::protobuf::int64 GetCrashInfoRequest::crash_time_millis() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetCrashInfoRequest.crash_time_millis)
  return crash_time_millis_;
}
void GetCrashInfoRequest::set_crash_time_millis(::google::protobuf::int64 value) {
  set_has_crash_time_millis();
  crash_time_millis_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetCrashInfoRequest.crash_time_millis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCrashInfoResponse::kStackIdFieldNumber;
const int GetCrashInfoResponse::kCrashTimeMillisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCrashInfoResponse::GetCrashInfoResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetCrashInfoResponse)
}
GetCrashInfoResponse::GetCrashInfoResponse(const GetCrashInfoResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stack_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stack_id()) {
    stack_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stack_id_);
  }
  crash_time_millis_ = from.crash_time_millis_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetCrashInfoResponse)
}

void GetCrashInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  stack_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crash_time_millis_ = GOOGLE_LONGLONG(0);
}

GetCrashInfoResponse::~GetCrashInfoResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.GetCrashInfoResponse)
  SharedDtor();
}

void GetCrashInfoResponse::SharedDtor() {
  stack_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetCrashInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCrashInfoResponse& GetCrashInfoResponse::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCrashInfoResponse* GetCrashInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetCrashInfoResponse* n = new GetCrashInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCrashInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetCrashInfoResponse)
  if (has_stack_id()) {
    GOOGLE_DCHECK(!stack_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*stack_id_.UnsafeRawStringPointer())->clear();
  }
  crash_time_millis_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCrashInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetCrashInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stack_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stack_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 crash_time_millis = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_crash_time_millis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crash_time_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetCrashInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetCrashInfoResponse)
  return false;
#undef DO_
}

void GetCrashInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetCrashInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stack_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stack_id(), output);
  }

  // optional int64 crash_time_millis = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->crash_time_millis(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetCrashInfoResponse)
}

size_t GetCrashInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetCrashInfoResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string stack_id = 1;
    if (has_stack_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stack_id());
    }

    // optional int64 crash_time_millis = 2;
    if (has_crash_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crash_time_millis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCrashInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCrashInfoResponse*>(&from));
}

void GetCrashInfoResponse::MergeFrom(const GetCrashInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetCrashInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_stack_id();
      stack_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stack_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      crash_time_millis_ = from.crash_time_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCrashInfoResponse::CopyFrom(const GetCrashInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetCrashInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCrashInfoResponse::IsInitialized() const {
  return true;
}

void GetCrashInfoResponse::Swap(GetCrashInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCrashInfoResponse::InternalSwap(GetCrashInfoResponse* other) {
  stack_id_.Swap(&other->stack_id_);
  std::swap(crash_time_millis_, other->crash_time_millis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetCrashInfoResponse::GetTypeName() const {
  return "sync_pb.GetCrashInfoResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCrashInfoResponse

// optional string stack_id = 1;
bool GetCrashInfoResponse::has_stack_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCrashInfoResponse::set_has_stack_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCrashInfoResponse::clear_has_stack_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCrashInfoResponse::clear_stack_id() {
  stack_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stack_id();
}
const ::std::string& GetCrashInfoResponse::stack_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetCrashInfoResponse.stack_id)
  return stack_id_.GetNoArena();
}
void GetCrashInfoResponse::set_stack_id(const ::std::string& value) {
  set_has_stack_id();
  stack_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.GetCrashInfoResponse.stack_id)
}
#if LANG_CXX11
void GetCrashInfoResponse::set_stack_id(::std::string&& value) {
  set_has_stack_id();
  stack_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.GetCrashInfoResponse.stack_id)
}
#endif
void GetCrashInfoResponse::set_stack_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stack_id();
  stack_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.GetCrashInfoResponse.stack_id)
}
void GetCrashInfoResponse::set_stack_id(const char* value, size_t size) {
  set_has_stack_id();
  stack_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.GetCrashInfoResponse.stack_id)
}
::std::string* GetCrashInfoResponse::mutable_stack_id() {
  set_has_stack_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.GetCrashInfoResponse.stack_id)
  return stack_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCrashInfoResponse::release_stack_id() {
  // @@protoc_insertion_point(field_release:sync_pb.GetCrashInfoResponse.stack_id)
  clear_has_stack_id();
  return stack_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCrashInfoResponse::set_allocated_stack_id(::std::string* stack_id) {
  if (stack_id != NULL) {
    set_has_stack_id();
  } else {
    clear_has_stack_id();
  }
  stack_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stack_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GetCrashInfoResponse.stack_id)
}

// optional int64 crash_time_millis = 2;
bool GetCrashInfoResponse::has_crash_time_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCrashInfoResponse::set_has_crash_time_millis() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCrashInfoResponse::clear_has_crash_time_millis() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCrashInfoResponse::clear_crash_time_millis() {
  crash_time_millis_ = GOOGLE_LONGLONG(0);
  clear_has_crash_time_millis();
}
::google::protobuf::int64 GetCrashInfoResponse::crash_time_millis() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetCrashInfoResponse.crash_time_millis)
  return crash_time_millis_;
}
void GetCrashInfoResponse::set_crash_time_millis(::google::protobuf::int64 value) {
  set_has_crash_time_millis();
  crash_time_millis_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetCrashInfoResponse.crash_time_millis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse_EntryResponse::kResponseTypeFieldNumber;
const int CommitResponse_EntryResponse::kIdStringFieldNumber;
const int CommitResponse_EntryResponse::kParentIdStringFieldNumber;
const int CommitResponse_EntryResponse::kPositionInParentFieldNumber;
const int CommitResponse_EntryResponse::kVersionFieldNumber;
const int CommitResponse_EntryResponse::kNameFieldNumber;
const int CommitResponse_EntryResponse::kNonUniqueNameFieldNumber;
const int CommitResponse_EntryResponse::kErrorMessageFieldNumber;
const int CommitResponse_EntryResponse::kMtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse_EntryResponse::CommitResponse_EntryResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CommitResponse.EntryResponse)
}
CommitResponse_EntryResponse::CommitResponse_EntryResponse(const CommitResponse_EntryResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id_string()) {
    id_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_string_);
  }
  parent_id_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_id_string()) {
    parent_id_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_string_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  non_unique_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_non_unique_name()) {
    non_unique_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.non_unique_name_);
  }
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&position_in_parent_, &from.position_in_parent_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_type_) -
    reinterpret_cast<char*>(&position_in_parent_)) + sizeof(response_type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.CommitResponse.EntryResponse)
}

void CommitResponse_EntryResponse::SharedCtor() {
  _cached_size_ = 0;
  id_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  non_unique_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_in_parent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtime_) -
      reinterpret_cast<char*>(&position_in_parent_)) + sizeof(mtime_));
  response_type_ = 1;
}

CommitResponse_EntryResponse::~CommitResponse_EntryResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.CommitResponse.EntryResponse)
  SharedDtor();
}

void CommitResponse_EntryResponse::SharedDtor() {
  id_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  non_unique_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommitResponse_EntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitResponse_EntryResponse& CommitResponse_EntryResponse::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitResponse_EntryResponse* CommitResponse_EntryResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse_EntryResponse* n = new CommitResponse_EntryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse_EntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CommitResponse.EntryResponse)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_id_string()) {
      GOOGLE_DCHECK(!id_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_string_.UnsafeRawStringPointer())->clear();
    }
    if (has_parent_id_string()) {
      GOOGLE_DCHECK(!parent_id_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parent_id_string_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_non_unique_name()) {
      GOOGLE_DCHECK(!non_unique_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*non_unique_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_error_message()) {
      GOOGLE_DCHECK(!error_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_message_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&position_in_parent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mtime_) -
        reinterpret_cast<char*>(&position_in_parent_)) + sizeof(mtime_));
  }
  response_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommitResponse_EntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CommitResponse.EntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sync_pb.CommitResponse.ResponseType response_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::CommitResponse_ResponseType_IsValid(value)) {
            set_response_type(static_cast< ::sync_pb::CommitResponse_ResponseType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_id_string = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 position_in_parent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_position_in_parent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_in_parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string non_unique_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_non_unique_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mtime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_mtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CommitResponse.EntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CommitResponse.EntryResponse)
  return false;
#undef DO_
}

void CommitResponse_EntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CommitResponse.EntryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sync_pb.CommitResponse.ResponseType response_type = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response_type(), output);
  }

  // optional string id_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id_string(), output);
  }

  // optional string parent_id_string = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->parent_id_string(), output);
  }

  // optional int64 position_in_parent = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->position_in_parent(), output);
  }

  // optional int64 version = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->version(), output);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional string non_unique_name = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->non_unique_name(), output);
  }

  // optional string error_message = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->error_message(), output);
  }

  // optional int64 mtime = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->mtime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CommitResponse.EntryResponse)
}

size_t CommitResponse_EntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CommitResponse.EntryResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required .sync_pb.CommitResponse.ResponseType response_type = 2;
  if (has_response_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string id_string = 3;
    if (has_id_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_string());
    }

    // optional string parent_id_string = 4;
    if (has_parent_id_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_id_string());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string non_unique_name = 8;
    if (has_non_unique_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->non_unique_name());
    }

    // optional string error_message = 9;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional int64 position_in_parent = 5;
    if (has_position_in_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->position_in_parent());
    }

    // optional int64 version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int64 mtime = 10;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse_EntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitResponse_EntryResponse*>(&from));
}

void CommitResponse_EntryResponse::MergeFrom(const CommitResponse_EntryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CommitResponse.EntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id_string();
      id_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_parent_id_string();
      parent_id_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_non_unique_name();
      non_unique_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.non_unique_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000020u) {
      position_in_parent_ = from.position_in_parent_;
    }
    if (cached_has_bits & 0x00000040u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000080u) {
      mtime_ = from.mtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_response_type(from.response_type());
  }
}

void CommitResponse_EntryResponse::CopyFrom(const CommitResponse_EntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CommitResponse.EntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse_EntryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  return true;
}

void CommitResponse_EntryResponse::Swap(CommitResponse_EntryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse_EntryResponse::InternalSwap(CommitResponse_EntryResponse* other) {
  id_string_.Swap(&other->id_string_);
  parent_id_string_.Swap(&other->parent_id_string_);
  name_.Swap(&other->name_);
  non_unique_name_.Swap(&other->non_unique_name_);
  error_message_.Swap(&other->error_message_);
  std::swap(position_in_parent_, other->position_in_parent_);
  std::swap(version_, other->version_);
  std::swap(mtime_, other->mtime_);
  std::swap(response_type_, other->response_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommitResponse_EntryResponse::GetTypeName() const {
  return "sync_pb.CommitResponse.EntryResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitResponse_EntryResponse

// required .sync_pb.CommitResponse.ResponseType response_type = 2;
bool CommitResponse_EntryResponse::has_response_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CommitResponse_EntryResponse::set_has_response_type() {
  _has_bits_[0] |= 0x00000100u;
}
void CommitResponse_EntryResponse::clear_has_response_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void CommitResponse_EntryResponse::clear_response_type() {
  response_type_ = 1;
  clear_has_response_type();
}
::sync_pb::CommitResponse_ResponseType CommitResponse_EntryResponse::response_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.response_type)
  return static_cast< ::sync_pb::CommitResponse_ResponseType >(response_type_);
}
void CommitResponse_EntryResponse::set_response_type(::sync_pb::CommitResponse_ResponseType value) {
  assert(::sync_pb::CommitResponse_ResponseType_IsValid(value));
  set_has_response_type();
  response_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.response_type)
}

// optional string id_string = 3;
bool CommitResponse_EntryResponse::has_id_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitResponse_EntryResponse::set_has_id_string() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitResponse_EntryResponse::clear_has_id_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitResponse_EntryResponse::clear_id_string() {
  id_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id_string();
}
const ::std::string& CommitResponse_EntryResponse::id_string() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.id_string)
  return id_string_.GetNoArena();
}
void CommitResponse_EntryResponse::set_id_string(const ::std::string& value) {
  set_has_id_string();
  id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.id_string)
}
#if LANG_CXX11
void CommitResponse_EntryResponse::set_id_string(::std::string&& value) {
  set_has_id_string();
  id_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitResponse.EntryResponse.id_string)
}
#endif
void CommitResponse_EntryResponse::set_id_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id_string();
  id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitResponse.EntryResponse.id_string)
}
void CommitResponse_EntryResponse::set_id_string(const char* value, size_t size) {
  set_has_id_string();
  id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitResponse.EntryResponse.id_string)
}
::std::string* CommitResponse_EntryResponse::mutable_id_string() {
  set_has_id_string();
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.id_string)
  return id_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitResponse_EntryResponse::release_id_string() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.id_string)
  clear_has_id_string();
  return id_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitResponse_EntryResponse::set_allocated_id_string(::std::string* id_string) {
  if (id_string != NULL) {
    set_has_id_string();
  } else {
    clear_has_id_string();
  }
  id_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_string);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.id_string)
}

// optional string parent_id_string = 4;
bool CommitResponse_EntryResponse::has_parent_id_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommitResponse_EntryResponse::set_has_parent_id_string() {
  _has_bits_[0] |= 0x00000002u;
}
void CommitResponse_EntryResponse::clear_has_parent_id_string() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommitResponse_EntryResponse::clear_parent_id_string() {
  parent_id_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_id_string();
}
const ::std::string& CommitResponse_EntryResponse::parent_id_string() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.parent_id_string)
  return parent_id_string_.GetNoArena();
}
void CommitResponse_EntryResponse::set_parent_id_string(const ::std::string& value) {
  set_has_parent_id_string();
  parent_id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.parent_id_string)
}
#if LANG_CXX11
void CommitResponse_EntryResponse::set_parent_id_string(::std::string&& value) {
  set_has_parent_id_string();
  parent_id_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitResponse.EntryResponse.parent_id_string)
}
#endif
void CommitResponse_EntryResponse::set_parent_id_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_id_string();
  parent_id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitResponse.EntryResponse.parent_id_string)
}
void CommitResponse_EntryResponse::set_parent_id_string(const char* value, size_t size) {
  set_has_parent_id_string();
  parent_id_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitResponse.EntryResponse.parent_id_string)
}
::std::string* CommitResponse_EntryResponse::mutable_parent_id_string() {
  set_has_parent_id_string();
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.parent_id_string)
  return parent_id_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitResponse_EntryResponse::release_parent_id_string() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.parent_id_string)
  clear_has_parent_id_string();
  return parent_id_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitResponse_EntryResponse::set_allocated_parent_id_string(::std::string* parent_id_string) {
  if (parent_id_string != NULL) {
    set_has_parent_id_string();
  } else {
    clear_has_parent_id_string();
  }
  parent_id_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id_string);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.parent_id_string)
}

// optional int64 position_in_parent = 5;
bool CommitResponse_EntryResponse::has_position_in_parent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CommitResponse_EntryResponse::set_has_position_in_parent() {
  _has_bits_[0] |= 0x00000020u;
}
void CommitResponse_EntryResponse::clear_has_position_in_parent() {
  _has_bits_[0] &= ~0x00000020u;
}
void CommitResponse_EntryResponse::clear_position_in_parent() {
  position_in_parent_ = GOOGLE_LONGLONG(0);
  clear_has_position_in_parent();
}
::google::protobuf::int64 CommitResponse_EntryResponse::position_in_parent() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.position_in_parent)
  return position_in_parent_;
}
void CommitResponse_EntryResponse::set_position_in_parent(::google::protobuf::int64 value) {
  set_has_position_in_parent();
  position_in_parent_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.position_in_parent)
}

// optional int64 version = 6;
bool CommitResponse_EntryResponse::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CommitResponse_EntryResponse::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
void CommitResponse_EntryResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
void CommitResponse_EntryResponse::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
::google::protobuf::int64 CommitResponse_EntryResponse::version() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.version)
  return version_;
}
void CommitResponse_EntryResponse::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.version)
}

// optional string name = 7;
bool CommitResponse_EntryResponse::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommitResponse_EntryResponse::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CommitResponse_EntryResponse::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommitResponse_EntryResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CommitResponse_EntryResponse::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.name)
  return name_.GetNoArena();
}
void CommitResponse_EntryResponse::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.name)
}
#if LANG_CXX11
void CommitResponse_EntryResponse::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitResponse.EntryResponse.name)
}
#endif
void CommitResponse_EntryResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitResponse.EntryResponse.name)
}
void CommitResponse_EntryResponse::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitResponse.EntryResponse.name)
}
::std::string* CommitResponse_EntryResponse::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitResponse_EntryResponse::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitResponse_EntryResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.name)
}

// optional string non_unique_name = 8;
bool CommitResponse_EntryResponse::has_non_unique_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CommitResponse_EntryResponse::set_has_non_unique_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CommitResponse_EntryResponse::clear_has_non_unique_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CommitResponse_EntryResponse::clear_non_unique_name() {
  non_unique_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_non_unique_name();
}
const ::std::string& CommitResponse_EntryResponse::non_unique_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.non_unique_name)
  return non_unique_name_.GetNoArena();
}
void CommitResponse_EntryResponse::set_non_unique_name(const ::std::string& value) {
  set_has_non_unique_name();
  non_unique_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.non_unique_name)
}
#if LANG_CXX11
void CommitResponse_EntryResponse::set_non_unique_name(::std::string&& value) {
  set_has_non_unique_name();
  non_unique_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitResponse.EntryResponse.non_unique_name)
}
#endif
void CommitResponse_EntryResponse::set_non_unique_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_non_unique_name();
  non_unique_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitResponse.EntryResponse.non_unique_name)
}
void CommitResponse_EntryResponse::set_non_unique_name(const char* value, size_t size) {
  set_has_non_unique_name();
  non_unique_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitResponse.EntryResponse.non_unique_name)
}
::std::string* CommitResponse_EntryResponse::mutable_non_unique_name() {
  set_has_non_unique_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.non_unique_name)
  return non_unique_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitResponse_EntryResponse::release_non_unique_name() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.non_unique_name)
  clear_has_non_unique_name();
  return non_unique_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitResponse_EntryResponse::set_allocated_non_unique_name(::std::string* non_unique_name) {
  if (non_unique_name != NULL) {
    set_has_non_unique_name();
  } else {
    clear_has_non_unique_name();
  }
  non_unique_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), non_unique_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.non_unique_name)
}

// optional string error_message = 9;
bool CommitResponse_EntryResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CommitResponse_EntryResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000010u;
}
void CommitResponse_EntryResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000010u;
}
void CommitResponse_EntryResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& CommitResponse_EntryResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.error_message)
  return error_message_.GetNoArena();
}
void CommitResponse_EntryResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.error_message)
}
#if LANG_CXX11
void CommitResponse_EntryResponse::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitResponse.EntryResponse.error_message)
}
#endif
void CommitResponse_EntryResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitResponse.EntryResponse.error_message)
}
void CommitResponse_EntryResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitResponse.EntryResponse.error_message)
}
::std::string* CommitResponse_EntryResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitResponse_EntryResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitResponse_EntryResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.error_message)
}

// optional int64 mtime = 10;
bool CommitResponse_EntryResponse::has_mtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CommitResponse_EntryResponse::set_has_mtime() {
  _has_bits_[0] |= 0x00000080u;
}
void CommitResponse_EntryResponse::clear_has_mtime() {
  _has_bits_[0] &= ~0x00000080u;
}
void CommitResponse_EntryResponse::clear_mtime() {
  mtime_ = GOOGLE_LONGLONG(0);
  clear_has_mtime();
}
::google::protobuf::int64 CommitResponse_EntryResponse::mtime() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.mtime)
  return mtime_;
}
void CommitResponse_EntryResponse::set_mtime(::google::protobuf::int64 value) {
  set_has_mtime();
  mtime_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.mtime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kEntryresponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CommitResponse)
}
CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entryresponse_(from.entryresponse_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.CommitResponse)
}

void CommitResponse::SharedCtor() {
  _cached_size_ = 0;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitResponse& CommitResponse::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitResponse* CommitResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse* n = new CommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CommitResponse)
  entryresponse_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group EntryResponse = 1 { ... };
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(11u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                1, input, add_entryresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CommitResponse)
  return false;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated group EntryResponse = 1 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entryresponse_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      1, this->entryresponse(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CommitResponse)
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CommitResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated group EntryResponse = 1 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->entryresponse_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->entryresponse(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitResponse*>(&from));
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entryresponse_.MergeFrom(from.entryresponse_);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->entryresponse())) return false;
  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  entryresponse_.InternalSwap(&other->entryresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommitResponse::GetTypeName() const {
  return "sync_pb.CommitResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitResponse

// repeated group EntryResponse = 1 { ... };
int CommitResponse::entryresponse_size() const {
  return entryresponse_.size();
}
void CommitResponse::clear_entryresponse() {
  entryresponse_.Clear();
}
const ::sync_pb::CommitResponse_EntryResponse& CommitResponse::entryresponse(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.entryresponse)
  return entryresponse_.Get(index);
}
::sync_pb::CommitResponse_EntryResponse* CommitResponse::mutable_entryresponse(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.entryresponse)
  return entryresponse_.Mutable(index);
}
::sync_pb::CommitResponse_EntryResponse* CommitResponse::add_entryresponse() {
  // @@protoc_insertion_point(field_add:sync_pb.CommitResponse.entryresponse)
  return entryresponse_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::CommitResponse_EntryResponse >*
CommitResponse::mutable_entryresponse() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.CommitResponse.entryresponse)
  return &entryresponse_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::CommitResponse_EntryResponse >&
CommitResponse::entryresponse() const {
  // @@protoc_insertion_point(field_list:sync_pb.CommitResponse.entryresponse)
  return entryresponse_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdatesResponse::kEntriesFieldNumber;
const int GetUpdatesResponse::kNewTimestampFieldNumber;
const int GetUpdatesResponse::kDeprecatedNewestTimestampFieldNumber;
const int GetUpdatesResponse::kChangesRemainingFieldNumber;
const int GetUpdatesResponse::kNewProgressMarkerFieldNumber;
const int GetUpdatesResponse::kEncryptionKeysFieldNumber;
const int GetUpdatesResponse::kContextMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdatesResponse::GetUpdatesResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetUpdatesResponse)
}
GetUpdatesResponse::GetUpdatesResponse(const GetUpdatesResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_),
      new_progress_marker_(from.new_progress_marker_),
      encryption_keys_(from.encryption_keys_),
      context_mutations_(from.context_mutations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_timestamp_, &from.new_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&changes_remaining_) -
    reinterpret_cast<char*>(&new_timestamp_)) + sizeof(changes_remaining_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetUpdatesResponse)
}

void GetUpdatesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&new_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changes_remaining_) -
      reinterpret_cast<char*>(&new_timestamp_)) + sizeof(changes_remaining_));
}

GetUpdatesResponse::~GetUpdatesResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.GetUpdatesResponse)
  SharedDtor();
}

void GetUpdatesResponse::SharedDtor() {
}

void GetUpdatesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdatesResponse& GetUpdatesResponse::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUpdatesResponse* GetUpdatesResponse::New(::google::protobuf::Arena* arena) const {
  GetUpdatesResponse* n = new GetUpdatesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUpdatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetUpdatesResponse)
  entries_.Clear();
  new_progress_marker_.Clear();
  encryption_keys_.Clear();
  context_mutations_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&new_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&changes_remaining_) -
        reinterpret_cast<char*>(&new_timestamp_)) + sizeof(changes_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUpdatesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetUpdatesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.SyncEntity entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 new_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_new_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deprecated_newest_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_deprecated_newest_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_newest_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 changes_remaining = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_changes_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &changes_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_progress_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes encryption_keys = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_encryption_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeContext context_mutations = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_context_mutations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetUpdatesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetUpdatesResponse)
  return false;
#undef DO_
}

void GetUpdatesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetUpdatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.SyncEntity entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entries(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 new_timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->new_timestamp(), output);
  }

  // optional int64 deprecated_newest_timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->deprecated_newest_timestamp(), output);
  }

  // optional int64 changes_remaining = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->changes_remaining(), output);
  }

  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->new_progress_marker_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->new_progress_marker(static_cast<int>(i)), output);
  }

  // repeated bytes encryption_keys = 6;
  for (int i = 0, n = this->encryption_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->encryption_keys(i), output);
  }

  // repeated .sync_pb.DataTypeContext context_mutations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->context_mutations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->context_mutations(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetUpdatesResponse)
}

size_t GetUpdatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetUpdatesResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.SyncEntity entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(static_cast<int>(i)));
    }
  }

  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->new_progress_marker_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_progress_marker(static_cast<int>(i)));
    }
  }

  // repeated bytes encryption_keys = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->encryption_keys_size());
  for (int i = 0, n = this->encryption_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->encryption_keys(i));
  }

  // repeated .sync_pb.DataTypeContext context_mutations = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->context_mutations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->context_mutations(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 new_timestamp = 2;
    if (has_new_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_timestamp());
    }

    // optional int64 deprecated_newest_timestamp = 3;
    if (has_deprecated_newest_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deprecated_newest_timestamp());
    }

    // optional int64 changes_remaining = 4;
    if (has_changes_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changes_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatesResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdatesResponse*>(&from));
}

void GetUpdatesResponse::MergeFrom(const GetUpdatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetUpdatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  new_progress_marker_.MergeFrom(from.new_progress_marker_);
  encryption_keys_.MergeFrom(from.encryption_keys_);
  context_mutations_.MergeFrom(from.context_mutations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      new_timestamp_ = from.new_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      deprecated_newest_timestamp_ = from.deprecated_newest_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      changes_remaining_ = from.changes_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUpdatesResponse::CopyFrom(const GetUpdatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetUpdatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesResponse::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void GetUpdatesResponse::Swap(GetUpdatesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdatesResponse::InternalSwap(GetUpdatesResponse* other) {
  entries_.InternalSwap(&other->entries_);
  new_progress_marker_.InternalSwap(&other->new_progress_marker_);
  encryption_keys_.InternalSwap(&other->encryption_keys_);
  context_mutations_.InternalSwap(&other->context_mutations_);
  std::swap(new_timestamp_, other->new_timestamp_);
  std::swap(deprecated_newest_timestamp_, other->deprecated_newest_timestamp_);
  std::swap(changes_remaining_, other->changes_remaining_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetUpdatesResponse::GetTypeName() const {
  return "sync_pb.GetUpdatesResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUpdatesResponse

// repeated .sync_pb.SyncEntity entries = 1;
int GetUpdatesResponse::entries_size() const {
  return entries_.size();
}
void GetUpdatesResponse::clear_entries() {
  entries_.Clear();
}
const ::sync_pb::SyncEntity& GetUpdatesResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.entries)
  return entries_.Get(index);
}
::sync_pb::SyncEntity* GetUpdatesResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesResponse.entries)
  return entries_.Mutable(index);
}
::sync_pb::SyncEntity* GetUpdatesResponse::add_entries() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesResponse.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::SyncEntity >*
GetUpdatesResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesResponse.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::SyncEntity >&
GetUpdatesResponse::entries() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesResponse.entries)
  return entries_;
}

// optional int64 new_timestamp = 2;
bool GetUpdatesResponse::has_new_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUpdatesResponse::set_has_new_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUpdatesResponse::clear_has_new_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUpdatesResponse::clear_new_timestamp() {
  new_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_new_timestamp();
}
::google::protobuf::int64 GetUpdatesResponse::new_timestamp() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.new_timestamp)
  return new_timestamp_;
}
void GetUpdatesResponse::set_new_timestamp(::google::protobuf::int64 value) {
  set_has_new_timestamp();
  new_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesResponse.new_timestamp)
}

// optional int64 deprecated_newest_timestamp = 3;
bool GetUpdatesResponse::has_deprecated_newest_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUpdatesResponse::set_has_deprecated_newest_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUpdatesResponse::clear_has_deprecated_newest_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUpdatesResponse::clear_deprecated_newest_timestamp() {
  deprecated_newest_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_deprecated_newest_timestamp();
}
::google::protobuf::int64 GetUpdatesResponse::deprecated_newest_timestamp() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.deprecated_newest_timestamp)
  return deprecated_newest_timestamp_;
}
void GetUpdatesResponse::set_deprecated_newest_timestamp(::google::protobuf::int64 value) {
  set_has_deprecated_newest_timestamp();
  deprecated_newest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesResponse.deprecated_newest_timestamp)
}

// optional int64 changes_remaining = 4;
bool GetUpdatesResponse::has_changes_remaining() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUpdatesResponse::set_has_changes_remaining() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUpdatesResponse::clear_has_changes_remaining() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUpdatesResponse::clear_changes_remaining() {
  changes_remaining_ = GOOGLE_LONGLONG(0);
  clear_has_changes_remaining();
}
::google::protobuf::int64 GetUpdatesResponse::changes_remaining() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.changes_remaining)
  return changes_remaining_;
}
void GetUpdatesResponse::set_changes_remaining(::google::protobuf::int64 value) {
  set_has_changes_remaining();
  changes_remaining_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesResponse.changes_remaining)
}

// repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
int GetUpdatesResponse::new_progress_marker_size() const {
  return new_progress_marker_.size();
}
void GetUpdatesResponse::clear_new_progress_marker() {
  new_progress_marker_.Clear();
}
const ::sync_pb::DataTypeProgressMarker& GetUpdatesResponse::new_progress_marker(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.new_progress_marker)
  return new_progress_marker_.Get(index);
}
::sync_pb::DataTypeProgressMarker* GetUpdatesResponse::mutable_new_progress_marker(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesResponse.new_progress_marker)
  return new_progress_marker_.Mutable(index);
}
::sync_pb::DataTypeProgressMarker* GetUpdatesResponse::add_new_progress_marker() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesResponse.new_progress_marker)
  return new_progress_marker_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >*
GetUpdatesResponse::mutable_new_progress_marker() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesResponse.new_progress_marker)
  return &new_progress_marker_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >&
GetUpdatesResponse::new_progress_marker() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesResponse.new_progress_marker)
  return new_progress_marker_;
}

// repeated bytes encryption_keys = 6;
int GetUpdatesResponse::encryption_keys_size() const {
  return encryption_keys_.size();
}
void GetUpdatesResponse::clear_encryption_keys() {
  encryption_keys_.Clear();
}
const ::std::string& GetUpdatesResponse::encryption_keys(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.encryption_keys)
  return encryption_keys_.Get(index);
}
::std::string* GetUpdatesResponse::mutable_encryption_keys(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesResponse.encryption_keys)
  return encryption_keys_.Mutable(index);
}
void GetUpdatesResponse::set_encryption_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesResponse.encryption_keys)
  encryption_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void GetUpdatesResponse::set_encryption_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesResponse.encryption_keys)
  encryption_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void GetUpdatesResponse::set_encryption_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  encryption_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.GetUpdatesResponse.encryption_keys)
}
void GetUpdatesResponse::set_encryption_keys(int index, const void* value, size_t size) {
  encryption_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.GetUpdatesResponse.encryption_keys)
}
::std::string* GetUpdatesResponse::add_encryption_keys() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.GetUpdatesResponse.encryption_keys)
  return encryption_keys_.Add();
}
void GetUpdatesResponse::add_encryption_keys(const ::std::string& value) {
  encryption_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesResponse.encryption_keys)
}
#if LANG_CXX11
void GetUpdatesResponse::add_encryption_keys(::std::string&& value) {
  encryption_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesResponse.encryption_keys)
}
#endif
void GetUpdatesResponse::add_encryption_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  encryption_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.GetUpdatesResponse.encryption_keys)
}
void GetUpdatesResponse::add_encryption_keys(const void* value, size_t size) {
  encryption_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.GetUpdatesResponse.encryption_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetUpdatesResponse::encryption_keys() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesResponse.encryption_keys)
  return encryption_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GetUpdatesResponse::mutable_encryption_keys() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesResponse.encryption_keys)
  return &encryption_keys_;
}

// repeated .sync_pb.DataTypeContext context_mutations = 7;
int GetUpdatesResponse::context_mutations_size() const {
  return context_mutations_.size();
}
void GetUpdatesResponse::clear_context_mutations() {
  context_mutations_.Clear();
}
const ::sync_pb::DataTypeContext& GetUpdatesResponse::context_mutations(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.context_mutations)
  return context_mutations_.Get(index);
}
::sync_pb::DataTypeContext* GetUpdatesResponse::mutable_context_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesResponse.context_mutations)
  return context_mutations_.Mutable(index);
}
::sync_pb::DataTypeContext* GetUpdatesResponse::add_context_mutations() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesResponse.context_mutations)
  return context_mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeContext >*
GetUpdatesResponse::mutable_context_mutations() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesResponse.context_mutations)
  return &context_mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeContext >&
GetUpdatesResponse::context_mutations() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesResponse.context_mutations)
  return context_mutations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdatesMetadataResponse::kChangesRemainingFieldNumber;
const int GetUpdatesMetadataResponse::kNewProgressMarkerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdatesMetadataResponse::GetUpdatesMetadataResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetUpdatesMetadataResponse)
}
GetUpdatesMetadataResponse::GetUpdatesMetadataResponse(const GetUpdatesMetadataResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      new_progress_marker_(from.new_progress_marker_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  changes_remaining_ = from.changes_remaining_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetUpdatesMetadataResponse)
}

void GetUpdatesMetadataResponse::SharedCtor() {
  _cached_size_ = 0;
  changes_remaining_ = GOOGLE_LONGLONG(0);
}

GetUpdatesMetadataResponse::~GetUpdatesMetadataResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.GetUpdatesMetadataResponse)
  SharedDtor();
}

void GetUpdatesMetadataResponse::SharedDtor() {
}

void GetUpdatesMetadataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdatesMetadataResponse& GetUpdatesMetadataResponse::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUpdatesMetadataResponse* GetUpdatesMetadataResponse::New(::google::protobuf::Arena* arena) const {
  GetUpdatesMetadataResponse* n = new GetUpdatesMetadataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUpdatesMetadataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetUpdatesMetadataResponse)
  new_progress_marker_.Clear();
  changes_remaining_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUpdatesMetadataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetUpdatesMetadataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 changes_remaining = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_changes_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &changes_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_progress_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetUpdatesMetadataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetUpdatesMetadataResponse)
  return false;
#undef DO_
}

void GetUpdatesMetadataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetUpdatesMetadataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 changes_remaining = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->changes_remaining(), output);
  }

  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->new_progress_marker_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->new_progress_marker(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetUpdatesMetadataResponse)
}

size_t GetUpdatesMetadataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetUpdatesMetadataResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->new_progress_marker_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_progress_marker(static_cast<int>(i)));
    }
  }

  // optional int64 changes_remaining = 1;
  if (has_changes_remaining()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->changes_remaining());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatesMetadataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdatesMetadataResponse*>(&from));
}

void GetUpdatesMetadataResponse::MergeFrom(const GetUpdatesMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetUpdatesMetadataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_progress_marker_.MergeFrom(from.new_progress_marker_);
  if (from.has_changes_remaining()) {
    set_changes_remaining(from.changes_remaining());
  }
}

void GetUpdatesMetadataResponse::CopyFrom(const GetUpdatesMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetUpdatesMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesMetadataResponse::IsInitialized() const {
  return true;
}

void GetUpdatesMetadataResponse::Swap(GetUpdatesMetadataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdatesMetadataResponse::InternalSwap(GetUpdatesMetadataResponse* other) {
  new_progress_marker_.InternalSwap(&other->new_progress_marker_);
  std::swap(changes_remaining_, other->changes_remaining_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetUpdatesMetadataResponse::GetTypeName() const {
  return "sync_pb.GetUpdatesMetadataResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUpdatesMetadataResponse

// optional int64 changes_remaining = 1;
bool GetUpdatesMetadataResponse::has_changes_remaining() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUpdatesMetadataResponse::set_has_changes_remaining() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUpdatesMetadataResponse::clear_has_changes_remaining() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUpdatesMetadataResponse::clear_changes_remaining() {
  changes_remaining_ = GOOGLE_LONGLONG(0);
  clear_has_changes_remaining();
}
::google::protobuf::int64 GetUpdatesMetadataResponse::changes_remaining() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMetadataResponse.changes_remaining)
  return changes_remaining_;
}
void GetUpdatesMetadataResponse::set_changes_remaining(::google::protobuf::int64 value) {
  set_has_changes_remaining();
  changes_remaining_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMetadataResponse.changes_remaining)
}

// repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 2;
int GetUpdatesMetadataResponse::new_progress_marker_size() const {
  return new_progress_marker_.size();
}
void GetUpdatesMetadataResponse::clear_new_progress_marker() {
  new_progress_marker_.Clear();
}
const ::sync_pb::DataTypeProgressMarker& GetUpdatesMetadataResponse::new_progress_marker(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMetadataResponse.new_progress_marker)
  return new_progress_marker_.Get(index);
}
::sync_pb::DataTypeProgressMarker* GetUpdatesMetadataResponse::mutable_new_progress_marker(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesMetadataResponse.new_progress_marker)
  return new_progress_marker_.Mutable(index);
}
::sync_pb::DataTypeProgressMarker* GetUpdatesMetadataResponse::add_new_progress_marker() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesMetadataResponse.new_progress_marker)
  return new_progress_marker_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >*
GetUpdatesMetadataResponse::mutable_new_progress_marker() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesMetadataResponse.new_progress_marker)
  return &new_progress_marker_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >&
GetUpdatesMetadataResponse::new_progress_marker() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesMetadataResponse.new_progress_marker)
  return new_progress_marker_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdatesStreamingResponse::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdatesStreamingResponse::GetUpdatesStreamingResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetUpdatesStreamingResponse)
}
GetUpdatesStreamingResponse::GetUpdatesStreamingResponse(const GetUpdatesStreamingResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetUpdatesStreamingResponse)
}

void GetUpdatesStreamingResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetUpdatesStreamingResponse::~GetUpdatesStreamingResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.GetUpdatesStreamingResponse)
  SharedDtor();
}

void GetUpdatesStreamingResponse::SharedDtor() {
}

void GetUpdatesStreamingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdatesStreamingResponse& GetUpdatesStreamingResponse::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUpdatesStreamingResponse* GetUpdatesStreamingResponse::New(::google::protobuf::Arena* arena) const {
  GetUpdatesStreamingResponse* n = new GetUpdatesStreamingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUpdatesStreamingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetUpdatesStreamingResponse)
  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUpdatesStreamingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetUpdatesStreamingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.SyncEntity entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetUpdatesStreamingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetUpdatesStreamingResponse)
  return false;
#undef DO_
}

void GetUpdatesStreamingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetUpdatesStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.SyncEntity entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entries(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetUpdatesStreamingResponse)
}

size_t GetUpdatesStreamingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetUpdatesStreamingResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.SyncEntity entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatesStreamingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdatesStreamingResponse*>(&from));
}

void GetUpdatesStreamingResponse::MergeFrom(const GetUpdatesStreamingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetUpdatesStreamingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void GetUpdatesStreamingResponse::CopyFrom(const GetUpdatesStreamingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetUpdatesStreamingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesStreamingResponse::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void GetUpdatesStreamingResponse::Swap(GetUpdatesStreamingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdatesStreamingResponse::InternalSwap(GetUpdatesStreamingResponse* other) {
  entries_.InternalSwap(&other->entries_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetUpdatesStreamingResponse::GetTypeName() const {
  return "sync_pb.GetUpdatesStreamingResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUpdatesStreamingResponse

// repeated .sync_pb.SyncEntity entries = 1;
int GetUpdatesStreamingResponse::entries_size() const {
  return entries_.size();
}
void GetUpdatesStreamingResponse::clear_entries() {
  entries_.Clear();
}
const ::sync_pb::SyncEntity& GetUpdatesStreamingResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesStreamingResponse.entries)
  return entries_.Get(index);
}
::sync_pb::SyncEntity* GetUpdatesStreamingResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesStreamingResponse.entries)
  return entries_.Mutable(index);
}
::sync_pb::SyncEntity* GetUpdatesStreamingResponse::add_entries() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesStreamingResponse.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::SyncEntity >*
GetUpdatesStreamingResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesStreamingResponse.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::SyncEntity >&
GetUpdatesStreamingResponse::entries() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesStreamingResponse.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserIdentification::kEmailFieldNumber;
const int UserIdentification::kDisplayNameFieldNumber;
const int UserIdentification::kObfuscatedIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserIdentification::UserIdentification()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserIdentification)
}
UserIdentification::UserIdentification(const UserIdentification& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_name()) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  obfuscated_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_obfuscated_id()) {
    obfuscated_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obfuscated_id_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserIdentification)
}

void UserIdentification::SharedCtor() {
  _cached_size_ = 0;
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obfuscated_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserIdentification::~UserIdentification() {
  // @@protoc_insertion_point(destructor:sync_pb.UserIdentification)
  SharedDtor();
}

void UserIdentification::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obfuscated_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserIdentification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserIdentification& UserIdentification::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserIdentification* UserIdentification::New(::google::protobuf::Arena* arena) const {
  UserIdentification* n = new UserIdentification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserIdentification::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserIdentification)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_email()) {
      GOOGLE_DCHECK(!email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*email_.UnsafeRawStringPointer())->clear();
    }
    if (has_display_name()) {
      GOOGLE_DCHECK(!display_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*display_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_obfuscated_id()) {
      GOOGLE_DCHECK(!obfuscated_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*obfuscated_id_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserIdentification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserIdentification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string email = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string obfuscated_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obfuscated_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserIdentification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserIdentification)
  return false;
#undef DO_
}

void UserIdentification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserIdentification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string email = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // optional string display_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // optional string obfuscated_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->obfuscated_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserIdentification)
}

size_t UserIdentification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserIdentification)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required string email = 1;
  if (has_email()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string display_name = 2;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string obfuscated_id = 3;
    if (has_obfuscated_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->obfuscated_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserIdentification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserIdentification*>(&from));
}

void UserIdentification::MergeFrom(const UserIdentification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserIdentification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_display_name();
      display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_obfuscated_id();
      obfuscated_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obfuscated_id_);
    }
  }
}

void UserIdentification::CopyFrom(const UserIdentification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserIdentification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIdentification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserIdentification::Swap(UserIdentification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserIdentification::InternalSwap(UserIdentification* other) {
  email_.Swap(&other->email_);
  display_name_.Swap(&other->display_name_);
  obfuscated_id_.Swap(&other->obfuscated_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserIdentification::GetTypeName() const {
  return "sync_pb.UserIdentification";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserIdentification

// required string email = 1;
bool UserIdentification::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserIdentification::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
void UserIdentification::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserIdentification::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& UserIdentification::email() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserIdentification.email)
  return email_.GetNoArena();
}
void UserIdentification::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserIdentification.email)
}
#if LANG_CXX11
void UserIdentification::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserIdentification.email)
}
#endif
void UserIdentification::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserIdentification.email)
}
void UserIdentification::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserIdentification.email)
}
::std::string* UserIdentification::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserIdentification.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserIdentification::release_email() {
  // @@protoc_insertion_point(field_release:sync_pb.UserIdentification.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserIdentification::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserIdentification.email)
}

// optional string display_name = 2;
bool UserIdentification::has_display_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserIdentification::set_has_display_name() {
  _has_bits_[0] |= 0x00000002u;
}
void UserIdentification::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserIdentification::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
const ::std::string& UserIdentification::display_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserIdentification.display_name)
  return display_name_.GetNoArena();
}
void UserIdentification::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserIdentification.display_name)
}
#if LANG_CXX11
void UserIdentification::set_display_name(::std::string&& value) {
  set_has_display_name();
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserIdentification.display_name)
}
#endif
void UserIdentification::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserIdentification.display_name)
}
void UserIdentification::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserIdentification.display_name)
}
::std::string* UserIdentification::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserIdentification.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserIdentification::release_display_name() {
  // @@protoc_insertion_point(field_release:sync_pb.UserIdentification.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserIdentification::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserIdentification.display_name)
}

// optional string obfuscated_id = 3;
bool UserIdentification::has_obfuscated_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserIdentification::set_has_obfuscated_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UserIdentification::clear_has_obfuscated_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserIdentification::clear_obfuscated_id() {
  obfuscated_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obfuscated_id();
}
const ::std::string& UserIdentification::obfuscated_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserIdentification.obfuscated_id)
  return obfuscated_id_.GetNoArena();
}
void UserIdentification::set_obfuscated_id(const ::std::string& value) {
  set_has_obfuscated_id();
  obfuscated_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserIdentification.obfuscated_id)
}
#if LANG_CXX11
void UserIdentification::set_obfuscated_id(::std::string&& value) {
  set_has_obfuscated_id();
  obfuscated_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserIdentification.obfuscated_id)
}
#endif
void UserIdentification::set_obfuscated_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_obfuscated_id();
  obfuscated_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserIdentification.obfuscated_id)
}
void UserIdentification::set_obfuscated_id(const char* value, size_t size) {
  set_has_obfuscated_id();
  obfuscated_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserIdentification.obfuscated_id)
}
::std::string* UserIdentification::mutable_obfuscated_id() {
  set_has_obfuscated_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserIdentification.obfuscated_id)
  return obfuscated_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserIdentification::release_obfuscated_id() {
  // @@protoc_insertion_point(field_release:sync_pb.UserIdentification.obfuscated_id)
  clear_has_obfuscated_id();
  return obfuscated_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserIdentification::set_allocated_obfuscated_id(::std::string* obfuscated_id) {
  if (obfuscated_id != NULL) {
    set_has_obfuscated_id();
  } else {
    clear_has_obfuscated_id();
  }
  obfuscated_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obfuscated_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserIdentification.obfuscated_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateResponse::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateResponse::AuthenticateResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.AuthenticateResponse)
}
AuthenticateResponse::AuthenticateResponse(const AuthenticateResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::sync_pb::UserIdentification(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.AuthenticateResponse)
}

void AuthenticateResponse::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
}

AuthenticateResponse::~AuthenticateResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.AuthenticateResponse)
  SharedDtor();
}

void AuthenticateResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete user_;
  }
}

void AuthenticateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateResponse& AuthenticateResponse::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthenticateResponse* AuthenticateResponse::New(::google::protobuf::Arena* arena) const {
  AuthenticateResponse* n = new AuthenticateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AuthenticateResponse)
  if (has_user()) {
    GOOGLE_DCHECK(user_ != NULL);
    user_->::sync_pb::UserIdentification::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthenticateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.AuthenticateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserIdentification user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.AuthenticateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.AuthenticateResponse)
  return false;
#undef DO_
}

void AuthenticateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.AuthenticateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserIdentification user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->user_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.AuthenticateResponse)
}

size_t AuthenticateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AuthenticateResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .sync_pb.UserIdentification user = 1;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateResponse*>(&from));
}

void AuthenticateResponse::MergeFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AuthenticateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::sync_pb::UserIdentification::MergeFrom(from.user());
  }
}

void AuthenticateResponse::CopyFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateResponse::IsInitialized() const {
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void AuthenticateResponse::Swap(AuthenticateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateResponse::InternalSwap(AuthenticateResponse* other) {
  std::swap(user_, other->user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateResponse::GetTypeName() const {
  return "sync_pb.AuthenticateResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateResponse

// optional .sync_pb.UserIdentification user = 1;
bool AuthenticateResponse::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthenticateResponse::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthenticateResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthenticateResponse::clear_user() {
  if (user_ != NULL) user_->::sync_pb::UserIdentification::Clear();
  clear_has_user();
}
const ::sync_pb::UserIdentification& AuthenticateResponse::user() const {
  // @@protoc_insertion_point(field_get:sync_pb.AuthenticateResponse.user)
  return user_ != NULL ? *user_
                         : *::sync_pb::UserIdentification::internal_default_instance();
}
::sync_pb::UserIdentification* AuthenticateResponse::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::sync_pb::UserIdentification;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.AuthenticateResponse.user)
  return user_;
}
::sync_pb::UserIdentification* AuthenticateResponse::release_user() {
  // @@protoc_insertion_point(field_release:sync_pb.AuthenticateResponse.user)
  clear_has_user();
  ::sync_pb::UserIdentification* temp = user_;
  user_ = NULL;
  return temp;
}
void AuthenticateResponse::set_allocated_user(::sync_pb::UserIdentification* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AuthenticateResponse.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServerResponse_Error::kErrorTypeFieldNumber;
const int ClientToServerResponse_Error::kErrorDescriptionFieldNumber;
const int ClientToServerResponse_Error::kUrlFieldNumber;
const int ClientToServerResponse_Error::kActionFieldNumber;
const int ClientToServerResponse_Error::kErrorDataTypeIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServerResponse_Error::ClientToServerResponse_Error()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientToServerResponse.Error)
}
ClientToServerResponse_Error::ClientToServerResponse_Error(const ClientToServerResponse_Error& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      error_data_type_ids_(from.error_data_type_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_description()) {
    error_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_description_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&error_type_, &from.error_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&error_type_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientToServerResponse.Error)
}

void ClientToServerResponse_Error::SharedCtor() {
  _cached_size_ = 0;
  error_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_type_ = 100;
  action_ = 5;
}

ClientToServerResponse_Error::~ClientToServerResponse_Error() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientToServerResponse.Error)
  SharedDtor();
}

void ClientToServerResponse_Error::SharedDtor() {
  error_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientToServerResponse_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToServerResponse_Error& ClientToServerResponse_Error::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientToServerResponse_Error* ClientToServerResponse_Error::New(::google::protobuf::Arena* arena) const {
  ClientToServerResponse_Error* n = new ClientToServerResponse_Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientToServerResponse_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientToServerResponse.Error)
  error_data_type_ids_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_error_description()) {
      GOOGLE_DCHECK(!error_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_description_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    error_type_ = 100;
    action_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientToServerResponse_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientToServerResponse.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_ErrorType_IsValid(value)) {
            set_error_type(static_cast< ::sync_pb::SyncEnums_ErrorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_Action_IsValid(value)) {
            set_action(static_cast< ::sync_pb::SyncEnums_Action >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 error_data_type_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_error_data_type_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_error_data_type_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientToServerResponse.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientToServerResponse.Error)
  return false;
#undef DO_
}

void ClientToServerResponse_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientToServerResponse.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  // optional string error_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_description(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // repeated int32 error_data_type_ids = 5;
  for (int i = 0, n = this->error_data_type_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->error_data_type_ids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientToServerResponse.Error)
}

size_t ClientToServerResponse_Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientToServerResponse.Error)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 error_data_type_ids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->error_data_type_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->error_data_type_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string error_description = 2;
    if (has_error_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_description());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
    if (has_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
    }

    // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServerResponse_Error::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToServerResponse_Error*>(&from));
}

void ClientToServerResponse_Error::MergeFrom(const ClientToServerResponse_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientToServerResponse.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  error_data_type_ids_.MergeFrom(from.error_data_type_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_description();
      error_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      error_type_ = from.error_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientToServerResponse_Error::CopyFrom(const ClientToServerResponse_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientToServerResponse.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerResponse_Error::IsInitialized() const {
  return true;
}

void ClientToServerResponse_Error::Swap(ClientToServerResponse_Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServerResponse_Error::InternalSwap(ClientToServerResponse_Error* other) {
  error_data_type_ids_.InternalSwap(&other->error_data_type_ids_);
  error_description_.Swap(&other->error_description_);
  url_.Swap(&other->url_);
  std::swap(error_type_, other->error_type_);
  std::swap(action_, other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientToServerResponse_Error::GetTypeName() const {
  return "sync_pb.ClientToServerResponse.Error";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientToServerResponse_Error

// optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
bool ClientToServerResponse_Error::has_error_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientToServerResponse_Error::set_has_error_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientToServerResponse_Error::clear_has_error_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientToServerResponse_Error::clear_error_type() {
  error_type_ = 100;
  clear_has_error_type();
}
::sync_pb::SyncEnums_ErrorType ClientToServerResponse_Error::error_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.Error.error_type)
  return static_cast< ::sync_pb::SyncEnums_ErrorType >(error_type_);
}
void ClientToServerResponse_Error::set_error_type(::sync_pb::SyncEnums_ErrorType value) {
  assert(::sync_pb::SyncEnums_ErrorType_IsValid(value));
  set_has_error_type();
  error_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.Error.error_type)
}

// optional string error_description = 2;
bool ClientToServerResponse_Error::has_error_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientToServerResponse_Error::set_has_error_description() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientToServerResponse_Error::clear_has_error_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientToServerResponse_Error::clear_error_description() {
  error_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_description();
}
const ::std::string& ClientToServerResponse_Error::error_description() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.Error.error_description)
  return error_description_.GetNoArena();
}
void ClientToServerResponse_Error::set_error_description(const ::std::string& value) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.Error.error_description)
}
#if LANG_CXX11
void ClientToServerResponse_Error::set_error_description(::std::string&& value) {
  set_has_error_description();
  error_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerResponse.Error.error_description)
}
#endif
void ClientToServerResponse_Error::set_error_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerResponse.Error.error_description)
}
void ClientToServerResponse_Error::set_error_description(const char* value, size_t size) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerResponse.Error.error_description)
}
::std::string* ClientToServerResponse_Error::mutable_error_description() {
  set_has_error_description();
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.Error.error_description)
  return error_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientToServerResponse_Error::release_error_description() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.Error.error_description)
  clear_has_error_description();
  return error_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientToServerResponse_Error::set_allocated_error_description(::std::string* error_description) {
  if (error_description != NULL) {
    set_has_error_description();
  } else {
    clear_has_error_description();
  }
  error_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_description);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.Error.error_description)
}

// optional string url = 3;
bool ClientToServerResponse_Error::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientToServerResponse_Error::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientToServerResponse_Error::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientToServerResponse_Error::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ClientToServerResponse_Error::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.Error.url)
  return url_.GetNoArena();
}
void ClientToServerResponse_Error::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.Error.url)
}
#if LANG_CXX11
void ClientToServerResponse_Error::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerResponse.Error.url)
}
#endif
void ClientToServerResponse_Error::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerResponse.Error.url)
}
void ClientToServerResponse_Error::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerResponse.Error.url)
}
::std::string* ClientToServerResponse_Error::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.Error.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientToServerResponse_Error::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.Error.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientToServerResponse_Error::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.Error.url)
}

// optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
bool ClientToServerResponse_Error::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientToServerResponse_Error::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientToServerResponse_Error::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientToServerResponse_Error::clear_action() {
  action_ = 5;
  clear_has_action();
}
::sync_pb::SyncEnums_Action ClientToServerResponse_Error::action() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.Error.action)
  return static_cast< ::sync_pb::SyncEnums_Action >(action_);
}
void ClientToServerResponse_Error::set_action(::sync_pb::SyncEnums_Action value) {
  assert(::sync_pb::SyncEnums_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.Error.action)
}

// repeated int32 error_data_type_ids = 5;
int ClientToServerResponse_Error::error_data_type_ids_size() const {
  return error_data_type_ids_.size();
}
void ClientToServerResponse_Error::clear_error_data_type_ids() {
  error_data_type_ids_.Clear();
}
::google::protobuf::int32 ClientToServerResponse_Error::error_data_type_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.Error.error_data_type_ids)
  return error_data_type_ids_.Get(index);
}
void ClientToServerResponse_Error::set_error_data_type_ids(int index, ::google::protobuf::int32 value) {
  error_data_type_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.Error.error_data_type_ids)
}
void ClientToServerResponse_Error::add_error_data_type_ids(::google::protobuf::int32 value) {
  error_data_type_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.ClientToServerResponse.Error.error_data_type_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientToServerResponse_Error::error_data_type_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.ClientToServerResponse.Error.error_data_type_ids)
  return error_data_type_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientToServerResponse_Error::mutable_error_data_type_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.ClientToServerResponse.Error.error_data_type_ids)
  return &error_data_type_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServerResponse::kCommitFieldNumber;
const int ClientToServerResponse::kGetUpdatesFieldNumber;
const int ClientToServerResponse::kAuthenticateFieldNumber;
const int ClientToServerResponse::kErrorCodeFieldNumber;
const int ClientToServerResponse::kErrorMessageFieldNumber;
const int ClientToServerResponse::kStoreBirthdayFieldNumber;
const int ClientToServerResponse::kClientCommandFieldNumber;
const int ClientToServerResponse::kProfilingDataFieldNumber;
const int ClientToServerResponse::kDeprecatedField9FieldNumber;
const int ClientToServerResponse::kStreamMetadataFieldNumber;
const int ClientToServerResponse::kStreamDataFieldNumber;
const int ClientToServerResponse::kMigratedDataTypeIdFieldNumber;
const int ClientToServerResponse::kErrorFieldNumber;
const int ClientToServerResponse::kNewBagOfChipsFieldNumber;
const int ClientToServerResponse::kClearServerDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServerResponse::ClientToServerResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientToServerResponse)
}
ClientToServerResponse::ClientToServerResponse(const ClientToServerResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      migrated_data_type_id_(from.migrated_data_type_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  store_birthday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_birthday()) {
    store_birthday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
  }
  if (from.has_commit()) {
    commit_ = new ::sync_pb::CommitResponse(*from.commit_);
  } else {
    commit_ = NULL;
  }
  if (from.has_get_updates()) {
    get_updates_ = new ::sync_pb::GetUpdatesResponse(*from.get_updates_);
  } else {
    get_updates_ = NULL;
  }
  if (from.has_authenticate()) {
    authenticate_ = new ::sync_pb::AuthenticateResponse(*from.authenticate_);
  } else {
    authenticate_ = NULL;
  }
  if (from.has_client_command()) {
    client_command_ = new ::sync_pb::ClientCommand(*from.client_command_);
  } else {
    client_command_ = NULL;
  }
  if (from.has_profiling_data()) {
    profiling_data_ = new ::sync_pb::ProfilingData(*from.profiling_data_);
  } else {
    profiling_data_ = NULL;
  }
  if (from.has_deprecated_field_9()) {
    deprecated_field_9_ = new ::sync_pb::DeprecatedMessage(*from.deprecated_field_9_);
  } else {
    deprecated_field_9_ = NULL;
  }
  if (from.has_stream_metadata()) {
    stream_metadata_ = new ::sync_pb::GetUpdatesMetadataResponse(*from.stream_metadata_);
  } else {
    stream_metadata_ = NULL;
  }
  if (from.has_stream_data()) {
    stream_data_ = new ::sync_pb::GetUpdatesStreamingResponse(*from.stream_data_);
  } else {
    stream_data_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::sync_pb::ClientToServerResponse_Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_new_bag_of_chips()) {
    new_bag_of_chips_ = new ::sync_pb::ChipBag(*from.new_bag_of_chips_);
  } else {
    new_bag_of_chips_ = NULL;
  }
  if (from.has_clear_server_data()) {
    clear_server_data_ = new ::sync_pb::ClearServerDataResponse(*from.clear_server_data_);
  } else {
    clear_server_data_ = NULL;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientToServerResponse)
}

void ClientToServerResponse::SharedCtor() {
  _cached_size_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_birthday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&commit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_server_data_) -
      reinterpret_cast<char*>(&commit_)) + sizeof(clear_server_data_));
  error_code_ = 100;
}

ClientToServerResponse::~ClientToServerResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientToServerResponse)
  SharedDtor();
}

void ClientToServerResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_birthday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete commit_;
  }
  if (this != internal_default_instance()) {
    delete get_updates_;
  }
  if (this != internal_default_instance()) {
    delete authenticate_;
  }
  if (this != internal_default_instance()) {
    delete client_command_;
  }
  if (this != internal_default_instance()) {
    delete profiling_data_;
  }
  if (this != internal_default_instance()) {
    delete deprecated_field_9_;
  }
  if (this != internal_default_instance()) {
    delete stream_metadata_;
  }
  if (this != internal_default_instance()) {
    delete stream_data_;
  }
  if (this != internal_default_instance()) {
    delete error_;
  }
  if (this != internal_default_instance()) {
    delete new_bag_of_chips_;
  }
  if (this != internal_default_instance()) {
    delete clear_server_data_;
  }
}

void ClientToServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToServerResponse& ClientToServerResponse::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientToServerResponse* ClientToServerResponse::New(::google::protobuf::Arena* arena) const {
  ClientToServerResponse* n = new ClientToServerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientToServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientToServerResponse)
  migrated_data_type_id_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_error_message()) {
      GOOGLE_DCHECK(!error_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_message_.UnsafeRawStringPointer())->clear();
    }
    if (has_store_birthday()) {
      GOOGLE_DCHECK(!store_birthday_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*store_birthday_.UnsafeRawStringPointer())->clear();
    }
    if (has_commit()) {
      GOOGLE_DCHECK(commit_ != NULL);
      commit_->::sync_pb::CommitResponse::Clear();
    }
    if (has_get_updates()) {
      GOOGLE_DCHECK(get_updates_ != NULL);
      get_updates_->::sync_pb::GetUpdatesResponse::Clear();
    }
    if (has_authenticate()) {
      GOOGLE_DCHECK(authenticate_ != NULL);
      authenticate_->::sync_pb::AuthenticateResponse::Clear();
    }
    if (has_client_command()) {
      GOOGLE_DCHECK(client_command_ != NULL);
      client_command_->::sync_pb::ClientCommand::Clear();
    }
    if (has_profiling_data()) {
      GOOGLE_DCHECK(profiling_data_ != NULL);
      profiling_data_->::sync_pb::ProfilingData::Clear();
    }
    if (has_deprecated_field_9()) {
      GOOGLE_DCHECK(deprecated_field_9_ != NULL);
      deprecated_field_9_->::sync_pb::DeprecatedMessage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_stream_metadata()) {
      GOOGLE_DCHECK(stream_metadata_ != NULL);
      stream_metadata_->::sync_pb::GetUpdatesMetadataResponse::Clear();
    }
    if (has_stream_data()) {
      GOOGLE_DCHECK(stream_data_ != NULL);
      stream_data_->::sync_pb::GetUpdatesStreamingResponse::Clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::sync_pb::ClientToServerResponse_Error::Clear();
    }
    if (has_new_bag_of_chips()) {
      GOOGLE_DCHECK(new_bag_of_chips_ != NULL);
      new_bag_of_chips_->::sync_pb::ChipBag::Clear();
    }
    if (has_clear_server_data()) {
      GOOGLE_DCHECK(clear_server_data_ != NULL);
      clear_server_data_->::sync_pb::ClearServerDataResponse::Clear();
    }
    error_code_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientToServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientToServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.CommitResponse commit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GetUpdatesResponse get_updates = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AuthenticateResponse authenticate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authenticate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_ErrorType_IsValid(value)) {
            set_error_code(static_cast< ::sync_pb::SyncEnums_ErrorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string store_birthday = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_birthday()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClientCommand client_command = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ProfilingData profiling_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profiling_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DeprecatedMessage deprecated_field_9 = 9 [deprecated = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_field_9()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GetUpdatesMetadataResponse stream_metadata = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GetUpdatesStreamingResponse stream_data = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 migrated_data_type_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96u, input, this->mutable_migrated_data_type_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_migrated_data_type_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClientToServerResponse.Error error = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ChipBag new_bag_of_chips = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_bag_of_chips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClearServerDataResponse clear_server_data = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_server_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientToServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientToServerResponse)
  return false;
#undef DO_
}

void ClientToServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientToServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.CommitResponse commit = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->commit_, output);
  }

  // optional .sync_pb.GetUpdatesResponse get_updates = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->get_updates_, output);
  }

  // optional .sync_pb.AuthenticateResponse authenticate = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->authenticate_, output);
  }

  // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error_code(), output);
  }

  // optional string error_message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->error_message(), output);
  }

  // optional string store_birthday = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->store_birthday(), output);
  }

  // optional .sync_pb.ClientCommand client_command = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->client_command_, output);
  }

  // optional .sync_pb.ProfilingData profiling_data = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->profiling_data_, output);
  }

  // optional .sync_pb.DeprecatedMessage deprecated_field_9 = 9 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->deprecated_field_9_, output);
  }

  // optional .sync_pb.GetUpdatesMetadataResponse stream_metadata = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->stream_metadata_, output);
  }

  // optional .sync_pb.GetUpdatesStreamingResponse stream_data = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->stream_data_, output);
  }

  // repeated int32 migrated_data_type_id = 12;
  for (int i = 0, n = this->migrated_data_type_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->migrated_data_type_id(i), output);
  }

  // optional .sync_pb.ClientToServerResponse.Error error = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->error_, output);
  }

  // optional .sync_pb.ChipBag new_bag_of_chips = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->new_bag_of_chips_, output);
  }

  // optional .sync_pb.ClearServerDataResponse clear_server_data = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->clear_server_data_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientToServerResponse)
}

size_t ClientToServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientToServerResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 migrated_data_type_id = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->migrated_data_type_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->migrated_data_type_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string error_message = 5;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional string store_birthday = 6;
    if (has_store_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_birthday());
    }

    // optional .sync_pb.CommitResponse commit = 1;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->commit_);
    }

    // optional .sync_pb.GetUpdatesResponse get_updates = 2;
    if (has_get_updates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->get_updates_);
    }

    // optional .sync_pb.AuthenticateResponse authenticate = 3;
    if (has_authenticate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->authenticate_);
    }

    // optional .sync_pb.ClientCommand client_command = 7;
    if (has_client_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->client_command_);
    }

    // optional .sync_pb.ProfilingData profiling_data = 8;
    if (has_profiling_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->profiling_data_);
    }

    // optional .sync_pb.DeprecatedMessage deprecated_field_9 = 9 [deprecated = true];
    if (has_deprecated_field_9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deprecated_field_9_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .sync_pb.GetUpdatesMetadataResponse stream_metadata = 10;
    if (has_stream_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stream_metadata_);
    }

    // optional .sync_pb.GetUpdatesStreamingResponse stream_data = 11;
    if (has_stream_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stream_data_);
    }

    // optional .sync_pb.ClientToServerResponse.Error error = 13;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional .sync_pb.ChipBag new_bag_of_chips = 14;
    if (has_new_bag_of_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_bag_of_chips_);
    }

    // optional .sync_pb.ClearServerDataResponse clear_server_data = 15;
    if (has_clear_server_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clear_server_data_);
    }

    // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToServerResponse*>(&from));
}

void ClientToServerResponse::MergeFrom(const ClientToServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientToServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  migrated_data_type_id_.MergeFrom(from.migrated_data_type_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_store_birthday();
      store_birthday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_commit()->::sync_pb::CommitResponse::MergeFrom(from.commit());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_get_updates()->::sync_pb::GetUpdatesResponse::MergeFrom(from.get_updates());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_authenticate()->::sync_pb::AuthenticateResponse::MergeFrom(from.authenticate());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_client_command()->::sync_pb::ClientCommand::MergeFrom(from.client_command());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_profiling_data()->::sync_pb::ProfilingData::MergeFrom(from.profiling_data());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_deprecated_field_9()->::sync_pb::DeprecatedMessage::MergeFrom(from.deprecated_field_9());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_stream_metadata()->::sync_pb::GetUpdatesMetadataResponse::MergeFrom(from.stream_metadata());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_stream_data()->::sync_pb::GetUpdatesStreamingResponse::MergeFrom(from.stream_data());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_error()->::sync_pb::ClientToServerResponse_Error::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_new_bag_of_chips()->::sync_pb::ChipBag::MergeFrom(from.new_bag_of_chips());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_clear_server_data()->::sync_pb::ClearServerDataResponse::MergeFrom(from.clear_server_data());
    }
    if (cached_has_bits & 0x00002000u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientToServerResponse::CopyFrom(const ClientToServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientToServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerResponse::IsInitialized() const {
  if (has_commit()) {
    if (!this->commit_->IsInitialized()) return false;
  }
  if (has_get_updates()) {
    if (!this->get_updates_->IsInitialized()) return false;
  }
  if (has_authenticate()) {
    if (!this->authenticate_->IsInitialized()) return false;
  }
  if (has_stream_data()) {
    if (!this->stream_data_->IsInitialized()) return false;
  }
  return true;
}

void ClientToServerResponse::Swap(ClientToServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServerResponse::InternalSwap(ClientToServerResponse* other) {
  migrated_data_type_id_.InternalSwap(&other->migrated_data_type_id_);
  error_message_.Swap(&other->error_message_);
  store_birthday_.Swap(&other->store_birthday_);
  std::swap(commit_, other->commit_);
  std::swap(get_updates_, other->get_updates_);
  std::swap(authenticate_, other->authenticate_);
  std::swap(client_command_, other->client_command_);
  std::swap(profiling_data_, other->profiling_data_);
  std::swap(deprecated_field_9_, other->deprecated_field_9_);
  std::swap(stream_metadata_, other->stream_metadata_);
  std::swap(stream_data_, other->stream_data_);
  std::swap(error_, other->error_);
  std::swap(new_bag_of_chips_, other->new_bag_of_chips_);
  std::swap(clear_server_data_, other->clear_server_data_);
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientToServerResponse::GetTypeName() const {
  return "sync_pb.ClientToServerResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientToServerResponse

// optional .sync_pb.CommitResponse commit = 1;
bool ClientToServerResponse::has_commit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientToServerResponse::set_has_commit() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientToServerResponse::clear_has_commit() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientToServerResponse::clear_commit() {
  if (commit_ != NULL) commit_->::sync_pb::CommitResponse::Clear();
  clear_has_commit();
}
const ::sync_pb::CommitResponse& ClientToServerResponse::commit() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.commit)
  return commit_ != NULL ? *commit_
                         : *::sync_pb::CommitResponse::internal_default_instance();
}
::sync_pb::CommitResponse* ClientToServerResponse::mutable_commit() {
  set_has_commit();
  if (commit_ == NULL) {
    commit_ = new ::sync_pb::CommitResponse;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.commit)
  return commit_;
}
::sync_pb::CommitResponse* ClientToServerResponse::release_commit() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.commit)
  clear_has_commit();
  ::sync_pb::CommitResponse* temp = commit_;
  commit_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_commit(::sync_pb::CommitResponse* commit) {
  delete commit_;
  commit_ = commit;
  if (commit) {
    set_has_commit();
  } else {
    clear_has_commit();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.commit)
}

// optional .sync_pb.GetUpdatesResponse get_updates = 2;
bool ClientToServerResponse::has_get_updates() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientToServerResponse::set_has_get_updates() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientToServerResponse::clear_has_get_updates() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientToServerResponse::clear_get_updates() {
  if (get_updates_ != NULL) get_updates_->::sync_pb::GetUpdatesResponse::Clear();
  clear_has_get_updates();
}
const ::sync_pb::GetUpdatesResponse& ClientToServerResponse::get_updates() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.get_updates)
  return get_updates_ != NULL ? *get_updates_
                         : *::sync_pb::GetUpdatesResponse::internal_default_instance();
}
::sync_pb::GetUpdatesResponse* ClientToServerResponse::mutable_get_updates() {
  set_has_get_updates();
  if (get_updates_ == NULL) {
    get_updates_ = new ::sync_pb::GetUpdatesResponse;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.get_updates)
  return get_updates_;
}
::sync_pb::GetUpdatesResponse* ClientToServerResponse::release_get_updates() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.get_updates)
  clear_has_get_updates();
  ::sync_pb::GetUpdatesResponse* temp = get_updates_;
  get_updates_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_get_updates(::sync_pb::GetUpdatesResponse* get_updates) {
  delete get_updates_;
  get_updates_ = get_updates;
  if (get_updates) {
    set_has_get_updates();
  } else {
    clear_has_get_updates();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.get_updates)
}

// optional .sync_pb.AuthenticateResponse authenticate = 3;
bool ClientToServerResponse::has_authenticate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientToServerResponse::set_has_authenticate() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientToServerResponse::clear_has_authenticate() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientToServerResponse::clear_authenticate() {
  if (authenticate_ != NULL) authenticate_->::sync_pb::AuthenticateResponse::Clear();
  clear_has_authenticate();
}
const ::sync_pb::AuthenticateResponse& ClientToServerResponse::authenticate() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.authenticate)
  return authenticate_ != NULL ? *authenticate_
                         : *::sync_pb::AuthenticateResponse::internal_default_instance();
}
::sync_pb::AuthenticateResponse* ClientToServerResponse::mutable_authenticate() {
  set_has_authenticate();
  if (authenticate_ == NULL) {
    authenticate_ = new ::sync_pb::AuthenticateResponse;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.authenticate)
  return authenticate_;
}
::sync_pb::AuthenticateResponse* ClientToServerResponse::release_authenticate() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.authenticate)
  clear_has_authenticate();
  ::sync_pb::AuthenticateResponse* temp = authenticate_;
  authenticate_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_authenticate(::sync_pb::AuthenticateResponse* authenticate) {
  delete authenticate_;
  authenticate_ = authenticate;
  if (authenticate) {
    set_has_authenticate();
  } else {
    clear_has_authenticate();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.authenticate)
}

// optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
bool ClientToServerResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ClientToServerResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00002000u;
}
void ClientToServerResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00002000u;
}
void ClientToServerResponse::clear_error_code() {
  error_code_ = 100;
  clear_has_error_code();
}
::sync_pb::SyncEnums_ErrorType ClientToServerResponse::error_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.error_code)
  return static_cast< ::sync_pb::SyncEnums_ErrorType >(error_code_);
}
void ClientToServerResponse::set_error_code(::sync_pb::SyncEnums_ErrorType value) {
  assert(::sync_pb::SyncEnums_ErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.error_code)
}

// optional string error_message = 5;
bool ClientToServerResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientToServerResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientToServerResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientToServerResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& ClientToServerResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.error_message)
  return error_message_.GetNoArena();
}
void ClientToServerResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.error_message)
}
#if LANG_CXX11
void ClientToServerResponse::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerResponse.error_message)
}
#endif
void ClientToServerResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerResponse.error_message)
}
void ClientToServerResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerResponse.error_message)
}
::std::string* ClientToServerResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientToServerResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientToServerResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.error_message)
}

// optional string store_birthday = 6;
bool ClientToServerResponse::has_store_birthday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientToServerResponse::set_has_store_birthday() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientToServerResponse::clear_has_store_birthday() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientToServerResponse::clear_store_birthday() {
  store_birthday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_store_birthday();
}
const ::std::string& ClientToServerResponse::store_birthday() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.store_birthday)
  return store_birthday_.GetNoArena();
}
void ClientToServerResponse::set_store_birthday(const ::std::string& value) {
  set_has_store_birthday();
  store_birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.store_birthday)
}
#if LANG_CXX11
void ClientToServerResponse::set_store_birthday(::std::string&& value) {
  set_has_store_birthday();
  store_birthday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerResponse.store_birthday)
}
#endif
void ClientToServerResponse::set_store_birthday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_store_birthday();
  store_birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerResponse.store_birthday)
}
void ClientToServerResponse::set_store_birthday(const char* value, size_t size) {
  set_has_store_birthday();
  store_birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerResponse.store_birthday)
}
::std::string* ClientToServerResponse::mutable_store_birthday() {
  set_has_store_birthday();
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.store_birthday)
  return store_birthday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientToServerResponse::release_store_birthday() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.store_birthday)
  clear_has_store_birthday();
  return store_birthday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientToServerResponse::set_allocated_store_birthday(::std::string* store_birthday) {
  if (store_birthday != NULL) {
    set_has_store_birthday();
  } else {
    clear_has_store_birthday();
  }
  store_birthday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store_birthday);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.store_birthday)
}

// optional .sync_pb.ClientCommand client_command = 7;
bool ClientToServerResponse::has_client_command() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientToServerResponse::set_has_client_command() {
  _has_bits_[0] |= 0x00000020u;
}
void ClientToServerResponse::clear_has_client_command() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClientToServerResponse::clear_client_command() {
  if (client_command_ != NULL) client_command_->::sync_pb::ClientCommand::Clear();
  clear_has_client_command();
}
const ::sync_pb::ClientCommand& ClientToServerResponse::client_command() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.client_command)
  return client_command_ != NULL ? *client_command_
                         : *::sync_pb::ClientCommand::internal_default_instance();
}
::sync_pb::ClientCommand* ClientToServerResponse::mutable_client_command() {
  set_has_client_command();
  if (client_command_ == NULL) {
    client_command_ = new ::sync_pb::ClientCommand;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.client_command)
  return client_command_;
}
::sync_pb::ClientCommand* ClientToServerResponse::release_client_command() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.client_command)
  clear_has_client_command();
  ::sync_pb::ClientCommand* temp = client_command_;
  client_command_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_client_command(::sync_pb::ClientCommand* client_command) {
  delete client_command_;
  client_command_ = client_command;
  if (client_command) {
    set_has_client_command();
  } else {
    clear_has_client_command();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.client_command)
}

// optional .sync_pb.ProfilingData profiling_data = 8;
bool ClientToServerResponse::has_profiling_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClientToServerResponse::set_has_profiling_data() {
  _has_bits_[0] |= 0x00000040u;
}
void ClientToServerResponse::clear_has_profiling_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClientToServerResponse::clear_profiling_data() {
  if (profiling_data_ != NULL) profiling_data_->::sync_pb::ProfilingData::Clear();
  clear_has_profiling_data();
}
const ::sync_pb::ProfilingData& ClientToServerResponse::profiling_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.profiling_data)
  return profiling_data_ != NULL ? *profiling_data_
                         : *::sync_pb::ProfilingData::internal_default_instance();
}
::sync_pb::ProfilingData* ClientToServerResponse::mutable_profiling_data() {
  set_has_profiling_data();
  if (profiling_data_ == NULL) {
    profiling_data_ = new ::sync_pb::ProfilingData;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.profiling_data)
  return profiling_data_;
}
::sync_pb::ProfilingData* ClientToServerResponse::release_profiling_data() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.profiling_data)
  clear_has_profiling_data();
  ::sync_pb::ProfilingData* temp = profiling_data_;
  profiling_data_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_profiling_data(::sync_pb::ProfilingData* profiling_data) {
  delete profiling_data_;
  profiling_data_ = profiling_data;
  if (profiling_data) {
    set_has_profiling_data();
  } else {
    clear_has_profiling_data();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.profiling_data)
}

// optional .sync_pb.DeprecatedMessage deprecated_field_9 = 9 [deprecated = true];
bool ClientToServerResponse::has_deprecated_field_9() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ClientToServerResponse::set_has_deprecated_field_9() {
  _has_bits_[0] |= 0x00000080u;
}
void ClientToServerResponse::clear_has_deprecated_field_9() {
  _has_bits_[0] &= ~0x00000080u;
}
void ClientToServerResponse::clear_deprecated_field_9() {
  if (deprecated_field_9_ != NULL) deprecated_field_9_->::sync_pb::DeprecatedMessage::Clear();
  clear_has_deprecated_field_9();
}
const ::sync_pb::DeprecatedMessage& ClientToServerResponse::deprecated_field_9() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.deprecated_field_9)
  return deprecated_field_9_ != NULL ? *deprecated_field_9_
                         : *::sync_pb::DeprecatedMessage::internal_default_instance();
}
::sync_pb::DeprecatedMessage* ClientToServerResponse::mutable_deprecated_field_9() {
  set_has_deprecated_field_9();
  if (deprecated_field_9_ == NULL) {
    deprecated_field_9_ = new ::sync_pb::DeprecatedMessage;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.deprecated_field_9)
  return deprecated_field_9_;
}
::sync_pb::DeprecatedMessage* ClientToServerResponse::release_deprecated_field_9() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.deprecated_field_9)
  clear_has_deprecated_field_9();
  ::sync_pb::DeprecatedMessage* temp = deprecated_field_9_;
  deprecated_field_9_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_deprecated_field_9(::sync_pb::DeprecatedMessage* deprecated_field_9) {
  delete deprecated_field_9_;
  deprecated_field_9_ = deprecated_field_9;
  if (deprecated_field_9) {
    set_has_deprecated_field_9();
  } else {
    clear_has_deprecated_field_9();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.deprecated_field_9)
}

// optional .sync_pb.GetUpdatesMetadataResponse stream_metadata = 10;
bool ClientToServerResponse::has_stream_metadata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ClientToServerResponse::set_has_stream_metadata() {
  _has_bits_[0] |= 0x00000100u;
}
void ClientToServerResponse::clear_has_stream_metadata() {
  _has_bits_[0] &= ~0x00000100u;
}
void ClientToServerResponse::clear_stream_metadata() {
  if (stream_metadata_ != NULL) stream_metadata_->::sync_pb::GetUpdatesMetadataResponse::Clear();
  clear_has_stream_metadata();
}
const ::sync_pb::GetUpdatesMetadataResponse& ClientToServerResponse::stream_metadata() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.stream_metadata)
  return stream_metadata_ != NULL ? *stream_metadata_
                         : *::sync_pb::GetUpdatesMetadataResponse::internal_default_instance();
}
::sync_pb::GetUpdatesMetadataResponse* ClientToServerResponse::mutable_stream_metadata() {
  set_has_stream_metadata();
  if (stream_metadata_ == NULL) {
    stream_metadata_ = new ::sync_pb::GetUpdatesMetadataResponse;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.stream_metadata)
  return stream_metadata_;
}
::sync_pb::GetUpdatesMetadataResponse* ClientToServerResponse::release_stream_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.stream_metadata)
  clear_has_stream_metadata();
  ::sync_pb::GetUpdatesMetadataResponse* temp = stream_metadata_;
  stream_metadata_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_stream_metadata(::sync_pb::GetUpdatesMetadataResponse* stream_metadata) {
  delete stream_metadata_;
  stream_metadata_ = stream_metadata;
  if (stream_metadata) {
    set_has_stream_metadata();
  } else {
    clear_has_stream_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.stream_metadata)
}

// optional .sync_pb.GetUpdatesStreamingResponse stream_data = 11;
bool ClientToServerResponse::has_stream_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ClientToServerResponse::set_has_stream_data() {
  _has_bits_[0] |= 0x00000200u;
}
void ClientToServerResponse::clear_has_stream_data() {
  _has_bits_[0] &= ~0x00000200u;
}
void ClientToServerResponse::clear_stream_data() {
  if (stream_data_ != NULL) stream_data_->::sync_pb::GetUpdatesStreamingResponse::Clear();
  clear_has_stream_data();
}
const ::sync_pb::GetUpdatesStreamingResponse& ClientToServerResponse::stream_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.stream_data)
  return stream_data_ != NULL ? *stream_data_
                         : *::sync_pb::GetUpdatesStreamingResponse::internal_default_instance();
}
::sync_pb::GetUpdatesStreamingResponse* ClientToServerResponse::mutable_stream_data() {
  set_has_stream_data();
  if (stream_data_ == NULL) {
    stream_data_ = new ::sync_pb::GetUpdatesStreamingResponse;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.stream_data)
  return stream_data_;
}
::sync_pb::GetUpdatesStreamingResponse* ClientToServerResponse::release_stream_data() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.stream_data)
  clear_has_stream_data();
  ::sync_pb::GetUpdatesStreamingResponse* temp = stream_data_;
  stream_data_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_stream_data(::sync_pb::GetUpdatesStreamingResponse* stream_data) {
  delete stream_data_;
  stream_data_ = stream_data;
  if (stream_data) {
    set_has_stream_data();
  } else {
    clear_has_stream_data();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.stream_data)
}

// repeated int32 migrated_data_type_id = 12;
int ClientToServerResponse::migrated_data_type_id_size() const {
  return migrated_data_type_id_.size();
}
void ClientToServerResponse::clear_migrated_data_type_id() {
  migrated_data_type_id_.Clear();
}
::google::protobuf::int32 ClientToServerResponse::migrated_data_type_id(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.migrated_data_type_id)
  return migrated_data_type_id_.Get(index);
}
void ClientToServerResponse::set_migrated_data_type_id(int index, ::google::protobuf::int32 value) {
  migrated_data_type_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.migrated_data_type_id)
}
void ClientToServerResponse::add_migrated_data_type_id(::google::protobuf::int32 value) {
  migrated_data_type_id_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.ClientToServerResponse.migrated_data_type_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientToServerResponse::migrated_data_type_id() const {
  // @@protoc_insertion_point(field_list:sync_pb.ClientToServerResponse.migrated_data_type_id)
  return migrated_data_type_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientToServerResponse::mutable_migrated_data_type_id() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.ClientToServerResponse.migrated_data_type_id)
  return &migrated_data_type_id_;
}

// optional .sync_pb.ClientToServerResponse.Error error = 13;
bool ClientToServerResponse::has_error() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ClientToServerResponse::set_has_error() {
  _has_bits_[0] |= 0x00000400u;
}
void ClientToServerResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000400u;
}
void ClientToServerResponse::clear_error() {
  if (error_ != NULL) error_->::sync_pb::ClientToServerResponse_Error::Clear();
  clear_has_error();
}
const ::sync_pb::ClientToServerResponse_Error& ClientToServerResponse::error() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.error)
  return error_ != NULL ? *error_
                         : *::sync_pb::ClientToServerResponse_Error::internal_default_instance();
}
::sync_pb::ClientToServerResponse_Error* ClientToServerResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::sync_pb::ClientToServerResponse_Error;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.error)
  return error_;
}
::sync_pb::ClientToServerResponse_Error* ClientToServerResponse::release_error() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.error)
  clear_has_error();
  ::sync_pb::ClientToServerResponse_Error* temp = error_;
  error_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_error(::sync_pb::ClientToServerResponse_Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.error)
}

// optional .sync_pb.ChipBag new_bag_of_chips = 14;
bool ClientToServerResponse::has_new_bag_of_chips() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ClientToServerResponse::set_has_new_bag_of_chips() {
  _has_bits_[0] |= 0x00000800u;
}
void ClientToServerResponse::clear_has_new_bag_of_chips() {
  _has_bits_[0] &= ~0x00000800u;
}
void ClientToServerResponse::clear_new_bag_of_chips() {
  if (new_bag_of_chips_ != NULL) new_bag_of_chips_->::sync_pb::ChipBag::Clear();
  clear_has_new_bag_of_chips();
}
const ::sync_pb::ChipBag& ClientToServerResponse::new_bag_of_chips() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.new_bag_of_chips)
  return new_bag_of_chips_ != NULL ? *new_bag_of_chips_
                         : *::sync_pb::ChipBag::internal_default_instance();
}
::sync_pb::ChipBag* ClientToServerResponse::mutable_new_bag_of_chips() {
  set_has_new_bag_of_chips();
  if (new_bag_of_chips_ == NULL) {
    new_bag_of_chips_ = new ::sync_pb::ChipBag;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.new_bag_of_chips)
  return new_bag_of_chips_;
}
::sync_pb::ChipBag* ClientToServerResponse::release_new_bag_of_chips() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.new_bag_of_chips)
  clear_has_new_bag_of_chips();
  ::sync_pb::ChipBag* temp = new_bag_of_chips_;
  new_bag_of_chips_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_new_bag_of_chips(::sync_pb::ChipBag* new_bag_of_chips) {
  delete new_bag_of_chips_;
  new_bag_of_chips_ = new_bag_of_chips;
  if (new_bag_of_chips) {
    set_has_new_bag_of_chips();
  } else {
    clear_has_new_bag_of_chips();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.new_bag_of_chips)
}

// optional .sync_pb.ClearServerDataResponse clear_server_data = 15;
bool ClientToServerResponse::has_clear_server_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ClientToServerResponse::set_has_clear_server_data() {
  _has_bits_[0] |= 0x00001000u;
}
void ClientToServerResponse::clear_has_clear_server_data() {
  _has_bits_[0] &= ~0x00001000u;
}
void ClientToServerResponse::clear_clear_server_data() {
  if (clear_server_data_ != NULL) clear_server_data_->::sync_pb::ClearServerDataResponse::Clear();
  clear_has_clear_server_data();
}
const ::sync_pb::ClearServerDataResponse& ClientToServerResponse::clear_server_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.clear_server_data)
  return clear_server_data_ != NULL ? *clear_server_data_
                         : *::sync_pb::ClearServerDataResponse::internal_default_instance();
}
::sync_pb::ClearServerDataResponse* ClientToServerResponse::mutable_clear_server_data() {
  set_has_clear_server_data();
  if (clear_server_data_ == NULL) {
    clear_server_data_ = new ::sync_pb::ClearServerDataResponse;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.clear_server_data)
  return clear_server_data_;
}
::sync_pb::ClearServerDataResponse* ClientToServerResponse::release_clear_server_data() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.clear_server_data)
  clear_has_clear_server_data();
  ::sync_pb::ClearServerDataResponse* temp = clear_server_data_;
  clear_server_data_ = NULL;
  return temp;
}
void ClientToServerResponse::set_allocated_clear_server_data(::sync_pb::ClearServerDataResponse* clear_server_data) {
  delete clear_server_data_;
  clear_server_data_ = clear_server_data;
  if (clear_server_data) {
    set_has_clear_server_data();
  } else {
    clear_has_clear_server_data();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.clear_server_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventRequest::kSyncDisabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventRequest::EventRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.EventRequest)
}
EventRequest::EventRequest(const EventRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sync_disabled()) {
    sync_disabled_ = new ::sync_pb::SyncDisabledEvent(*from.sync_disabled_);
  } else {
    sync_disabled_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.EventRequest)
}

void EventRequest::SharedCtor() {
  _cached_size_ = 0;
  sync_disabled_ = NULL;
}

EventRequest::~EventRequest() {
  // @@protoc_insertion_point(destructor:sync_pb.EventRequest)
  SharedDtor();
}

void EventRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete sync_disabled_;
  }
}

void EventRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EventRequest& EventRequest::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventRequest* EventRequest::New(::google::protobuf::Arena* arena) const {
  EventRequest* n = new EventRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EventRequest)
  if (has_sync_disabled()) {
    GOOGLE_DCHECK(sync_disabled_ != NULL);
    sync_disabled_->::sync_pb::SyncDisabledEvent::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EventRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.EventRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SyncDisabledEvent sync_disabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_disabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.EventRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.EventRequest)
  return false;
#undef DO_
}

void EventRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.EventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.SyncDisabledEvent sync_disabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->sync_disabled_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.EventRequest)
}

size_t EventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EventRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .sync_pb.SyncDisabledEvent sync_disabled = 1;
  if (has_sync_disabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sync_disabled_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EventRequest*>(&from));
}

void EventRequest::MergeFrom(const EventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sync_disabled()) {
    mutable_sync_disabled()->::sync_pb::SyncDisabledEvent::MergeFrom(from.sync_disabled());
  }
}

void EventRequest::CopyFrom(const EventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventRequest::IsInitialized() const {
  return true;
}

void EventRequest::Swap(EventRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventRequest::InternalSwap(EventRequest* other) {
  std::swap(sync_disabled_, other->sync_disabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EventRequest::GetTypeName() const {
  return "sync_pb.EventRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventRequest

// optional .sync_pb.SyncDisabledEvent sync_disabled = 1;
bool EventRequest::has_sync_disabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EventRequest::set_has_sync_disabled() {
  _has_bits_[0] |= 0x00000001u;
}
void EventRequest::clear_has_sync_disabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void EventRequest::clear_sync_disabled() {
  if (sync_disabled_ != NULL) sync_disabled_->::sync_pb::SyncDisabledEvent::Clear();
  clear_has_sync_disabled();
}
const ::sync_pb::SyncDisabledEvent& EventRequest::sync_disabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.EventRequest.sync_disabled)
  return sync_disabled_ != NULL ? *sync_disabled_
                         : *::sync_pb::SyncDisabledEvent::internal_default_instance();
}
::sync_pb::SyncDisabledEvent* EventRequest::mutable_sync_disabled() {
  set_has_sync_disabled();
  if (sync_disabled_ == NULL) {
    sync_disabled_ = new ::sync_pb::SyncDisabledEvent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EventRequest.sync_disabled)
  return sync_disabled_;
}
::sync_pb::SyncDisabledEvent* EventRequest::release_sync_disabled() {
  // @@protoc_insertion_point(field_release:sync_pb.EventRequest.sync_disabled)
  clear_has_sync_disabled();
  ::sync_pb::SyncDisabledEvent* temp = sync_disabled_;
  sync_disabled_ = NULL;
  return temp;
}
void EventRequest::set_allocated_sync_disabled(::sync_pb::SyncDisabledEvent* sync_disabled) {
  delete sync_disabled_;
  sync_disabled_ = sync_disabled;
  if (sync_disabled) {
    set_has_sync_disabled();
  } else {
    clear_has_sync_disabled();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EventRequest.sync_disabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventResponse::EventResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.EventResponse)
}
EventResponse::EventResponse(const EventResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.EventResponse)
}

void EventResponse::SharedCtor() {
  _cached_size_ = 0;
}

EventResponse::~EventResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.EventResponse)
  SharedDtor();
}

void EventResponse::SharedDtor() {
}

void EventResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EventResponse& EventResponse::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventResponse* EventResponse::New(::google::protobuf::Arena* arena) const {
  EventResponse* n = new EventResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EventResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.EventResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.EventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.EventResponse)
  return false;
#undef DO_
}

void EventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.EventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.EventResponse)
}

size_t EventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EventResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EventResponse*>(&from));
}

void EventResponse::MergeFrom(const EventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EventResponse::CopyFrom(const EventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventResponse::IsInitialized() const {
  return true;
}

void EventResponse::Swap(EventResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventResponse::InternalSwap(EventResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EventResponse::GetTypeName() const {
  return "sync_pb.EventResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncDisabledEvent::kCacheGuidFieldNumber;
const int SyncDisabledEvent::kStoreBirthdayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncDisabledEvent::SyncDisabledEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SyncDisabledEvent)
}
SyncDisabledEvent::SyncDisabledEvent(const SyncDisabledEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cache_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_guid()) {
    cache_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
  }
  store_birthday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_birthday()) {
    store_birthday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SyncDisabledEvent)
}

void SyncDisabledEvent::SharedCtor() {
  _cached_size_ = 0;
  cache_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_birthday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SyncDisabledEvent::~SyncDisabledEvent() {
  // @@protoc_insertion_point(destructor:sync_pb.SyncDisabledEvent)
  SharedDtor();
}

void SyncDisabledEvent::SharedDtor() {
  cache_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_birthday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SyncDisabledEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncDisabledEvent& SyncDisabledEvent::default_instance() {
  protobuf_sync_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncDisabledEvent* SyncDisabledEvent::New(::google::protobuf::Arena* arena) const {
  SyncDisabledEvent* n = new SyncDisabledEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncDisabledEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SyncDisabledEvent)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cache_guid()) {
      GOOGLE_DCHECK(!cache_guid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cache_guid_.UnsafeRawStringPointer())->clear();
    }
    if (has_store_birthday()) {
      GOOGLE_DCHECK(!store_birthday_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*store_birthday_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncDisabledEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SyncDisabledEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cache_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string store_birthday = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_birthday()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SyncDisabledEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SyncDisabledEvent)
  return false;
#undef DO_
}

void SyncDisabledEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SyncDisabledEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cache_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cache_guid(), output);
  }

  // optional string store_birthday = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->store_birthday(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SyncDisabledEvent)
}

size_t SyncDisabledEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SyncDisabledEvent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string cache_guid = 1;
    if (has_cache_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_guid());
    }

    // optional string store_birthday = 2;
    if (has_store_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_birthday());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncDisabledEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncDisabledEvent*>(&from));
}

void SyncDisabledEvent::MergeFrom(const SyncDisabledEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SyncDisabledEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cache_guid();
      cache_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_store_birthday();
      store_birthday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
    }
  }
}

void SyncDisabledEvent::CopyFrom(const SyncDisabledEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SyncDisabledEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncDisabledEvent::IsInitialized() const {
  return true;
}

void SyncDisabledEvent::Swap(SyncDisabledEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncDisabledEvent::InternalSwap(SyncDisabledEvent* other) {
  cache_guid_.Swap(&other->cache_guid_);
  store_birthday_.Swap(&other->store_birthday_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SyncDisabledEvent::GetTypeName() const {
  return "sync_pb.SyncDisabledEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncDisabledEvent

// optional string cache_guid = 1;
bool SyncDisabledEvent::has_cache_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncDisabledEvent::set_has_cache_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncDisabledEvent::clear_has_cache_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncDisabledEvent::clear_cache_guid() {
  cache_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cache_guid();
}
const ::std::string& SyncDisabledEvent::cache_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncDisabledEvent.cache_guid)
  return cache_guid_.GetNoArena();
}
void SyncDisabledEvent::set_cache_guid(const ::std::string& value) {
  set_has_cache_guid();
  cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncDisabledEvent.cache_guid)
}
#if LANG_CXX11
void SyncDisabledEvent::set_cache_guid(::std::string&& value) {
  set_has_cache_guid();
  cache_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncDisabledEvent.cache_guid)
}
#endif
void SyncDisabledEvent::set_cache_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cache_guid();
  cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncDisabledEvent.cache_guid)
}
void SyncDisabledEvent::set_cache_guid(const char* value, size_t size) {
  set_has_cache_guid();
  cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncDisabledEvent.cache_guid)
}
::std::string* SyncDisabledEvent::mutable_cache_guid() {
  set_has_cache_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncDisabledEvent.cache_guid)
  return cache_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncDisabledEvent::release_cache_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncDisabledEvent.cache_guid)
  clear_has_cache_guid();
  return cache_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncDisabledEvent::set_allocated_cache_guid(::std::string* cache_guid) {
  if (cache_guid != NULL) {
    set_has_cache_guid();
  } else {
    clear_has_cache_guid();
  }
  cache_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cache_guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncDisabledEvent.cache_guid)
}

// optional string store_birthday = 2;
bool SyncDisabledEvent::has_store_birthday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncDisabledEvent::set_has_store_birthday() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncDisabledEvent::clear_has_store_birthday() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncDisabledEvent::clear_store_birthday() {
  store_birthday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_store_birthday();
}
const ::std::string& SyncDisabledEvent::store_birthday() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncDisabledEvent.store_birthday)
  return store_birthday_.GetNoArena();
}
void SyncDisabledEvent::set_store_birthday(const ::std::string& value) {
  set_has_store_birthday();
  store_birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncDisabledEvent.store_birthday)
}
#if LANG_CXX11
void SyncDisabledEvent::set_store_birthday(::std::string&& value) {
  set_has_store_birthday();
  store_birthday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncDisabledEvent.store_birthday)
}
#endif
void SyncDisabledEvent::set_store_birthday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_store_birthday();
  store_birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncDisabledEvent.store_birthday)
}
void SyncDisabledEvent::set_store_birthday(const char* value, size_t size) {
  set_has_store_birthday();
  store_birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncDisabledEvent.store_birthday)
}
::std::string* SyncDisabledEvent::mutable_store_birthday() {
  set_has_store_birthday();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncDisabledEvent.store_birthday)
  return store_birthday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncDisabledEvent::release_store_birthday() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncDisabledEvent.store_birthday)
  clear_has_store_birthday();
  return store_birthday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncDisabledEvent::set_allocated_store_birthday(::std::string* store_birthday) {
  if (store_birthday != NULL) {
    set_has_store_birthday();
  } else {
    clear_has_store_birthday();
  }
  store_birthday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store_birthday);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncDisabledEvent.store_birthday)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
